// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>Your request has conflicting operations. This can occur if you're trying to perform more than one operation on the same resource at the same time.</p>
    ConflictingOperationException(crate::types::error::ConflictingOperationException),
    /// <p>IoT SiteWise can't process your request right now. Try again later.</p>
    InternalFailureException(crate::types::error::InternalFailureException),
    /// <p>The request isn't valid. This can occur if your request contains malformed JSON or unsupported characters. Check your request and try again.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>You've reached the limit for a resource. For example, this can occur if you're trying to associate more than the allowed number of child assets or attempting to create more than the allowed number of properties for an asset model.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The resource already exists.</p>
    ResourceAlreadyExistsException(crate::types::error::ResourceAlreadyExistsException),
    /// <p>The requested resource can't be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The requested service is unavailable.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>Your request exceeded a rate limit. For example, you might have exceeded the number of IoT SiteWise assets that can be created per second, the allowed number of messages per second, and so on.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>You've reached the limit for the number of tags allowed for a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html#tag-conventions">Tag naming limits and requirements</a> in the <i>Amazon Web Services General Reference</i>.</p>
    TooManyTagsException(crate::types::error::TooManyTagsException),
    /// <p>You are not authorized.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictingOperationException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_assets::AssociateAssetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_assets::AssociateAssetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_assets::AssociateAssetsError> for Error {
    fn from(err: crate::operation::associate_assets::AssociateAssetsError) -> Self {
        match err {
            crate::operation::associate_assets::AssociateAssetsError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::associate_assets::AssociateAssetsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::associate_assets::AssociateAssetsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::associate_assets::AssociateAssetsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::associate_assets::AssociateAssetsError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::associate_assets::AssociateAssetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_assets::AssociateAssetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_assets::AssociateAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError> for Error {
    fn from(err: crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError) -> Self {
        match err {
            crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError::ConflictingOperationException(
                inner,
            ) => Error::ConflictingOperationException(inner),
            crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_time_series_to_asset_property::AssociateTimeSeriesToAssetPropertyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError> for Error {
    fn from(err: crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError) -> Self {
        match err {
            crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_associate_project_assets::BatchAssociateProjectAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsError> for Error {
    fn from(err: crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsError) -> Self {
        match err {
            crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError> for Error {
    fn from(err: crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError) -> Self {
        match err {
            crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueError> for Error {
    fn from(err: crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueError) -> Self {
        match err {
            crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryError> for Error {
    fn from(err: crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryError) -> Self {
        match err {
            crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError> for Error {
    fn from(err: crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError) -> Self {
        match err {
            crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_put_asset_property_value::BatchPutAssetPropertyValueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_access_policy::CreateAccessPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_access_policy::CreateAccessPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_access_policy::CreateAccessPolicyError> for Error {
    fn from(err: crate::operation::create_access_policy::CreateAccessPolicyError) -> Self {
        match err {
            crate::operation::create_access_policy::CreateAccessPolicyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::create_access_policy::CreateAccessPolicyError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_access_policy::CreateAccessPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_access_policy::CreateAccessPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_access_policy::CreateAccessPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_access_policy::CreateAccessPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset::CreateAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset::CreateAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_asset::CreateAssetError> for Error {
    fn from(err: crate::operation::create_asset::CreateAssetError) -> Self {
        match err {
            crate::operation::create_asset::CreateAssetError::ConflictingOperationException(inner) => Error::ConflictingOperationException(inner),
            crate::operation::create_asset::CreateAssetError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_asset::CreateAssetError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_asset::CreateAssetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_asset::CreateAssetError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_asset::CreateAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_asset::CreateAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_asset::CreateAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_model::CreateAssetModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_model::CreateAssetModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_asset_model::CreateAssetModelError> for Error {
    fn from(err: crate::operation::create_asset_model::CreateAssetModelError) -> Self {
        match err {
            crate::operation::create_asset_model::CreateAssetModelError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::create_asset_model::CreateAssetModelError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_asset_model::CreateAssetModelError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_asset_model::CreateAssetModelError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_asset_model::CreateAssetModelError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_asset_model::CreateAssetModelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_asset_model::CreateAssetModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_asset_model::CreateAssetModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_bulk_import_job::CreateBulkImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_bulk_import_job::CreateBulkImportJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_bulk_import_job::CreateBulkImportJobError> for Error {
    fn from(err: crate::operation::create_bulk_import_job::CreateBulkImportJobError) -> Self {
        match err {
            crate::operation::create_bulk_import_job::CreateBulkImportJobError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::create_bulk_import_job::CreateBulkImportJobError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::create_bulk_import_job::CreateBulkImportJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_bulk_import_job::CreateBulkImportJobError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_bulk_import_job::CreateBulkImportJobError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_bulk_import_job::CreateBulkImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_bulk_import_job::CreateBulkImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_bulk_import_job::CreateBulkImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_dashboard::CreateDashboardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_dashboard::CreateDashboardError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_dashboard::CreateDashboardError> for Error {
    fn from(err: crate::operation::create_dashboard::CreateDashboardError) -> Self {
        match err {
            crate::operation::create_dashboard::CreateDashboardError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_dashboard::CreateDashboardError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_dashboard::CreateDashboardError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_dashboard::CreateDashboardError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_dashboard::CreateDashboardError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_dashboard::CreateDashboardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_gateway::CreateGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_gateway::CreateGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_gateway::CreateGatewayError> for Error {
    fn from(err: crate::operation::create_gateway::CreateGatewayError) -> Self {
        match err {
            crate::operation::create_gateway::CreateGatewayError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_gateway::CreateGatewayError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_gateway::CreateGatewayError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_gateway::CreateGatewayError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_gateway::CreateGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_gateway::CreateGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_portal::CreatePortalError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_portal::CreatePortalError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_portal::CreatePortalError> for Error {
    fn from(err: crate::operation::create_portal::CreatePortalError) -> Self {
        match err {
            crate::operation::create_portal::CreatePortalError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_portal::CreatePortalError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_portal::CreatePortalError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_portal::CreatePortalError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_portal::CreatePortalError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_portal::CreatePortalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_project::CreateProjectError> for Error {
    fn from(err: crate::operation::create_project::CreateProjectError) -> Self {
        match err {
            crate::operation::create_project::CreateProjectError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_project::CreateProjectError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_project::CreateProjectError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_project::CreateProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_project::CreateProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_project::CreateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_access_policy::DeleteAccessPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_access_policy::DeleteAccessPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_access_policy::DeleteAccessPolicyError> for Error {
    fn from(err: crate::operation::delete_access_policy::DeleteAccessPolicyError) -> Self {
        match err {
            crate::operation::delete_access_policy::DeleteAccessPolicyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::delete_access_policy::DeleteAccessPolicyError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_access_policy::DeleteAccessPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_access_policy::DeleteAccessPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_access_policy::DeleteAccessPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_asset::DeleteAssetError> for Error {
    fn from(err: crate::operation::delete_asset::DeleteAssetError) -> Self {
        match err {
            crate::operation::delete_asset::DeleteAssetError::ConflictingOperationException(inner) => Error::ConflictingOperationException(inner),
            crate::operation::delete_asset::DeleteAssetError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_asset::DeleteAssetError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_asset::DeleteAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_asset::DeleteAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_asset::DeleteAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset_model::DeleteAssetModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset_model::DeleteAssetModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_asset_model::DeleteAssetModelError> for Error {
    fn from(err: crate::operation::delete_asset_model::DeleteAssetModelError) -> Self {
        match err {
            crate::operation::delete_asset_model::DeleteAssetModelError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::delete_asset_model::DeleteAssetModelError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_asset_model::DeleteAssetModelError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_asset_model::DeleteAssetModelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_asset_model::DeleteAssetModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_asset_model::DeleteAssetModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_dashboard::DeleteDashboardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_dashboard::DeleteDashboardError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_dashboard::DeleteDashboardError> for Error {
    fn from(err: crate::operation::delete_dashboard::DeleteDashboardError) -> Self {
        match err {
            crate::operation::delete_dashboard::DeleteDashboardError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_dashboard::DeleteDashboardError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_dashboard::DeleteDashboardError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_dashboard::DeleteDashboardError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_dashboard::DeleteDashboardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_gateway::DeleteGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_gateway::DeleteGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_gateway::DeleteGatewayError> for Error {
    fn from(err: crate::operation::delete_gateway::DeleteGatewayError) -> Self {
        match err {
            crate::operation::delete_gateway::DeleteGatewayError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_portal::DeletePortalError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_portal::DeletePortalError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_portal::DeletePortalError> for Error {
    fn from(err: crate::operation::delete_portal::DeletePortalError) -> Self {
        match err {
            crate::operation::delete_portal::DeletePortalError::ConflictingOperationException(inner) => Error::ConflictingOperationException(inner),
            crate::operation::delete_portal::DeletePortalError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_portal::DeletePortalError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_portal::DeletePortalError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_portal::DeletePortalError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_portal::DeletePortalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_project::DeleteProjectError> for Error {
    fn from(err: crate::operation::delete_project::DeleteProjectError) -> Self {
        match err {
            crate::operation::delete_project::DeleteProjectError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_project::DeleteProjectError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_project::DeleteProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_project::DeleteProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_project::DeleteProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_time_series::DeleteTimeSeriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_time_series::DeleteTimeSeriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_time_series::DeleteTimeSeriesError> for Error {
    fn from(err: crate::operation::delete_time_series::DeleteTimeSeriesError) -> Self {
        match err {
            crate::operation::delete_time_series::DeleteTimeSeriesError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::delete_time_series::DeleteTimeSeriesError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_time_series::DeleteTimeSeriesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_time_series::DeleteTimeSeriesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_time_series::DeleteTimeSeriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_time_series::DeleteTimeSeriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_access_policy::DescribeAccessPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_access_policy::DescribeAccessPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_access_policy::DescribeAccessPolicyError> for Error {
    fn from(err: crate::operation::describe_access_policy::DescribeAccessPolicyError) -> Self {
        match err {
            crate::operation::describe_access_policy::DescribeAccessPolicyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_access_policy::DescribeAccessPolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::describe_access_policy::DescribeAccessPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_access_policy::DescribeAccessPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_access_policy::DescribeAccessPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_asset::DescribeAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_asset::DescribeAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_asset::DescribeAssetError> for Error {
    fn from(err: crate::operation::describe_asset::DescribeAssetError) -> Self {
        match err {
            crate::operation::describe_asset::DescribeAssetError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::describe_asset::DescribeAssetError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_asset::DescribeAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_asset::DescribeAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_asset::DescribeAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_asset_model::DescribeAssetModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_asset_model::DescribeAssetModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_asset_model::DescribeAssetModelError> for Error {
    fn from(err: crate::operation::describe_asset_model::DescribeAssetModelError) -> Self {
        match err {
            crate::operation::describe_asset_model::DescribeAssetModelError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_asset_model::DescribeAssetModelError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_asset_model::DescribeAssetModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_asset_model::DescribeAssetModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_asset_model::DescribeAssetModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_asset_property::DescribeAssetPropertyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_asset_property::DescribeAssetPropertyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_asset_property::DescribeAssetPropertyError> for Error {
    fn from(err: crate::operation::describe_asset_property::DescribeAssetPropertyError) -> Self {
        match err {
            crate::operation::describe_asset_property::DescribeAssetPropertyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_asset_property::DescribeAssetPropertyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::describe_asset_property::DescribeAssetPropertyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_asset_property::DescribeAssetPropertyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_asset_property::DescribeAssetPropertyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_bulk_import_job::DescribeBulkImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_bulk_import_job::DescribeBulkImportJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_bulk_import_job::DescribeBulkImportJobError> for Error {
    fn from(err: crate::operation::describe_bulk_import_job::DescribeBulkImportJobError) -> Self {
        match err {
            crate::operation::describe_bulk_import_job::DescribeBulkImportJobError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_bulk_import_job::DescribeBulkImportJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::describe_bulk_import_job::DescribeBulkImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_bulk_import_job::DescribeBulkImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_bulk_import_job::DescribeBulkImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_dashboard::DescribeDashboardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_dashboard::DescribeDashboardError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_dashboard::DescribeDashboardError> for Error {
    fn from(err: crate::operation::describe_dashboard::DescribeDashboardError) -> Self {
        match err {
            crate::operation::describe_dashboard::DescribeDashboardError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::describe_dashboard::DescribeDashboardError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_dashboard::DescribeDashboardError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_dashboard::DescribeDashboardError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_dashboard::DescribeDashboardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationError> for Error {
    fn from(err: crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationError) -> Self {
        match err {
            crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationError::InternalFailureException(
                inner,
            ) => Error::InternalFailureException(inner),
            crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_gateway::DescribeGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_gateway::DescribeGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_gateway::DescribeGatewayError> for Error {
    fn from(err: crate::operation::describe_gateway::DescribeGatewayError) -> Self {
        match err {
            crate::operation::describe_gateway::DescribeGatewayError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::describe_gateway::DescribeGatewayError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_gateway::DescribeGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_gateway::DescribeGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_gateway::DescribeGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_gateway_capability_configuration::DescribeGatewayCapabilityConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_gateway_capability_configuration::DescribeGatewayCapabilityConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_gateway_capability_configuration::DescribeGatewayCapabilityConfigurationError> for Error {
    fn from(err: crate::operation::describe_gateway_capability_configuration::DescribeGatewayCapabilityConfigurationError) -> Self {
        match err {
            crate::operation::describe_gateway_capability_configuration::DescribeGatewayCapabilityConfigurationError::InternalFailureException(
                inner,
            ) => Error::InternalFailureException(inner),
            crate::operation::describe_gateway_capability_configuration::DescribeGatewayCapabilityConfigurationError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::describe_gateway_capability_configuration::DescribeGatewayCapabilityConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_gateway_capability_configuration::DescribeGatewayCapabilityConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_gateway_capability_configuration::DescribeGatewayCapabilityConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_logging_options::DescribeLoggingOptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_logging_options::DescribeLoggingOptionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_logging_options::DescribeLoggingOptionsError> for Error {
    fn from(err: crate::operation::describe_logging_options::DescribeLoggingOptionsError) -> Self {
        match err {
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_portal::DescribePortalError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_portal::DescribePortalError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_portal::DescribePortalError> for Error {
    fn from(err: crate::operation::describe_portal::DescribePortalError) -> Self {
        match err {
            crate::operation::describe_portal::DescribePortalError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::describe_portal::DescribePortalError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_portal::DescribePortalError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_portal::DescribePortalError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_portal::DescribePortalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_project::DescribeProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_project::DescribeProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_project::DescribeProjectError> for Error {
    fn from(err: crate::operation::describe_project::DescribeProjectError) -> Self {
        match err {
            crate::operation::describe_project::DescribeProjectError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::describe_project::DescribeProjectError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_project::DescribeProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_project::DescribeProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_project::DescribeProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_storage_configuration::DescribeStorageConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_storage_configuration::DescribeStorageConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_storage_configuration::DescribeStorageConfigurationError> for Error {
    fn from(err: crate::operation::describe_storage_configuration::DescribeStorageConfigurationError) -> Self {
        match err {
            crate::operation::describe_storage_configuration::DescribeStorageConfigurationError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::describe_storage_configuration::DescribeStorageConfigurationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_storage_configuration::DescribeStorageConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::describe_storage_configuration::DescribeStorageConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::describe_storage_configuration::DescribeStorageConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_storage_configuration::DescribeStorageConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_storage_configuration::DescribeStorageConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_time_series::DescribeTimeSeriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_time_series::DescribeTimeSeriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_time_series::DescribeTimeSeriesError> for Error {
    fn from(err: crate::operation::describe_time_series::DescribeTimeSeriesError) -> Self {
        match err {
            crate::operation::describe_time_series::DescribeTimeSeriesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_time_series::DescribeTimeSeriesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_time_series::DescribeTimeSeriesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_time_series::DescribeTimeSeriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_time_series::DescribeTimeSeriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_assets::DisassociateAssetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_assets::DisassociateAssetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_assets::DisassociateAssetsError> for Error {
    fn from(err: crate::operation::disassociate_assets::DisassociateAssetsError) -> Self {
        match err {
            crate::operation::disassociate_assets::DisassociateAssetsError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::disassociate_assets::DisassociateAssetsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::disassociate_assets::DisassociateAssetsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::disassociate_assets::DisassociateAssetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_assets::DisassociateAssetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_assets::DisassociateAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError> for Error {
    fn from(err: crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError) -> Self {
        match err {
            crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError::ConflictingOperationException(inner) => Error::ConflictingOperationException(inner),
            crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError> for Error {
    fn from(err: crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError) -> Self {
        match err {
            crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_property_value::GetAssetPropertyValueError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_property_value::GetAssetPropertyValueError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_asset_property_value::GetAssetPropertyValueError> for Error {
    fn from(err: crate::operation::get_asset_property_value::GetAssetPropertyValueError) -> Self {
        match err {
            crate::operation::get_asset_property_value::GetAssetPropertyValueError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_asset_property_value::GetAssetPropertyValueError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_asset_property_value::GetAssetPropertyValueError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_asset_property_value::GetAssetPropertyValueError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_asset_property_value::GetAssetPropertyValueError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_asset_property_value::GetAssetPropertyValueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError> for Error {
    fn from(err: crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError) -> Self {
        match err {
            crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError> for Error {
    fn from(err: crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError) -> Self {
        match err {
            crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_access_policies::ListAccessPoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_access_policies::ListAccessPoliciesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_access_policies::ListAccessPoliciesError> for Error {
    fn from(err: crate::operation::list_access_policies::ListAccessPoliciesError) -> Self {
        match err {
            crate::operation::list_access_policies::ListAccessPoliciesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_access_policies::ListAccessPoliciesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_access_policies::ListAccessPoliciesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_access_policies::ListAccessPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_model_properties::ListAssetModelPropertiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_model_properties::ListAssetModelPropertiesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_asset_model_properties::ListAssetModelPropertiesError> for Error {
    fn from(err: crate::operation::list_asset_model_properties::ListAssetModelPropertiesError) -> Self {
        match err {
            crate::operation::list_asset_model_properties::ListAssetModelPropertiesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_asset_model_properties::ListAssetModelPropertiesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_asset_model_properties::ListAssetModelPropertiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_asset_model_properties::ListAssetModelPropertiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_asset_model_properties::ListAssetModelPropertiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_models::ListAssetModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_models::ListAssetModelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_asset_models::ListAssetModelsError> for Error {
    fn from(err: crate::operation::list_asset_models::ListAssetModelsError) -> Self {
        match err {
            crate::operation::list_asset_models::ListAssetModelsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_asset_models::ListAssetModelsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_asset_models::ListAssetModelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_asset_models::ListAssetModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_properties::ListAssetPropertiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_properties::ListAssetPropertiesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_asset_properties::ListAssetPropertiesError> for Error {
    fn from(err: crate::operation::list_asset_properties::ListAssetPropertiesError) -> Self {
        match err {
            crate::operation::list_asset_properties::ListAssetPropertiesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_asset_properties::ListAssetPropertiesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_asset_properties::ListAssetPropertiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_asset_properties::ListAssetPropertiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_asset_properties::ListAssetPropertiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_relationships::ListAssetRelationshipsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_relationships::ListAssetRelationshipsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_asset_relationships::ListAssetRelationshipsError> for Error {
    fn from(err: crate::operation::list_asset_relationships::ListAssetRelationshipsError) -> Self {
        match err {
            crate::operation::list_asset_relationships::ListAssetRelationshipsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_asset_relationships::ListAssetRelationshipsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_asset_relationships::ListAssetRelationshipsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_asset_relationships::ListAssetRelationshipsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_asset_relationships::ListAssetRelationshipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assets::ListAssetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assets::ListAssetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_assets::ListAssetsError> for Error {
    fn from(err: crate::operation::list_assets::ListAssetsError) -> Self {
        match err {
            crate::operation::list_assets::ListAssetsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_assets::ListAssetsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_assets::ListAssetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_assets::ListAssetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_assets::ListAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_associated_assets::ListAssociatedAssetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_associated_assets::ListAssociatedAssetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_associated_assets::ListAssociatedAssetsError> for Error {
    fn from(err: crate::operation::list_associated_assets::ListAssociatedAssetsError) -> Self {
        match err {
            crate::operation::list_associated_assets::ListAssociatedAssetsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_associated_assets::ListAssociatedAssetsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_associated_assets::ListAssociatedAssetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_associated_assets::ListAssociatedAssetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_associated_assets::ListAssociatedAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bulk_import_jobs::ListBulkImportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bulk_import_jobs::ListBulkImportJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_bulk_import_jobs::ListBulkImportJobsError> for Error {
    fn from(err: crate::operation::list_bulk_import_jobs::ListBulkImportJobsError) -> Self {
        match err {
            crate::operation::list_bulk_import_jobs::ListBulkImportJobsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_bulk_import_jobs::ListBulkImportJobsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_bulk_import_jobs::ListBulkImportJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_bulk_import_jobs::ListBulkImportJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_bulk_import_jobs::ListBulkImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dashboards::ListDashboardsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dashboards::ListDashboardsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_dashboards::ListDashboardsError> for Error {
    fn from(err: crate::operation::list_dashboards::ListDashboardsError) -> Self {
        match err {
            crate::operation::list_dashboards::ListDashboardsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_dashboards::ListDashboardsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_dashboards::ListDashboardsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_dashboards::ListDashboardsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_gateways::ListGatewaysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_gateways::ListGatewaysError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_gateways::ListGatewaysError> for Error {
    fn from(err: crate::operation::list_gateways::ListGatewaysError) -> Self {
        match err {
            crate::operation::list_gateways::ListGatewaysError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_gateways::ListGatewaysError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_gateways::ListGatewaysError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_gateways::ListGatewaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_portals::ListPortalsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_portals::ListPortalsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_portals::ListPortalsError> for Error {
    fn from(err: crate::operation::list_portals::ListPortalsError) -> Self {
        match err {
            crate::operation::list_portals::ListPortalsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_portals::ListPortalsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_portals::ListPortalsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_portals::ListPortalsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_assets::ListProjectAssetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_assets::ListProjectAssetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_project_assets::ListProjectAssetsError> for Error {
    fn from(err: crate::operation::list_project_assets::ListProjectAssetsError) -> Self {
        match err {
            crate::operation::list_project_assets::ListProjectAssetsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_project_assets::ListProjectAssetsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_project_assets::ListProjectAssetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_project_assets::ListProjectAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_projects::ListProjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_projects::ListProjectsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_projects::ListProjectsError> for Error {
    fn from(err: crate::operation::list_projects::ListProjectsError) -> Self {
        match err {
            crate::operation::list_projects::ListProjectsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_projects::ListProjectsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_projects::ListProjectsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_projects::ListProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_time_series::ListTimeSeriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_time_series::ListTimeSeriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_time_series::ListTimeSeriesError> for Error {
    fn from(err: crate::operation::list_time_series::ListTimeSeriesError) -> Self {
        match err {
            crate::operation::list_time_series::ListTimeSeriesError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_time_series::ListTimeSeriesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_time_series::ListTimeSeriesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_time_series::ListTimeSeriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_time_series::ListTimeSeriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError> for Error {
    fn from(err: crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError) -> Self {
        match err {
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_logging_options::PutLoggingOptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_logging_options::PutLoggingOptionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_logging_options::PutLoggingOptionsError> for Error {
    fn from(err: crate::operation::put_logging_options::PutLoggingOptionsError) -> Self {
        match err {
            crate::operation::put_logging_options::PutLoggingOptionsError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::put_logging_options::PutLoggingOptionsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_logging_options::PutLoggingOptionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_storage_configuration::PutStorageConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_storage_configuration::PutStorageConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_storage_configuration::PutStorageConfigurationError> for Error {
    fn from(err: crate::operation::put_storage_configuration::PutStorageConfigurationError) -> Self {
        match err {
            crate::operation::put_storage_configuration::PutStorageConfigurationError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::put_storage_configuration::PutStorageConfigurationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::put_storage_configuration::PutStorageConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::put_storage_configuration::PutStorageConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::put_storage_configuration::PutStorageConfigurationError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::put_storage_configuration::PutStorageConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_storage_configuration::PutStorageConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_storage_configuration::PutStorageConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ConflictingOperationException(inner) => Error::ConflictingOperationException(inner),
            crate::operation::tag_resource::TagResourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::tag_resource::TagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::tag_resource::TagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ConflictingOperationException(inner) => Error::ConflictingOperationException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_access_policy::UpdateAccessPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_access_policy::UpdateAccessPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_access_policy::UpdateAccessPolicyError> for Error {
    fn from(err: crate::operation::update_access_policy::UpdateAccessPolicyError) -> Self {
        match err {
            crate::operation::update_access_policy::UpdateAccessPolicyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::update_access_policy::UpdateAccessPolicyError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_access_policy::UpdateAccessPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_access_policy::UpdateAccessPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_access_policy::UpdateAccessPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_asset::UpdateAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_asset::UpdateAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_asset::UpdateAssetError> for Error {
    fn from(err: crate::operation::update_asset::UpdateAssetError) -> Self {
        match err {
            crate::operation::update_asset::UpdateAssetError::ConflictingOperationException(inner) => Error::ConflictingOperationException(inner),
            crate::operation::update_asset::UpdateAssetError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_asset::UpdateAssetError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_asset::UpdateAssetError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::update_asset::UpdateAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_asset::UpdateAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_asset::UpdateAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_asset_model::UpdateAssetModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_asset_model::UpdateAssetModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_asset_model::UpdateAssetModelError> for Error {
    fn from(err: crate::operation::update_asset_model::UpdateAssetModelError) -> Self {
        match err {
            crate::operation::update_asset_model::UpdateAssetModelError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::update_asset_model::UpdateAssetModelError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_asset_model::UpdateAssetModelError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_asset_model::UpdateAssetModelError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_asset_model::UpdateAssetModelError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::update_asset_model::UpdateAssetModelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_asset_model::UpdateAssetModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_asset_model::UpdateAssetModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_asset_property::UpdateAssetPropertyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_asset_property::UpdateAssetPropertyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_asset_property::UpdateAssetPropertyError> for Error {
    fn from(err: crate::operation::update_asset_property::UpdateAssetPropertyError) -> Self {
        match err {
            crate::operation::update_asset_property::UpdateAssetPropertyError::ConflictingOperationException(inner) => {
                Error::ConflictingOperationException(inner)
            }
            crate::operation::update_asset_property::UpdateAssetPropertyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::update_asset_property::UpdateAssetPropertyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_asset_property::UpdateAssetPropertyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_asset_property::UpdateAssetPropertyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_asset_property::UpdateAssetPropertyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_dashboard::UpdateDashboardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_dashboard::UpdateDashboardError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_dashboard::UpdateDashboardError> for Error {
    fn from(err: crate::operation::update_dashboard::UpdateDashboardError) -> Self {
        match err {
            crate::operation::update_dashboard::UpdateDashboardError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_dashboard::UpdateDashboardError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_dashboard::UpdateDashboardError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_dashboard::UpdateDashboardError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_dashboard::UpdateDashboardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_gateway::UpdateGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_gateway::UpdateGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_gateway::UpdateGatewayError> for Error {
    fn from(err: crate::operation::update_gateway::UpdateGatewayError) -> Self {
        match err {
            crate::operation::update_gateway::UpdateGatewayError::ConflictingOperationException(inner) => Error::ConflictingOperationException(inner),
            crate::operation::update_gateway::UpdateGatewayError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_gateway::UpdateGatewayError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_gateway::UpdateGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_gateway::UpdateGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_gateway::UpdateGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError> for Error {
    fn from(err: crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError) -> Self {
        match err {
            crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError::ConflictingOperationException(
                inner,
            ) => Error::ConflictingOperationException(inner),
            crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_gateway_capability_configuration::UpdateGatewayCapabilityConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_portal::UpdatePortalError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_portal::UpdatePortalError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_portal::UpdatePortalError> for Error {
    fn from(err: crate::operation::update_portal::UpdatePortalError) -> Self {
        match err {
            crate::operation::update_portal::UpdatePortalError::ConflictingOperationException(inner) => Error::ConflictingOperationException(inner),
            crate::operation::update_portal::UpdatePortalError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_portal::UpdatePortalError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_portal::UpdatePortalError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_portal::UpdatePortalError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_portal::UpdatePortalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project::UpdateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project::UpdateProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_project::UpdateProjectError> for Error {
    fn from(err: crate::operation::update_project::UpdateProjectError) -> Self {
        match err {
            crate::operation::update_project::UpdateProjectError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_project::UpdateProjectError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_project::UpdateProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_project::UpdateProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_project::UpdateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ConflictingOperationException(inner) => inner.source(),
            Error::InternalFailureException(inner) => inner.source(),
            Error::InvalidRequestException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::ResourceAlreadyExistsException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::TooManyTagsException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConflictingOperationException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
