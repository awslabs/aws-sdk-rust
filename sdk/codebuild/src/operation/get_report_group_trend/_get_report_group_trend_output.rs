// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetReportGroupTrendOutput {
    /// <p>Contains the accumulated trend data.</p>
    pub stats: ::std::option::Option<crate::types::ReportGroupTrendStats>,
    /// <p>An array that contains the raw data for each report.</p>
    pub raw_data: ::std::option::Option<::std::vec::Vec<crate::types::ReportWithRawData>>,
    _request_id: Option<String>,
}
impl GetReportGroupTrendOutput {
    /// <p>Contains the accumulated trend data.</p>
    pub fn stats(&self) -> ::std::option::Option<&crate::types::ReportGroupTrendStats> {
        self.stats.as_ref()
    }
    /// <p>An array that contains the raw data for each report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.raw_data.is_none()`.
    pub fn raw_data(&self) -> &[crate::types::ReportWithRawData] {
        self.raw_data.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetReportGroupTrendOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetReportGroupTrendOutput {
    /// Creates a new builder-style object to manufacture [`GetReportGroupTrendOutput`](crate::operation::get_report_group_trend::GetReportGroupTrendOutput).
    pub fn builder() -> crate::operation::get_report_group_trend::builders::GetReportGroupTrendOutputBuilder {
        crate::operation::get_report_group_trend::builders::GetReportGroupTrendOutputBuilder::default()
    }
}

/// A builder for [`GetReportGroupTrendOutput`](crate::operation::get_report_group_trend::GetReportGroupTrendOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetReportGroupTrendOutputBuilder {
    pub(crate) stats: ::std::option::Option<crate::types::ReportGroupTrendStats>,
    pub(crate) raw_data: ::std::option::Option<::std::vec::Vec<crate::types::ReportWithRawData>>,
    _request_id: Option<String>,
}
impl GetReportGroupTrendOutputBuilder {
    /// <p>Contains the accumulated trend data.</p>
    pub fn stats(mut self, input: crate::types::ReportGroupTrendStats) -> Self {
        self.stats = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the accumulated trend data.</p>
    pub fn set_stats(mut self, input: ::std::option::Option<crate::types::ReportGroupTrendStats>) -> Self {
        self.stats = input;
        self
    }
    /// <p>Contains the accumulated trend data.</p>
    pub fn get_stats(&self) -> &::std::option::Option<crate::types::ReportGroupTrendStats> {
        &self.stats
    }
    /// Appends an item to `raw_data`.
    ///
    /// To override the contents of this collection use [`set_raw_data`](Self::set_raw_data).
    ///
    /// <p>An array that contains the raw data for each report.</p>
    pub fn raw_data(mut self, input: crate::types::ReportWithRawData) -> Self {
        let mut v = self.raw_data.unwrap_or_default();
        v.push(input);
        self.raw_data = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array that contains the raw data for each report.</p>
    pub fn set_raw_data(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReportWithRawData>>) -> Self {
        self.raw_data = input;
        self
    }
    /// <p>An array that contains the raw data for each report.</p>
    pub fn get_raw_data(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReportWithRawData>> {
        &self.raw_data
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetReportGroupTrendOutput`](crate::operation::get_report_group_trend::GetReportGroupTrendOutput).
    pub fn build(self) -> crate::operation::get_report_group_trend::GetReportGroupTrendOutput {
        crate::operation::get_report_group_trend::GetReportGroupTrendOutput {
            stats: self.stats,
            raw_data: self.raw_data,
            _request_id: self._request_id,
        }
    }
}
