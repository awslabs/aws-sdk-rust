// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProjectVisibilityInput {
    /// <p>The Amazon Resource Name (ARN) of the build project.</p>
    #[doc(hidden)]
    pub project_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the visibility of the project's builds. Possible values are:</p>
    /// <dl>
    /// <dt>
    /// PUBLIC_READ
    /// </dt>
    /// <dd>
    /// <p>The project builds are visible to the public.</p>
    /// </dd>
    /// <dt>
    /// PRIVATE
    /// </dt>
    /// <dd>
    /// <p>The project builds are not visible to the public.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub project_visibility: std::option::Option<crate::types::ProjectVisibilityType>,
    /// <p>The ARN of the IAM role that enables CodeBuild to access the CloudWatch Logs and Amazon S3 artifacts for the project's builds.</p>
    #[doc(hidden)]
    pub resource_access_role: std::option::Option<std::string::String>,
}
impl UpdateProjectVisibilityInput {
    /// <p>The Amazon Resource Name (ARN) of the build project.</p>
    pub fn project_arn(&self) -> std::option::Option<&str> {
        self.project_arn.as_deref()
    }
    /// <p>Specifies the visibility of the project's builds. Possible values are:</p>
    /// <dl>
    /// <dt>
    /// PUBLIC_READ
    /// </dt>
    /// <dd>
    /// <p>The project builds are visible to the public.</p>
    /// </dd>
    /// <dt>
    /// PRIVATE
    /// </dt>
    /// <dd>
    /// <p>The project builds are not visible to the public.</p>
    /// </dd>
    /// </dl>
    pub fn project_visibility(&self) -> std::option::Option<&crate::types::ProjectVisibilityType> {
        self.project_visibility.as_ref()
    }
    /// <p>The ARN of the IAM role that enables CodeBuild to access the CloudWatch Logs and Amazon S3 artifacts for the project's builds.</p>
    pub fn resource_access_role(&self) -> std::option::Option<&str> {
        self.resource_access_role.as_deref()
    }
}
impl UpdateProjectVisibilityInput {
    /// Creates a new builder-style object to manufacture [`UpdateProjectVisibilityInput`](crate::operation::update_project_visibility::UpdateProjectVisibilityInput).
    pub fn builder(
    ) -> crate::operation::update_project_visibility::builders::UpdateProjectVisibilityInputBuilder
    {
        crate::operation::update_project_visibility::builders::UpdateProjectVisibilityInputBuilder::default()
    }
}

/// A builder for [`UpdateProjectVisibilityInput`](crate::operation::update_project_visibility::UpdateProjectVisibilityInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateProjectVisibilityInputBuilder {
    pub(crate) project_arn: std::option::Option<std::string::String>,
    pub(crate) project_visibility: std::option::Option<crate::types::ProjectVisibilityType>,
    pub(crate) resource_access_role: std::option::Option<std::string::String>,
}
impl UpdateProjectVisibilityInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the build project.</p>
    pub fn project_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the build project.</p>
    pub fn set_project_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_arn = input;
        self
    }
    /// <p>Specifies the visibility of the project's builds. Possible values are:</p>
    /// <dl>
    /// <dt>
    /// PUBLIC_READ
    /// </dt>
    /// <dd>
    /// <p>The project builds are visible to the public.</p>
    /// </dd>
    /// <dt>
    /// PRIVATE
    /// </dt>
    /// <dd>
    /// <p>The project builds are not visible to the public.</p>
    /// </dd>
    /// </dl>
    pub fn project_visibility(mut self, input: crate::types::ProjectVisibilityType) -> Self {
        self.project_visibility = Some(input);
        self
    }
    /// <p>Specifies the visibility of the project's builds. Possible values are:</p>
    /// <dl>
    /// <dt>
    /// PUBLIC_READ
    /// </dt>
    /// <dd>
    /// <p>The project builds are visible to the public.</p>
    /// </dd>
    /// <dt>
    /// PRIVATE
    /// </dt>
    /// <dd>
    /// <p>The project builds are not visible to the public.</p>
    /// </dd>
    /// </dl>
    pub fn set_project_visibility(
        mut self,
        input: std::option::Option<crate::types::ProjectVisibilityType>,
    ) -> Self {
        self.project_visibility = input;
        self
    }
    /// <p>The ARN of the IAM role that enables CodeBuild to access the CloudWatch Logs and Amazon S3 artifacts for the project's builds.</p>
    pub fn resource_access_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_access_role = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that enables CodeBuild to access the CloudWatch Logs and Amazon S3 artifacts for the project's builds.</p>
    pub fn set_resource_access_role(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_access_role = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateProjectVisibilityInput`](crate::operation::update_project_visibility::UpdateProjectVisibilityInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_project_visibility::UpdateProjectVisibilityInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_project_visibility::UpdateProjectVisibilityInput {
                project_arn: self.project_arn,
                project_visibility: self.project_visibility,
                resource_access_role: self.resource_access_role,
            },
        )
    }
}
