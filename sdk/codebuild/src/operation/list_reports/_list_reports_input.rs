// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListReportsInput {
    /// <p> Specifies the sort order for the list of returned reports. Valid values are: </p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: return reports in chronological order based on their creation date. </p> </li>
    /// <li> <p> <code>DESCENDING</code>: return reports in the reverse chronological order based on their creation date. </p> </li>
    /// </ul>
    pub sort_order: ::std::option::Option<crate::types::SortOrderType>,
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p> The maximum number of paginated reports returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub max_results: ::std::option::Option<i32>,
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub filter: ::std::option::Option<crate::types::ReportFilter>,
}
impl ListReportsInput {
    /// <p> Specifies the sort order for the list of returned reports. Valid values are: </p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: return reports in chronological order based on their creation date. </p> </li>
    /// <li> <p> <code>DESCENDING</code>: return reports in the reverse chronological order based on their creation date. </p> </li>
    /// </ul>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrderType> {
        self.sort_order.as_ref()
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> The maximum number of paginated reports returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::ReportFilter> {
        self.filter.as_ref()
    }
}
impl ListReportsInput {
    /// Creates a new builder-style object to manufacture [`ListReportsInput`](crate::operation::list_reports::ListReportsInput).
    pub fn builder() -> crate::operation::list_reports::builders::ListReportsInputBuilder {
        crate::operation::list_reports::builders::ListReportsInputBuilder::default()
    }
}

/// A builder for [`ListReportsInput`](crate::operation::list_reports::ListReportsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListReportsInputBuilder {
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrderType>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filter: ::std::option::Option<crate::types::ReportFilter>,
}
impl ListReportsInputBuilder {
    /// <p> Specifies the sort order for the list of returned reports. Valid values are: </p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: return reports in chronological order based on their creation date. </p> </li>
    /// <li> <p> <code>DESCENDING</code>: return reports in the reverse chronological order based on their creation date. </p> </li>
    /// </ul>
    pub fn sort_order(mut self, input: crate::types::SortOrderType) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies the sort order for the list of returned reports. Valid values are: </p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: return reports in chronological order based on their creation date. </p> </li>
    /// <li> <p> <code>DESCENDING</code>: return reports in the reverse chronological order based on their creation date. </p> </li>
    /// </ul>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrderType>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p> Specifies the sort order for the list of returned reports. Valid values are: </p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: return reports in chronological order based on their creation date. </p> </li>
    /// <li> <p> <code>DESCENDING</code>: return reports in the reverse chronological order based on their creation date. </p> </li>
    /// </ul>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrderType> {
        &self.sort_order
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p> The maximum number of paginated reports returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p> The maximum number of paginated reports returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p> The maximum number of paginated reports returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub fn filter(mut self, input: crate::types::ReportFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::ReportFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::ReportFilter> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`ListReportsInput`](crate::operation::list_reports::ListReportsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_reports::ListReportsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_reports::ListReportsInput {
            sort_order: self.sort_order,
            next_token: self.next_token,
            max_results: self.max_results,
            filter: self.filter,
        })
    }
}
