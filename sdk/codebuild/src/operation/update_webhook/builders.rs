// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_webhook::_update_webhook_output::UpdateWebhookOutputBuilder;

pub use crate::operation::update_webhook::_update_webhook_input::UpdateWebhookInputBuilder;

impl crate::operation::update_webhook::builders::UpdateWebhookInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_webhook::UpdateWebhookOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_webhook::UpdateWebhookError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_webhook();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateWebhook`.
///
/// <p>Updates the webhook associated with an CodeBuild build project.</p><note>
/// <p>If you use Bitbucket for your repository, <code>rotateSecret</code> is ignored.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateWebhookFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_webhook::builders::UpdateWebhookInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_webhook::UpdateWebhookOutput,
        crate::operation::update_webhook::UpdateWebhookError,
    > for UpdateWebhookFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_webhook::UpdateWebhookOutput,
            crate::operation::update_webhook::UpdateWebhookError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateWebhookFluentBuilder {
    /// Creates a new `UpdateWebhook`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateWebhook as a reference.
    pub fn as_input(&self) -> &crate::operation::update_webhook::builders::UpdateWebhookInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_webhook::UpdateWebhookOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_webhook::UpdateWebhookError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_webhook::UpdateWebhook::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_webhook::UpdateWebhook::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_webhook::UpdateWebhookOutput,
        crate::operation::update_webhook::UpdateWebhookError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the CodeBuild project.</p>
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.project_name(input.into());
        self
    }
    /// <p>The name of the CodeBuild project.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_project_name(input);
        self
    }
    /// <p>The name of the CodeBuild project.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_project_name()
    }
    /// <p>A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If <code>branchFilter</code> is empty, then all branches are built.</p><note>
    /// <p>It is recommended that you use <code>filterGroups</code> instead of <code>branchFilter</code>.</p>
    /// </note>
    pub fn branch_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.branch_filter(input.into());
        self
    }
    /// <p>A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If <code>branchFilter</code> is empty, then all branches are built.</p><note>
    /// <p>It is recommended that you use <code>filterGroups</code> instead of <code>branchFilter</code>.</p>
    /// </note>
    pub fn set_branch_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_branch_filter(input);
        self
    }
    /// <p>A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If <code>branchFilter</code> is empty, then all branches are built.</p><note>
    /// <p>It is recommended that you use <code>filterGroups</code> instead of <code>branchFilter</code>.</p>
    /// </note>
    pub fn get_branch_filter(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_branch_filter()
    }
    /// <p>A boolean value that specifies whether the associated GitHub repository's secret token should be updated. If you use Bitbucket for your repository, <code>rotateSecret</code> is ignored.</p>
    pub fn rotate_secret(mut self, input: bool) -> Self {
        self.inner = self.inner.rotate_secret(input);
        self
    }
    /// <p>A boolean value that specifies whether the associated GitHub repository's secret token should be updated. If you use Bitbucket for your repository, <code>rotateSecret</code> is ignored.</p>
    pub fn set_rotate_secret(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_rotate_secret(input);
        self
    }
    /// <p>A boolean value that specifies whether the associated GitHub repository's secret token should be updated. If you use Bitbucket for your repository, <code>rotateSecret</code> is ignored.</p>
    pub fn get_rotate_secret(&self) -> &::std::option::Option<bool> {
        self.inner.get_rotate_secret()
    }
    ///
    /// Appends an item to `filterGroups`.
    ///
    /// To override the contents of this collection use [`set_filter_groups`](Self::set_filter_groups).
    ///
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine if a webhook event can trigger a build. A filter group must contain at least one <code>EVENT</code> <code>WebhookFilter</code>.</p>
    pub fn filter_groups(mut self, input: ::std::vec::Vec<crate::types::WebhookFilter>) -> Self {
        self.inner = self.inner.filter_groups(input);
        self
    }
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine if a webhook event can trigger a build. A filter group must contain at least one <code>EVENT</code> <code>WebhookFilter</code>.</p>
    pub fn set_filter_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::WebhookFilter>>>) -> Self {
        self.inner = self.inner.set_filter_groups(input);
        self
    }
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine if a webhook event can trigger a build. A filter group must contain at least one <code>EVENT</code> <code>WebhookFilter</code>.</p>
    pub fn get_filter_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::WebhookFilter>>> {
        self.inner.get_filter_groups()
    }
    /// <p>Specifies the type of build this webhook will trigger.</p>
    pub fn build_type(mut self, input: crate::types::WebhookBuildType) -> Self {
        self.inner = self.inner.build_type(input);
        self
    }
    /// <p>Specifies the type of build this webhook will trigger.</p>
    pub fn set_build_type(mut self, input: ::std::option::Option<crate::types::WebhookBuildType>) -> Self {
        self.inner = self.inner.set_build_type(input);
        self
    }
    /// <p>Specifies the type of build this webhook will trigger.</p>
    pub fn get_build_type(&self) -> &::std::option::Option<crate::types::WebhookBuildType> {
        self.inner.get_build_type()
    }
}
