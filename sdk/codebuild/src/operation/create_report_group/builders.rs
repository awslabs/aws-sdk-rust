// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_report_group::_create_report_group_output::CreateReportGroupOutputBuilder;

pub use crate::operation::create_report_group::_create_report_group_input::CreateReportGroupInputBuilder;

/// Fluent builder constructing a request to `CreateReportGroup`.
///
/// <p> Creates a report group. A report group contains a collection of reports. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateReportGroupFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_report_group::builders::CreateReportGroupInputBuilder,
}
impl CreateReportGroupFluentBuilder {
    /// Creates a new `CreateReportGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_report_group::CreateReportGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_report_group::CreateReportGroupError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_report_group::CreateReportGroupOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_report_group::CreateReportGroupError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the report group. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The name of the report group. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The type of report group. </p>
    pub fn r#type(mut self, input: crate::types::ReportType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p> The type of report group. </p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ReportType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p> A <code>ReportExportConfig</code> object that contains information about where the report group test results are exported. </p>
    pub fn export_config(mut self, input: crate::types::ReportExportConfig) -> Self {
        self.inner = self.inner.export_config(input);
        self
    }
    /// <p> A <code>ReportExportConfig</code> object that contains information about where the report group test results are exported. </p>
    pub fn set_export_config(
        mut self,
        input: std::option::Option<crate::types::ReportExportConfig>,
    ) -> Self {
        self.inner = self.inner.set_export_config(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A list of tag key and value pairs associated with this report group. </p>
    /// <p>These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p> A list of tag key and value pairs associated with this report group. </p>
    /// <p>These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
