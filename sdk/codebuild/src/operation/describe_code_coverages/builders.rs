// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_code_coverages::_describe_code_coverages_output::DescribeCodeCoveragesOutputBuilder;

pub use crate::operation::describe_code_coverages::_describe_code_coverages_input::DescribeCodeCoveragesInputBuilder;

/// Fluent builder constructing a request to `DescribeCodeCoverages`.
///
/// <p>Retrieves one or more code coverage reports.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCodeCoveragesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_code_coverages::builders::DescribeCodeCoveragesInputBuilder,
}
impl DescribeCodeCoveragesFluentBuilder {
    /// Creates a new `DescribeCodeCoverages`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_code_coverages::DescribeCodeCoverages,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_code_coverages::DescribeCodeCoveragesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_code_coverages::DescribeCodeCoveragesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_code_coverages::DescribeCodeCoveragesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_code_coverages::paginator::DescribeCodeCoveragesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::describe_code_coverages::paginator::DescribeCodeCoveragesPaginator {
        crate::operation::describe_code_coverages::paginator::DescribeCodeCoveragesPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p> The ARN of the report for which test cases are returned. </p>
    pub fn report_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.report_arn(input.into());
        self
    }
    /// <p> The ARN of the report for which test cases are returned. </p>
    pub fn set_report_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_report_arn(input);
        self
    }
    /// <p>The <code>nextToken</code> value returned from a previous call to <code>DescribeCodeCoverages</code>. This specifies the next item to return. To return the beginning of the list, exclude this parameter.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The <code>nextToken</code> value returned from a previous call to <code>DescribeCodeCoverages</code>. This specifies the next item to return. To return the beginning of the list, exclude this parameter.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specifies if the results are sorted in ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrderType) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Specifies if the results are sorted in ascending or descending order.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::types::SortOrderType>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>Specifies how the results are sorted. Possible values are:</p>
    /// <dl>
    /// <dt>
    /// FILE_PATH
    /// </dt>
    /// <dd>
    /// <p>The results are sorted by file path.</p>
    /// </dd>
    /// <dt>
    /// LINE_COVERAGE_PERCENTAGE
    /// </dt>
    /// <dd>
    /// <p>The results are sorted by the percentage of lines that are covered.</p>
    /// </dd>
    /// </dl>
    pub fn sort_by(mut self, input: crate::types::ReportCodeCoverageSortByType) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Specifies how the results are sorted. Possible values are:</p>
    /// <dl>
    /// <dt>
    /// FILE_PATH
    /// </dt>
    /// <dd>
    /// <p>The results are sorted by file path.</p>
    /// </dd>
    /// <dt>
    /// LINE_COVERAGE_PERCENTAGE
    /// </dt>
    /// <dd>
    /// <p>The results are sorted by the percentage of lines that are covered.</p>
    /// </dd>
    /// </dl>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::ReportCodeCoverageSortByType>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The minimum line coverage percentage to report.</p>
    pub fn min_line_coverage_percentage(mut self, input: f64) -> Self {
        self.inner = self.inner.min_line_coverage_percentage(input);
        self
    }
    /// <p>The minimum line coverage percentage to report.</p>
    pub fn set_min_line_coverage_percentage(mut self, input: std::option::Option<f64>) -> Self {
        self.inner = self.inner.set_min_line_coverage_percentage(input);
        self
    }
    /// <p>The maximum line coverage percentage to report.</p>
    pub fn max_line_coverage_percentage(mut self, input: f64) -> Self {
        self.inner = self.inner.max_line_coverage_percentage(input);
        self
    }
    /// <p>The maximum line coverage percentage to report.</p>
    pub fn set_max_line_coverage_percentage(mut self, input: std::option::Option<f64>) -> Self {
        self.inner = self.inner.set_max_line_coverage_percentage(input);
        self
    }
}
