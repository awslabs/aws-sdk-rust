// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateProjectInput {
    /// <p>The name of the build project.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description that makes the build project easy to identify.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Information about the build input source code for the build project.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::ProjectSource>,
    /// <p>An array of <code>ProjectSource</code> objects. </p>
    #[doc(hidden)]
    pub secondary_sources: std::option::Option<std::vec::Vec<crate::types::ProjectSource>>,
    /// <p>A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of: </p>
    /// <ul>
    /// <li> <p>For CodeCommit: the commit ID, branch, or Git tag to use.</p> </li>
    /// <li> <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format <code>pr/pull-request-ID</code> (for example <code>pr/25</code>). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Amazon S3: the version ID of the object that represents the build input ZIP file to use.</p> </li>
    /// </ul>
    /// <p>If <code>sourceVersion</code> is specified at the build level, then that version takes precedence over this <code>sourceVersion</code> (at the project level). </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample with CodeBuild</a> in the <i>CodeBuild User Guide</i>. </p>
    #[doc(hidden)]
    pub source_version: std::option::Option<std::string::String>,
    /// <p>An array of <code>ProjectSourceVersion</code> objects. If <code>secondarySourceVersions</code> is specified at the build level, then they take precedence over these <code>secondarySourceVersions</code> (at the project level). </p>
    #[doc(hidden)]
    pub secondary_source_versions:
        std::option::Option<std::vec::Vec<crate::types::ProjectSourceVersion>>,
    /// <p>Information about the build output artifacts for the build project.</p>
    #[doc(hidden)]
    pub artifacts: std::option::Option<crate::types::ProjectArtifacts>,
    /// <p>An array of <code>ProjectArtifacts</code> objects. </p>
    #[doc(hidden)]
    pub secondary_artifacts: std::option::Option<std::vec::Vec<crate::types::ProjectArtifacts>>,
    /// <p>Stores recently used information so that it can be quickly accessed at a later time.</p>
    #[doc(hidden)]
    pub cache: std::option::Option<crate::types::ProjectCache>,
    /// <p>Information about the build environment for the build project.</p>
    #[doc(hidden)]
    pub environment: std::option::Option<crate::types::ProjectEnvironment>,
    /// <p>The ARN of the IAM role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.</p>
    #[doc(hidden)]
    pub service_role: std::option::Option<std::string::String>,
    /// <p>How long, in minutes, from 5 to 480 (8 hours), for CodeBuild to wait before it times out any build that has not been marked as completed. The default is 60 minutes.</p>
    #[doc(hidden)]
    pub timeout_in_minutes: std::option::Option<i32>,
    /// <p>The number of minutes a build is allowed to be queued before it times out. </p>
    #[doc(hidden)]
    pub queued_timeout_in_minutes: std::option::Option<i32>,
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.</p> <note>
    /// <p>You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. </p>
    /// </note>
    /// <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format <code>alias/
    /// <alias-name></alias-name></code>). </p>
    #[doc(hidden)]
    pub encryption_key: std::option::Option<std::string::String>,
    /// <p>A list of tag key and value pairs associated with this build project.</p>
    /// <p>These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>VpcConfig enables CodeBuild to access resources in an Amazon VPC.</p>
    #[doc(hidden)]
    pub vpc_config: std::option::Option<crate::types::VpcConfig>,
    /// <p>Set this to true to generate a publicly accessible URL for your project's build badge.</p>
    #[doc(hidden)]
    pub badge_enabled: std::option::Option<bool>,
    /// <p>Information about logs for the build project. These can be logs in CloudWatch Logs, logs uploaded to a specified S3 bucket, or both. </p>
    #[doc(hidden)]
    pub logs_config: std::option::Option<crate::types::LogsConfig>,
    /// <p> An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System. </p>
    #[doc(hidden)]
    pub file_system_locations:
        std::option::Option<std::vec::Vec<crate::types::ProjectFileSystemLocation>>,
    /// <p>A <code>ProjectBuildBatchConfig</code> object that defines the batch build options for the project.</p>
    #[doc(hidden)]
    pub build_batch_config: std::option::Option<crate::types::ProjectBuildBatchConfig>,
    /// <p>The maximum number of concurrent builds that are allowed for this project.</p>
    /// <p>New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run.</p>
    #[doc(hidden)]
    pub concurrent_build_limit: std::option::Option<i32>,
}
impl CreateProjectInput {
    /// <p>The name of the build project.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description that makes the build project easy to identify.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::ProjectSource> {
        self.source.as_ref()
    }
    /// <p>An array of <code>ProjectSource</code> objects. </p>
    pub fn secondary_sources(&self) -> std::option::Option<&[crate::types::ProjectSource]> {
        self.secondary_sources.as_deref()
    }
    /// <p>A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of: </p>
    /// <ul>
    /// <li> <p>For CodeCommit: the commit ID, branch, or Git tag to use.</p> </li>
    /// <li> <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format <code>pr/pull-request-ID</code> (for example <code>pr/25</code>). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Amazon S3: the version ID of the object that represents the build input ZIP file to use.</p> </li>
    /// </ul>
    /// <p>If <code>sourceVersion</code> is specified at the build level, then that version takes precedence over this <code>sourceVersion</code> (at the project level). </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample with CodeBuild</a> in the <i>CodeBuild User Guide</i>. </p>
    pub fn source_version(&self) -> std::option::Option<&str> {
        self.source_version.as_deref()
    }
    /// <p>An array of <code>ProjectSourceVersion</code> objects. If <code>secondarySourceVersions</code> is specified at the build level, then they take precedence over these <code>secondarySourceVersions</code> (at the project level). </p>
    pub fn secondary_source_versions(
        &self,
    ) -> std::option::Option<&[crate::types::ProjectSourceVersion]> {
        self.secondary_source_versions.as_deref()
    }
    /// <p>Information about the build output artifacts for the build project.</p>
    pub fn artifacts(&self) -> std::option::Option<&crate::types::ProjectArtifacts> {
        self.artifacts.as_ref()
    }
    /// <p>An array of <code>ProjectArtifacts</code> objects. </p>
    pub fn secondary_artifacts(&self) -> std::option::Option<&[crate::types::ProjectArtifacts]> {
        self.secondary_artifacts.as_deref()
    }
    /// <p>Stores recently used information so that it can be quickly accessed at a later time.</p>
    pub fn cache(&self) -> std::option::Option<&crate::types::ProjectCache> {
        self.cache.as_ref()
    }
    /// <p>Information about the build environment for the build project.</p>
    pub fn environment(&self) -> std::option::Option<&crate::types::ProjectEnvironment> {
        self.environment.as_ref()
    }
    /// <p>The ARN of the IAM role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.</p>
    pub fn service_role(&self) -> std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>How long, in minutes, from 5 to 480 (8 hours), for CodeBuild to wait before it times out any build that has not been marked as completed. The default is 60 minutes.</p>
    pub fn timeout_in_minutes(&self) -> std::option::Option<i32> {
        self.timeout_in_minutes
    }
    /// <p>The number of minutes a build is allowed to be queued before it times out. </p>
    pub fn queued_timeout_in_minutes(&self) -> std::option::Option<i32> {
        self.queued_timeout_in_minutes
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.</p> <note>
    /// <p>You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. </p>
    /// </note>
    /// <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format <code>alias/
    /// <alias-name></alias-name></code>). </p>
    pub fn encryption_key(&self) -> std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
    /// <p>A list of tag key and value pairs associated with this build project.</p>
    /// <p>These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>VpcConfig enables CodeBuild to access resources in an Amazon VPC.</p>
    pub fn vpc_config(&self) -> std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>Set this to true to generate a publicly accessible URL for your project's build badge.</p>
    pub fn badge_enabled(&self) -> std::option::Option<bool> {
        self.badge_enabled
    }
    /// <p>Information about logs for the build project. These can be logs in CloudWatch Logs, logs uploaded to a specified S3 bucket, or both. </p>
    pub fn logs_config(&self) -> std::option::Option<&crate::types::LogsConfig> {
        self.logs_config.as_ref()
    }
    /// <p> An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System. </p>
    pub fn file_system_locations(
        &self,
    ) -> std::option::Option<&[crate::types::ProjectFileSystemLocation]> {
        self.file_system_locations.as_deref()
    }
    /// <p>A <code>ProjectBuildBatchConfig</code> object that defines the batch build options for the project.</p>
    pub fn build_batch_config(
        &self,
    ) -> std::option::Option<&crate::types::ProjectBuildBatchConfig> {
        self.build_batch_config.as_ref()
    }
    /// <p>The maximum number of concurrent builds that are allowed for this project.</p>
    /// <p>New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run.</p>
    pub fn concurrent_build_limit(&self) -> std::option::Option<i32> {
        self.concurrent_build_limit
    }
}
impl CreateProjectInput {
    /// Creates a new builder-style object to manufacture [`CreateProjectInput`](crate::operation::create_project::CreateProjectInput).
    pub fn builder() -> crate::operation::create_project::builders::CreateProjectInputBuilder {
        crate::operation::create_project::builders::CreateProjectInputBuilder::default()
    }
}

/// A builder for [`CreateProjectInput`](crate::operation::create_project::CreateProjectInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateProjectInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<crate::types::ProjectSource>,
    pub(crate) secondary_sources: std::option::Option<std::vec::Vec<crate::types::ProjectSource>>,
    pub(crate) source_version: std::option::Option<std::string::String>,
    pub(crate) secondary_source_versions:
        std::option::Option<std::vec::Vec<crate::types::ProjectSourceVersion>>,
    pub(crate) artifacts: std::option::Option<crate::types::ProjectArtifacts>,
    pub(crate) secondary_artifacts:
        std::option::Option<std::vec::Vec<crate::types::ProjectArtifacts>>,
    pub(crate) cache: std::option::Option<crate::types::ProjectCache>,
    pub(crate) environment: std::option::Option<crate::types::ProjectEnvironment>,
    pub(crate) service_role: std::option::Option<std::string::String>,
    pub(crate) timeout_in_minutes: std::option::Option<i32>,
    pub(crate) queued_timeout_in_minutes: std::option::Option<i32>,
    pub(crate) encryption_key: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) vpc_config: std::option::Option<crate::types::VpcConfig>,
    pub(crate) badge_enabled: std::option::Option<bool>,
    pub(crate) logs_config: std::option::Option<crate::types::LogsConfig>,
    pub(crate) file_system_locations:
        std::option::Option<std::vec::Vec<crate::types::ProjectFileSystemLocation>>,
    pub(crate) build_batch_config: std::option::Option<crate::types::ProjectBuildBatchConfig>,
    pub(crate) concurrent_build_limit: std::option::Option<i32>,
}
impl CreateProjectInputBuilder {
    /// <p>The name of the build project.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the build project.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description that makes the build project easy to identify.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description that makes the build project easy to identify.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn source(mut self, input: crate::types::ProjectSource) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::ProjectSource>) -> Self {
        self.source = input;
        self
    }
    /// Appends an item to `secondary_sources`.
    ///
    /// To override the contents of this collection use [`set_secondary_sources`](Self::set_secondary_sources).
    ///
    /// <p>An array of <code>ProjectSource</code> objects. </p>
    pub fn secondary_sources(mut self, input: crate::types::ProjectSource) -> Self {
        let mut v = self.secondary_sources.unwrap_or_default();
        v.push(input);
        self.secondary_sources = Some(v);
        self
    }
    /// <p>An array of <code>ProjectSource</code> objects. </p>
    pub fn set_secondary_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProjectSource>>,
    ) -> Self {
        self.secondary_sources = input;
        self
    }
    /// <p>A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of: </p>
    /// <ul>
    /// <li> <p>For CodeCommit: the commit ID, branch, or Git tag to use.</p> </li>
    /// <li> <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format <code>pr/pull-request-ID</code> (for example <code>pr/25</code>). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Amazon S3: the version ID of the object that represents the build input ZIP file to use.</p> </li>
    /// </ul>
    /// <p>If <code>sourceVersion</code> is specified at the build level, then that version takes precedence over this <code>sourceVersion</code> (at the project level). </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample with CodeBuild</a> in the <i>CodeBuild User Guide</i>. </p>
    pub fn source_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_version = Some(input.into());
        self
    }
    /// <p>A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of: </p>
    /// <ul>
    /// <li> <p>For CodeCommit: the commit ID, branch, or Git tag to use.</p> </li>
    /// <li> <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format <code>pr/pull-request-ID</code> (for example <code>pr/25</code>). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Amazon S3: the version ID of the object that represents the build input ZIP file to use.</p> </li>
    /// </ul>
    /// <p>If <code>sourceVersion</code> is specified at the build level, then that version takes precedence over this <code>sourceVersion</code> (at the project level). </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample with CodeBuild</a> in the <i>CodeBuild User Guide</i>. </p>
    pub fn set_source_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_version = input;
        self
    }
    /// Appends an item to `secondary_source_versions`.
    ///
    /// To override the contents of this collection use [`set_secondary_source_versions`](Self::set_secondary_source_versions).
    ///
    /// <p>An array of <code>ProjectSourceVersion</code> objects. If <code>secondarySourceVersions</code> is specified at the build level, then they take precedence over these <code>secondarySourceVersions</code> (at the project level). </p>
    pub fn secondary_source_versions(mut self, input: crate::types::ProjectSourceVersion) -> Self {
        let mut v = self.secondary_source_versions.unwrap_or_default();
        v.push(input);
        self.secondary_source_versions = Some(v);
        self
    }
    /// <p>An array of <code>ProjectSourceVersion</code> objects. If <code>secondarySourceVersions</code> is specified at the build level, then they take precedence over these <code>secondarySourceVersions</code> (at the project level). </p>
    pub fn set_secondary_source_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProjectSourceVersion>>,
    ) -> Self {
        self.secondary_source_versions = input;
        self
    }
    /// <p>Information about the build output artifacts for the build project.</p>
    pub fn artifacts(mut self, input: crate::types::ProjectArtifacts) -> Self {
        self.artifacts = Some(input);
        self
    }
    /// <p>Information about the build output artifacts for the build project.</p>
    pub fn set_artifacts(
        mut self,
        input: std::option::Option<crate::types::ProjectArtifacts>,
    ) -> Self {
        self.artifacts = input;
        self
    }
    /// Appends an item to `secondary_artifacts`.
    ///
    /// To override the contents of this collection use [`set_secondary_artifacts`](Self::set_secondary_artifacts).
    ///
    /// <p>An array of <code>ProjectArtifacts</code> objects. </p>
    pub fn secondary_artifacts(mut self, input: crate::types::ProjectArtifacts) -> Self {
        let mut v = self.secondary_artifacts.unwrap_or_default();
        v.push(input);
        self.secondary_artifacts = Some(v);
        self
    }
    /// <p>An array of <code>ProjectArtifacts</code> objects. </p>
    pub fn set_secondary_artifacts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProjectArtifacts>>,
    ) -> Self {
        self.secondary_artifacts = input;
        self
    }
    /// <p>Stores recently used information so that it can be quickly accessed at a later time.</p>
    pub fn cache(mut self, input: crate::types::ProjectCache) -> Self {
        self.cache = Some(input);
        self
    }
    /// <p>Stores recently used information so that it can be quickly accessed at a later time.</p>
    pub fn set_cache(mut self, input: std::option::Option<crate::types::ProjectCache>) -> Self {
        self.cache = input;
        self
    }
    /// <p>Information about the build environment for the build project.</p>
    pub fn environment(mut self, input: crate::types::ProjectEnvironment) -> Self {
        self.environment = Some(input);
        self
    }
    /// <p>Information about the build environment for the build project.</p>
    pub fn set_environment(
        mut self,
        input: std::option::Option<crate::types::ProjectEnvironment>,
    ) -> Self {
        self.environment = input;
        self
    }
    /// <p>The ARN of the IAM role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.</p>
    pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.</p>
    pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role = input;
        self
    }
    /// <p>How long, in minutes, from 5 to 480 (8 hours), for CodeBuild to wait before it times out any build that has not been marked as completed. The default is 60 minutes.</p>
    pub fn timeout_in_minutes(mut self, input: i32) -> Self {
        self.timeout_in_minutes = Some(input);
        self
    }
    /// <p>How long, in minutes, from 5 to 480 (8 hours), for CodeBuild to wait before it times out any build that has not been marked as completed. The default is 60 minutes.</p>
    pub fn set_timeout_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_in_minutes = input;
        self
    }
    /// <p>The number of minutes a build is allowed to be queued before it times out. </p>
    pub fn queued_timeout_in_minutes(mut self, input: i32) -> Self {
        self.queued_timeout_in_minutes = Some(input);
        self
    }
    /// <p>The number of minutes a build is allowed to be queued before it times out. </p>
    pub fn set_queued_timeout_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.queued_timeout_in_minutes = input;
        self
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.</p> <note>
    /// <p>You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. </p>
    /// </note>
    /// <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format <code>alias/
    /// <alias-name></alias-name></code>). </p>
    pub fn encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key = Some(input.into());
        self
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.</p> <note>
    /// <p>You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. </p>
    /// </note>
    /// <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format <code>alias/
    /// <alias-name></alias-name></code>). </p>
    pub fn set_encryption_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tag key and value pairs associated with this build project.</p>
    /// <p>These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tag key and value pairs associated with this build project.</p>
    /// <p>These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>VpcConfig enables CodeBuild to access resources in an Amazon VPC.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = Some(input);
        self
    }
    /// <p>VpcConfig enables CodeBuild to access resources in an Amazon VPC.</p>
    pub fn set_vpc_config(mut self, input: std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>Set this to true to generate a publicly accessible URL for your project's build badge.</p>
    pub fn badge_enabled(mut self, input: bool) -> Self {
        self.badge_enabled = Some(input);
        self
    }
    /// <p>Set this to true to generate a publicly accessible URL for your project's build badge.</p>
    pub fn set_badge_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.badge_enabled = input;
        self
    }
    /// <p>Information about logs for the build project. These can be logs in CloudWatch Logs, logs uploaded to a specified S3 bucket, or both. </p>
    pub fn logs_config(mut self, input: crate::types::LogsConfig) -> Self {
        self.logs_config = Some(input);
        self
    }
    /// <p>Information about logs for the build project. These can be logs in CloudWatch Logs, logs uploaded to a specified S3 bucket, or both. </p>
    pub fn set_logs_config(mut self, input: std::option::Option<crate::types::LogsConfig>) -> Self {
        self.logs_config = input;
        self
    }
    /// Appends an item to `file_system_locations`.
    ///
    /// To override the contents of this collection use [`set_file_system_locations`](Self::set_file_system_locations).
    ///
    /// <p> An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System. </p>
    pub fn file_system_locations(mut self, input: crate::types::ProjectFileSystemLocation) -> Self {
        let mut v = self.file_system_locations.unwrap_or_default();
        v.push(input);
        self.file_system_locations = Some(v);
        self
    }
    /// <p> An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System. </p>
    pub fn set_file_system_locations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProjectFileSystemLocation>>,
    ) -> Self {
        self.file_system_locations = input;
        self
    }
    /// <p>A <code>ProjectBuildBatchConfig</code> object that defines the batch build options for the project.</p>
    pub fn build_batch_config(mut self, input: crate::types::ProjectBuildBatchConfig) -> Self {
        self.build_batch_config = Some(input);
        self
    }
    /// <p>A <code>ProjectBuildBatchConfig</code> object that defines the batch build options for the project.</p>
    pub fn set_build_batch_config(
        mut self,
        input: std::option::Option<crate::types::ProjectBuildBatchConfig>,
    ) -> Self {
        self.build_batch_config = input;
        self
    }
    /// <p>The maximum number of concurrent builds that are allowed for this project.</p>
    /// <p>New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run.</p>
    pub fn concurrent_build_limit(mut self, input: i32) -> Self {
        self.concurrent_build_limit = Some(input);
        self
    }
    /// <p>The maximum number of concurrent builds that are allowed for this project.</p>
    /// <p>New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run.</p>
    pub fn set_concurrent_build_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.concurrent_build_limit = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateProjectInput`](crate::operation::create_project::CreateProjectInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_project::CreateProjectInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_project::CreateProjectInput {
            name: self.name,
            description: self.description,
            source: self.source,
            secondary_sources: self.secondary_sources,
            source_version: self.source_version,
            secondary_source_versions: self.secondary_source_versions,
            artifacts: self.artifacts,
            secondary_artifacts: self.secondary_artifacts,
            cache: self.cache,
            environment: self.environment,
            service_role: self.service_role,
            timeout_in_minutes: self.timeout_in_minutes,
            queued_timeout_in_minutes: self.queued_timeout_in_minutes,
            encryption_key: self.encryption_key,
            tags: self.tags,
            vpc_config: self.vpc_config,
            badge_enabled: self.badge_enabled,
            logs_config: self.logs_config,
            file_system_locations: self.file_system_locations,
            build_batch_config: self.build_batch_config,
            concurrent_build_limit: self.concurrent_build_limit,
        })
    }
}
