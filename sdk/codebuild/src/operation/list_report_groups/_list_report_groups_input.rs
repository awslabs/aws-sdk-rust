// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReportGroupsInput {
    /// <p> Used to specify the order to sort the list of returned report groups. Valid values are <code>ASCENDING</code> and <code>DESCENDING</code>. </p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrderType>,
    /// <p> The criterion to be used to list build report groups. Valid values include: </p>
    /// <ul>
    /// <li> <p> <code>CREATED_TIME</code>: List based on when each report group was created.</p> </li>
    /// <li> <p> <code>LAST_MODIFIED_TIME</code>: List based on when each report group was last changed.</p> </li>
    /// <li> <p> <code>NAME</code>: List based on each report group's name.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::ReportGroupSortByType>,
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> The maximum number of paginated report groups returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>ReportGroup</code> objects. The default value is 100. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListReportGroupsInput {
    /// <p> Used to specify the order to sort the list of returned report groups. Valid values are <code>ASCENDING</code> and <code>DESCENDING</code>. </p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrderType> {
        self.sort_order.as_ref()
    }
    /// <p> The criterion to be used to list build report groups. Valid values include: </p>
    /// <ul>
    /// <li> <p> <code>CREATED_TIME</code>: List based on when each report group was created.</p> </li>
    /// <li> <p> <code>LAST_MODIFIED_TIME</code>: List based on when each report group was last changed.</p> </li>
    /// <li> <p> <code>NAME</code>: List based on each report group's name.</p> </li>
    /// </ul>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::ReportGroupSortByType> {
        self.sort_by.as_ref()
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> The maximum number of paginated report groups returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>ReportGroup</code> objects. The default value is 100. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListReportGroupsInput {
    /// Creates a new builder-style object to manufacture [`ListReportGroupsInput`](crate::operation::list_report_groups::ListReportGroupsInput).
    pub fn builder() -> crate::operation::list_report_groups::builders::ListReportGroupsInputBuilder
    {
        crate::operation::list_report_groups::builders::ListReportGroupsInputBuilder::default()
    }
}

/// A builder for [`ListReportGroupsInput`](crate::operation::list_report_groups::ListReportGroupsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListReportGroupsInputBuilder {
    pub(crate) sort_order: std::option::Option<crate::types::SortOrderType>,
    pub(crate) sort_by: std::option::Option<crate::types::ReportGroupSortByType>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListReportGroupsInputBuilder {
    /// <p> Used to specify the order to sort the list of returned report groups. Valid values are <code>ASCENDING</code> and <code>DESCENDING</code>. </p>
    pub fn sort_order(mut self, input: crate::types::SortOrderType) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p> Used to specify the order to sort the list of returned report groups. Valid values are <code>ASCENDING</code> and <code>DESCENDING</code>. </p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::types::SortOrderType>,
    ) -> Self {
        self.sort_order = input;
        self
    }
    /// <p> The criterion to be used to list build report groups. Valid values include: </p>
    /// <ul>
    /// <li> <p> <code>CREATED_TIME</code>: List based on when each report group was created.</p> </li>
    /// <li> <p> <code>LAST_MODIFIED_TIME</code>: List based on when each report group was last changed.</p> </li>
    /// <li> <p> <code>NAME</code>: List based on each report group's name.</p> </li>
    /// </ul>
    pub fn sort_by(mut self, input: crate::types::ReportGroupSortByType) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p> The criterion to be used to list build report groups. Valid values include: </p>
    /// <ul>
    /// <li> <p> <code>CREATED_TIME</code>: List based on when each report group was created.</p> </li>
    /// <li> <p> <code>LAST_MODIFIED_TIME</code>: List based on when each report group was last changed.</p> </li>
    /// <li> <p> <code>NAME</code>: List based on each report group's name.</p> </li>
    /// </ul>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::ReportGroupSortByType>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> The maximum number of paginated report groups returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>ReportGroup</code> objects. The default value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p> The maximum number of paginated report groups returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>ReportGroup</code> objects. The default value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListReportGroupsInput`](crate::operation::list_report_groups::ListReportGroupsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_report_groups::ListReportGroupsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_report_groups::ListReportGroupsInput {
                sort_order: self.sort_order,
                sort_by: self.sort_by,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
