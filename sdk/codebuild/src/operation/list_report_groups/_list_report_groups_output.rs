// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReportGroupsOutput {
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> The list of ARNs for the report groups in the current Amazon Web Services account. </p>
    #[doc(hidden)]
    pub report_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ListReportGroupsOutput {
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> The list of ARNs for the report groups in the current Amazon Web Services account. </p>
    pub fn report_groups(&self) -> std::option::Option<&[std::string::String]> {
        self.report_groups.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListReportGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListReportGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListReportGroupsOutput`](crate::operation::list_report_groups::ListReportGroupsOutput).
    pub fn builder() -> crate::operation::list_report_groups::builders::ListReportGroupsOutputBuilder
    {
        crate::operation::list_report_groups::builders::ListReportGroupsOutputBuilder::default()
    }
}

/// A builder for [`ListReportGroupsOutput`](crate::operation::list_report_groups::ListReportGroupsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListReportGroupsOutputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) report_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ListReportGroupsOutputBuilder {
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `report_groups`.
    ///
    /// To override the contents of this collection use [`set_report_groups`](Self::set_report_groups).
    ///
    /// <p> The list of ARNs for the report groups in the current Amazon Web Services account. </p>
    pub fn report_groups(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.report_groups.unwrap_or_default();
        v.push(input.into());
        self.report_groups = Some(v);
        self
    }
    /// <p> The list of ARNs for the report groups in the current Amazon Web Services account. </p>
    pub fn set_report_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.report_groups = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListReportGroupsOutput`](crate::operation::list_report_groups::ListReportGroupsOutput).
    pub fn build(self) -> crate::operation::list_report_groups::ListReportGroupsOutput {
        crate::operation::list_report_groups::ListReportGroupsOutput {
            next_token: self.next_token,
            report_groups: self.report_groups,
            _request_id: self._request_id,
        }
    }
}
