// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetProjectsOutput {
    /// <p>Information about the requested build projects.</p>
    pub projects: ::std::option::Option<::std::vec::Vec<crate::types::Project>>,
    /// <p>The names of build projects for which information could not be found.</p>
    pub projects_not_found: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl BatchGetProjectsOutput {
    /// <p>Information about the requested build projects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.projects.is_none()`.
    pub fn projects(&self) -> &[crate::types::Project] {
        self.projects.as_deref().unwrap_or_default()
    }
    /// <p>The names of build projects for which information could not be found.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.projects_not_found.is_none()`.
    pub fn projects_not_found(&self) -> &[::std::string::String] {
        self.projects_not_found.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for BatchGetProjectsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetProjectsOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetProjectsOutput`](crate::operation::batch_get_projects::BatchGetProjectsOutput).
    pub fn builder() -> crate::operation::batch_get_projects::builders::BatchGetProjectsOutputBuilder {
        crate::operation::batch_get_projects::builders::BatchGetProjectsOutputBuilder::default()
    }
}

/// A builder for [`BatchGetProjectsOutput`](crate::operation::batch_get_projects::BatchGetProjectsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetProjectsOutputBuilder {
    pub(crate) projects: ::std::option::Option<::std::vec::Vec<crate::types::Project>>,
    pub(crate) projects_not_found: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl BatchGetProjectsOutputBuilder {
    /// Appends an item to `projects`.
    ///
    /// To override the contents of this collection use [`set_projects`](Self::set_projects).
    ///
    /// <p>Information about the requested build projects.</p>
    pub fn projects(mut self, input: crate::types::Project) -> Self {
        let mut v = self.projects.unwrap_or_default();
        v.push(input);
        self.projects = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the requested build projects.</p>
    pub fn set_projects(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Project>>) -> Self {
        self.projects = input;
        self
    }
    /// <p>Information about the requested build projects.</p>
    pub fn get_projects(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Project>> {
        &self.projects
    }
    /// Appends an item to `projects_not_found`.
    ///
    /// To override the contents of this collection use [`set_projects_not_found`](Self::set_projects_not_found).
    ///
    /// <p>The names of build projects for which information could not be found.</p>
    pub fn projects_not_found(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.projects_not_found.unwrap_or_default();
        v.push(input.into());
        self.projects_not_found = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of build projects for which information could not be found.</p>
    pub fn set_projects_not_found(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.projects_not_found = input;
        self
    }
    /// <p>The names of build projects for which information could not be found.</p>
    pub fn get_projects_not_found(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.projects_not_found
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetProjectsOutput`](crate::operation::batch_get_projects::BatchGetProjectsOutput).
    pub fn build(self) -> crate::operation::batch_get_projects::BatchGetProjectsOutput {
        crate::operation::batch_get_projects::BatchGetProjectsOutput {
            projects: self.projects,
            projects_not_found: self.projects_not_found,
            _request_id: self._request_id,
        }
    }
}
