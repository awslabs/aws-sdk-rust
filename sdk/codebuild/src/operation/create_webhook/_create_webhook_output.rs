// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWebhookOutput {
    /// <p>Information about a webhook that connects repository events to a build project in CodeBuild.</p>
    #[doc(hidden)]
    pub webhook: std::option::Option<crate::types::Webhook>,
    _request_id: Option<String>,
}
impl CreateWebhookOutput {
    /// <p>Information about a webhook that connects repository events to a build project in CodeBuild.</p>
    pub fn webhook(&self) -> std::option::Option<&crate::types::Webhook> {
        self.webhook.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateWebhookOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWebhookOutput {
    /// Creates a new builder-style object to manufacture [`CreateWebhookOutput`](crate::operation::create_webhook::CreateWebhookOutput).
    pub fn builder() -> crate::operation::create_webhook::builders::CreateWebhookOutputBuilder {
        crate::operation::create_webhook::builders::CreateWebhookOutputBuilder::default()
    }
}

/// A builder for [`CreateWebhookOutput`](crate::operation::create_webhook::CreateWebhookOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateWebhookOutputBuilder {
    pub(crate) webhook: std::option::Option<crate::types::Webhook>,
    _request_id: Option<String>,
}
impl CreateWebhookOutputBuilder {
    /// <p>Information about a webhook that connects repository events to a build project in CodeBuild.</p>
    pub fn webhook(mut self, input: crate::types::Webhook) -> Self {
        self.webhook = Some(input);
        self
    }
    /// <p>Information about a webhook that connects repository events to a build project in CodeBuild.</p>
    pub fn set_webhook(mut self, input: std::option::Option<crate::types::Webhook>) -> Self {
        self.webhook = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWebhookOutput`](crate::operation::create_webhook::CreateWebhookOutput).
    pub fn build(self) -> crate::operation::create_webhook::CreateWebhookOutput {
        crate::operation::create_webhook::CreateWebhookOutput {
            webhook: self.webhook,
            _request_id: self._request_id,
        }
    }
}
