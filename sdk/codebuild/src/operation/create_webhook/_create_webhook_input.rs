// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateWebhookInput {
    /// <p>The name of the CodeBuild project.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If <code>branchFilter</code> is empty, then all branches are built.</p><note>
    /// <p>It is recommended that you use <code>filterGroups</code> instead of <code>branchFilter</code>.</p>
    /// </note>
    pub branch_filter: ::std::option::Option<::std::string::String>,
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine which webhooks are triggered. At least one <code>WebhookFilter</code> in the array must specify <code>EVENT</code> as its <code>type</code>.</p>
    /// <p>For a build to be triggered, at least one filter group in the <code>filterGroups</code> array must pass. For a filter group to pass, each of its filters must pass.</p>
    pub filter_groups: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::WebhookFilter>>>,
    /// <p>Specifies the type of build this webhook will trigger.</p><note>
    /// <p><code>RUNNER_BUILDKITE_BUILD</code> is only available for <code>NO_SOURCE</code> source type projects configured for Buildkite runner builds. For more information about CodeBuild-hosted Buildkite runner builds, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-runner-buildkite.html">Tutorial: Configure a CodeBuild-hosted Buildkite runner</a> in the <i>CodeBuild user guide</i>.</p>
    /// </note>
    pub build_type: ::std::option::Option<crate::types::WebhookBuildType>,
    /// <p>If manualCreation is true, CodeBuild doesn't create a webhook in GitHub and instead returns <code>payloadUrl</code> and <code>secret</code> values for the webhook. The <code>payloadUrl</code> and <code>secret</code> values in the output can be used to manually create a webhook within GitHub.</p><note>
    /// <p><code>manualCreation</code> is only available for GitHub webhooks.</p>
    /// </note>
    pub manual_creation: ::std::option::Option<bool>,
    /// <p>The scope configuration for global or organization webhooks.</p><note>
    /// <p>Global or organization webhooks are only available for GitHub and Github Enterprise webhooks.</p>
    /// </note>
    pub scope_configuration: ::std::option::Option<crate::types::ScopeConfiguration>,
    /// <p>A PullRequestBuildPolicy object that defines comment-based approval requirements for triggering builds on pull requests. This policy helps control when automated builds are executed based on contributor permissions and approval workflows.</p>
    pub pull_request_build_policy: ::std::option::Option<crate::types::PullRequestBuildPolicy>,
}
impl CreateWebhookInput {
    /// <p>The name of the CodeBuild project.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If <code>branchFilter</code> is empty, then all branches are built.</p><note>
    /// <p>It is recommended that you use <code>filterGroups</code> instead of <code>branchFilter</code>.</p>
    /// </note>
    pub fn branch_filter(&self) -> ::std::option::Option<&str> {
        self.branch_filter.as_deref()
    }
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine which webhooks are triggered. At least one <code>WebhookFilter</code> in the array must specify <code>EVENT</code> as its <code>type</code>.</p>
    /// <p>For a build to be triggered, at least one filter group in the <code>filterGroups</code> array must pass. For a filter group to pass, each of its filters must pass.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_groups.is_none()`.
    pub fn filter_groups(&self) -> &[::std::vec::Vec<crate::types::WebhookFilter>] {
        self.filter_groups.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the type of build this webhook will trigger.</p><note>
    /// <p><code>RUNNER_BUILDKITE_BUILD</code> is only available for <code>NO_SOURCE</code> source type projects configured for Buildkite runner builds. For more information about CodeBuild-hosted Buildkite runner builds, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-runner-buildkite.html">Tutorial: Configure a CodeBuild-hosted Buildkite runner</a> in the <i>CodeBuild user guide</i>.</p>
    /// </note>
    pub fn build_type(&self) -> ::std::option::Option<&crate::types::WebhookBuildType> {
        self.build_type.as_ref()
    }
    /// <p>If manualCreation is true, CodeBuild doesn't create a webhook in GitHub and instead returns <code>payloadUrl</code> and <code>secret</code> values for the webhook. The <code>payloadUrl</code> and <code>secret</code> values in the output can be used to manually create a webhook within GitHub.</p><note>
    /// <p><code>manualCreation</code> is only available for GitHub webhooks.</p>
    /// </note>
    pub fn manual_creation(&self) -> ::std::option::Option<bool> {
        self.manual_creation
    }
    /// <p>The scope configuration for global or organization webhooks.</p><note>
    /// <p>Global or organization webhooks are only available for GitHub and Github Enterprise webhooks.</p>
    /// </note>
    pub fn scope_configuration(&self) -> ::std::option::Option<&crate::types::ScopeConfiguration> {
        self.scope_configuration.as_ref()
    }
    /// <p>A PullRequestBuildPolicy object that defines comment-based approval requirements for triggering builds on pull requests. This policy helps control when automated builds are executed based on contributor permissions and approval workflows.</p>
    pub fn pull_request_build_policy(&self) -> ::std::option::Option<&crate::types::PullRequestBuildPolicy> {
        self.pull_request_build_policy.as_ref()
    }
}
impl CreateWebhookInput {
    /// Creates a new builder-style object to manufacture [`CreateWebhookInput`](crate::operation::create_webhook::CreateWebhookInput).
    pub fn builder() -> crate::operation::create_webhook::builders::CreateWebhookInputBuilder {
        crate::operation::create_webhook::builders::CreateWebhookInputBuilder::default()
    }
}

/// A builder for [`CreateWebhookInput`](crate::operation::create_webhook::CreateWebhookInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateWebhookInputBuilder {
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) branch_filter: ::std::option::Option<::std::string::String>,
    pub(crate) filter_groups: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::WebhookFilter>>>,
    pub(crate) build_type: ::std::option::Option<crate::types::WebhookBuildType>,
    pub(crate) manual_creation: ::std::option::Option<bool>,
    pub(crate) scope_configuration: ::std::option::Option<crate::types::ScopeConfiguration>,
    pub(crate) pull_request_build_policy: ::std::option::Option<crate::types::PullRequestBuildPolicy>,
}
impl CreateWebhookInputBuilder {
    /// <p>The name of the CodeBuild project.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the CodeBuild project.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the CodeBuild project.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If <code>branchFilter</code> is empty, then all branches are built.</p><note>
    /// <p>It is recommended that you use <code>filterGroups</code> instead of <code>branchFilter</code>.</p>
    /// </note>
    pub fn branch_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.branch_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If <code>branchFilter</code> is empty, then all branches are built.</p><note>
    /// <p>It is recommended that you use <code>filterGroups</code> instead of <code>branchFilter</code>.</p>
    /// </note>
    pub fn set_branch_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.branch_filter = input;
        self
    }
    /// <p>A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If <code>branchFilter</code> is empty, then all branches are built.</p><note>
    /// <p>It is recommended that you use <code>filterGroups</code> instead of <code>branchFilter</code>.</p>
    /// </note>
    pub fn get_branch_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.branch_filter
    }
    /// Appends an item to `filter_groups`.
    ///
    /// To override the contents of this collection use [`set_filter_groups`](Self::set_filter_groups).
    ///
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine which webhooks are triggered. At least one <code>WebhookFilter</code> in the array must specify <code>EVENT</code> as its <code>type</code>.</p>
    /// <p>For a build to be triggered, at least one filter group in the <code>filterGroups</code> array must pass. For a filter group to pass, each of its filters must pass.</p>
    pub fn filter_groups(mut self, input: ::std::vec::Vec<crate::types::WebhookFilter>) -> Self {
        let mut v = self.filter_groups.unwrap_or_default();
        v.push(input);
        self.filter_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine which webhooks are triggered. At least one <code>WebhookFilter</code> in the array must specify <code>EVENT</code> as its <code>type</code>.</p>
    /// <p>For a build to be triggered, at least one filter group in the <code>filterGroups</code> array must pass. For a filter group to pass, each of its filters must pass.</p>
    pub fn set_filter_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::WebhookFilter>>>) -> Self {
        self.filter_groups = input;
        self
    }
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine which webhooks are triggered. At least one <code>WebhookFilter</code> in the array must specify <code>EVENT</code> as its <code>type</code>.</p>
    /// <p>For a build to be triggered, at least one filter group in the <code>filterGroups</code> array must pass. For a filter group to pass, each of its filters must pass.</p>
    pub fn get_filter_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::WebhookFilter>>> {
        &self.filter_groups
    }
    /// <p>Specifies the type of build this webhook will trigger.</p><note>
    /// <p><code>RUNNER_BUILDKITE_BUILD</code> is only available for <code>NO_SOURCE</code> source type projects configured for Buildkite runner builds. For more information about CodeBuild-hosted Buildkite runner builds, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-runner-buildkite.html">Tutorial: Configure a CodeBuild-hosted Buildkite runner</a> in the <i>CodeBuild user guide</i>.</p>
    /// </note>
    pub fn build_type(mut self, input: crate::types::WebhookBuildType) -> Self {
        self.build_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of build this webhook will trigger.</p><note>
    /// <p><code>RUNNER_BUILDKITE_BUILD</code> is only available for <code>NO_SOURCE</code> source type projects configured for Buildkite runner builds. For more information about CodeBuild-hosted Buildkite runner builds, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-runner-buildkite.html">Tutorial: Configure a CodeBuild-hosted Buildkite runner</a> in the <i>CodeBuild user guide</i>.</p>
    /// </note>
    pub fn set_build_type(mut self, input: ::std::option::Option<crate::types::WebhookBuildType>) -> Self {
        self.build_type = input;
        self
    }
    /// <p>Specifies the type of build this webhook will trigger.</p><note>
    /// <p><code>RUNNER_BUILDKITE_BUILD</code> is only available for <code>NO_SOURCE</code> source type projects configured for Buildkite runner builds. For more information about CodeBuild-hosted Buildkite runner builds, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-runner-buildkite.html">Tutorial: Configure a CodeBuild-hosted Buildkite runner</a> in the <i>CodeBuild user guide</i>.</p>
    /// </note>
    pub fn get_build_type(&self) -> &::std::option::Option<crate::types::WebhookBuildType> {
        &self.build_type
    }
    /// <p>If manualCreation is true, CodeBuild doesn't create a webhook in GitHub and instead returns <code>payloadUrl</code> and <code>secret</code> values for the webhook. The <code>payloadUrl</code> and <code>secret</code> values in the output can be used to manually create a webhook within GitHub.</p><note>
    /// <p><code>manualCreation</code> is only available for GitHub webhooks.</p>
    /// </note>
    pub fn manual_creation(mut self, input: bool) -> Self {
        self.manual_creation = ::std::option::Option::Some(input);
        self
    }
    /// <p>If manualCreation is true, CodeBuild doesn't create a webhook in GitHub and instead returns <code>payloadUrl</code> and <code>secret</code> values for the webhook. The <code>payloadUrl</code> and <code>secret</code> values in the output can be used to manually create a webhook within GitHub.</p><note>
    /// <p><code>manualCreation</code> is only available for GitHub webhooks.</p>
    /// </note>
    pub fn set_manual_creation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.manual_creation = input;
        self
    }
    /// <p>If manualCreation is true, CodeBuild doesn't create a webhook in GitHub and instead returns <code>payloadUrl</code> and <code>secret</code> values for the webhook. The <code>payloadUrl</code> and <code>secret</code> values in the output can be used to manually create a webhook within GitHub.</p><note>
    /// <p><code>manualCreation</code> is only available for GitHub webhooks.</p>
    /// </note>
    pub fn get_manual_creation(&self) -> &::std::option::Option<bool> {
        &self.manual_creation
    }
    /// <p>The scope configuration for global or organization webhooks.</p><note>
    /// <p>Global or organization webhooks are only available for GitHub and Github Enterprise webhooks.</p>
    /// </note>
    pub fn scope_configuration(mut self, input: crate::types::ScopeConfiguration) -> Self {
        self.scope_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope configuration for global or organization webhooks.</p><note>
    /// <p>Global or organization webhooks are only available for GitHub and Github Enterprise webhooks.</p>
    /// </note>
    pub fn set_scope_configuration(mut self, input: ::std::option::Option<crate::types::ScopeConfiguration>) -> Self {
        self.scope_configuration = input;
        self
    }
    /// <p>The scope configuration for global or organization webhooks.</p><note>
    /// <p>Global or organization webhooks are only available for GitHub and Github Enterprise webhooks.</p>
    /// </note>
    pub fn get_scope_configuration(&self) -> &::std::option::Option<crate::types::ScopeConfiguration> {
        &self.scope_configuration
    }
    /// <p>A PullRequestBuildPolicy object that defines comment-based approval requirements for triggering builds on pull requests. This policy helps control when automated builds are executed based on contributor permissions and approval workflows.</p>
    pub fn pull_request_build_policy(mut self, input: crate::types::PullRequestBuildPolicy) -> Self {
        self.pull_request_build_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A PullRequestBuildPolicy object that defines comment-based approval requirements for triggering builds on pull requests. This policy helps control when automated builds are executed based on contributor permissions and approval workflows.</p>
    pub fn set_pull_request_build_policy(mut self, input: ::std::option::Option<crate::types::PullRequestBuildPolicy>) -> Self {
        self.pull_request_build_policy = input;
        self
    }
    /// <p>A PullRequestBuildPolicy object that defines comment-based approval requirements for triggering builds on pull requests. This policy helps control when automated builds are executed based on contributor permissions and approval workflows.</p>
    pub fn get_pull_request_build_policy(&self) -> &::std::option::Option<crate::types::PullRequestBuildPolicy> {
        &self.pull_request_build_policy
    }
    /// Consumes the builder and constructs a [`CreateWebhookInput`](crate::operation::create_webhook::CreateWebhookInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_webhook::CreateWebhookInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_webhook::CreateWebhookInput {
            project_name: self.project_name,
            branch_filter: self.branch_filter,
            filter_groups: self.filter_groups,
            build_type: self.build_type,
            manual_creation: self.manual_creation,
            scope_configuration: self.scope_configuration,
            pull_request_build_policy: self.pull_request_build_policy,
        })
    }
}
