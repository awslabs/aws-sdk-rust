// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_shared_report_groups::_list_shared_report_groups_output::ListSharedReportGroupsOutputBuilder;

pub use crate::operation::list_shared_report_groups::_list_shared_report_groups_input::ListSharedReportGroupsInputBuilder;

/// Fluent builder constructing a request to `ListSharedReportGroups`.
///
/// <p> Gets a list of report groups that are shared with other Amazon Web Services accounts or users. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSharedReportGroupsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::list_shared_report_groups::builders::ListSharedReportGroupsInputBuilder,
}
impl ListSharedReportGroupsFluentBuilder {
    /// Creates a new `ListSharedReportGroups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_shared_report_groups::ListSharedReportGroups,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_shared_report_groups::ListSharedReportGroupsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_shared_report_groups::ListSharedReportGroupsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_shared_report_groups::ListSharedReportGroupsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_shared_report_groups::paginator::ListSharedReportGroupsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_shared_report_groups::paginator::ListSharedReportGroupsPaginator
    {
        crate::operation::list_shared_report_groups::paginator::ListSharedReportGroupsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The order in which to list shared report groups. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: List in ascending order.</p> </li>
    /// <li> <p> <code>DESCENDING</code>: List in descending order.</p> </li>
    /// </ul>
    pub fn sort_order(mut self, input: crate::types::SortOrderType) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The order in which to list shared report groups. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: List in ascending order.</p> </li>
    /// <li> <p> <code>DESCENDING</code>: List in descending order.</p> </li>
    /// </ul>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::types::SortOrderType>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p> The criterion to be used to list report groups shared with the current Amazon Web Services account or user. Valid values include: </p>
    /// <ul>
    /// <li> <p> <code>ARN</code>: List based on the ARN. </p> </li>
    /// <li> <p> <code>MODIFIED_TIME</code>: List based on when information about the shared report group was last changed. </p> </li>
    /// </ul>
    pub fn sort_by(mut self, input: crate::types::SharedResourceSortByType) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p> The criterion to be used to list report groups shared with the current Amazon Web Services account or user. Valid values include: </p>
    /// <ul>
    /// <li> <p> <code>ARN</code>: List based on the ARN. </p> </li>
    /// <li> <p> <code>MODIFIED_TIME</code>: List based on when information about the shared report group was last changed. </p> </li>
    /// </ul>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::SharedResourceSortByType>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of paginated shared report groups per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>ReportGroup</code> objects. The default value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of paginated shared report groups per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>ReportGroup</code> objects. The default value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
