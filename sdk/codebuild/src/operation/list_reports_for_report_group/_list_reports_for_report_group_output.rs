// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListReportsForReportGroupOutput {
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p> The list of report ARNs. </p>
    pub reports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl ListReportsForReportGroupOutput {
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> The list of report ARNs. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reports.is_none()`.
    pub fn reports(&self) -> &[::std::string::String] {
        self.reports.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ListReportsForReportGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListReportsForReportGroupOutput {
    /// Creates a new builder-style object to manufacture [`ListReportsForReportGroupOutput`](crate::operation::list_reports_for_report_group::ListReportsForReportGroupOutput).
    pub fn builder() -> crate::operation::list_reports_for_report_group::builders::ListReportsForReportGroupOutputBuilder {
        crate::operation::list_reports_for_report_group::builders::ListReportsForReportGroupOutputBuilder::default()
    }
}

/// A builder for [`ListReportsForReportGroupOutput`](crate::operation::list_reports_for_report_group::ListReportsForReportGroupOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListReportsForReportGroupOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) reports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl ListReportsForReportGroupOutputBuilder {
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `reports`.
    ///
    /// To override the contents of this collection use [`set_reports`](Self::set_reports).
    ///
    /// <p> The list of report ARNs. </p>
    pub fn reports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.reports.unwrap_or_default();
        v.push(input.into());
        self.reports = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of report ARNs. </p>
    pub fn set_reports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.reports = input;
        self
    }
    /// <p> The list of report ARNs. </p>
    pub fn get_reports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.reports
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListReportsForReportGroupOutput`](crate::operation::list_reports_for_report_group::ListReportsForReportGroupOutput).
    pub fn build(self) -> crate::operation::list_reports_for_report_group::ListReportsForReportGroupOutput {
        crate::operation::list_reports_for_report_group::ListReportsForReportGroupOutput {
            next_token: self.next_token,
            reports: self.reports,
            _request_id: self._request_id,
        }
    }
}
