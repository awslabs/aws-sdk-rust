// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReportsForReportGroupInput {
    /// <p> The ARN of the report group for which you want to return report ARNs. </p>
    #[doc(hidden)]
    pub report_group_arn: std::option::Option<std::string::String>,
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> Use to specify whether the results are returned in ascending or descending order. </p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrderType>,
    /// <p> The maximum number of paginated reports in this report group returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::ReportFilter>,
}
impl ListReportsForReportGroupInput {
    /// <p> The ARN of the report group for which you want to return report ARNs. </p>
    pub fn report_group_arn(&self) -> std::option::Option<&str> {
        self.report_group_arn.as_deref()
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> Use to specify whether the results are returned in ascending or descending order. </p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrderType> {
        self.sort_order.as_ref()
    }
    /// <p> The maximum number of paginated reports in this report group returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub fn filter(&self) -> std::option::Option<&crate::types::ReportFilter> {
        self.filter.as_ref()
    }
}
impl ListReportsForReportGroupInput {
    /// Creates a new builder-style object to manufacture [`ListReportsForReportGroupInput`](crate::operation::list_reports_for_report_group::ListReportsForReportGroupInput).
    pub fn builder() -> crate::operation::list_reports_for_report_group::builders::ListReportsForReportGroupInputBuilder{
        crate::operation::list_reports_for_report_group::builders::ListReportsForReportGroupInputBuilder::default()
    }
}

/// A builder for [`ListReportsForReportGroupInput`](crate::operation::list_reports_for_report_group::ListReportsForReportGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListReportsForReportGroupInputBuilder {
    pub(crate) report_group_arn: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrderType>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) filter: std::option::Option<crate::types::ReportFilter>,
}
impl ListReportsForReportGroupInputBuilder {
    /// <p> The ARN of the report group for which you want to return report ARNs. </p>
    pub fn report_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.report_group_arn = Some(input.into());
        self
    }
    /// <p> The ARN of the report group for which you want to return report ARNs. </p>
    pub fn set_report_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.report_group_arn = input;
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> Use to specify whether the results are returned in ascending or descending order. </p>
    pub fn sort_order(mut self, input: crate::types::SortOrderType) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p> Use to specify whether the results are returned in ascending or descending order. </p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::types::SortOrderType>,
    ) -> Self {
        self.sort_order = input;
        self
    }
    /// <p> The maximum number of paginated reports in this report group returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p> The maximum number of paginated reports in this report group returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub fn filter(mut self, input: crate::types::ReportFilter) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub fn set_filter(mut self, input: std::option::Option<crate::types::ReportFilter>) -> Self {
        self.filter = input;
        self
    }
    /// Consumes the builder and constructs a [`ListReportsForReportGroupInput`](crate::operation::list_reports_for_report_group::ListReportsForReportGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_reports_for_report_group::ListReportsForReportGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_reports_for_report_group::ListReportsForReportGroupInput {
                report_group_arn: self.report_group_arn,
                next_token: self.next_token,
                sort_order: self.sort_order,
                max_results: self.max_results,
                filter: self.filter,
            },
        )
    }
}
