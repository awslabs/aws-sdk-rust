// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_reports_for_report_group::_list_reports_for_report_group_output::ListReportsForReportGroupOutputBuilder;

pub use crate::operation::list_reports_for_report_group::_list_reports_for_report_group_input::ListReportsForReportGroupInputBuilder;

/// Fluent builder constructing a request to `ListReportsForReportGroup`.
///
/// <p> Returns a list of ARNs for the reports that belong to a <code>ReportGroup</code>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReportsForReportGroupFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_reports_for_report_group::builders::ListReportsForReportGroupInputBuilder
            }
impl ListReportsForReportGroupFluentBuilder {
    /// Creates a new `ListReportsForReportGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_reports_for_report_group::ListReportsForReportGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_reports_for_report_group::ListReportsForReportGroupError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_reports_for_report_group::ListReportsForReportGroupOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_reports_for_report_group::ListReportsForReportGroupError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_reports_for_report_group::paginator::ListReportsForReportGroupPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_reports_for_report_group::paginator::ListReportsForReportGroupPaginator{
        crate::operation::list_reports_for_report_group::paginator::ListReportsForReportGroupPaginator::new(self.handle, self.inner)
    }
    /// <p> The ARN of the report group for which you want to return report ARNs. </p>
    pub fn report_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.report_group_arn(input.into());
        self
    }
    /// <p> The ARN of the report group for which you want to return report ARNs. </p>
    pub fn set_report_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_report_group_arn(input);
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> Use to specify whether the results are returned in ascending or descending order. </p>
    pub fn sort_order(mut self, input: crate::types::SortOrderType) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p> Use to specify whether the results are returned in ascending or descending order. </p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::types::SortOrderType>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p> The maximum number of paginated reports in this report group returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of paginated reports in this report group returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>Report</code> objects. The default value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub fn filter(mut self, input: crate::types::ReportFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p> A <code>ReportFilter</code> object used to filter the returned reports. </p>
    pub fn set_filter(mut self, input: std::option::Option<crate::types::ReportFilter>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}
