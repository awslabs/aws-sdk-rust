// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListBuildBatchesForProjectInput {
    /// <p>The name of the project.</p>
    #[doc(hidden)]
    pub project_name: std::option::Option<std::string::String>,
    /// <p>A <code>BuildBatchFilter</code> object that specifies the filters for the search.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::BuildBatchFilter>,
    /// <p>The maximum number of results to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Specifies the sort order of the returned items. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: List the batch build identifiers in ascending order by identifier.</p> </li>
    /// <li> <p> <code>DESCENDING</code>: List the batch build identifiers in descending order by identifier.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrderType>,
    /// <p>The <code>nextToken</code> value returned from a previous call to <code>ListBuildBatchesForProject</code>. This specifies the next item to return. To return the beginning of the list, exclude this parameter.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListBuildBatchesForProjectInput {
    /// <p>The name of the project.</p>
    pub fn project_name(&self) -> std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>A <code>BuildBatchFilter</code> object that specifies the filters for the search.</p>
    pub fn filter(&self) -> std::option::Option<&crate::types::BuildBatchFilter> {
        self.filter.as_ref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Specifies the sort order of the returned items. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: List the batch build identifiers in ascending order by identifier.</p> </li>
    /// <li> <p> <code>DESCENDING</code>: List the batch build identifiers in descending order by identifier.</p> </li>
    /// </ul>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrderType> {
        self.sort_order.as_ref()
    }
    /// <p>The <code>nextToken</code> value returned from a previous call to <code>ListBuildBatchesForProject</code>. This specifies the next item to return. To return the beginning of the list, exclude this parameter.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListBuildBatchesForProjectInput {
    /// Creates a new builder-style object to manufacture [`ListBuildBatchesForProjectInput`](crate::operation::list_build_batches_for_project::ListBuildBatchesForProjectInput).
    pub fn builder() -> crate::operation::list_build_batches_for_project::builders::ListBuildBatchesForProjectInputBuilder{
        crate::operation::list_build_batches_for_project::builders::ListBuildBatchesForProjectInputBuilder::default()
    }
}

/// A builder for [`ListBuildBatchesForProjectInput`](crate::operation::list_build_batches_for_project::ListBuildBatchesForProjectInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListBuildBatchesForProjectInputBuilder {
    pub(crate) project_name: std::option::Option<std::string::String>,
    pub(crate) filter: std::option::Option<crate::types::BuildBatchFilter>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrderType>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListBuildBatchesForProjectInputBuilder {
    /// <p>The name of the project.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_name = Some(input.into());
        self
    }
    /// <p>The name of the project.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>A <code>BuildBatchFilter</code> object that specifies the filters for the search.</p>
    pub fn filter(mut self, input: crate::types::BuildBatchFilter) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p>A <code>BuildBatchFilter</code> object that specifies the filters for the search.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::types::BuildBatchFilter>,
    ) -> Self {
        self.filter = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Specifies the sort order of the returned items. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: List the batch build identifiers in ascending order by identifier.</p> </li>
    /// <li> <p> <code>DESCENDING</code>: List the batch build identifiers in descending order by identifier.</p> </li>
    /// </ul>
    pub fn sort_order(mut self, input: crate::types::SortOrderType) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>Specifies the sort order of the returned items. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>ASCENDING</code>: List the batch build identifiers in ascending order by identifier.</p> </li>
    /// <li> <p> <code>DESCENDING</code>: List the batch build identifiers in descending order by identifier.</p> </li>
    /// </ul>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::types::SortOrderType>,
    ) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The <code>nextToken</code> value returned from a previous call to <code>ListBuildBatchesForProject</code>. This specifies the next item to return. To return the beginning of the list, exclude this parameter.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The <code>nextToken</code> value returned from a previous call to <code>ListBuildBatchesForProject</code>. This specifies the next item to return. To return the beginning of the list, exclude this parameter.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListBuildBatchesForProjectInput`](crate::operation::list_build_batches_for_project::ListBuildBatchesForProjectInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_build_batches_for_project::ListBuildBatchesForProjectInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_build_batches_for_project::ListBuildBatchesForProjectInput {
                project_name: self.project_name,
                filter: self.filter,
                max_results: self.max_results,
                sort_order: self.sort_order,
                next_token: self.next_token,
            },
        )
    }
}
