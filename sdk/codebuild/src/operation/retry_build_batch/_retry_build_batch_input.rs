// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RetryBuildBatchInput {
    /// <p>Specifies the identifier of the batch build to restart.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the <code>RetryBuildBatch</code> request. The token is included in the <code>RetryBuildBatch</code> request and is valid for five minutes. If you repeat the <code>RetryBuildBatch</code> request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.</p>
    pub idempotency_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of retry to perform.</p>
    pub retry_type: ::std::option::Option<crate::types::RetryBuildBatchType>,
}
impl RetryBuildBatchInput {
    /// <p>Specifies the identifier of the batch build to restart.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the <code>RetryBuildBatch</code> request. The token is included in the <code>RetryBuildBatch</code> request and is valid for five minutes. If you repeat the <code>RetryBuildBatch</code> request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.</p>
    pub fn idempotency_token(&self) -> ::std::option::Option<&str> {
        self.idempotency_token.as_deref()
    }
    /// <p>Specifies the type of retry to perform.</p>
    pub fn retry_type(&self) -> ::std::option::Option<&crate::types::RetryBuildBatchType> {
        self.retry_type.as_ref()
    }
}
impl RetryBuildBatchInput {
    /// Creates a new builder-style object to manufacture [`RetryBuildBatchInput`](crate::operation::retry_build_batch::RetryBuildBatchInput).
    pub fn builder() -> crate::operation::retry_build_batch::builders::RetryBuildBatchInputBuilder {
        crate::operation::retry_build_batch::builders::RetryBuildBatchInputBuilder::default()
    }
}

/// A builder for [`RetryBuildBatchInput`](crate::operation::retry_build_batch::RetryBuildBatchInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RetryBuildBatchInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) idempotency_token: ::std::option::Option<::std::string::String>,
    pub(crate) retry_type: ::std::option::Option<crate::types::RetryBuildBatchType>,
}
impl RetryBuildBatchInputBuilder {
    /// <p>Specifies the identifier of the batch build to restart.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the identifier of the batch build to restart.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Specifies the identifier of the batch build to restart.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the <code>RetryBuildBatch</code> request. The token is included in the <code>RetryBuildBatch</code> request and is valid for five minutes. If you repeat the <code>RetryBuildBatch</code> request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.</p>
    pub fn idempotency_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.idempotency_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the <code>RetryBuildBatch</code> request. The token is included in the <code>RetryBuildBatch</code> request and is valid for five minutes. If you repeat the <code>RetryBuildBatch</code> request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.</p>
    pub fn set_idempotency_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.idempotency_token = input;
        self
    }
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the <code>RetryBuildBatch</code> request. The token is included in the <code>RetryBuildBatch</code> request and is valid for five minutes. If you repeat the <code>RetryBuildBatch</code> request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.</p>
    pub fn get_idempotency_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.idempotency_token
    }
    /// <p>Specifies the type of retry to perform.</p>
    pub fn retry_type(mut self, input: crate::types::RetryBuildBatchType) -> Self {
        self.retry_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of retry to perform.</p>
    pub fn set_retry_type(mut self, input: ::std::option::Option<crate::types::RetryBuildBatchType>) -> Self {
        self.retry_type = input;
        self
    }
    /// <p>Specifies the type of retry to perform.</p>
    pub fn get_retry_type(&self) -> &::std::option::Option<crate::types::RetryBuildBatchType> {
        &self.retry_type
    }
    /// Consumes the builder and constructs a [`RetryBuildBatchInput`](crate::operation::retry_build_batch::RetryBuildBatchInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::retry_build_batch::RetryBuildBatchInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::retry_build_batch::RetryBuildBatchInput {
            id: self.id,
            idempotency_token: self.idempotency_token,
            retry_type: self.retry_type,
        })
    }
}
