// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_source_credentials::_import_source_credentials_output::ImportSourceCredentialsOutputBuilder;

pub use crate::operation::import_source_credentials::_import_source_credentials_input::ImportSourceCredentialsInputBuilder;

/// Fluent builder constructing a request to `ImportSourceCredentials`.
///
/// <p> Imports the source repository credentials for an CodeBuild project that has its source code stored in a GitHub, GitHub Enterprise, or Bitbucket repository. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ImportSourceCredentialsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::import_source_credentials::builders::ImportSourceCredentialsInputBuilder,
}
impl ImportSourceCredentialsFluentBuilder {
    /// Creates a new `ImportSourceCredentials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::import_source_credentials::ImportSourceCredentials,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::import_source_credentials::ImportSourceCredentialsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::import_source_credentials::ImportSourceCredentialsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::import_source_credentials::ImportSourceCredentialsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Bitbucket username when the <code>authType</code> is BASIC_AUTH. This parameter is not valid for other types of source providers or connections. </p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.username(input.into());
        self
    }
    /// <p> The Bitbucket username when the <code>authType</code> is BASIC_AUTH. This parameter is not valid for other types of source providers or connections. </p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_username(input);
        self
    }
    /// <p> For GitHub or GitHub Enterprise, this is the personal access token. For Bitbucket, this is the app password. </p>
    pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.token(input.into());
        self
    }
    /// <p> For GitHub or GitHub Enterprise, this is the personal access token. For Bitbucket, this is the app password. </p>
    pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_token(input);
        self
    }
    /// <p> The source provider used for this project. </p>
    pub fn server_type(mut self, input: crate::types::ServerType) -> Self {
        self.inner = self.inner.server_type(input);
        self
    }
    /// <p> The source provider used for this project. </p>
    pub fn set_server_type(mut self, input: std::option::Option<crate::types::ServerType>) -> Self {
        self.inner = self.inner.set_server_type(input);
        self
    }
    /// <p> The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API and must be created using the CodeBuild console. </p>
    pub fn auth_type(mut self, input: crate::types::AuthType) -> Self {
        self.inner = self.inner.auth_type(input);
        self
    }
    /// <p> The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API and must be created using the CodeBuild console. </p>
    pub fn set_auth_type(mut self, input: std::option::Option<crate::types::AuthType>) -> Self {
        self.inner = self.inner.set_auth_type(input);
        self
    }
    /// <p> Set to <code>false</code> to prevent overwriting the repository source credentials. Set to <code>true</code> to overwrite the repository source credentials. The default value is <code>true</code>. </p>
    pub fn should_overwrite(mut self, input: bool) -> Self {
        self.inner = self.inner.should_overwrite(input);
        self
    }
    /// <p> Set to <code>false</code> to prevent overwriting the repository source credentials. Set to <code>true</code> to overwrite the repository source credentials. The default value is <code>true</code>. </p>
    pub fn set_should_overwrite(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_should_overwrite(input);
        self
    }
}
