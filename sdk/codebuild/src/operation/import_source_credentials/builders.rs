// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_source_credentials::_import_source_credentials_output::ImportSourceCredentialsOutputBuilder;

pub use crate::operation::import_source_credentials::_import_source_credentials_input::ImportSourceCredentialsInputBuilder;

impl ImportSourceCredentialsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::import_source_credentials::ImportSourceCredentialsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_source_credentials::ImportSourceCredentialsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.import_source_credentials();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ImportSourceCredentials`.
///
/// <p> Imports the source repository credentials for an CodeBuild project that has its source code stored in a GitHub, GitHub Enterprise, or Bitbucket repository. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ImportSourceCredentialsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_source_credentials::builders::ImportSourceCredentialsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::import_source_credentials::ImportSourceCredentialsOutput,
        crate::operation::import_source_credentials::ImportSourceCredentialsError,
    > for ImportSourceCredentialsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::import_source_credentials::ImportSourceCredentialsOutput,
            crate::operation::import_source_credentials::ImportSourceCredentialsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ImportSourceCredentialsFluentBuilder {
    /// Creates a new `ImportSourceCredentials`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ImportSourceCredentials as a reference.
    pub fn as_input(&self) -> &crate::operation::import_source_credentials::builders::ImportSourceCredentialsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::import_source_credentials::ImportSourceCredentialsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_source_credentials::ImportSourceCredentialsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::import_source_credentials::ImportSourceCredentials::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::import_source_credentials::ImportSourceCredentials::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::import_source_credentials::ImportSourceCredentialsOutput,
        crate::operation::import_source_credentials::ImportSourceCredentialsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p> The Bitbucket username when the <code>authType</code> is BASIC_AUTH. This parameter is not valid for other types of source providers or connections. </p>
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.username(input.into());
        self
    }
    /// <p> The Bitbucket username when the <code>authType</code> is BASIC_AUTH. This parameter is not valid for other types of source providers or connections. </p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_username(input);
        self
    }
    /// <p> The Bitbucket username when the <code>authType</code> is BASIC_AUTH. This parameter is not valid for other types of source providers or connections. </p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_username()
    }
    /// <p> For GitHub or GitHub Enterprise, this is the personal access token. For Bitbucket, this is the app password. </p>
    pub fn token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.token(input.into());
        self
    }
    /// <p> For GitHub or GitHub Enterprise, this is the personal access token. For Bitbucket, this is the app password. </p>
    pub fn set_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_token(input);
        self
    }
    /// <p> For GitHub or GitHub Enterprise, this is the personal access token. For Bitbucket, this is the app password. </p>
    pub fn get_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_token()
    }
    /// <p> The source provider used for this project. </p>
    pub fn server_type(mut self, input: crate::types::ServerType) -> Self {
        self.inner = self.inner.server_type(input);
        self
    }
    /// <p> The source provider used for this project. </p>
    pub fn set_server_type(mut self, input: ::std::option::Option<crate::types::ServerType>) -> Self {
        self.inner = self.inner.set_server_type(input);
        self
    }
    /// <p> The source provider used for this project. </p>
    pub fn get_server_type(&self) -> &::std::option::Option<crate::types::ServerType> {
        self.inner.get_server_type()
    }
    /// <p> The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API and must be created using the CodeBuild console. </p>
    pub fn auth_type(mut self, input: crate::types::AuthType) -> Self {
        self.inner = self.inner.auth_type(input);
        self
    }
    /// <p> The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API and must be created using the CodeBuild console. </p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::AuthType>) -> Self {
        self.inner = self.inner.set_auth_type(input);
        self
    }
    /// <p> The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API and must be created using the CodeBuild console. </p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::AuthType> {
        self.inner.get_auth_type()
    }
    /// <p> Set to <code>false</code> to prevent overwriting the repository source credentials. Set to <code>true</code> to overwrite the repository source credentials. The default value is <code>true</code>. </p>
    pub fn should_overwrite(mut self, input: bool) -> Self {
        self.inner = self.inner.should_overwrite(input);
        self
    }
    /// <p> Set to <code>false</code> to prevent overwriting the repository source credentials. Set to <code>true</code> to overwrite the repository source credentials. The default value is <code>true</code>. </p>
    pub fn set_should_overwrite(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_should_overwrite(input);
        self
    }
    /// <p> Set to <code>false</code> to prevent overwriting the repository source credentials. Set to <code>true</code> to overwrite the repository source credentials. The default value is <code>true</code>. </p>
    pub fn get_should_overwrite(&self) -> &::std::option::Option<bool> {
        self.inner.get_should_overwrite()
    }
}
