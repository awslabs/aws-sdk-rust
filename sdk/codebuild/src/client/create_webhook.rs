// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateWebhook`](crate::operation::create_webhook::builders::CreateWebhookFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::operation::create_webhook::builders::CreateWebhookFluentBuilder::project_name) / [`set_project_name(Option<String>)`](crate::operation::create_webhook::builders::CreateWebhookFluentBuilder::set_project_name):<br>required: **true**<br><p>The name of the CodeBuild project.</p><br>
    ///   - [`branch_filter(impl Into<String>)`](crate::operation::create_webhook::builders::CreateWebhookFluentBuilder::branch_filter) / [`set_branch_filter(Option<String>)`](crate::operation::create_webhook::builders::CreateWebhookFluentBuilder::set_branch_filter):<br>required: **false**<br><p>A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If <code>branchFilter</code> is empty, then all branches are built.</p> <note>   <p>It is recommended that you use <code>filterGroups</code> instead of <code>branchFilter</code>. </p>  </note><br>
    ///   - [`filter_groups(Vec::<WebhookFilter>)`](crate::operation::create_webhook::builders::CreateWebhookFluentBuilder::filter_groups) / [`set_filter_groups(Option<Vec::<Vec::<WebhookFilter>>>)`](crate::operation::create_webhook::builders::CreateWebhookFluentBuilder::set_filter_groups):<br>required: **false**<br><p>An array of arrays of <code>WebhookFilter</code> objects used to determine which webhooks are triggered. At least one <code>WebhookFilter</code> in the array must specify <code>EVENT</code> as its <code>type</code>. </p>  <p>For a build to be triggered, at least one filter group in the <code>filterGroups</code> array must pass. For a filter group to pass, each of its filters must pass. </p><br>
    ///   - [`build_type(WebhookBuildType)`](crate::operation::create_webhook::builders::CreateWebhookFluentBuilder::build_type) / [`set_build_type(Option<WebhookBuildType>)`](crate::operation::create_webhook::builders::CreateWebhookFluentBuilder::set_build_type):<br>required: **false**<br><p>Specifies the type of build this webhook will trigger.</p><br>
    /// - On success, responds with [`CreateWebhookOutput`](crate::operation::create_webhook::CreateWebhookOutput) with field(s):
    ///   - [`webhook(Option<Webhook>)`](crate::operation::create_webhook::CreateWebhookOutput::webhook): <p>Information about a webhook that connects repository events to a build project in CodeBuild.</p>
    /// - On failure, responds with [`SdkError<CreateWebhookError>`](crate::operation::create_webhook::CreateWebhookError)
    pub fn create_webhook(&self) -> crate::operation::create_webhook::builders::CreateWebhookFluentBuilder {
        crate::operation::create_webhook::builders::CreateWebhookFluentBuilder::new(self.handle.clone())
    }
}
