// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListReportGroups`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`sort_order(SortOrderType)`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::sort_order) / [`set_sort_order(Option<SortOrderType>)`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::set_sort_order): <p> Used to specify the order to sort the list of returned report groups. Valid values are <code>ASCENDING</code> and <code>DESCENDING</code>. </p>
    ///   - [`sort_by(ReportGroupSortByType)`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::sort_by) / [`set_sort_by(Option<ReportGroupSortByType>)`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::set_sort_by): <p> The criterion to be used to list build report groups. Valid values include: </p>  <ul>   <li> <p> <code>CREATED_TIME</code>: List based on when each report group was created.</p> </li>   <li> <p> <code>LAST_MODIFIED_TIME</code>: List based on when each report group was last changed.</p> </li>   <li> <p> <code>NAME</code>: List based on each report group's name.</p> </li>  </ul>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::set_next_token): <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    ///   - [`max_results(i32)`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::set_max_results): <p> The maximum number of paginated report groups returned per response. Use <code>nextToken</code> to iterate pages in the list of returned <code>ReportGroup</code> objects. The default value is 100. </p>
    /// - On success, responds with [`ListReportGroupsOutput`](crate::operation::list_report_groups::ListReportGroupsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_report_groups::ListReportGroupsOutput::next_token): <p> During a previous call, the maximum number of items that can be returned is the value specified in <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i> is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. </p>
    ///   - [`report_groups(Option<Vec<String>>)`](crate::operation::list_report_groups::ListReportGroupsOutput::report_groups): <p> The list of ARNs for the report groups in the current Amazon Web Services account. </p>
    /// - On failure, responds with [`SdkError<ListReportGroupsError>`](crate::operation::list_report_groups::ListReportGroupsError)
    pub fn list_report_groups(
        &self,
    ) -> crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder {
        crate::operation::list_report_groups::builders::ListReportGroupsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
