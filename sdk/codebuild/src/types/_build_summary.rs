// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains summary information about a batch build group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BuildSummary {
    /// <p>The batch build ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>When the build was started, expressed in Unix time format.</p>
    #[doc(hidden)]
    pub requested_on: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the build group.</p>
    /// <dl>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The build group failed.</p>
    /// </dd>
    /// <dt>
    /// FAULT
    /// </dt>
    /// <dd>
    /// <p>The build group faulted.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The build group is still in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The build group stopped.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The build group succeeded.</p>
    /// </dd>
    /// <dt>
    /// TIMED_OUT
    /// </dt>
    /// <dd>
    /// <p>The build group timed out.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub build_status: std::option::Option<crate::types::StatusType>,
    /// <p>A <code>ResolvedArtifact</code> object that represents the primary build artifacts for the build group.</p>
    #[doc(hidden)]
    pub primary_artifact: std::option::Option<crate::types::ResolvedArtifact>,
    /// <p>An array of <code>ResolvedArtifact</code> objects that represents the secondary build artifacts for the build group.</p>
    #[doc(hidden)]
    pub secondary_artifacts: std::option::Option<std::vec::Vec<crate::types::ResolvedArtifact>>,
}
impl BuildSummary {
    /// <p>The batch build ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>When the build was started, expressed in Unix time format.</p>
    pub fn requested_on(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.requested_on.as_ref()
    }
    /// <p>The status of the build group.</p>
    /// <dl>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The build group failed.</p>
    /// </dd>
    /// <dt>
    /// FAULT
    /// </dt>
    /// <dd>
    /// <p>The build group faulted.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The build group is still in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The build group stopped.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The build group succeeded.</p>
    /// </dd>
    /// <dt>
    /// TIMED_OUT
    /// </dt>
    /// <dd>
    /// <p>The build group timed out.</p>
    /// </dd>
    /// </dl>
    pub fn build_status(&self) -> std::option::Option<&crate::types::StatusType> {
        self.build_status.as_ref()
    }
    /// <p>A <code>ResolvedArtifact</code> object that represents the primary build artifacts for the build group.</p>
    pub fn primary_artifact(&self) -> std::option::Option<&crate::types::ResolvedArtifact> {
        self.primary_artifact.as_ref()
    }
    /// <p>An array of <code>ResolvedArtifact</code> objects that represents the secondary build artifacts for the build group.</p>
    pub fn secondary_artifacts(&self) -> std::option::Option<&[crate::types::ResolvedArtifact]> {
        self.secondary_artifacts.as_deref()
    }
}
impl BuildSummary {
    /// Creates a new builder-style object to manufacture [`BuildSummary`](crate::types::BuildSummary).
    pub fn builder() -> crate::types::builders::BuildSummaryBuilder {
        crate::types::builders::BuildSummaryBuilder::default()
    }
}

/// A builder for [`BuildSummary`](crate::types::BuildSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BuildSummaryBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) requested_on: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) build_status: std::option::Option<crate::types::StatusType>,
    pub(crate) primary_artifact: std::option::Option<crate::types::ResolvedArtifact>,
    pub(crate) secondary_artifacts:
        std::option::Option<std::vec::Vec<crate::types::ResolvedArtifact>>,
}
impl BuildSummaryBuilder {
    /// <p>The batch build ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The batch build ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>When the build was started, expressed in Unix time format.</p>
    pub fn requested_on(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.requested_on = Some(input);
        self
    }
    /// <p>When the build was started, expressed in Unix time format.</p>
    pub fn set_requested_on(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.requested_on = input;
        self
    }
    /// <p>The status of the build group.</p>
    /// <dl>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The build group failed.</p>
    /// </dd>
    /// <dt>
    /// FAULT
    /// </dt>
    /// <dd>
    /// <p>The build group faulted.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The build group is still in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The build group stopped.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The build group succeeded.</p>
    /// </dd>
    /// <dt>
    /// TIMED_OUT
    /// </dt>
    /// <dd>
    /// <p>The build group timed out.</p>
    /// </dd>
    /// </dl>
    pub fn build_status(mut self, input: crate::types::StatusType) -> Self {
        self.build_status = Some(input);
        self
    }
    /// <p>The status of the build group.</p>
    /// <dl>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The build group failed.</p>
    /// </dd>
    /// <dt>
    /// FAULT
    /// </dt>
    /// <dd>
    /// <p>The build group faulted.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The build group is still in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The build group stopped.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The build group succeeded.</p>
    /// </dd>
    /// <dt>
    /// TIMED_OUT
    /// </dt>
    /// <dd>
    /// <p>The build group timed out.</p>
    /// </dd>
    /// </dl>
    pub fn set_build_status(
        mut self,
        input: std::option::Option<crate::types::StatusType>,
    ) -> Self {
        self.build_status = input;
        self
    }
    /// <p>A <code>ResolvedArtifact</code> object that represents the primary build artifacts for the build group.</p>
    pub fn primary_artifact(mut self, input: crate::types::ResolvedArtifact) -> Self {
        self.primary_artifact = Some(input);
        self
    }
    /// <p>A <code>ResolvedArtifact</code> object that represents the primary build artifacts for the build group.</p>
    pub fn set_primary_artifact(
        mut self,
        input: std::option::Option<crate::types::ResolvedArtifact>,
    ) -> Self {
        self.primary_artifact = input;
        self
    }
    /// Appends an item to `secondary_artifacts`.
    ///
    /// To override the contents of this collection use [`set_secondary_artifacts`](Self::set_secondary_artifacts).
    ///
    /// <p>An array of <code>ResolvedArtifact</code> objects that represents the secondary build artifacts for the build group.</p>
    pub fn secondary_artifacts(mut self, input: crate::types::ResolvedArtifact) -> Self {
        let mut v = self.secondary_artifacts.unwrap_or_default();
        v.push(input);
        self.secondary_artifacts = Some(v);
        self
    }
    /// <p>An array of <code>ResolvedArtifact</code> objects that represents the secondary build artifacts for the build group.</p>
    pub fn set_secondary_artifacts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResolvedArtifact>>,
    ) -> Self {
        self.secondary_artifacts = input;
        self
    }
    /// Consumes the builder and constructs a [`BuildSummary`](crate::types::BuildSummary).
    pub fn build(self) -> crate::types::BuildSummary {
        crate::types::BuildSummary {
            arn: self.arn,
            requested_on: self.requested_on,
            build_status: self.build_status,
            primary_artifact: self.primary_artifact,
            secondary_artifacts: self.secondary_artifacts,
        }
    }
}
