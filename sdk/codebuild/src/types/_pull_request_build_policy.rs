// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration policy that defines comment-based approval requirements for triggering builds on pull requests. This policy helps control when automated builds are executed based on contributor permissions and approval workflows.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PullRequestBuildPolicy {
    /// <p>Specifies when comment-based approval is required before triggering a build on pull requests. This setting determines whether builds run automatically or require explicit approval through comments.</p>
    /// <ul>
    /// <li>
    /// <p><i>DISABLED</i>: Builds trigger automatically without requiring comment approval</p></li>
    /// <li>
    /// <p><i>ALL_PULL_REQUESTS</i>: All pull requests require comment approval before builds execute (unless contributor is one of the approver roles)</p></li>
    /// <li>
    /// <p><i>FORK_PULL_REQUESTS</i>: Only pull requests from forked repositories require comment approval (unless contributor is one of the approver roles)</p></li>
    /// </ul>
    pub requires_comment_approval: crate::types::PullRequestBuildCommentApproval,
    /// <p>List of repository roles that have approval privileges for pull request builds when comment approval is required. Only users with these roles can provide valid comment approvals. If a pull request contributor is one of these roles, their pull request builds will trigger automatically. This field is only applicable when <code>requiresCommentApproval</code> is not <i>DISABLED</i>.</p>
    pub approver_roles: ::std::option::Option<::std::vec::Vec<crate::types::PullRequestBuildApproverRole>>,
}
impl PullRequestBuildPolicy {
    /// <p>Specifies when comment-based approval is required before triggering a build on pull requests. This setting determines whether builds run automatically or require explicit approval through comments.</p>
    /// <ul>
    /// <li>
    /// <p><i>DISABLED</i>: Builds trigger automatically without requiring comment approval</p></li>
    /// <li>
    /// <p><i>ALL_PULL_REQUESTS</i>: All pull requests require comment approval before builds execute (unless contributor is one of the approver roles)</p></li>
    /// <li>
    /// <p><i>FORK_PULL_REQUESTS</i>: Only pull requests from forked repositories require comment approval (unless contributor is one of the approver roles)</p></li>
    /// </ul>
    pub fn requires_comment_approval(&self) -> &crate::types::PullRequestBuildCommentApproval {
        &self.requires_comment_approval
    }
    /// <p>List of repository roles that have approval privileges for pull request builds when comment approval is required. Only users with these roles can provide valid comment approvals. If a pull request contributor is one of these roles, their pull request builds will trigger automatically. This field is only applicable when <code>requiresCommentApproval</code> is not <i>DISABLED</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.approver_roles.is_none()`.
    pub fn approver_roles(&self) -> &[crate::types::PullRequestBuildApproverRole] {
        self.approver_roles.as_deref().unwrap_or_default()
    }
}
impl PullRequestBuildPolicy {
    /// Creates a new builder-style object to manufacture [`PullRequestBuildPolicy`](crate::types::PullRequestBuildPolicy).
    pub fn builder() -> crate::types::builders::PullRequestBuildPolicyBuilder {
        crate::types::builders::PullRequestBuildPolicyBuilder::default()
    }
}

/// A builder for [`PullRequestBuildPolicy`](crate::types::PullRequestBuildPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PullRequestBuildPolicyBuilder {
    pub(crate) requires_comment_approval: ::std::option::Option<crate::types::PullRequestBuildCommentApproval>,
    pub(crate) approver_roles: ::std::option::Option<::std::vec::Vec<crate::types::PullRequestBuildApproverRole>>,
}
impl PullRequestBuildPolicyBuilder {
    /// <p>Specifies when comment-based approval is required before triggering a build on pull requests. This setting determines whether builds run automatically or require explicit approval through comments.</p>
    /// <ul>
    /// <li>
    /// <p><i>DISABLED</i>: Builds trigger automatically without requiring comment approval</p></li>
    /// <li>
    /// <p><i>ALL_PULL_REQUESTS</i>: All pull requests require comment approval before builds execute (unless contributor is one of the approver roles)</p></li>
    /// <li>
    /// <p><i>FORK_PULL_REQUESTS</i>: Only pull requests from forked repositories require comment approval (unless contributor is one of the approver roles)</p></li>
    /// </ul>
    /// This field is required.
    pub fn requires_comment_approval(mut self, input: crate::types::PullRequestBuildCommentApproval) -> Self {
        self.requires_comment_approval = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies when comment-based approval is required before triggering a build on pull requests. This setting determines whether builds run automatically or require explicit approval through comments.</p>
    /// <ul>
    /// <li>
    /// <p><i>DISABLED</i>: Builds trigger automatically without requiring comment approval</p></li>
    /// <li>
    /// <p><i>ALL_PULL_REQUESTS</i>: All pull requests require comment approval before builds execute (unless contributor is one of the approver roles)</p></li>
    /// <li>
    /// <p><i>FORK_PULL_REQUESTS</i>: Only pull requests from forked repositories require comment approval (unless contributor is one of the approver roles)</p></li>
    /// </ul>
    pub fn set_requires_comment_approval(mut self, input: ::std::option::Option<crate::types::PullRequestBuildCommentApproval>) -> Self {
        self.requires_comment_approval = input;
        self
    }
    /// <p>Specifies when comment-based approval is required before triggering a build on pull requests. This setting determines whether builds run automatically or require explicit approval through comments.</p>
    /// <ul>
    /// <li>
    /// <p><i>DISABLED</i>: Builds trigger automatically without requiring comment approval</p></li>
    /// <li>
    /// <p><i>ALL_PULL_REQUESTS</i>: All pull requests require comment approval before builds execute (unless contributor is one of the approver roles)</p></li>
    /// <li>
    /// <p><i>FORK_PULL_REQUESTS</i>: Only pull requests from forked repositories require comment approval (unless contributor is one of the approver roles)</p></li>
    /// </ul>
    pub fn get_requires_comment_approval(&self) -> &::std::option::Option<crate::types::PullRequestBuildCommentApproval> {
        &self.requires_comment_approval
    }
    /// Appends an item to `approver_roles`.
    ///
    /// To override the contents of this collection use [`set_approver_roles`](Self::set_approver_roles).
    ///
    /// <p>List of repository roles that have approval privileges for pull request builds when comment approval is required. Only users with these roles can provide valid comment approvals. If a pull request contributor is one of these roles, their pull request builds will trigger automatically. This field is only applicable when <code>requiresCommentApproval</code> is not <i>DISABLED</i>.</p>
    pub fn approver_roles(mut self, input: crate::types::PullRequestBuildApproverRole) -> Self {
        let mut v = self.approver_roles.unwrap_or_default();
        v.push(input);
        self.approver_roles = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of repository roles that have approval privileges for pull request builds when comment approval is required. Only users with these roles can provide valid comment approvals. If a pull request contributor is one of these roles, their pull request builds will trigger automatically. This field is only applicable when <code>requiresCommentApproval</code> is not <i>DISABLED</i>.</p>
    pub fn set_approver_roles(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PullRequestBuildApproverRole>>) -> Self {
        self.approver_roles = input;
        self
    }
    /// <p>List of repository roles that have approval privileges for pull request builds when comment approval is required. Only users with these roles can provide valid comment approvals. If a pull request contributor is one of these roles, their pull request builds will trigger automatically. This field is only applicable when <code>requiresCommentApproval</code> is not <i>DISABLED</i>.</p>
    pub fn get_approver_roles(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PullRequestBuildApproverRole>> {
        &self.approver_roles
    }
    /// Consumes the builder and constructs a [`PullRequestBuildPolicy`](crate::types::PullRequestBuildPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`requires_comment_approval`](crate::types::builders::PullRequestBuildPolicyBuilder::requires_comment_approval)
    pub fn build(self) -> ::std::result::Result<crate::types::PullRequestBuildPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PullRequestBuildPolicy {
            requires_comment_approval: self.requires_comment_approval.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "requires_comment_approval",
                    "requires_comment_approval was not specified but it is required when building PullRequestBuildPolicy",
                )
            })?,
            approver_roles: self.approver_roles,
        })
    }
}
