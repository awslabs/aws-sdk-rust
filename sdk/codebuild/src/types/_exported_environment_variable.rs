// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an exported environment variable. </p>
/// <p>Exported environment variables are used in conjunction with CodePipeline to export environment variables from the current build stage to subsequent stages in the pipeline. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-variables.html">Working with variables</a> in the <i>CodePipeline User Guide</i>.</p> <note>
/// <p> During a build, the value of a variable is available starting with the <code>install</code> phase. It can be updated between the start of the <code>install</code> phase and the end of the <code>post_build</code> phase. After the <code>post_build</code> phase ends, the value of exported variables cannot change.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportedEnvironmentVariable {
    /// <p>The name of the exported environment variable.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The value assigned to the exported environment variable.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl ExportedEnvironmentVariable {
    /// <p>The name of the exported environment variable.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The value assigned to the exported environment variable.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ExportedEnvironmentVariable {
    /// Creates a new builder-style object to manufacture [`ExportedEnvironmentVariable`](crate::types::ExportedEnvironmentVariable).
    pub fn builder() -> crate::types::builders::ExportedEnvironmentVariableBuilder {
        crate::types::builders::ExportedEnvironmentVariableBuilder::default()
    }
}

/// A builder for [`ExportedEnvironmentVariable`](crate::types::ExportedEnvironmentVariable).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExportedEnvironmentVariableBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl ExportedEnvironmentVariableBuilder {
    /// <p>The name of the exported environment variable.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the exported environment variable.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The value assigned to the exported environment variable.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value assigned to the exported environment variable.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`ExportedEnvironmentVariable`](crate::types::ExportedEnvironmentVariable).
    pub fn build(self) -> crate::types::ExportedEnvironmentVariable {
        crate::types::ExportedEnvironmentVariable {
            name: self.name,
            value: self.value,
        }
    }
}
