// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a batch build.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BuildBatch {
    /// <p>The identifier of the batch build.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ARN of the batch build.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time that the batch build started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the batch build ended.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current phase of the batch build.</p>
    #[doc(hidden)]
    pub current_phase: std::option::Option<std::string::String>,
    /// <p>The status of the batch build.</p>
    #[doc(hidden)]
    pub build_batch_status: std::option::Option<crate::types::StatusType>,
    /// <p>The identifier of the version of the source code to be built.</p>
    #[doc(hidden)]
    pub source_version: std::option::Option<std::string::String>,
    /// <p>The identifier of the resolved version of this batch build's source code.</p>
    /// <ul>
    /// <li> <p>For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.</p> </li>
    /// <li> <p>For CodePipeline, the source revision provided by CodePipeline.</p> </li>
    /// <li> <p>For Amazon S3, this does not apply.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub resolved_source_version: std::option::Option<std::string::String>,
    /// <p>The name of the batch build project.</p>
    #[doc(hidden)]
    pub project_name: std::option::Option<std::string::String>,
    /// <p>An array of <code>BuildBatchPhase</code> objects the specify the phases of the batch build.</p>
    #[doc(hidden)]
    pub phases: std::option::Option<std::vec::Vec<crate::types::BuildBatchPhase>>,
    /// <p>Information about the build input source code for the build project.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::ProjectSource>,
    /// <p>An array of <code>ProjectSource</code> objects that define the sources for the batch build.</p>
    #[doc(hidden)]
    pub secondary_sources: std::option::Option<std::vec::Vec<crate::types::ProjectSource>>,
    /// <p>An array of <code>ProjectSourceVersion</code> objects. Each <code>ProjectSourceVersion</code> must be one of: </p>
    /// <ul>
    /// <li> <p>For CodeCommit: the commit ID, branch, or Git tag to use.</p> </li>
    /// <li> <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format <code>pr/pull-request-ID</code> (for example, <code>pr/25</code>). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Amazon S3: the version ID of the object that represents the build input ZIP file to use.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub secondary_source_versions:
        std::option::Option<std::vec::Vec<crate::types::ProjectSourceVersion>>,
    /// <p>A <code>BuildArtifacts</code> object the defines the build artifacts for this batch build.</p>
    #[doc(hidden)]
    pub artifacts: std::option::Option<crate::types::BuildArtifacts>,
    /// <p>An array of <code>BuildArtifacts</code> objects the define the build artifacts for this batch build.</p>
    #[doc(hidden)]
    pub secondary_artifacts: std::option::Option<std::vec::Vec<crate::types::BuildArtifacts>>,
    /// <p>Information about the cache for the build project.</p>
    #[doc(hidden)]
    pub cache: std::option::Option<crate::types::ProjectCache>,
    /// <p>Information about the build environment of the build project.</p>
    #[doc(hidden)]
    pub environment: std::option::Option<crate::types::ProjectEnvironment>,
    /// <p>The name of a service role used for builds in the batch.</p>
    #[doc(hidden)]
    pub service_role: std::option::Option<std::string::String>,
    /// <p> Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both. </p>
    #[doc(hidden)]
    pub log_config: std::option::Option<crate::types::LogsConfig>,
    /// <p>Specifies the maximum amount of time, in minutes, that the build in a batch must be completed in.</p>
    #[doc(hidden)]
    pub build_timeout_in_minutes: std::option::Option<i32>,
    /// <p>Specifies the amount of time, in minutes, that the batch build is allowed to be queued before it times out.</p>
    #[doc(hidden)]
    pub queued_timeout_in_minutes: std::option::Option<i32>,
    /// <p>Indicates if the batch build is complete.</p>
    #[doc(hidden)]
    pub complete: bool,
    /// <p>The entity that started the batch build. Valid values include:</p>
    /// <ul>
    /// <li> <p>If CodePipeline started the build, the pipeline's name (for example, <code>codepipeline/my-demo-pipeline</code>).</p> </li>
    /// <li> <p>If an IAM user started the build, the user's name.</p> </li>
    /// <li> <p>If the Jenkins plugin for CodeBuild started the build, the string <code>CodeBuild-Jenkins-Plugin</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub initiator: std::option::Option<std::string::String>,
    /// <p>Information about the VPC configuration that CodeBuild accesses.</p>
    #[doc(hidden)]
    pub vpc_config: std::option::Option<crate::types::VpcConfig>,
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the batch build output artifacts.</p> <note>
    /// <p>You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. </p>
    /// </note>
    /// <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format <code>alias/
    /// <alias-name></alias-name></code>).</p>
    #[doc(hidden)]
    pub encryption_key: std::option::Option<std::string::String>,
    /// <p>The number of the batch build. For each project, the <code>buildBatchNumber</code> of its first batch build is <code>1</code>. The <code>buildBatchNumber</code> of each subsequent batch build is incremented by <code>1</code>. If a batch build is deleted, the <code>buildBatchNumber</code> of other batch builds does not change.</p>
    #[doc(hidden)]
    pub build_batch_number: std::option::Option<i64>,
    /// <p>An array of <code>ProjectFileSystemLocation</code> objects for the batch build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System. </p>
    #[doc(hidden)]
    pub file_system_locations:
        std::option::Option<std::vec::Vec<crate::types::ProjectFileSystemLocation>>,
    /// <p>Contains configuration information about a batch build project.</p>
    #[doc(hidden)]
    pub build_batch_config: std::option::Option<crate::types::ProjectBuildBatchConfig>,
    /// <p>An array of <code>BuildGroup</code> objects that define the build groups for the batch build.</p>
    #[doc(hidden)]
    pub build_groups: std::option::Option<std::vec::Vec<crate::types::BuildGroup>>,
    /// <p>Specifies if session debugging is enabled for this batch build. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a running build in Session Manager</a>. Batch session debugging is not supported for matrix batch builds.</p>
    #[doc(hidden)]
    pub debug_session_enabled: std::option::Option<bool>,
}
impl BuildBatch {
    /// <p>The identifier of the batch build.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN of the batch build.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time that the batch build started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time that the batch build ended.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The current phase of the batch build.</p>
    pub fn current_phase(&self) -> std::option::Option<&str> {
        self.current_phase.as_deref()
    }
    /// <p>The status of the batch build.</p>
    pub fn build_batch_status(&self) -> std::option::Option<&crate::types::StatusType> {
        self.build_batch_status.as_ref()
    }
    /// <p>The identifier of the version of the source code to be built.</p>
    pub fn source_version(&self) -> std::option::Option<&str> {
        self.source_version.as_deref()
    }
    /// <p>The identifier of the resolved version of this batch build's source code.</p>
    /// <ul>
    /// <li> <p>For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.</p> </li>
    /// <li> <p>For CodePipeline, the source revision provided by CodePipeline.</p> </li>
    /// <li> <p>For Amazon S3, this does not apply.</p> </li>
    /// </ul>
    pub fn resolved_source_version(&self) -> std::option::Option<&str> {
        self.resolved_source_version.as_deref()
    }
    /// <p>The name of the batch build project.</p>
    pub fn project_name(&self) -> std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>An array of <code>BuildBatchPhase</code> objects the specify the phases of the batch build.</p>
    pub fn phases(&self) -> std::option::Option<&[crate::types::BuildBatchPhase]> {
        self.phases.as_deref()
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::ProjectSource> {
        self.source.as_ref()
    }
    /// <p>An array of <code>ProjectSource</code> objects that define the sources for the batch build.</p>
    pub fn secondary_sources(&self) -> std::option::Option<&[crate::types::ProjectSource]> {
        self.secondary_sources.as_deref()
    }
    /// <p>An array of <code>ProjectSourceVersion</code> objects. Each <code>ProjectSourceVersion</code> must be one of: </p>
    /// <ul>
    /// <li> <p>For CodeCommit: the commit ID, branch, or Git tag to use.</p> </li>
    /// <li> <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format <code>pr/pull-request-ID</code> (for example, <code>pr/25</code>). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Amazon S3: the version ID of the object that represents the build input ZIP file to use.</p> </li>
    /// </ul>
    pub fn secondary_source_versions(
        &self,
    ) -> std::option::Option<&[crate::types::ProjectSourceVersion]> {
        self.secondary_source_versions.as_deref()
    }
    /// <p>A <code>BuildArtifacts</code> object the defines the build artifacts for this batch build.</p>
    pub fn artifacts(&self) -> std::option::Option<&crate::types::BuildArtifacts> {
        self.artifacts.as_ref()
    }
    /// <p>An array of <code>BuildArtifacts</code> objects the define the build artifacts for this batch build.</p>
    pub fn secondary_artifacts(&self) -> std::option::Option<&[crate::types::BuildArtifacts]> {
        self.secondary_artifacts.as_deref()
    }
    /// <p>Information about the cache for the build project.</p>
    pub fn cache(&self) -> std::option::Option<&crate::types::ProjectCache> {
        self.cache.as_ref()
    }
    /// <p>Information about the build environment of the build project.</p>
    pub fn environment(&self) -> std::option::Option<&crate::types::ProjectEnvironment> {
        self.environment.as_ref()
    }
    /// <p>The name of a service role used for builds in the batch.</p>
    pub fn service_role(&self) -> std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p> Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both. </p>
    pub fn log_config(&self) -> std::option::Option<&crate::types::LogsConfig> {
        self.log_config.as_ref()
    }
    /// <p>Specifies the maximum amount of time, in minutes, that the build in a batch must be completed in.</p>
    pub fn build_timeout_in_minutes(&self) -> std::option::Option<i32> {
        self.build_timeout_in_minutes
    }
    /// <p>Specifies the amount of time, in minutes, that the batch build is allowed to be queued before it times out.</p>
    pub fn queued_timeout_in_minutes(&self) -> std::option::Option<i32> {
        self.queued_timeout_in_minutes
    }
    /// <p>Indicates if the batch build is complete.</p>
    pub fn complete(&self) -> bool {
        self.complete
    }
    /// <p>The entity that started the batch build. Valid values include:</p>
    /// <ul>
    /// <li> <p>If CodePipeline started the build, the pipeline's name (for example, <code>codepipeline/my-demo-pipeline</code>).</p> </li>
    /// <li> <p>If an IAM user started the build, the user's name.</p> </li>
    /// <li> <p>If the Jenkins plugin for CodeBuild started the build, the string <code>CodeBuild-Jenkins-Plugin</code>.</p> </li>
    /// </ul>
    pub fn initiator(&self) -> std::option::Option<&str> {
        self.initiator.as_deref()
    }
    /// <p>Information about the VPC configuration that CodeBuild accesses.</p>
    pub fn vpc_config(&self) -> std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the batch build output artifacts.</p> <note>
    /// <p>You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. </p>
    /// </note>
    /// <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format <code>alias/
    /// <alias-name></alias-name></code>).</p>
    pub fn encryption_key(&self) -> std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
    /// <p>The number of the batch build. For each project, the <code>buildBatchNumber</code> of its first batch build is <code>1</code>. The <code>buildBatchNumber</code> of each subsequent batch build is incremented by <code>1</code>. If a batch build is deleted, the <code>buildBatchNumber</code> of other batch builds does not change.</p>
    pub fn build_batch_number(&self) -> std::option::Option<i64> {
        self.build_batch_number
    }
    /// <p>An array of <code>ProjectFileSystemLocation</code> objects for the batch build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System. </p>
    pub fn file_system_locations(
        &self,
    ) -> std::option::Option<&[crate::types::ProjectFileSystemLocation]> {
        self.file_system_locations.as_deref()
    }
    /// <p>Contains configuration information about a batch build project.</p>
    pub fn build_batch_config(
        &self,
    ) -> std::option::Option<&crate::types::ProjectBuildBatchConfig> {
        self.build_batch_config.as_ref()
    }
    /// <p>An array of <code>BuildGroup</code> objects that define the build groups for the batch build.</p>
    pub fn build_groups(&self) -> std::option::Option<&[crate::types::BuildGroup]> {
        self.build_groups.as_deref()
    }
    /// <p>Specifies if session debugging is enabled for this batch build. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a running build in Session Manager</a>. Batch session debugging is not supported for matrix batch builds.</p>
    pub fn debug_session_enabled(&self) -> std::option::Option<bool> {
        self.debug_session_enabled
    }
}
impl BuildBatch {
    /// Creates a new builder-style object to manufacture [`BuildBatch`](crate::types::BuildBatch).
    pub fn builder() -> crate::types::builders::BuildBatchBuilder {
        crate::types::builders::BuildBatchBuilder::default()
    }
}

/// A builder for [`BuildBatch`](crate::types::BuildBatch).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BuildBatchBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) current_phase: std::option::Option<std::string::String>,
    pub(crate) build_batch_status: std::option::Option<crate::types::StatusType>,
    pub(crate) source_version: std::option::Option<std::string::String>,
    pub(crate) resolved_source_version: std::option::Option<std::string::String>,
    pub(crate) project_name: std::option::Option<std::string::String>,
    pub(crate) phases: std::option::Option<std::vec::Vec<crate::types::BuildBatchPhase>>,
    pub(crate) source: std::option::Option<crate::types::ProjectSource>,
    pub(crate) secondary_sources: std::option::Option<std::vec::Vec<crate::types::ProjectSource>>,
    pub(crate) secondary_source_versions:
        std::option::Option<std::vec::Vec<crate::types::ProjectSourceVersion>>,
    pub(crate) artifacts: std::option::Option<crate::types::BuildArtifacts>,
    pub(crate) secondary_artifacts:
        std::option::Option<std::vec::Vec<crate::types::BuildArtifacts>>,
    pub(crate) cache: std::option::Option<crate::types::ProjectCache>,
    pub(crate) environment: std::option::Option<crate::types::ProjectEnvironment>,
    pub(crate) service_role: std::option::Option<std::string::String>,
    pub(crate) log_config: std::option::Option<crate::types::LogsConfig>,
    pub(crate) build_timeout_in_minutes: std::option::Option<i32>,
    pub(crate) queued_timeout_in_minutes: std::option::Option<i32>,
    pub(crate) complete: std::option::Option<bool>,
    pub(crate) initiator: std::option::Option<std::string::String>,
    pub(crate) vpc_config: std::option::Option<crate::types::VpcConfig>,
    pub(crate) encryption_key: std::option::Option<std::string::String>,
    pub(crate) build_batch_number: std::option::Option<i64>,
    pub(crate) file_system_locations:
        std::option::Option<std::vec::Vec<crate::types::ProjectFileSystemLocation>>,
    pub(crate) build_batch_config: std::option::Option<crate::types::ProjectBuildBatchConfig>,
    pub(crate) build_groups: std::option::Option<std::vec::Vec<crate::types::BuildGroup>>,
    pub(crate) debug_session_enabled: std::option::Option<bool>,
}
impl BuildBatchBuilder {
    /// <p>The identifier of the batch build.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the batch build.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ARN of the batch build.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the batch build.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The date and time that the batch build started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The date and time that the batch build started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time that the batch build ended.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The date and time that the batch build ended.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The current phase of the batch build.</p>
    pub fn current_phase(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_phase = Some(input.into());
        self
    }
    /// <p>The current phase of the batch build.</p>
    pub fn set_current_phase(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.current_phase = input;
        self
    }
    /// <p>The status of the batch build.</p>
    pub fn build_batch_status(mut self, input: crate::types::StatusType) -> Self {
        self.build_batch_status = Some(input);
        self
    }
    /// <p>The status of the batch build.</p>
    pub fn set_build_batch_status(
        mut self,
        input: std::option::Option<crate::types::StatusType>,
    ) -> Self {
        self.build_batch_status = input;
        self
    }
    /// <p>The identifier of the version of the source code to be built.</p>
    pub fn source_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_version = Some(input.into());
        self
    }
    /// <p>The identifier of the version of the source code to be built.</p>
    pub fn set_source_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_version = input;
        self
    }
    /// <p>The identifier of the resolved version of this batch build's source code.</p>
    /// <ul>
    /// <li> <p>For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.</p> </li>
    /// <li> <p>For CodePipeline, the source revision provided by CodePipeline.</p> </li>
    /// <li> <p>For Amazon S3, this does not apply.</p> </li>
    /// </ul>
    pub fn resolved_source_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.resolved_source_version = Some(input.into());
        self
    }
    /// <p>The identifier of the resolved version of this batch build's source code.</p>
    /// <ul>
    /// <li> <p>For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.</p> </li>
    /// <li> <p>For CodePipeline, the source revision provided by CodePipeline.</p> </li>
    /// <li> <p>For Amazon S3, this does not apply.</p> </li>
    /// </ul>
    pub fn set_resolved_source_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resolved_source_version = input;
        self
    }
    /// <p>The name of the batch build project.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_name = Some(input.into());
        self
    }
    /// <p>The name of the batch build project.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// Appends an item to `phases`.
    ///
    /// To override the contents of this collection use [`set_phases`](Self::set_phases).
    ///
    /// <p>An array of <code>BuildBatchPhase</code> objects the specify the phases of the batch build.</p>
    pub fn phases(mut self, input: crate::types::BuildBatchPhase) -> Self {
        let mut v = self.phases.unwrap_or_default();
        v.push(input);
        self.phases = Some(v);
        self
    }
    /// <p>An array of <code>BuildBatchPhase</code> objects the specify the phases of the batch build.</p>
    pub fn set_phases(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BuildBatchPhase>>,
    ) -> Self {
        self.phases = input;
        self
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn source(mut self, input: crate::types::ProjectSource) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::ProjectSource>) -> Self {
        self.source = input;
        self
    }
    /// Appends an item to `secondary_sources`.
    ///
    /// To override the contents of this collection use [`set_secondary_sources`](Self::set_secondary_sources).
    ///
    /// <p>An array of <code>ProjectSource</code> objects that define the sources for the batch build.</p>
    pub fn secondary_sources(mut self, input: crate::types::ProjectSource) -> Self {
        let mut v = self.secondary_sources.unwrap_or_default();
        v.push(input);
        self.secondary_sources = Some(v);
        self
    }
    /// <p>An array of <code>ProjectSource</code> objects that define the sources for the batch build.</p>
    pub fn set_secondary_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProjectSource>>,
    ) -> Self {
        self.secondary_sources = input;
        self
    }
    /// Appends an item to `secondary_source_versions`.
    ///
    /// To override the contents of this collection use [`set_secondary_source_versions`](Self::set_secondary_source_versions).
    ///
    /// <p>An array of <code>ProjectSourceVersion</code> objects. Each <code>ProjectSourceVersion</code> must be one of: </p>
    /// <ul>
    /// <li> <p>For CodeCommit: the commit ID, branch, or Git tag to use.</p> </li>
    /// <li> <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format <code>pr/pull-request-ID</code> (for example, <code>pr/25</code>). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Amazon S3: the version ID of the object that represents the build input ZIP file to use.</p> </li>
    /// </ul>
    pub fn secondary_source_versions(mut self, input: crate::types::ProjectSourceVersion) -> Self {
        let mut v = self.secondary_source_versions.unwrap_or_default();
        v.push(input);
        self.secondary_source_versions = Some(v);
        self
    }
    /// <p>An array of <code>ProjectSourceVersion</code> objects. Each <code>ProjectSourceVersion</code> must be one of: </p>
    /// <ul>
    /// <li> <p>For CodeCommit: the commit ID, branch, or Git tag to use.</p> </li>
    /// <li> <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format <code>pr/pull-request-ID</code> (for example, <code>pr/25</code>). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li>
    /// <li> <p>For Amazon S3: the version ID of the object that represents the build input ZIP file to use.</p> </li>
    /// </ul>
    pub fn set_secondary_source_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProjectSourceVersion>>,
    ) -> Self {
        self.secondary_source_versions = input;
        self
    }
    /// <p>A <code>BuildArtifacts</code> object the defines the build artifacts for this batch build.</p>
    pub fn artifacts(mut self, input: crate::types::BuildArtifacts) -> Self {
        self.artifacts = Some(input);
        self
    }
    /// <p>A <code>BuildArtifacts</code> object the defines the build artifacts for this batch build.</p>
    pub fn set_artifacts(
        mut self,
        input: std::option::Option<crate::types::BuildArtifacts>,
    ) -> Self {
        self.artifacts = input;
        self
    }
    /// Appends an item to `secondary_artifacts`.
    ///
    /// To override the contents of this collection use [`set_secondary_artifacts`](Self::set_secondary_artifacts).
    ///
    /// <p>An array of <code>BuildArtifacts</code> objects the define the build artifacts for this batch build.</p>
    pub fn secondary_artifacts(mut self, input: crate::types::BuildArtifacts) -> Self {
        let mut v = self.secondary_artifacts.unwrap_or_default();
        v.push(input);
        self.secondary_artifacts = Some(v);
        self
    }
    /// <p>An array of <code>BuildArtifacts</code> objects the define the build artifacts for this batch build.</p>
    pub fn set_secondary_artifacts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BuildArtifacts>>,
    ) -> Self {
        self.secondary_artifacts = input;
        self
    }
    /// <p>Information about the cache for the build project.</p>
    pub fn cache(mut self, input: crate::types::ProjectCache) -> Self {
        self.cache = Some(input);
        self
    }
    /// <p>Information about the cache for the build project.</p>
    pub fn set_cache(mut self, input: std::option::Option<crate::types::ProjectCache>) -> Self {
        self.cache = input;
        self
    }
    /// <p>Information about the build environment of the build project.</p>
    pub fn environment(mut self, input: crate::types::ProjectEnvironment) -> Self {
        self.environment = Some(input);
        self
    }
    /// <p>Information about the build environment of the build project.</p>
    pub fn set_environment(
        mut self,
        input: std::option::Option<crate::types::ProjectEnvironment>,
    ) -> Self {
        self.environment = input;
        self
    }
    /// <p>The name of a service role used for builds in the batch.</p>
    pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role = Some(input.into());
        self
    }
    /// <p>The name of a service role used for builds in the batch.</p>
    pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role = input;
        self
    }
    /// <p> Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both. </p>
    pub fn log_config(mut self, input: crate::types::LogsConfig) -> Self {
        self.log_config = Some(input);
        self
    }
    /// <p> Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both. </p>
    pub fn set_log_config(mut self, input: std::option::Option<crate::types::LogsConfig>) -> Self {
        self.log_config = input;
        self
    }
    /// <p>Specifies the maximum amount of time, in minutes, that the build in a batch must be completed in.</p>
    pub fn build_timeout_in_minutes(mut self, input: i32) -> Self {
        self.build_timeout_in_minutes = Some(input);
        self
    }
    /// <p>Specifies the maximum amount of time, in minutes, that the build in a batch must be completed in.</p>
    pub fn set_build_timeout_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.build_timeout_in_minutes = input;
        self
    }
    /// <p>Specifies the amount of time, in minutes, that the batch build is allowed to be queued before it times out.</p>
    pub fn queued_timeout_in_minutes(mut self, input: i32) -> Self {
        self.queued_timeout_in_minutes = Some(input);
        self
    }
    /// <p>Specifies the amount of time, in minutes, that the batch build is allowed to be queued before it times out.</p>
    pub fn set_queued_timeout_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.queued_timeout_in_minutes = input;
        self
    }
    /// <p>Indicates if the batch build is complete.</p>
    pub fn complete(mut self, input: bool) -> Self {
        self.complete = Some(input);
        self
    }
    /// <p>Indicates if the batch build is complete.</p>
    pub fn set_complete(mut self, input: std::option::Option<bool>) -> Self {
        self.complete = input;
        self
    }
    /// <p>The entity that started the batch build. Valid values include:</p>
    /// <ul>
    /// <li> <p>If CodePipeline started the build, the pipeline's name (for example, <code>codepipeline/my-demo-pipeline</code>).</p> </li>
    /// <li> <p>If an IAM user started the build, the user's name.</p> </li>
    /// <li> <p>If the Jenkins plugin for CodeBuild started the build, the string <code>CodeBuild-Jenkins-Plugin</code>.</p> </li>
    /// </ul>
    pub fn initiator(mut self, input: impl Into<std::string::String>) -> Self {
        self.initiator = Some(input.into());
        self
    }
    /// <p>The entity that started the batch build. Valid values include:</p>
    /// <ul>
    /// <li> <p>If CodePipeline started the build, the pipeline's name (for example, <code>codepipeline/my-demo-pipeline</code>).</p> </li>
    /// <li> <p>If an IAM user started the build, the user's name.</p> </li>
    /// <li> <p>If the Jenkins plugin for CodeBuild started the build, the string <code>CodeBuild-Jenkins-Plugin</code>.</p> </li>
    /// </ul>
    pub fn set_initiator(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.initiator = input;
        self
    }
    /// <p>Information about the VPC configuration that CodeBuild accesses.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = Some(input);
        self
    }
    /// <p>Information about the VPC configuration that CodeBuild accesses.</p>
    pub fn set_vpc_config(mut self, input: std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the batch build output artifacts.</p> <note>
    /// <p>You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. </p>
    /// </note>
    /// <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format <code>alias/
    /// <alias-name></alias-name></code>).</p>
    pub fn encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key = Some(input.into());
        self
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the batch build output artifacts.</p> <note>
    /// <p>You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. </p>
    /// </note>
    /// <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format <code>alias/
    /// <alias-name></alias-name></code>).</p>
    pub fn set_encryption_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// <p>The number of the batch build. For each project, the <code>buildBatchNumber</code> of its first batch build is <code>1</code>. The <code>buildBatchNumber</code> of each subsequent batch build is incremented by <code>1</code>. If a batch build is deleted, the <code>buildBatchNumber</code> of other batch builds does not change.</p>
    pub fn build_batch_number(mut self, input: i64) -> Self {
        self.build_batch_number = Some(input);
        self
    }
    /// <p>The number of the batch build. For each project, the <code>buildBatchNumber</code> of its first batch build is <code>1</code>. The <code>buildBatchNumber</code> of each subsequent batch build is incremented by <code>1</code>. If a batch build is deleted, the <code>buildBatchNumber</code> of other batch builds does not change.</p>
    pub fn set_build_batch_number(mut self, input: std::option::Option<i64>) -> Self {
        self.build_batch_number = input;
        self
    }
    /// Appends an item to `file_system_locations`.
    ///
    /// To override the contents of this collection use [`set_file_system_locations`](Self::set_file_system_locations).
    ///
    /// <p>An array of <code>ProjectFileSystemLocation</code> objects for the batch build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System. </p>
    pub fn file_system_locations(mut self, input: crate::types::ProjectFileSystemLocation) -> Self {
        let mut v = self.file_system_locations.unwrap_or_default();
        v.push(input);
        self.file_system_locations = Some(v);
        self
    }
    /// <p>An array of <code>ProjectFileSystemLocation</code> objects for the batch build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System. </p>
    pub fn set_file_system_locations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProjectFileSystemLocation>>,
    ) -> Self {
        self.file_system_locations = input;
        self
    }
    /// <p>Contains configuration information about a batch build project.</p>
    pub fn build_batch_config(mut self, input: crate::types::ProjectBuildBatchConfig) -> Self {
        self.build_batch_config = Some(input);
        self
    }
    /// <p>Contains configuration information about a batch build project.</p>
    pub fn set_build_batch_config(
        mut self,
        input: std::option::Option<crate::types::ProjectBuildBatchConfig>,
    ) -> Self {
        self.build_batch_config = input;
        self
    }
    /// Appends an item to `build_groups`.
    ///
    /// To override the contents of this collection use [`set_build_groups`](Self::set_build_groups).
    ///
    /// <p>An array of <code>BuildGroup</code> objects that define the build groups for the batch build.</p>
    pub fn build_groups(mut self, input: crate::types::BuildGroup) -> Self {
        let mut v = self.build_groups.unwrap_or_default();
        v.push(input);
        self.build_groups = Some(v);
        self
    }
    /// <p>An array of <code>BuildGroup</code> objects that define the build groups for the batch build.</p>
    pub fn set_build_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BuildGroup>>,
    ) -> Self {
        self.build_groups = input;
        self
    }
    /// <p>Specifies if session debugging is enabled for this batch build. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a running build in Session Manager</a>. Batch session debugging is not supported for matrix batch builds.</p>
    pub fn debug_session_enabled(mut self, input: bool) -> Self {
        self.debug_session_enabled = Some(input);
        self
    }
    /// <p>Specifies if session debugging is enabled for this batch build. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a running build in Session Manager</a>. Batch session debugging is not supported for matrix batch builds.</p>
    pub fn set_debug_session_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.debug_session_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`BuildBatch`](crate::types::BuildBatch).
    pub fn build(self) -> crate::types::BuildBatch {
        crate::types::BuildBatch {
            id: self.id,
            arn: self.arn,
            start_time: self.start_time,
            end_time: self.end_time,
            current_phase: self.current_phase,
            build_batch_status: self.build_batch_status,
            source_version: self.source_version,
            resolved_source_version: self.resolved_source_version,
            project_name: self.project_name,
            phases: self.phases,
            source: self.source,
            secondary_sources: self.secondary_sources,
            secondary_source_versions: self.secondary_source_versions,
            artifacts: self.artifacts,
            secondary_artifacts: self.secondary_artifacts,
            cache: self.cache,
            environment: self.environment,
            service_role: self.service_role,
            log_config: self.log_config,
            build_timeout_in_minutes: self.build_timeout_in_minutes,
            queued_timeout_in_minutes: self.queued_timeout_in_minutes,
            complete: self.complete.unwrap_or_default(),
            initiator: self.initiator,
            vpc_config: self.vpc_config,
            encryption_key: self.encryption_key,
            build_batch_number: self.build_batch_number,
            file_system_locations: self.file_system_locations,
            build_batch_config: self.build_batch_config,
            build_groups: self.build_groups,
            debug_session_enabled: self.debug_session_enabled,
        }
    }
}
