// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about build output artifacts.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BuildArtifacts {
    /// <p>Information about the location of the build artifacts.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>The SHA-256 hash of the build artifact.</p>
    /// <p>You can use this hash along with a checksum tool to confirm file integrity and authenticity.</p> <note>
    /// <p>This value is available only if the build project's <code>packaging</code> value is set to <code>ZIP</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub sha256sum: std::option::Option<std::string::String>,
    /// <p>The MD5 hash of the build artifact.</p>
    /// <p>You can use this hash along with a checksum tool to confirm file integrity and authenticity.</p> <note>
    /// <p>This value is available only if the build project's <code>packaging</code> value is set to <code>ZIP</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub md5sum: std::option::Option<std::string::String>,
    /// <p> If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique. </p>
    #[doc(hidden)]
    pub override_artifact_name: std::option::Option<bool>,
    /// <p> Information that tells you if encryption for build artifacts is disabled. </p>
    #[doc(hidden)]
    pub encryption_disabled: std::option::Option<bool>,
    /// <p> An identifier for this artifact definition. </p>
    #[doc(hidden)]
    pub artifact_identifier: std::option::Option<std::string::String>,
    /// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note>
    /// <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p>
    /// </note>
    /// <p>This property can be one of the following values:</p>
    /// <dl>
    /// <dt>
    /// NONE
    /// </dt>
    /// <dd>
    /// <p>The bucket owner does not have access to the objects. This is the default.</p>
    /// </dd>
    /// <dt>
    /// READ_ONLY
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p>
    /// </dd>
    /// <dt>
    /// FULL
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p>
    /// <ul>
    /// <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li>
    /// <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li>
    /// </ul>
    /// <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub bucket_owner_access: std::option::Option<crate::types::BucketOwnerAccess>,
}
impl BuildArtifacts {
    /// <p>Information about the location of the build artifacts.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The SHA-256 hash of the build artifact.</p>
    /// <p>You can use this hash along with a checksum tool to confirm file integrity and authenticity.</p> <note>
    /// <p>This value is available only if the build project's <code>packaging</code> value is set to <code>ZIP</code>.</p>
    /// </note>
    pub fn sha256sum(&self) -> std::option::Option<&str> {
        self.sha256sum.as_deref()
    }
    /// <p>The MD5 hash of the build artifact.</p>
    /// <p>You can use this hash along with a checksum tool to confirm file integrity and authenticity.</p> <note>
    /// <p>This value is available only if the build project's <code>packaging</code> value is set to <code>ZIP</code>.</p>
    /// </note>
    pub fn md5sum(&self) -> std::option::Option<&str> {
        self.md5sum.as_deref()
    }
    /// <p> If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique. </p>
    pub fn override_artifact_name(&self) -> std::option::Option<bool> {
        self.override_artifact_name
    }
    /// <p> Information that tells you if encryption for build artifacts is disabled. </p>
    pub fn encryption_disabled(&self) -> std::option::Option<bool> {
        self.encryption_disabled
    }
    /// <p> An identifier for this artifact definition. </p>
    pub fn artifact_identifier(&self) -> std::option::Option<&str> {
        self.artifact_identifier.as_deref()
    }
    /// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note>
    /// <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p>
    /// </note>
    /// <p>This property can be one of the following values:</p>
    /// <dl>
    /// <dt>
    /// NONE
    /// </dt>
    /// <dd>
    /// <p>The bucket owner does not have access to the objects. This is the default.</p>
    /// </dd>
    /// <dt>
    /// READ_ONLY
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p>
    /// </dd>
    /// <dt>
    /// FULL
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p>
    /// <ul>
    /// <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li>
    /// <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li>
    /// </ul>
    /// <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    /// </dd>
    /// </dl>
    pub fn bucket_owner_access(&self) -> std::option::Option<&crate::types::BucketOwnerAccess> {
        self.bucket_owner_access.as_ref()
    }
}
impl BuildArtifacts {
    /// Creates a new builder-style object to manufacture [`BuildArtifacts`](crate::types::BuildArtifacts).
    pub fn builder() -> crate::types::builders::BuildArtifactsBuilder {
        crate::types::builders::BuildArtifactsBuilder::default()
    }
}

/// A builder for [`BuildArtifacts`](crate::types::BuildArtifacts).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BuildArtifactsBuilder {
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) sha256sum: std::option::Option<std::string::String>,
    pub(crate) md5sum: std::option::Option<std::string::String>,
    pub(crate) override_artifact_name: std::option::Option<bool>,
    pub(crate) encryption_disabled: std::option::Option<bool>,
    pub(crate) artifact_identifier: std::option::Option<std::string::String>,
    pub(crate) bucket_owner_access: std::option::Option<crate::types::BucketOwnerAccess>,
}
impl BuildArtifactsBuilder {
    /// <p>Information about the location of the build artifacts.</p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>Information about the location of the build artifacts.</p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The SHA-256 hash of the build artifact.</p>
    /// <p>You can use this hash along with a checksum tool to confirm file integrity and authenticity.</p> <note>
    /// <p>This value is available only if the build project's <code>packaging</code> value is set to <code>ZIP</code>.</p>
    /// </note>
    pub fn sha256sum(mut self, input: impl Into<std::string::String>) -> Self {
        self.sha256sum = Some(input.into());
        self
    }
    /// <p>The SHA-256 hash of the build artifact.</p>
    /// <p>You can use this hash along with a checksum tool to confirm file integrity and authenticity.</p> <note>
    /// <p>This value is available only if the build project's <code>packaging</code> value is set to <code>ZIP</code>.</p>
    /// </note>
    pub fn set_sha256sum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sha256sum = input;
        self
    }
    /// <p>The MD5 hash of the build artifact.</p>
    /// <p>You can use this hash along with a checksum tool to confirm file integrity and authenticity.</p> <note>
    /// <p>This value is available only if the build project's <code>packaging</code> value is set to <code>ZIP</code>.</p>
    /// </note>
    pub fn md5sum(mut self, input: impl Into<std::string::String>) -> Self {
        self.md5sum = Some(input.into());
        self
    }
    /// <p>The MD5 hash of the build artifact.</p>
    /// <p>You can use this hash along with a checksum tool to confirm file integrity and authenticity.</p> <note>
    /// <p>This value is available only if the build project's <code>packaging</code> value is set to <code>ZIP</code>.</p>
    /// </note>
    pub fn set_md5sum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.md5sum = input;
        self
    }
    /// <p> If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique. </p>
    pub fn override_artifact_name(mut self, input: bool) -> Self {
        self.override_artifact_name = Some(input);
        self
    }
    /// <p> If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique. </p>
    pub fn set_override_artifact_name(mut self, input: std::option::Option<bool>) -> Self {
        self.override_artifact_name = input;
        self
    }
    /// <p> Information that tells you if encryption for build artifacts is disabled. </p>
    pub fn encryption_disabled(mut self, input: bool) -> Self {
        self.encryption_disabled = Some(input);
        self
    }
    /// <p> Information that tells you if encryption for build artifacts is disabled. </p>
    pub fn set_encryption_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.encryption_disabled = input;
        self
    }
    /// <p> An identifier for this artifact definition. </p>
    pub fn artifact_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.artifact_identifier = Some(input.into());
        self
    }
    /// <p> An identifier for this artifact definition. </p>
    pub fn set_artifact_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.artifact_identifier = input;
        self
    }
    /// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note>
    /// <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p>
    /// </note>
    /// <p>This property can be one of the following values:</p>
    /// <dl>
    /// <dt>
    /// NONE
    /// </dt>
    /// <dd>
    /// <p>The bucket owner does not have access to the objects. This is the default.</p>
    /// </dd>
    /// <dt>
    /// READ_ONLY
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p>
    /// </dd>
    /// <dt>
    /// FULL
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p>
    /// <ul>
    /// <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li>
    /// <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li>
    /// </ul>
    /// <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    /// </dd>
    /// </dl>
    pub fn bucket_owner_access(mut self, input: crate::types::BucketOwnerAccess) -> Self {
        self.bucket_owner_access = Some(input);
        self
    }
    /// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note>
    /// <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p>
    /// </note>
    /// <p>This property can be one of the following values:</p>
    /// <dl>
    /// <dt>
    /// NONE
    /// </dt>
    /// <dd>
    /// <p>The bucket owner does not have access to the objects. This is the default.</p>
    /// </dd>
    /// <dt>
    /// READ_ONLY
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p>
    /// </dd>
    /// <dt>
    /// FULL
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p>
    /// <ul>
    /// <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li>
    /// <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li>
    /// </ul>
    /// <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    /// </dd>
    /// </dl>
    pub fn set_bucket_owner_access(
        mut self,
        input: std::option::Option<crate::types::BucketOwnerAccess>,
    ) -> Self {
        self.bucket_owner_access = input;
        self
    }
    /// Consumes the builder and constructs a [`BuildArtifacts`](crate::types::BuildArtifacts).
    pub fn build(self) -> crate::types::BuildArtifacts {
        crate::types::BuildArtifacts {
            location: self.location,
            sha256sum: self.sha256sum,
            md5sum: self.md5sum,
            override_artifact_name: self.override_artifact_name,
            encryption_disabled: self.encryption_disabled,
            artifact_identifier: self.artifact_identifier,
            bucket_owner_access: self.bucket_owner_access,
        }
    }
}
