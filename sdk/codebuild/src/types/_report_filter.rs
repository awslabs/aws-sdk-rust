// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> A filter used to return reports with the status specified by the input <code>status</code> parameter. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReportFilter {
    /// <p> The status used to filter reports. You can filter using one status only. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ReportStatusType>,
}
impl ReportFilter {
    /// <p> The status used to filter reports. You can filter using one status only. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::ReportStatusType> {
        self.status.as_ref()
    }
}
impl ReportFilter {
    /// Creates a new builder-style object to manufacture [`ReportFilter`](crate::types::ReportFilter).
    pub fn builder() -> crate::types::builders::ReportFilterBuilder {
        crate::types::builders::ReportFilterBuilder::default()
    }
}

/// A builder for [`ReportFilter`](crate::types::ReportFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReportFilterBuilder {
    pub(crate) status: std::option::Option<crate::types::ReportStatusType>,
}
impl ReportFilterBuilder {
    /// <p> The status used to filter reports. You can filter using one status only. </p>
    pub fn status(mut self, input: crate::types::ReportStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> The status used to filter reports. You can filter using one status only. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ReportStatusType>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ReportFilter`](crate::types::ReportFilter).
    pub fn build(self) -> crate::types::ReportFilter {
        crate::types::ReportFilter {
            status: self.status,
        }
    }
}
