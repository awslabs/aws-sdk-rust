// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a summary of a code coverage report.</p>
/// <p>Line coverage measures how many statements your tests cover. A statement is a single instruction, not including comments, conditionals, etc.</p>
/// <p>Branch coverage determines if your tests cover every possible branch of a control structure, such as an <code>if</code> or <code>case</code> statement.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CodeCoverageReportSummary {
    /// <p>The percentage of lines that are covered by your tests.</p>
    #[doc(hidden)]
    pub line_coverage_percentage: std::option::Option<f64>,
    /// <p>The number of lines that are covered by your tests.</p>
    #[doc(hidden)]
    pub lines_covered: std::option::Option<i32>,
    /// <p>The number of lines that are not covered by your tests.</p>
    #[doc(hidden)]
    pub lines_missed: std::option::Option<i32>,
    /// <p>The percentage of branches that are covered by your tests.</p>
    #[doc(hidden)]
    pub branch_coverage_percentage: std::option::Option<f64>,
    /// <p>The number of conditional branches that are covered by your tests.</p>
    #[doc(hidden)]
    pub branches_covered: std::option::Option<i32>,
    /// <p>The number of conditional branches that are not covered by your tests.</p>
    #[doc(hidden)]
    pub branches_missed: std::option::Option<i32>,
}
impl CodeCoverageReportSummary {
    /// <p>The percentage of lines that are covered by your tests.</p>
    pub fn line_coverage_percentage(&self) -> std::option::Option<f64> {
        self.line_coverage_percentage
    }
    /// <p>The number of lines that are covered by your tests.</p>
    pub fn lines_covered(&self) -> std::option::Option<i32> {
        self.lines_covered
    }
    /// <p>The number of lines that are not covered by your tests.</p>
    pub fn lines_missed(&self) -> std::option::Option<i32> {
        self.lines_missed
    }
    /// <p>The percentage of branches that are covered by your tests.</p>
    pub fn branch_coverage_percentage(&self) -> std::option::Option<f64> {
        self.branch_coverage_percentage
    }
    /// <p>The number of conditional branches that are covered by your tests.</p>
    pub fn branches_covered(&self) -> std::option::Option<i32> {
        self.branches_covered
    }
    /// <p>The number of conditional branches that are not covered by your tests.</p>
    pub fn branches_missed(&self) -> std::option::Option<i32> {
        self.branches_missed
    }
}
impl CodeCoverageReportSummary {
    /// Creates a new builder-style object to manufacture [`CodeCoverageReportSummary`](crate::types::CodeCoverageReportSummary).
    pub fn builder() -> crate::types::builders::CodeCoverageReportSummaryBuilder {
        crate::types::builders::CodeCoverageReportSummaryBuilder::default()
    }
}

/// A builder for [`CodeCoverageReportSummary`](crate::types::CodeCoverageReportSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CodeCoverageReportSummaryBuilder {
    pub(crate) line_coverage_percentage: std::option::Option<f64>,
    pub(crate) lines_covered: std::option::Option<i32>,
    pub(crate) lines_missed: std::option::Option<i32>,
    pub(crate) branch_coverage_percentage: std::option::Option<f64>,
    pub(crate) branches_covered: std::option::Option<i32>,
    pub(crate) branches_missed: std::option::Option<i32>,
}
impl CodeCoverageReportSummaryBuilder {
    /// <p>The percentage of lines that are covered by your tests.</p>
    pub fn line_coverage_percentage(mut self, input: f64) -> Self {
        self.line_coverage_percentage = Some(input);
        self
    }
    /// <p>The percentage of lines that are covered by your tests.</p>
    pub fn set_line_coverage_percentage(mut self, input: std::option::Option<f64>) -> Self {
        self.line_coverage_percentage = input;
        self
    }
    /// <p>The number of lines that are covered by your tests.</p>
    pub fn lines_covered(mut self, input: i32) -> Self {
        self.lines_covered = Some(input);
        self
    }
    /// <p>The number of lines that are covered by your tests.</p>
    pub fn set_lines_covered(mut self, input: std::option::Option<i32>) -> Self {
        self.lines_covered = input;
        self
    }
    /// <p>The number of lines that are not covered by your tests.</p>
    pub fn lines_missed(mut self, input: i32) -> Self {
        self.lines_missed = Some(input);
        self
    }
    /// <p>The number of lines that are not covered by your tests.</p>
    pub fn set_lines_missed(mut self, input: std::option::Option<i32>) -> Self {
        self.lines_missed = input;
        self
    }
    /// <p>The percentage of branches that are covered by your tests.</p>
    pub fn branch_coverage_percentage(mut self, input: f64) -> Self {
        self.branch_coverage_percentage = Some(input);
        self
    }
    /// <p>The percentage of branches that are covered by your tests.</p>
    pub fn set_branch_coverage_percentage(mut self, input: std::option::Option<f64>) -> Self {
        self.branch_coverage_percentage = input;
        self
    }
    /// <p>The number of conditional branches that are covered by your tests.</p>
    pub fn branches_covered(mut self, input: i32) -> Self {
        self.branches_covered = Some(input);
        self
    }
    /// <p>The number of conditional branches that are covered by your tests.</p>
    pub fn set_branches_covered(mut self, input: std::option::Option<i32>) -> Self {
        self.branches_covered = input;
        self
    }
    /// <p>The number of conditional branches that are not covered by your tests.</p>
    pub fn branches_missed(mut self, input: i32) -> Self {
        self.branches_missed = Some(input);
        self
    }
    /// <p>The number of conditional branches that are not covered by your tests.</p>
    pub fn set_branches_missed(mut self, input: std::option::Option<i32>) -> Self {
        self.branches_missed = input;
        self
    }
    /// Consumes the builder and constructs a [`CodeCoverageReportSummary`](crate::types::CodeCoverageReportSummary).
    pub fn build(self) -> crate::types::CodeCoverageReportSummary {
        crate::types::CodeCoverageReportSummary {
            line_coverage_percentage: self.line_coverage_percentage,
            lines_covered: self.lines_covered,
            lines_missed: self.lines_missed,
            branch_coverage_percentage: self.branch_coverage_percentage,
            branches_covered: self.branches_covered,
            branches_missed: self.branches_missed,
        }
    }
}
