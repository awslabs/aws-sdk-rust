// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter used to return specific types of test cases. In order to pass the filter, the report must meet all of the filter properties.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestCaseFilter {
    /// <p>The status used to filter test cases. A <code>TestCaseFilter</code> can have one status. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>SUCCEEDED</code> </p> </li>
    /// <li> <p> <code>FAILED</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// <li> <p> <code>UNKNOWN</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>A keyword that is used to filter on the <code>name</code> or the <code>prefix</code> of the test cases. Only test cases where the keyword is a substring of the <code>name</code> or the <code>prefix</code> will be returned.</p>
    #[doc(hidden)]
    pub keyword: std::option::Option<std::string::String>,
}
impl TestCaseFilter {
    /// <p>The status used to filter test cases. A <code>TestCaseFilter</code> can have one status. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>SUCCEEDED</code> </p> </li>
    /// <li> <p> <code>FAILED</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// <li> <p> <code>UNKNOWN</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>A keyword that is used to filter on the <code>name</code> or the <code>prefix</code> of the test cases. Only test cases where the keyword is a substring of the <code>name</code> or the <code>prefix</code> will be returned.</p>
    pub fn keyword(&self) -> std::option::Option<&str> {
        self.keyword.as_deref()
    }
}
impl TestCaseFilter {
    /// Creates a new builder-style object to manufacture [`TestCaseFilter`](crate::types::TestCaseFilter).
    pub fn builder() -> crate::types::builders::TestCaseFilterBuilder {
        crate::types::builders::TestCaseFilterBuilder::default()
    }
}

/// A builder for [`TestCaseFilter`](crate::types::TestCaseFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestCaseFilterBuilder {
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) keyword: std::option::Option<std::string::String>,
}
impl TestCaseFilterBuilder {
    /// <p>The status used to filter test cases. A <code>TestCaseFilter</code> can have one status. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>SUCCEEDED</code> </p> </li>
    /// <li> <p> <code>FAILED</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// <li> <p> <code>UNKNOWN</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status used to filter test cases. A <code>TestCaseFilter</code> can have one status. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>SUCCEEDED</code> </p> </li>
    /// <li> <p> <code>FAILED</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// <li> <p> <code>UNKNOWN</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>A keyword that is used to filter on the <code>name</code> or the <code>prefix</code> of the test cases. Only test cases where the keyword is a substring of the <code>name</code> or the <code>prefix</code> will be returned.</p>
    pub fn keyword(mut self, input: impl Into<std::string::String>) -> Self {
        self.keyword = Some(input.into());
        self
    }
    /// <p>A keyword that is used to filter on the <code>name</code> or the <code>prefix</code> of the test cases. Only test cases where the keyword is a substring of the <code>name</code> or the <code>prefix</code> will be returned.</p>
    pub fn set_keyword(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.keyword = input;
        self
    }
    /// Consumes the builder and constructs a [`TestCaseFilter`](crate::types::TestCaseFilter).
    pub fn build(self) -> crate::types::TestCaseFilter {
        crate::types::TestCaseFilter {
            status: self.status,
            keyword: self.keyword,
        }
    }
}
