// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `BuildPhaseType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let buildphasetype = unimplemented!();
/// match buildphasetype {
///     BuildPhaseType::Build => { /* ... */ },
///     BuildPhaseType::Completed => { /* ... */ },
///     BuildPhaseType::DownloadSource => { /* ... */ },
///     BuildPhaseType::Finalizing => { /* ... */ },
///     BuildPhaseType::Install => { /* ... */ },
///     BuildPhaseType::PostBuild => { /* ... */ },
///     BuildPhaseType::PreBuild => { /* ... */ },
///     BuildPhaseType::Provisioning => { /* ... */ },
///     BuildPhaseType::Queued => { /* ... */ },
///     BuildPhaseType::Submitted => { /* ... */ },
///     BuildPhaseType::UploadArtifacts => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `buildphasetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `BuildPhaseType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `BuildPhaseType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `BuildPhaseType::NewFeature` is defined.
/// Specifically, when `buildphasetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `BuildPhaseType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum BuildPhaseType {
    #[allow(missing_docs)] // documentation missing in model
    Build,
    #[allow(missing_docs)] // documentation missing in model
    Completed,
    #[allow(missing_docs)] // documentation missing in model
    DownloadSource,
    #[allow(missing_docs)] // documentation missing in model
    Finalizing,
    #[allow(missing_docs)] // documentation missing in model
    Install,
    #[allow(missing_docs)] // documentation missing in model
    PostBuild,
    #[allow(missing_docs)] // documentation missing in model
    PreBuild,
    #[allow(missing_docs)] // documentation missing in model
    Provisioning,
    #[allow(missing_docs)] // documentation missing in model
    Queued,
    #[allow(missing_docs)] // documentation missing in model
    Submitted,
    #[allow(missing_docs)] // documentation missing in model
    UploadArtifacts,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for BuildPhaseType {
    fn from(s: &str) -> Self {
        match s {
            "BUILD" => BuildPhaseType::Build,
            "COMPLETED" => BuildPhaseType::Completed,
            "DOWNLOAD_SOURCE" => BuildPhaseType::DownloadSource,
            "FINALIZING" => BuildPhaseType::Finalizing,
            "INSTALL" => BuildPhaseType::Install,
            "POST_BUILD" => BuildPhaseType::PostBuild,
            "PRE_BUILD" => BuildPhaseType::PreBuild,
            "PROVISIONING" => BuildPhaseType::Provisioning,
            "QUEUED" => BuildPhaseType::Queued,
            "SUBMITTED" => BuildPhaseType::Submitted,
            "UPLOAD_ARTIFACTS" => BuildPhaseType::UploadArtifacts,
            other => {
                BuildPhaseType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for BuildPhaseType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(BuildPhaseType::from(s))
    }
}
impl BuildPhaseType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            BuildPhaseType::Build => "BUILD",
            BuildPhaseType::Completed => "COMPLETED",
            BuildPhaseType::DownloadSource => "DOWNLOAD_SOURCE",
            BuildPhaseType::Finalizing => "FINALIZING",
            BuildPhaseType::Install => "INSTALL",
            BuildPhaseType::PostBuild => "POST_BUILD",
            BuildPhaseType::PreBuild => "PRE_BUILD",
            BuildPhaseType::Provisioning => "PROVISIONING",
            BuildPhaseType::Queued => "QUEUED",
            BuildPhaseType::Submitted => "SUBMITTED",
            BuildPhaseType::UploadArtifacts => "UPLOAD_ARTIFACTS",
            BuildPhaseType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BUILD",
            "COMPLETED",
            "DOWNLOAD_SOURCE",
            "FINALIZING",
            "INSTALL",
            "POST_BUILD",
            "PRE_BUILD",
            "PROVISIONING",
            "QUEUED",
            "SUBMITTED",
            "UPLOAD_ARTIFACTS",
        ]
    }
}
impl AsRef<str> for BuildPhaseType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
