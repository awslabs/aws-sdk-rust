// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Docker image that is managed by CodeBuild.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnvironmentImage {
    /// <p>The name of the Docker image.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the Docker image.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of environment image versions.</p>
    pub versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EnvironmentImage {
    /// <p>The name of the Docker image.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the Docker image.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of environment image versions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.versions.is_none()`.
    pub fn versions(&self) -> &[::std::string::String] {
        self.versions.as_deref().unwrap_or_default()
    }
}
impl EnvironmentImage {
    /// Creates a new builder-style object to manufacture [`EnvironmentImage`](crate::types::EnvironmentImage).
    pub fn builder() -> crate::types::builders::EnvironmentImageBuilder {
        crate::types::builders::EnvironmentImageBuilder::default()
    }
}

/// A builder for [`EnvironmentImage`](crate::types::EnvironmentImage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnvironmentImageBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EnvironmentImageBuilder {
    /// <p>The name of the Docker image.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Docker image.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Docker image.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the Docker image.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Docker image.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Docker image.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `versions`.
    ///
    /// To override the contents of this collection use [`set_versions`](Self::set_versions).
    ///
    /// <p>A list of environment image versions.</p>
    pub fn versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.versions.unwrap_or_default();
        v.push(input.into());
        self.versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of environment image versions.</p>
    pub fn set_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.versions = input;
        self
    }
    /// <p>A list of environment image versions.</p>
    pub fn get_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.versions
    }
    /// Consumes the builder and constructs a [`EnvironmentImage`](crate::types::EnvironmentImage).
    pub fn build(self) -> crate::types::EnvironmentImage {
        crate::types::EnvironmentImage {
            name: self.name,
            description: self.description,
            versions: self.versions,
        }
    }
}
