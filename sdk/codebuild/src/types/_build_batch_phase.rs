// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a stage for a batch build.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BuildBatchPhase {
    /// <p>The name of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// COMBINE_ARTIFACTS
    /// </dt>
    /// <dd>
    /// <p>Build output artifacts are being combined and uploaded to the output location.</p>
    /// </dd>
    /// <dt>
    /// DOWNLOAD_BATCHSPEC
    /// </dt>
    /// <dd>
    /// <p>The batch build specification is being downloaded.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>One or more of the builds failed.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The batch build is in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The batch build was stopped.</p>
    /// </dd>
    /// <dt>
    /// SUBMITTED
    /// </dt>
    /// <dd>
    /// <p>The btach build has been submitted.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The batch build succeeded.</p>
    /// </dd>
    /// </dl>
    pub phase_type: ::std::option::Option<crate::types::BuildBatchPhaseType>,
    /// <p>The current status of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The build phase failed.</p>
    /// </dd>
    /// <dt>
    /// FAULT
    /// </dt>
    /// <dd>
    /// <p>The build phase faulted.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The build phase is still in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The build phase stopped.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The build phase succeeded.</p>
    /// </dd>
    /// <dt>
    /// TIMED_OUT
    /// </dt>
    /// <dd>
    /// <p>The build phase timed out.</p>
    /// </dd>
    /// </dl>
    pub phase_status: ::std::option::Option<crate::types::StatusType>,
    /// <p>When the batch build phase started, expressed in Unix time format.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the batch build phase ended, expressed in Unix time format.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>How long, in seconds, between the starting and ending times of the batch build's phase.</p>
    pub duration_in_seconds: ::std::option::Option<i64>,
    /// <p>Additional information about the batch build phase. Especially to help troubleshoot a failed batch build.</p>
    pub contexts: ::std::option::Option<::std::vec::Vec<crate::types::PhaseContext>>,
}
impl BuildBatchPhase {
    /// <p>The name of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// COMBINE_ARTIFACTS
    /// </dt>
    /// <dd>
    /// <p>Build output artifacts are being combined and uploaded to the output location.</p>
    /// </dd>
    /// <dt>
    /// DOWNLOAD_BATCHSPEC
    /// </dt>
    /// <dd>
    /// <p>The batch build specification is being downloaded.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>One or more of the builds failed.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The batch build is in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The batch build was stopped.</p>
    /// </dd>
    /// <dt>
    /// SUBMITTED
    /// </dt>
    /// <dd>
    /// <p>The btach build has been submitted.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The batch build succeeded.</p>
    /// </dd>
    /// </dl>
    pub fn phase_type(&self) -> ::std::option::Option<&crate::types::BuildBatchPhaseType> {
        self.phase_type.as_ref()
    }
    /// <p>The current status of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The build phase failed.</p>
    /// </dd>
    /// <dt>
    /// FAULT
    /// </dt>
    /// <dd>
    /// <p>The build phase faulted.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The build phase is still in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The build phase stopped.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The build phase succeeded.</p>
    /// </dd>
    /// <dt>
    /// TIMED_OUT
    /// </dt>
    /// <dd>
    /// <p>The build phase timed out.</p>
    /// </dd>
    /// </dl>
    pub fn phase_status(&self) -> ::std::option::Option<&crate::types::StatusType> {
        self.phase_status.as_ref()
    }
    /// <p>When the batch build phase started, expressed in Unix time format.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>When the batch build phase ended, expressed in Unix time format.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>How long, in seconds, between the starting and ending times of the batch build's phase.</p>
    pub fn duration_in_seconds(&self) -> ::std::option::Option<i64> {
        self.duration_in_seconds
    }
    /// <p>Additional information about the batch build phase. Especially to help troubleshoot a failed batch build.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contexts.is_none()`.
    pub fn contexts(&self) -> &[crate::types::PhaseContext] {
        self.contexts.as_deref().unwrap_or_default()
    }
}
impl BuildBatchPhase {
    /// Creates a new builder-style object to manufacture [`BuildBatchPhase`](crate::types::BuildBatchPhase).
    pub fn builder() -> crate::types::builders::BuildBatchPhaseBuilder {
        crate::types::builders::BuildBatchPhaseBuilder::default()
    }
}

/// A builder for [`BuildBatchPhase`](crate::types::BuildBatchPhase).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BuildBatchPhaseBuilder {
    pub(crate) phase_type: ::std::option::Option<crate::types::BuildBatchPhaseType>,
    pub(crate) phase_status: ::std::option::Option<crate::types::StatusType>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) duration_in_seconds: ::std::option::Option<i64>,
    pub(crate) contexts: ::std::option::Option<::std::vec::Vec<crate::types::PhaseContext>>,
}
impl BuildBatchPhaseBuilder {
    /// <p>The name of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// COMBINE_ARTIFACTS
    /// </dt>
    /// <dd>
    /// <p>Build output artifacts are being combined and uploaded to the output location.</p>
    /// </dd>
    /// <dt>
    /// DOWNLOAD_BATCHSPEC
    /// </dt>
    /// <dd>
    /// <p>The batch build specification is being downloaded.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>One or more of the builds failed.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The batch build is in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The batch build was stopped.</p>
    /// </dd>
    /// <dt>
    /// SUBMITTED
    /// </dt>
    /// <dd>
    /// <p>The btach build has been submitted.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The batch build succeeded.</p>
    /// </dd>
    /// </dl>
    pub fn phase_type(mut self, input: crate::types::BuildBatchPhaseType) -> Self {
        self.phase_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// COMBINE_ARTIFACTS
    /// </dt>
    /// <dd>
    /// <p>Build output artifacts are being combined and uploaded to the output location.</p>
    /// </dd>
    /// <dt>
    /// DOWNLOAD_BATCHSPEC
    /// </dt>
    /// <dd>
    /// <p>The batch build specification is being downloaded.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>One or more of the builds failed.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The batch build is in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The batch build was stopped.</p>
    /// </dd>
    /// <dt>
    /// SUBMITTED
    /// </dt>
    /// <dd>
    /// <p>The btach build has been submitted.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The batch build succeeded.</p>
    /// </dd>
    /// </dl>
    pub fn set_phase_type(mut self, input: ::std::option::Option<crate::types::BuildBatchPhaseType>) -> Self {
        self.phase_type = input;
        self
    }
    /// <p>The name of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// COMBINE_ARTIFACTS
    /// </dt>
    /// <dd>
    /// <p>Build output artifacts are being combined and uploaded to the output location.</p>
    /// </dd>
    /// <dt>
    /// DOWNLOAD_BATCHSPEC
    /// </dt>
    /// <dd>
    /// <p>The batch build specification is being downloaded.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>One or more of the builds failed.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The batch build is in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The batch build was stopped.</p>
    /// </dd>
    /// <dt>
    /// SUBMITTED
    /// </dt>
    /// <dd>
    /// <p>The btach build has been submitted.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The batch build succeeded.</p>
    /// </dd>
    /// </dl>
    pub fn get_phase_type(&self) -> &::std::option::Option<crate::types::BuildBatchPhaseType> {
        &self.phase_type
    }
    /// <p>The current status of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The build phase failed.</p>
    /// </dd>
    /// <dt>
    /// FAULT
    /// </dt>
    /// <dd>
    /// <p>The build phase faulted.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The build phase is still in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The build phase stopped.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The build phase succeeded.</p>
    /// </dd>
    /// <dt>
    /// TIMED_OUT
    /// </dt>
    /// <dd>
    /// <p>The build phase timed out.</p>
    /// </dd>
    /// </dl>
    pub fn phase_status(mut self, input: crate::types::StatusType) -> Self {
        self.phase_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The build phase failed.</p>
    /// </dd>
    /// <dt>
    /// FAULT
    /// </dt>
    /// <dd>
    /// <p>The build phase faulted.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The build phase is still in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The build phase stopped.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The build phase succeeded.</p>
    /// </dd>
    /// <dt>
    /// TIMED_OUT
    /// </dt>
    /// <dd>
    /// <p>The build phase timed out.</p>
    /// </dd>
    /// </dl>
    pub fn set_phase_status(mut self, input: ::std::option::Option<crate::types::StatusType>) -> Self {
        self.phase_status = input;
        self
    }
    /// <p>The current status of the batch build phase. Valid values include:</p>
    /// <dl>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The build phase failed.</p>
    /// </dd>
    /// <dt>
    /// FAULT
    /// </dt>
    /// <dd>
    /// <p>The build phase faulted.</p>
    /// </dd>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The build phase is still in progress.</p>
    /// </dd>
    /// <dt>
    /// STOPPED
    /// </dt>
    /// <dd>
    /// <p>The build phase stopped.</p>
    /// </dd>
    /// <dt>
    /// SUCCEEDED
    /// </dt>
    /// <dd>
    /// <p>The build phase succeeded.</p>
    /// </dd>
    /// <dt>
    /// TIMED_OUT
    /// </dt>
    /// <dd>
    /// <p>The build phase timed out.</p>
    /// </dd>
    /// </dl>
    pub fn get_phase_status(&self) -> &::std::option::Option<crate::types::StatusType> {
        &self.phase_status
    }
    /// <p>When the batch build phase started, expressed in Unix time format.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the batch build phase started, expressed in Unix time format.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>When the batch build phase started, expressed in Unix time format.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>When the batch build phase ended, expressed in Unix time format.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the batch build phase ended, expressed in Unix time format.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>When the batch build phase ended, expressed in Unix time format.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>How long, in seconds, between the starting and ending times of the batch build's phase.</p>
    pub fn duration_in_seconds(mut self, input: i64) -> Self {
        self.duration_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>How long, in seconds, between the starting and ending times of the batch build's phase.</p>
    pub fn set_duration_in_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_in_seconds = input;
        self
    }
    /// <p>How long, in seconds, between the starting and ending times of the batch build's phase.</p>
    pub fn get_duration_in_seconds(&self) -> &::std::option::Option<i64> {
        &self.duration_in_seconds
    }
    /// Appends an item to `contexts`.
    ///
    /// To override the contents of this collection use [`set_contexts`](Self::set_contexts).
    ///
    /// <p>Additional information about the batch build phase. Especially to help troubleshoot a failed batch build.</p>
    pub fn contexts(mut self, input: crate::types::PhaseContext) -> Self {
        let mut v = self.contexts.unwrap_or_default();
        v.push(input);
        self.contexts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional information about the batch build phase. Especially to help troubleshoot a failed batch build.</p>
    pub fn set_contexts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhaseContext>>) -> Self {
        self.contexts = input;
        self
    }
    /// <p>Additional information about the batch build phase. Especially to help troubleshoot a failed batch build.</p>
    pub fn get_contexts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhaseContext>> {
        &self.contexts
    }
    /// Consumes the builder and constructs a [`BuildBatchPhase`](crate::types::BuildBatchPhase).
    pub fn build(self) -> crate::types::BuildBatchPhase {
        crate::types::BuildBatchPhase {
            phase_type: self.phase_type,
            phase_status: self.phase_status,
            start_time: self.start_time,
            end_time: self.end_time,
            duration_in_seconds: self.duration_in_seconds,
            contexts: self.contexts,
        }
    }
}
