// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration information about a batch build project.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProjectBuildBatchConfig {
    /// <p>Specifies the service role ARN for the batch build project.</p>
    #[doc(hidden)]
    pub service_role: std::option::Option<std::string::String>,
    /// <p>Specifies if the build artifacts for the batch build should be combined into a single artifact location.</p>
    #[doc(hidden)]
    pub combine_artifacts: std::option::Option<bool>,
    /// <p>A <code>BatchRestrictions</code> object that specifies the restrictions for the batch build.</p>
    #[doc(hidden)]
    pub restrictions: std::option::Option<crate::types::BatchRestrictions>,
    /// <p>Specifies the maximum amount of time, in minutes, that the batch build must be completed in.</p>
    #[doc(hidden)]
    pub timeout_in_mins: std::option::Option<i32>,
    /// <p>Specifies how build status reports are sent to the source provider for the batch build. This property is only used when the source provider for your project is Bitbucket, GitHub, or GitHub Enterprise, and your project is configured to report build statuses to the source provider.</p>
    /// <dl>
    /// <dt>
    /// REPORT_AGGREGATED_BATCH
    /// </dt>
    /// <dd>
    /// <p>(Default) Aggregate all of the build statuses into a single status report.</p>
    /// </dd>
    /// <dt>
    /// REPORT_INDIVIDUAL_BUILDS
    /// </dt>
    /// <dd>
    /// <p>Send a separate status report for each individual build.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub batch_report_mode: std::option::Option<crate::types::BatchReportModeType>,
}
impl ProjectBuildBatchConfig {
    /// <p>Specifies the service role ARN for the batch build project.</p>
    pub fn service_role(&self) -> std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>Specifies if the build artifacts for the batch build should be combined into a single artifact location.</p>
    pub fn combine_artifacts(&self) -> std::option::Option<bool> {
        self.combine_artifacts
    }
    /// <p>A <code>BatchRestrictions</code> object that specifies the restrictions for the batch build.</p>
    pub fn restrictions(&self) -> std::option::Option<&crate::types::BatchRestrictions> {
        self.restrictions.as_ref()
    }
    /// <p>Specifies the maximum amount of time, in minutes, that the batch build must be completed in.</p>
    pub fn timeout_in_mins(&self) -> std::option::Option<i32> {
        self.timeout_in_mins
    }
    /// <p>Specifies how build status reports are sent to the source provider for the batch build. This property is only used when the source provider for your project is Bitbucket, GitHub, or GitHub Enterprise, and your project is configured to report build statuses to the source provider.</p>
    /// <dl>
    /// <dt>
    /// REPORT_AGGREGATED_BATCH
    /// </dt>
    /// <dd>
    /// <p>(Default) Aggregate all of the build statuses into a single status report.</p>
    /// </dd>
    /// <dt>
    /// REPORT_INDIVIDUAL_BUILDS
    /// </dt>
    /// <dd>
    /// <p>Send a separate status report for each individual build.</p>
    /// </dd>
    /// </dl>
    pub fn batch_report_mode(&self) -> std::option::Option<&crate::types::BatchReportModeType> {
        self.batch_report_mode.as_ref()
    }
}
impl ProjectBuildBatchConfig {
    /// Creates a new builder-style object to manufacture [`ProjectBuildBatchConfig`](crate::types::ProjectBuildBatchConfig).
    pub fn builder() -> crate::types::builders::ProjectBuildBatchConfigBuilder {
        crate::types::builders::ProjectBuildBatchConfigBuilder::default()
    }
}

/// A builder for [`ProjectBuildBatchConfig`](crate::types::ProjectBuildBatchConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProjectBuildBatchConfigBuilder {
    pub(crate) service_role: std::option::Option<std::string::String>,
    pub(crate) combine_artifacts: std::option::Option<bool>,
    pub(crate) restrictions: std::option::Option<crate::types::BatchRestrictions>,
    pub(crate) timeout_in_mins: std::option::Option<i32>,
    pub(crate) batch_report_mode: std::option::Option<crate::types::BatchReportModeType>,
}
impl ProjectBuildBatchConfigBuilder {
    /// <p>Specifies the service role ARN for the batch build project.</p>
    pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role = Some(input.into());
        self
    }
    /// <p>Specifies the service role ARN for the batch build project.</p>
    pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role = input;
        self
    }
    /// <p>Specifies if the build artifacts for the batch build should be combined into a single artifact location.</p>
    pub fn combine_artifacts(mut self, input: bool) -> Self {
        self.combine_artifacts = Some(input);
        self
    }
    /// <p>Specifies if the build artifacts for the batch build should be combined into a single artifact location.</p>
    pub fn set_combine_artifacts(mut self, input: std::option::Option<bool>) -> Self {
        self.combine_artifacts = input;
        self
    }
    /// <p>A <code>BatchRestrictions</code> object that specifies the restrictions for the batch build.</p>
    pub fn restrictions(mut self, input: crate::types::BatchRestrictions) -> Self {
        self.restrictions = Some(input);
        self
    }
    /// <p>A <code>BatchRestrictions</code> object that specifies the restrictions for the batch build.</p>
    pub fn set_restrictions(
        mut self,
        input: std::option::Option<crate::types::BatchRestrictions>,
    ) -> Self {
        self.restrictions = input;
        self
    }
    /// <p>Specifies the maximum amount of time, in minutes, that the batch build must be completed in.</p>
    pub fn timeout_in_mins(mut self, input: i32) -> Self {
        self.timeout_in_mins = Some(input);
        self
    }
    /// <p>Specifies the maximum amount of time, in minutes, that the batch build must be completed in.</p>
    pub fn set_timeout_in_mins(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_in_mins = input;
        self
    }
    /// <p>Specifies how build status reports are sent to the source provider for the batch build. This property is only used when the source provider for your project is Bitbucket, GitHub, or GitHub Enterprise, and your project is configured to report build statuses to the source provider.</p>
    /// <dl>
    /// <dt>
    /// REPORT_AGGREGATED_BATCH
    /// </dt>
    /// <dd>
    /// <p>(Default) Aggregate all of the build statuses into a single status report.</p>
    /// </dd>
    /// <dt>
    /// REPORT_INDIVIDUAL_BUILDS
    /// </dt>
    /// <dd>
    /// <p>Send a separate status report for each individual build.</p>
    /// </dd>
    /// </dl>
    pub fn batch_report_mode(mut self, input: crate::types::BatchReportModeType) -> Self {
        self.batch_report_mode = Some(input);
        self
    }
    /// <p>Specifies how build status reports are sent to the source provider for the batch build. This property is only used when the source provider for your project is Bitbucket, GitHub, or GitHub Enterprise, and your project is configured to report build statuses to the source provider.</p>
    /// <dl>
    /// <dt>
    /// REPORT_AGGREGATED_BATCH
    /// </dt>
    /// <dd>
    /// <p>(Default) Aggregate all of the build statuses into a single status report.</p>
    /// </dd>
    /// <dt>
    /// REPORT_INDIVIDUAL_BUILDS
    /// </dt>
    /// <dd>
    /// <p>Send a separate status report for each individual build.</p>
    /// </dd>
    /// </dl>
    pub fn set_batch_report_mode(
        mut self,
        input: std::option::Option<crate::types::BatchReportModeType>,
    ) -> Self {
        self.batch_report_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`ProjectBuildBatchConfig`](crate::types::ProjectBuildBatchConfig).
    pub fn build(self) -> crate::types::ProjectBuildBatchConfig {
        crate::types::ProjectBuildBatchConfig {
            service_role: self.service_role,
            combine_artifacts: self.combine_artifacts,
            restrictions: self.restrictions,
            timeout_in_mins: self.timeout_in_mins,
            batch_report_mode: self.batch_report_mode,
        }
    }
}
