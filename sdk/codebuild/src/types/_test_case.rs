// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about a test case created using a framework such as NUnit or Cucumber. A test case might be a unit test or a configuration test. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestCase {
    /// <p> The ARN of the report to which the test case belongs. </p>
    #[doc(hidden)]
    pub report_arn: std::option::Option<std::string::String>,
    /// <p> The path to the raw data file that contains the test result. </p>
    #[doc(hidden)]
    pub test_raw_data_path: std::option::Option<std::string::String>,
    /// <p> A string that is applied to a series of related test cases. CodeBuild generates the prefix. The prefix depends on the framework used to generate the tests. </p>
    #[doc(hidden)]
    pub prefix: std::option::Option<std::string::String>,
    /// <p> The name of the test case. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The status returned by the test case after it was run. Valid statuses are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>ERROR</code>, <code>SKIPPED</code>, and <code>UNKNOWN</code>. </p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p> The number of nanoseconds it took to run this test case. </p>
    #[doc(hidden)]
    pub duration_in_nano_seconds: std::option::Option<i64>,
    /// <p> A message associated with a test case. For example, an error message or stack trace. </p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p> The date and time a test case expires. A test case expires 30 days after it is created. An expired test case is not available to view in CodeBuild. </p>
    #[doc(hidden)]
    pub expired: std::option::Option<aws_smithy_types::DateTime>,
}
impl TestCase {
    /// <p> The ARN of the report to which the test case belongs. </p>
    pub fn report_arn(&self) -> std::option::Option<&str> {
        self.report_arn.as_deref()
    }
    /// <p> The path to the raw data file that contains the test result. </p>
    pub fn test_raw_data_path(&self) -> std::option::Option<&str> {
        self.test_raw_data_path.as_deref()
    }
    /// <p> A string that is applied to a series of related test cases. CodeBuild generates the prefix. The prefix depends on the framework used to generate the tests. </p>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p> The name of the test case. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The status returned by the test case after it was run. Valid statuses are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>ERROR</code>, <code>SKIPPED</code>, and <code>UNKNOWN</code>. </p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p> The number of nanoseconds it took to run this test case. </p>
    pub fn duration_in_nano_seconds(&self) -> std::option::Option<i64> {
        self.duration_in_nano_seconds
    }
    /// <p> A message associated with a test case. For example, an error message or stack trace. </p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p> The date and time a test case expires. A test case expires 30 days after it is created. An expired test case is not available to view in CodeBuild. </p>
    pub fn expired(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expired.as_ref()
    }
}
impl TestCase {
    /// Creates a new builder-style object to manufacture [`TestCase`](crate::types::TestCase).
    pub fn builder() -> crate::types::builders::TestCaseBuilder {
        crate::types::builders::TestCaseBuilder::default()
    }
}

/// A builder for [`TestCase`](crate::types::TestCase).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestCaseBuilder {
    pub(crate) report_arn: std::option::Option<std::string::String>,
    pub(crate) test_raw_data_path: std::option::Option<std::string::String>,
    pub(crate) prefix: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) duration_in_nano_seconds: std::option::Option<i64>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) expired: std::option::Option<aws_smithy_types::DateTime>,
}
impl TestCaseBuilder {
    /// <p> The ARN of the report to which the test case belongs. </p>
    pub fn report_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.report_arn = Some(input.into());
        self
    }
    /// <p> The ARN of the report to which the test case belongs. </p>
    pub fn set_report_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.report_arn = input;
        self
    }
    /// <p> The path to the raw data file that contains the test result. </p>
    pub fn test_raw_data_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.test_raw_data_path = Some(input.into());
        self
    }
    /// <p> The path to the raw data file that contains the test result. </p>
    pub fn set_test_raw_data_path(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.test_raw_data_path = input;
        self
    }
    /// <p> A string that is applied to a series of related test cases. CodeBuild generates the prefix. The prefix depends on the framework used to generate the tests. </p>
    pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix = Some(input.into());
        self
    }
    /// <p> A string that is applied to a series of related test cases. CodeBuild generates the prefix. The prefix depends on the framework used to generate the tests. </p>
    pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p> The name of the test case. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the test case. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The status returned by the test case after it was run. Valid statuses are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>ERROR</code>, <code>SKIPPED</code>, and <code>UNKNOWN</code>. </p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p> The status returned by the test case after it was run. Valid statuses are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>ERROR</code>, <code>SKIPPED</code>, and <code>UNKNOWN</code>. </p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p> The number of nanoseconds it took to run this test case. </p>
    pub fn duration_in_nano_seconds(mut self, input: i64) -> Self {
        self.duration_in_nano_seconds = Some(input);
        self
    }
    /// <p> The number of nanoseconds it took to run this test case. </p>
    pub fn set_duration_in_nano_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.duration_in_nano_seconds = input;
        self
    }
    /// <p> A message associated with a test case. For example, an error message or stack trace. </p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p> A message associated with a test case. For example, an error message or stack trace. </p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p> The date and time a test case expires. A test case expires 30 days after it is created. An expired test case is not available to view in CodeBuild. </p>
    pub fn expired(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expired = Some(input);
        self
    }
    /// <p> The date and time a test case expires. A test case expires 30 days after it is created. An expired test case is not available to view in CodeBuild. </p>
    pub fn set_expired(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.expired = input;
        self
    }
    /// Consumes the builder and constructs a [`TestCase`](crate::types::TestCase).
    pub fn build(self) -> crate::types::TestCase {
        crate::types::TestCase {
            report_arn: self.report_arn,
            test_raw_data_path: self.test_raw_data_path,
            prefix: self.prefix,
            name: self.name,
            status: self.status,
            duration_in_nano_seconds: self.duration_in_nano_seconds,
            message: self.message,
            expired: self.expired,
        }
    }
}
