// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a resolved build artifact. A resolved artifact is an artifact that is built and deployed to the destination, such as Amazon S3.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResolvedArtifact {
    /// <p>Specifies the type of artifact.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ArtifactsType>,
    /// <p>The location of the artifact.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>The identifier of the artifact.</p>
    #[doc(hidden)]
    pub identifier: std::option::Option<std::string::String>,
}
impl ResolvedArtifact {
    /// <p>Specifies the type of artifact.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ArtifactsType> {
        self.r#type.as_ref()
    }
    /// <p>The location of the artifact.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The identifier of the artifact.</p>
    pub fn identifier(&self) -> std::option::Option<&str> {
        self.identifier.as_deref()
    }
}
impl ResolvedArtifact {
    /// Creates a new builder-style object to manufacture [`ResolvedArtifact`](crate::types::ResolvedArtifact).
    pub fn builder() -> crate::types::builders::ResolvedArtifactBuilder {
        crate::types::builders::ResolvedArtifactBuilder::default()
    }
}

/// A builder for [`ResolvedArtifact`](crate::types::ResolvedArtifact).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResolvedArtifactBuilder {
    pub(crate) r#type: std::option::Option<crate::types::ArtifactsType>,
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) identifier: std::option::Option<std::string::String>,
}
impl ResolvedArtifactBuilder {
    /// <p>Specifies the type of artifact.</p>
    pub fn r#type(mut self, input: crate::types::ArtifactsType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Specifies the type of artifact.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ArtifactsType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The location of the artifact.</p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>The location of the artifact.</p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The identifier of the artifact.</p>
    pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.identifier = Some(input.into());
        self
    }
    /// <p>The identifier of the artifact.</p>
    pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`ResolvedArtifact`](crate::types::ResolvedArtifact).
    pub fn build(self) -> crate::types::ResolvedArtifact {
        crate::types::ResolvedArtifact {
            r#type: self.r#type,
            location: self.location,
            identifier: self.identifier,
        }
    }
}
