// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `BucketOwnerAccess`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let bucketowneraccess = unimplemented!();
/// match bucketowneraccess {
///     BucketOwnerAccess::Full => { /* ... */ },
///     BucketOwnerAccess::None => { /* ... */ },
///     BucketOwnerAccess::ReadOnly => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `bucketowneraccess` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `BucketOwnerAccess::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `BucketOwnerAccess::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `BucketOwnerAccess::NewFeature` is defined.
/// Specifically, when `bucketowneraccess` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `BucketOwnerAccess::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// <p>Specifies the bucket owner's access for objects that another account uploads to their
/// Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has
/// access to these objects. This property allows you to give the bucket owner access to
/// these objects.</p>
/// <note>
/// <p>To use this property, your CodeBuild service role must have the
/// <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify
/// the access control list for the bucket.</p>
/// </note>
/// <p>This property can be one of the following values:</p>
/// <dl>
/// <dt>NONE</dt>
/// <dd>
/// <p>The bucket owner does not have access to the objects. This is the
/// default.</p>
/// </dd>
/// <dt>READ_ONLY</dt>
/// <dd>
/// <p>The bucket owner has read-only access to the objects. The uploading account
/// retains ownership of the objects.</p>
/// </dd>
/// <dt>FULL</dt>
/// <dd>
/// <p>The bucket owner has full access to the objects. Object ownership is determined
/// by the following criteria:</p>
/// <ul>
/// <li>
/// <p>If the bucket is configured with the <b>Bucket
/// owner preferred</b> setting, the bucket owner owns the
/// objects. The uploading account will have object access as specified
/// by the bucket's policy.</p>
/// </li>
/// <li>
/// <p>Otherwise, the uploading account retains ownership of the
/// objects.</p>
/// </li>
/// </ul>
/// <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3
/// Object Ownership</a> in the <i>Amazon Simple Storage Service User
/// Guide</i>.</p>
/// </dd>
/// </dl>
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum BucketOwnerAccess {
    #[allow(missing_docs)] // documentation missing in model
    Full,
    #[allow(missing_docs)] // documentation missing in model
    None,
    #[allow(missing_docs)] // documentation missing in model
    ReadOnly,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for BucketOwnerAccess {
    fn from(s: &str) -> Self {
        match s {
            "FULL" => BucketOwnerAccess::Full,
            "NONE" => BucketOwnerAccess::None,
            "READ_ONLY" => BucketOwnerAccess::ReadOnly,
            other => {
                BucketOwnerAccess::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for BucketOwnerAccess {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(BucketOwnerAccess::from(s))
    }
}
impl BucketOwnerAccess {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            BucketOwnerAccess::Full => "FULL",
            BucketOwnerAccess::None => "NONE",
            BucketOwnerAccess::ReadOnly => "READ_ONLY",
            BucketOwnerAccess::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["FULL", "NONE", "READ_ONLY"]
    }
}
impl AsRef<str> for BucketOwnerAccess {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
