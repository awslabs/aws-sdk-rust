// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of Docker images that are related by platform and are managed by CodeBuild.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnvironmentPlatform {
    /// <p>The platform's name.</p>
    pub platform: ::std::option::Option<crate::types::PlatformType>,
    /// <p>The list of programming languages that are available for the specified platform.</p>
    pub languages: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentLanguage>>,
}
impl EnvironmentPlatform {
    /// <p>The platform's name.</p>
    pub fn platform(&self) -> ::std::option::Option<&crate::types::PlatformType> {
        self.platform.as_ref()
    }
    /// <p>The list of programming languages that are available for the specified platform.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.languages.is_none()`.
    pub fn languages(&self) -> &[crate::types::EnvironmentLanguage] {
        self.languages.as_deref().unwrap_or_default()
    }
}
impl EnvironmentPlatform {
    /// Creates a new builder-style object to manufacture [`EnvironmentPlatform`](crate::types::EnvironmentPlatform).
    pub fn builder() -> crate::types::builders::EnvironmentPlatformBuilder {
        crate::types::builders::EnvironmentPlatformBuilder::default()
    }
}

/// A builder for [`EnvironmentPlatform`](crate::types::EnvironmentPlatform).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnvironmentPlatformBuilder {
    pub(crate) platform: ::std::option::Option<crate::types::PlatformType>,
    pub(crate) languages: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentLanguage>>,
}
impl EnvironmentPlatformBuilder {
    /// <p>The platform's name.</p>
    pub fn platform(mut self, input: crate::types::PlatformType) -> Self {
        self.platform = ::std::option::Option::Some(input);
        self
    }
    /// <p>The platform's name.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<crate::types::PlatformType>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform's name.</p>
    pub fn get_platform(&self) -> &::std::option::Option<crate::types::PlatformType> {
        &self.platform
    }
    /// Appends an item to `languages`.
    ///
    /// To override the contents of this collection use [`set_languages`](Self::set_languages).
    ///
    /// <p>The list of programming languages that are available for the specified platform.</p>
    pub fn languages(mut self, input: crate::types::EnvironmentLanguage) -> Self {
        let mut v = self.languages.unwrap_or_default();
        v.push(input);
        self.languages = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of programming languages that are available for the specified platform.</p>
    pub fn set_languages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentLanguage>>) -> Self {
        self.languages = input;
        self
    }
    /// <p>The list of programming languages that are available for the specified platform.</p>
    pub fn get_languages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EnvironmentLanguage>> {
        &self.languages
    }
    /// Consumes the builder and constructs a [`EnvironmentPlatform`](crate::types::EnvironmentPlatform).
    pub fn build(self) -> crate::types::EnvironmentPlatform {
        crate::types::EnvironmentPlatform {
            platform: self.platform,
            languages: self.languages,
        }
    }
}
