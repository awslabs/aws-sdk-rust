// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the build input source code for the build project.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProjectSource {
    /// <p>The type of repository that contains the source code to be built. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>BITBUCKET</code>: The source code is in a Bitbucket repository.</p> </li>
    /// <li> <p> <code>CODECOMMIT</code>: The source code is in an CodeCommit repository.</p> </li>
    /// <li> <p> <code>CODEPIPELINE</code>: The source code settings are specified in the source action of a pipeline in CodePipeline.</p> </li>
    /// <li> <p> <code>GITHUB</code>: The source code is in a GitHub or GitHub Enterprise Cloud repository.</p> </li>
    /// <li> <p> <code>GITHUB_ENTERPRISE</code>: The source code is in a GitHub Enterprise Server repository.</p> </li>
    /// <li> <p> <code>NO_SOURCE</code>: The project does not have input source code.</p> </li>
    /// <li> <p> <code>S3</code>: The source code is in an Amazon S3 bucket.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::SourceType>,
    /// <p>Information about the location of the source code to be built. Valid values include:</p>
    /// <ul>
    /// <li> <p>For source code settings that are specified in the source action of a pipeline in CodePipeline, <code>location</code> should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.</p> </li>
    /// <li> <p>For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the buildspec file (for example, <code>https://git-codecommit.
    /// <region-id>
    /// .amazonaws.com/v1/repos/
    /// <repo-name></repo-name>
    /// </region-id></code>).</p> </li>
    /// <li> <p>For source code in an Amazon S3 input bucket, one of the following. </p>
    /// <ul>
    /// <li> <p>The path to the ZIP file that contains the source code (for example, <code>
    /// <bucket-name>
    /// /
    /// <path>
    /// /
    /// <object-name>
    /// .zip
    /// </object-name>
    /// </path>
    /// </bucket-name></code>). </p> </li>
    /// <li> <p>The path to the folder that contains the source code (for example, <code>
    /// <bucket-name>
    /// /
    /// <path-to-source-code>
    /// /
    /// <folder>
    /// /
    /// </folder>
    /// </path-to-source-code>
    /// </bucket-name></code>). </p> </li>
    /// </ul> </li>
    /// <li> <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your GitHub account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with GitHub, on the GitHub <b>Authorize application</b> page, for <b>Organization access</b>, choose <b>Request access</b> next to each repository you want to allow CodeBuild to have access to, and then choose <b>Authorize application</b>. (After you have connected to your GitHub account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the <code>source</code> object, set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p> </li>
    /// <li> <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your Bitbucket account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket <b>Confirm access to your account</b> page, choose <b>Grant access</b>. (After you have connected to your Bitbucket account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the <code>source</code> object, set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p> </li>
    /// </ul>
    /// <p> If you specify <code>CODEPIPELINE</code> for the <code>Type</code> property, don't specify this property. For all of the other types, you must specify <code>Location</code>. </p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>Information about the Git clone depth for the build project.</p>
    #[doc(hidden)]
    pub git_clone_depth: std::option::Option<i32>,
    /// <p> Information about the Git submodules configuration for the build project. </p>
    #[doc(hidden)]
    pub git_submodules_config: std::option::Option<crate::types::GitSubmodulesConfig>,
    /// <p>The buildspec file declaration to use for the builds in this build project.</p>
    /// <p> If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in <code>CODEBUILD_SRC_DIR</code> environment variable, or the path to an S3 bucket. The bucket must be in the same Amazon Web Services Region as the build project. Specify the buildspec file using its ARN (for example, <code>arn:aws:s3:::my-codebuild-sample2/buildspec.yml</code>). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage">Buildspec File Name and Storage Location</a>. </p>
    #[doc(hidden)]
    pub buildspec: std::option::Option<std::string::String>,
    /// <p>Information about the authorization settings for CodeBuild to access the source code to be built.</p>
    /// <p>This information is for the CodeBuild console's use only. Your code should not get or set this information directly.</p>
    #[doc(hidden)]
    pub auth: std::option::Option<crate::types::SourceAuth>,
    /// <p> Set to true to report the status of a build's start and finish to your source provider. This option is valid only when your source provider is GitHub, GitHub Enterprise, or Bitbucket. If this is set and you use a different source provider, an <code>invalidInputException</code> is thrown. </p>
    /// <p>To be able to report the build status to the source provider, the user associated with the source provider must have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html">Source provider access</a> in the <i>CodeBuild User Guide</i>.</p>
    /// <p>The status of a build triggered by a webhook is always reported to your source provider. </p>
    /// <p>If your project's builds are triggered by a webhook, you must push a new commit to the repo for a change to this property to take effect.</p>
    #[doc(hidden)]
    pub report_build_status: std::option::Option<bool>,
    /// <p>Contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is <code>GITHUB</code>, <code>GITHUB_ENTERPRISE</code>, or <code>BITBUCKET</code>.</p>
    #[doc(hidden)]
    pub build_status_config: std::option::Option<crate::types::BuildStatusConfig>,
    /// <p>Enable this flag to ignore SSL warnings while connecting to the project source code.</p>
    #[doc(hidden)]
    pub insecure_ssl: std::option::Option<bool>,
    /// <p>An identifier for this project source. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length. </p>
    #[doc(hidden)]
    pub source_identifier: std::option::Option<std::string::String>,
}
impl ProjectSource {
    /// <p>The type of repository that contains the source code to be built. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>BITBUCKET</code>: The source code is in a Bitbucket repository.</p> </li>
    /// <li> <p> <code>CODECOMMIT</code>: The source code is in an CodeCommit repository.</p> </li>
    /// <li> <p> <code>CODEPIPELINE</code>: The source code settings are specified in the source action of a pipeline in CodePipeline.</p> </li>
    /// <li> <p> <code>GITHUB</code>: The source code is in a GitHub or GitHub Enterprise Cloud repository.</p> </li>
    /// <li> <p> <code>GITHUB_ENTERPRISE</code>: The source code is in a GitHub Enterprise Server repository.</p> </li>
    /// <li> <p> <code>NO_SOURCE</code>: The project does not have input source code.</p> </li>
    /// <li> <p> <code>S3</code>: The source code is in an Amazon S3 bucket.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&crate::types::SourceType> {
        self.r#type.as_ref()
    }
    /// <p>Information about the location of the source code to be built. Valid values include:</p>
    /// <ul>
    /// <li> <p>For source code settings that are specified in the source action of a pipeline in CodePipeline, <code>location</code> should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.</p> </li>
    /// <li> <p>For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the buildspec file (for example, <code>https://git-codecommit.
    /// <region-id>
    /// .amazonaws.com/v1/repos/
    /// <repo-name></repo-name>
    /// </region-id></code>).</p> </li>
    /// <li> <p>For source code in an Amazon S3 input bucket, one of the following. </p>
    /// <ul>
    /// <li> <p>The path to the ZIP file that contains the source code (for example, <code>
    /// <bucket-name>
    /// /
    /// <path>
    /// /
    /// <object-name>
    /// .zip
    /// </object-name>
    /// </path>
    /// </bucket-name></code>). </p> </li>
    /// <li> <p>The path to the folder that contains the source code (for example, <code>
    /// <bucket-name>
    /// /
    /// <path-to-source-code>
    /// /
    /// <folder>
    /// /
    /// </folder>
    /// </path-to-source-code>
    /// </bucket-name></code>). </p> </li>
    /// </ul> </li>
    /// <li> <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your GitHub account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with GitHub, on the GitHub <b>Authorize application</b> page, for <b>Organization access</b>, choose <b>Request access</b> next to each repository you want to allow CodeBuild to have access to, and then choose <b>Authorize application</b>. (After you have connected to your GitHub account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the <code>source</code> object, set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p> </li>
    /// <li> <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your Bitbucket account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket <b>Confirm access to your account</b> page, choose <b>Grant access</b>. (After you have connected to your Bitbucket account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the <code>source</code> object, set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p> </li>
    /// </ul>
    /// <p> If you specify <code>CODEPIPELINE</code> for the <code>Type</code> property, don't specify this property. For all of the other types, you must specify <code>Location</code>. </p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>Information about the Git clone depth for the build project.</p>
    pub fn git_clone_depth(&self) -> std::option::Option<i32> {
        self.git_clone_depth
    }
    /// <p> Information about the Git submodules configuration for the build project. </p>
    pub fn git_submodules_config(&self) -> std::option::Option<&crate::types::GitSubmodulesConfig> {
        self.git_submodules_config.as_ref()
    }
    /// <p>The buildspec file declaration to use for the builds in this build project.</p>
    /// <p> If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in <code>CODEBUILD_SRC_DIR</code> environment variable, or the path to an S3 bucket. The bucket must be in the same Amazon Web Services Region as the build project. Specify the buildspec file using its ARN (for example, <code>arn:aws:s3:::my-codebuild-sample2/buildspec.yml</code>). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage">Buildspec File Name and Storage Location</a>. </p>
    pub fn buildspec(&self) -> std::option::Option<&str> {
        self.buildspec.as_deref()
    }
    /// <p>Information about the authorization settings for CodeBuild to access the source code to be built.</p>
    /// <p>This information is for the CodeBuild console's use only. Your code should not get or set this information directly.</p>
    pub fn auth(&self) -> std::option::Option<&crate::types::SourceAuth> {
        self.auth.as_ref()
    }
    /// <p> Set to true to report the status of a build's start and finish to your source provider. This option is valid only when your source provider is GitHub, GitHub Enterprise, or Bitbucket. If this is set and you use a different source provider, an <code>invalidInputException</code> is thrown. </p>
    /// <p>To be able to report the build status to the source provider, the user associated with the source provider must have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html">Source provider access</a> in the <i>CodeBuild User Guide</i>.</p>
    /// <p>The status of a build triggered by a webhook is always reported to your source provider. </p>
    /// <p>If your project's builds are triggered by a webhook, you must push a new commit to the repo for a change to this property to take effect.</p>
    pub fn report_build_status(&self) -> std::option::Option<bool> {
        self.report_build_status
    }
    /// <p>Contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is <code>GITHUB</code>, <code>GITHUB_ENTERPRISE</code>, or <code>BITBUCKET</code>.</p>
    pub fn build_status_config(&self) -> std::option::Option<&crate::types::BuildStatusConfig> {
        self.build_status_config.as_ref()
    }
    /// <p>Enable this flag to ignore SSL warnings while connecting to the project source code.</p>
    pub fn insecure_ssl(&self) -> std::option::Option<bool> {
        self.insecure_ssl
    }
    /// <p>An identifier for this project source. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length. </p>
    pub fn source_identifier(&self) -> std::option::Option<&str> {
        self.source_identifier.as_deref()
    }
}
impl ProjectSource {
    /// Creates a new builder-style object to manufacture [`ProjectSource`](crate::types::ProjectSource).
    pub fn builder() -> crate::types::builders::ProjectSourceBuilder {
        crate::types::builders::ProjectSourceBuilder::default()
    }
}

/// A builder for [`ProjectSource`](crate::types::ProjectSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProjectSourceBuilder {
    pub(crate) r#type: std::option::Option<crate::types::SourceType>,
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) git_clone_depth: std::option::Option<i32>,
    pub(crate) git_submodules_config: std::option::Option<crate::types::GitSubmodulesConfig>,
    pub(crate) buildspec: std::option::Option<std::string::String>,
    pub(crate) auth: std::option::Option<crate::types::SourceAuth>,
    pub(crate) report_build_status: std::option::Option<bool>,
    pub(crate) build_status_config: std::option::Option<crate::types::BuildStatusConfig>,
    pub(crate) insecure_ssl: std::option::Option<bool>,
    pub(crate) source_identifier: std::option::Option<std::string::String>,
}
impl ProjectSourceBuilder {
    /// <p>The type of repository that contains the source code to be built. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>BITBUCKET</code>: The source code is in a Bitbucket repository.</p> </li>
    /// <li> <p> <code>CODECOMMIT</code>: The source code is in an CodeCommit repository.</p> </li>
    /// <li> <p> <code>CODEPIPELINE</code>: The source code settings are specified in the source action of a pipeline in CodePipeline.</p> </li>
    /// <li> <p> <code>GITHUB</code>: The source code is in a GitHub or GitHub Enterprise Cloud repository.</p> </li>
    /// <li> <p> <code>GITHUB_ENTERPRISE</code>: The source code is in a GitHub Enterprise Server repository.</p> </li>
    /// <li> <p> <code>NO_SOURCE</code>: The project does not have input source code.</p> </li>
    /// <li> <p> <code>S3</code>: The source code is in an Amazon S3 bucket.</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::SourceType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of repository that contains the source code to be built. Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>BITBUCKET</code>: The source code is in a Bitbucket repository.</p> </li>
    /// <li> <p> <code>CODECOMMIT</code>: The source code is in an CodeCommit repository.</p> </li>
    /// <li> <p> <code>CODEPIPELINE</code>: The source code settings are specified in the source action of a pipeline in CodePipeline.</p> </li>
    /// <li> <p> <code>GITHUB</code>: The source code is in a GitHub or GitHub Enterprise Cloud repository.</p> </li>
    /// <li> <p> <code>GITHUB_ENTERPRISE</code>: The source code is in a GitHub Enterprise Server repository.</p> </li>
    /// <li> <p> <code>NO_SOURCE</code>: The project does not have input source code.</p> </li>
    /// <li> <p> <code>S3</code>: The source code is in an Amazon S3 bucket.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<crate::types::SourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Information about the location of the source code to be built. Valid values include:</p>
    /// <ul>
    /// <li> <p>For source code settings that are specified in the source action of a pipeline in CodePipeline, <code>location</code> should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.</p> </li>
    /// <li> <p>For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the buildspec file (for example, <code>https://git-codecommit.
    /// <region-id>
    /// .amazonaws.com/v1/repos/
    /// <repo-name></repo-name>
    /// </region-id></code>).</p> </li>
    /// <li> <p>For source code in an Amazon S3 input bucket, one of the following. </p>
    /// <ul>
    /// <li> <p>The path to the ZIP file that contains the source code (for example, <code>
    /// <bucket-name>
    /// /
    /// <path>
    /// /
    /// <object-name>
    /// .zip
    /// </object-name>
    /// </path>
    /// </bucket-name></code>). </p> </li>
    /// <li> <p>The path to the folder that contains the source code (for example, <code>
    /// <bucket-name>
    /// /
    /// <path-to-source-code>
    /// /
    /// <folder>
    /// /
    /// </folder>
    /// </path-to-source-code>
    /// </bucket-name></code>). </p> </li>
    /// </ul> </li>
    /// <li> <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your GitHub account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with GitHub, on the GitHub <b>Authorize application</b> page, for <b>Organization access</b>, choose <b>Request access</b> next to each repository you want to allow CodeBuild to have access to, and then choose <b>Authorize application</b>. (After you have connected to your GitHub account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the <code>source</code> object, set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p> </li>
    /// <li> <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your Bitbucket account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket <b>Confirm access to your account</b> page, choose <b>Grant access</b>. (After you have connected to your Bitbucket account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the <code>source</code> object, set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p> </li>
    /// </ul>
    /// <p> If you specify <code>CODEPIPELINE</code> for the <code>Type</code> property, don't specify this property. For all of the other types, you must specify <code>Location</code>. </p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>Information about the location of the source code to be built. Valid values include:</p>
    /// <ul>
    /// <li> <p>For source code settings that are specified in the source action of a pipeline in CodePipeline, <code>location</code> should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.</p> </li>
    /// <li> <p>For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the buildspec file (for example, <code>https://git-codecommit.
    /// <region-id>
    /// .amazonaws.com/v1/repos/
    /// <repo-name></repo-name>
    /// </region-id></code>).</p> </li>
    /// <li> <p>For source code in an Amazon S3 input bucket, one of the following. </p>
    /// <ul>
    /// <li> <p>The path to the ZIP file that contains the source code (for example, <code>
    /// <bucket-name>
    /// /
    /// <path>
    /// /
    /// <object-name>
    /// .zip
    /// </object-name>
    /// </path>
    /// </bucket-name></code>). </p> </li>
    /// <li> <p>The path to the folder that contains the source code (for example, <code>
    /// <bucket-name>
    /// /
    /// <path-to-source-code>
    /// /
    /// <folder>
    /// /
    /// </folder>
    /// </path-to-source-code>
    /// </bucket-name></code>). </p> </li>
    /// </ul> </li>
    /// <li> <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your GitHub account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with GitHub, on the GitHub <b>Authorize application</b> page, for <b>Organization access</b>, choose <b>Request access</b> next to each repository you want to allow CodeBuild to have access to, and then choose <b>Authorize application</b>. (After you have connected to your GitHub account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the <code>source</code> object, set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p> </li>
    /// <li> <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your Bitbucket account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket <b>Confirm access to your account</b> page, choose <b>Grant access</b>. (After you have connected to your Bitbucket account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the <code>source</code> object, set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p> </li>
    /// </ul>
    /// <p> If you specify <code>CODEPIPELINE</code> for the <code>Type</code> property, don't specify this property. For all of the other types, you must specify <code>Location</code>. </p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>Information about the Git clone depth for the build project.</p>
    pub fn git_clone_depth(mut self, input: i32) -> Self {
        self.git_clone_depth = Some(input);
        self
    }
    /// <p>Information about the Git clone depth for the build project.</p>
    pub fn set_git_clone_depth(mut self, input: std::option::Option<i32>) -> Self {
        self.git_clone_depth = input;
        self
    }
    /// <p> Information about the Git submodules configuration for the build project. </p>
    pub fn git_submodules_config(mut self, input: crate::types::GitSubmodulesConfig) -> Self {
        self.git_submodules_config = Some(input);
        self
    }
    /// <p> Information about the Git submodules configuration for the build project. </p>
    pub fn set_git_submodules_config(
        mut self,
        input: std::option::Option<crate::types::GitSubmodulesConfig>,
    ) -> Self {
        self.git_submodules_config = input;
        self
    }
    /// <p>The buildspec file declaration to use for the builds in this build project.</p>
    /// <p> If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in <code>CODEBUILD_SRC_DIR</code> environment variable, or the path to an S3 bucket. The bucket must be in the same Amazon Web Services Region as the build project. Specify the buildspec file using its ARN (for example, <code>arn:aws:s3:::my-codebuild-sample2/buildspec.yml</code>). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage">Buildspec File Name and Storage Location</a>. </p>
    pub fn buildspec(mut self, input: impl Into<std::string::String>) -> Self {
        self.buildspec = Some(input.into());
        self
    }
    /// <p>The buildspec file declaration to use for the builds in this build project.</p>
    /// <p> If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in <code>CODEBUILD_SRC_DIR</code> environment variable, or the path to an S3 bucket. The bucket must be in the same Amazon Web Services Region as the build project. Specify the buildspec file using its ARN (for example, <code>arn:aws:s3:::my-codebuild-sample2/buildspec.yml</code>). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage">Buildspec File Name and Storage Location</a>. </p>
    pub fn set_buildspec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.buildspec = input;
        self
    }
    /// <p>Information about the authorization settings for CodeBuild to access the source code to be built.</p>
    /// <p>This information is for the CodeBuild console's use only. Your code should not get or set this information directly.</p>
    pub fn auth(mut self, input: crate::types::SourceAuth) -> Self {
        self.auth = Some(input);
        self
    }
    /// <p>Information about the authorization settings for CodeBuild to access the source code to be built.</p>
    /// <p>This information is for the CodeBuild console's use only. Your code should not get or set this information directly.</p>
    pub fn set_auth(mut self, input: std::option::Option<crate::types::SourceAuth>) -> Self {
        self.auth = input;
        self
    }
    /// <p> Set to true to report the status of a build's start and finish to your source provider. This option is valid only when your source provider is GitHub, GitHub Enterprise, or Bitbucket. If this is set and you use a different source provider, an <code>invalidInputException</code> is thrown. </p>
    /// <p>To be able to report the build status to the source provider, the user associated with the source provider must have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html">Source provider access</a> in the <i>CodeBuild User Guide</i>.</p>
    /// <p>The status of a build triggered by a webhook is always reported to your source provider. </p>
    /// <p>If your project's builds are triggered by a webhook, you must push a new commit to the repo for a change to this property to take effect.</p>
    pub fn report_build_status(mut self, input: bool) -> Self {
        self.report_build_status = Some(input);
        self
    }
    /// <p> Set to true to report the status of a build's start and finish to your source provider. This option is valid only when your source provider is GitHub, GitHub Enterprise, or Bitbucket. If this is set and you use a different source provider, an <code>invalidInputException</code> is thrown. </p>
    /// <p>To be able to report the build status to the source provider, the user associated with the source provider must have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html">Source provider access</a> in the <i>CodeBuild User Guide</i>.</p>
    /// <p>The status of a build triggered by a webhook is always reported to your source provider. </p>
    /// <p>If your project's builds are triggered by a webhook, you must push a new commit to the repo for a change to this property to take effect.</p>
    pub fn set_report_build_status(mut self, input: std::option::Option<bool>) -> Self {
        self.report_build_status = input;
        self
    }
    /// <p>Contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is <code>GITHUB</code>, <code>GITHUB_ENTERPRISE</code>, or <code>BITBUCKET</code>.</p>
    pub fn build_status_config(mut self, input: crate::types::BuildStatusConfig) -> Self {
        self.build_status_config = Some(input);
        self
    }
    /// <p>Contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is <code>GITHUB</code>, <code>GITHUB_ENTERPRISE</code>, or <code>BITBUCKET</code>.</p>
    pub fn set_build_status_config(
        mut self,
        input: std::option::Option<crate::types::BuildStatusConfig>,
    ) -> Self {
        self.build_status_config = input;
        self
    }
    /// <p>Enable this flag to ignore SSL warnings while connecting to the project source code.</p>
    pub fn insecure_ssl(mut self, input: bool) -> Self {
        self.insecure_ssl = Some(input);
        self
    }
    /// <p>Enable this flag to ignore SSL warnings while connecting to the project source code.</p>
    pub fn set_insecure_ssl(mut self, input: std::option::Option<bool>) -> Self {
        self.insecure_ssl = input;
        self
    }
    /// <p>An identifier for this project source. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length. </p>
    pub fn source_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_identifier = Some(input.into());
        self
    }
    /// <p>An identifier for this project source. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length. </p>
    pub fn set_source_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`ProjectSource`](crate::types::ProjectSource).
    pub fn build(self) -> crate::types::ProjectSource {
        crate::types::ProjectSource {
            r#type: self.r#type,
            location: self.location,
            git_clone_depth: self.git_clone_depth,
            git_submodules_config: self.git_submodules_config,
            buildspec: self.buildspec,
            auth: self.auth,
            report_build_status: self.report_build_status,
            build_status_config: self.build_status_config,
            insecure_ssl: self.insecure_ssl,
            source_identifier: self.source_identifier,
        }
    }
}
