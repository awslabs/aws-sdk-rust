// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about a test report. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestReportSummary {
    /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes truncated test cases. </p>
    pub total: i32,
    /// <p> A map that contains the number of each type of status returned by the test results in this <code>TestReportSummary</code>. </p>
    pub status_counts: ::std::collections::HashMap<::std::string::String, i32>,
    /// <p> The number of nanoseconds it took to run all of the test cases in this report. </p>
    pub duration_in_nano_seconds: i64,
}
impl TestReportSummary {
    /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes truncated test cases. </p>
    pub fn total(&self) -> i32 {
        self.total
    }
    /// <p> A map that contains the number of each type of status returned by the test results in this <code>TestReportSummary</code>. </p>
    pub fn status_counts(&self) -> &::std::collections::HashMap<::std::string::String, i32> {
        &self.status_counts
    }
    /// <p> The number of nanoseconds it took to run all of the test cases in this report. </p>
    pub fn duration_in_nano_seconds(&self) -> i64 {
        self.duration_in_nano_seconds
    }
}
impl TestReportSummary {
    /// Creates a new builder-style object to manufacture [`TestReportSummary`](crate::types::TestReportSummary).
    pub fn builder() -> crate::types::builders::TestReportSummaryBuilder {
        crate::types::builders::TestReportSummaryBuilder::default()
    }
}

/// A builder for [`TestReportSummary`](crate::types::TestReportSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestReportSummaryBuilder {
    pub(crate) total: ::std::option::Option<i32>,
    pub(crate) status_counts: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
    pub(crate) duration_in_nano_seconds: ::std::option::Option<i64>,
}
impl TestReportSummaryBuilder {
    /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes truncated test cases. </p>
    /// This field is required.
    pub fn total(mut self, input: i32) -> Self {
        self.total = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes truncated test cases. </p>
    pub fn set_total(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total = input;
        self
    }
    /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes truncated test cases. </p>
    pub fn get_total(&self) -> &::std::option::Option<i32> {
        &self.total
    }
    /// Adds a key-value pair to `status_counts`.
    ///
    /// To override the contents of this collection use [`set_status_counts`](Self::set_status_counts).
    ///
    /// <p> A map that contains the number of each type of status returned by the test results in this <code>TestReportSummary</code>. </p>
    pub fn status_counts(mut self, k: impl ::std::convert::Into<::std::string::String>, v: i32) -> Self {
        let mut hash_map = self.status_counts.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.status_counts = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> A map that contains the number of each type of status returned by the test results in this <code>TestReportSummary</code>. </p>
    pub fn set_status_counts(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>) -> Self {
        self.status_counts = input;
        self
    }
    /// <p> A map that contains the number of each type of status returned by the test results in this <code>TestReportSummary</code>. </p>
    pub fn get_status_counts(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, i32>> {
        &self.status_counts
    }
    /// <p> The number of nanoseconds it took to run all of the test cases in this report. </p>
    /// This field is required.
    pub fn duration_in_nano_seconds(mut self, input: i64) -> Self {
        self.duration_in_nano_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of nanoseconds it took to run all of the test cases in this report. </p>
    pub fn set_duration_in_nano_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_in_nano_seconds = input;
        self
    }
    /// <p> The number of nanoseconds it took to run all of the test cases in this report. </p>
    pub fn get_duration_in_nano_seconds(&self) -> &::std::option::Option<i64> {
        &self.duration_in_nano_seconds
    }
    /// Consumes the builder and constructs a [`TestReportSummary`](crate::types::TestReportSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`total`](crate::types::builders::TestReportSummaryBuilder::total)
    /// - [`status_counts`](crate::types::builders::TestReportSummaryBuilder::status_counts)
    /// - [`duration_in_nano_seconds`](crate::types::builders::TestReportSummaryBuilder::duration_in_nano_seconds)
    pub fn build(self) -> ::std::result::Result<crate::types::TestReportSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TestReportSummary {
            total: self.total.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "total",
                    "total was not specified but it is required when building TestReportSummary",
                )
            })?,
            status_counts: self.status_counts.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_counts",
                    "status_counts was not specified but it is required when building TestReportSummary",
                )
            })?,
            duration_in_nano_seconds: self.duration_in_nano_seconds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "duration_in_nano_seconds",
                    "duration_in_nano_seconds was not specified but it is required when building TestReportSummary",
                )
            })?,
        })
    }
}
