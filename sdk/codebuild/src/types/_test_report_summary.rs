// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about a test report. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestReportSummary {
    /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes truncated test cases. </p>
    #[doc(hidden)]
    pub total: std::option::Option<i32>,
    /// <p> A map that contains the number of each type of status returned by the test results in this <code>TestReportSummary</code>. </p>
    #[doc(hidden)]
    pub status_counts: std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    /// <p> The number of nanoseconds it took to run all of the test cases in this report. </p>
    #[doc(hidden)]
    pub duration_in_nano_seconds: std::option::Option<i64>,
}
impl TestReportSummary {
    /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes truncated test cases. </p>
    pub fn total(&self) -> std::option::Option<i32> {
        self.total
    }
    /// <p> A map that contains the number of each type of status returned by the test results in this <code>TestReportSummary</code>. </p>
    pub fn status_counts(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, i32>> {
        self.status_counts.as_ref()
    }
    /// <p> The number of nanoseconds it took to run all of the test cases in this report. </p>
    pub fn duration_in_nano_seconds(&self) -> std::option::Option<i64> {
        self.duration_in_nano_seconds
    }
}
impl TestReportSummary {
    /// Creates a new builder-style object to manufacture [`TestReportSummary`](crate::types::TestReportSummary).
    pub fn builder() -> crate::types::builders::TestReportSummaryBuilder {
        crate::types::builders::TestReportSummaryBuilder::default()
    }
}

/// A builder for [`TestReportSummary`](crate::types::TestReportSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestReportSummaryBuilder {
    pub(crate) total: std::option::Option<i32>,
    pub(crate) status_counts:
        std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    pub(crate) duration_in_nano_seconds: std::option::Option<i64>,
}
impl TestReportSummaryBuilder {
    /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes truncated test cases. </p>
    pub fn total(mut self, input: i32) -> Self {
        self.total = Some(input);
        self
    }
    /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes truncated test cases. </p>
    pub fn set_total(mut self, input: std::option::Option<i32>) -> Self {
        self.total = input;
        self
    }
    /// Adds a key-value pair to `status_counts`.
    ///
    /// To override the contents of this collection use [`set_status_counts`](Self::set_status_counts).
    ///
    /// <p> A map that contains the number of each type of status returned by the test results in this <code>TestReportSummary</code>. </p>
    pub fn status_counts(mut self, k: impl Into<std::string::String>, v: i32) -> Self {
        let mut hash_map = self.status_counts.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.status_counts = Some(hash_map);
        self
    }
    /// <p> A map that contains the number of each type of status returned by the test results in this <code>TestReportSummary</code>. </p>
    pub fn set_status_counts(
        mut self,
        input: std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    ) -> Self {
        self.status_counts = input;
        self
    }
    /// <p> The number of nanoseconds it took to run all of the test cases in this report. </p>
    pub fn duration_in_nano_seconds(mut self, input: i64) -> Self {
        self.duration_in_nano_seconds = Some(input);
        self
    }
    /// <p> The number of nanoseconds it took to run all of the test cases in this report. </p>
    pub fn set_duration_in_nano_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.duration_in_nano_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`TestReportSummary`](crate::types::TestReportSummary).
    pub fn build(self) -> crate::types::TestReportSummary {
        crate::types::TestReportSummary {
            total: self.total,
            status_counts: self.status_counts,
            duration_in_nano_seconds: self.duration_in_nano_seconds,
        }
    }
}
