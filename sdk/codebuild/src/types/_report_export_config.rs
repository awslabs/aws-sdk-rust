// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the location where the run of a report is exported. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReportExportConfig {
    /// <p> The export configuration type. Valid values are: </p>
    /// <ul>
    /// <li> <p> <code>S3</code>: The report results are exported to an S3 bucket. </p> </li>
    /// <li> <p> <code>NO_EXPORT</code>: The report results are not exported. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub export_config_type: std::option::Option<crate::types::ReportExportConfigType>,
    /// <p> A <code>S3ReportExportConfig</code> object that contains information about the S3 bucket where the run of a report is exported. </p>
    #[doc(hidden)]
    pub s3_destination: std::option::Option<crate::types::S3ReportExportConfig>,
}
impl ReportExportConfig {
    /// <p> The export configuration type. Valid values are: </p>
    /// <ul>
    /// <li> <p> <code>S3</code>: The report results are exported to an S3 bucket. </p> </li>
    /// <li> <p> <code>NO_EXPORT</code>: The report results are not exported. </p> </li>
    /// </ul>
    pub fn export_config_type(&self) -> std::option::Option<&crate::types::ReportExportConfigType> {
        self.export_config_type.as_ref()
    }
    /// <p> A <code>S3ReportExportConfig</code> object that contains information about the S3 bucket where the run of a report is exported. </p>
    pub fn s3_destination(&self) -> std::option::Option<&crate::types::S3ReportExportConfig> {
        self.s3_destination.as_ref()
    }
}
impl ReportExportConfig {
    /// Creates a new builder-style object to manufacture [`ReportExportConfig`](crate::types::ReportExportConfig).
    pub fn builder() -> crate::types::builders::ReportExportConfigBuilder {
        crate::types::builders::ReportExportConfigBuilder::default()
    }
}

/// A builder for [`ReportExportConfig`](crate::types::ReportExportConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReportExportConfigBuilder {
    pub(crate) export_config_type: std::option::Option<crate::types::ReportExportConfigType>,
    pub(crate) s3_destination: std::option::Option<crate::types::S3ReportExportConfig>,
}
impl ReportExportConfigBuilder {
    /// <p> The export configuration type. Valid values are: </p>
    /// <ul>
    /// <li> <p> <code>S3</code>: The report results are exported to an S3 bucket. </p> </li>
    /// <li> <p> <code>NO_EXPORT</code>: The report results are not exported. </p> </li>
    /// </ul>
    pub fn export_config_type(mut self, input: crate::types::ReportExportConfigType) -> Self {
        self.export_config_type = Some(input);
        self
    }
    /// <p> The export configuration type. Valid values are: </p>
    /// <ul>
    /// <li> <p> <code>S3</code>: The report results are exported to an S3 bucket. </p> </li>
    /// <li> <p> <code>NO_EXPORT</code>: The report results are not exported. </p> </li>
    /// </ul>
    pub fn set_export_config_type(
        mut self,
        input: std::option::Option<crate::types::ReportExportConfigType>,
    ) -> Self {
        self.export_config_type = input;
        self
    }
    /// <p> A <code>S3ReportExportConfig</code> object that contains information about the S3 bucket where the run of a report is exported. </p>
    pub fn s3_destination(mut self, input: crate::types::S3ReportExportConfig) -> Self {
        self.s3_destination = Some(input);
        self
    }
    /// <p> A <code>S3ReportExportConfig</code> object that contains information about the S3 bucket where the run of a report is exported. </p>
    pub fn set_s3_destination(
        mut self,
        input: std::option::Option<crate::types::S3ReportExportConfig>,
    ) -> Self {
        self.s3_destination = input;
        self
    }
    /// Consumes the builder and constructs a [`ReportExportConfig`](crate::types::ReportExportConfig).
    pub fn build(self) -> crate::types::ReportExportConfig {
        crate::types::ReportExportConfig {
            export_config_type: self.export_config_type,
            s3_destination: self.s3_destination,
        }
    }
}
