// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `PullRequestBuildApproverRole`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let pullrequestbuildapproverrole = unimplemented!();
/// match pullrequestbuildapproverrole {
///     PullRequestBuildApproverRole::BitbucketAdmin => { /* ... */ },
///     PullRequestBuildApproverRole::BitbucketRead => { /* ... */ },
///     PullRequestBuildApproverRole::BitbucketWrite => { /* ... */ },
///     PullRequestBuildApproverRole::GithubAdmin => { /* ... */ },
///     PullRequestBuildApproverRole::GithubMaintain => { /* ... */ },
///     PullRequestBuildApproverRole::GithubRead => { /* ... */ },
///     PullRequestBuildApproverRole::GithubTriage => { /* ... */ },
///     PullRequestBuildApproverRole::GithubWrite => { /* ... */ },
///     PullRequestBuildApproverRole::GitlabDeveloper => { /* ... */ },
///     PullRequestBuildApproverRole::GitlabGuest => { /* ... */ },
///     PullRequestBuildApproverRole::GitlabMaintainer => { /* ... */ },
///     PullRequestBuildApproverRole::GitlabOwner => { /* ... */ },
///     PullRequestBuildApproverRole::GitlabPlanner => { /* ... */ },
///     PullRequestBuildApproverRole::GitlabReporter => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `pullrequestbuildapproverrole` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `PullRequestBuildApproverRole::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `PullRequestBuildApproverRole::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `PullRequestBuildApproverRole::NewFeature` is defined.
/// Specifically, when `pullrequestbuildapproverrole` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `PullRequestBuildApproverRole::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum PullRequestBuildApproverRole {
    #[allow(missing_docs)] // documentation missing in model
    BitbucketAdmin,
    #[allow(missing_docs)] // documentation missing in model
    BitbucketRead,
    #[allow(missing_docs)] // documentation missing in model
    BitbucketWrite,
    #[allow(missing_docs)] // documentation missing in model
    GithubAdmin,
    #[allow(missing_docs)] // documentation missing in model
    GithubMaintain,
    #[allow(missing_docs)] // documentation missing in model
    GithubRead,
    #[allow(missing_docs)] // documentation missing in model
    GithubTriage,
    #[allow(missing_docs)] // documentation missing in model
    GithubWrite,
    #[allow(missing_docs)] // documentation missing in model
    GitlabDeveloper,
    #[allow(missing_docs)] // documentation missing in model
    GitlabGuest,
    #[allow(missing_docs)] // documentation missing in model
    GitlabMaintainer,
    #[allow(missing_docs)] // documentation missing in model
    GitlabOwner,
    #[allow(missing_docs)] // documentation missing in model
    GitlabPlanner,
    #[allow(missing_docs)] // documentation missing in model
    GitlabReporter,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for PullRequestBuildApproverRole {
    fn from(s: &str) -> Self {
        match s {
            "BITBUCKET_ADMIN" => PullRequestBuildApproverRole::BitbucketAdmin,
            "BITBUCKET_READ" => PullRequestBuildApproverRole::BitbucketRead,
            "BITBUCKET_WRITE" => PullRequestBuildApproverRole::BitbucketWrite,
            "GITHUB_ADMIN" => PullRequestBuildApproverRole::GithubAdmin,
            "GITHUB_MAINTAIN" => PullRequestBuildApproverRole::GithubMaintain,
            "GITHUB_READ" => PullRequestBuildApproverRole::GithubRead,
            "GITHUB_TRIAGE" => PullRequestBuildApproverRole::GithubTriage,
            "GITHUB_WRITE" => PullRequestBuildApproverRole::GithubWrite,
            "GITLAB_DEVELOPER" => PullRequestBuildApproverRole::GitlabDeveloper,
            "GITLAB_GUEST" => PullRequestBuildApproverRole::GitlabGuest,
            "GITLAB_MAINTAINER" => PullRequestBuildApproverRole::GitlabMaintainer,
            "GITLAB_OWNER" => PullRequestBuildApproverRole::GitlabOwner,
            "GITLAB_PLANNER" => PullRequestBuildApproverRole::GitlabPlanner,
            "GITLAB_REPORTER" => PullRequestBuildApproverRole::GitlabReporter,
            other => PullRequestBuildApproverRole::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for PullRequestBuildApproverRole {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(PullRequestBuildApproverRole::from(s))
    }
}
impl PullRequestBuildApproverRole {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            PullRequestBuildApproverRole::BitbucketAdmin => "BITBUCKET_ADMIN",
            PullRequestBuildApproverRole::BitbucketRead => "BITBUCKET_READ",
            PullRequestBuildApproverRole::BitbucketWrite => "BITBUCKET_WRITE",
            PullRequestBuildApproverRole::GithubAdmin => "GITHUB_ADMIN",
            PullRequestBuildApproverRole::GithubMaintain => "GITHUB_MAINTAIN",
            PullRequestBuildApproverRole::GithubRead => "GITHUB_READ",
            PullRequestBuildApproverRole::GithubTriage => "GITHUB_TRIAGE",
            PullRequestBuildApproverRole::GithubWrite => "GITHUB_WRITE",
            PullRequestBuildApproverRole::GitlabDeveloper => "GITLAB_DEVELOPER",
            PullRequestBuildApproverRole::GitlabGuest => "GITLAB_GUEST",
            PullRequestBuildApproverRole::GitlabMaintainer => "GITLAB_MAINTAINER",
            PullRequestBuildApproverRole::GitlabOwner => "GITLAB_OWNER",
            PullRequestBuildApproverRole::GitlabPlanner => "GITLAB_PLANNER",
            PullRequestBuildApproverRole::GitlabReporter => "GITLAB_REPORTER",
            PullRequestBuildApproverRole::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BITBUCKET_ADMIN",
            "BITBUCKET_READ",
            "BITBUCKET_WRITE",
            "GITHUB_ADMIN",
            "GITHUB_MAINTAIN",
            "GITHUB_READ",
            "GITHUB_TRIAGE",
            "GITHUB_WRITE",
            "GITLAB_DEVELOPER",
            "GITLAB_GUEST",
            "GITLAB_MAINTAINER",
            "GITLAB_OWNER",
            "GITLAB_PLANNER",
            "GITLAB_REPORTER",
        ]
    }
}
impl ::std::convert::AsRef<str> for PullRequestBuildApproverRole {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl PullRequestBuildApproverRole {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for PullRequestBuildApproverRole {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            PullRequestBuildApproverRole::BitbucketAdmin => write!(f, "BITBUCKET_ADMIN"),
            PullRequestBuildApproverRole::BitbucketRead => write!(f, "BITBUCKET_READ"),
            PullRequestBuildApproverRole::BitbucketWrite => write!(f, "BITBUCKET_WRITE"),
            PullRequestBuildApproverRole::GithubAdmin => write!(f, "GITHUB_ADMIN"),
            PullRequestBuildApproverRole::GithubMaintain => write!(f, "GITHUB_MAINTAIN"),
            PullRequestBuildApproverRole::GithubRead => write!(f, "GITHUB_READ"),
            PullRequestBuildApproverRole::GithubTriage => write!(f, "GITHUB_TRIAGE"),
            PullRequestBuildApproverRole::GithubWrite => write!(f, "GITHUB_WRITE"),
            PullRequestBuildApproverRole::GitlabDeveloper => write!(f, "GITLAB_DEVELOPER"),
            PullRequestBuildApproverRole::GitlabGuest => write!(f, "GITLAB_GUEST"),
            PullRequestBuildApproverRole::GitlabMaintainer => write!(f, "GITLAB_MAINTAINER"),
            PullRequestBuildApproverRole::GitlabOwner => write!(f, "GITLAB_OWNER"),
            PullRequestBuildApproverRole::GitlabPlanner => write!(f, "GITLAB_PLANNER"),
            PullRequestBuildApproverRole::GitlabReporter => write!(f, "GITLAB_REPORTER"),
            PullRequestBuildApproverRole::Unknown(value) => write!(f, "{}", value),
        }
    }
}
