// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about S3 logs for a build project. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3LogsConfig {
    /// <p>The current status of the S3 build logs. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code>: S3 build logs are enabled for this build project.</p> </li>
    /// <li> <p> <code>DISABLED</code>: S3 build logs are not enabled for this build project.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::LogsConfigStatusType>,
    /// <p> The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3 bucket name is <code>my-bucket</code>, and your path prefix is <code>build-log</code>, then acceptable formats are <code>my-bucket/build-log</code> or <code>arn:aws:s3:::my-bucket/build-log</code>. </p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p> Set to true if you do not want your S3 build log output encrypted. By default S3 build logs are encrypted. </p>
    #[doc(hidden)]
    pub encryption_disabled: std::option::Option<bool>,
    /// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note>
    /// <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p>
    /// </note>
    /// <p>This property can be one of the following values:</p>
    /// <dl>
    /// <dt>
    /// NONE
    /// </dt>
    /// <dd>
    /// <p>The bucket owner does not have access to the objects. This is the default.</p>
    /// </dd>
    /// <dt>
    /// READ_ONLY
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p>
    /// </dd>
    /// <dt>
    /// FULL
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p>
    /// <ul>
    /// <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li>
    /// <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li>
    /// </ul>
    /// <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub bucket_owner_access: std::option::Option<crate::types::BucketOwnerAccess>,
}
impl S3LogsConfig {
    /// <p>The current status of the S3 build logs. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code>: S3 build logs are enabled for this build project.</p> </li>
    /// <li> <p> <code>DISABLED</code>: S3 build logs are not enabled for this build project.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::LogsConfigStatusType> {
        self.status.as_ref()
    }
    /// <p> The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3 bucket name is <code>my-bucket</code>, and your path prefix is <code>build-log</code>, then acceptable formats are <code>my-bucket/build-log</code> or <code>arn:aws:s3:::my-bucket/build-log</code>. </p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p> Set to true if you do not want your S3 build log output encrypted. By default S3 build logs are encrypted. </p>
    pub fn encryption_disabled(&self) -> std::option::Option<bool> {
        self.encryption_disabled
    }
    /// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note>
    /// <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p>
    /// </note>
    /// <p>This property can be one of the following values:</p>
    /// <dl>
    /// <dt>
    /// NONE
    /// </dt>
    /// <dd>
    /// <p>The bucket owner does not have access to the objects. This is the default.</p>
    /// </dd>
    /// <dt>
    /// READ_ONLY
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p>
    /// </dd>
    /// <dt>
    /// FULL
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p>
    /// <ul>
    /// <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li>
    /// <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li>
    /// </ul>
    /// <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    /// </dd>
    /// </dl>
    pub fn bucket_owner_access(&self) -> std::option::Option<&crate::types::BucketOwnerAccess> {
        self.bucket_owner_access.as_ref()
    }
}
impl S3LogsConfig {
    /// Creates a new builder-style object to manufacture [`S3LogsConfig`](crate::types::S3LogsConfig).
    pub fn builder() -> crate::types::builders::S3LogsConfigBuilder {
        crate::types::builders::S3LogsConfigBuilder::default()
    }
}

/// A builder for [`S3LogsConfig`](crate::types::S3LogsConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3LogsConfigBuilder {
    pub(crate) status: std::option::Option<crate::types::LogsConfigStatusType>,
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) encryption_disabled: std::option::Option<bool>,
    pub(crate) bucket_owner_access: std::option::Option<crate::types::BucketOwnerAccess>,
}
impl S3LogsConfigBuilder {
    /// <p>The current status of the S3 build logs. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code>: S3 build logs are enabled for this build project.</p> </li>
    /// <li> <p> <code>DISABLED</code>: S3 build logs are not enabled for this build project.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::LogsConfigStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the S3 build logs. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code>: S3 build logs are enabled for this build project.</p> </li>
    /// <li> <p> <code>DISABLED</code>: S3 build logs are not enabled for this build project.</p> </li>
    /// </ul>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::LogsConfigStatusType>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p> The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3 bucket name is <code>my-bucket</code>, and your path prefix is <code>build-log</code>, then acceptable formats are <code>my-bucket/build-log</code> or <code>arn:aws:s3:::my-bucket/build-log</code>. </p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p> The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3 bucket name is <code>my-bucket</code>, and your path prefix is <code>build-log</code>, then acceptable formats are <code>my-bucket/build-log</code> or <code>arn:aws:s3:::my-bucket/build-log</code>. </p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p> Set to true if you do not want your S3 build log output encrypted. By default S3 build logs are encrypted. </p>
    pub fn encryption_disabled(mut self, input: bool) -> Self {
        self.encryption_disabled = Some(input);
        self
    }
    /// <p> Set to true if you do not want your S3 build log output encrypted. By default S3 build logs are encrypted. </p>
    pub fn set_encryption_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.encryption_disabled = input;
        self
    }
    /// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note>
    /// <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p>
    /// </note>
    /// <p>This property can be one of the following values:</p>
    /// <dl>
    /// <dt>
    /// NONE
    /// </dt>
    /// <dd>
    /// <p>The bucket owner does not have access to the objects. This is the default.</p>
    /// </dd>
    /// <dt>
    /// READ_ONLY
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p>
    /// </dd>
    /// <dt>
    /// FULL
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p>
    /// <ul>
    /// <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li>
    /// <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li>
    /// </ul>
    /// <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    /// </dd>
    /// </dl>
    pub fn bucket_owner_access(mut self, input: crate::types::BucketOwnerAccess) -> Self {
        self.bucket_owner_access = Some(input);
        self
    }
    /// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note>
    /// <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p>
    /// </note>
    /// <p>This property can be one of the following values:</p>
    /// <dl>
    /// <dt>
    /// NONE
    /// </dt>
    /// <dd>
    /// <p>The bucket owner does not have access to the objects. This is the default.</p>
    /// </dd>
    /// <dt>
    /// READ_ONLY
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p>
    /// </dd>
    /// <dt>
    /// FULL
    /// </dt>
    /// <dd>
    /// <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p>
    /// <ul>
    /// <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li>
    /// <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li>
    /// </ul>
    /// <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    /// </dd>
    /// </dl>
    pub fn set_bucket_owner_access(
        mut self,
        input: std::option::Option<crate::types::BucketOwnerAccess>,
    ) -> Self {
        self.bucket_owner_access = input;
        self
    }
    /// Consumes the builder and constructs a [`S3LogsConfig`](crate::types::S3LogsConfig).
    pub fn build(self) -> crate::types::S3LogsConfig {
        crate::types::S3LogsConfig {
            status: self.status,
            location: self.location,
            encryption_disabled: self.encryption_disabled,
            bucket_owner_access: self.bucket_owner_access,
        }
    }
}
