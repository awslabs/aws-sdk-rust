// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a batch build build group. Build groups are used to combine builds that can run in parallel, while still being able to set dependencies on other build groups.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BuildGroup {
    /// <p>Contains the identifier of the build group.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>An array of strings that contain the identifiers of the build groups that this build group depends on.</p>
    pub depends_on: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies if failures in this build group can be ignored.</p>
    pub ignore_failure: bool,
    /// <p>A <code>BuildSummary</code> object that contains a summary of the current build group.</p>
    pub current_build_summary: ::std::option::Option<crate::types::BuildSummary>,
    /// <p>An array of <code>BuildSummary</code> objects that contain summaries of previous build groups.</p>
    pub prior_build_summary_list: ::std::option::Option<::std::vec::Vec<crate::types::BuildSummary>>,
}
impl BuildGroup {
    /// <p>Contains the identifier of the build group.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>An array of strings that contain the identifiers of the build groups that this build group depends on.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.depends_on.is_none()`.
    pub fn depends_on(&self) -> &[::std::string::String] {
        self.depends_on.as_deref().unwrap_or_default()
    }
    /// <p>Specifies if failures in this build group can be ignored.</p>
    pub fn ignore_failure(&self) -> bool {
        self.ignore_failure
    }
    /// <p>A <code>BuildSummary</code> object that contains a summary of the current build group.</p>
    pub fn current_build_summary(&self) -> ::std::option::Option<&crate::types::BuildSummary> {
        self.current_build_summary.as_ref()
    }
    /// <p>An array of <code>BuildSummary</code> objects that contain summaries of previous build groups.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.prior_build_summary_list.is_none()`.
    pub fn prior_build_summary_list(&self) -> &[crate::types::BuildSummary] {
        self.prior_build_summary_list.as_deref().unwrap_or_default()
    }
}
impl BuildGroup {
    /// Creates a new builder-style object to manufacture [`BuildGroup`](crate::types::BuildGroup).
    pub fn builder() -> crate::types::builders::BuildGroupBuilder {
        crate::types::builders::BuildGroupBuilder::default()
    }
}

/// A builder for [`BuildGroup`](crate::types::BuildGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BuildGroupBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) depends_on: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) ignore_failure: ::std::option::Option<bool>,
    pub(crate) current_build_summary: ::std::option::Option<crate::types::BuildSummary>,
    pub(crate) prior_build_summary_list: ::std::option::Option<::std::vec::Vec<crate::types::BuildSummary>>,
}
impl BuildGroupBuilder {
    /// <p>Contains the identifier of the build group.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the identifier of the build group.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>Contains the identifier of the build group.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// Appends an item to `depends_on`.
    ///
    /// To override the contents of this collection use [`set_depends_on`](Self::set_depends_on).
    ///
    /// <p>An array of strings that contain the identifiers of the build groups that this build group depends on.</p>
    pub fn depends_on(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.depends_on.unwrap_or_default();
        v.push(input.into());
        self.depends_on = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings that contain the identifiers of the build groups that this build group depends on.</p>
    pub fn set_depends_on(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.depends_on = input;
        self
    }
    /// <p>An array of strings that contain the identifiers of the build groups that this build group depends on.</p>
    pub fn get_depends_on(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.depends_on
    }
    /// <p>Specifies if failures in this build group can be ignored.</p>
    pub fn ignore_failure(mut self, input: bool) -> Self {
        self.ignore_failure = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies if failures in this build group can be ignored.</p>
    pub fn set_ignore_failure(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ignore_failure = input;
        self
    }
    /// <p>Specifies if failures in this build group can be ignored.</p>
    pub fn get_ignore_failure(&self) -> &::std::option::Option<bool> {
        &self.ignore_failure
    }
    /// <p>A <code>BuildSummary</code> object that contains a summary of the current build group.</p>
    pub fn current_build_summary(mut self, input: crate::types::BuildSummary) -> Self {
        self.current_build_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>BuildSummary</code> object that contains a summary of the current build group.</p>
    pub fn set_current_build_summary(mut self, input: ::std::option::Option<crate::types::BuildSummary>) -> Self {
        self.current_build_summary = input;
        self
    }
    /// <p>A <code>BuildSummary</code> object that contains a summary of the current build group.</p>
    pub fn get_current_build_summary(&self) -> &::std::option::Option<crate::types::BuildSummary> {
        &self.current_build_summary
    }
    /// Appends an item to `prior_build_summary_list`.
    ///
    /// To override the contents of this collection use [`set_prior_build_summary_list`](Self::set_prior_build_summary_list).
    ///
    /// <p>An array of <code>BuildSummary</code> objects that contain summaries of previous build groups.</p>
    pub fn prior_build_summary_list(mut self, input: crate::types::BuildSummary) -> Self {
        let mut v = self.prior_build_summary_list.unwrap_or_default();
        v.push(input);
        self.prior_build_summary_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>BuildSummary</code> objects that contain summaries of previous build groups.</p>
    pub fn set_prior_build_summary_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BuildSummary>>) -> Self {
        self.prior_build_summary_list = input;
        self
    }
    /// <p>An array of <code>BuildSummary</code> objects that contain summaries of previous build groups.</p>
    pub fn get_prior_build_summary_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BuildSummary>> {
        &self.prior_build_summary_list
    }
    /// Consumes the builder and constructs a [`BuildGroup`](crate::types::BuildGroup).
    pub fn build(self) -> crate::types::BuildGroup {
        crate::types::BuildGroup {
            identifier: self.identifier,
            depends_on: self.depends_on,
            ignore_failure: self.ignore_failure.unwrap_or_default(),
            current_build_summary: self.current_build_summary,
            prior_build_summary_list: self.prior_build_summary_list,
        }
    }
}
