// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains trend statistics for a set of reports. The actual values depend on the type of trend being collected. For more information, see .</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReportGroupTrendStats {
    /// <p>Contains the average of all values analyzed.</p>
    #[doc(hidden)]
    pub average: std::option::Option<std::string::String>,
    /// <p>Contains the maximum value analyzed.</p>
    #[doc(hidden)]
    pub max: std::option::Option<std::string::String>,
    /// <p>Contains the minimum value analyzed.</p>
    #[doc(hidden)]
    pub min: std::option::Option<std::string::String>,
}
impl ReportGroupTrendStats {
    /// <p>Contains the average of all values analyzed.</p>
    pub fn average(&self) -> std::option::Option<&str> {
        self.average.as_deref()
    }
    /// <p>Contains the maximum value analyzed.</p>
    pub fn max(&self) -> std::option::Option<&str> {
        self.max.as_deref()
    }
    /// <p>Contains the minimum value analyzed.</p>
    pub fn min(&self) -> std::option::Option<&str> {
        self.min.as_deref()
    }
}
impl ReportGroupTrendStats {
    /// Creates a new builder-style object to manufacture [`ReportGroupTrendStats`](crate::types::ReportGroupTrendStats).
    pub fn builder() -> crate::types::builders::ReportGroupTrendStatsBuilder {
        crate::types::builders::ReportGroupTrendStatsBuilder::default()
    }
}

/// A builder for [`ReportGroupTrendStats`](crate::types::ReportGroupTrendStats).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReportGroupTrendStatsBuilder {
    pub(crate) average: std::option::Option<std::string::String>,
    pub(crate) max: std::option::Option<std::string::String>,
    pub(crate) min: std::option::Option<std::string::String>,
}
impl ReportGroupTrendStatsBuilder {
    /// <p>Contains the average of all values analyzed.</p>
    pub fn average(mut self, input: impl Into<std::string::String>) -> Self {
        self.average = Some(input.into());
        self
    }
    /// <p>Contains the average of all values analyzed.</p>
    pub fn set_average(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.average = input;
        self
    }
    /// <p>Contains the maximum value analyzed.</p>
    pub fn max(mut self, input: impl Into<std::string::String>) -> Self {
        self.max = Some(input.into());
        self
    }
    /// <p>Contains the maximum value analyzed.</p>
    pub fn set_max(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max = input;
        self
    }
    /// <p>Contains the minimum value analyzed.</p>
    pub fn min(mut self, input: impl Into<std::string::String>) -> Self {
        self.min = Some(input.into());
        self
    }
    /// <p>Contains the minimum value analyzed.</p>
    pub fn set_min(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.min = input;
        self
    }
    /// Consumes the builder and constructs a [`ReportGroupTrendStats`](crate::types::ReportGroupTrendStats).
    pub fn build(self) -> crate::types::ReportGroupTrendStats {
        crate::types::ReportGroupTrendStats {
            average: self.average,
            max: self.max,
            min: self.min,
        }
    }
}
