// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> A filter used to determine which webhooks trigger a build. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebhookFilter {
    /// <p> The type of webhook filter. There are six webhook filter types: <code>EVENT</code>, <code>ACTOR_ACCOUNT_ID</code>, <code>HEAD_REF</code>, <code>BASE_REF</code>, <code>FILE_PATH</code>, and <code>COMMIT_MESSAGE</code>. </p>
    /// <dl>
    /// <dt>
    /// EVENT
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the provided <code>pattern</code> matches one of five event types: <code>PUSH</code>, <code>PULL_REQUEST_CREATED</code>, <code>PULL_REQUEST_UPDATED</code>, <code>PULL_REQUEST_REOPENED</code>, and <code>PULL_REQUEST_MERGED</code>. The <code>EVENT</code> patterns are specified as a comma-separated string. For example, <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> filters all push, pull request created, and pull request updated events. </p> <note>
    /// <p> The <code>PULL_REQUEST_REOPENED</code> works with GitHub and GitHub Enterprise only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// ACTOR_ACCOUNT_ID
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression <code>pattern</code>. </p>
    /// </dd>
    /// <dt>
    /// HEAD_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the head reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code> and <code>refs/tags/tag-name</code>. </p>
    /// <p> Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request, Bitbucket push, and Bitbucket pull request events. </p>
    /// </dd>
    /// <dt>
    /// BASE_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the base reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code>. </p> <note>
    /// <p> Works with pull request events only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// FILE_PATH
    /// </dt>
    /// <dd>
    /// <p> A webhook triggers a build when the path of a changed file matches the regular expression <code>pattern</code>. </p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// COMMIT_MESSAGE
    /// </dt>
    /// <dd>
    /// <p>A webhook triggers a build when the head commit message matches the regular expression <code>pattern</code>.</p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// </dl>
    pub r#type: crate::types::WebhookFilterType,
    /// <p> For a <code>WebHookFilter</code> that uses <code>EVENT</code> type, a comma-separated string that specifies one or more events. For example, the webhook filter <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> allows all push, pull request created, and pull request updated events to trigger a build. </p>
    /// <p> For a <code>WebHookFilter</code> that uses any of the other filter types, a regular expression pattern. For example, a <code>WebHookFilter</code> that uses <code>HEAD_REF</code> for its <code>type</code> and the pattern <code>^refs/heads/</code> triggers a build when the head reference is a branch with a reference name <code>refs/heads/branch-name</code>. </p>
    pub pattern: ::std::string::String,
    /// <p> Used to indicate that the <code>pattern</code> determines which webhook events do not trigger a build. If true, then a webhook event that does not match the <code>pattern</code> triggers a build. If false, then a webhook event that matches the <code>pattern</code> triggers a build. </p>
    pub exclude_matched_pattern: ::std::option::Option<bool>,
}
impl WebhookFilter {
    /// <p> The type of webhook filter. There are six webhook filter types: <code>EVENT</code>, <code>ACTOR_ACCOUNT_ID</code>, <code>HEAD_REF</code>, <code>BASE_REF</code>, <code>FILE_PATH</code>, and <code>COMMIT_MESSAGE</code>. </p>
    /// <dl>
    /// <dt>
    /// EVENT
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the provided <code>pattern</code> matches one of five event types: <code>PUSH</code>, <code>PULL_REQUEST_CREATED</code>, <code>PULL_REQUEST_UPDATED</code>, <code>PULL_REQUEST_REOPENED</code>, and <code>PULL_REQUEST_MERGED</code>. The <code>EVENT</code> patterns are specified as a comma-separated string. For example, <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> filters all push, pull request created, and pull request updated events. </p> <note>
    /// <p> The <code>PULL_REQUEST_REOPENED</code> works with GitHub and GitHub Enterprise only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// ACTOR_ACCOUNT_ID
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression <code>pattern</code>. </p>
    /// </dd>
    /// <dt>
    /// HEAD_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the head reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code> and <code>refs/tags/tag-name</code>. </p>
    /// <p> Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request, Bitbucket push, and Bitbucket pull request events. </p>
    /// </dd>
    /// <dt>
    /// BASE_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the base reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code>. </p> <note>
    /// <p> Works with pull request events only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// FILE_PATH
    /// </dt>
    /// <dd>
    /// <p> A webhook triggers a build when the path of a changed file matches the regular expression <code>pattern</code>. </p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// COMMIT_MESSAGE
    /// </dt>
    /// <dd>
    /// <p>A webhook triggers a build when the head commit message matches the regular expression <code>pattern</code>.</p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// </dl>
    pub fn r#type(&self) -> &crate::types::WebhookFilterType {
        &self.r#type
    }
    /// <p> For a <code>WebHookFilter</code> that uses <code>EVENT</code> type, a comma-separated string that specifies one or more events. For example, the webhook filter <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> allows all push, pull request created, and pull request updated events to trigger a build. </p>
    /// <p> For a <code>WebHookFilter</code> that uses any of the other filter types, a regular expression pattern. For example, a <code>WebHookFilter</code> that uses <code>HEAD_REF</code> for its <code>type</code> and the pattern <code>^refs/heads/</code> triggers a build when the head reference is a branch with a reference name <code>refs/heads/branch-name</code>. </p>
    pub fn pattern(&self) -> &str {
        use std::ops::Deref;
        self.pattern.deref()
    }
    /// <p> Used to indicate that the <code>pattern</code> determines which webhook events do not trigger a build. If true, then a webhook event that does not match the <code>pattern</code> triggers a build. If false, then a webhook event that matches the <code>pattern</code> triggers a build. </p>
    pub fn exclude_matched_pattern(&self) -> ::std::option::Option<bool> {
        self.exclude_matched_pattern
    }
}
impl WebhookFilter {
    /// Creates a new builder-style object to manufacture [`WebhookFilter`](crate::types::WebhookFilter).
    pub fn builder() -> crate::types::builders::WebhookFilterBuilder {
        crate::types::builders::WebhookFilterBuilder::default()
    }
}

/// A builder for [`WebhookFilter`](crate::types::WebhookFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WebhookFilterBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::WebhookFilterType>,
    pub(crate) pattern: ::std::option::Option<::std::string::String>,
    pub(crate) exclude_matched_pattern: ::std::option::Option<bool>,
}
impl WebhookFilterBuilder {
    /// <p> The type of webhook filter. There are six webhook filter types: <code>EVENT</code>, <code>ACTOR_ACCOUNT_ID</code>, <code>HEAD_REF</code>, <code>BASE_REF</code>, <code>FILE_PATH</code>, and <code>COMMIT_MESSAGE</code>. </p>
    /// <dl>
    /// <dt>
    /// EVENT
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the provided <code>pattern</code> matches one of five event types: <code>PUSH</code>, <code>PULL_REQUEST_CREATED</code>, <code>PULL_REQUEST_UPDATED</code>, <code>PULL_REQUEST_REOPENED</code>, and <code>PULL_REQUEST_MERGED</code>. The <code>EVENT</code> patterns are specified as a comma-separated string. For example, <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> filters all push, pull request created, and pull request updated events. </p> <note>
    /// <p> The <code>PULL_REQUEST_REOPENED</code> works with GitHub and GitHub Enterprise only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// ACTOR_ACCOUNT_ID
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression <code>pattern</code>. </p>
    /// </dd>
    /// <dt>
    /// HEAD_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the head reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code> and <code>refs/tags/tag-name</code>. </p>
    /// <p> Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request, Bitbucket push, and Bitbucket pull request events. </p>
    /// </dd>
    /// <dt>
    /// BASE_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the base reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code>. </p> <note>
    /// <p> Works with pull request events only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// FILE_PATH
    /// </dt>
    /// <dd>
    /// <p> A webhook triggers a build when the path of a changed file matches the regular expression <code>pattern</code>. </p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// COMMIT_MESSAGE
    /// </dt>
    /// <dd>
    /// <p>A webhook triggers a build when the head commit message matches the regular expression <code>pattern</code>.</p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// </dl>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::WebhookFilterType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The type of webhook filter. There are six webhook filter types: <code>EVENT</code>, <code>ACTOR_ACCOUNT_ID</code>, <code>HEAD_REF</code>, <code>BASE_REF</code>, <code>FILE_PATH</code>, and <code>COMMIT_MESSAGE</code>. </p>
    /// <dl>
    /// <dt>
    /// EVENT
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the provided <code>pattern</code> matches one of five event types: <code>PUSH</code>, <code>PULL_REQUEST_CREATED</code>, <code>PULL_REQUEST_UPDATED</code>, <code>PULL_REQUEST_REOPENED</code>, and <code>PULL_REQUEST_MERGED</code>. The <code>EVENT</code> patterns are specified as a comma-separated string. For example, <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> filters all push, pull request created, and pull request updated events. </p> <note>
    /// <p> The <code>PULL_REQUEST_REOPENED</code> works with GitHub and GitHub Enterprise only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// ACTOR_ACCOUNT_ID
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression <code>pattern</code>. </p>
    /// </dd>
    /// <dt>
    /// HEAD_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the head reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code> and <code>refs/tags/tag-name</code>. </p>
    /// <p> Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request, Bitbucket push, and Bitbucket pull request events. </p>
    /// </dd>
    /// <dt>
    /// BASE_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the base reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code>. </p> <note>
    /// <p> Works with pull request events only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// FILE_PATH
    /// </dt>
    /// <dd>
    /// <p> A webhook triggers a build when the path of a changed file matches the regular expression <code>pattern</code>. </p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// COMMIT_MESSAGE
    /// </dt>
    /// <dd>
    /// <p>A webhook triggers a build when the head commit message matches the regular expression <code>pattern</code>.</p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// </dl>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::WebhookFilterType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p> The type of webhook filter. There are six webhook filter types: <code>EVENT</code>, <code>ACTOR_ACCOUNT_ID</code>, <code>HEAD_REF</code>, <code>BASE_REF</code>, <code>FILE_PATH</code>, and <code>COMMIT_MESSAGE</code>. </p>
    /// <dl>
    /// <dt>
    /// EVENT
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the provided <code>pattern</code> matches one of five event types: <code>PUSH</code>, <code>PULL_REQUEST_CREATED</code>, <code>PULL_REQUEST_UPDATED</code>, <code>PULL_REQUEST_REOPENED</code>, and <code>PULL_REQUEST_MERGED</code>. The <code>EVENT</code> patterns are specified as a comma-separated string. For example, <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> filters all push, pull request created, and pull request updated events. </p> <note>
    /// <p> The <code>PULL_REQUEST_REOPENED</code> works with GitHub and GitHub Enterprise only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// ACTOR_ACCOUNT_ID
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression <code>pattern</code>. </p>
    /// </dd>
    /// <dt>
    /// HEAD_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the head reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code> and <code>refs/tags/tag-name</code>. </p>
    /// <p> Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request, Bitbucket push, and Bitbucket pull request events. </p>
    /// </dd>
    /// <dt>
    /// BASE_REF
    /// </dt>
    /// <dd>
    /// <p> A webhook event triggers a build when the base reference matches the regular expression <code>pattern</code>. For example, <code>refs/heads/branch-name</code>. </p> <note>
    /// <p> Works with pull request events only. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// FILE_PATH
    /// </dt>
    /// <dd>
    /// <p> A webhook triggers a build when the path of a changed file matches the regular expression <code>pattern</code>. </p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// <dt>
    /// COMMIT_MESSAGE
    /// </dt>
    /// <dd>
    /// <p>A webhook triggers a build when the head commit message matches the regular expression <code>pattern</code>.</p> <note>
    /// <p> Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events. </p>
    /// </note>
    /// </dd>
    /// </dl>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::WebhookFilterType> {
        &self.r#type
    }
    /// <p> For a <code>WebHookFilter</code> that uses <code>EVENT</code> type, a comma-separated string that specifies one or more events. For example, the webhook filter <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> allows all push, pull request created, and pull request updated events to trigger a build. </p>
    /// <p> For a <code>WebHookFilter</code> that uses any of the other filter types, a regular expression pattern. For example, a <code>WebHookFilter</code> that uses <code>HEAD_REF</code> for its <code>type</code> and the pattern <code>^refs/heads/</code> triggers a build when the head reference is a branch with a reference name <code>refs/heads/branch-name</code>. </p>
    /// This field is required.
    pub fn pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> For a <code>WebHookFilter</code> that uses <code>EVENT</code> type, a comma-separated string that specifies one or more events. For example, the webhook filter <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> allows all push, pull request created, and pull request updated events to trigger a build. </p>
    /// <p> For a <code>WebHookFilter</code> that uses any of the other filter types, a regular expression pattern. For example, a <code>WebHookFilter</code> that uses <code>HEAD_REF</code> for its <code>type</code> and the pattern <code>^refs/heads/</code> triggers a build when the head reference is a branch with a reference name <code>refs/heads/branch-name</code>. </p>
    pub fn set_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pattern = input;
        self
    }
    /// <p> For a <code>WebHookFilter</code> that uses <code>EVENT</code> type, a comma-separated string that specifies one or more events. For example, the webhook filter <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> allows all push, pull request created, and pull request updated events to trigger a build. </p>
    /// <p> For a <code>WebHookFilter</code> that uses any of the other filter types, a regular expression pattern. For example, a <code>WebHookFilter</code> that uses <code>HEAD_REF</code> for its <code>type</code> and the pattern <code>^refs/heads/</code> triggers a build when the head reference is a branch with a reference name <code>refs/heads/branch-name</code>. </p>
    pub fn get_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.pattern
    }
    /// <p> Used to indicate that the <code>pattern</code> determines which webhook events do not trigger a build. If true, then a webhook event that does not match the <code>pattern</code> triggers a build. If false, then a webhook event that matches the <code>pattern</code> triggers a build. </p>
    pub fn exclude_matched_pattern(mut self, input: bool) -> Self {
        self.exclude_matched_pattern = ::std::option::Option::Some(input);
        self
    }
    /// <p> Used to indicate that the <code>pattern</code> determines which webhook events do not trigger a build. If true, then a webhook event that does not match the <code>pattern</code> triggers a build. If false, then a webhook event that matches the <code>pattern</code> triggers a build. </p>
    pub fn set_exclude_matched_pattern(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exclude_matched_pattern = input;
        self
    }
    /// <p> Used to indicate that the <code>pattern</code> determines which webhook events do not trigger a build. If true, then a webhook event that does not match the <code>pattern</code> triggers a build. If false, then a webhook event that matches the <code>pattern</code> triggers a build. </p>
    pub fn get_exclude_matched_pattern(&self) -> &::std::option::Option<bool> {
        &self.exclude_matched_pattern
    }
    /// Consumes the builder and constructs a [`WebhookFilter`](crate::types::WebhookFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::WebhookFilterBuilder::r#type)
    /// - [`pattern`](crate::types::builders::WebhookFilterBuilder::pattern)
    pub fn build(self) -> ::std::result::Result<crate::types::WebhookFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WebhookFilter {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building WebhookFilter",
                )
            })?,
            pattern: self.pattern.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pattern",
                    "pattern was not specified but it is required when building WebhookFilter",
                )
            })?,
            exclude_matched_pattern: self.exclude_matched_pattern,
        })
    }
}
