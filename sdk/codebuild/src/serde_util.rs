// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn project_artifacts_correct_errors(
    mut builder: crate::types::builders::ProjectArtifactsBuilder,
) -> crate::types::builders::ProjectArtifactsBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ArtifactsType>().ok()
    }
    builder
}

pub(crate) fn project_cache_correct_errors(mut builder: crate::types::builders::ProjectCacheBuilder) -> crate::types::builders::ProjectCacheBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CacheType>().ok()
    }
    builder
}

pub(crate) fn project_environment_correct_errors(
    mut builder: crate::types::builders::ProjectEnvironmentBuilder,
) -> crate::types::builders::ProjectEnvironmentBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EnvironmentType>().ok()
    }
    if builder.image.is_none() {
        builder.image = Some(Default::default())
    }
    if builder.compute_type.is_none() {
        builder.compute_type = "no value was set".parse::<crate::types::ComputeType>().ok()
    }
    builder
}

pub(crate) fn project_source_correct_errors(
    mut builder: crate::types::builders::ProjectSourceBuilder,
) -> crate::types::builders::ProjectSourceBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SourceType>().ok()
    }
    builder
}

pub(crate) fn cloud_watch_logs_config_correct_errors(
    mut builder: crate::types::builders::CloudWatchLogsConfigBuilder,
) -> crate::types::builders::CloudWatchLogsConfigBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LogsConfigStatusType>().ok()
    }
    builder
}

pub(crate) fn git_submodules_config_correct_errors(
    mut builder: crate::types::builders::GitSubmodulesConfigBuilder,
) -> crate::types::builders::GitSubmodulesConfigBuilder {
    if builder.fetch_submodules.is_none() {
        builder.fetch_submodules = Some(Default::default())
    }
    builder
}

pub(crate) fn project_source_version_correct_errors(
    mut builder: crate::types::builders::ProjectSourceVersionBuilder,
) -> crate::types::builders::ProjectSourceVersionBuilder {
    if builder.source_identifier.is_none() {
        builder.source_identifier = Some(Default::default())
    }
    if builder.source_version.is_none() {
        builder.source_version = Some(Default::default())
    }
    builder
}

pub(crate) fn registry_credential_correct_errors(
    mut builder: crate::types::builders::RegistryCredentialBuilder,
) -> crate::types::builders::RegistryCredentialBuilder {
    if builder.credential.is_none() {
        builder.credential = Some(Default::default())
    }
    if builder.credential_provider.is_none() {
        builder.credential_provider = "no value was set".parse::<crate::types::CredentialProviderType>().ok()
    }
    builder
}

pub(crate) fn s3_logs_config_correct_errors(mut builder: crate::types::builders::S3LogsConfigBuilder) -> crate::types::builders::S3LogsConfigBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LogsConfigStatusType>().ok()
    }
    builder
}

pub(crate) fn source_auth_correct_errors(mut builder: crate::types::builders::SourceAuthBuilder) -> crate::types::builders::SourceAuthBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SourceAuthType>().ok()
    }
    builder
}

pub(crate) fn test_report_summary_correct_errors(
    mut builder: crate::types::builders::TestReportSummaryBuilder,
) -> crate::types::builders::TestReportSummaryBuilder {
    if builder.total.is_none() {
        builder.total = Some(Default::default())
    }
    if builder.status_counts.is_none() {
        builder.status_counts = Some(Default::default())
    }
    if builder.duration_in_nano_seconds.is_none() {
        builder.duration_in_nano_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_variable_correct_errors(
    mut builder: crate::types::builders::EnvironmentVariableBuilder,
) -> crate::types::builders::EnvironmentVariableBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn webhook_filter_correct_errors(
    mut builder: crate::types::builders::WebhookFilterBuilder,
) -> crate::types::builders::WebhookFilterBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::WebhookFilterType>().ok()
    }
    if builder.pattern.is_none() {
        builder.pattern = Some(Default::default())
    }
    builder
}
