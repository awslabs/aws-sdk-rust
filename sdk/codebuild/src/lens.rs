// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_code_coverages_output_next_token(
    input: &crate::output::DescribeCodeCoveragesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_test_cases_output_next_token(
    input: &crate::output::DescribeTestCasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_build_batches_output_next_token(
    input: &crate::output::ListBuildBatchesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_build_batches_for_project_output_next_token(
    input: &crate::output::ListBuildBatchesForProjectOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_builds_output_next_token(
    input: &crate::output::ListBuildsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_builds_for_project_output_next_token(
    input: &crate::output::ListBuildsForProjectOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_projects_output_next_token(
    input: &crate::output::ListProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_report_groups_output_next_token(
    input: &crate::output::ListReportGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_reports_output_next_token(
    input: &crate::output::ListReportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_reports_for_report_group_output_next_token(
    input: &crate::output::ListReportsForReportGroupOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_shared_projects_output_next_token(
    input: &crate::output::ListSharedProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_shared_report_groups_output_next_token(
    input: &crate::output::ListSharedReportGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_code_coverages_output_code_coverages(
    input: crate::output::DescribeCodeCoveragesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CodeCoverage>> {
    let input = match input.code_coverages {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_test_cases_output_test_cases(
    input: crate::output::DescribeTestCasesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TestCase>> {
    let input = match input.test_cases {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_build_batches_output_ids(
    input: crate::output::ListBuildBatchesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_build_batches_for_project_output_ids(
    input: crate::output::ListBuildBatchesForProjectOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_builds_output_ids(
    input: crate::output::ListBuildsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_builds_for_project_output_ids(
    input: crate::output::ListBuildsForProjectOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_projects_output_projects(
    input: crate::output::ListProjectsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.projects {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_report_groups_output_report_groups(
    input: crate::output::ListReportGroupsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.report_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_reports_output_reports(
    input: crate::output::ListReportsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.reports {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_reports_for_report_group_output_reports(
    input: crate::output::ListReportsForReportGroupOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.reports {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_shared_projects_output_projects(
    input: crate::output::ListSharedProjectsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.projects {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_shared_report_groups_output_report_groups(
    input: crate::output::ListSharedReportGroupsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.report_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
