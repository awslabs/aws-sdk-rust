// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have authorization to perform the requested action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>You can apply up to 10 custom attributes for each resource. You can view the attributes of a resource with <code>ListAttributes</code>. You can remove existing attributes on a resource with <code>DeleteAttributes</code>.</p>
    AttributeLimitExceededException(crate::error::AttributeLimitExceededException),
    /// <p>Your Amazon Web Services account was blocked. For more information, contact <a href="http://aws.amazon.com/contact-us/"> Amazon Web Services Support</a>.</p>
    BlockedException(crate::error::BlockedException),
    /// <p>These errors are usually caused by a client action. This client action might be using an action or resource on behalf of a user that doesn't have permissions to use the action or resource,. Or, it might be specifying an identifier that isn't valid.</p>
    ClientException(crate::error::ClientException),
    /// <p>You can't delete a cluster that has registered container instances. First, deregister the container instances before you can delete the cluster. For more information, see <code>DeregisterContainerInstance</code>.</p>
    ClusterContainsContainerInstancesException(
        crate::error::ClusterContainsContainerInstancesException,
    ),
    /// <p>You can't delete a cluster that contains services. First, update the service to reduce its desired task count to 0, and then delete the service. For more information, see <code>UpdateService</code> and <code>DeleteService</code>.</p>
    ClusterContainsServicesException(crate::error::ClusterContainsServicesException),
    /// <p>You can't delete a cluster that has active tasks.</p>
    ClusterContainsTasksException(crate::error::ClusterContainsTasksException),
    /// <p>The specified cluster wasn't found. You can view your available clusters with <code>ListClusters</code>. Amazon ECS clusters are Region specific.</p>
    ClusterNotFoundException(crate::error::ClusterNotFoundException),
    /// <p>The specified parameter isn't valid. Review the available parameters for the API request.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>The limit for the resource was exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>Amazon ECS can't determine the current version of the Amazon ECS container agent on the container instance and doesn't have enough information to proceed with an update. This could be because the agent running on the container instance is a previous or custom version that doesn't use our version information.</p>
    MissingVersionException(crate::error::MissingVersionException),
    /// <p>The specified namespace wasn't found.</p>
    NamespaceNotFoundException(crate::error::NamespaceNotFoundException),
    /// <p>There's no update available for this Amazon ECS container agent. This might be because the agent is already running the latest version or because it's so old that there's no update path to the current version.</p>
    NoUpdateAvailableException(crate::error::NoUpdateAvailableException),
    /// <p>The specified platform version doesn't satisfy the required capabilities of the task definition.</p>
    PlatformTaskDefinitionIncompatibilityException(
        crate::error::PlatformTaskDefinitionIncompatibilityException,
    ),
    /// <p>The specified platform version doesn't exist.</p>
    PlatformUnknownException(crate::error::PlatformUnknownException),
    /// <p>The specified resource is in-use and can't be removed.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The specified resource wasn't found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>These errors are usually caused by a server issue.</p>
    ServerException(crate::error::ServerException),
    /// <p>The specified service isn't active. You can't update a service that's inactive. If you have previously deleted a service, you can re-create it with <code>CreateService</code>.</p>
    ServiceNotActiveException(crate::error::ServiceNotActiveException),
    /// <p>The specified service wasn't found. You can view your available services with <code>ListServices</code>. Amazon ECS services are cluster specific and Region specific.</p>
    ServiceNotFoundException(crate::error::ServiceNotFoundException),
    /// <p>The execute command cannot run. This error can be caused by any of the following configuration issues:</p>
    /// <ul>
    /// <li> <p>Incorrect IAM permissions</p> </li>
    /// <li> <p>The SSM agent is not installed or is not running</p> </li>
    /// <li> <p> There is an interface Amazon VPC endpoint for Amazon ECS, but there is not one for for Systems Manager Session Manager</p> </li>
    /// </ul>
    /// <p>For information about how to troubleshoot the issues, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html">Troubleshooting issues with ECS Exec</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    TargetNotConnectedException(crate::error::TargetNotConnectedException),
    /// <p>The specified target wasn't found. You can view your available container instances with <code>ListContainerInstances</code>. Amazon ECS container instances are cluster-specific and Region-specific.</p>
    TargetNotFoundException(crate::error::TargetNotFoundException),
    /// <p>The specified task set wasn't found. You can view your available task sets with <code>DescribeTaskSets</code>. Task sets are specific to each cluster, service and Region.</p>
    TaskSetNotFoundException(crate::error::TaskSetNotFoundException),
    /// <p>The specified task isn't supported in this Region.</p>
    UnsupportedFeatureException(crate::error::UnsupportedFeatureException),
    /// <p>There's already a current Amazon ECS container agent update in progress on the container instance that's specified. If the container agent becomes disconnected while it's in a transitional stage, such as <code>PENDING</code> or <code>STAGING</code>, the update process can get stuck in that state. However, when the agent reconnects, it resumes where it stopped previously.</p>
    UpdateInProgressException(crate::error::UpdateInProgressException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AttributeLimitExceededException(inner) => inner.fmt(f),
            Error::BlockedException(inner) => inner.fmt(f),
            Error::ClientException(inner) => inner.fmt(f),
            Error::ClusterContainsContainerInstancesException(inner) => inner.fmt(f),
            Error::ClusterContainsServicesException(inner) => inner.fmt(f),
            Error::ClusterContainsTasksException(inner) => inner.fmt(f),
            Error::ClusterNotFoundException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MissingVersionException(inner) => inner.fmt(f),
            Error::NamespaceNotFoundException(inner) => inner.fmt(f),
            Error::NoUpdateAvailableException(inner) => inner.fmt(f),
            Error::PlatformTaskDefinitionIncompatibilityException(inner) => inner.fmt(f),
            Error::PlatformUnknownException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServerException(inner) => inner.fmt(f),
            Error::ServiceNotActiveException(inner) => inner.fmt(f),
            Error::ServiceNotFoundException(inner) => inner.fmt(f),
            Error::TargetNotConnectedException(inner) => inner.fmt(f),
            Error::TargetNotFoundException(inner) => inner.fmt(f),
            Error::TaskSetNotFoundException(inner) => inner.fmt(f),
            Error::UnsupportedFeatureException(inner) => inner.fmt(f),
            Error::UpdateInProgressException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCapacityProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCapacityProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCapacityProviderError> for Error {
    fn from(err: crate::error::CreateCapacityProviderError) -> Self {
        match err {
            crate::error::CreateCapacityProviderError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::CreateCapacityProviderError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateCapacityProviderError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateCapacityProviderError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::CreateCapacityProviderError::UpdateInProgressException(inner) => {
                Error::UpdateInProgressException(inner)
            }
            crate::error::CreateCapacityProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateClusterError> for Error {
    fn from(err: crate::error::CreateClusterError) -> Self {
        match err {
            crate::error::CreateClusterError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::CreateClusterError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateClusterError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::CreateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateServiceError> for Error {
    fn from(err: crate::error::CreateServiceError) -> Self {
        match err {
            crate::error::CreateServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateServiceError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::CreateServiceError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::CreateServiceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateServiceError::NamespaceNotFoundException(inner) => {
                Error::NamespaceNotFoundException(inner)
            }
            crate::error::CreateServiceError::PlatformTaskDefinitionIncompatibilityException(
                inner,
            ) => Error::PlatformTaskDefinitionIncompatibilityException(inner),
            crate::error::CreateServiceError::PlatformUnknownException(inner) => {
                Error::PlatformUnknownException(inner)
            }
            crate::error::CreateServiceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::CreateServiceError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::CreateServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTaskSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTaskSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTaskSetError> for Error {
    fn from(err: crate::error::CreateTaskSetError) -> Self {
        match err {
            crate::error::CreateTaskSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateTaskSetError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::CreateTaskSetError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::CreateTaskSetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateTaskSetError::NamespaceNotFoundException(inner) => {
                Error::NamespaceNotFoundException(inner)
            }
            crate::error::CreateTaskSetError::PlatformTaskDefinitionIncompatibilityException(
                inner,
            ) => Error::PlatformTaskDefinitionIncompatibilityException(inner),
            crate::error::CreateTaskSetError::PlatformUnknownException(inner) => {
                Error::PlatformUnknownException(inner)
            }
            crate::error::CreateTaskSetError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::CreateTaskSetError::ServiceNotActiveException(inner) => {
                Error::ServiceNotActiveException(inner)
            }
            crate::error::CreateTaskSetError::ServiceNotFoundException(inner) => {
                Error::ServiceNotFoundException(inner)
            }
            crate::error::CreateTaskSetError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::CreateTaskSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccountSettingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAccountSettingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccountSettingError> for Error {
    fn from(err: crate::error::DeleteAccountSettingError) -> Self {
        match err {
            crate::error::DeleteAccountSettingError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteAccountSettingError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteAccountSettingError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DeleteAccountSettingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAttributesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAttributesError> for Error {
    fn from(err: crate::error::DeleteAttributesError) -> Self {
        match err {
            crate::error::DeleteAttributesError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::DeleteAttributesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteAttributesError::TargetNotFoundException(inner) => {
                Error::TargetNotFoundException(inner)
            }
            crate::error::DeleteAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCapacityProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCapacityProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCapacityProviderError> for Error {
    fn from(err: crate::error::DeleteCapacityProviderError) -> Self {
        match err {
            crate::error::DeleteCapacityProviderError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteCapacityProviderError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteCapacityProviderError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DeleteCapacityProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteClusterError> for Error {
    fn from(err: crate::error::DeleteClusterError) -> Self {
        match err {
            crate::error::DeleteClusterError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteClusterError::ClusterContainsContainerInstancesException(inner) => {
                Error::ClusterContainsContainerInstancesException(inner)
            }
            crate::error::DeleteClusterError::ClusterContainsServicesException(inner) => {
                Error::ClusterContainsServicesException(inner)
            }
            crate::error::DeleteClusterError::ClusterContainsTasksException(inner) => {
                Error::ClusterContainsTasksException(inner)
            }
            crate::error::DeleteClusterError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::DeleteClusterError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteClusterError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DeleteClusterError::UpdateInProgressException(inner) => {
                Error::UpdateInProgressException(inner)
            }
            crate::error::DeleteClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteServiceError> for Error {
    fn from(err: crate::error::DeleteServiceError) -> Self {
        match err {
            crate::error::DeleteServiceError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteServiceError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::DeleteServiceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteServiceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DeleteServiceError::ServiceNotFoundException(inner) => {
                Error::ServiceNotFoundException(inner)
            }
            crate::error::DeleteServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTaskSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTaskSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTaskSetError> for Error {
    fn from(err: crate::error::DeleteTaskSetError) -> Self {
        match err {
            crate::error::DeleteTaskSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteTaskSetError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteTaskSetError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::DeleteTaskSetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteTaskSetError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DeleteTaskSetError::ServiceNotActiveException(inner) => {
                Error::ServiceNotActiveException(inner)
            }
            crate::error::DeleteTaskSetError::ServiceNotFoundException(inner) => {
                Error::ServiceNotFoundException(inner)
            }
            crate::error::DeleteTaskSetError::TaskSetNotFoundException(inner) => {
                Error::TaskSetNotFoundException(inner)
            }
            crate::error::DeleteTaskSetError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::DeleteTaskSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterContainerInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterContainerInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterContainerInstanceError> for Error {
    fn from(err: crate::error::DeregisterContainerInstanceError) -> Self {
        match err {
            crate::error::DeregisterContainerInstanceError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeregisterContainerInstanceError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::DeregisterContainerInstanceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeregisterContainerInstanceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DeregisterContainerInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterTaskDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterTaskDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterTaskDefinitionError> for Error {
    fn from(err: crate::error::DeregisterTaskDefinitionError) -> Self {
        match err {
            crate::error::DeregisterTaskDefinitionError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeregisterTaskDefinitionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeregisterTaskDefinitionError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DeregisterTaskDefinitionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCapacityProvidersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCapacityProvidersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCapacityProvidersError> for Error {
    fn from(err: crate::error::DescribeCapacityProvidersError) -> Self {
        match err {
            crate::error::DescribeCapacityProvidersError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DescribeCapacityProvidersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeCapacityProvidersError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeCapacityProvidersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeClustersError> for Error {
    fn from(err: crate::error::DescribeClustersError) -> Self {
        match err {
            crate::error::DescribeClustersError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DescribeClustersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeClustersError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeContainerInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeContainerInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeContainerInstancesError> for Error {
    fn from(err: crate::error::DescribeContainerInstancesError) -> Self {
        match err {
            crate::error::DescribeContainerInstancesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DescribeContainerInstancesError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::DescribeContainerInstancesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeContainerInstancesError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeContainerInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeServicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeServicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeServicesError> for Error {
    fn from(err: crate::error::DescribeServicesError) -> Self {
        match err {
            crate::error::DescribeServicesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DescribeServicesError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::DescribeServicesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeServicesError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeServicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTaskDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTaskDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTaskDefinitionError> for Error {
    fn from(err: crate::error::DescribeTaskDefinitionError) -> Self {
        match err {
            crate::error::DescribeTaskDefinitionError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DescribeTaskDefinitionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeTaskDefinitionError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeTaskDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeTasksError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTasksError> for Error {
    fn from(err: crate::error::DescribeTasksError) -> Self {
        match err {
            crate::error::DescribeTasksError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DescribeTasksError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::DescribeTasksError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeTasksError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTaskSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTaskSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTaskSetsError> for Error {
    fn from(err: crate::error::DescribeTaskSetsError) -> Self {
        match err {
            crate::error::DescribeTaskSetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeTaskSetsError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DescribeTaskSetsError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::DescribeTaskSetsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeTaskSetsError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeTaskSetsError::ServiceNotActiveException(inner) => {
                Error::ServiceNotActiveException(inner)
            }
            crate::error::DescribeTaskSetsError::ServiceNotFoundException(inner) => {
                Error::ServiceNotFoundException(inner)
            }
            crate::error::DescribeTaskSetsError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::DescribeTaskSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DiscoverPollEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DiscoverPollEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DiscoverPollEndpointError> for Error {
    fn from(err: crate::error::DiscoverPollEndpointError) -> Self {
        match err {
            crate::error::DiscoverPollEndpointError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DiscoverPollEndpointError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DiscoverPollEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExecuteCommandError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ExecuteCommandError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExecuteCommandError> for Error {
    fn from(err: crate::error::ExecuteCommandError) -> Self {
        match err {
            crate::error::ExecuteCommandError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ExecuteCommandError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ExecuteCommandError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::ExecuteCommandError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ExecuteCommandError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ExecuteCommandError::TargetNotConnectedException(inner) => {
                Error::TargetNotConnectedException(inner)
            }
            crate::error::ExecuteCommandError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTaskProtectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetTaskProtectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTaskProtectionError> for Error {
    fn from(err: crate::error::GetTaskProtectionError) -> Self {
        match err {
            crate::error::GetTaskProtectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetTaskProtectionError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::GetTaskProtectionError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::GetTaskProtectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetTaskProtectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetTaskProtectionError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::GetTaskProtectionError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::GetTaskProtectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAccountSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccountSettingsError> for Error {
    fn from(err: crate::error::ListAccountSettingsError) -> Self {
        match err {
            crate::error::ListAccountSettingsError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListAccountSettingsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListAccountSettingsError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ListAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAttributesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAttributesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAttributesError> for Error {
    fn from(err: crate::error::ListAttributesError) -> Self {
        match err {
            crate::error::ListAttributesError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::ListAttributesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListClustersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListClustersError> for Error {
    fn from(err: crate::error::ListClustersError) -> Self {
        match err {
            crate::error::ListClustersError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListClustersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListClustersError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ListClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListContainerInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListContainerInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListContainerInstancesError> for Error {
    fn from(err: crate::error::ListContainerInstancesError) -> Self {
        match err {
            crate::error::ListContainerInstancesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListContainerInstancesError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::ListContainerInstancesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListContainerInstancesError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ListContainerInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListServicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServicesError> for Error {
    fn from(err: crate::error::ListServicesError) -> Self {
        match err {
            crate::error::ListServicesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListServicesError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::ListServicesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListServicesError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ListServicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServicesByNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListServicesByNamespaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServicesByNamespaceError> for Error {
    fn from(err: crate::error::ListServicesByNamespaceError) -> Self {
        match err {
            crate::error::ListServicesByNamespaceError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListServicesByNamespaceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListServicesByNamespaceError::NamespaceNotFoundException(inner) => {
                Error::NamespaceNotFoundException(inner)
            }
            crate::error::ListServicesByNamespaceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ListServicesByNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListTagsForResourceError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTagsForResourceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTaskDefinitionFamiliesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTaskDefinitionFamiliesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTaskDefinitionFamiliesError> for Error {
    fn from(err: crate::error::ListTaskDefinitionFamiliesError) -> Self {
        match err {
            crate::error::ListTaskDefinitionFamiliesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListTaskDefinitionFamiliesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTaskDefinitionFamiliesError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ListTaskDefinitionFamiliesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTaskDefinitionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTaskDefinitionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTaskDefinitionsError> for Error {
    fn from(err: crate::error::ListTaskDefinitionsError) -> Self {
        match err {
            crate::error::ListTaskDefinitionsError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListTaskDefinitionsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTaskDefinitionsError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ListTaskDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTasksError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTasksError> for Error {
    fn from(err: crate::error::ListTasksError) -> Self {
        match err {
            crate::error::ListTasksError::ClientException(inner) => Error::ClientException(inner),
            crate::error::ListTasksError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::ListTasksError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTasksError::ServerException(inner) => Error::ServerException(inner),
            crate::error::ListTasksError::ServiceNotFoundException(inner) => {
                Error::ServiceNotFoundException(inner)
            }
            crate::error::ListTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAccountSettingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutAccountSettingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAccountSettingError> for Error {
    fn from(err: crate::error::PutAccountSettingError) -> Self {
        match err {
            crate::error::PutAccountSettingError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::PutAccountSettingError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutAccountSettingError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::PutAccountSettingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAccountSettingDefaultError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutAccountSettingDefaultError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAccountSettingDefaultError> for Error {
    fn from(err: crate::error::PutAccountSettingDefaultError) -> Self {
        match err {
            crate::error::PutAccountSettingDefaultError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::PutAccountSettingDefaultError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutAccountSettingDefaultError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::PutAccountSettingDefaultError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAttributesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutAttributesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAttributesError> for Error {
    fn from(err: crate::error::PutAttributesError) -> Self {
        match err {
            crate::error::PutAttributesError::AttributeLimitExceededException(inner) => {
                Error::AttributeLimitExceededException(inner)
            }
            crate::error::PutAttributesError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::PutAttributesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutAttributesError::TargetNotFoundException(inner) => {
                Error::TargetNotFoundException(inner)
            }
            crate::error::PutAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutClusterCapacityProvidersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutClusterCapacityProvidersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutClusterCapacityProvidersError> for Error {
    fn from(err: crate::error::PutClusterCapacityProvidersError) -> Self {
        match err {
            crate::error::PutClusterCapacityProvidersError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::PutClusterCapacityProvidersError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::PutClusterCapacityProvidersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutClusterCapacityProvidersError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::PutClusterCapacityProvidersError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::PutClusterCapacityProvidersError::UpdateInProgressException(inner) => {
                Error::UpdateInProgressException(inner)
            }
            crate::error::PutClusterCapacityProvidersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterContainerInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterContainerInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterContainerInstanceError> for Error {
    fn from(err: crate::error::RegisterContainerInstanceError) -> Self {
        match err {
            crate::error::RegisterContainerInstanceError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::RegisterContainerInstanceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RegisterContainerInstanceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::RegisterContainerInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterTaskDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterTaskDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterTaskDefinitionError> for Error {
    fn from(err: crate::error::RegisterTaskDefinitionError) -> Self {
        match err {
            crate::error::RegisterTaskDefinitionError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::RegisterTaskDefinitionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RegisterTaskDefinitionError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::RegisterTaskDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RunTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RunTaskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RunTaskError> for Error {
    fn from(err: crate::error::RunTaskError) -> Self {
        match err {
            crate::error::RunTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RunTaskError::BlockedException(inner) => Error::BlockedException(inner),
            crate::error::RunTaskError::ClientException(inner) => Error::ClientException(inner),
            crate::error::RunTaskError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::RunTaskError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RunTaskError::PlatformTaskDefinitionIncompatibilityException(inner) => {
                Error::PlatformTaskDefinitionIncompatibilityException(inner)
            }
            crate::error::RunTaskError::PlatformUnknownException(inner) => {
                Error::PlatformUnknownException(inner)
            }
            crate::error::RunTaskError::ServerException(inner) => Error::ServerException(inner),
            crate::error::RunTaskError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::RunTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartTaskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartTaskError> for Error {
    fn from(err: crate::error::StartTaskError) -> Self {
        match err {
            crate::error::StartTaskError::ClientException(inner) => Error::ClientException(inner),
            crate::error::StartTaskError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::StartTaskError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartTaskError::ServerException(inner) => Error::ServerException(inner),
            crate::error::StartTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopTaskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopTaskError> for Error {
    fn from(err: crate::error::StopTaskError) -> Self {
        match err {
            crate::error::StopTaskError::ClientException(inner) => Error::ClientException(inner),
            crate::error::StopTaskError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::StopTaskError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StopTaskError::ServerException(inner) => Error::ServerException(inner),
            crate::error::StopTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SubmitAttachmentStateChangesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SubmitAttachmentStateChangesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SubmitAttachmentStateChangesError> for Error {
    fn from(err: crate::error::SubmitAttachmentStateChangesError) -> Self {
        match err {
            crate::error::SubmitAttachmentStateChangesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SubmitAttachmentStateChangesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::SubmitAttachmentStateChangesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SubmitAttachmentStateChangesError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::SubmitAttachmentStateChangesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SubmitContainerStateChangeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SubmitContainerStateChangeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SubmitContainerStateChangeError> for Error {
    fn from(err: crate::error::SubmitContainerStateChangeError) -> Self {
        match err {
            crate::error::SubmitContainerStateChangeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SubmitContainerStateChangeError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::SubmitContainerStateChangeError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::SubmitContainerStateChangeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SubmitTaskStateChangeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SubmitTaskStateChangeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SubmitTaskStateChangeError> for Error {
    fn from(err: crate::error::SubmitTaskStateChangeError) -> Self {
        match err {
            crate::error::SubmitTaskStateChangeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SubmitTaskStateChangeError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::SubmitTaskStateChangeError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SubmitTaskStateChangeError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::SubmitTaskStateChangeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::ClientException(inner) => Error::ClientException(inner),
            crate::error::TagResourceError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::TagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ServerException(inner) => Error::ServerException(inner),
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UntagResourceError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::UntagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateCapacityProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateCapacityProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCapacityProviderError> for Error {
    fn from(err: crate::error::UpdateCapacityProviderError) -> Self {
        match err {
            crate::error::UpdateCapacityProviderError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateCapacityProviderError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateCapacityProviderError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UpdateCapacityProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateClusterError> for Error {
    fn from(err: crate::error::UpdateClusterError) -> Self {
        match err {
            crate::error::UpdateClusterError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateClusterError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::UpdateClusterError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateClusterError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UpdateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateClusterSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateClusterSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateClusterSettingsError> for Error {
    fn from(err: crate::error::UpdateClusterSettingsError) -> Self {
        match err {
            crate::error::UpdateClusterSettingsError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateClusterSettingsError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::UpdateClusterSettingsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateClusterSettingsError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UpdateClusterSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContainerAgentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateContainerAgentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContainerAgentError> for Error {
    fn from(err: crate::error::UpdateContainerAgentError) -> Self {
        match err {
            crate::error::UpdateContainerAgentError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateContainerAgentError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::UpdateContainerAgentError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateContainerAgentError::MissingVersionException(inner) => {
                Error::MissingVersionException(inner)
            }
            crate::error::UpdateContainerAgentError::NoUpdateAvailableException(inner) => {
                Error::NoUpdateAvailableException(inner)
            }
            crate::error::UpdateContainerAgentError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UpdateContainerAgentError::UpdateInProgressException(inner) => {
                Error::UpdateInProgressException(inner)
            }
            crate::error::UpdateContainerAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContainerInstancesStateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateContainerInstancesStateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContainerInstancesStateError> for Error {
    fn from(err: crate::error::UpdateContainerInstancesStateError) -> Self {
        match err {
            crate::error::UpdateContainerInstancesStateError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateContainerInstancesStateError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::UpdateContainerInstancesStateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateContainerInstancesStateError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UpdateContainerInstancesStateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceError> for Error {
    fn from(err: crate::error::UpdateServiceError) -> Self {
        match err {
            crate::error::UpdateServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateServiceError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateServiceError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::UpdateServiceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateServiceError::NamespaceNotFoundException(inner) => {
                Error::NamespaceNotFoundException(inner)
            }
            crate::error::UpdateServiceError::PlatformTaskDefinitionIncompatibilityException(
                inner,
            ) => Error::PlatformTaskDefinitionIncompatibilityException(inner),
            crate::error::UpdateServiceError::PlatformUnknownException(inner) => {
                Error::PlatformUnknownException(inner)
            }
            crate::error::UpdateServiceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UpdateServiceError::ServiceNotActiveException(inner) => {
                Error::ServiceNotActiveException(inner)
            }
            crate::error::UpdateServiceError::ServiceNotFoundException(inner) => {
                Error::ServiceNotFoundException(inner)
            }
            crate::error::UpdateServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServicePrimaryTaskSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateServicePrimaryTaskSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServicePrimaryTaskSetError> for Error {
    fn from(err: crate::error::UpdateServicePrimaryTaskSetError) -> Self {
        match err {
            crate::error::UpdateServicePrimaryTaskSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateServicePrimaryTaskSetError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateServicePrimaryTaskSetError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::UpdateServicePrimaryTaskSetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateServicePrimaryTaskSetError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UpdateServicePrimaryTaskSetError::ServiceNotActiveException(inner) => {
                Error::ServiceNotActiveException(inner)
            }
            crate::error::UpdateServicePrimaryTaskSetError::ServiceNotFoundException(inner) => {
                Error::ServiceNotFoundException(inner)
            }
            crate::error::UpdateServicePrimaryTaskSetError::TaskSetNotFoundException(inner) => {
                Error::TaskSetNotFoundException(inner)
            }
            crate::error::UpdateServicePrimaryTaskSetError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::UpdateServicePrimaryTaskSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTaskProtectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTaskProtectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTaskProtectionError> for Error {
    fn from(err: crate::error::UpdateTaskProtectionError) -> Self {
        match err {
            crate::error::UpdateTaskProtectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateTaskProtectionError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateTaskProtectionError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::UpdateTaskProtectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateTaskProtectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateTaskProtectionError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UpdateTaskProtectionError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::UpdateTaskProtectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTaskSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateTaskSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTaskSetError> for Error {
    fn from(err: crate::error::UpdateTaskSetError) -> Self {
        match err {
            crate::error::UpdateTaskSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateTaskSetError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateTaskSetError::ClusterNotFoundException(inner) => {
                Error::ClusterNotFoundException(inner)
            }
            crate::error::UpdateTaskSetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateTaskSetError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UpdateTaskSetError::ServiceNotActiveException(inner) => {
                Error::ServiceNotActiveException(inner)
            }
            crate::error::UpdateTaskSetError::ServiceNotFoundException(inner) => {
                Error::ServiceNotFoundException(inner)
            }
            crate::error::UpdateTaskSetError::TaskSetNotFoundException(inner) => {
                Error::TaskSetNotFoundException(inner)
            }
            crate::error::UpdateTaskSetError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::UpdateTaskSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::AttributeLimitExceededException(e) => e.request_id(),
            Self::BlockedException(e) => e.request_id(),
            Self::ClientException(e) => e.request_id(),
            Self::ClusterContainsContainerInstancesException(e) => e.request_id(),
            Self::ClusterContainsServicesException(e) => e.request_id(),
            Self::ClusterContainsTasksException(e) => e.request_id(),
            Self::ClusterNotFoundException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MissingVersionException(e) => e.request_id(),
            Self::NamespaceNotFoundException(e) => e.request_id(),
            Self::NoUpdateAvailableException(e) => e.request_id(),
            Self::PlatformTaskDefinitionIncompatibilityException(e) => e.request_id(),
            Self::PlatformUnknownException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServerException(e) => e.request_id(),
            Self::ServiceNotActiveException(e) => e.request_id(),
            Self::ServiceNotFoundException(e) => e.request_id(),
            Self::TargetNotConnectedException(e) => e.request_id(),
            Self::TargetNotFoundException(e) => e.request_id(),
            Self::TaskSetNotFoundException(e) => e.request_id(),
            Self::UnsupportedFeatureException(e) => e.request_id(),
            Self::UpdateInProgressException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
