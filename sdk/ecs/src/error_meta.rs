// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AccessDeniedError(crate::error::AccessDeniedError),
    AttributeLimitExceededError(crate::error::AttributeLimitExceededError),
    BlockedError(crate::error::BlockedError),
    ClientError(crate::error::ClientError),
    ClusterContainsContainerInstancesError(crate::error::ClusterContainsContainerInstancesError),
    ClusterContainsServicesError(crate::error::ClusterContainsServicesError),
    ClusterContainsTasksError(crate::error::ClusterContainsTasksError),
    ClusterNotFoundError(crate::error::ClusterNotFoundError),
    InvalidParameterError(crate::error::InvalidParameterError),
    LimitExceededError(crate::error::LimitExceededError),
    MissingVersionError(crate::error::MissingVersionError),
    NoUpdateAvailableError(crate::error::NoUpdateAvailableError),
    PlatformTaskDefinitionIncompatibilityError(
        crate::error::PlatformTaskDefinitionIncompatibilityError,
    ),
    PlatformUnknownError(crate::error::PlatformUnknownError),
    ResourceInUseError(crate::error::ResourceInUseError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    ServerError(crate::error::ServerError),
    ServiceNotActiveError(crate::error::ServiceNotActiveError),
    ServiceNotFoundError(crate::error::ServiceNotFoundError),
    TargetNotConnectedError(crate::error::TargetNotConnectedError),
    TargetNotFoundError(crate::error::TargetNotFoundError),
    TaskSetNotFoundError(crate::error::TaskSetNotFoundError),
    UnsupportedFeatureError(crate::error::UnsupportedFeatureError),
    UpdateInProgressError(crate::error::UpdateInProgressError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedError(inner) => inner.fmt(f),
            Error::AttributeLimitExceededError(inner) => inner.fmt(f),
            Error::BlockedError(inner) => inner.fmt(f),
            Error::ClientError(inner) => inner.fmt(f),
            Error::ClusterContainsContainerInstancesError(inner) => inner.fmt(f),
            Error::ClusterContainsServicesError(inner) => inner.fmt(f),
            Error::ClusterContainsTasksError(inner) => inner.fmt(f),
            Error::ClusterNotFoundError(inner) => inner.fmt(f),
            Error::InvalidParameterError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::MissingVersionError(inner) => inner.fmt(f),
            Error::NoUpdateAvailableError(inner) => inner.fmt(f),
            Error::PlatformTaskDefinitionIncompatibilityError(inner) => inner.fmt(f),
            Error::PlatformUnknownError(inner) => inner.fmt(f),
            Error::ResourceInUseError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::ServerError(inner) => inner.fmt(f),
            Error::ServiceNotActiveError(inner) => inner.fmt(f),
            Error::ServiceNotFoundError(inner) => inner.fmt(f),
            Error::TargetNotConnectedError(inner) => inner.fmt(f),
            Error::TargetNotFoundError(inner) => inner.fmt(f),
            Error::TaskSetNotFoundError(inner) => inner.fmt(f),
            Error::UnsupportedFeatureError(inner) => inner.fmt(f),
            Error::UpdateInProgressError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCapacityProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateCapacityProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateCapacityProviderErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::CreateCapacityProviderErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::CreateCapacityProviderErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateCapacityProviderErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::CreateCapacityProviderErrorKind::UpdateInProgressError(inner) => {
                    Error::UpdateInProgressError(inner)
                }
                crate::error::CreateCapacityProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateClusterErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::CreateClusterErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::CreateClusterErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::CreateClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateServiceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateServiceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateServiceErrorKind::AccessDeniedError(inner) => Error::AccessDeniedError(inner),
                crate::error::CreateServiceErrorKind::ClientError(inner) => Error::ClientError(inner),
                crate::error::CreateServiceErrorKind::ClusterNotFoundError(inner) => Error::ClusterNotFoundError(inner),
                crate::error::CreateServiceErrorKind::InvalidParameterError(inner) => Error::InvalidParameterError(inner),
                crate::error::CreateServiceErrorKind::PlatformTaskDefinitionIncompatibilityError(inner) => Error::PlatformTaskDefinitionIncompatibilityError(inner),
                crate::error::CreateServiceErrorKind::PlatformUnknownError(inner) => Error::PlatformUnknownError(inner),
                crate::error::CreateServiceErrorKind::ServerError(inner) => Error::ServerError(inner),
                crate::error::CreateServiceErrorKind::UnsupportedFeatureError(inner) => Error::UnsupportedFeatureError(inner),
                crate::error::CreateServiceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTaskSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTaskSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateTaskSetErrorKind::AccessDeniedError(inner) => Error::AccessDeniedError(inner),
                crate::error::CreateTaskSetErrorKind::ClientError(inner) => Error::ClientError(inner),
                crate::error::CreateTaskSetErrorKind::ClusterNotFoundError(inner) => Error::ClusterNotFoundError(inner),
                crate::error::CreateTaskSetErrorKind::InvalidParameterError(inner) => Error::InvalidParameterError(inner),
                crate::error::CreateTaskSetErrorKind::PlatformTaskDefinitionIncompatibilityError(inner) => Error::PlatformTaskDefinitionIncompatibilityError(inner),
                crate::error::CreateTaskSetErrorKind::PlatformUnknownError(inner) => Error::PlatformUnknownError(inner),
                crate::error::CreateTaskSetErrorKind::ServerError(inner) => Error::ServerError(inner),
                crate::error::CreateTaskSetErrorKind::ServiceNotActiveError(inner) => Error::ServiceNotActiveError(inner),
                crate::error::CreateTaskSetErrorKind::ServiceNotFoundError(inner) => Error::ServiceNotFoundError(inner),
                crate::error::CreateTaskSetErrorKind::UnsupportedFeatureError(inner) => Error::UnsupportedFeatureError(inner),
                crate::error::CreateTaskSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAccountSettingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAccountSettingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAccountSettingErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DeleteAccountSettingErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteAccountSettingErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DeleteAccountSettingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAttributesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAttributesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAttributesErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::DeleteAttributesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteAttributesErrorKind::TargetNotFoundError(inner) => {
                    Error::TargetNotFoundError(inner)
                }
                crate::error::DeleteAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCapacityProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteCapacityProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCapacityProviderErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DeleteCapacityProviderErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteCapacityProviderErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DeleteCapacityProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteClusterErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DeleteClusterErrorKind::ClusterContainsContainerInstancesError(
                    inner,
                ) => Error::ClusterContainsContainerInstancesError(inner),
                crate::error::DeleteClusterErrorKind::ClusterContainsServicesError(inner) => {
                    Error::ClusterContainsServicesError(inner)
                }
                crate::error::DeleteClusterErrorKind::ClusterContainsTasksError(inner) => {
                    Error::ClusterContainsTasksError(inner)
                }
                crate::error::DeleteClusterErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::DeleteClusterErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteClusterErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DeleteClusterErrorKind::UpdateInProgressError(inner) => {
                    Error::UpdateInProgressError(inner)
                }
                crate::error::DeleteClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteServiceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteServiceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteServiceErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DeleteServiceErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::DeleteServiceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteServiceErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DeleteServiceErrorKind::ServiceNotFoundError(inner) => {
                    Error::ServiceNotFoundError(inner)
                }
                crate::error::DeleteServiceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTaskSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTaskSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTaskSetErrorKind::AccessDeniedError(inner) => {
                    Error::AccessDeniedError(inner)
                }
                crate::error::DeleteTaskSetErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DeleteTaskSetErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::DeleteTaskSetErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteTaskSetErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DeleteTaskSetErrorKind::ServiceNotActiveError(inner) => {
                    Error::ServiceNotActiveError(inner)
                }
                crate::error::DeleteTaskSetErrorKind::ServiceNotFoundError(inner) => {
                    Error::ServiceNotFoundError(inner)
                }
                crate::error::DeleteTaskSetErrorKind::TaskSetNotFoundError(inner) => {
                    Error::TaskSetNotFoundError(inner)
                }
                crate::error::DeleteTaskSetErrorKind::UnsupportedFeatureError(inner) => {
                    Error::UnsupportedFeatureError(inner)
                }
                crate::error::DeleteTaskSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterContainerInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeregisterContainerInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterContainerInstanceErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DeregisterContainerInstanceErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::DeregisterContainerInstanceErrorKind::InvalidParameterError(
                    inner,
                ) => Error::InvalidParameterError(inner),
                crate::error::DeregisterContainerInstanceErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DeregisterContainerInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterTaskDefinitionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeregisterTaskDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterTaskDefinitionErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DeregisterTaskDefinitionErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeregisterTaskDefinitionErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DeregisterTaskDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCapacityProvidersError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCapacityProvidersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCapacityProvidersErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DescribeCapacityProvidersErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeCapacityProvidersErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DescribeCapacityProvidersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeClustersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeClustersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeClustersErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DescribeClustersErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeClustersErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DescribeClustersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeContainerInstancesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeContainerInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeContainerInstancesErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DescribeContainerInstancesErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::DescribeContainerInstancesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeContainerInstancesErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DescribeContainerInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeServicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeServicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeServicesErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DescribeServicesErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::DescribeServicesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeServicesErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DescribeServicesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTaskDefinitionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTaskDefinitionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTaskDefinitionErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DescribeTaskDefinitionErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeTaskDefinitionErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DescribeTaskDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTasksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTasksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTasksErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DescribeTasksErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::DescribeTasksErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeTasksErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DescribeTasksErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTaskSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTaskSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTaskSetsErrorKind::AccessDeniedError(inner) => {
                    Error::AccessDeniedError(inner)
                }
                crate::error::DescribeTaskSetsErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DescribeTaskSetsErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::DescribeTaskSetsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeTaskSetsErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DescribeTaskSetsErrorKind::ServiceNotActiveError(inner) => {
                    Error::ServiceNotActiveError(inner)
                }
                crate::error::DescribeTaskSetsErrorKind::ServiceNotFoundError(inner) => {
                    Error::ServiceNotFoundError(inner)
                }
                crate::error::DescribeTaskSetsErrorKind::UnsupportedFeatureError(inner) => {
                    Error::UnsupportedFeatureError(inner)
                }
                crate::error::DescribeTaskSetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DiscoverPollEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DiscoverPollEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DiscoverPollEndpointErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::DiscoverPollEndpointErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::DiscoverPollEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExecuteCommandError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExecuteCommandError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExecuteCommandErrorKind::AccessDeniedError(inner) => {
                    Error::AccessDeniedError(inner)
                }
                crate::error::ExecuteCommandErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::ExecuteCommandErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::ExecuteCommandErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ExecuteCommandErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::ExecuteCommandErrorKind::TargetNotConnectedError(inner) => {
                    Error::TargetNotConnectedError(inner)
                }
                crate::error::ExecuteCommandErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAccountSettingsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAccountSettingsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAccountSettingsErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::ListAccountSettingsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListAccountSettingsErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::ListAccountSettingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAttributesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAttributesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAttributesErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::ListAttributesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListAttributesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListClustersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListClustersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListClustersErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::ListClustersErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListClustersErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::ListClustersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListContainerInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListContainerInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListContainerInstancesErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::ListContainerInstancesErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::ListContainerInstancesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListContainerInstancesErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::ListContainerInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListServicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListServicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListServicesErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::ListServicesErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::ListServicesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListServicesErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::ListServicesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTaskDefinitionFamiliesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListTaskDefinitionFamiliesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTaskDefinitionFamiliesErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::ListTaskDefinitionFamiliesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListTaskDefinitionFamiliesErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::ListTaskDefinitionFamiliesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTaskDefinitionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTaskDefinitionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTaskDefinitionsErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::ListTaskDefinitionsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListTaskDefinitionsErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::ListTaskDefinitionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTasksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTasksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTasksErrorKind::ClientError(inner) => Error::ClientError(inner),
                crate::error::ListTasksErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::ListTasksErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListTasksErrorKind::ServerError(inner) => Error::ServerError(inner),
                crate::error::ListTasksErrorKind::ServiceNotFoundError(inner) => {
                    Error::ServiceNotFoundError(inner)
                }
                crate::error::ListTasksErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutAccountSettingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutAccountSettingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutAccountSettingErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::PutAccountSettingErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutAccountSettingErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::PutAccountSettingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutAccountSettingDefaultError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutAccountSettingDefaultError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutAccountSettingDefaultErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::PutAccountSettingDefaultErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutAccountSettingDefaultErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::PutAccountSettingDefaultErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutAttributesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutAttributesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutAttributesErrorKind::AttributeLimitExceededError(inner) => {
                    Error::AttributeLimitExceededError(inner)
                }
                crate::error::PutAttributesErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::PutAttributesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutAttributesErrorKind::TargetNotFoundError(inner) => {
                    Error::TargetNotFoundError(inner)
                }
                crate::error::PutAttributesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutClusterCapacityProvidersError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutClusterCapacityProvidersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutClusterCapacityProvidersErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::PutClusterCapacityProvidersErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::PutClusterCapacityProvidersErrorKind::InvalidParameterError(
                    inner,
                ) => Error::InvalidParameterError(inner),
                crate::error::PutClusterCapacityProvidersErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::PutClusterCapacityProvidersErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::PutClusterCapacityProvidersErrorKind::UpdateInProgressError(
                    inner,
                ) => Error::UpdateInProgressError(inner),
                crate::error::PutClusterCapacityProvidersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterContainerInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RegisterContainerInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterContainerInstanceErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::RegisterContainerInstanceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::RegisterContainerInstanceErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::RegisterContainerInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterTaskDefinitionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterTaskDefinitionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterTaskDefinitionErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::RegisterTaskDefinitionErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::RegisterTaskDefinitionErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::RegisterTaskDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RunTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RunTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RunTaskErrorKind::AccessDeniedError(inner) => {
                    Error::AccessDeniedError(inner)
                }
                crate::error::RunTaskErrorKind::BlockedError(inner) => Error::BlockedError(inner),
                crate::error::RunTaskErrorKind::ClientError(inner) => Error::ClientError(inner),
                crate::error::RunTaskErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::RunTaskErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::RunTaskErrorKind::PlatformTaskDefinitionIncompatibilityError(
                    inner,
                ) => Error::PlatformTaskDefinitionIncompatibilityError(inner),
                crate::error::RunTaskErrorKind::PlatformUnknownError(inner) => {
                    Error::PlatformUnknownError(inner)
                }
                crate::error::RunTaskErrorKind::ServerError(inner) => Error::ServerError(inner),
                crate::error::RunTaskErrorKind::UnsupportedFeatureError(inner) => {
                    Error::UnsupportedFeatureError(inner)
                }
                crate::error::RunTaskErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartTaskErrorKind::ClientError(inner) => Error::ClientError(inner),
                crate::error::StartTaskErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::StartTaskErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::StartTaskErrorKind::ServerError(inner) => Error::ServerError(inner),
                crate::error::StartTaskErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopTaskErrorKind::ClientError(inner) => Error::ClientError(inner),
                crate::error::StopTaskErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::StopTaskErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::StopTaskErrorKind::ServerError(inner) => Error::ServerError(inner),
                crate::error::StopTaskErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SubmitAttachmentStateChangesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::SubmitAttachmentStateChangesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SubmitAttachmentStateChangesErrorKind::AccessDeniedError(inner) => {
                    Error::AccessDeniedError(inner)
                }
                crate::error::SubmitAttachmentStateChangesErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::SubmitAttachmentStateChangesErrorKind::InvalidParameterError(
                    inner,
                ) => Error::InvalidParameterError(inner),
                crate::error::SubmitAttachmentStateChangesErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::SubmitAttachmentStateChangesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SubmitContainerStateChangeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SubmitContainerStateChangeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SubmitContainerStateChangeErrorKind::AccessDeniedError(inner) => {
                    Error::AccessDeniedError(inner)
                }
                crate::error::SubmitContainerStateChangeErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::SubmitContainerStateChangeErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::SubmitContainerStateChangeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SubmitTaskStateChangeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SubmitTaskStateChangeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SubmitTaskStateChangeErrorKind::AccessDeniedError(inner) => {
                    Error::AccessDeniedError(inner)
                }
                crate::error::SubmitTaskStateChangeErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::SubmitTaskStateChangeErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::SubmitTaskStateChangeErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::SubmitTaskStateChangeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::ClientError(inner) => Error::ClientError(inner),
                crate::error::TagResourceErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::TagResourceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::TagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::TagResourceErrorKind::ServerError(inner) => Error::ServerError(inner),
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::UntagResourceErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::UntagResourceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UntagResourceErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateCapacityProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateCapacityProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateCapacityProviderErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::UpdateCapacityProviderErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UpdateCapacityProviderErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::UpdateCapacityProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateClusterErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::UpdateClusterErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::UpdateClusterErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UpdateClusterErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::UpdateClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateClusterSettingsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateClusterSettingsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateClusterSettingsErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::UpdateClusterSettingsErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::UpdateClusterSettingsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UpdateClusterSettingsErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::UpdateClusterSettingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateContainerAgentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateContainerAgentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateContainerAgentErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::UpdateContainerAgentErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::UpdateContainerAgentErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UpdateContainerAgentErrorKind::MissingVersionError(inner) => {
                    Error::MissingVersionError(inner)
                }
                crate::error::UpdateContainerAgentErrorKind::NoUpdateAvailableError(inner) => {
                    Error::NoUpdateAvailableError(inner)
                }
                crate::error::UpdateContainerAgentErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::UpdateContainerAgentErrorKind::UpdateInProgressError(inner) => {
                    Error::UpdateInProgressError(inner)
                }
                crate::error::UpdateContainerAgentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateContainerInstancesStateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateContainerInstancesStateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateContainerInstancesStateErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::UpdateContainerInstancesStateErrorKind::ClusterNotFoundError(
                    inner,
                ) => Error::ClusterNotFoundError(inner),
                crate::error::UpdateContainerInstancesStateErrorKind::InvalidParameterError(
                    inner,
                ) => Error::InvalidParameterError(inner),
                crate::error::UpdateContainerInstancesStateErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::UpdateContainerInstancesStateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateServiceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateServiceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateServiceErrorKind::AccessDeniedError(inner) => Error::AccessDeniedError(inner),
                crate::error::UpdateServiceErrorKind::ClientError(inner) => Error::ClientError(inner),
                crate::error::UpdateServiceErrorKind::ClusterNotFoundError(inner) => Error::ClusterNotFoundError(inner),
                crate::error::UpdateServiceErrorKind::InvalidParameterError(inner) => Error::InvalidParameterError(inner),
                crate::error::UpdateServiceErrorKind::PlatformTaskDefinitionIncompatibilityError(inner) => Error::PlatformTaskDefinitionIncompatibilityError(inner),
                crate::error::UpdateServiceErrorKind::PlatformUnknownError(inner) => Error::PlatformUnknownError(inner),
                crate::error::UpdateServiceErrorKind::ServerError(inner) => Error::ServerError(inner),
                crate::error::UpdateServiceErrorKind::ServiceNotActiveError(inner) => Error::ServiceNotActiveError(inner),
                crate::error::UpdateServiceErrorKind::ServiceNotFoundError(inner) => Error::ServiceNotFoundError(inner),
                crate::error::UpdateServiceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateServicePrimaryTaskSetError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateServicePrimaryTaskSetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateServicePrimaryTaskSetErrorKind::AccessDeniedError(inner) => {
                    Error::AccessDeniedError(inner)
                }
                crate::error::UpdateServicePrimaryTaskSetErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::UpdateServicePrimaryTaskSetErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::UpdateServicePrimaryTaskSetErrorKind::InvalidParameterError(
                    inner,
                ) => Error::InvalidParameterError(inner),
                crate::error::UpdateServicePrimaryTaskSetErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::UpdateServicePrimaryTaskSetErrorKind::ServiceNotActiveError(
                    inner,
                ) => Error::ServiceNotActiveError(inner),
                crate::error::UpdateServicePrimaryTaskSetErrorKind::ServiceNotFoundError(inner) => {
                    Error::ServiceNotFoundError(inner)
                }
                crate::error::UpdateServicePrimaryTaskSetErrorKind::TaskSetNotFoundError(inner) => {
                    Error::TaskSetNotFoundError(inner)
                }
                crate::error::UpdateServicePrimaryTaskSetErrorKind::UnsupportedFeatureError(
                    inner,
                ) => Error::UnsupportedFeatureError(inner),
                crate::error::UpdateServicePrimaryTaskSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTaskSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTaskSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTaskSetErrorKind::AccessDeniedError(inner) => {
                    Error::AccessDeniedError(inner)
                }
                crate::error::UpdateTaskSetErrorKind::ClientError(inner) => {
                    Error::ClientError(inner)
                }
                crate::error::UpdateTaskSetErrorKind::ClusterNotFoundError(inner) => {
                    Error::ClusterNotFoundError(inner)
                }
                crate::error::UpdateTaskSetErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UpdateTaskSetErrorKind::ServerError(inner) => {
                    Error::ServerError(inner)
                }
                crate::error::UpdateTaskSetErrorKind::ServiceNotActiveError(inner) => {
                    Error::ServiceNotActiveError(inner)
                }
                crate::error::UpdateTaskSetErrorKind::ServiceNotFoundError(inner) => {
                    Error::ServiceNotFoundError(inner)
                }
                crate::error::UpdateTaskSetErrorKind::TaskSetNotFoundError(inner) => {
                    Error::TaskSetNotFoundError(inner)
                }
                crate::error::UpdateTaskSetErrorKind::UnsupportedFeatureError(inner) => {
                    Error::UnsupportedFeatureError(inner)
                }
                crate::error::UpdateTaskSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
