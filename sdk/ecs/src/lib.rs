#![allow(clippy::module_inception)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::wrong_self_convention)]
#![allow(clippy::should_implement_trait)]
#![allow(clippy::blacklisted_name)]
#![allow(clippy::vec_init_then_push)]
#![allow(rustdoc::bare_urls)]
//! <fullname>Amazon Elastic Container Service</fullname>
//! <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service that makes
//! it easy to run, stop, and manage Docker containers on a cluster. You can host your
//! cluster on a serverless infrastructure that is managed by Amazon ECS by launching your
//! services or tasks on Fargate. For more control, you can host your tasks on a cluster
//! of Amazon Elastic Compute Cloud (Amazon EC2) instances that you manage.</p>
//! <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API
//! calls, allows you to get the state of your cluster from a centralized service, and gives
//! you access to many familiar Amazon EC2 features.</p>
//! <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on
//! your resource needs, isolation policies, and availability requirements. Amazon ECS eliminates
//! the need for you to operate your own cluster management and configuration management
//! systems or worry about scaling your management infrastructure.</p>

// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use error_meta::Error;

pub use config::Config;

mod aws_endpoint;
#[cfg(feature = "client")]
pub mod client;
pub mod config;
pub mod error;
mod error_meta;
pub mod input;
mod json_deser;
mod json_errors;
mod json_ser;
pub mod model;
mod no_credentials;
pub mod operation;
mod operation_deser;
mod operation_ser;
pub mod output;
pub static PKG_VERSION: &str = env!("CARGO_PKG_VERSION");
pub use smithy_http::byte_stream::ByteStream;
pub use smithy_http::result::SdkError;
pub use smithy_types::Blob;
static API_METADATA: aws_http::user_agent::ApiMetadata =
    aws_http::user_agent::ApiMetadata::new("ecs", PKG_VERSION);
pub use aws_types::region::Region;
pub use aws_types::Credentials;
#[cfg(feature = "client")]
pub use client::Client;
pub use smithy_http::endpoint::Endpoint;
