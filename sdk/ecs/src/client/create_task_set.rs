// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateTaskSet`](crate::client::fluent_builders::CreateTaskSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`service(impl Into<String>)`](crate::client::fluent_builders::CreateTaskSet::service) / [`set_service(Option<String>)`](crate::client::fluent_builders::CreateTaskSet::set_service): <p>The short name or full Amazon Resource Name (ARN) of the service to create the task set in.</p>
    ///   - [`cluster(impl Into<String>)`](crate::client::fluent_builders::CreateTaskSet::cluster) / [`set_cluster(Option<String>)`](crate::client::fluent_builders::CreateTaskSet::set_cluster): <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.</p>
    ///   - [`external_id(impl Into<String>)`](crate::client::fluent_builders::CreateTaskSet::external_id) / [`set_external_id(Option<String>)`](crate::client::fluent_builders::CreateTaskSet::set_external_id): <p>An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the <code>ECS_TASK_SET_EXTERNAL_ID</code> Cloud Map attribute set to the provided value.</p>
    ///   - [`task_definition(impl Into<String>)`](crate::client::fluent_builders::CreateTaskSet::task_definition) / [`set_task_definition(Option<String>)`](crate::client::fluent_builders::CreateTaskSet::set_task_definition): <p>The task definition for the tasks in the task set to use.</p>
    ///   - [`network_configuration(NetworkConfiguration)`](crate::client::fluent_builders::CreateTaskSet::network_configuration) / [`set_network_configuration(Option<NetworkConfiguration>)`](crate::client::fluent_builders::CreateTaskSet::set_network_configuration): <p>An object representing the network configuration for a task set.</p>
    ///   - [`load_balancers(Vec<LoadBalancer>)`](crate::client::fluent_builders::CreateTaskSet::load_balancers) / [`set_load_balancers(Option<Vec<LoadBalancer>>)`](crate::client::fluent_builders::CreateTaskSet::set_load_balancers): <p>A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.</p>
    ///   - [`service_registries(Vec<ServiceRegistry>)`](crate::client::fluent_builders::CreateTaskSet::service_registries) / [`set_service_registries(Option<Vec<ServiceRegistry>>)`](crate::client::fluent_builders::CreateTaskSet::set_service_registries): <p>The details of the service discovery registries to assign to this task set. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service discovery</a>.</p>
    ///   - [`launch_type(LaunchType)`](crate::client::fluent_builders::CreateTaskSet::launch_type) / [`set_launch_type(Option<LaunchType>)`](crate::client::fluent_builders::CreateTaskSet::set_launch_type): <p>The launch type that new tasks in the task set uses. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>  <p>If a <code>launchType</code> is specified, the <code>capacityProviderStrategy</code> parameter must be omitted.</p>
    ///   - [`capacity_provider_strategy(Vec<CapacityProviderStrategyItem>)`](crate::client::fluent_builders::CreateTaskSet::capacity_provider_strategy) / [`set_capacity_provider_strategy(Option<Vec<CapacityProviderStrategyItem>>)`](crate::client::fluent_builders::CreateTaskSet::set_capacity_provider_strategy): <p>The capacity provider strategy to use for the task set.</p>  <p>A capacity provider strategy consists of one or more capacity providers along with the <code>base</code> and <code>weight</code> to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The <code>PutClusterCapacityProviders</code> API is used to associate a capacity provider with a cluster. Only capacity providers with an <code>ACTIVE</code> or <code>UPDATING</code> status can be used.</p>  <p>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code> parameter must be omitted. If no <code>capacityProviderStrategy</code> or <code>launchType</code> is specified, the <code>defaultCapacityProviderStrategy</code> for the cluster is used.</p>  <p>If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the <code>CreateCapacityProvider</code> API operation.</p>  <p>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or <code>FARGATE_SPOT</code> capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.</p>  <p>The <code>PutClusterCapacityProviders</code> API operation is used to update the list of available capacity providers for a cluster after the cluster is created.</p>
    ///   - [`platform_version(impl Into<String>)`](crate::client::fluent_builders::CreateTaskSet::platform_version) / [`set_platform_version(Option<String>)`](crate::client::fluent_builders::CreateTaskSet::set_platform_version): <p>The platform version that the tasks in the task set uses. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the <code>LATEST</code> platform version is used.</p>
    ///   - [`scale(Scale)`](crate::client::fluent_builders::CreateTaskSet::scale) / [`set_scale(Option<Scale>)`](crate::client::fluent_builders::CreateTaskSet::set_scale): <p>A floating-point percentage of the desired number of tasks to place and keep running in the task set.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateTaskSet::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateTaskSet::set_client_token): <p>The identifier that you provide to ensure the idempotency of the request. It's case sensitive and must be unique. It can be up to 32 ASCII characters are allowed.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateTaskSet::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateTaskSet::set_tags): <p>The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. When a service is deleted, the tags are deleted.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case-sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.</p> </li>  </ul>
    /// - On success, responds with [`CreateTaskSetOutput`](crate::output::CreateTaskSetOutput) with field(s):
    ///   - [`task_set(Option<TaskSet>)`](crate::output::CreateTaskSetOutput::task_set): <p>Information about a set of Amazon ECS tasks in either an CodeDeploy or an <code>EXTERNAL</code> deployment. A task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic.</p>
    /// - On failure, responds with [`SdkError<CreateTaskSetError>`](crate::error::CreateTaskSetError)
    pub fn create_task_set(&self) -> crate::client::fluent_builders::CreateTaskSet {
        crate::client::fluent_builders::CreateTaskSet::new(self.handle.clone())
    }
}
