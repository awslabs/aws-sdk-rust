// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateService`](crate::operation::update_service::builders::UpdateServiceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster(impl Into<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::cluster) / [`set_cluster(Option<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_cluster):<br>required: **false**<br><p>The short name or full Amazon Resource Name (ARN) of the cluster that your service runs on. If you do not specify a cluster, the default cluster is assumed.</p> <p>You can't change the cluster name.</p><br>
    ///   - [`service(impl Into<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::service) / [`set_service(Option<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_service):<br>required: **true**<br><p>The name of the service to update.</p><br>
    ///   - [`desired_count(i32)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::desired_count) / [`set_desired_count(Option<i32>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_desired_count):<br>required: **false**<br><p>The number of instantiations of the task to place and keep running in your service.</p> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`task_definition(impl Into<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::task_definition) / [`set_task_definition(Option<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_task_definition):<br>required: **false**<br><p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or full ARN of the task definition to run in your service. If a <code>revision</code> is not specified, the latest <code>ACTIVE</code> revision is used. If you modify the task definition with <code>UpdateService</code>, Amazon ECS spawns a task with the new version of the task definition and then stops an old task after the new version is running.</p> <p>This parameter triggers a new service deployment.</p><br>
    ///   - [`capacity_provider_strategy(CapacityProviderStrategyItem)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::capacity_provider_strategy) / [`set_capacity_provider_strategy(Option<Vec::<CapacityProviderStrategyItem>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_capacity_provider_strategy):<br>required: **false**<br><p>The details of a capacity provider strategy. You can set a capacity provider when you create a cluster, run a task, or update a service.</p><note>  <p>If you want to use Amazon ECS Managed Instances, you must use the <code>capacityProviderStrategy</code> request parameter.</p> </note> <p>When you use Fargate, the capacity providers are <code>FARGATE</code> or <code>FARGATE_SPOT</code>.</p> <p>When you use Amazon EC2, the capacity providers are Auto Scaling groups.</p> <p>You can change capacity providers for rolling deployments and blue/green deployments.</p> <p>The following list provides the valid transitions:</p> <ul>  <li>   <p>Update the Fargate launch type to an Auto Scaling group capacity provider.</p></li>  <li>   <p>Update the Amazon EC2 launch type to a Fargate capacity provider.</p></li>  <li>   <p>Update the Fargate capacity provider to an Auto Scaling group capacity provider.</p></li>  <li>   <p>Update the Amazon EC2 capacity provider to a Fargate capacity provider.</p></li>  <li>   <p>Update the Auto Scaling group or Fargate capacity provider back to the launch type.</p>   <p>Pass an empty list in the <code>capacityProviderStrategy</code> parameter.</p></li> </ul> <p>For information about Amazon Web Services CDK considerations, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/update-service-parameters.html">Amazon Web Services CDK considerations</a>.</p> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`deployment_configuration(DeploymentConfiguration)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::deployment_configuration) / [`set_deployment_configuration(Option<DeploymentConfiguration>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_deployment_configuration):<br>required: **false**<br><p>Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.</p> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`availability_zone_rebalancing(AvailabilityZoneRebalancing)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::availability_zone_rebalancing) / [`set_availability_zone_rebalancing(Option<AvailabilityZoneRebalancing>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_availability_zone_rebalancing):<br>required: **false**<br><p>Indicates whether to use Availability Zone rebalancing for the service.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-rebalancing.html">Balancing an Amazon ECS service across Availability Zones</a> in the <i> <i>Amazon Elastic Container Service Developer Guide</i> </i>.</p> <p>The default behavior of <code>AvailabilityZoneRebalancing</code> differs between create and update requests:</p> <ul>  <li>   <p>For create service requests, when no value is specified for <code>AvailabilityZoneRebalancing</code>, Amazon ECS defaults the value to <code>ENABLED</code>.</p></li>  <li>   <p>For update service requests, when no value is specified for <code>AvailabilityZoneRebalancing</code>, Amazon ECS defaults to the existing serviceâ€™s <code>AvailabilityZoneRebalancing</code> value. If the service never had an <code>AvailabilityZoneRebalancing</code> value set, Amazon ECS treats this as <code>DISABLED</code>.</p></li> </ul> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`network_configuration(NetworkConfiguration)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::network_configuration) / [`set_network_configuration(Option<NetworkConfiguration>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_network_configuration):<br>required: **false**<br><p>An object representing the network configuration for the service.</p> <p>This parameter triggers a new service deployment.</p><br>
    ///   - [`placement_constraints(PlacementConstraint)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::placement_constraints) / [`set_placement_constraints(Option<Vec::<PlacementConstraint>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_placement_constraints):<br>required: **false**<br><p>An array of task placement constraint objects to update the service to use. If no value is specified, the existing placement constraints for the service will remain unchanged. If this value is specified, it will override any existing placement constraints defined for the service. To remove all existing placement constraints, specify an empty array.</p> <p>You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.</p> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`placement_strategy(PlacementStrategy)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::placement_strategy) / [`set_placement_strategy(Option<Vec::<PlacementStrategy>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_placement_strategy):<br>required: **false**<br><p>The task placement strategy objects to update the service to use. If no value is specified, the existing placement strategy for the service will remain unchanged. If this value is specified, it will override the existing placement strategy defined for the service. To remove an existing placement strategy, specify an empty object.</p> <p>You can specify a maximum of five strategy rules for each service.</p> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`platform_version(impl Into<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::platform_version) / [`set_platform_version(Option<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_platform_version):<br>required: **false**<br><p>The platform version that your tasks in the service run on. A platform version is only specified for tasks using the Fargate launch type. If a platform version is not specified, the <code>LATEST</code> platform version is used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate Platform Versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>This parameter triggers a new service deployment.</p><br>
    ///   - [`force_new_deployment(bool)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::force_new_deployment) / [`set_force_new_deployment(Option<bool>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_force_new_deployment):<br>required: **false**<br><p>Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (<code>my_image:latest</code>) or to roll Fargate tasks onto a newer platform version.</p><br>
    ///   - [`health_check_grace_period_seconds(i32)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::health_check_grace_period_seconds) / [`set_health_check_grace_period_seconds(Option<i32>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_health_check_grace_period_seconds):<br>required: **false**<br><p>The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing, VPC Lattice, and container health checks after a task has first started. If you don't specify a health check grace period value, the default value of <code>0</code> is used. If you don't use any of the health checks, then <code>healthCheckGracePeriodSeconds</code> is unused.</p> <p>If your service's tasks take a while to start and respond to health checks, you can specify a health check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.</p> <p>If your service has more running tasks than desired, unhealthy tasks in the grace period might be stopped to reach the desired count.</p> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`deployment_controller(DeploymentController)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::deployment_controller) / [`set_deployment_controller(Option<DeploymentController>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_deployment_controller):<br>required: **false**<br><p>The deployment controller to use for the service.</p><br>
    ///   - [`enable_execute_command(bool)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::enable_execute_command) / [`set_enable_execute_command(Option<bool>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_enable_execute_command):<br>required: **false**<br><p>If <code>true</code>, this enables execute command functionality on all task containers.</p> <p>If you do not want to override the value that was set when the service was created, you can set this to <code>null</code> when performing this action.</p> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`enable_ecs_managed_tags(bool)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::enable_ecs_managed_tags) / [`set_enable_ecs_managed_tags(Option<bool>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_enable_ecs_managed_tags):<br>required: **false**<br><p>Determines whether to turn on Amazon ECS managed tags for the tasks in the service. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging Your Amazon ECS Resources</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>Only tasks launched after the update will reflect the update. To update the tags on all tasks, set <code>forceNewDeployment</code> to <code>true</code>, so that Amazon ECS starts new tasks with the updated tags.</p> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`load_balancers(LoadBalancer)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::load_balancers) / [`set_load_balancers(Option<Vec::<LoadBalancer>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_load_balancers):<br>required: **false**<br><note>  <p>You must have a service-linked role when you update this property</p> </note> <p>A list of Elastic Load Balancing load balancer objects. It contains the load balancer name, the container name, and the container port to access from the load balancer. The container name is as it appears in a container definition.</p> <p>When you add, update, or remove a load balancer configuration, Amazon ECS starts new tasks with the updated Elastic Load Balancing configuration, and then stops the old tasks when the new tasks are running.</p> <p>For services that use rolling updates, you can add, update, or remove Elastic Load Balancing target groups. You can update from a single target group to multiple target groups and from multiple target groups to a single target group.</p> <p>For services that use blue/green deployments, you can update Elastic Load Balancing target groups by using <code> <a href="https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html">CreateDeployment</a> </code> through CodeDeploy. Note that multiple target groups are not supported for blue/green deployments. For more information see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html">Register multiple target groups with a service</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>For services that use the external deployment controller, you can add, update, or remove load balancers by using <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateTaskSet.html">CreateTaskSet</a>. Note that multiple target groups are not supported for external deployments. For more information see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html">Register multiple target groups with a service</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>You can remove existing <code>loadBalancers</code> by passing an empty list.</p> <p>This parameter triggers a new service deployment.</p><br>
    ///   - [`propagate_tags(PropagateTags)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::propagate_tags) / [`set_propagate_tags(Option<PropagateTags>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_propagate_tags):<br>required: **false**<br><p>Determines whether to propagate the tags from the task definition or the service to the task. If no value is specified, the tags aren't propagated.</p> <p>Only tasks launched after the update will reflect the update. To update the tags on all tasks, set <code>forceNewDeployment</code> to <code>true</code>, so that Amazon ECS starts new tasks with the updated tags.</p> <p>This parameter doesn't trigger a new service deployment.</p><br>
    ///   - [`service_registries(ServiceRegistry)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::service_registries) / [`set_service_registries(Option<Vec::<ServiceRegistry>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_service_registries):<br>required: **false**<br><note>  <p>You must have a service-linked role when you update this property.</p>  <p>For more information about the role see the <code>CreateService</code> request parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html#ECS-CreateService-request-role"> <code>role</code> </a>.</p> </note> <p>The details for the service discovery registries to assign to this service. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a>.</p> <p>When you add, update, or remove the service registries configuration, Amazon ECS starts new tasks with the updated service registries configuration, and then stops the old tasks when the new tasks are running.</p> <p>You can remove existing <code>serviceRegistries</code> by passing an empty list.</p> <p>This parameter triggers a new service deployment.</p><br>
    ///   - [`service_connect_configuration(ServiceConnectConfiguration)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::service_connect_configuration) / [`set_service_connect_configuration(Option<ServiceConnectConfiguration>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_service_connect_configuration):<br>required: **false**<br><p>The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.</p> <p>Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html">Service Connect</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>This parameter triggers a new service deployment.</p><br>
    ///   - [`volume_configurations(ServiceVolumeConfiguration)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::volume_configurations) / [`set_volume_configurations(Option<Vec::<ServiceVolumeConfiguration>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_volume_configurations):<br>required: **false**<br><p>The details of the volume that was <code>configuredAtLaunch</code>. You can configure the size, volumeType, IOPS, throughput, snapshot and encryption in <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ServiceManagedEBSVolumeConfiguration.html">ServiceManagedEBSVolumeConfiguration</a>. The <code>name</code> of the volume must match the <code>name</code> from the task definition. If set to null, no new deployment is triggered. Otherwise, if this configuration differs from the existing one, it triggers a new deployment.</p> <p>This parameter triggers a new service deployment.</p><br>
    ///   - [`vpc_lattice_configurations(VpcLatticeConfiguration)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::vpc_lattice_configurations) / [`set_vpc_lattice_configurations(Option<Vec::<VpcLatticeConfiguration>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_vpc_lattice_configurations):<br>required: **false**<br><p>An object representing the VPC Lattice configuration for the service being updated.</p> <p>This parameter triggers a new service deployment.</p><br>
    /// - On success, responds with [`UpdateServiceOutput`](crate::operation::update_service::UpdateServiceOutput) with field(s):
    ///   - [`service(Option<Service>)`](crate::operation::update_service::UpdateServiceOutput::service): <p>The full description of your service following the update call.</p>
    /// - On failure, responds with [`SdkError<UpdateServiceError>`](crate::operation::update_service::UpdateServiceError)
    pub fn update_service(&self) -> crate::operation::update_service::builders::UpdateServiceFluentBuilder {
        crate::operation::update_service::builders::UpdateServiceFluentBuilder::new(self.handle.clone())
    }
}
