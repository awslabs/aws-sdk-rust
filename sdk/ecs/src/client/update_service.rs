// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateService`](crate::operation::update_service::builders::UpdateServiceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster(impl Into<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::cluster) / [`set_cluster(Option<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_cluster):<br>required: **false**<br><p>The short name or full Amazon Resource Name (ARN) of the cluster that your service runs on. If you do not specify a cluster, the default cluster is assumed.</p><br>
    ///   - [`service(impl Into<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::service) / [`set_service(Option<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_service):<br>required: **true**<br><p>The name of the service to update.</p><br>
    ///   - [`desired_count(i32)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::desired_count) / [`set_desired_count(Option<i32>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_desired_count):<br>required: **false**<br><p>The number of instantiations of the task to place and keep running in your service.</p><br>
    ///   - [`task_definition(impl Into<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::task_definition) / [`set_task_definition(Option<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_task_definition):<br>required: **false**<br><p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or full ARN of the task definition to run in your service. If a <code>revision</code> is not specified, the latest <code>ACTIVE</code> revision is used. If you modify the task definition with <code>UpdateService</code>, Amazon ECS spawns a task with the new version of the task definition and then stops an old task after the new version is running.</p><br>
    ///   - [`capacity_provider_strategy(CapacityProviderStrategyItem)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::capacity_provider_strategy) / [`set_capacity_provider_strategy(Option<Vec::<CapacityProviderStrategyItem>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_capacity_provider_strategy):<br>required: **false**<br><p>The capacity provider strategy to update the service to use.</p>  <p>if the service uses the default capacity provider strategy for the cluster, the service can be updated to use one or more capacity providers as opposed to the default capacity provider strategy. However, when a service is using a capacity provider strategy that's not the default capacity provider strategy, the service can't be updated to use the cluster's default capacity provider strategy.</p>  <p>A capacity provider strategy consists of one or more capacity providers along with the <code>base</code> and <code>weight</code> to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The <code>PutClusterCapacityProviders</code> API is used to associate a capacity provider with a cluster. Only capacity providers with an <code>ACTIVE</code> or <code>UPDATING</code> status can be used.</p>  <p>If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the <code>CreateCapacityProvider</code> API operation.</p>  <p>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or <code>FARGATE_SPOT</code> capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.</p>  <p>The <code>PutClusterCapacityProviders</code> API operation is used to update the list of available capacity providers for a cluster after the cluster is created.</p>  <p></p><br>
    ///   - [`deployment_configuration(DeploymentConfiguration)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::deployment_configuration) / [`set_deployment_configuration(Option<DeploymentConfiguration>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_deployment_configuration):<br>required: **false**<br><p>Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.</p><br>
    ///   - [`network_configuration(NetworkConfiguration)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::network_configuration) / [`set_network_configuration(Option<NetworkConfiguration>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_network_configuration):<br>required: **false**<br><p>An object representing the network configuration for the service.</p><br>
    ///   - [`placement_constraints(PlacementConstraint)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::placement_constraints) / [`set_placement_constraints(Option<Vec::<PlacementConstraint>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_placement_constraints):<br>required: **false**<br><p>An array of task placement constraint objects to update the service to use. If no value is specified, the existing placement constraints for the service will remain unchanged. If this value is specified, it will override any existing placement constraints defined for the service. To remove all existing placement constraints, specify an empty array.</p>  <p>You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.</p><br>
    ///   - [`placement_strategy(PlacementStrategy)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::placement_strategy) / [`set_placement_strategy(Option<Vec::<PlacementStrategy>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_placement_strategy):<br>required: **false**<br><p>The task placement strategy objects to update the service to use. If no value is specified, the existing placement strategy for the service will remain unchanged. If this value is specified, it will override the existing placement strategy defined for the service. To remove an existing placement strategy, specify an empty object.</p>  <p>You can specify a maximum of five strategy rules for each service.</p><br>
    ///   - [`platform_version(impl Into<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::platform_version) / [`set_platform_version(Option<String>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_platform_version):<br>required: **false**<br><p>The platform version that your tasks in the service run on. A platform version is only specified for tasks using the Fargate launch type. If a platform version is not specified, the <code>LATEST</code> platform version is used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate Platform Versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><br>
    ///   - [`force_new_deployment(bool)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::force_new_deployment) / [`set_force_new_deployment(Option<bool>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_force_new_deployment):<br>required: **false**<br><p>Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (<code>my_image:latest</code>) or to roll Fargate tasks onto a newer platform version.</p><br>
    ///   - [`health_check_grace_period_seconds(i32)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::health_check_grace_period_seconds) / [`set_health_check_grace_period_seconds(Option<i32>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_health_check_grace_period_seconds):<br>required: **false**<br><p>The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started. This is only valid if your service is configured to use a load balancer. If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds. During that time, the Amazon ECS service scheduler ignores the Elastic Load Balancing health check status. This grace period can prevent the ECS service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.</p><br>
    ///   - [`enable_execute_command(bool)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::enable_execute_command) / [`set_enable_execute_command(Option<bool>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_enable_execute_command):<br>required: **false**<br><p>If <code>true</code>, this enables execute command functionality on all task containers.</p>  <p>If you do not want to override the value that was set when the service was created, you can set this to <code>null</code> when performing this action.</p><br>
    ///   - [`enable_ecs_managed_tags(bool)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::enable_ecs_managed_tags) / [`set_enable_ecs_managed_tags(Option<bool>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_enable_ecs_managed_tags):<br>required: **false**<br><p>Determines whether to turn on Amazon ECS managed tags for the tasks in the service. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging Your Amazon ECS Resources</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>  <p>Only tasks launched after the update will reflect the update. To update the tags on all tasks, set <code>forceNewDeployment</code> to <code>true</code>, so that Amazon ECS starts new tasks with the updated tags.</p><br>
    ///   - [`load_balancers(LoadBalancer)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::load_balancers) / [`set_load_balancers(Option<Vec::<LoadBalancer>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_load_balancers):<br>required: **false**<br><p>A list of Elastic Load Balancing load balancer objects. It contains the load balancer name, the container name, and the container port to access from the load balancer. The container name is as it appears in a container definition.</p>  <p>When you add, update, or remove a load balancer configuration, Amazon ECS starts new tasks with the updated Elastic Load Balancing configuration, and then stops the old tasks when the new tasks are running.</p>  <p>For services that use rolling updates, you can add, update, or remove Elastic Load Balancing target groups. You can update from a single target group to multiple target groups and from multiple target groups to a single target group.</p>  <p>For services that use blue/green deployments, you can update Elastic Load Balancing target groups by using <code> <a href="https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html">CreateDeployment</a> </code> through CodeDeploy. Note that multiple target groups are not supported for blue/green deployments. For more information see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html">Register multiple target groups with a service</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. </p>  <p>For services that use the external deployment controller, you can add, update, or remove load balancers by using <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateTaskSet.html">CreateTaskSet</a>. Note that multiple target groups are not supported for external deployments. For more information see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html">Register multiple target groups with a service</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. </p>  <p>You can remove existing <code>loadBalancers</code> by passing an empty list.</p><br>
    ///   - [`propagate_tags(PropagateTags)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::propagate_tags) / [`set_propagate_tags(Option<PropagateTags>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_propagate_tags):<br>required: **false**<br><p>Determines whether to propagate the tags from the task definition or the service to the task. If no value is specified, the tags aren't propagated.</p>  <p>Only tasks launched after the update will reflect the update. To update the tags on all tasks, set <code>forceNewDeployment</code> to <code>true</code>, so that Amazon ECS starts new tasks with the updated tags.</p><br>
    ///   - [`service_registries(ServiceRegistry)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::service_registries) / [`set_service_registries(Option<Vec::<ServiceRegistry>>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_service_registries):<br>required: **false**<br><p>The details for the service discovery registries to assign to this service. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a>.</p>  <p>When you add, update, or remove the service registries configuration, Amazon ECS starts new tasks with the updated service registries configuration, and then stops the old tasks when the new tasks are running.</p>  <p>You can remove existing <code>serviceRegistries</code> by passing an empty list.</p><br>
    ///   - [`service_connect_configuration(ServiceConnectConfiguration)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::service_connect_configuration) / [`set_service_connect_configuration(Option<ServiceConnectConfiguration>)`](crate::operation::update_service::builders::UpdateServiceFluentBuilder::set_service_connect_configuration):<br>required: **false**<br><p>The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.</p>  <p>Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html">Service Connect</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><br>
    /// - On success, responds with [`UpdateServiceOutput`](crate::operation::update_service::UpdateServiceOutput) with field(s):
    ///   - [`service(Option<Service>)`](crate::operation::update_service::UpdateServiceOutput::service): <p>The full description of your service following the update call.</p>
    /// - On failure, responds with [`SdkError<UpdateServiceError>`](crate::operation::update_service::UpdateServiceError)
    pub fn update_service(&self) -> crate::operation::update_service::builders::UpdateServiceFluentBuilder {
        crate::operation::update_service::builders::UpdateServiceFluentBuilder::new(self.handle.clone())
    }
}
