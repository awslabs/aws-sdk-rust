// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterTaskDefinition`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`family(impl Into<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::family) / [`set_family(Option<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_family): <p>You must specify a <code>family</code> for a task definition. You can use it track multiple versions of the same task definition. The <code>family</code> is used as a name for your task definition. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.</p>
    ///   - [`task_role_arn(impl Into<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::task_role_arn) / [`set_task_role_arn(Option<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_task_role_arn): <p>The short name or full Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM Roles for Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    ///   - [`execution_role_arn(impl Into<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_execution_role_arn): <p>The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make Amazon Web Services API calls on your behalf. The task execution IAM role is required depending on the requirements of your task. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html">Amazon ECS task execution IAM role</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    ///   - [`network_mode(NetworkMode)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::network_mode) / [`set_network_mode(Option<NetworkMode>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_network_mode): <p>The Docker networking mode to use for the containers in the task. The valid values are <code>none</code>, <code>bridge</code>, <code>awsvpc</code>, and <code>host</code>. If no network mode is specified, the default is <code>bridge</code>.</p>  <p>For Amazon ECS tasks on Fargate, the <code>awsvpc</code> network mode is required. For Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows instances, <code>   <default></default></code> or <code>awsvpc</code> can be used. If the network mode is set to <code>none</code>, you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The <code>host</code> and <code>awsvpc</code> network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the <code>bridge</code> mode.</p>  <p>With the <code>host</code> and <code>awsvpc</code> network modes, exposed container ports are mapped directly to the corresponding host port (for the <code>host</code> network mode) or the attached elastic network interface port (for the <code>awsvpc</code> network mode), so you cannot take advantage of dynamic host port mappings. </p> <important>   <p>When using the <code>host</code> network mode, you should not run containers using the root user (UID 0). It is considered best practice to use a non-root user.</p>  </important>  <p>If the network mode is <code>awsvpc</code>, the task is allocated an elastic network interface, and you must specify a <code>NetworkConfiguration</code> value when you create a service or run a task with the task definition. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Task Networking</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>  <p>If the network mode is <code>host</code>, you cannot run multiple instantiations of the same task on a single container instance when port mappings are used.</p>  <p>For more information, see <a href="https://docs.docker.com/engine/reference/run/#network-settings">Network settings</a> in the <i>Docker run reference</i>.</p>
    ///   - [`container_definitions(Vec<ContainerDefinition>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::container_definitions) / [`set_container_definitions(Option<Vec<ContainerDefinition>>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_container_definitions): <p>A list of container definitions in JSON format that describe the different containers that make up your task.</p>
    ///   - [`volumes(Vec<Volume>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::volumes) / [`set_volumes(Option<Vec<Volume>>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_volumes): <p>A list of volume definitions in JSON format that containers in your task might use.</p>
    ///   - [`placement_constraints(Vec<TaskDefinitionPlacementConstraint>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::placement_constraints) / [`set_placement_constraints(Option<Vec<TaskDefinitionPlacementConstraint>>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_placement_constraints): <p>An array of placement constraint objects to use for the task. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.</p>
    ///   - [`requires_compatibilities(Vec<Compatibility>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::requires_compatibilities) / [`set_requires_compatibilities(Option<Vec<Compatibility>>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_requires_compatibilities): <p>The task launch type that Amazon ECS validates the task definition against. A client exception is returned if the task definition doesn't validate against the compatibilities specified. If no value is specified, the parameter is omitted from the response.</p>
    ///   - [`cpu(impl Into<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::cpu) / [`set_cpu(Option<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_cpu): <p>The number of CPU units used by the task. It can be expressed as an integer using CPU units (for example, <code>1024</code>) or as a string using vCPUs (for example, <code>1 vCPU</code> or <code>1 vcpu</code>) in a task definition. String values are converted to an integer indicating the CPU units when the task definition is registered.</p> <note>   <p>Task-level CPU and memory parameters are ignored for Windows containers. We recommend specifying container-level resources for Windows containers.</p>  </note>  <p>If you're using the EC2 launch type, this field is optional. Supported values are between <code>128</code> CPU units (<code>0.125</code> vCPUs) and <code>10240</code> CPU units (<code>10</code> vCPUs). If you do not specify a value, the parameter is ignored.</p>  <p>If you're using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of supported values for the <code>memory</code> parameter:</p>  <p>The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.</p>  <ul>   <li> <p>256 (.25 vCPU) - Available <code>memory</code> values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)</p> </li>   <li> <p>512 (.5 vCPU) - Available <code>memory</code> values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</p> </li>   <li> <p>1024 (1 vCPU) - Available <code>memory</code> values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)</p> </li>   <li> <p>2048 (2 vCPU) - Available <code>memory</code> values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)</p> </li>   <li> <p>4096 (4 vCPU) - Available <code>memory</code> values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)</p> </li>   <li> <p>8192 (8 vCPU) - Available <code>memory</code> values: 16 GB and 60 GB in 4 GB increments</p> <p>This option requires Linux platform <code>1.4.0</code> or later.</p> </li>   <li> <p>16384 (16vCPU) - Available <code>memory</code> values: 32GB and 120 GB in 8 GB increments</p> <p>This option requires Linux platform <code>1.4.0</code> or later.</p> </li>  </ul>
    ///   - [`memory(impl Into<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::memory) / [`set_memory(Option<String>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_memory): <p>The amount of memory (in MiB) used by the task. It can be expressed as an integer using MiB (for example ,<code>1024</code>) or as a string using GB (for example, <code>1GB</code> or <code>1 GB</code>) in a task definition. String values are converted to an integer indicating the MiB when the task definition is registered.</p> <note>   <p>Task-level CPU and memory parameters are ignored for Windows containers. We recommend specifying container-level resources for Windows containers.</p>  </note>  <p>If using the EC2 launch type, this field is optional.</p>  <p>If using the Fargate launch type, this field is required and you must use one of the following values. This determines your range of supported values for the <code>cpu</code> parameter.</p>  <p>The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.</p>  <ul>   <li> <p>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <code>cpu</code> values: 256 (.25 vCPU)</p> </li>   <li> <p>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available <code>cpu</code> values: 512 (.5 vCPU)</p> </li>   <li> <p>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available <code>cpu</code> values: 1024 (1 vCPU)</p> </li>   <li> <p>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available <code>cpu</code> values: 2048 (2 vCPU)</p> </li>   <li> <p>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available <code>cpu</code> values: 4096 (4 vCPU)</p> </li>   <li> <p>Between 16 GB and 60 GB in 4 GB increments - Available <code>cpu</code> values: 8192 (8 vCPU)</p> <p>This option requires Linux platform <code>1.4.0</code> or later.</p> </li>   <li> <p>Between 32GB and 120 GB in 8 GB increments - Available <code>cpu</code> values: 16384 (16 vCPU)</p> <p>This option requires Linux platform <code>1.4.0</code> or later.</p> </li>  </ul>
    ///   - [`tags(Vec<Tag>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_tags): <p>The metadata that you apply to the task definition to help you categorize and organize them. Each tag consists of a key and an optional value. You define both of them.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case-sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.</p> </li>  </ul>
    ///   - [`pid_mode(PidMode)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::pid_mode) / [`set_pid_mode(Option<PidMode>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_pid_mode): <p>The process namespace to use for the containers in the task. The valid values are <code>host</code> or <code>task</code>. If <code>host</code> is specified, then all containers within the tasks that specified the <code>host</code> PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If <code>task</code> is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace. For more information, see <a href="https://docs.docker.com/engine/reference/run/#pid-settings---pid">PID settings</a> in the <i>Docker run reference</i>.</p>  <p>If the <code>host</code> PID mode is used, be aware that there is a heightened risk of undesired process namespace expose. For more information, see <a href="https://docs.docker.com/engine/security/security/">Docker security</a>.</p> <note>   <p>This parameter is not supported for Windows containers or tasks run on Fargate.</p>  </note>
    ///   - [`ipc_mode(IpcMode)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::ipc_mode) / [`set_ipc_mode(Option<IpcMode>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_ipc_mode): <p>The IPC resource namespace to use for the containers in the task. The valid values are <code>host</code>, <code>task</code>, or <code>none</code>. If <code>host</code> is specified, then all containers within the tasks that specified the <code>host</code> IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If <code>task</code> is specified, all containers within the specified task share the same IPC resources. If <code>none</code> is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see <a href="https://docs.docker.com/engine/reference/run/#ipc-settings---ipc">IPC settings</a> in the <i>Docker run reference</i>.</p>  <p>If the <code>host</code> IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see <a href="https://docs.docker.com/engine/security/security/">Docker security</a>.</p>  <p>If you are setting namespaced kernel parameters using <code>systemControls</code> for the containers in the task, the following will apply to your IPC resource namespace. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html">System Controls</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>  <ul>   <li> <p>For tasks that use the <code>host</code> IPC mode, IPC namespace related <code>systemControls</code> are not supported.</p> </li>   <li> <p>For tasks that use the <code>task</code> IPC mode, IPC namespace related <code>systemControls</code> will apply to all containers within a task.</p> </li>  </ul> <note>   <p>This parameter is not supported for Windows containers or tasks run on Fargate.</p>  </note>
    ///   - [`proxy_configuration(ProxyConfiguration)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::proxy_configuration) / [`set_proxy_configuration(Option<ProxyConfiguration>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_proxy_configuration): <p>The configuration details for the App Mesh proxy.</p>  <p>For tasks hosted on Amazon EC2 instances, the container instances require at least version <code>1.26.0</code> of the container agent and at least version <code>1.26.0-1</code> of the <code>ecs-init</code> package to use a proxy configuration. If your container instances are launched from the Amazon ECS-optimized AMI version <code>20190301</code> or later, then they contain the required versions of the container agent and <code>ecs-init</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-ami-versions.html">Amazon ECS-optimized AMI versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    ///   - [`inference_accelerators(Vec<InferenceAccelerator>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::inference_accelerators) / [`set_inference_accelerators(Option<Vec<InferenceAccelerator>>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_inference_accelerators): <p>The Elastic Inference accelerators to use for the containers in the task.</p>
    ///   - [`ephemeral_storage(EphemeralStorage)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::ephemeral_storage) / [`set_ephemeral_storage(Option<EphemeralStorage>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_ephemeral_storage): <p>The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html">Fargate task storage</a> in the <i>Amazon ECS User Guide for Fargate</i>.</p> <note>   <p>This parameter is only supported for tasks hosted on Fargate using the following platform versions:</p>   <ul>    <li> <p>Linux platform version <code>1.4.0</code> or later.</p> </li>   </ul>  </note>
    ///   - [`runtime_platform(RuntimePlatform)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::runtime_platform) / [`set_runtime_platform(Option<RuntimePlatform>)`](crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::set_runtime_platform): <p>The operating system that your tasks definitions run on. A platform family is specified only for tasks using the Fargate launch type. </p>  <p>When you specify a task definition in a service, this value must match the <code>runtimePlatform</code> value of the service.</p>
    /// - On success, responds with [`RegisterTaskDefinitionOutput`](crate::operation::register_task_definition::RegisterTaskDefinitionOutput) with field(s):
    ///   - [`task_definition(Option<TaskDefinition>)`](crate::operation::register_task_definition::RegisterTaskDefinitionOutput::task_definition): <p>The full description of the registered task definition.</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::operation::register_task_definition::RegisterTaskDefinitionOutput::tags): <p>The list of tags associated with the task definition.</p>
    /// - On failure, responds with [`SdkError<RegisterTaskDefinitionError>`](crate::operation::register_task_definition::RegisterTaskDefinitionError)
    pub fn register_task_definition(
        &self,
    ) -> crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder
    {
        crate::operation::register_task_definition::builders::RegisterTaskDefinitionFluentBuilder::new(self.handle.clone())
    }
}
