// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RunTask`](crate::operation::run_task::builders::RunTaskFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`capacity_provider_strategy(CapacityProviderStrategyItem)`](crate::operation::run_task::builders::RunTaskFluentBuilder::capacity_provider_strategy) / [`set_capacity_provider_strategy(Option<Vec::<CapacityProviderStrategyItem>>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_capacity_provider_strategy):<br>required: **false**<br><p>The capacity provider strategy to use for the task.</p>  <p>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code> parameter must be omitted. If no <code>capacityProviderStrategy</code> or <code>launchType</code> is specified, the <code>defaultCapacityProviderStrategy</code> for the cluster is used.</p>  <p>When you use cluster auto scaling, you must specify <code>capacityProviderStrategy</code> and not <code>launchType</code>. </p>  <p>A capacity provider strategy may contain a maximum of 6 capacity providers.</p><br>
    ///   - [`cluster(impl Into<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::cluster) / [`set_cluster(Option<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_cluster):<br>required: **false**<br><p>The short name or full Amazon Resource Name (ARN) of the cluster to run your task on. If you do not specify a cluster, the default cluster is assumed.</p><br>
    ///   - [`count(i32)`](crate::operation::run_task::builders::RunTaskFluentBuilder::count) / [`set_count(Option<i32>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_count):<br>required: **false**<br><p>The number of instantiations of the specified task to place on your cluster. You can specify up to 10 tasks for each call.</p><br>
    ///   - [`enable_ecs_managed_tags(bool)`](crate::operation::run_task::builders::RunTaskFluentBuilder::enable_ecs_managed_tags) / [`set_enable_ecs_managed_tags(Option<bool>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_enable_ecs_managed_tags):<br>required: **false**<br><p>Specifies whether to use Amazon ECS managed tags for the task. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging Your Amazon ECS Resources</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><br>
    ///   - [`enable_execute_command(bool)`](crate::operation::run_task::builders::RunTaskFluentBuilder::enable_execute_command) / [`set_enable_execute_command(Option<bool>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_enable_execute_command):<br>required: **false**<br><p>Determines whether to use the execute command functionality for the containers in this task. If <code>true</code>, this enables execute command functionality on all containers in the task.</p>  <p>If <code>true</code>, then the task definition must have a task role, or you must provide one as an override.</p><br>
    ///   - [`group(impl Into<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::group) / [`set_group(Option<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_group):<br>required: **false**<br><p>The name of the task group to associate with the task. The default value is the family name of the task definition (for example, <code>family:my-family-name</code>).</p><br>
    ///   - [`launch_type(LaunchType)`](crate::operation::run_task::builders::RunTaskFluentBuilder::launch_type) / [`set_launch_type(Option<LaunchType>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_launch_type):<br>required: **false**<br><p>The infrastructure to run your standalone task on. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>  <p>The <code>FARGATE</code> launch type runs your tasks on Fargate On-Demand infrastructure.</p> <note>   <p>Fargate Spot infrastructure is available for use but a capacity provider strategy must be used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/fargate-capacity-providers.html">Fargate capacity providers</a> in the <i>Amazon ECS User Guide for Fargate</i>.</p>  </note>  <p>The <code>EC2</code> launch type runs your tasks on Amazon EC2 instances registered to your cluster.</p>  <p>The <code>EXTERNAL</code> launch type runs your tasks on your on-premises server or virtual machine (VM) capacity registered to your cluster.</p>  <p>A task can use either a launch type or a capacity provider strategy. If a <code>launchType</code> is specified, the <code>capacityProviderStrategy</code> parameter must be omitted.</p>  <p>When you use cluster auto scaling, you must specify <code>capacityProviderStrategy</code> and not <code>launchType</code>. </p><br>
    ///   - [`network_configuration(NetworkConfiguration)`](crate::operation::run_task::builders::RunTaskFluentBuilder::network_configuration) / [`set_network_configuration(Option<NetworkConfiguration>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_network_configuration):<br>required: **false**<br><p>The network configuration for the task. This parameter is required for task definitions that use the <code>awsvpc</code> network mode to receive their own elastic network interface, and it isn't supported for other network modes. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Task networking</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><br>
    ///   - [`overrides(TaskOverride)`](crate::operation::run_task::builders::RunTaskFluentBuilder::overrides) / [`set_overrides(Option<TaskOverride>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_overrides):<br>required: **false**<br><p>A list of container overrides in JSON format that specify the name of a container in the specified task definition and the overrides it should receive. You can override the default command for a container (that's specified in the task definition or Docker image) with a <code>command</code> override. You can also override existing environment variables (that are specified in the task definition or Docker image) on a container or add new environment variables to it with an <code>environment</code> override.</p>  <p>A total of 8192 characters are allowed for overrides. This limit includes the JSON formatting characters of the override structure.</p><br>
    ///   - [`placement_constraints(PlacementConstraint)`](crate::operation::run_task::builders::RunTaskFluentBuilder::placement_constraints) / [`set_placement_constraints(Option<Vec::<PlacementConstraint>>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_placement_constraints):<br>required: **false**<br><p>An array of placement constraint objects to use for the task. You can specify up to 10 constraints for each task (including constraints in the task definition and those specified at runtime).</p><br>
    ///   - [`placement_strategy(PlacementStrategy)`](crate::operation::run_task::builders::RunTaskFluentBuilder::placement_strategy) / [`set_placement_strategy(Option<Vec::<PlacementStrategy>>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_placement_strategy):<br>required: **false**<br><p>The placement strategy objects to use for the task. You can specify a maximum of 5 strategy rules for each task.</p><br>
    ///   - [`platform_version(impl Into<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::platform_version) / [`set_platform_version(Option<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_platform_version):<br>required: **false**<br><p>The platform version the task uses. A platform version is only specified for tasks hosted on Fargate. If one isn't specified, the <code>LATEST</code> platform version is used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate platform versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><br>
    ///   - [`propagate_tags(PropagateTags)`](crate::operation::run_task::builders::RunTaskFluentBuilder::propagate_tags) / [`set_propagate_tags(Option<PropagateTags>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_propagate_tags):<br>required: **false**<br><p>Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the <code>TagResource</code> API action.</p> <note>   <p>An error will be received if you specify the <code>SERVICE</code> option when running a task.</p>  </note><br>
    ///   - [`reference_id(impl Into<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::reference_id) / [`set_reference_id(Option<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_reference_id):<br>required: **false**<br><p>The reference ID to use for the task. The reference ID can have a maximum length of 1024 characters.</p><br>
    ///   - [`started_by(impl Into<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::started_by) / [`set_started_by(Option<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_started_by):<br>required: **false**<br><p>An optional tag specified when a task is started. For example, if you automatically trigger a task to run a batch process job, you could apply a unique identifier for that job to your task with the <code>startedBy</code> parameter. You can then identify which tasks belong to that job by filtering the results of a <code>ListTasks</code> call with the <code>startedBy</code> value. Up to 36 letters (uppercase and lowercase), numbers, hyphens (-), and underscores (_) are allowed.</p>  <p>If a task is started by an Amazon ECS service, then the <code>startedBy</code> parameter contains the deployment ID of the service that starts it.</p><br>
    ///   - [`tags(Tag)`](crate::operation::run_task::builders::RunTaskFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_tags):<br>required: **false**<br><p>The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case-sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.</p> </li>  </ul><br>
    ///   - [`task_definition(impl Into<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::task_definition) / [`set_task_definition(Option<String>)`](crate::operation::run_task::builders::RunTaskFluentBuilder::set_task_definition):<br>required: **true**<br><p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or full ARN of the task definition to run. If a <code>revision</code> isn't specified, the latest <code>ACTIVE</code> revision is used.</p>  <p>When you create a policy for run-task, you can set the resource to be the latest task definition revision, or a specific revision.</p>  <p>The full ARN value must match the value that you specified as the <code>Resource</code> of the principal's permissions policy.</p>  <p>When you specify the policy resource as the latest task definition version (by setting the <code>Resource</code> in the policy to <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName</code>), then set this value to <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName</code>.</p>  <p>When you specify the policy resource as a specific task definition version (by setting the <code>Resource</code> in the policy to <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:1</code> or <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*</code>), then set this value to <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:1</code>.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-resources">Policy Resources for Amazon ECS</a> in the Amazon Elastic Container Service developer Guide.</p><br>
    /// - On success, responds with [`RunTaskOutput`](crate::operation::run_task::RunTaskOutput) with field(s):
    ///   - [`tasks(Option<Vec::<Task>>)`](crate::operation::run_task::RunTaskOutput::tasks): <p>A full description of the tasks that were run. The tasks that were successfully placed on your cluster are described here.</p>
    ///   - [`failures(Option<Vec::<Failure>>)`](crate::operation::run_task::RunTaskOutput::failures): <p>Any failures associated with the call.</p>
    /// - On failure, responds with [`SdkError<RunTaskError>`](crate::operation::run_task::RunTaskError)
    pub fn run_task(&self) -> crate::operation::run_task::builders::RunTaskFluentBuilder {
        crate::operation::run_task::builders::RunTaskFluentBuilder::new(self.handle.clone())
    }
}
