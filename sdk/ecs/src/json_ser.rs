// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_capacity_provider_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCapacityProviderInput,
) {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1);
    }
    if let Some(var_2) = &input.auto_scaling_group_provider {
        let mut object_3 = object.key("autoScalingGroupProvider").start_object();
        crate::json_ser::serialize_structure_auto_scaling_group_provider(&mut object_3, var_2);
        object_3.finish();
    }
    if let Some(var_4) = &input.tags {
        let mut array_5 = object.key("tags").start_array();
        for item_6 in var_4 {
            let mut object_7 = array_5.value().start_object();
            crate::json_ser::serialize_structure_tag(&mut object_7, item_6);
            object_7.finish();
        }
        array_5.finish();
    }
}

pub fn serialize_structure_create_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClusterInput,
) {
    if let Some(var_8) = &input.cluster_name {
        object.key("clusterName").string(var_8);
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("tags").start_array();
        for item_11 in var_9 {
            let mut object_12 = array_10.value().start_object();
            crate::json_ser::serialize_structure_tag(&mut object_12, item_11);
            object_12.finish();
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.settings {
        let mut array_14 = object.key("settings").start_array();
        for item_15 in var_13 {
            let mut object_16 = array_14.value().start_object();
            crate::json_ser::serialize_structure_cluster_setting(&mut object_16, item_15);
            object_16.finish();
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.configuration {
        let mut object_18 = object.key("configuration").start_object();
        crate::json_ser::serialize_structure_cluster_configuration(&mut object_18, var_17);
        object_18.finish();
    }
    if let Some(var_19) = &input.capacity_providers {
        let mut array_20 = object.key("capacityProviders").start_array();
        for item_21 in var_19 {
            array_20.value().string(item_21);
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.default_capacity_provider_strategy {
        let mut array_23 = object.key("defaultCapacityProviderStrategy").start_array();
        for item_24 in var_22 {
            let mut object_25 = array_23.value().start_object();
            crate::json_ser::serialize_structure_capacity_provider_strategy_item(
                &mut object_25,
                item_24,
            );
            object_25.finish();
        }
        array_23.finish();
    }
}

pub fn serialize_structure_create_service_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceInput,
) {
    if let Some(var_26) = &input.cluster {
        object.key("cluster").string(var_26);
    }
    if let Some(var_27) = &input.service_name {
        object.key("serviceName").string(var_27);
    }
    if let Some(var_28) = &input.task_definition {
        object.key("taskDefinition").string(var_28);
    }
    if let Some(var_29) = &input.load_balancers {
        let mut array_30 = object.key("loadBalancers").start_array();
        for item_31 in var_29 {
            let mut object_32 = array_30.value().start_object();
            crate::json_ser::serialize_structure_load_balancer(&mut object_32, item_31);
            object_32.finish();
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.service_registries {
        let mut array_34 = object.key("serviceRegistries").start_array();
        for item_35 in var_33 {
            let mut object_36 = array_34.value().start_object();
            crate::json_ser::serialize_structure_service_registry(&mut object_36, item_35);
            object_36.finish();
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.desired_count {
        object.key("desiredCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    if let Some(var_38) = &input.client_token {
        object.key("clientToken").string(var_38);
    }
    if let Some(var_39) = &input.launch_type {
        object.key("launchType").string(var_39.as_str());
    }
    if let Some(var_40) = &input.capacity_provider_strategy {
        let mut array_41 = object.key("capacityProviderStrategy").start_array();
        for item_42 in var_40 {
            let mut object_43 = array_41.value().start_object();
            crate::json_ser::serialize_structure_capacity_provider_strategy_item(
                &mut object_43,
                item_42,
            );
            object_43.finish();
        }
        array_41.finish();
    }
    if let Some(var_44) = &input.platform_version {
        object.key("platformVersion").string(var_44);
    }
    if let Some(var_45) = &input.role {
        object.key("role").string(var_45);
    }
    if let Some(var_46) = &input.deployment_configuration {
        let mut object_47 = object.key("deploymentConfiguration").start_object();
        crate::json_ser::serialize_structure_deployment_configuration(&mut object_47, var_46);
        object_47.finish();
    }
    if let Some(var_48) = &input.placement_constraints {
        let mut array_49 = object.key("placementConstraints").start_array();
        for item_50 in var_48 {
            let mut object_51 = array_49.value().start_object();
            crate::json_ser::serialize_structure_placement_constraint(&mut object_51, item_50);
            object_51.finish();
        }
        array_49.finish();
    }
    if let Some(var_52) = &input.placement_strategy {
        let mut array_53 = object.key("placementStrategy").start_array();
        for item_54 in var_52 {
            let mut object_55 = array_53.value().start_object();
            crate::json_ser::serialize_structure_placement_strategy(&mut object_55, item_54);
            object_55.finish();
        }
        array_53.finish();
    }
    if let Some(var_56) = &input.network_configuration {
        let mut object_57 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_network_configuration(&mut object_57, var_56);
        object_57.finish();
    }
    if let Some(var_58) = &input.health_check_grace_period_seconds {
        object.key("healthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    if let Some(var_59) = &input.scheduling_strategy {
        object.key("schedulingStrategy").string(var_59.as_str());
    }
    if let Some(var_60) = &input.deployment_controller {
        let mut object_61 = object.key("deploymentController").start_object();
        crate::json_ser::serialize_structure_deployment_controller(&mut object_61, var_60);
        object_61.finish();
    }
    if let Some(var_62) = &input.tags {
        let mut array_63 = object.key("tags").start_array();
        for item_64 in var_62 {
            let mut object_65 = array_63.value().start_object();
            crate::json_ser::serialize_structure_tag(&mut object_65, item_64);
            object_65.finish();
        }
        array_63.finish();
    }
    object
        .key("enableECSManagedTags")
        .boolean(input.enable_ecs_managed_tags);
    if let Some(var_66) = &input.propagate_tags {
        object.key("propagateTags").string(var_66.as_str());
    }
    object
        .key("enableExecuteCommand")
        .boolean(input.enable_execute_command);
}

pub fn serialize_structure_create_task_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTaskSetInput,
) {
    if let Some(var_67) = &input.service {
        object.key("service").string(var_67);
    }
    if let Some(var_68) = &input.cluster {
        object.key("cluster").string(var_68);
    }
    if let Some(var_69) = &input.external_id {
        object.key("externalId").string(var_69);
    }
    if let Some(var_70) = &input.task_definition {
        object.key("taskDefinition").string(var_70);
    }
    if let Some(var_71) = &input.network_configuration {
        let mut object_72 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_network_configuration(&mut object_72, var_71);
        object_72.finish();
    }
    if let Some(var_73) = &input.load_balancers {
        let mut array_74 = object.key("loadBalancers").start_array();
        for item_75 in var_73 {
            let mut object_76 = array_74.value().start_object();
            crate::json_ser::serialize_structure_load_balancer(&mut object_76, item_75);
            object_76.finish();
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.service_registries {
        let mut array_78 = object.key("serviceRegistries").start_array();
        for item_79 in var_77 {
            let mut object_80 = array_78.value().start_object();
            crate::json_ser::serialize_structure_service_registry(&mut object_80, item_79);
            object_80.finish();
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.launch_type {
        object.key("launchType").string(var_81.as_str());
    }
    if let Some(var_82) = &input.capacity_provider_strategy {
        let mut array_83 = object.key("capacityProviderStrategy").start_array();
        for item_84 in var_82 {
            let mut object_85 = array_83.value().start_object();
            crate::json_ser::serialize_structure_capacity_provider_strategy_item(
                &mut object_85,
                item_84,
            );
            object_85.finish();
        }
        array_83.finish();
    }
    if let Some(var_86) = &input.platform_version {
        object.key("platformVersion").string(var_86);
    }
    if let Some(var_87) = &input.scale {
        let mut object_88 = object.key("scale").start_object();
        crate::json_ser::serialize_structure_scale(&mut object_88, var_87);
        object_88.finish();
    }
    if let Some(var_89) = &input.client_token {
        object.key("clientToken").string(var_89);
    }
    if let Some(var_90) = &input.tags {
        let mut array_91 = object.key("tags").start_array();
        for item_92 in var_90 {
            let mut object_93 = array_91.value().start_object();
            crate::json_ser::serialize_structure_tag(&mut object_93, item_92);
            object_93.finish();
        }
        array_91.finish();
    }
}

pub fn serialize_structure_delete_account_setting_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAccountSettingInput,
) {
    if let Some(var_94) = &input.name {
        object.key("name").string(var_94.as_str());
    }
    if let Some(var_95) = &input.principal_arn {
        object.key("principalArn").string(var_95);
    }
}

pub fn serialize_structure_delete_attributes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAttributesInput,
) {
    if let Some(var_96) = &input.cluster {
        object.key("cluster").string(var_96);
    }
    if let Some(var_97) = &input.attributes {
        let mut array_98 = object.key("attributes").start_array();
        for item_99 in var_97 {
            let mut object_100 = array_98.value().start_object();
            crate::json_ser::serialize_structure_attribute(&mut object_100, item_99);
            object_100.finish();
        }
        array_98.finish();
    }
}

pub fn serialize_structure_delete_capacity_provider_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCapacityProviderInput,
) {
    if let Some(var_101) = &input.capacity_provider {
        object.key("capacityProvider").string(var_101);
    }
}

pub fn serialize_structure_delete_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClusterInput,
) {
    if let Some(var_102) = &input.cluster {
        object.key("cluster").string(var_102);
    }
}

pub fn serialize_structure_delete_service_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServiceInput,
) {
    if let Some(var_103) = &input.cluster {
        object.key("cluster").string(var_103);
    }
    if let Some(var_104) = &input.service {
        object.key("service").string(var_104);
    }
    if let Some(var_105) = &input.force {
        object.key("force").boolean(*var_105);
    }
}

pub fn serialize_structure_delete_task_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTaskSetInput,
) {
    if let Some(var_106) = &input.cluster {
        object.key("cluster").string(var_106);
    }
    if let Some(var_107) = &input.service {
        object.key("service").string(var_107);
    }
    if let Some(var_108) = &input.task_set {
        object.key("taskSet").string(var_108);
    }
    if let Some(var_109) = &input.force {
        object.key("force").boolean(*var_109);
    }
}

pub fn serialize_structure_deregister_container_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterContainerInstanceInput,
) {
    if let Some(var_110) = &input.cluster {
        object.key("cluster").string(var_110);
    }
    if let Some(var_111) = &input.container_instance {
        object.key("containerInstance").string(var_111);
    }
    if let Some(var_112) = &input.force {
        object.key("force").boolean(*var_112);
    }
}

pub fn serialize_structure_deregister_task_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTaskDefinitionInput,
) {
    if let Some(var_113) = &input.task_definition {
        object.key("taskDefinition").string(var_113);
    }
}

pub fn serialize_structure_describe_capacity_providers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCapacityProvidersInput,
) {
    if let Some(var_114) = &input.capacity_providers {
        let mut array_115 = object.key("capacityProviders").start_array();
        for item_116 in var_114 {
            array_115.value().string(item_116);
        }
        array_115.finish();
    }
    if let Some(var_117) = &input.include {
        let mut array_118 = object.key("include").start_array();
        for item_119 in var_117 {
            array_118.value().string(item_119.as_str());
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_120).into()),
        );
    }
    if let Some(var_121) = &input.next_token {
        object.key("nextToken").string(var_121);
    }
}

pub fn serialize_structure_describe_clusters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeClustersInput,
) {
    if let Some(var_122) = &input.clusters {
        let mut array_123 = object.key("clusters").start_array();
        for item_124 in var_122 {
            array_123.value().string(item_124);
        }
        array_123.finish();
    }
    if let Some(var_125) = &input.include {
        let mut array_126 = object.key("include").start_array();
        for item_127 in var_125 {
            array_126.value().string(item_127.as_str());
        }
        array_126.finish();
    }
}

pub fn serialize_structure_describe_container_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContainerInstancesInput,
) {
    if let Some(var_128) = &input.cluster {
        object.key("cluster").string(var_128);
    }
    if let Some(var_129) = &input.container_instances {
        let mut array_130 = object.key("containerInstances").start_array();
        for item_131 in var_129 {
            array_130.value().string(item_131);
        }
        array_130.finish();
    }
    if let Some(var_132) = &input.include {
        let mut array_133 = object.key("include").start_array();
        for item_134 in var_132 {
            array_133.value().string(item_134.as_str());
        }
        array_133.finish();
    }
}

pub fn serialize_structure_describe_services_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeServicesInput,
) {
    if let Some(var_135) = &input.cluster {
        object.key("cluster").string(var_135);
    }
    if let Some(var_136) = &input.services {
        let mut array_137 = object.key("services").start_array();
        for item_138 in var_136 {
            array_137.value().string(item_138);
        }
        array_137.finish();
    }
    if let Some(var_139) = &input.include {
        let mut array_140 = object.key("include").start_array();
        for item_141 in var_139 {
            array_140.value().string(item_141.as_str());
        }
        array_140.finish();
    }
}

pub fn serialize_structure_describe_task_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTaskDefinitionInput,
) {
    if let Some(var_142) = &input.task_definition {
        object.key("taskDefinition").string(var_142);
    }
    if let Some(var_143) = &input.include {
        let mut array_144 = object.key("include").start_array();
        for item_145 in var_143 {
            array_144.value().string(item_145.as_str());
        }
        array_144.finish();
    }
}

pub fn serialize_structure_describe_tasks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTasksInput,
) {
    if let Some(var_146) = &input.cluster {
        object.key("cluster").string(var_146);
    }
    if let Some(var_147) = &input.tasks {
        let mut array_148 = object.key("tasks").start_array();
        for item_149 in var_147 {
            array_148.value().string(item_149);
        }
        array_148.finish();
    }
    if let Some(var_150) = &input.include {
        let mut array_151 = object.key("include").start_array();
        for item_152 in var_150 {
            array_151.value().string(item_152.as_str());
        }
        array_151.finish();
    }
}

pub fn serialize_structure_describe_task_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTaskSetsInput,
) {
    if let Some(var_153) = &input.cluster {
        object.key("cluster").string(var_153);
    }
    if let Some(var_154) = &input.service {
        object.key("service").string(var_154);
    }
    if let Some(var_155) = &input.task_sets {
        let mut array_156 = object.key("taskSets").start_array();
        for item_157 in var_155 {
            array_156.value().string(item_157);
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.include {
        let mut array_159 = object.key("include").start_array();
        for item_160 in var_158 {
            array_159.value().string(item_160.as_str());
        }
        array_159.finish();
    }
}

pub fn serialize_structure_discover_poll_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DiscoverPollEndpointInput,
) {
    if let Some(var_161) = &input.container_instance {
        object.key("containerInstance").string(var_161);
    }
    if let Some(var_162) = &input.cluster {
        object.key("cluster").string(var_162);
    }
}

pub fn serialize_structure_execute_command_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExecuteCommandInput,
) {
    if let Some(var_163) = &input.cluster {
        object.key("cluster").string(var_163);
    }
    if let Some(var_164) = &input.container {
        object.key("container").string(var_164);
    }
    if let Some(var_165) = &input.command {
        object.key("command").string(var_165);
    }
    object.key("interactive").boolean(input.interactive);
    if let Some(var_166) = &input.task {
        object.key("task").string(var_166);
    }
}

pub fn serialize_structure_list_account_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccountSettingsInput,
) {
    if let Some(var_167) = &input.name {
        object.key("name").string(var_167.as_str());
    }
    if let Some(var_168) = &input.value {
        object.key("value").string(var_168);
    }
    if let Some(var_169) = &input.principal_arn {
        object.key("principalArn").string(var_169);
    }
    object
        .key("effectiveSettings")
        .boolean(input.effective_settings);
    if let Some(var_170) = &input.next_token {
        object.key("nextToken").string(var_170);
    }
    object.key("maxResults").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.max_results).into()),
    );
}

pub fn serialize_structure_list_attributes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAttributesInput,
) {
    if let Some(var_171) = &input.cluster {
        object.key("cluster").string(var_171);
    }
    if let Some(var_172) = &input.target_type {
        object.key("targetType").string(var_172.as_str());
    }
    if let Some(var_173) = &input.attribute_name {
        object.key("attributeName").string(var_173);
    }
    if let Some(var_174) = &input.attribute_value {
        object.key("attributeValue").string(var_174);
    }
    if let Some(var_175) = &input.next_token {
        object.key("nextToken").string(var_175);
    }
    if let Some(var_176) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_176).into()),
        );
    }
}

pub fn serialize_structure_list_clusters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListClustersInput,
) {
    if let Some(var_177) = &input.next_token {
        object.key("nextToken").string(var_177);
    }
    if let Some(var_178) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_178).into()),
        );
    }
}

pub fn serialize_structure_list_container_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContainerInstancesInput,
) {
    if let Some(var_179) = &input.cluster {
        object.key("cluster").string(var_179);
    }
    if let Some(var_180) = &input.filter {
        object.key("filter").string(var_180);
    }
    if let Some(var_181) = &input.next_token {
        object.key("nextToken").string(var_181);
    }
    if let Some(var_182) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    if let Some(var_183) = &input.status {
        object.key("status").string(var_183.as_str());
    }
}

pub fn serialize_structure_list_services_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServicesInput,
) {
    if let Some(var_184) = &input.cluster {
        object.key("cluster").string(var_184);
    }
    if let Some(var_185) = &input.next_token {
        object.key("nextToken").string(var_185);
    }
    if let Some(var_186) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_186).into()),
        );
    }
    if let Some(var_187) = &input.launch_type {
        object.key("launchType").string(var_187.as_str());
    }
    if let Some(var_188) = &input.scheduling_strategy {
        object.key("schedulingStrategy").string(var_188.as_str());
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_189) = &input.resource_arn {
        object.key("resourceArn").string(var_189);
    }
}

pub fn serialize_structure_list_task_definition_families_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTaskDefinitionFamiliesInput,
) {
    if let Some(var_190) = &input.family_prefix {
        object.key("familyPrefix").string(var_190);
    }
    if let Some(var_191) = &input.status {
        object.key("status").string(var_191.as_str());
    }
    if let Some(var_192) = &input.next_token {
        object.key("nextToken").string(var_192);
    }
    if let Some(var_193) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_193).into()),
        );
    }
}

pub fn serialize_structure_list_task_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTaskDefinitionsInput,
) {
    if let Some(var_194) = &input.family_prefix {
        object.key("familyPrefix").string(var_194);
    }
    if let Some(var_195) = &input.status {
        object.key("status").string(var_195.as_str());
    }
    if let Some(var_196) = &input.sort {
        object.key("sort").string(var_196.as_str());
    }
    if let Some(var_197) = &input.next_token {
        object.key("nextToken").string(var_197);
    }
    if let Some(var_198) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_198).into()),
        );
    }
}

pub fn serialize_structure_list_tasks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTasksInput,
) {
    if let Some(var_199) = &input.cluster {
        object.key("cluster").string(var_199);
    }
    if let Some(var_200) = &input.container_instance {
        object.key("containerInstance").string(var_200);
    }
    if let Some(var_201) = &input.family {
        object.key("family").string(var_201);
    }
    if let Some(var_202) = &input.next_token {
        object.key("nextToken").string(var_202);
    }
    if let Some(var_203) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_203).into()),
        );
    }
    if let Some(var_204) = &input.started_by {
        object.key("startedBy").string(var_204);
    }
    if let Some(var_205) = &input.service_name {
        object.key("serviceName").string(var_205);
    }
    if let Some(var_206) = &input.desired_status {
        object.key("desiredStatus").string(var_206.as_str());
    }
    if let Some(var_207) = &input.launch_type {
        object.key("launchType").string(var_207.as_str());
    }
}

pub fn serialize_structure_put_account_setting_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccountSettingInput,
) {
    if let Some(var_208) = &input.name {
        object.key("name").string(var_208.as_str());
    }
    if let Some(var_209) = &input.value {
        object.key("value").string(var_209);
    }
    if let Some(var_210) = &input.principal_arn {
        object.key("principalArn").string(var_210);
    }
}

pub fn serialize_structure_put_account_setting_default_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccountSettingDefaultInput,
) {
    if let Some(var_211) = &input.name {
        object.key("name").string(var_211.as_str());
    }
    if let Some(var_212) = &input.value {
        object.key("value").string(var_212);
    }
}

pub fn serialize_structure_put_attributes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAttributesInput,
) {
    if let Some(var_213) = &input.cluster {
        object.key("cluster").string(var_213);
    }
    if let Some(var_214) = &input.attributes {
        let mut array_215 = object.key("attributes").start_array();
        for item_216 in var_214 {
            let mut object_217 = array_215.value().start_object();
            crate::json_ser::serialize_structure_attribute(&mut object_217, item_216);
            object_217.finish();
        }
        array_215.finish();
    }
}

pub fn serialize_structure_put_cluster_capacity_providers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutClusterCapacityProvidersInput,
) {
    if let Some(var_218) = &input.cluster {
        object.key("cluster").string(var_218);
    }
    if let Some(var_219) = &input.capacity_providers {
        let mut array_220 = object.key("capacityProviders").start_array();
        for item_221 in var_219 {
            array_220.value().string(item_221);
        }
        array_220.finish();
    }
    if let Some(var_222) = &input.default_capacity_provider_strategy {
        let mut array_223 = object.key("defaultCapacityProviderStrategy").start_array();
        for item_224 in var_222 {
            let mut object_225 = array_223.value().start_object();
            crate::json_ser::serialize_structure_capacity_provider_strategy_item(
                &mut object_225,
                item_224,
            );
            object_225.finish();
        }
        array_223.finish();
    }
}

pub fn serialize_structure_register_container_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterContainerInstanceInput,
) {
    if let Some(var_226) = &input.cluster {
        object.key("cluster").string(var_226);
    }
    if let Some(var_227) = &input.instance_identity_document {
        object.key("instanceIdentityDocument").string(var_227);
    }
    if let Some(var_228) = &input.instance_identity_document_signature {
        object
            .key("instanceIdentityDocumentSignature")
            .string(var_228);
    }
    if let Some(var_229) = &input.total_resources {
        let mut array_230 = object.key("totalResources").start_array();
        for item_231 in var_229 {
            let mut object_232 = array_230.value().start_object();
            crate::json_ser::serialize_structure_resource(&mut object_232, item_231);
            object_232.finish();
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.version_info {
        let mut object_234 = object.key("versionInfo").start_object();
        crate::json_ser::serialize_structure_version_info(&mut object_234, var_233);
        object_234.finish();
    }
    if let Some(var_235) = &input.container_instance_arn {
        object.key("containerInstanceArn").string(var_235);
    }
    if let Some(var_236) = &input.attributes {
        let mut array_237 = object.key("attributes").start_array();
        for item_238 in var_236 {
            let mut object_239 = array_237.value().start_object();
            crate::json_ser::serialize_structure_attribute(&mut object_239, item_238);
            object_239.finish();
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.platform_devices {
        let mut array_241 = object.key("platformDevices").start_array();
        for item_242 in var_240 {
            let mut object_243 = array_241.value().start_object();
            crate::json_ser::serialize_structure_platform_device(&mut object_243, item_242);
            object_243.finish();
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.tags {
        let mut array_245 = object.key("tags").start_array();
        for item_246 in var_244 {
            let mut object_247 = array_245.value().start_object();
            crate::json_ser::serialize_structure_tag(&mut object_247, item_246);
            object_247.finish();
        }
        array_245.finish();
    }
}

pub fn serialize_structure_register_task_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTaskDefinitionInput,
) {
    if let Some(var_248) = &input.family {
        object.key("family").string(var_248);
    }
    if let Some(var_249) = &input.task_role_arn {
        object.key("taskRoleArn").string(var_249);
    }
    if let Some(var_250) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_250);
    }
    if let Some(var_251) = &input.network_mode {
        object.key("networkMode").string(var_251.as_str());
    }
    if let Some(var_252) = &input.container_definitions {
        let mut array_253 = object.key("containerDefinitions").start_array();
        for item_254 in var_252 {
            let mut object_255 = array_253.value().start_object();
            crate::json_ser::serialize_structure_container_definition(&mut object_255, item_254);
            object_255.finish();
        }
        array_253.finish();
    }
    if let Some(var_256) = &input.volumes {
        let mut array_257 = object.key("volumes").start_array();
        for item_258 in var_256 {
            let mut object_259 = array_257.value().start_object();
            crate::json_ser::serialize_structure_volume(&mut object_259, item_258);
            object_259.finish();
        }
        array_257.finish();
    }
    if let Some(var_260) = &input.placement_constraints {
        let mut array_261 = object.key("placementConstraints").start_array();
        for item_262 in var_260 {
            let mut object_263 = array_261.value().start_object();
            crate::json_ser::serialize_structure_task_definition_placement_constraint(
                &mut object_263,
                item_262,
            );
            object_263.finish();
        }
        array_261.finish();
    }
    if let Some(var_264) = &input.requires_compatibilities {
        let mut array_265 = object.key("requiresCompatibilities").start_array();
        for item_266 in var_264 {
            array_265.value().string(item_266.as_str());
        }
        array_265.finish();
    }
    if let Some(var_267) = &input.cpu {
        object.key("cpu").string(var_267);
    }
    if let Some(var_268) = &input.memory {
        object.key("memory").string(var_268);
    }
    if let Some(var_269) = &input.tags {
        let mut array_270 = object.key("tags").start_array();
        for item_271 in var_269 {
            let mut object_272 = array_270.value().start_object();
            crate::json_ser::serialize_structure_tag(&mut object_272, item_271);
            object_272.finish();
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.pid_mode {
        object.key("pidMode").string(var_273.as_str());
    }
    if let Some(var_274) = &input.ipc_mode {
        object.key("ipcMode").string(var_274.as_str());
    }
    if let Some(var_275) = &input.proxy_configuration {
        let mut object_276 = object.key("proxyConfiguration").start_object();
        crate::json_ser::serialize_structure_proxy_configuration(&mut object_276, var_275);
        object_276.finish();
    }
    if let Some(var_277) = &input.inference_accelerators {
        let mut array_278 = object.key("inferenceAccelerators").start_array();
        for item_279 in var_277 {
            let mut object_280 = array_278.value().start_object();
            crate::json_ser::serialize_structure_inference_accelerator(&mut object_280, item_279);
            object_280.finish();
        }
        array_278.finish();
    }
    if let Some(var_281) = &input.ephemeral_storage {
        let mut object_282 = object.key("ephemeralStorage").start_object();
        crate::json_ser::serialize_structure_ephemeral_storage(&mut object_282, var_281);
        object_282.finish();
    }
}

pub fn serialize_structure_run_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunTaskInput,
) {
    if let Some(var_283) = &input.capacity_provider_strategy {
        let mut array_284 = object.key("capacityProviderStrategy").start_array();
        for item_285 in var_283 {
            let mut object_286 = array_284.value().start_object();
            crate::json_ser::serialize_structure_capacity_provider_strategy_item(
                &mut object_286,
                item_285,
            );
            object_286.finish();
        }
        array_284.finish();
    }
    if let Some(var_287) = &input.cluster {
        object.key("cluster").string(var_287);
    }
    if let Some(var_288) = &input.count {
        object.key("count").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_288).into()),
        );
    }
    object
        .key("enableECSManagedTags")
        .boolean(input.enable_ecs_managed_tags);
    object
        .key("enableExecuteCommand")
        .boolean(input.enable_execute_command);
    if let Some(var_289) = &input.group {
        object.key("group").string(var_289);
    }
    if let Some(var_290) = &input.launch_type {
        object.key("launchType").string(var_290.as_str());
    }
    if let Some(var_291) = &input.network_configuration {
        let mut object_292 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_network_configuration(&mut object_292, var_291);
        object_292.finish();
    }
    if let Some(var_293) = &input.overrides {
        let mut object_294 = object.key("overrides").start_object();
        crate::json_ser::serialize_structure_task_override(&mut object_294, var_293);
        object_294.finish();
    }
    if let Some(var_295) = &input.placement_constraints {
        let mut array_296 = object.key("placementConstraints").start_array();
        for item_297 in var_295 {
            let mut object_298 = array_296.value().start_object();
            crate::json_ser::serialize_structure_placement_constraint(&mut object_298, item_297);
            object_298.finish();
        }
        array_296.finish();
    }
    if let Some(var_299) = &input.placement_strategy {
        let mut array_300 = object.key("placementStrategy").start_array();
        for item_301 in var_299 {
            let mut object_302 = array_300.value().start_object();
            crate::json_ser::serialize_structure_placement_strategy(&mut object_302, item_301);
            object_302.finish();
        }
        array_300.finish();
    }
    if let Some(var_303) = &input.platform_version {
        object.key("platformVersion").string(var_303);
    }
    if let Some(var_304) = &input.propagate_tags {
        object.key("propagateTags").string(var_304.as_str());
    }
    if let Some(var_305) = &input.reference_id {
        object.key("referenceId").string(var_305);
    }
    if let Some(var_306) = &input.started_by {
        object.key("startedBy").string(var_306);
    }
    if let Some(var_307) = &input.tags {
        let mut array_308 = object.key("tags").start_array();
        for item_309 in var_307 {
            let mut object_310 = array_308.value().start_object();
            crate::json_ser::serialize_structure_tag(&mut object_310, item_309);
            object_310.finish();
        }
        array_308.finish();
    }
    if let Some(var_311) = &input.task_definition {
        object.key("taskDefinition").string(var_311);
    }
}

pub fn serialize_structure_start_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTaskInput,
) {
    if let Some(var_312) = &input.cluster {
        object.key("cluster").string(var_312);
    }
    if let Some(var_313) = &input.container_instances {
        let mut array_314 = object.key("containerInstances").start_array();
        for item_315 in var_313 {
            array_314.value().string(item_315);
        }
        array_314.finish();
    }
    object
        .key("enableECSManagedTags")
        .boolean(input.enable_ecs_managed_tags);
    object
        .key("enableExecuteCommand")
        .boolean(input.enable_execute_command);
    if let Some(var_316) = &input.group {
        object.key("group").string(var_316);
    }
    if let Some(var_317) = &input.network_configuration {
        let mut object_318 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_network_configuration(&mut object_318, var_317);
        object_318.finish();
    }
    if let Some(var_319) = &input.overrides {
        let mut object_320 = object.key("overrides").start_object();
        crate::json_ser::serialize_structure_task_override(&mut object_320, var_319);
        object_320.finish();
    }
    if let Some(var_321) = &input.propagate_tags {
        object.key("propagateTags").string(var_321.as_str());
    }
    if let Some(var_322) = &input.reference_id {
        object.key("referenceId").string(var_322);
    }
    if let Some(var_323) = &input.started_by {
        object.key("startedBy").string(var_323);
    }
    if let Some(var_324) = &input.tags {
        let mut array_325 = object.key("tags").start_array();
        for item_326 in var_324 {
            let mut object_327 = array_325.value().start_object();
            crate::json_ser::serialize_structure_tag(&mut object_327, item_326);
            object_327.finish();
        }
        array_325.finish();
    }
    if let Some(var_328) = &input.task_definition {
        object.key("taskDefinition").string(var_328);
    }
}

pub fn serialize_structure_stop_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTaskInput,
) {
    if let Some(var_329) = &input.cluster {
        object.key("cluster").string(var_329);
    }
    if let Some(var_330) = &input.task {
        object.key("task").string(var_330);
    }
    if let Some(var_331) = &input.reason {
        object.key("reason").string(var_331);
    }
}

pub fn serialize_structure_submit_attachment_state_changes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitAttachmentStateChangesInput,
) {
    if let Some(var_332) = &input.cluster {
        object.key("cluster").string(var_332);
    }
    if let Some(var_333) = &input.attachments {
        let mut array_334 = object.key("attachments").start_array();
        for item_335 in var_333 {
            let mut object_336 = array_334.value().start_object();
            crate::json_ser::serialize_structure_attachment_state_change(&mut object_336, item_335);
            object_336.finish();
        }
        array_334.finish();
    }
}

pub fn serialize_structure_submit_container_state_change_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitContainerStateChangeInput,
) {
    if let Some(var_337) = &input.cluster {
        object.key("cluster").string(var_337);
    }
    if let Some(var_338) = &input.task {
        object.key("task").string(var_338);
    }
    if let Some(var_339) = &input.container_name {
        object.key("containerName").string(var_339);
    }
    if let Some(var_340) = &input.runtime_id {
        object.key("runtimeId").string(var_340);
    }
    if let Some(var_341) = &input.status {
        object.key("status").string(var_341);
    }
    if let Some(var_342) = &input.exit_code {
        object.key("exitCode").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_342).into()),
        );
    }
    if let Some(var_343) = &input.reason {
        object.key("reason").string(var_343);
    }
    if let Some(var_344) = &input.network_bindings {
        let mut array_345 = object.key("networkBindings").start_array();
        for item_346 in var_344 {
            let mut object_347 = array_345.value().start_object();
            crate::json_ser::serialize_structure_network_binding(&mut object_347, item_346);
            object_347.finish();
        }
        array_345.finish();
    }
}

pub fn serialize_structure_submit_task_state_change_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitTaskStateChangeInput,
) {
    if let Some(var_348) = &input.cluster {
        object.key("cluster").string(var_348);
    }
    if let Some(var_349) = &input.task {
        object.key("task").string(var_349);
    }
    if let Some(var_350) = &input.status {
        object.key("status").string(var_350);
    }
    if let Some(var_351) = &input.reason {
        object.key("reason").string(var_351);
    }
    if let Some(var_352) = &input.containers {
        let mut array_353 = object.key("containers").start_array();
        for item_354 in var_352 {
            let mut object_355 = array_353.value().start_object();
            crate::json_ser::serialize_structure_container_state_change(&mut object_355, item_354);
            object_355.finish();
        }
        array_353.finish();
    }
    if let Some(var_356) = &input.attachments {
        let mut array_357 = object.key("attachments").start_array();
        for item_358 in var_356 {
            let mut object_359 = array_357.value().start_object();
            crate::json_ser::serialize_structure_attachment_state_change(&mut object_359, item_358);
            object_359.finish();
        }
        array_357.finish();
    }
    if let Some(var_360) = &input.managed_agents {
        let mut array_361 = object.key("managedAgents").start_array();
        for item_362 in var_360 {
            let mut object_363 = array_361.value().start_object();
            crate::json_ser::serialize_structure_managed_agent_state_change(
                &mut object_363,
                item_362,
            );
            object_363.finish();
        }
        array_361.finish();
    }
    if let Some(var_364) = &input.pull_started_at {
        object
            .key("pullStartedAt")
            .instant(var_364, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_365) = &input.pull_stopped_at {
        object
            .key("pullStoppedAt")
            .instant(var_365, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_366) = &input.execution_stopped_at {
        object
            .key("executionStoppedAt")
            .instant(var_366, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_367) = &input.resource_arn {
        object.key("resourceArn").string(var_367);
    }
    if let Some(var_368) = &input.tags {
        let mut array_369 = object.key("tags").start_array();
        for item_370 in var_368 {
            let mut object_371 = array_369.value().start_object();
            crate::json_ser::serialize_structure_tag(&mut object_371, item_370);
            object_371.finish();
        }
        array_369.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_372) = &input.resource_arn {
        object.key("resourceArn").string(var_372);
    }
    if let Some(var_373) = &input.tag_keys {
        let mut array_374 = object.key("tagKeys").start_array();
        for item_375 in var_373 {
            array_374.value().string(item_375);
        }
        array_374.finish();
    }
}

pub fn serialize_structure_update_capacity_provider_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCapacityProviderInput,
) {
    if let Some(var_376) = &input.name {
        object.key("name").string(var_376);
    }
    if let Some(var_377) = &input.auto_scaling_group_provider {
        let mut object_378 = object.key("autoScalingGroupProvider").start_object();
        crate::json_ser::serialize_structure_auto_scaling_group_provider_update(
            &mut object_378,
            var_377,
        );
        object_378.finish();
    }
}

pub fn serialize_structure_update_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClusterInput,
) {
    if let Some(var_379) = &input.cluster {
        object.key("cluster").string(var_379);
    }
    if let Some(var_380) = &input.settings {
        let mut array_381 = object.key("settings").start_array();
        for item_382 in var_380 {
            let mut object_383 = array_381.value().start_object();
            crate::json_ser::serialize_structure_cluster_setting(&mut object_383, item_382);
            object_383.finish();
        }
        array_381.finish();
    }
    if let Some(var_384) = &input.configuration {
        let mut object_385 = object.key("configuration").start_object();
        crate::json_ser::serialize_structure_cluster_configuration(&mut object_385, var_384);
        object_385.finish();
    }
}

pub fn serialize_structure_update_cluster_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClusterSettingsInput,
) {
    if let Some(var_386) = &input.cluster {
        object.key("cluster").string(var_386);
    }
    if let Some(var_387) = &input.settings {
        let mut array_388 = object.key("settings").start_array();
        for item_389 in var_387 {
            let mut object_390 = array_388.value().start_object();
            crate::json_ser::serialize_structure_cluster_setting(&mut object_390, item_389);
            object_390.finish();
        }
        array_388.finish();
    }
}

pub fn serialize_structure_update_container_agent_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContainerAgentInput,
) {
    if let Some(var_391) = &input.cluster {
        object.key("cluster").string(var_391);
    }
    if let Some(var_392) = &input.container_instance {
        object.key("containerInstance").string(var_392);
    }
}

pub fn serialize_structure_update_container_instances_state_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContainerInstancesStateInput,
) {
    if let Some(var_393) = &input.cluster {
        object.key("cluster").string(var_393);
    }
    if let Some(var_394) = &input.container_instances {
        let mut array_395 = object.key("containerInstances").start_array();
        for item_396 in var_394 {
            array_395.value().string(item_396);
        }
        array_395.finish();
    }
    if let Some(var_397) = &input.status {
        object.key("status").string(var_397.as_str());
    }
}

pub fn serialize_structure_update_service_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceInput,
) {
    if let Some(var_398) = &input.cluster {
        object.key("cluster").string(var_398);
    }
    if let Some(var_399) = &input.service {
        object.key("service").string(var_399);
    }
    if let Some(var_400) = &input.desired_count {
        object.key("desiredCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_400).into()),
        );
    }
    if let Some(var_401) = &input.task_definition {
        object.key("taskDefinition").string(var_401);
    }
    if let Some(var_402) = &input.capacity_provider_strategy {
        let mut array_403 = object.key("capacityProviderStrategy").start_array();
        for item_404 in var_402 {
            let mut object_405 = array_403.value().start_object();
            crate::json_ser::serialize_structure_capacity_provider_strategy_item(
                &mut object_405,
                item_404,
            );
            object_405.finish();
        }
        array_403.finish();
    }
    if let Some(var_406) = &input.deployment_configuration {
        let mut object_407 = object.key("deploymentConfiguration").start_object();
        crate::json_ser::serialize_structure_deployment_configuration(&mut object_407, var_406);
        object_407.finish();
    }
    if let Some(var_408) = &input.network_configuration {
        let mut object_409 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_network_configuration(&mut object_409, var_408);
        object_409.finish();
    }
    if let Some(var_410) = &input.placement_constraints {
        let mut array_411 = object.key("placementConstraints").start_array();
        for item_412 in var_410 {
            let mut object_413 = array_411.value().start_object();
            crate::json_ser::serialize_structure_placement_constraint(&mut object_413, item_412);
            object_413.finish();
        }
        array_411.finish();
    }
    if let Some(var_414) = &input.placement_strategy {
        let mut array_415 = object.key("placementStrategy").start_array();
        for item_416 in var_414 {
            let mut object_417 = array_415.value().start_object();
            crate::json_ser::serialize_structure_placement_strategy(&mut object_417, item_416);
            object_417.finish();
        }
        array_415.finish();
    }
    if let Some(var_418) = &input.platform_version {
        object.key("platformVersion").string(var_418);
    }
    object
        .key("forceNewDeployment")
        .boolean(input.force_new_deployment);
    if let Some(var_419) = &input.health_check_grace_period_seconds {
        object.key("healthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_419).into()),
        );
    }
    if let Some(var_420) = &input.enable_execute_command {
        object.key("enableExecuteCommand").boolean(*var_420);
    }
}

pub fn serialize_structure_update_service_primary_task_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServicePrimaryTaskSetInput,
) {
    if let Some(var_421) = &input.cluster {
        object.key("cluster").string(var_421);
    }
    if let Some(var_422) = &input.service {
        object.key("service").string(var_422);
    }
    if let Some(var_423) = &input.primary_task_set {
        object.key("primaryTaskSet").string(var_423);
    }
}

pub fn serialize_structure_update_task_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTaskSetInput,
) {
    if let Some(var_424) = &input.cluster {
        object.key("cluster").string(var_424);
    }
    if let Some(var_425) = &input.service {
        object.key("service").string(var_425);
    }
    if let Some(var_426) = &input.task_set {
        object.key("taskSet").string(var_426);
    }
    if let Some(var_427) = &input.scale {
        let mut object_428 = object.key("scale").start_object();
        crate::json_ser::serialize_structure_scale(&mut object_428, var_427);
        object_428.finish();
    }
}

pub fn serialize_structure_auto_scaling_group_provider(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingGroupProvider,
) {
    if let Some(var_429) = &input.auto_scaling_group_arn {
        object.key("autoScalingGroupArn").string(var_429);
    }
    if let Some(var_430) = &input.managed_scaling {
        let mut object_431 = object.key("managedScaling").start_object();
        crate::json_ser::serialize_structure_managed_scaling(&mut object_431, var_430);
        object_431.finish();
    }
    if let Some(var_432) = &input.managed_termination_protection {
        object
            .key("managedTerminationProtection")
            .string(var_432.as_str());
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_433) = &input.key {
        object.key("key").string(var_433);
    }
    if let Some(var_434) = &input.value {
        object.key("value").string(var_434);
    }
}

pub fn serialize_structure_cluster_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClusterSetting,
) {
    if let Some(var_435) = &input.name {
        object.key("name").string(var_435.as_str());
    }
    if let Some(var_436) = &input.value {
        object.key("value").string(var_436);
    }
}

pub fn serialize_structure_cluster_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClusterConfiguration,
) {
    if let Some(var_437) = &input.execute_command_configuration {
        let mut object_438 = object.key("executeCommandConfiguration").start_object();
        crate::json_ser::serialize_structure_execute_command_configuration(
            &mut object_438,
            var_437,
        );
        object_438.finish();
    }
}

pub fn serialize_structure_capacity_provider_strategy_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityProviderStrategyItem,
) {
    if let Some(var_439) = &input.capacity_provider {
        object.key("capacityProvider").string(var_439);
    }
    object.key("weight").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.weight).into()),
    );
    object.key("base").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.base).into()),
    );
}

pub fn serialize_structure_load_balancer(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoadBalancer,
) {
    if let Some(var_440) = &input.target_group_arn {
        object.key("targetGroupArn").string(var_440);
    }
    if let Some(var_441) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_441);
    }
    if let Some(var_442) = &input.container_name {
        object.key("containerName").string(var_442);
    }
    if let Some(var_443) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_443).into()),
        );
    }
}

pub fn serialize_structure_service_registry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceRegistry,
) {
    if let Some(var_444) = &input.registry_arn {
        object.key("registryArn").string(var_444);
    }
    if let Some(var_445) = &input.port {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_445).into()),
        );
    }
    if let Some(var_446) = &input.container_name {
        object.key("containerName").string(var_446);
    }
    if let Some(var_447) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_447).into()),
        );
    }
}

pub fn serialize_structure_deployment_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfiguration,
) {
    if let Some(var_448) = &input.deployment_circuit_breaker {
        let mut object_449 = object.key("deploymentCircuitBreaker").start_object();
        crate::json_ser::serialize_structure_deployment_circuit_breaker(&mut object_449, var_448);
        object_449.finish();
    }
    if let Some(var_450) = &input.maximum_percent {
        object.key("maximumPercent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_450).into()),
        );
    }
    if let Some(var_451) = &input.minimum_healthy_percent {
        object.key("minimumHealthyPercent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_451).into()),
        );
    }
}

pub fn serialize_structure_placement_constraint(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementConstraint,
) {
    if let Some(var_452) = &input.r#type {
        object.key("type").string(var_452.as_str());
    }
    if let Some(var_453) = &input.expression {
        object.key("expression").string(var_453);
    }
}

pub fn serialize_structure_placement_strategy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementStrategy,
) {
    if let Some(var_454) = &input.r#type {
        object.key("type").string(var_454.as_str());
    }
    if let Some(var_455) = &input.field {
        object.key("field").string(var_455);
    }
}

pub fn serialize_structure_network_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfiguration,
) {
    if let Some(var_456) = &input.awsvpc_configuration {
        let mut object_457 = object.key("awsvpcConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_vpc_configuration(&mut object_457, var_456);
        object_457.finish();
    }
}

pub fn serialize_structure_deployment_controller(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentController,
) {
    if let Some(var_458) = &input.r#type {
        object.key("type").string(var_458.as_str());
    }
}

pub fn serialize_structure_scale(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scale,
) {
    object.key("value").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::Float((input.value).into()),
    );
    if let Some(var_459) = &input.unit {
        object.key("unit").string(var_459.as_str());
    }
}

pub fn serialize_structure_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Attribute,
) {
    if let Some(var_460) = &input.name {
        object.key("name").string(var_460);
    }
    if let Some(var_461) = &input.value {
        object.key("value").string(var_461);
    }
    if let Some(var_462) = &input.target_type {
        object.key("targetType").string(var_462.as_str());
    }
    if let Some(var_463) = &input.target_id {
        object.key("targetId").string(var_463);
    }
}

pub fn serialize_structure_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Resource,
) {
    if let Some(var_464) = &input.name {
        object.key("name").string(var_464);
    }
    if let Some(var_465) = &input.r#type {
        object.key("type").string(var_465);
    }
    object.key("doubleValue").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::Float((input.double_value).into()),
    );
    object.key("longValue").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.long_value).into()),
    );
    object.key("integerValue").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.integer_value).into()),
    );
    if let Some(var_466) = &input.string_set_value {
        let mut array_467 = object.key("stringSetValue").start_array();
        for item_468 in var_466 {
            array_467.value().string(item_468);
        }
        array_467.finish();
    }
}

pub fn serialize_structure_version_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VersionInfo,
) {
    if let Some(var_469) = &input.agent_version {
        object.key("agentVersion").string(var_469);
    }
    if let Some(var_470) = &input.agent_hash {
        object.key("agentHash").string(var_470);
    }
    if let Some(var_471) = &input.docker_version {
        object.key("dockerVersion").string(var_471);
    }
}

pub fn serialize_structure_platform_device(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlatformDevice,
) {
    if let Some(var_472) = &input.id {
        object.key("id").string(var_472);
    }
    if let Some(var_473) = &input.r#type {
        object.key("type").string(var_473.as_str());
    }
}

pub fn serialize_structure_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) {
    if let Some(var_474) = &input.name {
        object.key("name").string(var_474);
    }
    if let Some(var_475) = &input.image {
        object.key("image").string(var_475);
    }
    if let Some(var_476) = &input.repository_credentials {
        let mut object_477 = object.key("repositoryCredentials").start_object();
        crate::json_ser::serialize_structure_repository_credentials(&mut object_477, var_476);
        object_477.finish();
    }
    object.key("cpu").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.cpu).into()),
    );
    if let Some(var_478) = &input.memory {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_478).into()),
        );
    }
    if let Some(var_479) = &input.memory_reservation {
        object.key("memoryReservation").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_479).into()),
        );
    }
    if let Some(var_480) = &input.links {
        let mut array_481 = object.key("links").start_array();
        for item_482 in var_480 {
            array_481.value().string(item_482);
        }
        array_481.finish();
    }
    if let Some(var_483) = &input.port_mappings {
        let mut array_484 = object.key("portMappings").start_array();
        for item_485 in var_483 {
            let mut object_486 = array_484.value().start_object();
            crate::json_ser::serialize_structure_port_mapping(&mut object_486, item_485);
            object_486.finish();
        }
        array_484.finish();
    }
    if let Some(var_487) = &input.essential {
        object.key("essential").boolean(*var_487);
    }
    if let Some(var_488) = &input.entry_point {
        let mut array_489 = object.key("entryPoint").start_array();
        for item_490 in var_488 {
            array_489.value().string(item_490);
        }
        array_489.finish();
    }
    if let Some(var_491) = &input.command {
        let mut array_492 = object.key("command").start_array();
        for item_493 in var_491 {
            array_492.value().string(item_493);
        }
        array_492.finish();
    }
    if let Some(var_494) = &input.environment {
        let mut array_495 = object.key("environment").start_array();
        for item_496 in var_494 {
            let mut object_497 = array_495.value().start_object();
            crate::json_ser::serialize_structure_key_value_pair(&mut object_497, item_496);
            object_497.finish();
        }
        array_495.finish();
    }
    if let Some(var_498) = &input.environment_files {
        let mut array_499 = object.key("environmentFiles").start_array();
        for item_500 in var_498 {
            let mut object_501 = array_499.value().start_object();
            crate::json_ser::serialize_structure_environment_file(&mut object_501, item_500);
            object_501.finish();
        }
        array_499.finish();
    }
    if let Some(var_502) = &input.mount_points {
        let mut array_503 = object.key("mountPoints").start_array();
        for item_504 in var_502 {
            let mut object_505 = array_503.value().start_object();
            crate::json_ser::serialize_structure_mount_point(&mut object_505, item_504);
            object_505.finish();
        }
        array_503.finish();
    }
    if let Some(var_506) = &input.volumes_from {
        let mut array_507 = object.key("volumesFrom").start_array();
        for item_508 in var_506 {
            let mut object_509 = array_507.value().start_object();
            crate::json_ser::serialize_structure_volume_from(&mut object_509, item_508);
            object_509.finish();
        }
        array_507.finish();
    }
    if let Some(var_510) = &input.linux_parameters {
        let mut object_511 = object.key("linuxParameters").start_object();
        crate::json_ser::serialize_structure_linux_parameters(&mut object_511, var_510);
        object_511.finish();
    }
    if let Some(var_512) = &input.secrets {
        let mut array_513 = object.key("secrets").start_array();
        for item_514 in var_512 {
            let mut object_515 = array_513.value().start_object();
            crate::json_ser::serialize_structure_secret(&mut object_515, item_514);
            object_515.finish();
        }
        array_513.finish();
    }
    if let Some(var_516) = &input.depends_on {
        let mut array_517 = object.key("dependsOn").start_array();
        for item_518 in var_516 {
            let mut object_519 = array_517.value().start_object();
            crate::json_ser::serialize_structure_container_dependency(&mut object_519, item_518);
            object_519.finish();
        }
        array_517.finish();
    }
    if let Some(var_520) = &input.start_timeout {
        object.key("startTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_520).into()),
        );
    }
    if let Some(var_521) = &input.stop_timeout {
        object.key("stopTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_521).into()),
        );
    }
    if let Some(var_522) = &input.hostname {
        object.key("hostname").string(var_522);
    }
    if let Some(var_523) = &input.user {
        object.key("user").string(var_523);
    }
    if let Some(var_524) = &input.working_directory {
        object.key("workingDirectory").string(var_524);
    }
    if let Some(var_525) = &input.disable_networking {
        object.key("disableNetworking").boolean(*var_525);
    }
    if let Some(var_526) = &input.privileged {
        object.key("privileged").boolean(*var_526);
    }
    if let Some(var_527) = &input.readonly_root_filesystem {
        object.key("readonlyRootFilesystem").boolean(*var_527);
    }
    if let Some(var_528) = &input.dns_servers {
        let mut array_529 = object.key("dnsServers").start_array();
        for item_530 in var_528 {
            array_529.value().string(item_530);
        }
        array_529.finish();
    }
    if let Some(var_531) = &input.dns_search_domains {
        let mut array_532 = object.key("dnsSearchDomains").start_array();
        for item_533 in var_531 {
            array_532.value().string(item_533);
        }
        array_532.finish();
    }
    if let Some(var_534) = &input.extra_hosts {
        let mut array_535 = object.key("extraHosts").start_array();
        for item_536 in var_534 {
            let mut object_537 = array_535.value().start_object();
            crate::json_ser::serialize_structure_host_entry(&mut object_537, item_536);
            object_537.finish();
        }
        array_535.finish();
    }
    if let Some(var_538) = &input.docker_security_options {
        let mut array_539 = object.key("dockerSecurityOptions").start_array();
        for item_540 in var_538 {
            array_539.value().string(item_540);
        }
        array_539.finish();
    }
    if let Some(var_541) = &input.interactive {
        object.key("interactive").boolean(*var_541);
    }
    if let Some(var_542) = &input.pseudo_terminal {
        object.key("pseudoTerminal").boolean(*var_542);
    }
    if let Some(var_543) = &input.docker_labels {
        let mut object_544 = object.key("dockerLabels").start_object();
        for (key_545, value_546) in var_543 {
            object_544.key(key_545).string(value_546);
        }
        object_544.finish();
    }
    if let Some(var_547) = &input.ulimits {
        let mut array_548 = object.key("ulimits").start_array();
        for item_549 in var_547 {
            let mut object_550 = array_548.value().start_object();
            crate::json_ser::serialize_structure_ulimit(&mut object_550, item_549);
            object_550.finish();
        }
        array_548.finish();
    }
    if let Some(var_551) = &input.log_configuration {
        let mut object_552 = object.key("logConfiguration").start_object();
        crate::json_ser::serialize_structure_log_configuration(&mut object_552, var_551);
        object_552.finish();
    }
    if let Some(var_553) = &input.health_check {
        let mut object_554 = object.key("healthCheck").start_object();
        crate::json_ser::serialize_structure_health_check(&mut object_554, var_553);
        object_554.finish();
    }
    if let Some(var_555) = &input.system_controls {
        let mut array_556 = object.key("systemControls").start_array();
        for item_557 in var_555 {
            let mut object_558 = array_556.value().start_object();
            crate::json_ser::serialize_structure_system_control(&mut object_558, item_557);
            object_558.finish();
        }
        array_556.finish();
    }
    if let Some(var_559) = &input.resource_requirements {
        let mut array_560 = object.key("resourceRequirements").start_array();
        for item_561 in var_559 {
            let mut object_562 = array_560.value().start_object();
            crate::json_ser::serialize_structure_resource_requirement(&mut object_562, item_561);
            object_562.finish();
        }
        array_560.finish();
    }
    if let Some(var_563) = &input.firelens_configuration {
        let mut object_564 = object.key("firelensConfiguration").start_object();
        crate::json_ser::serialize_structure_firelens_configuration(&mut object_564, var_563);
        object_564.finish();
    }
}

pub fn serialize_structure_volume(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Volume,
) {
    if let Some(var_565) = &input.name {
        object.key("name").string(var_565);
    }
    if let Some(var_566) = &input.host {
        let mut object_567 = object.key("host").start_object();
        crate::json_ser::serialize_structure_host_volume_properties(&mut object_567, var_566);
        object_567.finish();
    }
    if let Some(var_568) = &input.docker_volume_configuration {
        let mut object_569 = object.key("dockerVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_docker_volume_configuration(&mut object_569, var_568);
        object_569.finish();
    }
    if let Some(var_570) = &input.efs_volume_configuration {
        let mut object_571 = object.key("efsVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_efs_volume_configuration(&mut object_571, var_570);
        object_571.finish();
    }
    if let Some(var_572) = &input.fsx_windows_file_server_volume_configuration {
        let mut object_573 = object
            .key("fsxWindowsFileServerVolumeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_f_sx_windows_file_server_volume_configuration(
            &mut object_573,
            var_572,
        );
        object_573.finish();
    }
}

pub fn serialize_structure_task_definition_placement_constraint(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskDefinitionPlacementConstraint,
) {
    if let Some(var_574) = &input.r#type {
        object.key("type").string(var_574.as_str());
    }
    if let Some(var_575) = &input.expression {
        object.key("expression").string(var_575);
    }
}

pub fn serialize_structure_proxy_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) {
    if let Some(var_576) = &input.r#type {
        object.key("type").string(var_576.as_str());
    }
    if let Some(var_577) = &input.container_name {
        object.key("containerName").string(var_577);
    }
    if let Some(var_578) = &input.properties {
        let mut array_579 = object.key("properties").start_array();
        for item_580 in var_578 {
            let mut object_581 = array_579.value().start_object();
            crate::json_ser::serialize_structure_key_value_pair(&mut object_581, item_580);
            object_581.finish();
        }
        array_579.finish();
    }
}

pub fn serialize_structure_inference_accelerator(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceAccelerator,
) {
    if let Some(var_582) = &input.device_name {
        object.key("deviceName").string(var_582);
    }
    if let Some(var_583) = &input.device_type {
        object.key("deviceType").string(var_583);
    }
}

pub fn serialize_structure_ephemeral_storage(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EphemeralStorage,
) {
    object.key("sizeInGiB").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.size_in_gi_b).into()),
    );
}

pub fn serialize_structure_task_override(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskOverride,
) {
    if let Some(var_584) = &input.container_overrides {
        let mut array_585 = object.key("containerOverrides").start_array();
        for item_586 in var_584 {
            let mut object_587 = array_585.value().start_object();
            crate::json_ser::serialize_structure_container_override(&mut object_587, item_586);
            object_587.finish();
        }
        array_585.finish();
    }
    if let Some(var_588) = &input.cpu {
        object.key("cpu").string(var_588);
    }
    if let Some(var_589) = &input.inference_accelerator_overrides {
        let mut array_590 = object.key("inferenceAcceleratorOverrides").start_array();
        for item_591 in var_589 {
            let mut object_592 = array_590.value().start_object();
            crate::json_ser::serialize_structure_inference_accelerator_override(
                &mut object_592,
                item_591,
            );
            object_592.finish();
        }
        array_590.finish();
    }
    if let Some(var_593) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_593);
    }
    if let Some(var_594) = &input.memory {
        object.key("memory").string(var_594);
    }
    if let Some(var_595) = &input.task_role_arn {
        object.key("taskRoleArn").string(var_595);
    }
    if let Some(var_596) = &input.ephemeral_storage {
        let mut object_597 = object.key("ephemeralStorage").start_object();
        crate::json_ser::serialize_structure_ephemeral_storage(&mut object_597, var_596);
        object_597.finish();
    }
}

pub fn serialize_structure_attachment_state_change(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttachmentStateChange,
) {
    if let Some(var_598) = &input.attachment_arn {
        object.key("attachmentArn").string(var_598);
    }
    if let Some(var_599) = &input.status {
        object.key("status").string(var_599);
    }
}

pub fn serialize_structure_network_binding(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkBinding,
) {
    if let Some(var_600) = &input.bind_ip {
        object.key("bindIP").string(var_600);
    }
    if let Some(var_601) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_601).into()),
        );
    }
    if let Some(var_602) = &input.host_port {
        object.key("hostPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_602).into()),
        );
    }
    if let Some(var_603) = &input.protocol {
        object.key("protocol").string(var_603.as_str());
    }
}

pub fn serialize_structure_container_state_change(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerStateChange,
) {
    if let Some(var_604) = &input.container_name {
        object.key("containerName").string(var_604);
    }
    if let Some(var_605) = &input.image_digest {
        object.key("imageDigest").string(var_605);
    }
    if let Some(var_606) = &input.runtime_id {
        object.key("runtimeId").string(var_606);
    }
    if let Some(var_607) = &input.exit_code {
        object.key("exitCode").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_607).into()),
        );
    }
    if let Some(var_608) = &input.network_bindings {
        let mut array_609 = object.key("networkBindings").start_array();
        for item_610 in var_608 {
            let mut object_611 = array_609.value().start_object();
            crate::json_ser::serialize_structure_network_binding(&mut object_611, item_610);
            object_611.finish();
        }
        array_609.finish();
    }
    if let Some(var_612) = &input.reason {
        object.key("reason").string(var_612);
    }
    if let Some(var_613) = &input.status {
        object.key("status").string(var_613);
    }
}

pub fn serialize_structure_managed_agent_state_change(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedAgentStateChange,
) {
    if let Some(var_614) = &input.container_name {
        object.key("containerName").string(var_614);
    }
    if let Some(var_615) = &input.managed_agent_name {
        object.key("managedAgentName").string(var_615.as_str());
    }
    if let Some(var_616) = &input.status {
        object.key("status").string(var_616);
    }
    if let Some(var_617) = &input.reason {
        object.key("reason").string(var_617);
    }
}

pub fn serialize_structure_auto_scaling_group_provider_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingGroupProviderUpdate,
) {
    if let Some(var_618) = &input.managed_scaling {
        let mut object_619 = object.key("managedScaling").start_object();
        crate::json_ser::serialize_structure_managed_scaling(&mut object_619, var_618);
        object_619.finish();
    }
    if let Some(var_620) = &input.managed_termination_protection {
        object
            .key("managedTerminationProtection")
            .string(var_620.as_str());
    }
}

pub fn serialize_structure_managed_scaling(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedScaling,
) {
    if let Some(var_621) = &input.status {
        object.key("status").string(var_621.as_str());
    }
    if let Some(var_622) = &input.target_capacity {
        object.key("targetCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_622).into()),
        );
    }
    if let Some(var_623) = &input.minimum_scaling_step_size {
        object.key("minimumScalingStepSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_623).into()),
        );
    }
    if let Some(var_624) = &input.maximum_scaling_step_size {
        object.key("maximumScalingStepSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_624).into()),
        );
    }
    if let Some(var_625) = &input.instance_warmup_period {
        object.key("instanceWarmupPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_625).into()),
        );
    }
}

pub fn serialize_structure_execute_command_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecuteCommandConfiguration,
) {
    if let Some(var_626) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_626);
    }
    if let Some(var_627) = &input.logging {
        object.key("logging").string(var_627.as_str());
    }
    if let Some(var_628) = &input.log_configuration {
        let mut object_629 = object.key("logConfiguration").start_object();
        crate::json_ser::serialize_structure_execute_command_log_configuration(
            &mut object_629,
            var_628,
        );
        object_629.finish();
    }
}

pub fn serialize_structure_deployment_circuit_breaker(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentCircuitBreaker,
) {
    object.key("enable").boolean(input.enable);
    object.key("rollback").boolean(input.rollback);
}

pub fn serialize_structure_aws_vpc_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsVpcConfiguration,
) {
    if let Some(var_630) = &input.subnets {
        let mut array_631 = object.key("subnets").start_array();
        for item_632 in var_630 {
            array_631.value().string(item_632);
        }
        array_631.finish();
    }
    if let Some(var_633) = &input.security_groups {
        let mut array_634 = object.key("securityGroups").start_array();
        for item_635 in var_633 {
            array_634.value().string(item_635);
        }
        array_634.finish();
    }
    if let Some(var_636) = &input.assign_public_ip {
        object.key("assignPublicIp").string(var_636.as_str());
    }
}

pub fn serialize_structure_repository_credentials(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryCredentials,
) {
    if let Some(var_637) = &input.credentials_parameter {
        object.key("credentialsParameter").string(var_637);
    }
}

pub fn serialize_structure_port_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortMapping,
) {
    if let Some(var_638) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_638).into()),
        );
    }
    if let Some(var_639) = &input.host_port {
        object.key("hostPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_639).into()),
        );
    }
    if let Some(var_640) = &input.protocol {
        object.key("protocol").string(var_640.as_str());
    }
}

pub fn serialize_structure_key_value_pair(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValuePair,
) {
    if let Some(var_641) = &input.name {
        object.key("name").string(var_641);
    }
    if let Some(var_642) = &input.value {
        object.key("value").string(var_642);
    }
}

pub fn serialize_structure_environment_file(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnvironmentFile,
) {
    if let Some(var_643) = &input.value {
        object.key("value").string(var_643);
    }
    if let Some(var_644) = &input.r#type {
        object.key("type").string(var_644.as_str());
    }
}

pub fn serialize_structure_mount_point(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MountPoint,
) {
    if let Some(var_645) = &input.source_volume {
        object.key("sourceVolume").string(var_645);
    }
    if let Some(var_646) = &input.container_path {
        object.key("containerPath").string(var_646);
    }
    if let Some(var_647) = &input.read_only {
        object.key("readOnly").boolean(*var_647);
    }
}

pub fn serialize_structure_volume_from(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeFrom,
) {
    if let Some(var_648) = &input.source_container {
        object.key("sourceContainer").string(var_648);
    }
    if let Some(var_649) = &input.read_only {
        object.key("readOnly").boolean(*var_649);
    }
}

pub fn serialize_structure_linux_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LinuxParameters,
) {
    if let Some(var_650) = &input.capabilities {
        let mut object_651 = object.key("capabilities").start_object();
        crate::json_ser::serialize_structure_kernel_capabilities(&mut object_651, var_650);
        object_651.finish();
    }
    if let Some(var_652) = &input.devices {
        let mut array_653 = object.key("devices").start_array();
        for item_654 in var_652 {
            let mut object_655 = array_653.value().start_object();
            crate::json_ser::serialize_structure_device(&mut object_655, item_654);
            object_655.finish();
        }
        array_653.finish();
    }
    if let Some(var_656) = &input.init_process_enabled {
        object.key("initProcessEnabled").boolean(*var_656);
    }
    if let Some(var_657) = &input.shared_memory_size {
        object.key("sharedMemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_657).into()),
        );
    }
    if let Some(var_658) = &input.tmpfs {
        let mut array_659 = object.key("tmpfs").start_array();
        for item_660 in var_658 {
            let mut object_661 = array_659.value().start_object();
            crate::json_ser::serialize_structure_tmpfs(&mut object_661, item_660);
            object_661.finish();
        }
        array_659.finish();
    }
    if let Some(var_662) = &input.max_swap {
        object.key("maxSwap").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_662).into()),
        );
    }
    if let Some(var_663) = &input.swappiness {
        object.key("swappiness").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_663).into()),
        );
    }
}

pub fn serialize_structure_secret(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Secret,
) {
    if let Some(var_664) = &input.name {
        object.key("name").string(var_664);
    }
    if let Some(var_665) = &input.value_from {
        object.key("valueFrom").string(var_665);
    }
}

pub fn serialize_structure_container_dependency(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDependency,
) {
    if let Some(var_666) = &input.container_name {
        object.key("containerName").string(var_666);
    }
    if let Some(var_667) = &input.condition {
        object.key("condition").string(var_667.as_str());
    }
}

pub fn serialize_structure_host_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HostEntry,
) {
    if let Some(var_668) = &input.hostname {
        object.key("hostname").string(var_668);
    }
    if let Some(var_669) = &input.ip_address {
        object.key("ipAddress").string(var_669);
    }
}

pub fn serialize_structure_ulimit(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ulimit,
) {
    if let Some(var_670) = &input.name {
        object.key("name").string(var_670.as_str());
    }
    object.key("softLimit").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.soft_limit).into()),
    );
    object.key("hardLimit").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.hard_limit).into()),
    );
}

pub fn serialize_structure_log_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogConfiguration,
) {
    if let Some(var_671) = &input.log_driver {
        object.key("logDriver").string(var_671.as_str());
    }
    if let Some(var_672) = &input.options {
        let mut object_673 = object.key("options").start_object();
        for (key_674, value_675) in var_672 {
            object_673.key(key_674).string(value_675);
        }
        object_673.finish();
    }
    if let Some(var_676) = &input.secret_options {
        let mut array_677 = object.key("secretOptions").start_array();
        for item_678 in var_676 {
            let mut object_679 = array_677.value().start_object();
            crate::json_ser::serialize_structure_secret(&mut object_679, item_678);
            object_679.finish();
        }
        array_677.finish();
    }
}

pub fn serialize_structure_health_check(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HealthCheck,
) {
    if let Some(var_680) = &input.command {
        let mut array_681 = object.key("command").start_array();
        for item_682 in var_680 {
            array_681.value().string(item_682);
        }
        array_681.finish();
    }
    if let Some(var_683) = &input.interval {
        object.key("interval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_683).into()),
        );
    }
    if let Some(var_684) = &input.timeout {
        object.key("timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_684).into()),
        );
    }
    if let Some(var_685) = &input.retries {
        object.key("retries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_685).into()),
        );
    }
    if let Some(var_686) = &input.start_period {
        object.key("startPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_686).into()),
        );
    }
}

pub fn serialize_structure_system_control(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SystemControl,
) {
    if let Some(var_687) = &input.namespace {
        object.key("namespace").string(var_687);
    }
    if let Some(var_688) = &input.value {
        object.key("value").string(var_688);
    }
}

pub fn serialize_structure_resource_requirement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceRequirement,
) {
    if let Some(var_689) = &input.value {
        object.key("value").string(var_689);
    }
    if let Some(var_690) = &input.r#type {
        object.key("type").string(var_690.as_str());
    }
}

pub fn serialize_structure_firelens_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirelensConfiguration,
) {
    if let Some(var_691) = &input.r#type {
        object.key("type").string(var_691.as_str());
    }
    if let Some(var_692) = &input.options {
        let mut object_693 = object.key("options").start_object();
        for (key_694, value_695) in var_692 {
            object_693.key(key_694).string(value_695);
        }
        object_693.finish();
    }
}

pub fn serialize_structure_host_volume_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HostVolumeProperties,
) {
    if let Some(var_696) = &input.source_path {
        object.key("sourcePath").string(var_696);
    }
}

pub fn serialize_structure_docker_volume_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DockerVolumeConfiguration,
) {
    if let Some(var_697) = &input.scope {
        object.key("scope").string(var_697.as_str());
    }
    if let Some(var_698) = &input.autoprovision {
        object.key("autoprovision").boolean(*var_698);
    }
    if let Some(var_699) = &input.driver {
        object.key("driver").string(var_699);
    }
    if let Some(var_700) = &input.driver_opts {
        let mut object_701 = object.key("driverOpts").start_object();
        for (key_702, value_703) in var_700 {
            object_701.key(key_702).string(value_703);
        }
        object_701.finish();
    }
    if let Some(var_704) = &input.labels {
        let mut object_705 = object.key("labels").start_object();
        for (key_706, value_707) in var_704 {
            object_705.key(key_706).string(value_707);
        }
        object_705.finish();
    }
}

pub fn serialize_structure_efs_volume_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EFSVolumeConfiguration,
) {
    if let Some(var_708) = &input.file_system_id {
        object.key("fileSystemId").string(var_708);
    }
    if let Some(var_709) = &input.root_directory {
        object.key("rootDirectory").string(var_709);
    }
    if let Some(var_710) = &input.transit_encryption {
        object.key("transitEncryption").string(var_710.as_str());
    }
    if let Some(var_711) = &input.transit_encryption_port {
        object.key("transitEncryptionPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_711).into()),
        );
    }
    if let Some(var_712) = &input.authorization_config {
        let mut object_713 = object.key("authorizationConfig").start_object();
        crate::json_ser::serialize_structure_efs_authorization_config(&mut object_713, var_712);
        object_713.finish();
    }
}

pub fn serialize_structure_f_sx_windows_file_server_volume_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FSxWindowsFileServerVolumeConfiguration,
) {
    if let Some(var_714) = &input.file_system_id {
        object.key("fileSystemId").string(var_714);
    }
    if let Some(var_715) = &input.root_directory {
        object.key("rootDirectory").string(var_715);
    }
    if let Some(var_716) = &input.authorization_config {
        let mut object_717 = object.key("authorizationConfig").start_object();
        crate::json_ser::serialize_structure_f_sx_windows_file_server_authorization_config(
            &mut object_717,
            var_716,
        );
        object_717.finish();
    }
}

pub fn serialize_structure_container_override(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerOverride,
) {
    if let Some(var_718) = &input.name {
        object.key("name").string(var_718);
    }
    if let Some(var_719) = &input.command {
        let mut array_720 = object.key("command").start_array();
        for item_721 in var_719 {
            array_720.value().string(item_721);
        }
        array_720.finish();
    }
    if let Some(var_722) = &input.environment {
        let mut array_723 = object.key("environment").start_array();
        for item_724 in var_722 {
            let mut object_725 = array_723.value().start_object();
            crate::json_ser::serialize_structure_key_value_pair(&mut object_725, item_724);
            object_725.finish();
        }
        array_723.finish();
    }
    if let Some(var_726) = &input.environment_files {
        let mut array_727 = object.key("environmentFiles").start_array();
        for item_728 in var_726 {
            let mut object_729 = array_727.value().start_object();
            crate::json_ser::serialize_structure_environment_file(&mut object_729, item_728);
            object_729.finish();
        }
        array_727.finish();
    }
    if let Some(var_730) = &input.cpu {
        object.key("cpu").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_730).into()),
        );
    }
    if let Some(var_731) = &input.memory {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_731).into()),
        );
    }
    if let Some(var_732) = &input.memory_reservation {
        object.key("memoryReservation").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_732).into()),
        );
    }
    if let Some(var_733) = &input.resource_requirements {
        let mut array_734 = object.key("resourceRequirements").start_array();
        for item_735 in var_733 {
            let mut object_736 = array_734.value().start_object();
            crate::json_ser::serialize_structure_resource_requirement(&mut object_736, item_735);
            object_736.finish();
        }
        array_734.finish();
    }
}

pub fn serialize_structure_inference_accelerator_override(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceAcceleratorOverride,
) {
    if let Some(var_737) = &input.device_name {
        object.key("deviceName").string(var_737);
    }
    if let Some(var_738) = &input.device_type {
        object.key("deviceType").string(var_738);
    }
}

pub fn serialize_structure_execute_command_log_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecuteCommandLogConfiguration,
) {
    if let Some(var_739) = &input.cloud_watch_log_group_name {
        object.key("cloudWatchLogGroupName").string(var_739);
    }
    object
        .key("cloudWatchEncryptionEnabled")
        .boolean(input.cloud_watch_encryption_enabled);
    if let Some(var_740) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_740);
    }
    object
        .key("s3EncryptionEnabled")
        .boolean(input.s3_encryption_enabled);
    if let Some(var_741) = &input.s3_key_prefix {
        object.key("s3KeyPrefix").string(var_741);
    }
}

pub fn serialize_structure_kernel_capabilities(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelCapabilities,
) {
    if let Some(var_742) = &input.add {
        let mut array_743 = object.key("add").start_array();
        for item_744 in var_742 {
            array_743.value().string(item_744);
        }
        array_743.finish();
    }
    if let Some(var_745) = &input.drop {
        let mut array_746 = object.key("drop").start_array();
        for item_747 in var_745 {
            array_746.value().string(item_747);
        }
        array_746.finish();
    }
}

pub fn serialize_structure_device(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) {
    if let Some(var_748) = &input.host_path {
        object.key("hostPath").string(var_748);
    }
    if let Some(var_749) = &input.container_path {
        object.key("containerPath").string(var_749);
    }
    if let Some(var_750) = &input.permissions {
        let mut array_751 = object.key("permissions").start_array();
        for item_752 in var_750 {
            array_751.value().string(item_752.as_str());
        }
        array_751.finish();
    }
}

pub fn serialize_structure_tmpfs(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tmpfs,
) {
    if let Some(var_753) = &input.container_path {
        object.key("containerPath").string(var_753);
    }
    object.key("size").number(
        #[allow(clippy::useless_conversion)]
        smithy_types::Number::NegInt((input.size).into()),
    );
    if let Some(var_754) = &input.mount_options {
        let mut array_755 = object.key("mountOptions").start_array();
        for item_756 in var_754 {
            array_755.value().string(item_756);
        }
        array_755.finish();
    }
}

pub fn serialize_structure_efs_authorization_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EFSAuthorizationConfig,
) {
    if let Some(var_757) = &input.access_point_id {
        object.key("accessPointId").string(var_757);
    }
    if let Some(var_758) = &input.iam {
        object.key("iam").string(var_758.as_str());
    }
}

pub fn serialize_structure_f_sx_windows_file_server_authorization_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FSxWindowsFileServerAuthorizationConfig,
) {
    if let Some(var_759) = &input.credentials_parameter {
        object.key("credentialsParameter").string(var_759);
    }
    if let Some(var_760) = &input.domain {
        object.key("domain").string(var_760);
    }
}
