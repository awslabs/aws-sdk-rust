// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_capacity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCapacityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auto_scaling_group_provider {
        let mut object_3 = object.key("autoScalingGroupProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_group_provider(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.tags {
        let mut array_5 = object.key("tags").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClusterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.cluster_name {
        object.key("clusterName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("tags").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.settings {
        let mut array_14 = object.key("settings").start_array();
        for item_15 in var_13 {
            {
                let mut object_16 = array_14.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cluster_setting(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.configuration {
        let mut object_18 = object.key("configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_cluster_configuration(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.capacity_providers {
        let mut array_20 = object.key("capacityProviders").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.default_capacity_provider_strategy {
        let mut array_23 = object.key("defaultCapacityProviderStrategy").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capacity_provider_strategy_item(
                    &mut object_25,
                    item_24,
                )?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.cluster {
        object.key("cluster").string(var_26.as_str());
    }
    if let Some(var_27) = &input.service_name {
        object.key("serviceName").string(var_27.as_str());
    }
    if let Some(var_28) = &input.task_definition {
        object.key("taskDefinition").string(var_28.as_str());
    }
    if let Some(var_29) = &input.load_balancers {
        let mut array_30 = object.key("loadBalancers").start_array();
        for item_31 in var_29 {
            {
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_crate_model_load_balancer(
                    &mut object_32,
                    item_31,
                )?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.service_registries {
        let mut array_34 = object.key("serviceRegistries").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_service_registry(
                    &mut object_36,
                    item_35,
                )?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.desired_count {
        object.key("desiredCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    if let Some(var_38) = &input.client_token {
        object.key("clientToken").string(var_38.as_str());
    }
    if let Some(var_39) = &input.launch_type {
        object.key("launchType").string(var_39.as_str());
    }
    if let Some(var_40) = &input.capacity_provider_strategy {
        let mut array_41 = object.key("capacityProviderStrategy").start_array();
        for item_42 in var_40 {
            {
                let mut object_43 = array_41.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capacity_provider_strategy_item(
                    &mut object_43,
                    item_42,
                )?;
                object_43.finish();
            }
        }
        array_41.finish();
    }
    if let Some(var_44) = &input.platform_version {
        object.key("platformVersion").string(var_44.as_str());
    }
    if let Some(var_45) = &input.role {
        object.key("role").string(var_45.as_str());
    }
    if let Some(var_46) = &input.deployment_configuration {
        let mut object_47 = object.key("deploymentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_configuration(
            &mut object_47,
            var_46,
        )?;
        object_47.finish();
    }
    if let Some(var_48) = &input.placement_constraints {
        let mut array_49 = object.key("placementConstraints").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_constraint(
                    &mut object_51,
                    item_50,
                )?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    if let Some(var_52) = &input.placement_strategy {
        let mut array_53 = object.key("placementStrategy").start_array();
        for item_54 in var_52 {
            {
                let mut object_55 = array_53.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_strategy(
                    &mut object_55,
                    item_54,
                )?;
                object_55.finish();
            }
        }
        array_53.finish();
    }
    if let Some(var_56) = &input.network_configuration {
        let mut object_57 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_network_configuration(
            &mut object_57,
            var_56,
        )?;
        object_57.finish();
    }
    if let Some(var_58) = &input.health_check_grace_period_seconds {
        object.key("healthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    if let Some(var_59) = &input.scheduling_strategy {
        object.key("schedulingStrategy").string(var_59.as_str());
    }
    if let Some(var_60) = &input.deployment_controller {
        let mut object_61 = object.key("deploymentController").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_controller(
            &mut object_61,
            var_60,
        )?;
        object_61.finish();
    }
    if let Some(var_62) = &input.tags {
        let mut array_63 = object.key("tags").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_65, item_64)?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if input.enable_ecs_managed_tags {
        object
            .key("enableECSManagedTags")
            .boolean(input.enable_ecs_managed_tags);
    }
    if let Some(var_66) = &input.propagate_tags {
        object.key("propagateTags").string(var_66.as_str());
    }
    if input.enable_execute_command {
        object
            .key("enableExecuteCommand")
            .boolean(input.enable_execute_command);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_task_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTaskSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.service {
        object.key("service").string(var_67.as_str());
    }
    if let Some(var_68) = &input.cluster {
        object.key("cluster").string(var_68.as_str());
    }
    if let Some(var_69) = &input.external_id {
        object.key("externalId").string(var_69.as_str());
    }
    if let Some(var_70) = &input.task_definition {
        object.key("taskDefinition").string(var_70.as_str());
    }
    if let Some(var_71) = &input.network_configuration {
        let mut object_72 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_network_configuration(
            &mut object_72,
            var_71,
        )?;
        object_72.finish();
    }
    if let Some(var_73) = &input.load_balancers {
        let mut array_74 = object.key("loadBalancers").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_crate_model_load_balancer(
                    &mut object_76,
                    item_75,
                )?;
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.service_registries {
        let mut array_78 = object.key("serviceRegistries").start_array();
        for item_79 in var_77 {
            {
                let mut object_80 = array_78.value().start_object();
                crate::json_ser::serialize_structure_crate_model_service_registry(
                    &mut object_80,
                    item_79,
                )?;
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.launch_type {
        object.key("launchType").string(var_81.as_str());
    }
    if let Some(var_82) = &input.capacity_provider_strategy {
        let mut array_83 = object.key("capacityProviderStrategy").start_array();
        for item_84 in var_82 {
            {
                let mut object_85 = array_83.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capacity_provider_strategy_item(
                    &mut object_85,
                    item_84,
                )?;
                object_85.finish();
            }
        }
        array_83.finish();
    }
    if let Some(var_86) = &input.platform_version {
        object.key("platformVersion").string(var_86.as_str());
    }
    if let Some(var_87) = &input.scale {
        let mut object_88 = object.key("scale").start_object();
        crate::json_ser::serialize_structure_crate_model_scale(&mut object_88, var_87)?;
        object_88.finish();
    }
    if let Some(var_89) = &input.client_token {
        object.key("clientToken").string(var_89.as_str());
    }
    if let Some(var_90) = &input.tags {
        let mut array_91 = object.key("tags").start_array();
        for item_92 in var_90 {
            {
                let mut object_93 = array_91.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_93, item_92)?;
                object_93.finish();
            }
        }
        array_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_account_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAccountSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.name {
        object.key("name").string(var_94.as_str());
    }
    if let Some(var_95) = &input.principal_arn {
        object.key("principalArn").string(var_95.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.cluster {
        object.key("cluster").string(var_96.as_str());
    }
    if let Some(var_97) = &input.attributes {
        let mut array_98 = object.key("attributes").start_array();
        for item_99 in var_97 {
            {
                let mut object_100 = array_98.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute(
                    &mut object_100,
                    item_99,
                )?;
                object_100.finish();
            }
        }
        array_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_capacity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCapacityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.capacity_provider {
        object.key("capacityProvider").string(var_101.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClusterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.cluster {
        object.key("cluster").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.cluster {
        object.key("cluster").string(var_103.as_str());
    }
    if let Some(var_104) = &input.service {
        object.key("service").string(var_104.as_str());
    }
    if let Some(var_105) = &input.force {
        object.key("force").boolean(*var_105);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_task_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTaskSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.cluster {
        object.key("cluster").string(var_106.as_str());
    }
    if let Some(var_107) = &input.service {
        object.key("service").string(var_107.as_str());
    }
    if let Some(var_108) = &input.task_set {
        object.key("taskSet").string(var_108.as_str());
    }
    if let Some(var_109) = &input.force {
        object.key("force").boolean(*var_109);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_container_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterContainerInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.cluster {
        object.key("cluster").string(var_110.as_str());
    }
    if let Some(var_111) = &input.container_instance {
        object.key("containerInstance").string(var_111.as_str());
    }
    if let Some(var_112) = &input.force {
        object.key("force").boolean(*var_112);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_task_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTaskDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.task_definition {
        object.key("taskDefinition").string(var_113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_capacity_providers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCapacityProvidersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.capacity_providers {
        let mut array_115 = object.key("capacityProviders").start_array();
        for item_116 in var_114 {
            {
                array_115.value().string(item_116.as_str());
            }
        }
        array_115.finish();
    }
    if let Some(var_117) = &input.include {
        let mut array_118 = object.key("include").start_array();
        for item_119 in var_117 {
            {
                array_118.value().string(item_119.as_str());
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_120).into()),
        );
    }
    if let Some(var_121) = &input.next_token {
        object.key("nextToken").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_clusters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeClustersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.clusters {
        let mut array_123 = object.key("clusters").start_array();
        for item_124 in var_122 {
            {
                array_123.value().string(item_124.as_str());
            }
        }
        array_123.finish();
    }
    if let Some(var_125) = &input.include {
        let mut array_126 = object.key("include").start_array();
        for item_127 in var_125 {
            {
                array_126.value().string(item_127.as_str());
            }
        }
        array_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_container_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContainerInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.cluster {
        object.key("cluster").string(var_128.as_str());
    }
    if let Some(var_129) = &input.container_instances {
        let mut array_130 = object.key("containerInstances").start_array();
        for item_131 in var_129 {
            {
                array_130.value().string(item_131.as_str());
            }
        }
        array_130.finish();
    }
    if let Some(var_132) = &input.include {
        let mut array_133 = object.key("include").start_array();
        for item_134 in var_132 {
            {
                array_133.value().string(item_134.as_str());
            }
        }
        array_133.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_services_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeServicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.cluster {
        object.key("cluster").string(var_135.as_str());
    }
    if let Some(var_136) = &input.services {
        let mut array_137 = object.key("services").start_array();
        for item_138 in var_136 {
            {
                array_137.value().string(item_138.as_str());
            }
        }
        array_137.finish();
    }
    if let Some(var_139) = &input.include {
        let mut array_140 = object.key("include").start_array();
        for item_141 in var_139 {
            {
                array_140.value().string(item_141.as_str());
            }
        }
        array_140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_task_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTaskDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.task_definition {
        object.key("taskDefinition").string(var_142.as_str());
    }
    if let Some(var_143) = &input.include {
        let mut array_144 = object.key("include").start_array();
        for item_145 in var_143 {
            {
                array_144.value().string(item_145.as_str());
            }
        }
        array_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.cluster {
        object.key("cluster").string(var_146.as_str());
    }
    if let Some(var_147) = &input.tasks {
        let mut array_148 = object.key("tasks").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149.as_str());
            }
        }
        array_148.finish();
    }
    if let Some(var_150) = &input.include {
        let mut array_151 = object.key("include").start_array();
        for item_152 in var_150 {
            {
                array_151.value().string(item_152.as_str());
            }
        }
        array_151.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_task_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTaskSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.cluster {
        object.key("cluster").string(var_153.as_str());
    }
    if let Some(var_154) = &input.service {
        object.key("service").string(var_154.as_str());
    }
    if let Some(var_155) = &input.task_sets {
        let mut array_156 = object.key("taskSets").start_array();
        for item_157 in var_155 {
            {
                array_156.value().string(item_157.as_str());
            }
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.include {
        let mut array_159 = object.key("include").start_array();
        for item_160 in var_158 {
            {
                array_159.value().string(item_160.as_str());
            }
        }
        array_159.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_discover_poll_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DiscoverPollEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.container_instance {
        object.key("containerInstance").string(var_161.as_str());
    }
    if let Some(var_162) = &input.cluster {
        object.key("cluster").string(var_162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_execute_command_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExecuteCommandInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.cluster {
        object.key("cluster").string(var_163.as_str());
    }
    if let Some(var_164) = &input.container {
        object.key("container").string(var_164.as_str());
    }
    if let Some(var_165) = &input.command {
        object.key("command").string(var_165.as_str());
    }
    {
        object.key("interactive").boolean(input.interactive);
    }
    if let Some(var_166) = &input.task {
        object.key("task").string(var_166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_account_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccountSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.name {
        object.key("name").string(var_167.as_str());
    }
    if let Some(var_168) = &input.value {
        object.key("value").string(var_168.as_str());
    }
    if let Some(var_169) = &input.principal_arn {
        object.key("principalArn").string(var_169.as_str());
    }
    if input.effective_settings {
        object
            .key("effectiveSettings")
            .boolean(input.effective_settings);
    }
    if let Some(var_170) = &input.next_token {
        object.key("nextToken").string(var_170.as_str());
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.cluster {
        object.key("cluster").string(var_171.as_str());
    }
    if let Some(var_172) = &input.target_type {
        object.key("targetType").string(var_172.as_str());
    }
    if let Some(var_173) = &input.attribute_name {
        object.key("attributeName").string(var_173.as_str());
    }
    if let Some(var_174) = &input.attribute_value {
        object.key("attributeValue").string(var_174.as_str());
    }
    if let Some(var_175) = &input.next_token {
        object.key("nextToken").string(var_175.as_str());
    }
    if let Some(var_176) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_176).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_clusters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListClustersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.next_token {
        object.key("nextToken").string(var_177.as_str());
    }
    if let Some(var_178) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_container_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContainerInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.cluster {
        object.key("cluster").string(var_179.as_str());
    }
    if let Some(var_180) = &input.filter {
        object.key("filter").string(var_180.as_str());
    }
    if let Some(var_181) = &input.next_token {
        object.key("nextToken").string(var_181.as_str());
    }
    if let Some(var_182) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    if let Some(var_183) = &input.status {
        object.key("status").string(var_183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_services_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.cluster {
        object.key("cluster").string(var_184.as_str());
    }
    if let Some(var_185) = &input.next_token {
        object.key("nextToken").string(var_185.as_str());
    }
    if let Some(var_186) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_186).into()),
        );
    }
    if let Some(var_187) = &input.launch_type {
        object.key("launchType").string(var_187.as_str());
    }
    if let Some(var_188) = &input.scheduling_strategy {
        object.key("schedulingStrategy").string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.resource_arn {
        object.key("resourceArn").string(var_189.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_task_definition_families_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTaskDefinitionFamiliesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.family_prefix {
        object.key("familyPrefix").string(var_190.as_str());
    }
    if let Some(var_191) = &input.status {
        object.key("status").string(var_191.as_str());
    }
    if let Some(var_192) = &input.next_token {
        object.key("nextToken").string(var_192.as_str());
    }
    if let Some(var_193) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_193).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_task_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTaskDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.family_prefix {
        object.key("familyPrefix").string(var_194.as_str());
    }
    if let Some(var_195) = &input.status {
        object.key("status").string(var_195.as_str());
    }
    if let Some(var_196) = &input.sort {
        object.key("sort").string(var_196.as_str());
    }
    if let Some(var_197) = &input.next_token {
        object.key("nextToken").string(var_197.as_str());
    }
    if let Some(var_198) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_198).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.cluster {
        object.key("cluster").string(var_199.as_str());
    }
    if let Some(var_200) = &input.container_instance {
        object.key("containerInstance").string(var_200.as_str());
    }
    if let Some(var_201) = &input.family {
        object.key("family").string(var_201.as_str());
    }
    if let Some(var_202) = &input.next_token {
        object.key("nextToken").string(var_202.as_str());
    }
    if let Some(var_203) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_203).into()),
        );
    }
    if let Some(var_204) = &input.started_by {
        object.key("startedBy").string(var_204.as_str());
    }
    if let Some(var_205) = &input.service_name {
        object.key("serviceName").string(var_205.as_str());
    }
    if let Some(var_206) = &input.desired_status {
        object.key("desiredStatus").string(var_206.as_str());
    }
    if let Some(var_207) = &input.launch_type {
        object.key("launchType").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_account_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccountSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_208) = &input.name {
        object.key("name").string(var_208.as_str());
    }
    if let Some(var_209) = &input.value {
        object.key("value").string(var_209.as_str());
    }
    if let Some(var_210) = &input.principal_arn {
        object.key("principalArn").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_account_setting_default_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccountSettingDefaultInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.name {
        object.key("name").string(var_211.as_str());
    }
    if let Some(var_212) = &input.value {
        object.key("value").string(var_212.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.cluster {
        object.key("cluster").string(var_213.as_str());
    }
    if let Some(var_214) = &input.attributes {
        let mut array_215 = object.key("attributes").start_array();
        for item_216 in var_214 {
            {
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute(
                    &mut object_217,
                    item_216,
                )?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_cluster_capacity_providers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutClusterCapacityProvidersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_218) = &input.cluster {
        object.key("cluster").string(var_218.as_str());
    }
    if let Some(var_219) = &input.capacity_providers {
        let mut array_220 = object.key("capacityProviders").start_array();
        for item_221 in var_219 {
            {
                array_220.value().string(item_221.as_str());
            }
        }
        array_220.finish();
    }
    if let Some(var_222) = &input.default_capacity_provider_strategy {
        let mut array_223 = object.key("defaultCapacityProviderStrategy").start_array();
        for item_224 in var_222 {
            {
                let mut object_225 = array_223.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capacity_provider_strategy_item(
                    &mut object_225,
                    item_224,
                )?;
                object_225.finish();
            }
        }
        array_223.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_container_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterContainerInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.cluster {
        object.key("cluster").string(var_226.as_str());
    }
    if let Some(var_227) = &input.instance_identity_document {
        object
            .key("instanceIdentityDocument")
            .string(var_227.as_str());
    }
    if let Some(var_228) = &input.instance_identity_document_signature {
        object
            .key("instanceIdentityDocumentSignature")
            .string(var_228.as_str());
    }
    if let Some(var_229) = &input.total_resources {
        let mut array_230 = object.key("totalResources").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource(
                    &mut object_232,
                    item_231,
                )?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.version_info {
        let mut object_234 = object.key("versionInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_version_info(&mut object_234, var_233)?;
        object_234.finish();
    }
    if let Some(var_235) = &input.container_instance_arn {
        object.key("containerInstanceArn").string(var_235.as_str());
    }
    if let Some(var_236) = &input.attributes {
        let mut array_237 = object.key("attributes").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute(
                    &mut object_239,
                    item_238,
                )?;
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.platform_devices {
        let mut array_241 = object.key("platformDevices").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_platform_device(
                    &mut object_243,
                    item_242,
                )?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.tags {
        let mut array_245 = object.key("tags").start_array();
        for item_246 in var_244 {
            {
                let mut object_247 = array_245.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_247, item_246)?;
                object_247.finish();
            }
        }
        array_245.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_task_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTaskDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.family {
        object.key("family").string(var_248.as_str());
    }
    if let Some(var_249) = &input.task_role_arn {
        object.key("taskRoleArn").string(var_249.as_str());
    }
    if let Some(var_250) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_250.as_str());
    }
    if let Some(var_251) = &input.network_mode {
        object.key("networkMode").string(var_251.as_str());
    }
    if let Some(var_252) = &input.container_definitions {
        let mut array_253 = object.key("containerDefinitions").start_array();
        for item_254 in var_252 {
            {
                let mut object_255 = array_253.value().start_object();
                crate::json_ser::serialize_structure_crate_model_container_definition(
                    &mut object_255,
                    item_254,
                )?;
                object_255.finish();
            }
        }
        array_253.finish();
    }
    if let Some(var_256) = &input.volumes {
        let mut array_257 = object.key("volumes").start_array();
        for item_258 in var_256 {
            {
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_crate_model_volume(&mut object_259, item_258)?;
                object_259.finish();
            }
        }
        array_257.finish();
    }
    if let Some(var_260) = &input.placement_constraints {
        let mut array_261 = object.key("placementConstraints").start_array();
        for item_262 in var_260 {
            {
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_definition_placement_constraint(&mut object_263, item_262)?;
                object_263.finish();
            }
        }
        array_261.finish();
    }
    if let Some(var_264) = &input.requires_compatibilities {
        let mut array_265 = object.key("requiresCompatibilities").start_array();
        for item_266 in var_264 {
            {
                array_265.value().string(item_266.as_str());
            }
        }
        array_265.finish();
    }
    if let Some(var_267) = &input.cpu {
        object.key("cpu").string(var_267.as_str());
    }
    if let Some(var_268) = &input.memory {
        object.key("memory").string(var_268.as_str());
    }
    if let Some(var_269) = &input.tags {
        let mut array_270 = object.key("tags").start_array();
        for item_271 in var_269 {
            {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_272, item_271)?;
                object_272.finish();
            }
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.pid_mode {
        object.key("pidMode").string(var_273.as_str());
    }
    if let Some(var_274) = &input.ipc_mode {
        object.key("ipcMode").string(var_274.as_str());
    }
    if let Some(var_275) = &input.proxy_configuration {
        let mut object_276 = object.key("proxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_276,
            var_275,
        )?;
        object_276.finish();
    }
    if let Some(var_277) = &input.inference_accelerators {
        let mut array_278 = object.key("inferenceAccelerators").start_array();
        for item_279 in var_277 {
            {
                let mut object_280 = array_278.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inference_accelerator(
                    &mut object_280,
                    item_279,
                )?;
                object_280.finish();
            }
        }
        array_278.finish();
    }
    if let Some(var_281) = &input.ephemeral_storage {
        let mut object_282 = object.key("ephemeralStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_ephemeral_storage(
            &mut object_282,
            var_281,
        )?;
        object_282.finish();
    }
    if let Some(var_283) = &input.runtime_platform {
        let mut object_284 = object.key("runtimePlatform").start_object();
        crate::json_ser::serialize_structure_crate_model_runtime_platform(
            &mut object_284,
            var_283,
        )?;
        object_284.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_run_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.capacity_provider_strategy {
        let mut array_286 = object.key("capacityProviderStrategy").start_array();
        for item_287 in var_285 {
            {
                let mut object_288 = array_286.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capacity_provider_strategy_item(
                    &mut object_288,
                    item_287,
                )?;
                object_288.finish();
            }
        }
        array_286.finish();
    }
    if let Some(var_289) = &input.cluster {
        object.key("cluster").string(var_289.as_str());
    }
    if let Some(var_290) = &input.count {
        object.key("count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_290).into()),
        );
    }
    if input.enable_ecs_managed_tags {
        object
            .key("enableECSManagedTags")
            .boolean(input.enable_ecs_managed_tags);
    }
    if input.enable_execute_command {
        object
            .key("enableExecuteCommand")
            .boolean(input.enable_execute_command);
    }
    if let Some(var_291) = &input.group {
        object.key("group").string(var_291.as_str());
    }
    if let Some(var_292) = &input.launch_type {
        object.key("launchType").string(var_292.as_str());
    }
    if let Some(var_293) = &input.network_configuration {
        let mut object_294 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_network_configuration(
            &mut object_294,
            var_293,
        )?;
        object_294.finish();
    }
    if let Some(var_295) = &input.overrides {
        let mut object_296 = object.key("overrides").start_object();
        crate::json_ser::serialize_structure_crate_model_task_override(&mut object_296, var_295)?;
        object_296.finish();
    }
    if let Some(var_297) = &input.placement_constraints {
        let mut array_298 = object.key("placementConstraints").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_constraint(
                    &mut object_300,
                    item_299,
                )?;
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.placement_strategy {
        let mut array_302 = object.key("placementStrategy").start_array();
        for item_303 in var_301 {
            {
                let mut object_304 = array_302.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_strategy(
                    &mut object_304,
                    item_303,
                )?;
                object_304.finish();
            }
        }
        array_302.finish();
    }
    if let Some(var_305) = &input.platform_version {
        object.key("platformVersion").string(var_305.as_str());
    }
    if let Some(var_306) = &input.propagate_tags {
        object.key("propagateTags").string(var_306.as_str());
    }
    if let Some(var_307) = &input.reference_id {
        object.key("referenceId").string(var_307.as_str());
    }
    if let Some(var_308) = &input.started_by {
        object.key("startedBy").string(var_308.as_str());
    }
    if let Some(var_309) = &input.tags {
        let mut array_310 = object.key("tags").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_312, item_311)?;
                object_312.finish();
            }
        }
        array_310.finish();
    }
    if let Some(var_313) = &input.task_definition {
        object.key("taskDefinition").string(var_313.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.cluster {
        object.key("cluster").string(var_314.as_str());
    }
    if let Some(var_315) = &input.container_instances {
        let mut array_316 = object.key("containerInstances").start_array();
        for item_317 in var_315 {
            {
                array_316.value().string(item_317.as_str());
            }
        }
        array_316.finish();
    }
    if input.enable_ecs_managed_tags {
        object
            .key("enableECSManagedTags")
            .boolean(input.enable_ecs_managed_tags);
    }
    if input.enable_execute_command {
        object
            .key("enableExecuteCommand")
            .boolean(input.enable_execute_command);
    }
    if let Some(var_318) = &input.group {
        object.key("group").string(var_318.as_str());
    }
    if let Some(var_319) = &input.network_configuration {
        let mut object_320 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_network_configuration(
            &mut object_320,
            var_319,
        )?;
        object_320.finish();
    }
    if let Some(var_321) = &input.overrides {
        let mut object_322 = object.key("overrides").start_object();
        crate::json_ser::serialize_structure_crate_model_task_override(&mut object_322, var_321)?;
        object_322.finish();
    }
    if let Some(var_323) = &input.propagate_tags {
        object.key("propagateTags").string(var_323.as_str());
    }
    if let Some(var_324) = &input.reference_id {
        object.key("referenceId").string(var_324.as_str());
    }
    if let Some(var_325) = &input.started_by {
        object.key("startedBy").string(var_325.as_str());
    }
    if let Some(var_326) = &input.tags {
        let mut array_327 = object.key("tags").start_array();
        for item_328 in var_326 {
            {
                let mut object_329 = array_327.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_329, item_328)?;
                object_329.finish();
            }
        }
        array_327.finish();
    }
    if let Some(var_330) = &input.task_definition {
        object.key("taskDefinition").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.cluster {
        object.key("cluster").string(var_331.as_str());
    }
    if let Some(var_332) = &input.task {
        object.key("task").string(var_332.as_str());
    }
    if let Some(var_333) = &input.reason {
        object.key("reason").string(var_333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_attachment_state_changes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitAttachmentStateChangesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.cluster {
        object.key("cluster").string(var_334.as_str());
    }
    if let Some(var_335) = &input.attachments {
        let mut array_336 = object.key("attachments").start_array();
        for item_337 in var_335 {
            {
                let mut object_338 = array_336.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachment_state_change(
                    &mut object_338,
                    item_337,
                )?;
                object_338.finish();
            }
        }
        array_336.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_container_state_change_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitContainerStateChangeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.cluster {
        object.key("cluster").string(var_339.as_str());
    }
    if let Some(var_340) = &input.task {
        object.key("task").string(var_340.as_str());
    }
    if let Some(var_341) = &input.container_name {
        object.key("containerName").string(var_341.as_str());
    }
    if let Some(var_342) = &input.runtime_id {
        object.key("runtimeId").string(var_342.as_str());
    }
    if let Some(var_343) = &input.status {
        object.key("status").string(var_343.as_str());
    }
    if let Some(var_344) = &input.exit_code {
        object.key("exitCode").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_344).into()),
        );
    }
    if let Some(var_345) = &input.reason {
        object.key("reason").string(var_345.as_str());
    }
    if let Some(var_346) = &input.network_bindings {
        let mut array_347 = object.key("networkBindings").start_array();
        for item_348 in var_346 {
            {
                let mut object_349 = array_347.value().start_object();
                crate::json_ser::serialize_structure_crate_model_network_binding(
                    &mut object_349,
                    item_348,
                )?;
                object_349.finish();
            }
        }
        array_347.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_task_state_change_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitTaskStateChangeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_350) = &input.cluster {
        object.key("cluster").string(var_350.as_str());
    }
    if let Some(var_351) = &input.task {
        object.key("task").string(var_351.as_str());
    }
    if let Some(var_352) = &input.status {
        object.key("status").string(var_352.as_str());
    }
    if let Some(var_353) = &input.reason {
        object.key("reason").string(var_353.as_str());
    }
    if let Some(var_354) = &input.containers {
        let mut array_355 = object.key("containers").start_array();
        for item_356 in var_354 {
            {
                let mut object_357 = array_355.value().start_object();
                crate::json_ser::serialize_structure_crate_model_container_state_change(
                    &mut object_357,
                    item_356,
                )?;
                object_357.finish();
            }
        }
        array_355.finish();
    }
    if let Some(var_358) = &input.attachments {
        let mut array_359 = object.key("attachments").start_array();
        for item_360 in var_358 {
            {
                let mut object_361 = array_359.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachment_state_change(
                    &mut object_361,
                    item_360,
                )?;
                object_361.finish();
            }
        }
        array_359.finish();
    }
    if let Some(var_362) = &input.managed_agents {
        let mut array_363 = object.key("managedAgents").start_array();
        for item_364 in var_362 {
            {
                let mut object_365 = array_363.value().start_object();
                crate::json_ser::serialize_structure_crate_model_managed_agent_state_change(
                    &mut object_365,
                    item_364,
                )?;
                object_365.finish();
            }
        }
        array_363.finish();
    }
    if let Some(var_366) = &input.pull_started_at {
        object
            .key("pullStartedAt")
            .date_time(var_366, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_367) = &input.pull_stopped_at {
        object
            .key("pullStoppedAt")
            .date_time(var_367, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_368) = &input.execution_stopped_at {
        object
            .key("executionStoppedAt")
            .date_time(var_368, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.resource_arn {
        object.key("resourceArn").string(var_369.as_str());
    }
    if let Some(var_370) = &input.tags {
        let mut array_371 = object.key("tags").start_array();
        for item_372 in var_370 {
            {
                let mut object_373 = array_371.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_373, item_372)?;
                object_373.finish();
            }
        }
        array_371.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.resource_arn {
        object.key("resourceArn").string(var_374.as_str());
    }
    if let Some(var_375) = &input.tag_keys {
        let mut array_376 = object.key("tagKeys").start_array();
        for item_377 in var_375 {
            {
                array_376.value().string(item_377.as_str());
            }
        }
        array_376.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_capacity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCapacityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_378) = &input.name {
        object.key("name").string(var_378.as_str());
    }
    if let Some(var_379) = &input.auto_scaling_group_provider {
        let mut object_380 = object.key("autoScalingGroupProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_group_provider_update(
            &mut object_380,
            var_379,
        )?;
        object_380.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClusterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.cluster {
        object.key("cluster").string(var_381.as_str());
    }
    if let Some(var_382) = &input.settings {
        let mut array_383 = object.key("settings").start_array();
        for item_384 in var_382 {
            {
                let mut object_385 = array_383.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cluster_setting(
                    &mut object_385,
                    item_384,
                )?;
                object_385.finish();
            }
        }
        array_383.finish();
    }
    if let Some(var_386) = &input.configuration {
        let mut object_387 = object.key("configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_cluster_configuration(
            &mut object_387,
            var_386,
        )?;
        object_387.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_cluster_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClusterSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.cluster {
        object.key("cluster").string(var_388.as_str());
    }
    if let Some(var_389) = &input.settings {
        let mut array_390 = object.key("settings").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cluster_setting(
                    &mut object_392,
                    item_391,
                )?;
                object_392.finish();
            }
        }
        array_390.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_container_agent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContainerAgentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_393) = &input.cluster {
        object.key("cluster").string(var_393.as_str());
    }
    if let Some(var_394) = &input.container_instance {
        object.key("containerInstance").string(var_394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_container_instances_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContainerInstancesStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.cluster {
        object.key("cluster").string(var_395.as_str());
    }
    if let Some(var_396) = &input.container_instances {
        let mut array_397 = object.key("containerInstances").start_array();
        for item_398 in var_396 {
            {
                array_397.value().string(item_398.as_str());
            }
        }
        array_397.finish();
    }
    if let Some(var_399) = &input.status {
        object.key("status").string(var_399.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.cluster {
        object.key("cluster").string(var_400.as_str());
    }
    if let Some(var_401) = &input.service {
        object.key("service").string(var_401.as_str());
    }
    if let Some(var_402) = &input.desired_count {
        object.key("desiredCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_402).into()),
        );
    }
    if let Some(var_403) = &input.task_definition {
        object.key("taskDefinition").string(var_403.as_str());
    }
    if let Some(var_404) = &input.capacity_provider_strategy {
        let mut array_405 = object.key("capacityProviderStrategy").start_array();
        for item_406 in var_404 {
            {
                let mut object_407 = array_405.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capacity_provider_strategy_item(
                    &mut object_407,
                    item_406,
                )?;
                object_407.finish();
            }
        }
        array_405.finish();
    }
    if let Some(var_408) = &input.deployment_configuration {
        let mut object_409 = object.key("deploymentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_configuration(
            &mut object_409,
            var_408,
        )?;
        object_409.finish();
    }
    if let Some(var_410) = &input.network_configuration {
        let mut object_411 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_network_configuration(
            &mut object_411,
            var_410,
        )?;
        object_411.finish();
    }
    if let Some(var_412) = &input.placement_constraints {
        let mut array_413 = object.key("placementConstraints").start_array();
        for item_414 in var_412 {
            {
                let mut object_415 = array_413.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_constraint(
                    &mut object_415,
                    item_414,
                )?;
                object_415.finish();
            }
        }
        array_413.finish();
    }
    if let Some(var_416) = &input.placement_strategy {
        let mut array_417 = object.key("placementStrategy").start_array();
        for item_418 in var_416 {
            {
                let mut object_419 = array_417.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_strategy(
                    &mut object_419,
                    item_418,
                )?;
                object_419.finish();
            }
        }
        array_417.finish();
    }
    if let Some(var_420) = &input.platform_version {
        object.key("platformVersion").string(var_420.as_str());
    }
    if input.force_new_deployment {
        object
            .key("forceNewDeployment")
            .boolean(input.force_new_deployment);
    }
    if let Some(var_421) = &input.health_check_grace_period_seconds {
        object.key("healthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_421).into()),
        );
    }
    if let Some(var_422) = &input.enable_execute_command {
        object.key("enableExecuteCommand").boolean(*var_422);
    }
    if let Some(var_423) = &input.enable_ecs_managed_tags {
        object.key("enableECSManagedTags").boolean(*var_423);
    }
    if let Some(var_424) = &input.load_balancers {
        let mut array_425 = object.key("loadBalancers").start_array();
        for item_426 in var_424 {
            {
                let mut object_427 = array_425.value().start_object();
                crate::json_ser::serialize_structure_crate_model_load_balancer(
                    &mut object_427,
                    item_426,
                )?;
                object_427.finish();
            }
        }
        array_425.finish();
    }
    if let Some(var_428) = &input.propagate_tags {
        object.key("propagateTags").string(var_428.as_str());
    }
    if let Some(var_429) = &input.service_registries {
        let mut array_430 = object.key("serviceRegistries").start_array();
        for item_431 in var_429 {
            {
                let mut object_432 = array_430.value().start_object();
                crate::json_ser::serialize_structure_crate_model_service_registry(
                    &mut object_432,
                    item_431,
                )?;
                object_432.finish();
            }
        }
        array_430.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_primary_task_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServicePrimaryTaskSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.cluster {
        object.key("cluster").string(var_433.as_str());
    }
    if let Some(var_434) = &input.service {
        object.key("service").string(var_434.as_str());
    }
    if let Some(var_435) = &input.primary_task_set {
        object.key("primaryTaskSet").string(var_435.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_task_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTaskSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.cluster {
        object.key("cluster").string(var_436.as_str());
    }
    if let Some(var_437) = &input.service {
        object.key("service").string(var_437.as_str());
    }
    if let Some(var_438) = &input.task_set {
        object.key("taskSet").string(var_438.as_str());
    }
    if let Some(var_439) = &input.scale {
        let mut object_440 = object.key("scale").start_object();
        crate::json_ser::serialize_structure_crate_model_scale(&mut object_440, var_439)?;
        object_440.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_scaling_group_provider(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingGroupProvider,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.auto_scaling_group_arn {
        object.key("autoScalingGroupArn").string(var_441.as_str());
    }
    if let Some(var_442) = &input.managed_scaling {
        let mut object_443 = object.key("managedScaling").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_scaling(&mut object_443, var_442)?;
        object_443.finish();
    }
    if let Some(var_444) = &input.managed_termination_protection {
        object
            .key("managedTerminationProtection")
            .string(var_444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.key {
        object.key("key").string(var_445.as_str());
    }
    if let Some(var_446) = &input.value {
        object.key("value").string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cluster_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClusterSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.name {
        object.key("name").string(var_447.as_str());
    }
    if let Some(var_448) = &input.value {
        object.key("value").string(var_448.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cluster_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClusterConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_449) = &input.execute_command_configuration {
        let mut object_450 = object.key("executeCommandConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_execute_command_configuration(
            &mut object_450,
            var_449,
        )?;
        object_450.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_provider_strategy_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityProviderStrategyItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.capacity_provider {
        object.key("capacityProvider").string(var_451.as_str());
    }
    if input.weight != 0 {
        object.key("weight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.weight).into()),
        );
    }
    if input.base != 0 {
        object.key("base").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.base).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_load_balancer(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoadBalancer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.target_group_arn {
        object.key("targetGroupArn").string(var_452.as_str());
    }
    if let Some(var_453) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_453.as_str());
    }
    if let Some(var_454) = &input.container_name {
        object.key("containerName").string(var_454.as_str());
    }
    if let Some(var_455) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_455).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_registry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceRegistry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.registry_arn {
        object.key("registryArn").string(var_456.as_str());
    }
    if let Some(var_457) = &input.port {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_457).into()),
        );
    }
    if let Some(var_458) = &input.container_name {
        object.key("containerName").string(var_458.as_str());
    }
    if let Some(var_459) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_459).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_460) = &input.deployment_circuit_breaker {
        let mut object_461 = object.key("deploymentCircuitBreaker").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_circuit_breaker(
            &mut object_461,
            var_460,
        )?;
        object_461.finish();
    }
    if let Some(var_462) = &input.maximum_percent {
        object.key("maximumPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_462).into()),
        );
    }
    if let Some(var_463) = &input.minimum_healthy_percent {
        object.key("minimumHealthyPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_463).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_placement_constraint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementConstraint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_464) = &input.r#type {
        object.key("type").string(var_464.as_str());
    }
    if let Some(var_465) = &input.expression {
        object.key("expression").string(var_465.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_placement_strategy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementStrategy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_466) = &input.r#type {
        object.key("type").string(var_466.as_str());
    }
    if let Some(var_467) = &input.field {
        object.key("field").string(var_467.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.awsvpc_configuration {
        let mut object_469 = object.key("awsvpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_vpc_configuration(
            &mut object_469,
            var_468,
        )?;
        object_469.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_controller(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentController,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_470) = &input.r#type {
        object.key("type").string(var_470.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scale(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scale,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.value != 0.0 {
        object.key("value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.value).into()),
        );
    }
    if let Some(var_471) = &input.unit {
        object.key("unit").string(var_471.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Attribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.name {
        object.key("name").string(var_472.as_str());
    }
    if let Some(var_473) = &input.value {
        object.key("value").string(var_473.as_str());
    }
    if let Some(var_474) = &input.target_type {
        object.key("targetType").string(var_474.as_str());
    }
    if let Some(var_475) = &input.target_id {
        object.key("targetId").string(var_475.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Resource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_476) = &input.name {
        object.key("name").string(var_476.as_str());
    }
    if let Some(var_477) = &input.r#type {
        object.key("type").string(var_477.as_str());
    }
    if input.double_value != 0.0 {
        object.key("doubleValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.double_value).into()),
        );
    }
    if input.long_value != 0 {
        object.key("longValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.long_value).into()),
        );
    }
    if input.integer_value != 0 {
        object.key("integerValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.integer_value).into()),
        );
    }
    if let Some(var_478) = &input.string_set_value {
        let mut array_479 = object.key("stringSetValue").start_array();
        for item_480 in var_478 {
            {
                array_479.value().string(item_480.as_str());
            }
        }
        array_479.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_version_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VersionInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_481) = &input.agent_version {
        object.key("agentVersion").string(var_481.as_str());
    }
    if let Some(var_482) = &input.agent_hash {
        object.key("agentHash").string(var_482.as_str());
    }
    if let Some(var_483) = &input.docker_version {
        object.key("dockerVersion").string(var_483.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_platform_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlatformDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_484) = &input.id {
        object.key("id").string(var_484.as_str());
    }
    if let Some(var_485) = &input.r#type {
        object.key("type").string(var_485.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_486) = &input.name {
        object.key("name").string(var_486.as_str());
    }
    if let Some(var_487) = &input.image {
        object.key("image").string(var_487.as_str());
    }
    if let Some(var_488) = &input.repository_credentials {
        let mut object_489 = object.key("repositoryCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_repository_credentials(
            &mut object_489,
            var_488,
        )?;
        object_489.finish();
    }
    if input.cpu != 0 {
        object.key("cpu").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cpu).into()),
        );
    }
    if let Some(var_490) = &input.memory {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_490).into()),
        );
    }
    if let Some(var_491) = &input.memory_reservation {
        object.key("memoryReservation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_491).into()),
        );
    }
    if let Some(var_492) = &input.links {
        let mut array_493 = object.key("links").start_array();
        for item_494 in var_492 {
            {
                array_493.value().string(item_494.as_str());
            }
        }
        array_493.finish();
    }
    if let Some(var_495) = &input.port_mappings {
        let mut array_496 = object.key("portMappings").start_array();
        for item_497 in var_495 {
            {
                let mut object_498 = array_496.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_mapping(
                    &mut object_498,
                    item_497,
                )?;
                object_498.finish();
            }
        }
        array_496.finish();
    }
    if let Some(var_499) = &input.essential {
        object.key("essential").boolean(*var_499);
    }
    if let Some(var_500) = &input.entry_point {
        let mut array_501 = object.key("entryPoint").start_array();
        for item_502 in var_500 {
            {
                array_501.value().string(item_502.as_str());
            }
        }
        array_501.finish();
    }
    if let Some(var_503) = &input.command {
        let mut array_504 = object.key("command").start_array();
        for item_505 in var_503 {
            {
                array_504.value().string(item_505.as_str());
            }
        }
        array_504.finish();
    }
    if let Some(var_506) = &input.environment {
        let mut array_507 = object.key("environment").start_array();
        for item_508 in var_506 {
            {
                let mut object_509 = array_507.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_value_pair(
                    &mut object_509,
                    item_508,
                )?;
                object_509.finish();
            }
        }
        array_507.finish();
    }
    if let Some(var_510) = &input.environment_files {
        let mut array_511 = object.key("environmentFiles").start_array();
        for item_512 in var_510 {
            {
                let mut object_513 = array_511.value().start_object();
                crate::json_ser::serialize_structure_crate_model_environment_file(
                    &mut object_513,
                    item_512,
                )?;
                object_513.finish();
            }
        }
        array_511.finish();
    }
    if let Some(var_514) = &input.mount_points {
        let mut array_515 = object.key("mountPoints").start_array();
        for item_516 in var_514 {
            {
                let mut object_517 = array_515.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mount_point(
                    &mut object_517,
                    item_516,
                )?;
                object_517.finish();
            }
        }
        array_515.finish();
    }
    if let Some(var_518) = &input.volumes_from {
        let mut array_519 = object.key("volumesFrom").start_array();
        for item_520 in var_518 {
            {
                let mut object_521 = array_519.value().start_object();
                crate::json_ser::serialize_structure_crate_model_volume_from(
                    &mut object_521,
                    item_520,
                )?;
                object_521.finish();
            }
        }
        array_519.finish();
    }
    if let Some(var_522) = &input.linux_parameters {
        let mut object_523 = object.key("linuxParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_linux_parameters(
            &mut object_523,
            var_522,
        )?;
        object_523.finish();
    }
    if let Some(var_524) = &input.secrets {
        let mut array_525 = object.key("secrets").start_array();
        for item_526 in var_524 {
            {
                let mut object_527 = array_525.value().start_object();
                crate::json_ser::serialize_structure_crate_model_secret(&mut object_527, item_526)?;
                object_527.finish();
            }
        }
        array_525.finish();
    }
    if let Some(var_528) = &input.depends_on {
        let mut array_529 = object.key("dependsOn").start_array();
        for item_530 in var_528 {
            {
                let mut object_531 = array_529.value().start_object();
                crate::json_ser::serialize_structure_crate_model_container_dependency(
                    &mut object_531,
                    item_530,
                )?;
                object_531.finish();
            }
        }
        array_529.finish();
    }
    if let Some(var_532) = &input.start_timeout {
        object.key("startTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_532).into()),
        );
    }
    if let Some(var_533) = &input.stop_timeout {
        object.key("stopTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    if let Some(var_534) = &input.hostname {
        object.key("hostname").string(var_534.as_str());
    }
    if let Some(var_535) = &input.user {
        object.key("user").string(var_535.as_str());
    }
    if let Some(var_536) = &input.working_directory {
        object.key("workingDirectory").string(var_536.as_str());
    }
    if let Some(var_537) = &input.disable_networking {
        object.key("disableNetworking").boolean(*var_537);
    }
    if let Some(var_538) = &input.privileged {
        object.key("privileged").boolean(*var_538);
    }
    if let Some(var_539) = &input.readonly_root_filesystem {
        object.key("readonlyRootFilesystem").boolean(*var_539);
    }
    if let Some(var_540) = &input.dns_servers {
        let mut array_541 = object.key("dnsServers").start_array();
        for item_542 in var_540 {
            {
                array_541.value().string(item_542.as_str());
            }
        }
        array_541.finish();
    }
    if let Some(var_543) = &input.dns_search_domains {
        let mut array_544 = object.key("dnsSearchDomains").start_array();
        for item_545 in var_543 {
            {
                array_544.value().string(item_545.as_str());
            }
        }
        array_544.finish();
    }
    if let Some(var_546) = &input.extra_hosts {
        let mut array_547 = object.key("extraHosts").start_array();
        for item_548 in var_546 {
            {
                let mut object_549 = array_547.value().start_object();
                crate::json_ser::serialize_structure_crate_model_host_entry(
                    &mut object_549,
                    item_548,
                )?;
                object_549.finish();
            }
        }
        array_547.finish();
    }
    if let Some(var_550) = &input.docker_security_options {
        let mut array_551 = object.key("dockerSecurityOptions").start_array();
        for item_552 in var_550 {
            {
                array_551.value().string(item_552.as_str());
            }
        }
        array_551.finish();
    }
    if let Some(var_553) = &input.interactive {
        object.key("interactive").boolean(*var_553);
    }
    if let Some(var_554) = &input.pseudo_terminal {
        object.key("pseudoTerminal").boolean(*var_554);
    }
    if let Some(var_555) = &input.docker_labels {
        let mut object_556 = object.key("dockerLabels").start_object();
        for (key_557, value_558) in var_555 {
            {
                object_556.key(key_557).string(value_558.as_str());
            }
        }
        object_556.finish();
    }
    if let Some(var_559) = &input.ulimits {
        let mut array_560 = object.key("ulimits").start_array();
        for item_561 in var_559 {
            {
                let mut object_562 = array_560.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ulimit(&mut object_562, item_561)?;
                object_562.finish();
            }
        }
        array_560.finish();
    }
    if let Some(var_563) = &input.log_configuration {
        let mut object_564 = object.key("logConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_log_configuration(
            &mut object_564,
            var_563,
        )?;
        object_564.finish();
    }
    if let Some(var_565) = &input.health_check {
        let mut object_566 = object.key("healthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_health_check(&mut object_566, var_565)?;
        object_566.finish();
    }
    if let Some(var_567) = &input.system_controls {
        let mut array_568 = object.key("systemControls").start_array();
        for item_569 in var_567 {
            {
                let mut object_570 = array_568.value().start_object();
                crate::json_ser::serialize_structure_crate_model_system_control(
                    &mut object_570,
                    item_569,
                )?;
                object_570.finish();
            }
        }
        array_568.finish();
    }
    if let Some(var_571) = &input.resource_requirements {
        let mut array_572 = object.key("resourceRequirements").start_array();
        for item_573 in var_571 {
            {
                let mut object_574 = array_572.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_requirement(
                    &mut object_574,
                    item_573,
                )?;
                object_574.finish();
            }
        }
        array_572.finish();
    }
    if let Some(var_575) = &input.firelens_configuration {
        let mut object_576 = object.key("firelensConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_firelens_configuration(
            &mut object_576,
            var_575,
        )?;
        object_576.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_volume(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Volume,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_577) = &input.name {
        object.key("name").string(var_577.as_str());
    }
    if let Some(var_578) = &input.host {
        let mut object_579 = object.key("host").start_object();
        crate::json_ser::serialize_structure_crate_model_host_volume_properties(
            &mut object_579,
            var_578,
        )?;
        object_579.finish();
    }
    if let Some(var_580) = &input.docker_volume_configuration {
        let mut object_581 = object.key("dockerVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_docker_volume_configuration(
            &mut object_581,
            var_580,
        )?;
        object_581.finish();
    }
    if let Some(var_582) = &input.efs_volume_configuration {
        let mut object_583 = object.key("efsVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_efs_volume_configuration(
            &mut object_583,
            var_582,
        )?;
        object_583.finish();
    }
    if let Some(var_584) = &input.fsx_windows_file_server_volume_configuration {
        let mut object_585 = object
            .key("fsxWindowsFileServerVolumeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_f_sx_windows_file_server_volume_configuration(&mut object_585, var_584)?;
        object_585.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_definition_placement_constraint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskDefinitionPlacementConstraint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_586) = &input.r#type {
        object.key("type").string(var_586.as_str());
    }
    if let Some(var_587) = &input.expression {
        object.key("expression").string(var_587.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proxy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_588) = &input.r#type {
        object.key("type").string(var_588.as_str());
    }
    if let Some(var_589) = &input.container_name {
        object.key("containerName").string(var_589.as_str());
    }
    if let Some(var_590) = &input.properties {
        let mut array_591 = object.key("properties").start_array();
        for item_592 in var_590 {
            {
                let mut object_593 = array_591.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_value_pair(
                    &mut object_593,
                    item_592,
                )?;
                object_593.finish();
            }
        }
        array_591.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_accelerator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_594) = &input.device_name {
        object.key("deviceName").string(var_594.as_str());
    }
    if let Some(var_595) = &input.device_type {
        object.key("deviceType").string(var_595.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ephemeral_storage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EphemeralStorage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("sizeInGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size_in_gi_b).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_runtime_platform(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuntimePlatform,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_596) = &input.cpu_architecture {
        object.key("cpuArchitecture").string(var_596.as_str());
    }
    if let Some(var_597) = &input.operating_system_family {
        object.key("operatingSystemFamily").string(var_597.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_598) = &input.container_overrides {
        let mut array_599 = object.key("containerOverrides").start_array();
        for item_600 in var_598 {
            {
                let mut object_601 = array_599.value().start_object();
                crate::json_ser::serialize_structure_crate_model_container_override(
                    &mut object_601,
                    item_600,
                )?;
                object_601.finish();
            }
        }
        array_599.finish();
    }
    if let Some(var_602) = &input.cpu {
        object.key("cpu").string(var_602.as_str());
    }
    if let Some(var_603) = &input.inference_accelerator_overrides {
        let mut array_604 = object.key("inferenceAcceleratorOverrides").start_array();
        for item_605 in var_603 {
            {
                let mut object_606 = array_604.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inference_accelerator_override(
                    &mut object_606,
                    item_605,
                )?;
                object_606.finish();
            }
        }
        array_604.finish();
    }
    if let Some(var_607) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_607.as_str());
    }
    if let Some(var_608) = &input.memory {
        object.key("memory").string(var_608.as_str());
    }
    if let Some(var_609) = &input.task_role_arn {
        object.key("taskRoleArn").string(var_609.as_str());
    }
    if let Some(var_610) = &input.ephemeral_storage {
        let mut object_611 = object.key("ephemeralStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_ephemeral_storage(
            &mut object_611,
            var_610,
        )?;
        object_611.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attachment_state_change(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttachmentStateChange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_612) = &input.attachment_arn {
        object.key("attachmentArn").string(var_612.as_str());
    }
    if let Some(var_613) = &input.status {
        object.key("status").string(var_613.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_binding(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkBinding,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.bind_ip {
        object.key("bindIP").string(var_614.as_str());
    }
    if let Some(var_615) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_615).into()),
        );
    }
    if let Some(var_616) = &input.host_port {
        object.key("hostPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_616).into()),
        );
    }
    if let Some(var_617) = &input.protocol {
        object.key("protocol").string(var_617.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_state_change(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerStateChange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_618) = &input.container_name {
        object.key("containerName").string(var_618.as_str());
    }
    if let Some(var_619) = &input.image_digest {
        object.key("imageDigest").string(var_619.as_str());
    }
    if let Some(var_620) = &input.runtime_id {
        object.key("runtimeId").string(var_620.as_str());
    }
    if let Some(var_621) = &input.exit_code {
        object.key("exitCode").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_621).into()),
        );
    }
    if let Some(var_622) = &input.network_bindings {
        let mut array_623 = object.key("networkBindings").start_array();
        for item_624 in var_622 {
            {
                let mut object_625 = array_623.value().start_object();
                crate::json_ser::serialize_structure_crate_model_network_binding(
                    &mut object_625,
                    item_624,
                )?;
                object_625.finish();
            }
        }
        array_623.finish();
    }
    if let Some(var_626) = &input.reason {
        object.key("reason").string(var_626.as_str());
    }
    if let Some(var_627) = &input.status {
        object.key("status").string(var_627.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_managed_agent_state_change(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedAgentStateChange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_628) = &input.container_name {
        object.key("containerName").string(var_628.as_str());
    }
    if let Some(var_629) = &input.managed_agent_name {
        object.key("managedAgentName").string(var_629.as_str());
    }
    if let Some(var_630) = &input.status {
        object.key("status").string(var_630.as_str());
    }
    if let Some(var_631) = &input.reason {
        object.key("reason").string(var_631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_scaling_group_provider_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingGroupProviderUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_632) = &input.managed_scaling {
        let mut object_633 = object.key("managedScaling").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_scaling(&mut object_633, var_632)?;
        object_633.finish();
    }
    if let Some(var_634) = &input.managed_termination_protection {
        object
            .key("managedTerminationProtection")
            .string(var_634.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_managed_scaling(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedScaling,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_635) = &input.status {
        object.key("status").string(var_635.as_str());
    }
    if let Some(var_636) = &input.target_capacity {
        object.key("targetCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_636).into()),
        );
    }
    if let Some(var_637) = &input.minimum_scaling_step_size {
        object.key("minimumScalingStepSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_637).into()),
        );
    }
    if let Some(var_638) = &input.maximum_scaling_step_size {
        object.key("maximumScalingStepSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_638).into()),
        );
    }
    if let Some(var_639) = &input.instance_warmup_period {
        object.key("instanceWarmupPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_639).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execute_command_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecuteCommandConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_640) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_640.as_str());
    }
    if let Some(var_641) = &input.logging {
        object.key("logging").string(var_641.as_str());
    }
    if let Some(var_642) = &input.log_configuration {
        let mut object_643 = object.key("logConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_execute_command_log_configuration(
            &mut object_643,
            var_642,
        )?;
        object_643.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_circuit_breaker(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentCircuitBreaker,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enable").boolean(input.enable);
    }
    {
        object.key("rollback").boolean(input.rollback);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsVpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_644) = &input.subnets {
        let mut array_645 = object.key("subnets").start_array();
        for item_646 in var_644 {
            {
                array_645.value().string(item_646.as_str());
            }
        }
        array_645.finish();
    }
    if let Some(var_647) = &input.security_groups {
        let mut array_648 = object.key("securityGroups").start_array();
        for item_649 in var_647 {
            {
                array_648.value().string(item_649.as_str());
            }
        }
        array_648.finish();
    }
    if let Some(var_650) = &input.assign_public_ip {
        object.key("assignPublicIp").string(var_650.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_651) = &input.credentials_parameter {
        object.key("credentialsParameter").string(var_651.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_652) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_652).into()),
        );
    }
    if let Some(var_653) = &input.host_port {
        object.key("hostPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_653).into()),
        );
    }
    if let Some(var_654) = &input.protocol {
        object.key("protocol").string(var_654.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_key_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_655) = &input.name {
        object.key("name").string(var_655.as_str());
    }
    if let Some(var_656) = &input.value {
        object.key("value").string(var_656.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_environment_file(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnvironmentFile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_657) = &input.value {
        object.key("value").string(var_657.as_str());
    }
    if let Some(var_658) = &input.r#type {
        object.key("type").string(var_658.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mount_point(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MountPoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_659) = &input.source_volume {
        object.key("sourceVolume").string(var_659.as_str());
    }
    if let Some(var_660) = &input.container_path {
        object.key("containerPath").string(var_660.as_str());
    }
    if let Some(var_661) = &input.read_only {
        object.key("readOnly").boolean(*var_661);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_volume_from(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeFrom,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_662) = &input.source_container {
        object.key("sourceContainer").string(var_662.as_str());
    }
    if let Some(var_663) = &input.read_only {
        object.key("readOnly").boolean(*var_663);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_linux_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LinuxParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_664) = &input.capabilities {
        let mut object_665 = object.key("capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_capabilities(
            &mut object_665,
            var_664,
        )?;
        object_665.finish();
    }
    if let Some(var_666) = &input.devices {
        let mut array_667 = object.key("devices").start_array();
        for item_668 in var_666 {
            {
                let mut object_669 = array_667.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(&mut object_669, item_668)?;
                object_669.finish();
            }
        }
        array_667.finish();
    }
    if let Some(var_670) = &input.init_process_enabled {
        object.key("initProcessEnabled").boolean(*var_670);
    }
    if let Some(var_671) = &input.shared_memory_size {
        object.key("sharedMemorySize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_671).into()),
        );
    }
    if let Some(var_672) = &input.tmpfs {
        let mut array_673 = object.key("tmpfs").start_array();
        for item_674 in var_672 {
            {
                let mut object_675 = array_673.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tmpfs(&mut object_675, item_674)?;
                object_675.finish();
            }
        }
        array_673.finish();
    }
    if let Some(var_676) = &input.max_swap {
        object.key("maxSwap").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_676).into()),
        );
    }
    if let Some(var_677) = &input.swappiness {
        object.key("swappiness").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_677).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_secret(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Secret,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_678) = &input.name {
        object.key("name").string(var_678.as_str());
    }
    if let Some(var_679) = &input.value_from {
        object.key("valueFrom").string(var_679.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_dependency(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDependency,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_680) = &input.container_name {
        object.key("containerName").string(var_680.as_str());
    }
    if let Some(var_681) = &input.condition {
        object.key("condition").string(var_681.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_host_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HostEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_682) = &input.hostname {
        object.key("hostname").string(var_682.as_str());
    }
    if let Some(var_683) = &input.ip_address {
        object.key("ipAddress").string(var_683.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ulimit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ulimit,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_684) = &input.name {
        object.key("name").string(var_684.as_str());
    }
    {
        object.key("softLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.soft_limit).into()),
        );
    }
    {
        object.key("hardLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.hard_limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_685) = &input.log_driver {
        object.key("logDriver").string(var_685.as_str());
    }
    if let Some(var_686) = &input.options {
        let mut object_687 = object.key("options").start_object();
        for (key_688, value_689) in var_686 {
            {
                object_687.key(key_688).string(value_689.as_str());
            }
        }
        object_687.finish();
    }
    if let Some(var_690) = &input.secret_options {
        let mut array_691 = object.key("secretOptions").start_array();
        for item_692 in var_690 {
            {
                let mut object_693 = array_691.value().start_object();
                crate::json_ser::serialize_structure_crate_model_secret(&mut object_693, item_692)?;
                object_693.finish();
            }
        }
        array_691.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_health_check(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HealthCheck,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_694) = &input.command {
        let mut array_695 = object.key("command").start_array();
        for item_696 in var_694 {
            {
                array_695.value().string(item_696.as_str());
            }
        }
        array_695.finish();
    }
    if let Some(var_697) = &input.interval {
        object.key("interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_697).into()),
        );
    }
    if let Some(var_698) = &input.timeout {
        object.key("timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_698).into()),
        );
    }
    if let Some(var_699) = &input.retries {
        object.key("retries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_699).into()),
        );
    }
    if let Some(var_700) = &input.start_period {
        object.key("startPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_700).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_system_control(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SystemControl,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_701) = &input.namespace {
        object.key("namespace").string(var_701.as_str());
    }
    if let Some(var_702) = &input.value {
        object.key("value").string(var_702.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_requirement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceRequirement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.value {
        object.key("value").string(var_703.as_str());
    }
    if let Some(var_704) = &input.r#type {
        object.key("type").string(var_704.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firelens_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirelensConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_705) = &input.r#type {
        object.key("type").string(var_705.as_str());
    }
    if let Some(var_706) = &input.options {
        let mut object_707 = object.key("options").start_object();
        for (key_708, value_709) in var_706 {
            {
                object_707.key(key_708).string(value_709.as_str());
            }
        }
        object_707.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_host_volume_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HostVolumeProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_710) = &input.source_path {
        object.key("sourcePath").string(var_710.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_docker_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DockerVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_711) = &input.scope {
        object.key("scope").string(var_711.as_str());
    }
    if let Some(var_712) = &input.autoprovision {
        object.key("autoprovision").boolean(*var_712);
    }
    if let Some(var_713) = &input.driver {
        object.key("driver").string(var_713.as_str());
    }
    if let Some(var_714) = &input.driver_opts {
        let mut object_715 = object.key("driverOpts").start_object();
        for (key_716, value_717) in var_714 {
            {
                object_715.key(key_716).string(value_717.as_str());
            }
        }
        object_715.finish();
    }
    if let Some(var_718) = &input.labels {
        let mut object_719 = object.key("labels").start_object();
        for (key_720, value_721) in var_718 {
            {
                object_719.key(key_720).string(value_721.as_str());
            }
        }
        object_719.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_efs_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EfsVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_722) = &input.file_system_id {
        object.key("fileSystemId").string(var_722.as_str());
    }
    if let Some(var_723) = &input.root_directory {
        object.key("rootDirectory").string(var_723.as_str());
    }
    if let Some(var_724) = &input.transit_encryption {
        object.key("transitEncryption").string(var_724.as_str());
    }
    if let Some(var_725) = &input.transit_encryption_port {
        object.key("transitEncryptionPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_725).into()),
        );
    }
    if let Some(var_726) = &input.authorization_config {
        let mut object_727 = object.key("authorizationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_efs_authorization_config(
            &mut object_727,
            var_726,
        )?;
        object_727.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_f_sx_windows_file_server_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FSxWindowsFileServerVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_728) = &input.file_system_id {
        object.key("fileSystemId").string(var_728.as_str());
    }
    if let Some(var_729) = &input.root_directory {
        object.key("rootDirectory").string(var_729.as_str());
    }
    if let Some(var_730) = &input.authorization_config {
        let mut object_731 = object.key("authorizationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_f_sx_windows_file_server_authorization_config(&mut object_731, var_730)?;
        object_731.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_732) = &input.name {
        object.key("name").string(var_732.as_str());
    }
    if let Some(var_733) = &input.command {
        let mut array_734 = object.key("command").start_array();
        for item_735 in var_733 {
            {
                array_734.value().string(item_735.as_str());
            }
        }
        array_734.finish();
    }
    if let Some(var_736) = &input.environment {
        let mut array_737 = object.key("environment").start_array();
        for item_738 in var_736 {
            {
                let mut object_739 = array_737.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_value_pair(
                    &mut object_739,
                    item_738,
                )?;
                object_739.finish();
            }
        }
        array_737.finish();
    }
    if let Some(var_740) = &input.environment_files {
        let mut array_741 = object.key("environmentFiles").start_array();
        for item_742 in var_740 {
            {
                let mut object_743 = array_741.value().start_object();
                crate::json_ser::serialize_structure_crate_model_environment_file(
                    &mut object_743,
                    item_742,
                )?;
                object_743.finish();
            }
        }
        array_741.finish();
    }
    if let Some(var_744) = &input.cpu {
        object.key("cpu").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_744).into()),
        );
    }
    if let Some(var_745) = &input.memory {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_745).into()),
        );
    }
    if let Some(var_746) = &input.memory_reservation {
        object.key("memoryReservation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_746).into()),
        );
    }
    if let Some(var_747) = &input.resource_requirements {
        let mut array_748 = object.key("resourceRequirements").start_array();
        for item_749 in var_747 {
            {
                let mut object_750 = array_748.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_requirement(
                    &mut object_750,
                    item_749,
                )?;
                object_750.finish();
            }
        }
        array_748.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_accelerator_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceAcceleratorOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_751) = &input.device_name {
        object.key("deviceName").string(var_751.as_str());
    }
    if let Some(var_752) = &input.device_type {
        object.key("deviceType").string(var_752.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execute_command_log_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecuteCommandLogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_753) = &input.cloud_watch_log_group_name {
        object
            .key("cloudWatchLogGroupName")
            .string(var_753.as_str());
    }
    if input.cloud_watch_encryption_enabled {
        object
            .key("cloudWatchEncryptionEnabled")
            .boolean(input.cloud_watch_encryption_enabled);
    }
    if let Some(var_754) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_754.as_str());
    }
    if input.s3_encryption_enabled {
        object
            .key("s3EncryptionEnabled")
            .boolean(input.s3_encryption_enabled);
    }
    if let Some(var_755) = &input.s3_key_prefix {
        object.key("s3KeyPrefix").string(var_755.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_capabilities(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelCapabilities,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_756) = &input.add {
        let mut array_757 = object.key("add").start_array();
        for item_758 in var_756 {
            {
                array_757.value().string(item_758.as_str());
            }
        }
        array_757.finish();
    }
    if let Some(var_759) = &input.drop {
        let mut array_760 = object.key("drop").start_array();
        for item_761 in var_759 {
            {
                array_760.value().string(item_761.as_str());
            }
        }
        array_760.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_762) = &input.host_path {
        object.key("hostPath").string(var_762.as_str());
    }
    if let Some(var_763) = &input.container_path {
        object.key("containerPath").string(var_763.as_str());
    }
    if let Some(var_764) = &input.permissions {
        let mut array_765 = object.key("permissions").start_array();
        for item_766 in var_764 {
            {
                array_765.value().string(item_766.as_str());
            }
        }
        array_765.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tmpfs(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tmpfs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_767) = &input.container_path {
        object.key("containerPath").string(var_767.as_str());
    }
    {
        object.key("size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_768) = &input.mount_options {
        let mut array_769 = object.key("mountOptions").start_array();
        for item_770 in var_768 {
            {
                array_769.value().string(item_770.as_str());
            }
        }
        array_769.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_efs_authorization_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EfsAuthorizationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_771) = &input.access_point_id {
        object.key("accessPointId").string(var_771.as_str());
    }
    if let Some(var_772) = &input.iam {
        object.key("iam").string(var_772.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_f_sx_windows_file_server_authorization_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FSxWindowsFileServerAuthorizationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_773) = &input.credentials_parameter {
        object.key("credentialsParameter").string(var_773.as_str());
    }
    if let Some(var_774) = &input.domain {
        object.key("domain").string(var_774.as_str());
    }
    Ok(())
}
