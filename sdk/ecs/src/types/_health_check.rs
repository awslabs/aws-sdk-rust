// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile).</p> <note>
/// <p>The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.</p>
/// </note>
/// <p>You can view the health status of both individual containers and a task with the DescribeTasks API operation or when viewing the task details in the console.</p>
/// <p>The following describes the possible <code>healthStatus</code> values for a container:</p>
/// <ul>
/// <li> <p> <code>HEALTHY</code>-The container health check has passed successfully.</p> </li>
/// <li> <p> <code>UNHEALTHY</code>-The container health check has failed.</p> </li>
/// <li> <p> <code>UNKNOWN</code>-The container health check is being evaluated or there's no container health check defined.</p> </li>
/// </ul>
/// <p>The following describes the possible <code>healthStatus</code> values for a task. The container health check status of nonessential containers only affects the health status of a task if no essential containers have health checks defined.</p>
/// <ul>
/// <li> <p> <code>HEALTHY</code>-All essential containers within the task have passed their health checks.</p> </li>
/// <li> <p> <code>UNHEALTHY</code>-One or more essential containers have failed their health check.</p> </li>
/// <li> <p> <code>UNKNOWN</code>-The essential containers within the task are still having their health checks evaluated or there are only nonessential containers with health checks defined.</p> </li>
/// </ul>
/// <p>If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it.</p> <important>
/// <p>For tasks that are a part of a service and the service uses the <code>ECS</code> rolling deployment type, the deployment is paused while the new tasks have the <code>UNKNOWN</code> task health check status. For example, tasks that define health checks for nonessential containers when no essential containers have health checks will have the <code>UNKNOWN</code> health check status indefinitely which prevents the deployment from completing.</p>
/// </important>
/// <p>The following are notes about container health check support:</p>
/// <ul>
/// <li> <p>Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html">Updating the Amazon ECS container agent</a>.</p> </li>
/// <li> <p>Container health checks are supported for Fargate tasks if you're using platform version <code>1.1.0</code> or greater. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate platform versions</a>.</p> </li>
/// <li> <p>Container health checks aren't supported for tasks that are part of a service that's configured to use a Classic Load Balancer.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HealthCheck {
    /// <p>A string array representing the command that the container runs to determine if it is healthy. The string array must start with <code>CMD</code> to run the command arguments directly, or <code>CMD-SHELL</code> to run the command with the container's default shell. </p>
    /// <p> When you use the Amazon Web Services Management Console JSON panel, the Command Line Interface, or the APIs, enclose the list of commands in double quotes and brackets.</p>
    /// <p> <code>[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]</code> </p>
    /// <p>You don't include the double quotes and brackets when you use the Amazon Web Services Management Console.</p>
    /// <p> <code> CMD-SHELL, curl -f http://localhost/ || exit 1</code> </p>
    /// <p>An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see <code>HealthCheck</code> in the <a href="https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.35/">Docker Remote API</a>.</p>
    #[doc(hidden)]
    pub command: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.</p>
    #[doc(hidden)]
    pub interval: std::option::Option<i32>,
    /// <p>The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.</p>
    #[doc(hidden)]
    pub timeout: std::option::Option<i32>,
    /// <p>The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.</p>
    #[doc(hidden)]
    pub retries: std::option::Option<i32>,
    /// <p>The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the <code>startPeriod</code> is off.</p> <note>
    /// <p>If a health check succeeds within the <code>startPeriod</code>, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.</p>
    /// </note>
    #[doc(hidden)]
    pub start_period: std::option::Option<i32>,
}
impl HealthCheck {
    /// <p>A string array representing the command that the container runs to determine if it is healthy. The string array must start with <code>CMD</code> to run the command arguments directly, or <code>CMD-SHELL</code> to run the command with the container's default shell. </p>
    /// <p> When you use the Amazon Web Services Management Console JSON panel, the Command Line Interface, or the APIs, enclose the list of commands in double quotes and brackets.</p>
    /// <p> <code>[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]</code> </p>
    /// <p>You don't include the double quotes and brackets when you use the Amazon Web Services Management Console.</p>
    /// <p> <code> CMD-SHELL, curl -f http://localhost/ || exit 1</code> </p>
    /// <p>An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see <code>HealthCheck</code> in the <a href="https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.35/">Docker Remote API</a>.</p>
    pub fn command(&self) -> std::option::Option<&[std::string::String]> {
        self.command.as_deref()
    }
    /// <p>The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.</p>
    pub fn interval(&self) -> std::option::Option<i32> {
        self.interval
    }
    /// <p>The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.</p>
    pub fn timeout(&self) -> std::option::Option<i32> {
        self.timeout
    }
    /// <p>The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.</p>
    pub fn retries(&self) -> std::option::Option<i32> {
        self.retries
    }
    /// <p>The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the <code>startPeriod</code> is off.</p> <note>
    /// <p>If a health check succeeds within the <code>startPeriod</code>, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.</p>
    /// </note>
    pub fn start_period(&self) -> std::option::Option<i32> {
        self.start_period
    }
}
impl HealthCheck {
    /// Creates a new builder-style object to manufacture [`HealthCheck`](crate::types::HealthCheck).
    pub fn builder() -> crate::types::builders::HealthCheckBuilder {
        crate::types::builders::HealthCheckBuilder::default()
    }
}

/// A builder for [`HealthCheck`](crate::types::HealthCheck).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HealthCheckBuilder {
    pub(crate) command: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) interval: std::option::Option<i32>,
    pub(crate) timeout: std::option::Option<i32>,
    pub(crate) retries: std::option::Option<i32>,
    pub(crate) start_period: std::option::Option<i32>,
}
impl HealthCheckBuilder {
    /// Appends an item to `command`.
    ///
    /// To override the contents of this collection use [`set_command`](Self::set_command).
    ///
    /// <p>A string array representing the command that the container runs to determine if it is healthy. The string array must start with <code>CMD</code> to run the command arguments directly, or <code>CMD-SHELL</code> to run the command with the container's default shell. </p>
    /// <p> When you use the Amazon Web Services Management Console JSON panel, the Command Line Interface, or the APIs, enclose the list of commands in double quotes and brackets.</p>
    /// <p> <code>[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]</code> </p>
    /// <p>You don't include the double quotes and brackets when you use the Amazon Web Services Management Console.</p>
    /// <p> <code> CMD-SHELL, curl -f http://localhost/ || exit 1</code> </p>
    /// <p>An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see <code>HealthCheck</code> in the <a href="https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.35/">Docker Remote API</a>.</p>
    pub fn command(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.command.unwrap_or_default();
        v.push(input.into());
        self.command = Some(v);
        self
    }
    /// <p>A string array representing the command that the container runs to determine if it is healthy. The string array must start with <code>CMD</code> to run the command arguments directly, or <code>CMD-SHELL</code> to run the command with the container's default shell. </p>
    /// <p> When you use the Amazon Web Services Management Console JSON panel, the Command Line Interface, or the APIs, enclose the list of commands in double quotes and brackets.</p>
    /// <p> <code>[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]</code> </p>
    /// <p>You don't include the double quotes and brackets when you use the Amazon Web Services Management Console.</p>
    /// <p> <code> CMD-SHELL, curl -f http://localhost/ || exit 1</code> </p>
    /// <p>An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see <code>HealthCheck</code> in the <a href="https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.35/">Docker Remote API</a>.</p>
    pub fn set_command(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.command = input;
        self
    }
    /// <p>The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.</p>
    pub fn interval(mut self, input: i32) -> Self {
        self.interval = Some(input);
        self
    }
    /// <p>The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.</p>
    pub fn set_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.interval = input;
        self
    }
    /// <p>The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.</p>
    pub fn timeout(mut self, input: i32) -> Self {
        self.timeout = Some(input);
        self
    }
    /// <p>The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.</p>
    pub fn set_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout = input;
        self
    }
    /// <p>The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.</p>
    pub fn retries(mut self, input: i32) -> Self {
        self.retries = Some(input);
        self
    }
    /// <p>The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.</p>
    pub fn set_retries(mut self, input: std::option::Option<i32>) -> Self {
        self.retries = input;
        self
    }
    /// <p>The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the <code>startPeriod</code> is off.</p> <note>
    /// <p>If a health check succeeds within the <code>startPeriod</code>, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.</p>
    /// </note>
    pub fn start_period(mut self, input: i32) -> Self {
        self.start_period = Some(input);
        self
    }
    /// <p>The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the <code>startPeriod</code> is off.</p> <note>
    /// <p>If a health check succeeds within the <code>startPeriod</code>, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.</p>
    /// </note>
    pub fn set_start_period(mut self, input: std::option::Option<i32>) -> Self {
        self.start_period = input;
        self
    }
    /// Consumes the builder and constructs a [`HealthCheck`](crate::types::HealthCheck).
    pub fn build(self) -> crate::types::HealthCheck {
        crate::types::HealthCheck {
            command: self.command,
            interval: self.interval,
            timeout: self.timeout,
            retries: self.retries,
            start_period: self.start_period,
        }
    }
}
