// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for canary deployment strategy that shifts a fixed percentage of traffic to the new service revision, waits for a specified bake time, then shifts the remaining traffic.</p>
/// <p>This is only valid when you run <code>CreateService</code> or <code>UpdateService</code> with <code>deploymentController</code> set to <code>ECS</code> and a <code>deploymentConfiguration</code> with a strategy set to <code>CANARY</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CanaryConfiguration {
    /// <p>The percentage of production traffic to shift to the new service revision during the canary phase. Valid values are 0.1 to 100.0. The default value is 5.0.</p>
    pub canary_percent: ::std::option::Option<f64>,
    /// <p>The amount of time in minutes to wait during the canary phase before shifting the remaining production traffic to the new service revision. Valid values are 0 to 1440 minutes (24 hours). The default value is 10.</p>
    pub canary_bake_time_in_minutes: ::std::option::Option<i32>,
}
impl CanaryConfiguration {
    /// <p>The percentage of production traffic to shift to the new service revision during the canary phase. Valid values are 0.1 to 100.0. The default value is 5.0.</p>
    pub fn canary_percent(&self) -> ::std::option::Option<f64> {
        self.canary_percent
    }
    /// <p>The amount of time in minutes to wait during the canary phase before shifting the remaining production traffic to the new service revision. Valid values are 0 to 1440 minutes (24 hours). The default value is 10.</p>
    pub fn canary_bake_time_in_minutes(&self) -> ::std::option::Option<i32> {
        self.canary_bake_time_in_minutes
    }
}
impl CanaryConfiguration {
    /// Creates a new builder-style object to manufacture [`CanaryConfiguration`](crate::types::CanaryConfiguration).
    pub fn builder() -> crate::types::builders::CanaryConfigurationBuilder {
        crate::types::builders::CanaryConfigurationBuilder::default()
    }
}

/// A builder for [`CanaryConfiguration`](crate::types::CanaryConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CanaryConfigurationBuilder {
    pub(crate) canary_percent: ::std::option::Option<f64>,
    pub(crate) canary_bake_time_in_minutes: ::std::option::Option<i32>,
}
impl CanaryConfigurationBuilder {
    /// <p>The percentage of production traffic to shift to the new service revision during the canary phase. Valid values are 0.1 to 100.0. The default value is 5.0.</p>
    pub fn canary_percent(mut self, input: f64) -> Self {
        self.canary_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of production traffic to shift to the new service revision during the canary phase. Valid values are 0.1 to 100.0. The default value is 5.0.</p>
    pub fn set_canary_percent(mut self, input: ::std::option::Option<f64>) -> Self {
        self.canary_percent = input;
        self
    }
    /// <p>The percentage of production traffic to shift to the new service revision during the canary phase. Valid values are 0.1 to 100.0. The default value is 5.0.</p>
    pub fn get_canary_percent(&self) -> &::std::option::Option<f64> {
        &self.canary_percent
    }
    /// <p>The amount of time in minutes to wait during the canary phase before shifting the remaining production traffic to the new service revision. Valid values are 0 to 1440 minutes (24 hours). The default value is 10.</p>
    pub fn canary_bake_time_in_minutes(mut self, input: i32) -> Self {
        self.canary_bake_time_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time in minutes to wait during the canary phase before shifting the remaining production traffic to the new service revision. Valid values are 0 to 1440 minutes (24 hours). The default value is 10.</p>
    pub fn set_canary_bake_time_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.canary_bake_time_in_minutes = input;
        self
    }
    /// <p>The amount of time in minutes to wait during the canary phase before shifting the remaining production traffic to the new service revision. Valid values are 0 to 1440 minutes (24 hours). The default value is 10.</p>
    pub fn get_canary_bake_time_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.canary_bake_time_in_minutes
    }
    /// Consumes the builder and constructs a [`CanaryConfiguration`](crate::types::CanaryConfiguration).
    pub fn build(self) -> crate::types::CanaryConfiguration {
        crate::types::CanaryConfiguration {
            canary_percent: self.canary_percent,
            canary_bake_time_in_minutes: self.canary_bake_time_in_minutes,
        }
    }
}
