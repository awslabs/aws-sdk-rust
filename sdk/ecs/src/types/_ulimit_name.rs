// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `UlimitName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let ulimitname = unimplemented!();
/// match ulimitname {
///     UlimitName::Core => { /* ... */ },
///     UlimitName::Cpu => { /* ... */ },
///     UlimitName::Data => { /* ... */ },
///     UlimitName::Fsize => { /* ... */ },
///     UlimitName::Locks => { /* ... */ },
///     UlimitName::Memlock => { /* ... */ },
///     UlimitName::Msgqueue => { /* ... */ },
///     UlimitName::Nice => { /* ... */ },
///     UlimitName::Nofile => { /* ... */ },
///     UlimitName::Nproc => { /* ... */ },
///     UlimitName::Rss => { /* ... */ },
///     UlimitName::Rtprio => { /* ... */ },
///     UlimitName::Rttime => { /* ... */ },
///     UlimitName::Sigpending => { /* ... */ },
///     UlimitName::Stack => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `ulimitname` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `UlimitName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `UlimitName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `UlimitName::NewFeature` is defined.
/// Specifically, when `ulimitname` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `UlimitName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum UlimitName {
    #[allow(missing_docs)] // documentation missing in model
    Core,
    #[allow(missing_docs)] // documentation missing in model
    Cpu,
    #[allow(missing_docs)] // documentation missing in model
    Data,
    #[allow(missing_docs)] // documentation missing in model
    Fsize,
    #[allow(missing_docs)] // documentation missing in model
    Locks,
    #[allow(missing_docs)] // documentation missing in model
    Memlock,
    #[allow(missing_docs)] // documentation missing in model
    Msgqueue,
    #[allow(missing_docs)] // documentation missing in model
    Nice,
    #[allow(missing_docs)] // documentation missing in model
    Nofile,
    #[allow(missing_docs)] // documentation missing in model
    Nproc,
    #[allow(missing_docs)] // documentation missing in model
    Rss,
    #[allow(missing_docs)] // documentation missing in model
    Rtprio,
    #[allow(missing_docs)] // documentation missing in model
    Rttime,
    #[allow(missing_docs)] // documentation missing in model
    Sigpending,
    #[allow(missing_docs)] // documentation missing in model
    Stack,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for UlimitName {
    fn from(s: &str) -> Self {
        match s {
            "core" => UlimitName::Core,
            "cpu" => UlimitName::Cpu,
            "data" => UlimitName::Data,
            "fsize" => UlimitName::Fsize,
            "locks" => UlimitName::Locks,
            "memlock" => UlimitName::Memlock,
            "msgqueue" => UlimitName::Msgqueue,
            "nice" => UlimitName::Nice,
            "nofile" => UlimitName::Nofile,
            "nproc" => UlimitName::Nproc,
            "rss" => UlimitName::Rss,
            "rtprio" => UlimitName::Rtprio,
            "rttime" => UlimitName::Rttime,
            "sigpending" => UlimitName::Sigpending,
            "stack" => UlimitName::Stack,
            other => UlimitName::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for UlimitName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(UlimitName::from(s))
    }
}
impl UlimitName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            UlimitName::Core => "core",
            UlimitName::Cpu => "cpu",
            UlimitName::Data => "data",
            UlimitName::Fsize => "fsize",
            UlimitName::Locks => "locks",
            UlimitName::Memlock => "memlock",
            UlimitName::Msgqueue => "msgqueue",
            UlimitName::Nice => "nice",
            UlimitName::Nofile => "nofile",
            UlimitName::Nproc => "nproc",
            UlimitName::Rss => "rss",
            UlimitName::Rtprio => "rtprio",
            UlimitName::Rttime => "rttime",
            UlimitName::Sigpending => "sigpending",
            UlimitName::Stack => "stack",
            UlimitName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "core",
            "cpu",
            "data",
            "fsize",
            "locks",
            "memlock",
            "msgqueue",
            "nice",
            "nofile",
            "nproc",
            "rss",
            "rtprio",
            "rttime",
            "sigpending",
            "stack",
        ]
    }
}
impl AsRef<str> for UlimitName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
