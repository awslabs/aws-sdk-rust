// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>The deployment circuit breaker can only be used for services using the rolling update (<code>ECS</code>) deployment type.</p>
/// </note>
/// <p>The <b>deployment circuit breaker</b> determines whether a service deployment will fail if the service can't reach a steady state. If it is turned on, a service deployment will transition to a failed state and stop launching new tasks. You can also configure Amazon ECS to roll back your service to the last completed deployment after a failure. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html">Rolling update</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
/// <p>For more information about API failure reasons, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html">API failure reasons</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeploymentCircuitBreaker {
    /// <p>Determines whether to use the deployment circuit breaker logic for the service.</p>
    pub enable: bool,
    /// <p>Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.</p>
    pub rollback: bool,
}
impl DeploymentCircuitBreaker {
    /// <p>Determines whether to use the deployment circuit breaker logic for the service.</p>
    pub fn enable(&self) -> bool {
        self.enable
    }
    /// <p>Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.</p>
    pub fn rollback(&self) -> bool {
        self.rollback
    }
}
impl DeploymentCircuitBreaker {
    /// Creates a new builder-style object to manufacture [`DeploymentCircuitBreaker`](crate::types::DeploymentCircuitBreaker).
    pub fn builder() -> crate::types::builders::DeploymentCircuitBreakerBuilder {
        crate::types::builders::DeploymentCircuitBreakerBuilder::default()
    }
}

/// A builder for [`DeploymentCircuitBreaker`](crate::types::DeploymentCircuitBreaker).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeploymentCircuitBreakerBuilder {
    pub(crate) enable: ::std::option::Option<bool>,
    pub(crate) rollback: ::std::option::Option<bool>,
}
impl DeploymentCircuitBreakerBuilder {
    /// <p>Determines whether to use the deployment circuit breaker logic for the service.</p>
    /// This field is required.
    pub fn enable(mut self, input: bool) -> Self {
        self.enable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether to use the deployment circuit breaker logic for the service.</p>
    pub fn set_enable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable = input;
        self
    }
    /// <p>Determines whether to use the deployment circuit breaker logic for the service.</p>
    pub fn get_enable(&self) -> &::std::option::Option<bool> {
        &self.enable
    }
    /// <p>Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.</p>
    /// This field is required.
    pub fn rollback(mut self, input: bool) -> Self {
        self.rollback = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.</p>
    pub fn set_rollback(mut self, input: ::std::option::Option<bool>) -> Self {
        self.rollback = input;
        self
    }
    /// <p>Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.</p>
    pub fn get_rollback(&self) -> &::std::option::Option<bool> {
        &self.rollback
    }
    /// Consumes the builder and constructs a [`DeploymentCircuitBreaker`](crate::types::DeploymentCircuitBreaker).
    pub fn build(self) -> crate::types::DeploymentCircuitBreaker {
        crate::types::DeploymentCircuitBreaker {
            enable: self.enable.unwrap_or_default(),
            rollback: self.rollback.unwrap_or_default(),
        }
    }
}
