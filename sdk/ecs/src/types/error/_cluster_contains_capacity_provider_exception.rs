// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The cluster contains one or more capacity providers that prevent the requested operation. This exception occurs when you try to delete a cluster that still has active capacity providers, including Amazon ECS Managed Instances capacity providers. You must first delete all capacity providers from the cluster before you can delete the cluster itself.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterContainsCapacityProviderException {
    /// <p>Message that describes the cause of the exception.</p>
    pub message: ::std::option::Option<::std::string::String>,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl ClusterContainsCapacityProviderException {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::std::fmt::Display for ClusterContainsCapacityProviderException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "ClusterContainsCapacityProviderException")?;
        if let ::std::option::Option::Some(inner_1) = &self.message {
            {
                ::std::write!(f, ": {inner_1}")?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for ClusterContainsCapacityProviderException {}
impl ::aws_types::request_id::RequestId for crate::types::error::ClusterContainsCapacityProviderException {
    fn request_id(&self) -> Option<&str> {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for ClusterContainsCapacityProviderException {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl ClusterContainsCapacityProviderException {
    /// Creates a new builder-style object to manufacture [`ClusterContainsCapacityProviderException`](crate::types::error::ClusterContainsCapacityProviderException).
    pub fn builder() -> crate::types::error::builders::ClusterContainsCapacityProviderExceptionBuilder {
        crate::types::error::builders::ClusterContainsCapacityProviderExceptionBuilder::default()
    }
}

/// A builder for [`ClusterContainsCapacityProviderException`](crate::types::error::ClusterContainsCapacityProviderException).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterContainsCapacityProviderExceptionBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl ClusterContainsCapacityProviderExceptionBuilder {
    /// <p>Message that describes the cause of the exception.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Message that describes the cause of the exception.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Message that describes the cause of the exception.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`ClusterContainsCapacityProviderException`](crate::types::error::ClusterContainsCapacityProviderException).
    pub fn build(self) -> crate::types::error::ClusterContainsCapacityProviderException {
        crate::types::error::ClusterContainsCapacityProviderException {
            message: self.message,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
