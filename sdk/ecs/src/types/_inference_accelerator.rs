// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details on an Elastic Inference accelerator. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html">Working with Amazon Elastic Inference on Amazon ECS</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InferenceAccelerator {
    /// <p>The Elastic Inference accelerator device name. The <code>deviceName</code> must also be referenced in a container definition as a <code>ResourceRequirement</code>.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>The Elastic Inference accelerator type to use.</p>
    #[doc(hidden)]
    pub device_type: std::option::Option<std::string::String>,
}
impl InferenceAccelerator {
    /// <p>The Elastic Inference accelerator device name. The <code>deviceName</code> must also be referenced in a container definition as a <code>ResourceRequirement</code>.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>The Elastic Inference accelerator type to use.</p>
    pub fn device_type(&self) -> std::option::Option<&str> {
        self.device_type.as_deref()
    }
}
impl InferenceAccelerator {
    /// Creates a new builder-style object to manufacture [`InferenceAccelerator`](crate::types::InferenceAccelerator).
    pub fn builder() -> crate::types::builders::InferenceAcceleratorBuilder {
        crate::types::builders::InferenceAcceleratorBuilder::default()
    }
}

/// A builder for [`InferenceAccelerator`](crate::types::InferenceAccelerator).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InferenceAcceleratorBuilder {
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) device_type: std::option::Option<std::string::String>,
}
impl InferenceAcceleratorBuilder {
    /// <p>The Elastic Inference accelerator device name. The <code>deviceName</code> must also be referenced in a container definition as a <code>ResourceRequirement</code>.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The Elastic Inference accelerator device name. The <code>deviceName</code> must also be referenced in a container definition as a <code>ResourceRequirement</code>.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The Elastic Inference accelerator type to use.</p>
    pub fn device_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_type = Some(input.into());
        self
    }
    /// <p>The Elastic Inference accelerator type to use.</p>
    pub fn set_device_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_type = input;
        self
    }
    /// Consumes the builder and constructs a [`InferenceAccelerator`](crate::types::InferenceAccelerator).
    pub fn build(self) -> crate::types::InferenceAccelerator {
        crate::types::InferenceAccelerator {
            device_name: self.device_name,
            device_type: self.device_type,
        }
    }
}
