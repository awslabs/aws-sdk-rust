// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for linear deployment strategy that shifts production traffic in equal percentage increments with configurable wait times between each step until 100% of traffic is shifted to the new service revision. This is only valid when you run <code>CreateService</code> or <code>UpdateService</code> with <code>deploymentController</code> set to <code>ECS</code> and a <code>deploymentConfiguration</code> with a strategy set to <code>LINEAR</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LinearConfiguration {
    /// <p>The percentage of production traffic to shift in each step during a linear deployment. Valid values are 3.0 to 100.0. The default value is 10.0.</p>
    pub step_percent: ::std::option::Option<f64>,
    /// <p>The amount of time in minutes to wait between each traffic shifting step during a linear deployment. Valid values are 0 to 1440 minutes (24 hours). The default value is 6. This bake time is not applied after reaching 100% traffic.</p>
    pub step_bake_time_in_minutes: ::std::option::Option<i32>,
}
impl LinearConfiguration {
    /// <p>The percentage of production traffic to shift in each step during a linear deployment. Valid values are 3.0 to 100.0. The default value is 10.0.</p>
    pub fn step_percent(&self) -> ::std::option::Option<f64> {
        self.step_percent
    }
    /// <p>The amount of time in minutes to wait between each traffic shifting step during a linear deployment. Valid values are 0 to 1440 minutes (24 hours). The default value is 6. This bake time is not applied after reaching 100% traffic.</p>
    pub fn step_bake_time_in_minutes(&self) -> ::std::option::Option<i32> {
        self.step_bake_time_in_minutes
    }
}
impl LinearConfiguration {
    /// Creates a new builder-style object to manufacture [`LinearConfiguration`](crate::types::LinearConfiguration).
    pub fn builder() -> crate::types::builders::LinearConfigurationBuilder {
        crate::types::builders::LinearConfigurationBuilder::default()
    }
}

/// A builder for [`LinearConfiguration`](crate::types::LinearConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LinearConfigurationBuilder {
    pub(crate) step_percent: ::std::option::Option<f64>,
    pub(crate) step_bake_time_in_minutes: ::std::option::Option<i32>,
}
impl LinearConfigurationBuilder {
    /// <p>The percentage of production traffic to shift in each step during a linear deployment. Valid values are 3.0 to 100.0. The default value is 10.0.</p>
    pub fn step_percent(mut self, input: f64) -> Self {
        self.step_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of production traffic to shift in each step during a linear deployment. Valid values are 3.0 to 100.0. The default value is 10.0.</p>
    pub fn set_step_percent(mut self, input: ::std::option::Option<f64>) -> Self {
        self.step_percent = input;
        self
    }
    /// <p>The percentage of production traffic to shift in each step during a linear deployment. Valid values are 3.0 to 100.0. The default value is 10.0.</p>
    pub fn get_step_percent(&self) -> &::std::option::Option<f64> {
        &self.step_percent
    }
    /// <p>The amount of time in minutes to wait between each traffic shifting step during a linear deployment. Valid values are 0 to 1440 minutes (24 hours). The default value is 6. This bake time is not applied after reaching 100% traffic.</p>
    pub fn step_bake_time_in_minutes(mut self, input: i32) -> Self {
        self.step_bake_time_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time in minutes to wait between each traffic shifting step during a linear deployment. Valid values are 0 to 1440 minutes (24 hours). The default value is 6. This bake time is not applied after reaching 100% traffic.</p>
    pub fn set_step_bake_time_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.step_bake_time_in_minutes = input;
        self
    }
    /// <p>The amount of time in minutes to wait between each traffic shifting step during a linear deployment. Valid values are 0 to 1440 minutes (24 hours). The default value is 6. This bake time is not applied after reaching 100% traffic.</p>
    pub fn get_step_bake_time_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.step_bake_time_in_minutes
    }
    /// Consumes the builder and constructs a [`LinearConfiguration`](crate::types::LinearConfiguration).
    pub fn build(self) -> crate::types::LinearConfiguration {
        crate::types::LinearConfiguration {
            step_percent: self.step_percent,
            step_bake_time_in_minutes: self.step_bake_time_in_minutes,
        }
    }
}
