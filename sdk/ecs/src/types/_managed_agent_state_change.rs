// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing a change in state for a managed agent.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedAgentStateChange {
    /// <p>The name of the container that's associated with the managed agent.</p>
    pub container_name: ::std::string::String,
    /// <p>The name of the managed agent.</p>
    pub managed_agent_name: crate::types::ManagedAgentName,
    /// <p>The status of the managed agent.</p>
    pub status: ::std::string::String,
    /// <p>The reason for the status of the managed agent.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl ManagedAgentStateChange {
    /// <p>The name of the container that's associated with the managed agent.</p>
    pub fn container_name(&self) -> &str {
        use std::ops::Deref;
        self.container_name.deref()
    }
    /// <p>The name of the managed agent.</p>
    pub fn managed_agent_name(&self) -> &crate::types::ManagedAgentName {
        &self.managed_agent_name
    }
    /// <p>The status of the managed agent.</p>
    pub fn status(&self) -> &str {
        use std::ops::Deref;
        self.status.deref()
    }
    /// <p>The reason for the status of the managed agent.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl ManagedAgentStateChange {
    /// Creates a new builder-style object to manufacture [`ManagedAgentStateChange`](crate::types::ManagedAgentStateChange).
    pub fn builder() -> crate::types::builders::ManagedAgentStateChangeBuilder {
        crate::types::builders::ManagedAgentStateChangeBuilder::default()
    }
}

/// A builder for [`ManagedAgentStateChange`](crate::types::ManagedAgentStateChange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ManagedAgentStateChangeBuilder {
    pub(crate) container_name: ::std::option::Option<::std::string::String>,
    pub(crate) managed_agent_name: ::std::option::Option<crate::types::ManagedAgentName>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl ManagedAgentStateChangeBuilder {
    /// <p>The name of the container that's associated with the managed agent.</p>
    /// This field is required.
    pub fn container_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the container that's associated with the managed agent.</p>
    pub fn set_container_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p>The name of the container that's associated with the managed agent.</p>
    pub fn get_container_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_name
    }
    /// <p>The name of the managed agent.</p>
    /// This field is required.
    pub fn managed_agent_name(mut self, input: crate::types::ManagedAgentName) -> Self {
        self.managed_agent_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the managed agent.</p>
    pub fn set_managed_agent_name(mut self, input: ::std::option::Option<crate::types::ManagedAgentName>) -> Self {
        self.managed_agent_name = input;
        self
    }
    /// <p>The name of the managed agent.</p>
    pub fn get_managed_agent_name(&self) -> &::std::option::Option<crate::types::ManagedAgentName> {
        &self.managed_agent_name
    }
    /// <p>The status of the managed agent.</p>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the managed agent.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the managed agent.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The reason for the status of the managed agent.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the status of the managed agent.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for the status of the managed agent.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`ManagedAgentStateChange`](crate::types::ManagedAgentStateChange).
    /// This method will fail if any of the following fields are not set:
    /// - [`container_name`](crate::types::builders::ManagedAgentStateChangeBuilder::container_name)
    /// - [`managed_agent_name`](crate::types::builders::ManagedAgentStateChangeBuilder::managed_agent_name)
    /// - [`status`](crate::types::builders::ManagedAgentStateChangeBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ManagedAgentStateChange, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ManagedAgentStateChange {
            container_name: self.container_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "container_name",
                    "container_name was not specified but it is required when building ManagedAgentStateChange",
                )
            })?,
            managed_agent_name: self.managed_agent_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "managed_agent_name",
                    "managed_agent_name was not specified but it is required when building ManagedAgentStateChange",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ManagedAgentStateChange",
                )
            })?,
            reason: self.reason,
        })
    }
}
