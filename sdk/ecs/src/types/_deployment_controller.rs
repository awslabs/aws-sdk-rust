// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The deployment controller to use for the service. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon ECS deployment types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeploymentController {
    /// <p>The deployment controller type to use.</p>
    /// <p>There are three deployment controller types available:</p>
    /// <dl>
    /// <dt>
    /// ECS
    /// </dt>
    /// <dd>
    /// <p>The rolling update (<code>ECS</code>) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the <code>DeploymentConfiguration</code>.</p>
    /// </dd>
    /// <dt>
    /// CODE_DEPLOY
    /// </dt>
    /// <dd>
    /// <p>The blue/green (<code>CODE_DEPLOY</code>) deployment type uses the blue/green deployment model powered by CodeDeploy, which allows you to verify a new deployment of a service before sending production traffic to it.</p>
    /// </dd>
    /// <dt>
    /// EXTERNAL
    /// </dt>
    /// <dd>
    /// <p>The external (<code>EXTERNAL</code>) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.</p>
    /// </dd>
    /// </dl>
    pub r#type: crate::types::DeploymentControllerType,
}
impl DeploymentController {
    /// <p>The deployment controller type to use.</p>
    /// <p>There are three deployment controller types available:</p>
    /// <dl>
    /// <dt>
    /// ECS
    /// </dt>
    /// <dd>
    /// <p>The rolling update (<code>ECS</code>) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the <code>DeploymentConfiguration</code>.</p>
    /// </dd>
    /// <dt>
    /// CODE_DEPLOY
    /// </dt>
    /// <dd>
    /// <p>The blue/green (<code>CODE_DEPLOY</code>) deployment type uses the blue/green deployment model powered by CodeDeploy, which allows you to verify a new deployment of a service before sending production traffic to it.</p>
    /// </dd>
    /// <dt>
    /// EXTERNAL
    /// </dt>
    /// <dd>
    /// <p>The external (<code>EXTERNAL</code>) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.</p>
    /// </dd>
    /// </dl>
    pub fn r#type(&self) -> &crate::types::DeploymentControllerType {
        &self.r#type
    }
}
impl DeploymentController {
    /// Creates a new builder-style object to manufacture [`DeploymentController`](crate::types::DeploymentController).
    pub fn builder() -> crate::types::builders::DeploymentControllerBuilder {
        crate::types::builders::DeploymentControllerBuilder::default()
    }
}

/// A builder for [`DeploymentController`](crate::types::DeploymentController).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeploymentControllerBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::DeploymentControllerType>,
}
impl DeploymentControllerBuilder {
    /// <p>The deployment controller type to use.</p>
    /// <p>There are three deployment controller types available:</p>
    /// <dl>
    /// <dt>
    /// ECS
    /// </dt>
    /// <dd>
    /// <p>The rolling update (<code>ECS</code>) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the <code>DeploymentConfiguration</code>.</p>
    /// </dd>
    /// <dt>
    /// CODE_DEPLOY
    /// </dt>
    /// <dd>
    /// <p>The blue/green (<code>CODE_DEPLOY</code>) deployment type uses the blue/green deployment model powered by CodeDeploy, which allows you to verify a new deployment of a service before sending production traffic to it.</p>
    /// </dd>
    /// <dt>
    /// EXTERNAL
    /// </dt>
    /// <dd>
    /// <p>The external (<code>EXTERNAL</code>) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.</p>
    /// </dd>
    /// </dl>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DeploymentControllerType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment controller type to use.</p>
    /// <p>There are three deployment controller types available:</p>
    /// <dl>
    /// <dt>
    /// ECS
    /// </dt>
    /// <dd>
    /// <p>The rolling update (<code>ECS</code>) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the <code>DeploymentConfiguration</code>.</p>
    /// </dd>
    /// <dt>
    /// CODE_DEPLOY
    /// </dt>
    /// <dd>
    /// <p>The blue/green (<code>CODE_DEPLOY</code>) deployment type uses the blue/green deployment model powered by CodeDeploy, which allows you to verify a new deployment of a service before sending production traffic to it.</p>
    /// </dd>
    /// <dt>
    /// EXTERNAL
    /// </dt>
    /// <dd>
    /// <p>The external (<code>EXTERNAL</code>) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.</p>
    /// </dd>
    /// </dl>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DeploymentControllerType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The deployment controller type to use.</p>
    /// <p>There are three deployment controller types available:</p>
    /// <dl>
    /// <dt>
    /// ECS
    /// </dt>
    /// <dd>
    /// <p>The rolling update (<code>ECS</code>) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the <code>DeploymentConfiguration</code>.</p>
    /// </dd>
    /// <dt>
    /// CODE_DEPLOY
    /// </dt>
    /// <dd>
    /// <p>The blue/green (<code>CODE_DEPLOY</code>) deployment type uses the blue/green deployment model powered by CodeDeploy, which allows you to verify a new deployment of a service before sending production traffic to it.</p>
    /// </dd>
    /// <dt>
    /// EXTERNAL
    /// </dt>
    /// <dd>
    /// <p>The external (<code>EXTERNAL</code>) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.</p>
    /// </dd>
    /// </dl>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DeploymentControllerType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`DeploymentController`](crate::types::DeploymentController).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::DeploymentControllerBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::DeploymentController, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DeploymentController {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DeploymentController",
                )
            })?,
        })
    }
}
