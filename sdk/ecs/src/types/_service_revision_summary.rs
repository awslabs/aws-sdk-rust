// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The information about the number of requested, pending, and running tasks for a service revision.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceRevisionSummary {
    /// <p>The ARN of the service revision.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The number of requested tasks for the service revision.</p>
    pub requested_task_count: i32,
    /// <p>The number of running tasks for the service revision.</p>
    pub running_task_count: i32,
    /// <p>The number of pending tasks for the service revision.</p>
    pub pending_task_count: i32,
    /// <p>The percentage of test traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub requested_test_traffic_weight: ::std::option::Option<f64>,
    /// <p>The percentage of production traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub requested_production_traffic_weight: ::std::option::Option<f64>,
}
impl ServiceRevisionSummary {
    /// <p>The ARN of the service revision.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The number of requested tasks for the service revision.</p>
    pub fn requested_task_count(&self) -> i32 {
        self.requested_task_count
    }
    /// <p>The number of running tasks for the service revision.</p>
    pub fn running_task_count(&self) -> i32 {
        self.running_task_count
    }
    /// <p>The number of pending tasks for the service revision.</p>
    pub fn pending_task_count(&self) -> i32 {
        self.pending_task_count
    }
    /// <p>The percentage of test traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub fn requested_test_traffic_weight(&self) -> ::std::option::Option<f64> {
        self.requested_test_traffic_weight
    }
    /// <p>The percentage of production traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub fn requested_production_traffic_weight(&self) -> ::std::option::Option<f64> {
        self.requested_production_traffic_weight
    }
}
impl ServiceRevisionSummary {
    /// Creates a new builder-style object to manufacture [`ServiceRevisionSummary`](crate::types::ServiceRevisionSummary).
    pub fn builder() -> crate::types::builders::ServiceRevisionSummaryBuilder {
        crate::types::builders::ServiceRevisionSummaryBuilder::default()
    }
}

/// A builder for [`ServiceRevisionSummary`](crate::types::ServiceRevisionSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceRevisionSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) requested_task_count: ::std::option::Option<i32>,
    pub(crate) running_task_count: ::std::option::Option<i32>,
    pub(crate) pending_task_count: ::std::option::Option<i32>,
    pub(crate) requested_test_traffic_weight: ::std::option::Option<f64>,
    pub(crate) requested_production_traffic_weight: ::std::option::Option<f64>,
}
impl ServiceRevisionSummaryBuilder {
    /// <p>The ARN of the service revision.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the service revision.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the service revision.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The number of requested tasks for the service revision.</p>
    pub fn requested_task_count(mut self, input: i32) -> Self {
        self.requested_task_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of requested tasks for the service revision.</p>
    pub fn set_requested_task_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.requested_task_count = input;
        self
    }
    /// <p>The number of requested tasks for the service revision.</p>
    pub fn get_requested_task_count(&self) -> &::std::option::Option<i32> {
        &self.requested_task_count
    }
    /// <p>The number of running tasks for the service revision.</p>
    pub fn running_task_count(mut self, input: i32) -> Self {
        self.running_task_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of running tasks for the service revision.</p>
    pub fn set_running_task_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.running_task_count = input;
        self
    }
    /// <p>The number of running tasks for the service revision.</p>
    pub fn get_running_task_count(&self) -> &::std::option::Option<i32> {
        &self.running_task_count
    }
    /// <p>The number of pending tasks for the service revision.</p>
    pub fn pending_task_count(mut self, input: i32) -> Self {
        self.pending_task_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of pending tasks for the service revision.</p>
    pub fn set_pending_task_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pending_task_count = input;
        self
    }
    /// <p>The number of pending tasks for the service revision.</p>
    pub fn get_pending_task_count(&self) -> &::std::option::Option<i32> {
        &self.pending_task_count
    }
    /// <p>The percentage of test traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub fn requested_test_traffic_weight(mut self, input: f64) -> Self {
        self.requested_test_traffic_weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of test traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub fn set_requested_test_traffic_weight(mut self, input: ::std::option::Option<f64>) -> Self {
        self.requested_test_traffic_weight = input;
        self
    }
    /// <p>The percentage of test traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub fn get_requested_test_traffic_weight(&self) -> &::std::option::Option<f64> {
        &self.requested_test_traffic_weight
    }
    /// <p>The percentage of production traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub fn requested_production_traffic_weight(mut self, input: f64) -> Self {
        self.requested_production_traffic_weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of production traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub fn set_requested_production_traffic_weight(mut self, input: ::std::option::Option<f64>) -> Self {
        self.requested_production_traffic_weight = input;
        self
    }
    /// <p>The percentage of production traffic that is directed to this service revision. This value represents a snapshot of the traffic distribution and may not reflect real-time changes during active deployments. Valid values are 0.0 to 100.0.</p>
    pub fn get_requested_production_traffic_weight(&self) -> &::std::option::Option<f64> {
        &self.requested_production_traffic_weight
    }
    /// Consumes the builder and constructs a [`ServiceRevisionSummary`](crate::types::ServiceRevisionSummary).
    pub fn build(self) -> crate::types::ServiceRevisionSummary {
        crate::types::ServiceRevisionSummary {
            arn: self.arn,
            requested_task_count: self.requested_task_count.unwrap_or_default(),
            running_task_count: self.running_task_count.unwrap_or_default(),
            pending_task_count: self.pending_task_count.unwrap_or_default(),
            requested_test_traffic_weight: self.requested_test_traffic_weight,
            requested_production_traffic_weight: self.requested_production_traffic_weight,
        }
    }
}
