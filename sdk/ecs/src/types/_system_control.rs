// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of namespaced kernel parameters to set in the container. This parameter maps to <code>Sysctls</code> in the <a href="https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.35/">Docker Remote API</a> and the <code>--sysctl</code> option to <a href="https://docs.docker.com/engine/reference/run/#security-configuration">docker run</a>.</p>
/// <p>We don't recommend that you specify network-related <code>systemControls</code> parameters for multiple containers in a single task. This task also uses either the <code>awsvpc</code> or <code>host</code> network mode. It does it for the following reasons.</p>
/// <ul>
/// <li> <p>For tasks that use the <code>awsvpc</code> network mode, if you set <code>systemControls</code> for any container, it applies to all containers in the task. If you set different <code>systemControls</code> for multiple containers in a single task, the container that's started last determines which <code>systemControls</code> take effect.</p> </li>
/// <li> <p>For tasks that use the <code>host</code> network mode, the <code>systemControls</code> parameter applies to the container instance's kernel parameter and that of all containers of any tasks running on that container instance.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SystemControl {
    /// <p>The namespaced kernel parameter to set a <code>value</code> for.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p>The value for the namespaced kernel parameter that's specified in <code>namespace</code>.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl SystemControl {
    /// <p>The namespaced kernel parameter to set a <code>value</code> for.</p>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The value for the namespaced kernel parameter that's specified in <code>namespace</code>.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl SystemControl {
    /// Creates a new builder-style object to manufacture [`SystemControl`](crate::types::SystemControl).
    pub fn builder() -> crate::types::builders::SystemControlBuilder {
        crate::types::builders::SystemControlBuilder::default()
    }
}

/// A builder for [`SystemControl`](crate::types::SystemControl).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SystemControlBuilder {
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl SystemControlBuilder {
    /// <p>The namespaced kernel parameter to set a <code>value</code> for.</p>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespaced kernel parameter to set a <code>value</code> for.</p>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The value for the namespaced kernel parameter that's specified in <code>namespace</code>.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value for the namespaced kernel parameter that's specified in <code>namespace</code>.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`SystemControl`](crate::types::SystemControl).
    pub fn build(self) -> crate::types::SystemControl {
        crate::types::SystemControl {
            namespace: self.namespace,
            value: self.value,
        }
    }
}
