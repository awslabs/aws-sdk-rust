// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the managed agent status for the container.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ManagedAgent {
    /// <p>The Unix timestamp for the time when the managed agent was last started.</p>
    #[doc(hidden)]
    pub last_started_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the managed agent. When the execute command feature is enabled, the managed agent name is <code>ExecuteCommandAgent</code>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::ManagedAgentName>,
    /// <p>The reason for why the managed agent is in the state it is in.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
    /// <p>The last known status of the managed agent.</p>
    #[doc(hidden)]
    pub last_status: std::option::Option<std::string::String>,
}
impl ManagedAgent {
    /// <p>The Unix timestamp for the time when the managed agent was last started.</p>
    pub fn last_started_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_started_at.as_ref()
    }
    /// <p>The name of the managed agent. When the execute command feature is enabled, the managed agent name is <code>ExecuteCommandAgent</code>.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::ManagedAgentName> {
        self.name.as_ref()
    }
    /// <p>The reason for why the managed agent is in the state it is in.</p>
    pub fn reason(&self) -> std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The last known status of the managed agent.</p>
    pub fn last_status(&self) -> std::option::Option<&str> {
        self.last_status.as_deref()
    }
}
impl ManagedAgent {
    /// Creates a new builder-style object to manufacture [`ManagedAgent`](crate::types::ManagedAgent).
    pub fn builder() -> crate::types::builders::ManagedAgentBuilder {
        crate::types::builders::ManagedAgentBuilder::default()
    }
}

/// A builder for [`ManagedAgent`](crate::types::ManagedAgent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ManagedAgentBuilder {
    pub(crate) last_started_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) name: std::option::Option<crate::types::ManagedAgentName>,
    pub(crate) reason: std::option::Option<std::string::String>,
    pub(crate) last_status: std::option::Option<std::string::String>,
}
impl ManagedAgentBuilder {
    /// <p>The Unix timestamp for the time when the managed agent was last started.</p>
    pub fn last_started_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_started_at = Some(input);
        self
    }
    /// <p>The Unix timestamp for the time when the managed agent was last started.</p>
    pub fn set_last_started_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_started_at = input;
        self
    }
    /// <p>The name of the managed agent. When the execute command feature is enabled, the managed agent name is <code>ExecuteCommandAgent</code>.</p>
    pub fn name(mut self, input: crate::types::ManagedAgentName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The name of the managed agent. When the execute command feature is enabled, the managed agent name is <code>ExecuteCommandAgent</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<crate::types::ManagedAgentName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The reason for why the managed agent is in the state it is in.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p>The reason for why the managed agent is in the state it is in.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The last known status of the managed agent.</p>
    pub fn last_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_status = Some(input.into());
        self
    }
    /// <p>The last known status of the managed agent.</p>
    pub fn set_last_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_status = input;
        self
    }
    /// Consumes the builder and constructs a [`ManagedAgent`](crate::types::ManagedAgent).
    pub fn build(self) -> crate::types::ManagedAgent {
        crate::types::ManagedAgent {
            last_started_at: self.last_started_at,
            name: self.name,
            reason: self.reason,
            last_status: self.last_status,
        }
    }
}
