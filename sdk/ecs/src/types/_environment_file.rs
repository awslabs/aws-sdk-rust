// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a <code>.env</code> file extension. Each line in an environment file should contain an environment variable in <code>VARIABLE=VALUE</code> format. Lines beginning with <code>#</code> are treated as comments and are ignored.</p>
/// <p>If there are environment variables specified using the <code>environment</code> parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html">Specifying environment variables</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
/// <p>You must use the following platforms for the Fargate launch type:</p>
/// <ul>
/// <li> <p>Linux platform version <code>1.4.0</code> or later.</p> </li>
/// <li> <p>Windows platform version <code>1.0.0</code> or later.</p> </li>
/// </ul>
/// <p>Consider the following when using the Fargate launch type:</p>
/// <ul>
/// <li> <p>The file is handled like a native Docker env-file.</p> </li>
/// <li> <p>There is no support for shell escape handling.</p> </li>
/// <li> <p>The container entry point interperts the <code>VARIABLE</code> values.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnvironmentFile {
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.</p>
    pub value: ::std::string::String,
    /// <p>The file type to use. The only supported value is <code>s3</code>.</p>
    pub r#type: crate::types::EnvironmentFileType,
}
impl EnvironmentFile {
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
    /// <p>The file type to use. The only supported value is <code>s3</code>.</p>
    pub fn r#type(&self) -> &crate::types::EnvironmentFileType {
        &self.r#type
    }
}
impl EnvironmentFile {
    /// Creates a new builder-style object to manufacture [`EnvironmentFile`](crate::types::EnvironmentFile).
    pub fn builder() -> crate::types::builders::EnvironmentFileBuilder {
        crate::types::builders::EnvironmentFileBuilder::default()
    }
}

/// A builder for [`EnvironmentFile`](crate::types::EnvironmentFile).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnvironmentFileBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::EnvironmentFileType>,
}
impl EnvironmentFileBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The file type to use. The only supported value is <code>s3</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::EnvironmentFileType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file type to use. The only supported value is <code>s3</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::EnvironmentFileType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The file type to use. The only supported value is <code>s3</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::EnvironmentFileType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`EnvironmentFile`](crate::types::EnvironmentFile).
    /// This method will fail if any of the following fields are not set:
    /// - [`value`](crate::types::builders::EnvironmentFileBuilder::value)
    /// - [`r#type`](crate::types::builders::EnvironmentFileBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::EnvironmentFile, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EnvironmentFile {
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building EnvironmentFile",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building EnvironmentFile",
                )
            })?,
        })
    }
}
