// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details on a data volume from another container in the same task definition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VolumeFrom {
    /// <p>The name of another container within the same task definition to mount volumes from.</p>
    #[doc(hidden)]
    pub source_container: std::option::Option<std::string::String>,
    /// <p>If this value is <code>true</code>, the container has read-only access to the volume. If this value is <code>false</code>, then the container can write to the volume. The default value is <code>false</code>.</p>
    #[doc(hidden)]
    pub read_only: std::option::Option<bool>,
}
impl VolumeFrom {
    /// <p>The name of another container within the same task definition to mount volumes from.</p>
    pub fn source_container(&self) -> std::option::Option<&str> {
        self.source_container.as_deref()
    }
    /// <p>If this value is <code>true</code>, the container has read-only access to the volume. If this value is <code>false</code>, then the container can write to the volume. The default value is <code>false</code>.</p>
    pub fn read_only(&self) -> std::option::Option<bool> {
        self.read_only
    }
}
impl VolumeFrom {
    /// Creates a new builder-style object to manufacture [`VolumeFrom`](crate::types::VolumeFrom).
    pub fn builder() -> crate::types::builders::VolumeFromBuilder {
        crate::types::builders::VolumeFromBuilder::default()
    }
}

/// A builder for [`VolumeFrom`](crate::types::VolumeFrom).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VolumeFromBuilder {
    pub(crate) source_container: std::option::Option<std::string::String>,
    pub(crate) read_only: std::option::Option<bool>,
}
impl VolumeFromBuilder {
    /// <p>The name of another container within the same task definition to mount volumes from.</p>
    pub fn source_container(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_container = Some(input.into());
        self
    }
    /// <p>The name of another container within the same task definition to mount volumes from.</p>
    pub fn set_source_container(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_container = input;
        self
    }
    /// <p>If this value is <code>true</code>, the container has read-only access to the volume. If this value is <code>false</code>, then the container can write to the volume. The default value is <code>false</code>.</p>
    pub fn read_only(mut self, input: bool) -> Self {
        self.read_only = Some(input);
        self
    }
    /// <p>If this value is <code>true</code>, the container has read-only access to the volume. If this value is <code>false</code>, then the container can write to the volume. The default value is <code>false</code>.</p>
    pub fn set_read_only(mut self, input: std::option::Option<bool>) -> Self {
        self.read_only = input;
        self
    }
    /// Consumes the builder and constructs a [`VolumeFrom`](crate::types::VolumeFrom).
    pub fn build(self) -> crate::types::VolumeFrom {
        crate::types::VolumeFrom {
            source_container: self.source_container,
            read_only: self.read_only,
        }
    }
}
