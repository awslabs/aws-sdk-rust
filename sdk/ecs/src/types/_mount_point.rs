// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details for a volume mount point that's used in a container definition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MountPoint {
    /// <p>The name of the volume to mount. Must be a volume name referenced in the <code>name</code> parameter of task definition <code>volume</code>.</p>
    #[doc(hidden)]
    pub source_volume: std::option::Option<std::string::String>,
    /// <p>The path on the container to mount the host volume at.</p>
    #[doc(hidden)]
    pub container_path: std::option::Option<std::string::String>,
    /// <p>If this value is <code>true</code>, the container has read-only access to the volume. If this value is <code>false</code>, then the container can write to the volume. The default value is <code>false</code>.</p>
    #[doc(hidden)]
    pub read_only: std::option::Option<bool>,
}
impl MountPoint {
    /// <p>The name of the volume to mount. Must be a volume name referenced in the <code>name</code> parameter of task definition <code>volume</code>.</p>
    pub fn source_volume(&self) -> std::option::Option<&str> {
        self.source_volume.as_deref()
    }
    /// <p>The path on the container to mount the host volume at.</p>
    pub fn container_path(&self) -> std::option::Option<&str> {
        self.container_path.as_deref()
    }
    /// <p>If this value is <code>true</code>, the container has read-only access to the volume. If this value is <code>false</code>, then the container can write to the volume. The default value is <code>false</code>.</p>
    pub fn read_only(&self) -> std::option::Option<bool> {
        self.read_only
    }
}
impl MountPoint {
    /// Creates a new builder-style object to manufacture [`MountPoint`](crate::types::MountPoint).
    pub fn builder() -> crate::types::builders::MountPointBuilder {
        crate::types::builders::MountPointBuilder::default()
    }
}

/// A builder for [`MountPoint`](crate::types::MountPoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MountPointBuilder {
    pub(crate) source_volume: std::option::Option<std::string::String>,
    pub(crate) container_path: std::option::Option<std::string::String>,
    pub(crate) read_only: std::option::Option<bool>,
}
impl MountPointBuilder {
    /// <p>The name of the volume to mount. Must be a volume name referenced in the <code>name</code> parameter of task definition <code>volume</code>.</p>
    pub fn source_volume(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_volume = Some(input.into());
        self
    }
    /// <p>The name of the volume to mount. Must be a volume name referenced in the <code>name</code> parameter of task definition <code>volume</code>.</p>
    pub fn set_source_volume(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_volume = input;
        self
    }
    /// <p>The path on the container to mount the host volume at.</p>
    pub fn container_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_path = Some(input.into());
        self
    }
    /// <p>The path on the container to mount the host volume at.</p>
    pub fn set_container_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_path = input;
        self
    }
    /// <p>If this value is <code>true</code>, the container has read-only access to the volume. If this value is <code>false</code>, then the container can write to the volume. The default value is <code>false</code>.</p>
    pub fn read_only(mut self, input: bool) -> Self {
        self.read_only = Some(input);
        self
    }
    /// <p>If this value is <code>true</code>, the container has read-only access to the volume. If this value is <code>false</code>, then the container can write to the volume. The default value is <code>false</code>.</p>
    pub fn set_read_only(mut self, input: std::option::Option<bool>) -> Self {
        self.read_only = input;
        self
    }
    /// Consumes the builder and constructs a [`MountPoint`](crate::types::MountPoint).
    pub fn build(self) -> crate::types::MountPoint {
        crate::types::MountPoint {
            source_volume: self.source_volume,
            container_path: self.container_path,
            read_only: self.read_only,
        }
    }
}
