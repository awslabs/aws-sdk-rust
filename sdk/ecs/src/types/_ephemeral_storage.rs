// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html">Fargate task storage</a> in the <i>Amazon ECS User Guide for Fargate</i>.</p> <note>
/// <p>This parameter is only supported for tasks hosted on Fargate using Linux platform version <code>1.4.0</code> or later. This parameter is not supported for Windows containers on Fargate.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EphemeralStorage {
    /// <p>The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is <code>21</code> GiB and the maximum supported value is <code>200</code> GiB.</p>
    #[doc(hidden)]
    pub size_in_gi_b: i32,
}
impl EphemeralStorage {
    /// <p>The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is <code>21</code> GiB and the maximum supported value is <code>200</code> GiB.</p>
    pub fn size_in_gi_b(&self) -> i32 {
        self.size_in_gi_b
    }
}
impl EphemeralStorage {
    /// Creates a new builder-style object to manufacture [`EphemeralStorage`](crate::types::EphemeralStorage).
    pub fn builder() -> crate::types::builders::EphemeralStorageBuilder {
        crate::types::builders::EphemeralStorageBuilder::default()
    }
}

/// A builder for [`EphemeralStorage`](crate::types::EphemeralStorage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EphemeralStorageBuilder {
    pub(crate) size_in_gi_b: std::option::Option<i32>,
}
impl EphemeralStorageBuilder {
    /// <p>The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is <code>21</code> GiB and the maximum supported value is <code>200</code> GiB.</p>
    pub fn size_in_gi_b(mut self, input: i32) -> Self {
        self.size_in_gi_b = Some(input);
        self
    }
    /// <p>The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is <code>21</code> GiB and the maximum supported value is <code>200</code> GiB.</p>
    pub fn set_size_in_gi_b(mut self, input: std::option::Option<i32>) -> Self {
        self.size_in_gi_b = input;
        self
    }
    /// Consumes the builder and constructs a [`EphemeralStorage`](crate::types::EphemeralStorage).
    pub fn build(self) -> crate::types::EphemeralStorage {
        crate::types::EphemeralStorage {
            size_in_gi_b: self.size_in_gi_b.unwrap_or_default(),
        }
    }
}
