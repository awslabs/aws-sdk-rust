// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Hostnames and IP address entries that are added to the <code>/etc/hosts</code> file of a container via the <code>extraHosts</code> parameter of its <code>ContainerDefinition</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HostEntry {
    /// <p>The hostname to use in the <code>/etc/hosts</code> entry.</p>
    pub hostname: ::std::string::String,
    /// <p>The IP address to use in the <code>/etc/hosts</code> entry.</p>
    pub ip_address: ::std::string::String,
}
impl HostEntry {
    /// <p>The hostname to use in the <code>/etc/hosts</code> entry.</p>
    pub fn hostname(&self) -> &str {
        use std::ops::Deref;
        self.hostname.deref()
    }
    /// <p>The IP address to use in the <code>/etc/hosts</code> entry.</p>
    pub fn ip_address(&self) -> &str {
        use std::ops::Deref;
        self.ip_address.deref()
    }
}
impl HostEntry {
    /// Creates a new builder-style object to manufacture [`HostEntry`](crate::types::HostEntry).
    pub fn builder() -> crate::types::builders::HostEntryBuilder {
        crate::types::builders::HostEntryBuilder::default()
    }
}

/// A builder for [`HostEntry`](crate::types::HostEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HostEntryBuilder {
    pub(crate) hostname: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
}
impl HostEntryBuilder {
    /// <p>The hostname to use in the <code>/etc/hosts</code> entry.</p>
    /// This field is required.
    pub fn hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname to use in the <code>/etc/hosts</code> entry.</p>
    pub fn set_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hostname = input;
        self
    }
    /// <p>The hostname to use in the <code>/etc/hosts</code> entry.</p>
    pub fn get_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.hostname
    }
    /// <p>The IP address to use in the <code>/etc/hosts</code> entry.</p>
    /// This field is required.
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address to use in the <code>/etc/hosts</code> entry.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The IP address to use in the <code>/etc/hosts</code> entry.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// Consumes the builder and constructs a [`HostEntry`](crate::types::HostEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`hostname`](crate::types::builders::HostEntryBuilder::hostname)
    /// - [`ip_address`](crate::types::builders::HostEntryBuilder::ip_address)
    pub fn build(self) -> ::std::result::Result<crate::types::HostEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HostEntry {
            hostname: self.hostname.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "hostname",
                    "hostname was not specified but it is required when building HostEntry",
                )
            })?,
            ip_address: self.ip_address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ip_address",
                    "ip_address was not specified but it is required when building HostEntry",
                )
            })?,
        })
    }
}
