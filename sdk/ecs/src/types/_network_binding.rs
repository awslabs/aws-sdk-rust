// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details on the network bindings between a container and its host container instance. After a task reaches the <code>RUNNING</code> status, manual and automatic host and container port assignments are visible in the <code>networkBindings</code> section of <code>DescribeTasks</code> API responses.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkBinding {
    /// <p>The IP address that the container is bound to on the container instance.</p>
    #[doc(hidden)]
    pub bind_ip: std::option::Option<std::string::String>,
    /// <p>The port number on the container that's used with the network binding.</p>
    #[doc(hidden)]
    pub container_port: std::option::Option<i32>,
    /// <p>The port number on the host that's used with the network binding.</p>
    #[doc(hidden)]
    pub host_port: std::option::Option<i32>,
    /// <p>The protocol used for the network binding.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<crate::types::TransportProtocol>,
    /// <p>The port number range on the container that's bound to the dynamically mapped host port range.</p>
    /// <p>The following rules apply when you specify a <code>containerPortRange</code>:</p>
    /// <ul>
    /// <li> <p>You must use either the <code>bridge</code> network mode or the <code>awsvpc</code> network mode.</p> </li>
    /// <li> <p>This parameter is available for both the EC2 and Fargate launch types.</p> </li>
    /// <li> <p>This parameter is available for both the Linux and Windows operating systems.</p> </li>
    /// <li> <p>The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the <code>ecs-init</code> package </p> </li>
    /// <li> <p>You can specify a maximum of 100 port ranges per container.</p> </li>
    /// <li> <p>You do not specify a <code>hostPortRange</code>. The value of the <code>hostPortRange</code> is set as follows:</p>
    /// <ul>
    /// <li> <p>For containers in a task with the <code>awsvpc</code> network mode, the <code>hostPort</code> is set to the same value as the <code>containerPort</code>. This is a static mapping strategy.</p> </li>
    /// <li> <p>For containers in a task with the <code>bridge</code> network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.</p> </li>
    /// </ul> </li>
    /// <li> <p>The <code>containerPortRange</code> valid values are between 1 and 65535.</p> </li>
    /// <li> <p>A port can only be included in one port mapping per container.</p> </li>
    /// <li> <p>You cannot specify overlapping port ranges.</p> </li>
    /// <li> <p>The first port in the range must be less than last port in the range.</p> </li>
    /// <li> <p>Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.</p> <p>For more information, see <a href="https://github.com/moby/moby/issues/11185"> Issue #11185</a> on the Github website.</p> <p>For information about how to turn off the docker-proxy in the Docker daemon config file, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon">Docker daemon</a> in the <i>Amazon ECS Developer Guide</i>.</p> </li>
    /// </ul>
    /// <p>You can call <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html"> <code>DescribeTasks</code> </a> to view the <code>hostPortRange</code> which are the host ports that are bound to the container ports.</p>
    #[doc(hidden)]
    pub container_port_range: std::option::Option<std::string::String>,
    /// <p>The port number range on the host that's used with the network binding. This is assigned is assigned by Docker and delivered by the Amazon ECS agent.</p>
    #[doc(hidden)]
    pub host_port_range: std::option::Option<std::string::String>,
}
impl NetworkBinding {
    /// <p>The IP address that the container is bound to on the container instance.</p>
    pub fn bind_ip(&self) -> std::option::Option<&str> {
        self.bind_ip.as_deref()
    }
    /// <p>The port number on the container that's used with the network binding.</p>
    pub fn container_port(&self) -> std::option::Option<i32> {
        self.container_port
    }
    /// <p>The port number on the host that's used with the network binding.</p>
    pub fn host_port(&self) -> std::option::Option<i32> {
        self.host_port
    }
    /// <p>The protocol used for the network binding.</p>
    pub fn protocol(&self) -> std::option::Option<&crate::types::TransportProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The port number range on the container that's bound to the dynamically mapped host port range.</p>
    /// <p>The following rules apply when you specify a <code>containerPortRange</code>:</p>
    /// <ul>
    /// <li> <p>You must use either the <code>bridge</code> network mode or the <code>awsvpc</code> network mode.</p> </li>
    /// <li> <p>This parameter is available for both the EC2 and Fargate launch types.</p> </li>
    /// <li> <p>This parameter is available for both the Linux and Windows operating systems.</p> </li>
    /// <li> <p>The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the <code>ecs-init</code> package </p> </li>
    /// <li> <p>You can specify a maximum of 100 port ranges per container.</p> </li>
    /// <li> <p>You do not specify a <code>hostPortRange</code>. The value of the <code>hostPortRange</code> is set as follows:</p>
    /// <ul>
    /// <li> <p>For containers in a task with the <code>awsvpc</code> network mode, the <code>hostPort</code> is set to the same value as the <code>containerPort</code>. This is a static mapping strategy.</p> </li>
    /// <li> <p>For containers in a task with the <code>bridge</code> network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.</p> </li>
    /// </ul> </li>
    /// <li> <p>The <code>containerPortRange</code> valid values are between 1 and 65535.</p> </li>
    /// <li> <p>A port can only be included in one port mapping per container.</p> </li>
    /// <li> <p>You cannot specify overlapping port ranges.</p> </li>
    /// <li> <p>The first port in the range must be less than last port in the range.</p> </li>
    /// <li> <p>Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.</p> <p>For more information, see <a href="https://github.com/moby/moby/issues/11185"> Issue #11185</a> on the Github website.</p> <p>For information about how to turn off the docker-proxy in the Docker daemon config file, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon">Docker daemon</a> in the <i>Amazon ECS Developer Guide</i>.</p> </li>
    /// </ul>
    /// <p>You can call <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html"> <code>DescribeTasks</code> </a> to view the <code>hostPortRange</code> which are the host ports that are bound to the container ports.</p>
    pub fn container_port_range(&self) -> std::option::Option<&str> {
        self.container_port_range.as_deref()
    }
    /// <p>The port number range on the host that's used with the network binding. This is assigned is assigned by Docker and delivered by the Amazon ECS agent.</p>
    pub fn host_port_range(&self) -> std::option::Option<&str> {
        self.host_port_range.as_deref()
    }
}
impl NetworkBinding {
    /// Creates a new builder-style object to manufacture [`NetworkBinding`](crate::types::NetworkBinding).
    pub fn builder() -> crate::types::builders::NetworkBindingBuilder {
        crate::types::builders::NetworkBindingBuilder::default()
    }
}

/// A builder for [`NetworkBinding`](crate::types::NetworkBinding).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkBindingBuilder {
    pub(crate) bind_ip: std::option::Option<std::string::String>,
    pub(crate) container_port: std::option::Option<i32>,
    pub(crate) host_port: std::option::Option<i32>,
    pub(crate) protocol: std::option::Option<crate::types::TransportProtocol>,
    pub(crate) container_port_range: std::option::Option<std::string::String>,
    pub(crate) host_port_range: std::option::Option<std::string::String>,
}
impl NetworkBindingBuilder {
    /// <p>The IP address that the container is bound to on the container instance.</p>
    pub fn bind_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.bind_ip = Some(input.into());
        self
    }
    /// <p>The IP address that the container is bound to on the container instance.</p>
    pub fn set_bind_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bind_ip = input;
        self
    }
    /// <p>The port number on the container that's used with the network binding.</p>
    pub fn container_port(mut self, input: i32) -> Self {
        self.container_port = Some(input);
        self
    }
    /// <p>The port number on the container that's used with the network binding.</p>
    pub fn set_container_port(mut self, input: std::option::Option<i32>) -> Self {
        self.container_port = input;
        self
    }
    /// <p>The port number on the host that's used with the network binding.</p>
    pub fn host_port(mut self, input: i32) -> Self {
        self.host_port = Some(input);
        self
    }
    /// <p>The port number on the host that's used with the network binding.</p>
    pub fn set_host_port(mut self, input: std::option::Option<i32>) -> Self {
        self.host_port = input;
        self
    }
    /// <p>The protocol used for the network binding.</p>
    pub fn protocol(mut self, input: crate::types::TransportProtocol) -> Self {
        self.protocol = Some(input);
        self
    }
    /// <p>The protocol used for the network binding.</p>
    pub fn set_protocol(
        mut self,
        input: std::option::Option<crate::types::TransportProtocol>,
    ) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The port number range on the container that's bound to the dynamically mapped host port range.</p>
    /// <p>The following rules apply when you specify a <code>containerPortRange</code>:</p>
    /// <ul>
    /// <li> <p>You must use either the <code>bridge</code> network mode or the <code>awsvpc</code> network mode.</p> </li>
    /// <li> <p>This parameter is available for both the EC2 and Fargate launch types.</p> </li>
    /// <li> <p>This parameter is available for both the Linux and Windows operating systems.</p> </li>
    /// <li> <p>The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the <code>ecs-init</code> package </p> </li>
    /// <li> <p>You can specify a maximum of 100 port ranges per container.</p> </li>
    /// <li> <p>You do not specify a <code>hostPortRange</code>. The value of the <code>hostPortRange</code> is set as follows:</p>
    /// <ul>
    /// <li> <p>For containers in a task with the <code>awsvpc</code> network mode, the <code>hostPort</code> is set to the same value as the <code>containerPort</code>. This is a static mapping strategy.</p> </li>
    /// <li> <p>For containers in a task with the <code>bridge</code> network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.</p> </li>
    /// </ul> </li>
    /// <li> <p>The <code>containerPortRange</code> valid values are between 1 and 65535.</p> </li>
    /// <li> <p>A port can only be included in one port mapping per container.</p> </li>
    /// <li> <p>You cannot specify overlapping port ranges.</p> </li>
    /// <li> <p>The first port in the range must be less than last port in the range.</p> </li>
    /// <li> <p>Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.</p> <p>For more information, see <a href="https://github.com/moby/moby/issues/11185"> Issue #11185</a> on the Github website.</p> <p>For information about how to turn off the docker-proxy in the Docker daemon config file, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon">Docker daemon</a> in the <i>Amazon ECS Developer Guide</i>.</p> </li>
    /// </ul>
    /// <p>You can call <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html"> <code>DescribeTasks</code> </a> to view the <code>hostPortRange</code> which are the host ports that are bound to the container ports.</p>
    pub fn container_port_range(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_port_range = Some(input.into());
        self
    }
    /// <p>The port number range on the container that's bound to the dynamically mapped host port range.</p>
    /// <p>The following rules apply when you specify a <code>containerPortRange</code>:</p>
    /// <ul>
    /// <li> <p>You must use either the <code>bridge</code> network mode or the <code>awsvpc</code> network mode.</p> </li>
    /// <li> <p>This parameter is available for both the EC2 and Fargate launch types.</p> </li>
    /// <li> <p>This parameter is available for both the Linux and Windows operating systems.</p> </li>
    /// <li> <p>The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the <code>ecs-init</code> package </p> </li>
    /// <li> <p>You can specify a maximum of 100 port ranges per container.</p> </li>
    /// <li> <p>You do not specify a <code>hostPortRange</code>. The value of the <code>hostPortRange</code> is set as follows:</p>
    /// <ul>
    /// <li> <p>For containers in a task with the <code>awsvpc</code> network mode, the <code>hostPort</code> is set to the same value as the <code>containerPort</code>. This is a static mapping strategy.</p> </li>
    /// <li> <p>For containers in a task with the <code>bridge</code> network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.</p> </li>
    /// </ul> </li>
    /// <li> <p>The <code>containerPortRange</code> valid values are between 1 and 65535.</p> </li>
    /// <li> <p>A port can only be included in one port mapping per container.</p> </li>
    /// <li> <p>You cannot specify overlapping port ranges.</p> </li>
    /// <li> <p>The first port in the range must be less than last port in the range.</p> </li>
    /// <li> <p>Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.</p> <p>For more information, see <a href="https://github.com/moby/moby/issues/11185"> Issue #11185</a> on the Github website.</p> <p>For information about how to turn off the docker-proxy in the Docker daemon config file, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon">Docker daemon</a> in the <i>Amazon ECS Developer Guide</i>.</p> </li>
    /// </ul>
    /// <p>You can call <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html"> <code>DescribeTasks</code> </a> to view the <code>hostPortRange</code> which are the host ports that are bound to the container ports.</p>
    pub fn set_container_port_range(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.container_port_range = input;
        self
    }
    /// <p>The port number range on the host that's used with the network binding. This is assigned is assigned by Docker and delivered by the Amazon ECS agent.</p>
    pub fn host_port_range(mut self, input: impl Into<std::string::String>) -> Self {
        self.host_port_range = Some(input.into());
        self
    }
    /// <p>The port number range on the host that's used with the network binding. This is assigned is assigned by Docker and delivered by the Amazon ECS agent.</p>
    pub fn set_host_port_range(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.host_port_range = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkBinding`](crate::types::NetworkBinding).
    pub fn build(self) -> crate::types::NetworkBinding {
        crate::types::NetworkBinding {
            bind_ip: self.bind_ip,
            container_port: self.container_port,
            host_port: self.host_port,
            protocol: self.protocol,
            container_port_range: self.container_port_range,
            host_port_range: self.host_port_range,
        }
    }
}
