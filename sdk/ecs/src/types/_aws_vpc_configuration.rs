// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the networking details for a task or service. For example <code>awsVpcConfiguration={subnets=\["subnet-12344321"\],securityGroups=\["sg-12344321"\]}</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsVpcConfiguration {
    /// <p>The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified.</p><note>
    /// <p>All specified subnets must be from the same VPC.</p>
    /// </note>
    pub subnets: ::std::vec::Vec<::std::string::String>,
    /// <p>The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified.</p><note>
    /// <p>All specified security groups must be from the same VPC.</p>
    /// </note>
    pub security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Whether the task's elastic network interface receives a public IP address.</p>
    /// <p>Consider the following when you set this value:</p>
    /// <ul>
    /// <li>
    /// <p>When you use <code>create-service</code> or <code>update-service</code>, the The default is <code>DISABLED</code>.</p></li>
    /// <li>
    /// <p>When the service <code>deploymentController</code> is <code>ECS</code>, the value must be <code>DISABLED</code>.</p></li>
    /// </ul>
    pub assign_public_ip: ::std::option::Option<crate::types::AssignPublicIp>,
}
impl AwsVpcConfiguration {
    /// <p>The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified.</p><note>
    /// <p>All specified subnets must be from the same VPC.</p>
    /// </note>
    pub fn subnets(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.subnets.deref()
    }
    /// <p>The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified.</p><note>
    /// <p>All specified security groups must be from the same VPC.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_groups.is_none()`.
    pub fn security_groups(&self) -> &[::std::string::String] {
        self.security_groups.as_deref().unwrap_or_default()
    }
    /// <p>Whether the task's elastic network interface receives a public IP address.</p>
    /// <p>Consider the following when you set this value:</p>
    /// <ul>
    /// <li>
    /// <p>When you use <code>create-service</code> or <code>update-service</code>, the The default is <code>DISABLED</code>.</p></li>
    /// <li>
    /// <p>When the service <code>deploymentController</code> is <code>ECS</code>, the value must be <code>DISABLED</code>.</p></li>
    /// </ul>
    pub fn assign_public_ip(&self) -> ::std::option::Option<&crate::types::AssignPublicIp> {
        self.assign_public_ip.as_ref()
    }
}
impl AwsVpcConfiguration {
    /// Creates a new builder-style object to manufacture [`AwsVpcConfiguration`](crate::types::AwsVpcConfiguration).
    pub fn builder() -> crate::types::builders::AwsVpcConfigurationBuilder {
        crate::types::builders::AwsVpcConfigurationBuilder::default()
    }
}

/// A builder for [`AwsVpcConfiguration`](crate::types::AwsVpcConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsVpcConfigurationBuilder {
    pub(crate) subnets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) assign_public_ip: ::std::option::Option<crate::types::AssignPublicIp>,
}
impl AwsVpcConfigurationBuilder {
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified.</p><note>
    /// <p>All specified subnets must be from the same VPC.</p>
    /// </note>
    pub fn subnets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input.into());
        self.subnets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified.</p><note>
    /// <p>All specified subnets must be from the same VPC.</p>
    /// </note>
    pub fn set_subnets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnets = input;
        self
    }
    /// <p>The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified.</p><note>
    /// <p>All specified subnets must be from the same VPC.</p>
    /// </note>
    pub fn get_subnets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnets
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified.</p><note>
    /// <p>All specified security groups must be from the same VPC.</p>
    /// </note>
    pub fn security_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input.into());
        self.security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified.</p><note>
    /// <p>All specified security groups must be from the same VPC.</p>
    /// </note>
    pub fn set_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_groups = input;
        self
    }
    /// <p>The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified.</p><note>
    /// <p>All specified security groups must be from the same VPC.</p>
    /// </note>
    pub fn get_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_groups
    }
    /// <p>Whether the task's elastic network interface receives a public IP address.</p>
    /// <p>Consider the following when you set this value:</p>
    /// <ul>
    /// <li>
    /// <p>When you use <code>create-service</code> or <code>update-service</code>, the The default is <code>DISABLED</code>.</p></li>
    /// <li>
    /// <p>When the service <code>deploymentController</code> is <code>ECS</code>, the value must be <code>DISABLED</code>.</p></li>
    /// </ul>
    pub fn assign_public_ip(mut self, input: crate::types::AssignPublicIp) -> Self {
        self.assign_public_ip = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the task's elastic network interface receives a public IP address.</p>
    /// <p>Consider the following when you set this value:</p>
    /// <ul>
    /// <li>
    /// <p>When you use <code>create-service</code> or <code>update-service</code>, the The default is <code>DISABLED</code>.</p></li>
    /// <li>
    /// <p>When the service <code>deploymentController</code> is <code>ECS</code>, the value must be <code>DISABLED</code>.</p></li>
    /// </ul>
    pub fn set_assign_public_ip(mut self, input: ::std::option::Option<crate::types::AssignPublicIp>) -> Self {
        self.assign_public_ip = input;
        self
    }
    /// <p>Whether the task's elastic network interface receives a public IP address.</p>
    /// <p>Consider the following when you set this value:</p>
    /// <ul>
    /// <li>
    /// <p>When you use <code>create-service</code> or <code>update-service</code>, the The default is <code>DISABLED</code>.</p></li>
    /// <li>
    /// <p>When the service <code>deploymentController</code> is <code>ECS</code>, the value must be <code>DISABLED</code>.</p></li>
    /// </ul>
    pub fn get_assign_public_ip(&self) -> &::std::option::Option<crate::types::AssignPublicIp> {
        &self.assign_public_ip
    }
    /// Consumes the builder and constructs a [`AwsVpcConfiguration`](crate::types::AwsVpcConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`subnets`](crate::types::builders::AwsVpcConfigurationBuilder::subnets)
    pub fn build(self) -> ::std::result::Result<crate::types::AwsVpcConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AwsVpcConfiguration {
            subnets: self.subnets.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subnets",
                    "subnets was not specified but it is required when building AwsVpcConfiguration",
                )
            })?,
            security_groups: self.security_groups,
            assign_public_ip: self.assign_public_ip,
        })
    }
}
