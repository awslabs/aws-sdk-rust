// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The current account setting for a resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Setting {
    /// <p>The Amazon ECS resource name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::SettingName>,
    /// <p>Determines whether the account setting is enabled or disabled for the specified resource.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The ARN of the principal. It can be an IAM user, IAM role, or the root user. If this field is omitted, the authenticated user is assumed.</p>
    #[doc(hidden)]
    pub principal_arn: std::option::Option<std::string::String>,
}
impl Setting {
    /// <p>The Amazon ECS resource name.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::SettingName> {
        self.name.as_ref()
    }
    /// <p>Determines whether the account setting is enabled or disabled for the specified resource.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The ARN of the principal. It can be an IAM user, IAM role, or the root user. If this field is omitted, the authenticated user is assumed.</p>
    pub fn principal_arn(&self) -> std::option::Option<&str> {
        self.principal_arn.as_deref()
    }
}
impl Setting {
    /// Creates a new builder-style object to manufacture [`Setting`](crate::types::Setting).
    pub fn builder() -> crate::types::builders::SettingBuilder {
        crate::types::builders::SettingBuilder::default()
    }
}

/// A builder for [`Setting`](crate::types::Setting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SettingBuilder {
    pub(crate) name: std::option::Option<crate::types::SettingName>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) principal_arn: std::option::Option<std::string::String>,
}
impl SettingBuilder {
    /// <p>The Amazon ECS resource name.</p>
    pub fn name(mut self, input: crate::types::SettingName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The Amazon ECS resource name.</p>
    pub fn set_name(mut self, input: std::option::Option<crate::types::SettingName>) -> Self {
        self.name = input;
        self
    }
    /// <p>Determines whether the account setting is enabled or disabled for the specified resource.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>Determines whether the account setting is enabled or disabled for the specified resource.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The ARN of the principal. It can be an IAM user, IAM role, or the root user. If this field is omitted, the authenticated user is assumed.</p>
    pub fn principal_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the principal. It can be an IAM user, IAM role, or the root user. If this field is omitted, the authenticated user is assumed.</p>
    pub fn set_principal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Setting`](crate::types::Setting).
    pub fn build(self) -> crate::types::Setting {
        crate::types::Setting {
            name: self.name,
            value: self.value,
            principal_arn: self.principal_arn,
        }
    }
}
