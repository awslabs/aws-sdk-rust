// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_service_revision<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::ServiceRevision>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ServiceRevisionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "serviceRevisionArn" => {
                            builder = builder.set_service_revision_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "serviceArn" => {
                            builder = builder.set_service_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "clusterArn" => {
                            builder = builder.set_cluster_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "taskDefinition" => {
                            builder = builder.set_task_definition(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "capacityProviderStrategy" => {
                            builder = builder.set_capacity_provider_strategy(
                                crate::protocol_serde::shape_capacity_provider_strategy::de_capacity_provider_strategy(tokens)?,
                            );
                        }
                        "launchType" => {
                            builder = builder.set_launch_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::LaunchType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "platformVersion" => {
                            builder = builder.set_platform_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "platformFamily" => {
                            builder = builder.set_platform_family(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "loadBalancers" => {
                            builder = builder.set_load_balancers(crate::protocol_serde::shape_load_balancers::de_load_balancers(tokens)?);
                        }
                        "serviceRegistries" => {
                            builder = builder.set_service_registries(crate::protocol_serde::shape_service_registries::de_service_registries(tokens)?);
                        }
                        "networkConfiguration" => {
                            builder = builder
                                .set_network_configuration(crate::protocol_serde::shape_network_configuration::de_network_configuration(tokens)?);
                        }
                        "containerImages" => {
                            builder = builder.set_container_images(crate::protocol_serde::shape_container_images::de_container_images(tokens)?);
                        }
                        "guardDutyEnabled" => {
                            builder = builder.set_guard_duty_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "serviceConnectConfiguration" => {
                            builder = builder.set_service_connect_configuration(
                                crate::protocol_serde::shape_service_connect_configuration::de_service_connect_configuration(tokens)?,
                            );
                        }
                        "volumeConfigurations" => {
                            builder = builder.set_volume_configurations(
                                crate::protocol_serde::shape_service_volume_configurations::de_service_volume_configurations(tokens)?,
                            );
                        }
                        "fargateEphemeralStorage" => {
                            builder = builder.set_fargate_ephemeral_storage(
                                crate::protocol_serde::shape_deployment_ephemeral_storage::de_deployment_ephemeral_storage(tokens)?,
                            );
                        }
                        "createdAt" => {
                            builder = builder.set_created_at(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "vpcLatticeConfigurations" => {
                            builder = builder.set_vpc_lattice_configurations(
                                crate::protocol_serde::shape_vpc_lattice_configurations::de_vpc_lattice_configurations(tokens)?,
                            );
                        }
                        "resolvedConfiguration" => {
                            builder = builder
                                .set_resolved_configuration(crate::protocol_serde::shape_resolved_configuration::de_resolved_configuration(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
