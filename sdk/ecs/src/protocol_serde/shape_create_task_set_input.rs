// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_task_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_task_set::CreateTaskSetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.service {
        object.key("service").string(var_1.as_str());
    }
    if let Some(var_2) = &input.cluster {
        object.key("cluster").string(var_2.as_str());
    }
    if let Some(var_3) = &input.external_id {
        object.key("externalId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.task_definition {
        object.key("taskDefinition").string(var_4.as_str());
    }
    if let Some(var_5) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("networkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.load_balancers {
        let mut array_8 = object.key("loadBalancers").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_load_balancer::ser_load_balancer(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.service_registries {
        let mut array_12 = object.key("serviceRegistries").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_service_registry::ser_service_registry(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.launch_type {
        object.key("launchType").string(var_15.as_str());
    }
    if let Some(var_16) = &input.capacity_provider_strategy {
        let mut array_17 = object.key("capacityProviderStrategy").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_capacity_provider_strategy_item::ser_capacity_provider_strategy_item(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.platform_version {
        object.key("platformVersion").string(var_20.as_str());
    }
    if let Some(var_21) = &input.scale {
        #[allow(unused_mut)]
        let mut object_22 = object.key("scale").start_object();
        crate::protocol_serde::shape_scale::ser_scale(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.client_token {
        object.key("clientToken").string(var_23.as_str());
    }
    if let Some(var_24) = &input.tags {
        let mut array_25 = object.key("tags").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    Ok(())
}
