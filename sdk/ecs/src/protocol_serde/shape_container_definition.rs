// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_container_definition(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ContainerDefinition,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.image {
        object.key("image").string(var_2.as_str());
    }
    if let Some(var_3) = &input.repository_credentials {
        #[allow(unused_mut)]
        let mut object_4 = object.key("repositoryCredentials").start_object();
        crate::protocol_serde::shape_repository_credentials::ser_repository_credentials(&mut object_4, var_3)?;
        object_4.finish();
    }
    if input.cpu != 0 {
        object.key("cpu").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.cpu).into()),
        );
    }
    if let Some(var_5) = &input.memory {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.memory_reservation {
        object.key("memoryReservation").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.links {
        let mut array_8 = object.key("links").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.port_mappings {
        let mut array_11 = object.key("portMappings").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_port_mapping::ser_port_mapping(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.essential {
        object.key("essential").boolean(*var_14);
    }
    if let Some(var_15) = &input.restart_policy {
        #[allow(unused_mut)]
        let mut object_16 = object.key("restartPolicy").start_object();
        crate::protocol_serde::shape_container_restart_policy::ser_container_restart_policy(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.entry_point {
        let mut array_18 = object.key("entryPoint").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.command {
        let mut array_21 = object.key("command").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.environment {
        let mut array_24 = object.key("environment").start_array();
        for item_25 in var_23 {
            {
                #[allow(unused_mut)]
                let mut object_26 = array_24.value().start_object();
                crate::protocol_serde::shape_key_value_pair::ser_key_value_pair(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.environment_files {
        let mut array_28 = object.key("environmentFiles").start_array();
        for item_29 in var_27 {
            {
                #[allow(unused_mut)]
                let mut object_30 = array_28.value().start_object();
                crate::protocol_serde::shape_environment_file::ser_environment_file(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.mount_points {
        let mut array_32 = object.key("mountPoints").start_array();
        for item_33 in var_31 {
            {
                #[allow(unused_mut)]
                let mut object_34 = array_32.value().start_object();
                crate::protocol_serde::shape_mount_point::ser_mount_point(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    if let Some(var_35) = &input.volumes_from {
        let mut array_36 = object.key("volumesFrom").start_array();
        for item_37 in var_35 {
            {
                #[allow(unused_mut)]
                let mut object_38 = array_36.value().start_object();
                crate::protocol_serde::shape_volume_from::ser_volume_from(&mut object_38, item_37)?;
                object_38.finish();
            }
        }
        array_36.finish();
    }
    if let Some(var_39) = &input.linux_parameters {
        #[allow(unused_mut)]
        let mut object_40 = object.key("linuxParameters").start_object();
        crate::protocol_serde::shape_linux_parameters::ser_linux_parameters(&mut object_40, var_39)?;
        object_40.finish();
    }
    if let Some(var_41) = &input.secrets {
        let mut array_42 = object.key("secrets").start_array();
        for item_43 in var_41 {
            {
                #[allow(unused_mut)]
                let mut object_44 = array_42.value().start_object();
                crate::protocol_serde::shape_secret::ser_secret(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.depends_on {
        let mut array_46 = object.key("dependsOn").start_array();
        for item_47 in var_45 {
            {
                #[allow(unused_mut)]
                let mut object_48 = array_46.value().start_object();
                crate::protocol_serde::shape_container_dependency::ser_container_dependency(&mut object_48, item_47)?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.start_timeout {
        object.key("startTimeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_49).into()),
        );
    }
    if let Some(var_50) = &input.stop_timeout {
        object.key("stopTimeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_50).into()),
        );
    }
    if let Some(var_51) = &input.version_consistency {
        object.key("versionConsistency").string(var_51.as_str());
    }
    if let Some(var_52) = &input.hostname {
        object.key("hostname").string(var_52.as_str());
    }
    if let Some(var_53) = &input.user {
        object.key("user").string(var_53.as_str());
    }
    if let Some(var_54) = &input.working_directory {
        object.key("workingDirectory").string(var_54.as_str());
    }
    if let Some(var_55) = &input.disable_networking {
        object.key("disableNetworking").boolean(*var_55);
    }
    if let Some(var_56) = &input.privileged {
        object.key("privileged").boolean(*var_56);
    }
    if let Some(var_57) = &input.readonly_root_filesystem {
        object.key("readonlyRootFilesystem").boolean(*var_57);
    }
    if let Some(var_58) = &input.dns_servers {
        let mut array_59 = object.key("dnsServers").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60.as_str());
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.dns_search_domains {
        let mut array_62 = object.key("dnsSearchDomains").start_array();
        for item_63 in var_61 {
            {
                array_62.value().string(item_63.as_str());
            }
        }
        array_62.finish();
    }
    if let Some(var_64) = &input.extra_hosts {
        let mut array_65 = object.key("extraHosts").start_array();
        for item_66 in var_64 {
            {
                #[allow(unused_mut)]
                let mut object_67 = array_65.value().start_object();
                crate::protocol_serde::shape_host_entry::ser_host_entry(&mut object_67, item_66)?;
                object_67.finish();
            }
        }
        array_65.finish();
    }
    if let Some(var_68) = &input.docker_security_options {
        let mut array_69 = object.key("dockerSecurityOptions").start_array();
        for item_70 in var_68 {
            {
                array_69.value().string(item_70.as_str());
            }
        }
        array_69.finish();
    }
    if let Some(var_71) = &input.interactive {
        object.key("interactive").boolean(*var_71);
    }
    if let Some(var_72) = &input.pseudo_terminal {
        object.key("pseudoTerminal").boolean(*var_72);
    }
    if let Some(var_73) = &input.docker_labels {
        #[allow(unused_mut)]
        let mut object_74 = object.key("dockerLabels").start_object();
        for (key_75, value_76) in var_73 {
            {
                object_74.key(key_75.as_str()).string(value_76.as_str());
            }
        }
        object_74.finish();
    }
    if let Some(var_77) = &input.ulimits {
        let mut array_78 = object.key("ulimits").start_array();
        for item_79 in var_77 {
            {
                #[allow(unused_mut)]
                let mut object_80 = array_78.value().start_object();
                crate::protocol_serde::shape_ulimit::ser_ulimit(&mut object_80, item_79)?;
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_82 = object.key("logConfiguration").start_object();
        crate::protocol_serde::shape_log_configuration::ser_log_configuration(&mut object_82, var_81)?;
        object_82.finish();
    }
    if let Some(var_83) = &input.health_check {
        #[allow(unused_mut)]
        let mut object_84 = object.key("healthCheck").start_object();
        crate::protocol_serde::shape_health_check::ser_health_check(&mut object_84, var_83)?;
        object_84.finish();
    }
    if let Some(var_85) = &input.system_controls {
        let mut array_86 = object.key("systemControls").start_array();
        for item_87 in var_85 {
            {
                #[allow(unused_mut)]
                let mut object_88 = array_86.value().start_object();
                crate::protocol_serde::shape_system_control::ser_system_control(&mut object_88, item_87)?;
                object_88.finish();
            }
        }
        array_86.finish();
    }
    if let Some(var_89) = &input.resource_requirements {
        let mut array_90 = object.key("resourceRequirements").start_array();
        for item_91 in var_89 {
            {
                #[allow(unused_mut)]
                let mut object_92 = array_90.value().start_object();
                crate::protocol_serde::shape_resource_requirement::ser_resource_requirement(&mut object_92, item_91)?;
                object_92.finish();
            }
        }
        array_90.finish();
    }
    if let Some(var_93) = &input.firelens_configuration {
        #[allow(unused_mut)]
        let mut object_94 = object.key("firelensConfiguration").start_object();
        crate::protocol_serde::shape_firelens_configuration::ser_firelens_configuration(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.credential_specs {
        let mut array_96 = object.key("credentialSpecs").start_array();
        for item_97 in var_95 {
            {
                array_96.value().string(item_97.as_str());
            }
        }
        array_96.finish();
    }
    Ok(())
}

pub(crate) fn de_container_definition<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::ContainerDefinition>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ContainerDefinitionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "image" => {
                            builder = builder.set_image(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "repositoryCredentials" => {
                            builder = builder
                                .set_repository_credentials(crate::protocol_serde::shape_repository_credentials::de_repository_credentials(tokens)?);
                        }
                        "cpu" => {
                            builder = builder.set_cpu(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "memory" => {
                            builder = builder.set_memory(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "memoryReservation" => {
                            builder = builder.set_memory_reservation(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "links" => {
                            builder = builder.set_links(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "portMappings" => {
                            builder = builder.set_port_mappings(crate::protocol_serde::shape_port_mapping_list::de_port_mapping_list(tokens)?);
                        }
                        "essential" => {
                            builder = builder.set_essential(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "restartPolicy" => {
                            builder = builder.set_restart_policy(crate::protocol_serde::shape_container_restart_policy::de_container_restart_policy(
                                tokens,
                            )?);
                        }
                        "entryPoint" => {
                            builder = builder.set_entry_point(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "command" => {
                            builder = builder.set_command(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "environment" => {
                            builder = builder.set_environment(crate::protocol_serde::shape_environment_variables::de_environment_variables(tokens)?);
                        }
                        "environmentFiles" => {
                            builder = builder.set_environment_files(crate::protocol_serde::shape_environment_files::de_environment_files(tokens)?);
                        }
                        "mountPoints" => {
                            builder = builder.set_mount_points(crate::protocol_serde::shape_mount_point_list::de_mount_point_list(tokens)?);
                        }
                        "volumesFrom" => {
                            builder = builder.set_volumes_from(crate::protocol_serde::shape_volume_from_list::de_volume_from_list(tokens)?);
                        }
                        "linuxParameters" => {
                            builder = builder.set_linux_parameters(crate::protocol_serde::shape_linux_parameters::de_linux_parameters(tokens)?);
                        }
                        "secrets" => {
                            builder = builder.set_secrets(crate::protocol_serde::shape_secret_list::de_secret_list(tokens)?);
                        }
                        "dependsOn" => {
                            builder = builder.set_depends_on(crate::protocol_serde::shape_container_dependencies::de_container_dependencies(tokens)?);
                        }
                        "startTimeout" => {
                            builder = builder.set_start_timeout(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "stopTimeout" => {
                            builder = builder.set_stop_timeout(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "versionConsistency" => {
                            builder = builder.set_version_consistency(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VersionConsistency::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "hostname" => {
                            builder = builder.set_hostname(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "user" => {
                            builder = builder.set_user(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "workingDirectory" => {
                            builder = builder.set_working_directory(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "disableNetworking" => {
                            builder = builder.set_disable_networking(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "privileged" => {
                            builder = builder.set_privileged(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "readonlyRootFilesystem" => {
                            builder =
                                builder.set_readonly_root_filesystem(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "dnsServers" => {
                            builder = builder.set_dns_servers(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "dnsSearchDomains" => {
                            builder = builder.set_dns_search_domains(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "extraHosts" => {
                            builder = builder.set_extra_hosts(crate::protocol_serde::shape_host_entry_list::de_host_entry_list(tokens)?);
                        }
                        "dockerSecurityOptions" => {
                            builder = builder.set_docker_security_options(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "interactive" => {
                            builder = builder.set_interactive(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "pseudoTerminal" => {
                            builder = builder.set_pseudo_terminal(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "dockerLabels" => {
                            builder = builder.set_docker_labels(crate::protocol_serde::shape_docker_labels_map::de_docker_labels_map(tokens)?);
                        }
                        "ulimits" => {
                            builder = builder.set_ulimits(crate::protocol_serde::shape_ulimit_list::de_ulimit_list(tokens)?);
                        }
                        "logConfiguration" => {
                            builder = builder.set_log_configuration(crate::protocol_serde::shape_log_configuration::de_log_configuration(tokens)?);
                        }
                        "healthCheck" => {
                            builder = builder.set_health_check(crate::protocol_serde::shape_health_check::de_health_check(tokens)?);
                        }
                        "systemControls" => {
                            builder = builder.set_system_controls(crate::protocol_serde::shape_system_controls::de_system_controls(tokens)?);
                        }
                        "resourceRequirements" => {
                            builder = builder
                                .set_resource_requirements(crate::protocol_serde::shape_resource_requirements::de_resource_requirements(tokens)?);
                        }
                        "firelensConfiguration" => {
                            builder = builder
                                .set_firelens_configuration(crate::protocol_serde::shape_firelens_configuration::de_firelens_configuration(tokens)?);
                        }
                        "credentialSpecs" => {
                            builder = builder.set_credential_specs(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
