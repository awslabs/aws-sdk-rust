// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_cluster<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Cluster>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ClusterBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "clusterArn" => {
                                builder = builder.set_cluster_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "clusterName" => {
                                builder = builder.set_cluster_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "configuration" => {
                                builder = builder.set_configuration(
                                    crate::protocol_serde::shape_cluster_configuration::de_cluster_configuration(tokens)?
                                );
                            }
                            "status" => {
                                builder = builder.set_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "registeredContainerInstancesCount" => {
                                builder = builder.set_registered_container_instances_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "runningTasksCount" => {
                                builder = builder.set_running_tasks_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "pendingTasksCount" => {
                                builder = builder.set_pending_tasks_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "activeServicesCount" => {
                                builder = builder.set_active_services_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "statistics" => {
                                builder = builder.set_statistics(
                                    crate::protocol_serde::shape_statistics::de_statistics(tokens)?,
                                );
                            }
                            "tags" => {
                                builder = builder
                                    .set_tags(crate::protocol_serde::shape_tags::de_tags(tokens)?);
                            }
                            "settings" => {
                                builder = builder.set_settings(
                                    crate::protocol_serde::shape_cluster_settings::de_cluster_settings(tokens)?
                                );
                            }
                            "capacityProviders" => {
                                builder = builder.set_capacity_providers(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "defaultCapacityProviderStrategy" => {
                                builder = builder.set_default_capacity_provider_strategy(
                                    crate::protocol_serde::shape_capacity_provider_strategy::de_capacity_provider_strategy(tokens)?
                                );
                            }
                            "attachments" => {
                                builder = builder.set_attachments(
                                    crate::protocol_serde::shape_attachments::de_attachments(
                                        tokens,
                                    )?,
                                );
                            }
                            "attachmentsStatus" => {
                                builder = builder.set_attachments_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "serviceConnectDefaults" => {
                                builder = builder.set_service_connect_defaults(
                                    crate::protocol_serde::shape_cluster_service_connect_defaults::de_cluster_service_connect_defaults(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
