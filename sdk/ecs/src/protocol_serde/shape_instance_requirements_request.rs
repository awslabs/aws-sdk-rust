// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_instance_requirements_request(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InstanceRequirementsRequest,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.v_cpu_count {
        #[allow(unused_mut)]
        let mut object_2 = object.key("vCpuCount").start_object();
        crate::protocol_serde::shape_v_cpu_count_range_request::ser_v_cpu_count_range_request(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.memory_mib {
        #[allow(unused_mut)]
        let mut object_4 = object.key("memoryMiB").start_object();
        crate::protocol_serde::shape_memory_mib_request::ser_memory_mib_request(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.cpu_manufacturers {
        let mut array_6 = object.key("cpuManufacturers").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.memory_gib_per_v_cpu {
        #[allow(unused_mut)]
        let mut object_9 = object.key("memoryGiBPerVCpu").start_object();
        crate::protocol_serde::shape_memory_gib_per_v_cpu_request::ser_memory_gib_per_v_cpu_request(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.excluded_instance_types {
        let mut array_11 = object.key("excludedInstanceTypes").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.instance_generations {
        let mut array_14 = object.key("instanceGenerations").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.spot_max_price_percentage_over_lowest_price {
        object.key("spotMaxPricePercentageOverLowestPrice").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.on_demand_max_price_percentage_over_lowest_price {
        object.key("onDemandMaxPricePercentageOverLowestPrice").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.bare_metal {
        object.key("bareMetal").string(var_18.as_str());
    }
    if let Some(var_19) = &input.burstable_performance {
        object.key("burstablePerformance").string(var_19.as_str());
    }
    if let Some(var_20) = &input.require_hibernate_support {
        object.key("requireHibernateSupport").boolean(*var_20);
    }
    if let Some(var_21) = &input.network_interface_count {
        #[allow(unused_mut)]
        let mut object_22 = object.key("networkInterfaceCount").start_object();
        crate::protocol_serde::shape_network_interface_count_request::ser_network_interface_count_request(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.local_storage {
        object.key("localStorage").string(var_23.as_str());
    }
    if let Some(var_24) = &input.local_storage_types {
        let mut array_25 = object.key("localStorageTypes").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.total_local_storage_gb {
        #[allow(unused_mut)]
        let mut object_28 = object.key("totalLocalStorageGB").start_object();
        crate::protocol_serde::shape_total_local_storage_gb_request::ser_total_local_storage_gb_request(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.baseline_ebs_bandwidth_mbps {
        #[allow(unused_mut)]
        let mut object_30 = object.key("baselineEbsBandwidthMbps").start_object();
        crate::protocol_serde::shape_baseline_ebs_bandwidth_mbps_request::ser_baseline_ebs_bandwidth_mbps_request(&mut object_30, var_29)?;
        object_30.finish();
    }
    if let Some(var_31) = &input.accelerator_types {
        let mut array_32 = object.key("acceleratorTypes").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.accelerator_count {
        #[allow(unused_mut)]
        let mut object_35 = object.key("acceleratorCount").start_object();
        crate::protocol_serde::shape_accelerator_count_request::ser_accelerator_count_request(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.accelerator_manufacturers {
        let mut array_37 = object.key("acceleratorManufacturers").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.accelerator_names {
        let mut array_40 = object.key("acceleratorNames").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    if let Some(var_42) = &input.accelerator_total_memory_mib {
        #[allow(unused_mut)]
        let mut object_43 = object.key("acceleratorTotalMemoryMiB").start_object();
        crate::protocol_serde::shape_accelerator_total_memory_mib_request::ser_accelerator_total_memory_mib_request(&mut object_43, var_42)?;
        object_43.finish();
    }
    if let Some(var_44) = &input.network_bandwidth_gbps {
        #[allow(unused_mut)]
        let mut object_45 = object.key("networkBandwidthGbps").start_object();
        crate::protocol_serde::shape_network_bandwidth_gbps_request::ser_network_bandwidth_gbps_request(&mut object_45, var_44)?;
        object_45.finish();
    }
    if let Some(var_46) = &input.allowed_instance_types {
        let mut array_47 = object.key("allowedInstanceTypes").start_array();
        for item_48 in var_46 {
            {
                array_47.value().string(item_48.as_str());
            }
        }
        array_47.finish();
    }
    if let Some(var_49) = &input.max_spot_price_as_percentage_of_optimal_on_demand_price {
        object.key("maxSpotPriceAsPercentageOfOptimalOnDemandPrice").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_49).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_instance_requirements_request<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::InstanceRequirementsRequest>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::InstanceRequirementsRequestBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "vCpuCount" => {
                            builder = builder.set_v_cpu_count(crate::protocol_serde::shape_v_cpu_count_range_request::de_v_cpu_count_range_request(
                                tokens,
                            )?);
                        }
                        "memoryMiB" => {
                            builder = builder.set_memory_mib(crate::protocol_serde::shape_memory_mib_request::de_memory_mib_request(tokens)?);
                        }
                        "cpuManufacturers" => {
                            builder =
                                builder.set_cpu_manufacturers(crate::protocol_serde::shape_cpu_manufacturer_set::de_cpu_manufacturer_set(tokens)?);
                        }
                        "memoryGiBPerVCpu" => {
                            builder = builder.set_memory_gib_per_v_cpu(
                                crate::protocol_serde::shape_memory_gib_per_v_cpu_request::de_memory_gib_per_v_cpu_request(tokens)?,
                            );
                        }
                        "excludedInstanceTypes" => {
                            builder = builder.set_excluded_instance_types(
                                crate::protocol_serde::shape_excluded_instance_type_set::de_excluded_instance_type_set(tokens)?,
                            );
                        }
                        "instanceGenerations" => {
                            builder = builder
                                .set_instance_generations(crate::protocol_serde::shape_instance_generation_set::de_instance_generation_set(tokens)?);
                        }
                        "spotMaxPricePercentageOverLowestPrice" => {
                            builder = builder.set_spot_max_price_percentage_over_lowest_price(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "onDemandMaxPricePercentageOverLowestPrice" => {
                            builder = builder.set_on_demand_max_price_percentage_over_lowest_price(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "bareMetal" => {
                            builder = builder.set_bare_metal(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BareMetal::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "burstablePerformance" => {
                            builder = builder.set_burstable_performance(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurstablePerformance::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "requireHibernateSupport" => {
                            builder =
                                builder.set_require_hibernate_support(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "networkInterfaceCount" => {
                            builder = builder.set_network_interface_count(
                                crate::protocol_serde::shape_network_interface_count_request::de_network_interface_count_request(tokens)?,
                            );
                        }
                        "localStorage" => {
                            builder = builder.set_local_storage(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::LocalStorage::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "localStorageTypes" => {
                            builder = builder
                                .set_local_storage_types(crate::protocol_serde::shape_local_storage_type_set::de_local_storage_type_set(tokens)?);
                        }
                        "totalLocalStorageGB" => {
                            builder = builder.set_total_local_storage_gb(
                                crate::protocol_serde::shape_total_local_storage_gb_request::de_total_local_storage_gb_request(tokens)?,
                            );
                        }
                        "baselineEbsBandwidthMbps" => {
                            builder = builder.set_baseline_ebs_bandwidth_mbps(
                                crate::protocol_serde::shape_baseline_ebs_bandwidth_mbps_request::de_baseline_ebs_bandwidth_mbps_request(tokens)?,
                            );
                        }
                        "acceleratorTypes" => {
                            builder =
                                builder.set_accelerator_types(crate::protocol_serde::shape_accelerator_type_set::de_accelerator_type_set(tokens)?);
                        }
                        "acceleratorCount" => {
                            builder = builder.set_accelerator_count(
                                crate::protocol_serde::shape_accelerator_count_request::de_accelerator_count_request(tokens)?,
                            );
                        }
                        "acceleratorManufacturers" => {
                            builder = builder.set_accelerator_manufacturers(
                                crate::protocol_serde::shape_accelerator_manufacturer_set::de_accelerator_manufacturer_set(tokens)?,
                            );
                        }
                        "acceleratorNames" => {
                            builder =
                                builder.set_accelerator_names(crate::protocol_serde::shape_accelerator_name_set::de_accelerator_name_set(tokens)?);
                        }
                        "acceleratorTotalMemoryMiB" => {
                            builder = builder.set_accelerator_total_memory_mib(
                                crate::protocol_serde::shape_accelerator_total_memory_mib_request::de_accelerator_total_memory_mib_request(tokens)?,
                            );
                        }
                        "networkBandwidthGbps" => {
                            builder = builder.set_network_bandwidth_gbps(
                                crate::protocol_serde::shape_network_bandwidth_gbps_request::de_network_bandwidth_gbps_request(tokens)?,
                            );
                        }
                        "allowedInstanceTypes" => {
                            builder = builder.set_allowed_instance_types(
                                crate::protocol_serde::shape_allowed_instance_type_set::de_allowed_instance_type_set(tokens)?,
                            );
                        }
                        "maxSpotPriceAsPercentageOfOptimalOnDemandPrice" => {
                            builder = builder.set_max_spot_price_as_percentage_of_optimal_on_demand_price(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::instance_requirements_request_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
