// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_register_task_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::register_task_definition::RegisterTaskDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.family {
        object.key("family").string(var_1.as_str());
    }
    if let Some(var_2) = &input.task_role_arn {
        object.key("taskRoleArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.network_mode {
        object.key("networkMode").string(var_4.as_str());
    }
    if let Some(var_5) = &input.container_definitions {
        let mut array_6 = object.key("containerDefinitions").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_container_definition::ser_container_definition(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.volumes {
        let mut array_10 = object.key("volumes").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_volume::ser_volume(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.placement_constraints {
        let mut array_14 = object.key("placementConstraints").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_task_definition_placement_constraint::ser_task_definition_placement_constraint(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.requires_compatibilities {
        let mut array_18 = object.key("requiresCompatibilities").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.cpu {
        object.key("cpu").string(var_20.as_str());
    }
    if let Some(var_21) = &input.memory {
        object.key("memory").string(var_21.as_str());
    }
    if let Some(var_22) = &input.tags {
        let mut array_23 = object.key("tags").start_array();
        for item_24 in var_22 {
            {
                #[allow(unused_mut)]
                let mut object_25 = array_23.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.pid_mode {
        object.key("pidMode").string(var_26.as_str());
    }
    if let Some(var_27) = &input.ipc_mode {
        object.key("ipcMode").string(var_27.as_str());
    }
    if let Some(var_28) = &input.proxy_configuration {
        #[allow(unused_mut)]
        let mut object_29 = object.key("proxyConfiguration").start_object();
        crate::protocol_serde::shape_proxy_configuration::ser_proxy_configuration(
            &mut object_29,
            var_28,
        )?;
        object_29.finish();
    }
    if let Some(var_30) = &input.inference_accelerators {
        let mut array_31 = object.key("inferenceAccelerators").start_array();
        for item_32 in var_30 {
            {
                #[allow(unused_mut)]
                let mut object_33 = array_31.value().start_object();
                crate::protocol_serde::shape_inference_accelerator::ser_inference_accelerator(
                    &mut object_33,
                    item_32,
                )?;
                object_33.finish();
            }
        }
        array_31.finish();
    }
    if let Some(var_34) = &input.ephemeral_storage {
        #[allow(unused_mut)]
        let mut object_35 = object.key("ephemeralStorage").start_object();
        crate::protocol_serde::shape_ephemeral_storage::ser_ephemeral_storage(
            &mut object_35,
            var_34,
        )?;
        object_35.finish();
    }
    if let Some(var_36) = &input.runtime_platform {
        #[allow(unused_mut)]
        let mut object_37 = object.key("runtimePlatform").start_object();
        crate::protocol_serde::shape_runtime_platform::ser_runtime_platform(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    Ok(())
}
