// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_deployment_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DeploymentConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.deployment_circuit_breaker {
        #[allow(unused_mut)]
        let mut object_2 = object.key("deploymentCircuitBreaker").start_object();
        crate::protocol_serde::shape_deployment_circuit_breaker::ser_deployment_circuit_breaker(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.maximum_percent {
        object.key("maximumPercent").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.minimum_healthy_percent {
        object.key("minimumHealthyPercent").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.alarms {
        #[allow(unused_mut)]
        let mut object_6 = object.key("alarms").start_object();
        crate::protocol_serde::shape_deployment_alarms::ser_deployment_alarms(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.strategy {
        object.key("strategy").string(var_7.as_str());
    }
    if let Some(var_8) = &input.bake_time_in_minutes {
        object.key("bakeTimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.lifecycle_hooks {
        let mut array_10 = object.key("lifecycleHooks").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_deployment_lifecycle_hook::ser_deployment_lifecycle_hook(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.linear_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("linearConfiguration").start_object();
        crate::protocol_serde::shape_linear_configuration::ser_linear_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.canary_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("canaryConfiguration").start_object();
        crate::protocol_serde::shape_canary_configuration::ser_canary_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}

pub(crate) fn de_deployment_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::DeploymentConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DeploymentConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "deploymentCircuitBreaker" => {
                            builder = builder.set_deployment_circuit_breaker(
                                crate::protocol_serde::shape_deployment_circuit_breaker::de_deployment_circuit_breaker(tokens)?,
                            );
                        }
                        "maximumPercent" => {
                            builder = builder.set_maximum_percent(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "minimumHealthyPercent" => {
                            builder = builder.set_minimum_healthy_percent(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "alarms" => {
                            builder = builder.set_alarms(crate::protocol_serde::shape_deployment_alarms::de_deployment_alarms(tokens)?);
                        }
                        "strategy" => {
                            builder = builder.set_strategy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DeploymentStrategy::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "bakeTimeInMinutes" => {
                            builder = builder.set_bake_time_in_minutes(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "lifecycleHooks" => {
                            builder = builder.set_lifecycle_hooks(
                                crate::protocol_serde::shape_deployment_lifecycle_hook_list::de_deployment_lifecycle_hook_list(tokens)?,
                            );
                        }
                        "linearConfiguration" => {
                            builder =
                                builder.set_linear_configuration(crate::protocol_serde::shape_linear_configuration::de_linear_configuration(tokens)?);
                        }
                        "canaryConfiguration" => {
                            builder =
                                builder.set_canary_configuration(crate::protocol_serde::shape_canary_configuration::de_canary_configuration(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
