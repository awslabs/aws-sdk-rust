// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_task_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TaskOverride,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.container_overrides {
        let mut array_2 = object.key("containerOverrides").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_container_override::ser_container_override(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.cpu {
        object.key("cpu").string(var_5.as_str());
    }
    if let Some(var_6) = &input.inference_accelerator_overrides {
        let mut array_7 = object.key("inferenceAcceleratorOverrides").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_inference_accelerator_override::ser_inference_accelerator_override(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.memory {
        object.key("memory").string(var_11.as_str());
    }
    if let Some(var_12) = &input.task_role_arn {
        object.key("taskRoleArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.ephemeral_storage {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ephemeralStorage").start_object();
        crate::protocol_serde::shape_ephemeral_storage::ser_ephemeral_storage(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_task_override<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::TaskOverride>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TaskOverrideBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "containerOverrides" => {
                                builder = builder.set_container_overrides(
                                    crate::protocol_serde::shape_container_overrides::de_container_overrides(tokens)?
                                );
                            }
                            "cpu" => {
                                builder = builder.set_cpu(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "inferenceAcceleratorOverrides" => {
                                builder = builder.set_inference_accelerator_overrides(
                                    crate::protocol_serde::shape_inference_accelerator_overrides::de_inference_accelerator_overrides(tokens)?
                                );
                            }
                            "executionRoleArn" => {
                                builder = builder.set_execution_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "memory" => {
                                builder = builder.set_memory(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "taskRoleArn" => {
                                builder = builder.set_task_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ephemeralStorage" => {
                                builder = builder.set_ephemeral_storage(
                                    crate::protocol_serde::shape_ephemeral_storage::de_ephemeral_storage(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
