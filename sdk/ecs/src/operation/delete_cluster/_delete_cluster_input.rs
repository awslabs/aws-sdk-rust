// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteClusterInput {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster to delete.</p>
    #[doc(hidden)]
    pub cluster: std::option::Option<std::string::String>,
}
impl DeleteClusterInput {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster to delete.</p>
    pub fn cluster(&self) -> std::option::Option<&str> {
        self.cluster.as_deref()
    }
}
impl DeleteClusterInput {
    /// Creates a new builder-style object to manufacture [`DeleteClusterInput`](crate::operation::delete_cluster::DeleteClusterInput).
    pub fn builder() -> crate::operation::delete_cluster::builders::DeleteClusterInputBuilder {
        crate::operation::delete_cluster::builders::DeleteClusterInputBuilder::default()
    }
}

/// A builder for [`DeleteClusterInput`](crate::operation::delete_cluster::DeleteClusterInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteClusterInputBuilder {
    pub(crate) cluster: std::option::Option<std::string::String>,
}
impl DeleteClusterInputBuilder {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster to delete.</p>
    pub fn cluster(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster = Some(input.into());
        self
    }
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster to delete.</p>
    pub fn set_cluster(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteClusterInput`](crate::operation::delete_cluster::DeleteClusterInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_cluster::DeleteClusterInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_cluster::DeleteClusterInput {
            cluster: self.cluster,
        })
    }
}
