// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateContainerAgentInput {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that your container instance is running on. If you do not specify a cluster, the default cluster is assumed.</p>
    pub cluster: ::std::option::Option<::std::string::String>,
    /// <p>The container instance ID or full ARN entries for the container instance where you would like to update the Amazon ECS container agent.</p>
    pub container_instance: ::std::option::Option<::std::string::String>,
}
impl UpdateContainerAgentInput {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that your container instance is running on. If you do not specify a cluster, the default cluster is assumed.</p>
    pub fn cluster(&self) -> ::std::option::Option<&str> {
        self.cluster.as_deref()
    }
    /// <p>The container instance ID or full ARN entries for the container instance where you would like to update the Amazon ECS container agent.</p>
    pub fn container_instance(&self) -> ::std::option::Option<&str> {
        self.container_instance.as_deref()
    }
}
impl UpdateContainerAgentInput {
    /// Creates a new builder-style object to manufacture [`UpdateContainerAgentInput`](crate::operation::update_container_agent::UpdateContainerAgentInput).
    pub fn builder() -> crate::operation::update_container_agent::builders::UpdateContainerAgentInputBuilder {
        crate::operation::update_container_agent::builders::UpdateContainerAgentInputBuilder::default()
    }
}

/// A builder for [`UpdateContainerAgentInput`](crate::operation::update_container_agent::UpdateContainerAgentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateContainerAgentInputBuilder {
    pub(crate) cluster: ::std::option::Option<::std::string::String>,
    pub(crate) container_instance: ::std::option::Option<::std::string::String>,
}
impl UpdateContainerAgentInputBuilder {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that your container instance is running on. If you do not specify a cluster, the default cluster is assumed.</p>
    pub fn cluster(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that your container instance is running on. If you do not specify a cluster, the default cluster is assumed.</p>
    pub fn set_cluster(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster = input;
        self
    }
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that your container instance is running on. If you do not specify a cluster, the default cluster is assumed.</p>
    pub fn get_cluster(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster
    }
    /// <p>The container instance ID or full ARN entries for the container instance where you would like to update the Amazon ECS container agent.</p>
    /// This field is required.
    pub fn container_instance(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_instance = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The container instance ID or full ARN entries for the container instance where you would like to update the Amazon ECS container agent.</p>
    pub fn set_container_instance(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_instance = input;
        self
    }
    /// <p>The container instance ID or full ARN entries for the container instance where you would like to update the Amazon ECS container agent.</p>
    pub fn get_container_instance(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_instance
    }
    /// Consumes the builder and constructs a [`UpdateContainerAgentInput`](crate::operation::update_container_agent::UpdateContainerAgentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_container_agent::UpdateContainerAgentInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_container_agent::UpdateContainerAgentInput {
            cluster: self.cluster,
            container_instance: self.container_instance,
        })
    }
}
