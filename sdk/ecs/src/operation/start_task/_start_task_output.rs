// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartTaskOutput {
    /// <p>A full description of the tasks that were started. Each task that was successfully placed on your container instances is described.</p>
    pub tasks: ::std::option::Option<::std::vec::Vec<crate::types::Task>>,
    /// <p>Any failures associated with the call.</p>
    pub failures: ::std::option::Option<::std::vec::Vec<crate::types::Failure>>,
    _request_id: Option<String>,
}
impl StartTaskOutput {
    /// <p>A full description of the tasks that were started. Each task that was successfully placed on your container instances is described.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tasks.is_none()`.
    pub fn tasks(&self) -> &[crate::types::Task] {
        self.tasks.as_deref().unwrap_or_default()
    }
    /// <p>Any failures associated with the call.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failures.is_none()`.
    pub fn failures(&self) -> &[crate::types::Failure] {
        self.failures.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for StartTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartTaskOutput {
    /// Creates a new builder-style object to manufacture [`StartTaskOutput`](crate::operation::start_task::StartTaskOutput).
    pub fn builder() -> crate::operation::start_task::builders::StartTaskOutputBuilder {
        crate::operation::start_task::builders::StartTaskOutputBuilder::default()
    }
}

/// A builder for [`StartTaskOutput`](crate::operation::start_task::StartTaskOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartTaskOutputBuilder {
    pub(crate) tasks: ::std::option::Option<::std::vec::Vec<crate::types::Task>>,
    pub(crate) failures: ::std::option::Option<::std::vec::Vec<crate::types::Failure>>,
    _request_id: Option<String>,
}
impl StartTaskOutputBuilder {
    /// Appends an item to `tasks`.
    ///
    /// To override the contents of this collection use [`set_tasks`](Self::set_tasks).
    ///
    /// <p>A full description of the tasks that were started. Each task that was successfully placed on your container instances is described.</p>
    pub fn tasks(mut self, input: crate::types::Task) -> Self {
        let mut v = self.tasks.unwrap_or_default();
        v.push(input);
        self.tasks = ::std::option::Option::Some(v);
        self
    }
    /// <p>A full description of the tasks that were started. Each task that was successfully placed on your container instances is described.</p>
    pub fn set_tasks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Task>>) -> Self {
        self.tasks = input;
        self
    }
    /// <p>A full description of the tasks that were started. Each task that was successfully placed on your container instances is described.</p>
    pub fn get_tasks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Task>> {
        &self.tasks
    }
    /// Appends an item to `failures`.
    ///
    /// To override the contents of this collection use [`set_failures`](Self::set_failures).
    ///
    /// <p>Any failures associated with the call.</p>
    pub fn failures(mut self, input: crate::types::Failure) -> Self {
        let mut v = self.failures.unwrap_or_default();
        v.push(input);
        self.failures = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any failures associated with the call.</p>
    pub fn set_failures(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Failure>>) -> Self {
        self.failures = input;
        self
    }
    /// <p>Any failures associated with the call.</p>
    pub fn get_failures(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Failure>> {
        &self.failures
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartTaskOutput`](crate::operation::start_task::StartTaskOutput).
    pub fn build(self) -> crate::operation::start_task::StartTaskOutput {
        crate::operation::start_task::StartTaskOutput {
            tasks: self.tasks,
            failures: self.failures,
            _request_id: self._request_id,
        }
    }
}
