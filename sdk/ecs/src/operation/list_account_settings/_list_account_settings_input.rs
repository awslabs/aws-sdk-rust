// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAccountSettingsInput {
    /// <p>The name of the account setting you want to list the settings for.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::SettingName>,
    /// <p>The value of the account settings to filter results with. You must also specify an account setting name to use this parameter.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this field is omitted, the account settings are listed only for the authenticated user.</p> <note>
    /// <p>Federated users assume the account setting of the root user and can't have explicit account settings set for them.</p>
    /// </note>
    #[doc(hidden)]
    pub principal_arn: std::option::Option<std::string::String>,
    /// <p>Determines whether to return the effective settings. If <code>true</code>, the account settings for the root user or the default setting for the <code>principalArn</code> are returned. If <code>false</code>, the account settings for the <code>principalArn</code> are returned if they're set. Otherwise, no account settings are returned.</p>
    #[doc(hidden)]
    pub effective_settings: bool,
    /// <p>The <code>nextToken</code> value returned from a <code>ListAccountSettings</code> request indicating that more results are available to fulfill the request and further calls will be needed. If <code>maxResults</code> was provided, it's possible the number of results to be fewer than <code>maxResults</code>.</p> <note>
    /// <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p>
    /// </note>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of account setting results returned by <code>ListAccountSettings</code> in paginated output. When this parameter is used, <code>ListAccountSettings</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListAccountSettings</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 10. If this parameter isn't used, then <code>ListAccountSettings</code> returns up to 10 results and a <code>nextToken</code> value if applicable.</p>
    #[doc(hidden)]
    pub max_results: i32,
}
impl ListAccountSettingsInput {
    /// <p>The name of the account setting you want to list the settings for.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::SettingName> {
        self.name.as_ref()
    }
    /// <p>The value of the account settings to filter results with. You must also specify an account setting name to use this parameter.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this field is omitted, the account settings are listed only for the authenticated user.</p> <note>
    /// <p>Federated users assume the account setting of the root user and can't have explicit account settings set for them.</p>
    /// </note>
    pub fn principal_arn(&self) -> std::option::Option<&str> {
        self.principal_arn.as_deref()
    }
    /// <p>Determines whether to return the effective settings. If <code>true</code>, the account settings for the root user or the default setting for the <code>principalArn</code> are returned. If <code>false</code>, the account settings for the <code>principalArn</code> are returned if they're set. Otherwise, no account settings are returned.</p>
    pub fn effective_settings(&self) -> bool {
        self.effective_settings
    }
    /// <p>The <code>nextToken</code> value returned from a <code>ListAccountSettings</code> request indicating that more results are available to fulfill the request and further calls will be needed. If <code>maxResults</code> was provided, it's possible the number of results to be fewer than <code>maxResults</code>.</p> <note>
    /// <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p>
    /// </note>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of account setting results returned by <code>ListAccountSettings</code> in paginated output. When this parameter is used, <code>ListAccountSettings</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListAccountSettings</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 10. If this parameter isn't used, then <code>ListAccountSettings</code> returns up to 10 results and a <code>nextToken</code> value if applicable.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
}
impl ListAccountSettingsInput {
    /// Creates a new builder-style object to manufacture [`ListAccountSettingsInput`](crate::operation::list_account_settings::ListAccountSettingsInput).
    pub fn builder(
    ) -> crate::operation::list_account_settings::builders::ListAccountSettingsInputBuilder {
        crate::operation::list_account_settings::builders::ListAccountSettingsInputBuilder::default(
        )
    }
}

/// A builder for [`ListAccountSettingsInput`](crate::operation::list_account_settings::ListAccountSettingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAccountSettingsInputBuilder {
    pub(crate) name: std::option::Option<crate::types::SettingName>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) principal_arn: std::option::Option<std::string::String>,
    pub(crate) effective_settings: std::option::Option<bool>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListAccountSettingsInputBuilder {
    /// <p>The name of the account setting you want to list the settings for.</p>
    pub fn name(mut self, input: crate::types::SettingName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The name of the account setting you want to list the settings for.</p>
    pub fn set_name(mut self, input: std::option::Option<crate::types::SettingName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The value of the account settings to filter results with. You must also specify an account setting name to use this parameter.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the account settings to filter results with. You must also specify an account setting name to use this parameter.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this field is omitted, the account settings are listed only for the authenticated user.</p> <note>
    /// <p>Federated users assume the account setting of the root user and can't have explicit account settings set for them.</p>
    /// </note>
    pub fn principal_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this field is omitted, the account settings are listed only for the authenticated user.</p> <note>
    /// <p>Federated users assume the account setting of the root user and can't have explicit account settings set for them.</p>
    /// </note>
    pub fn set_principal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_arn = input;
        self
    }
    /// <p>Determines whether to return the effective settings. If <code>true</code>, the account settings for the root user or the default setting for the <code>principalArn</code> are returned. If <code>false</code>, the account settings for the <code>principalArn</code> are returned if they're set. Otherwise, no account settings are returned.</p>
    pub fn effective_settings(mut self, input: bool) -> Self {
        self.effective_settings = Some(input);
        self
    }
    /// <p>Determines whether to return the effective settings. If <code>true</code>, the account settings for the root user or the default setting for the <code>principalArn</code> are returned. If <code>false</code>, the account settings for the <code>principalArn</code> are returned if they're set. Otherwise, no account settings are returned.</p>
    pub fn set_effective_settings(mut self, input: std::option::Option<bool>) -> Self {
        self.effective_settings = input;
        self
    }
    /// <p>The <code>nextToken</code> value returned from a <code>ListAccountSettings</code> request indicating that more results are available to fulfill the request and further calls will be needed. If <code>maxResults</code> was provided, it's possible the number of results to be fewer than <code>maxResults</code>.</p> <note>
    /// <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p>
    /// </note>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The <code>nextToken</code> value returned from a <code>ListAccountSettings</code> request indicating that more results are available to fulfill the request and further calls will be needed. If <code>maxResults</code> was provided, it's possible the number of results to be fewer than <code>maxResults</code>.</p> <note>
    /// <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p>
    /// </note>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of account setting results returned by <code>ListAccountSettings</code> in paginated output. When this parameter is used, <code>ListAccountSettings</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListAccountSettings</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 10. If this parameter isn't used, then <code>ListAccountSettings</code> returns up to 10 results and a <code>nextToken</code> value if applicable.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of account setting results returned by <code>ListAccountSettings</code> in paginated output. When this parameter is used, <code>ListAccountSettings</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListAccountSettings</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 10. If this parameter isn't used, then <code>ListAccountSettings</code> returns up to 10 results and a <code>nextToken</code> value if applicable.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAccountSettingsInput`](crate::operation::list_account_settings::ListAccountSettingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_account_settings::ListAccountSettingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_account_settings::ListAccountSettingsInput {
                name: self.name,
                value: self.value,
                principal_arn: self.principal_arn,
                effective_settings: self.effective_settings.unwrap_or_default(),
                next_token: self.next_token,
                max_results: self.max_results.unwrap_or_default(),
            },
        )
    }
}
