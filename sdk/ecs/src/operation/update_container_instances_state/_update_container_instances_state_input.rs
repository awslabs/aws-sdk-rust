// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateContainerInstancesStateInput {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to update. If you do not specify a cluster, the default cluster is assumed.</p>
    pub cluster: ::std::option::Option<::std::string::String>,
    /// <p>A list of up to 10 container instance IDs or full ARN entries.</p>
    pub container_instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The container instance state to update the container instance with. The only valid values for this action are <code>ACTIVE</code> and <code>DRAINING</code>. A container instance can only be updated to <code>DRAINING</code> status once it has reached an <code>ACTIVE</code> state. If a container instance is in <code>REGISTERING</code>, <code>DEREGISTERING</code>, or <code>REGISTRATION_FAILED</code> state you can describe the container instance but can't update the container instance state.</p>
    pub status: ::std::option::Option<crate::types::ContainerInstanceStatus>,
}
impl UpdateContainerInstancesStateInput {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to update. If you do not specify a cluster, the default cluster is assumed.</p>
    pub fn cluster(&self) -> ::std::option::Option<&str> {
        self.cluster.as_deref()
    }
    /// <p>A list of up to 10 container instance IDs or full ARN entries.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_instances.is_none()`.
    pub fn container_instances(&self) -> &[::std::string::String] {
        self.container_instances.as_deref().unwrap_or_default()
    }
    /// <p>The container instance state to update the container instance with. The only valid values for this action are <code>ACTIVE</code> and <code>DRAINING</code>. A container instance can only be updated to <code>DRAINING</code> status once it has reached an <code>ACTIVE</code> state. If a container instance is in <code>REGISTERING</code>, <code>DEREGISTERING</code>, or <code>REGISTRATION_FAILED</code> state you can describe the container instance but can't update the container instance state.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ContainerInstanceStatus> {
        self.status.as_ref()
    }
}
impl UpdateContainerInstancesStateInput {
    /// Creates a new builder-style object to manufacture [`UpdateContainerInstancesStateInput`](crate::operation::update_container_instances_state::UpdateContainerInstancesStateInput).
    pub fn builder() -> crate::operation::update_container_instances_state::builders::UpdateContainerInstancesStateInputBuilder {
        crate::operation::update_container_instances_state::builders::UpdateContainerInstancesStateInputBuilder::default()
    }
}

/// A builder for [`UpdateContainerInstancesStateInput`](crate::operation::update_container_instances_state::UpdateContainerInstancesStateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateContainerInstancesStateInputBuilder {
    pub(crate) cluster: ::std::option::Option<::std::string::String>,
    pub(crate) container_instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::ContainerInstanceStatus>,
}
impl UpdateContainerInstancesStateInputBuilder {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to update. If you do not specify a cluster, the default cluster is assumed.</p>
    pub fn cluster(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to update. If you do not specify a cluster, the default cluster is assumed.</p>
    pub fn set_cluster(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster = input;
        self
    }
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to update. If you do not specify a cluster, the default cluster is assumed.</p>
    pub fn get_cluster(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster
    }
    /// Appends an item to `container_instances`.
    ///
    /// To override the contents of this collection use [`set_container_instances`](Self::set_container_instances).
    ///
    /// <p>A list of up to 10 container instance IDs or full ARN entries.</p>
    pub fn container_instances(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.container_instances.unwrap_or_default();
        v.push(input.into());
        self.container_instances = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of up to 10 container instance IDs or full ARN entries.</p>
    pub fn set_container_instances(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.container_instances = input;
        self
    }
    /// <p>A list of up to 10 container instance IDs or full ARN entries.</p>
    pub fn get_container_instances(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.container_instances
    }
    /// <p>The container instance state to update the container instance with. The only valid values for this action are <code>ACTIVE</code> and <code>DRAINING</code>. A container instance can only be updated to <code>DRAINING</code> status once it has reached an <code>ACTIVE</code> state. If a container instance is in <code>REGISTERING</code>, <code>DEREGISTERING</code>, or <code>REGISTRATION_FAILED</code> state you can describe the container instance but can't update the container instance state.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ContainerInstanceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container instance state to update the container instance with. The only valid values for this action are <code>ACTIVE</code> and <code>DRAINING</code>. A container instance can only be updated to <code>DRAINING</code> status once it has reached an <code>ACTIVE</code> state. If a container instance is in <code>REGISTERING</code>, <code>DEREGISTERING</code>, or <code>REGISTRATION_FAILED</code> state you can describe the container instance but can't update the container instance state.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ContainerInstanceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The container instance state to update the container instance with. The only valid values for this action are <code>ACTIVE</code> and <code>DRAINING</code>. A container instance can only be updated to <code>DRAINING</code> status once it has reached an <code>ACTIVE</code> state. If a container instance is in <code>REGISTERING</code>, <code>DEREGISTERING</code>, or <code>REGISTRATION_FAILED</code> state you can describe the container instance but can't update the container instance state.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ContainerInstanceStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`UpdateContainerInstancesStateInput`](crate::operation::update_container_instances_state::UpdateContainerInstancesStateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_container_instances_state::UpdateContainerInstancesStateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_container_instances_state::UpdateContainerInstancesStateInput {
            cluster: self.cluster,
            container_instances: self.container_instances,
            status: self.status,
        })
    }
}
