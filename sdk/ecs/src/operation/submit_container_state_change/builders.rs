// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::submit_container_state_change::_submit_container_state_change_output::SubmitContainerStateChangeOutputBuilder;

pub use crate::operation::submit_container_state_change::_submit_container_state_change_input::SubmitContainerStateChangeInputBuilder;

/// Fluent builder constructing a request to `SubmitContainerStateChange`.
///
/// <note>
/// <p>This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.</p>
/// </note>
/// <p>Sent to acknowledge that a container changed states.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SubmitContainerStateChangeFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::submit_container_state_change::builders::SubmitContainerStateChangeInputBuilder
            }
impl SubmitContainerStateChangeFluentBuilder {
    /// Creates a new `SubmitContainerStateChange`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::submit_container_state_change::SubmitContainerStateChange,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::submit_container_state_change::SubmitContainerStateChangeError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::submit_container_state_change::SubmitContainerStateChangeOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::submit_container_state_change::SubmitContainerStateChangeError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The short name or full ARN of the cluster that hosts the container.</p>
    pub fn cluster(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster(input.into());
        self
    }
    /// <p>The short name or full ARN of the cluster that hosts the container.</p>
    pub fn set_cluster(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_cluster(input);
        self
    }
    /// <p>The task ID or full Amazon Resource Name (ARN) of the task that hosts the container.</p>
    pub fn task(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.task(input.into());
        self
    }
    /// <p>The task ID or full Amazon Resource Name (ARN) of the task that hosts the container.</p>
    pub fn set_task(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_task(input);
        self
    }
    /// <p>The name of the container.</p>
    pub fn container_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.container_name(input.into());
        self
    }
    /// <p>The name of the container.</p>
    pub fn set_container_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_container_name(input);
        self
    }
    /// <p>The ID of the Docker container.</p>
    pub fn runtime_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.runtime_id(input.into());
        self
    }
    /// <p>The ID of the Docker container.</p>
    pub fn set_runtime_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_runtime_id(input);
        self
    }
    /// <p>The status of the state change request.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.status(input.into());
        self
    }
    /// <p>The status of the state change request.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The exit code that's returned for the state change request.</p>
    pub fn exit_code(mut self, input: i32) -> Self {
        self.inner = self.inner.exit_code(input);
        self
    }
    /// <p>The exit code that's returned for the state change request.</p>
    pub fn set_exit_code(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_exit_code(input);
        self
    }
    /// <p>The reason for the state change request.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reason(input.into());
        self
    }
    /// <p>The reason for the state change request.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
    /// Appends an item to `networkBindings`.
    ///
    /// To override the contents of this collection use [`set_network_bindings`](Self::set_network_bindings).
    ///
    /// <p>The network bindings of the container.</p>
    pub fn network_bindings(mut self, input: crate::types::NetworkBinding) -> Self {
        self.inner = self.inner.network_bindings(input);
        self
    }
    /// <p>The network bindings of the container.</p>
    pub fn set_network_bindings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NetworkBinding>>,
    ) -> Self {
        self.inner = self.inner.set_network_bindings(input);
        self
    }
}
