// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn attribute_correct_errors(mut builder: crate::types::builders::AttributeBuilder) -> crate::types::builders::AttributeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_scaling_group_provider_correct_errors(
    mut builder: crate::types::builders::AutoScalingGroupProviderBuilder,
) -> crate::types::builders::AutoScalingGroupProviderBuilder {
    if builder.auto_scaling_group_arn.is_none() {
        builder.auto_scaling_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn deployment_controller_correct_errors(
    mut builder: crate::types::builders::DeploymentControllerBuilder,
) -> crate::types::builders::DeploymentControllerBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DeploymentControllerType>().ok()
    }
    builder
}

pub(crate) fn ephemeral_storage_correct_errors(
    mut builder: crate::types::builders::EphemeralStorageBuilder,
) -> crate::types::builders::EphemeralStorageBuilder {
    if builder.size_in_gib.is_none() {
        builder.size_in_gib = Some(Default::default())
    }
    builder
}

pub(crate) fn proxy_configuration_correct_errors(
    mut builder: crate::types::builders::ProxyConfigurationBuilder,
) -> crate::types::builders::ProxyConfigurationBuilder {
    if builder.container_name.is_none() {
        builder.container_name = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_vpc_configuration_correct_errors(
    mut builder: crate::types::builders::AwsVpcConfigurationBuilder,
) -> crate::types::builders::AwsVpcConfigurationBuilder {
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn capacity_provider_strategy_item_correct_errors(
    mut builder: crate::types::builders::CapacityProviderStrategyItemBuilder,
) -> crate::types::builders::CapacityProviderStrategyItemBuilder {
    if builder.capacity_provider.is_none() {
        builder.capacity_provider = Some(Default::default())
    }
    builder
}

pub(crate) fn deployment_alarms_correct_errors(
    mut builder: crate::types::builders::DeploymentAlarmsBuilder,
) -> crate::types::builders::DeploymentAlarmsBuilder {
    if builder.alarm_names.is_none() {
        builder.alarm_names = Some(Default::default())
    }
    if builder.enable.is_none() {
        builder.enable = Some(Default::default())
    }
    if builder.rollback.is_none() {
        builder.rollback = Some(Default::default())
    }
    builder
}

pub(crate) fn deployment_circuit_breaker_correct_errors(
    mut builder: crate::types::builders::DeploymentCircuitBreakerBuilder,
) -> crate::types::builders::DeploymentCircuitBreakerBuilder {
    if builder.enable.is_none() {
        builder.enable = Some(Default::default())
    }
    if builder.rollback.is_none() {
        builder.rollback = Some(Default::default())
    }
    builder
}

pub(crate) fn inference_accelerator_correct_errors(
    mut builder: crate::types::builders::InferenceAcceleratorBuilder,
) -> crate::types::builders::InferenceAcceleratorBuilder {
    if builder.device_name.is_none() {
        builder.device_name = Some(Default::default())
    }
    if builder.device_type.is_none() {
        builder.device_type = Some(Default::default())
    }
    builder
}

pub(crate) fn efs_volume_configuration_correct_errors(
    mut builder: crate::types::builders::EfsVolumeConfigurationBuilder,
) -> crate::types::builders::EfsVolumeConfigurationBuilder {
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    builder
}

pub(crate) fn f_sx_windows_file_server_volume_configuration_correct_errors(
    mut builder: crate::types::builders::FSxWindowsFileServerVolumeConfigurationBuilder,
) -> crate::types::builders::FSxWindowsFileServerVolumeConfigurationBuilder {
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.root_directory.is_none() {
        builder.root_directory = Some(Default::default())
    }
    if builder.authorization_config.is_none() {
        builder.authorization_config = {
            let builder = crate::types::builders::FSxWindowsFileServerAuthorizationConfigBuilder::default();
            crate::serde_util::f_sx_windows_file_server_authorization_config_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn firelens_configuration_correct_errors(
    mut builder: crate::types::builders::FirelensConfigurationBuilder,
) -> crate::types::builders::FirelensConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FirelensConfigurationType>().ok()
    }
    builder
}

pub(crate) fn health_check_correct_errors(mut builder: crate::types::builders::HealthCheckBuilder) -> crate::types::builders::HealthCheckBuilder {
    if builder.command.is_none() {
        builder.command = Some(Default::default())
    }
    builder
}

pub(crate) fn log_configuration_correct_errors(
    mut builder: crate::types::builders::LogConfigurationBuilder,
) -> crate::types::builders::LogConfigurationBuilder {
    if builder.log_driver.is_none() {
        builder.log_driver = "no value was set".parse::<crate::types::LogDriver>().ok()
    }
    builder
}

pub(crate) fn repository_credentials_correct_errors(
    mut builder: crate::types::builders::RepositoryCredentialsBuilder,
) -> crate::types::builders::RepositoryCredentialsBuilder {
    if builder.credentials_parameter.is_none() {
        builder.credentials_parameter = Some(Default::default())
    }
    builder
}

pub(crate) fn service_connect_configuration_correct_errors(
    mut builder: crate::types::builders::ServiceConnectConfigurationBuilder,
) -> crate::types::builders::ServiceConnectConfigurationBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn container_dependency_correct_errors(
    mut builder: crate::types::builders::ContainerDependencyBuilder,
) -> crate::types::builders::ContainerDependencyBuilder {
    if builder.container_name.is_none() {
        builder.container_name = Some(Default::default())
    }
    if builder.condition.is_none() {
        builder.condition = "no value was set".parse::<crate::types::ContainerCondition>().ok()
    }
    builder
}

pub(crate) fn environment_file_correct_errors(
    mut builder: crate::types::builders::EnvironmentFileBuilder,
) -> crate::types::builders::EnvironmentFileBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EnvironmentFileType>().ok()
    }
    builder
}

pub(crate) fn f_sx_windows_file_server_authorization_config_correct_errors(
    mut builder: crate::types::builders::FSxWindowsFileServerAuthorizationConfigBuilder,
) -> crate::types::builders::FSxWindowsFileServerAuthorizationConfigBuilder {
    if builder.credentials_parameter.is_none() {
        builder.credentials_parameter = Some(Default::default())
    }
    if builder.domain.is_none() {
        builder.domain = Some(Default::default())
    }
    builder
}

pub(crate) fn host_entry_correct_errors(mut builder: crate::types::builders::HostEntryBuilder) -> crate::types::builders::HostEntryBuilder {
    if builder.hostname.is_none() {
        builder.hostname = Some(Default::default())
    }
    if builder.ip_address.is_none() {
        builder.ip_address = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_requirement_correct_errors(
    mut builder: crate::types::builders::ResourceRequirementBuilder,
) -> crate::types::builders::ResourceRequirementBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn secret_correct_errors(mut builder: crate::types::builders::SecretBuilder) -> crate::types::builders::SecretBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value_from.is_none() {
        builder.value_from = Some(Default::default())
    }
    builder
}

pub(crate) fn ulimit_correct_errors(mut builder: crate::types::builders::UlimitBuilder) -> crate::types::builders::UlimitBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::UlimitName>().ok()
    }
    if builder.soft_limit.is_none() {
        builder.soft_limit = Some(Default::default())
    }
    if builder.hard_limit.is_none() {
        builder.hard_limit = Some(Default::default())
    }
    builder
}

pub(crate) fn device_correct_errors(mut builder: crate::types::builders::DeviceBuilder) -> crate::types::builders::DeviceBuilder {
    if builder.host_path.is_none() {
        builder.host_path = Some(Default::default())
    }
    builder
}

pub(crate) fn service_connect_service_correct_errors(
    mut builder: crate::types::builders::ServiceConnectServiceBuilder,
) -> crate::types::builders::ServiceConnectServiceBuilder {
    if builder.port_name.is_none() {
        builder.port_name = Some(Default::default())
    }
    builder
}

pub(crate) fn tmpfs_correct_errors(mut builder: crate::types::builders::TmpfsBuilder) -> crate::types::builders::TmpfsBuilder {
    if builder.container_path.is_none() {
        builder.container_path = Some(Default::default())
    }
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    builder
}

pub(crate) fn service_connect_client_alias_correct_errors(
    mut builder: crate::types::builders::ServiceConnectClientAliasBuilder,
) -> crate::types::builders::ServiceConnectClientAliasBuilder {
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}
