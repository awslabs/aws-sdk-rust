// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>There was a conflict when you attempted to modify a SageMaker entity such as an <code>Experiment</code> or <code>Artifact</code>.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Resource being accessed is in use.</p>
    ResourceInUse(crate::types::error::ResourceInUse),
    /// <p> You have exceeded an SageMaker resource limit. For example, you might have too many training jobs created. </p>
    ResourceLimitExceeded(crate::types::error::ResourceLimitExceeded),
    /// <p>Resource being access is not found.</p>
    ResourceNotFound(crate::types::error::ResourceNotFound),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ResourceInUse(inner) => inner.fmt(f),
            Error::ResourceLimitExceeded(inner) => inner.fmt(f),
            Error::ResourceNotFound(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_association::AddAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_association::AddAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_association::AddAssociationError> for Error {
    fn from(err: crate::operation::add_association::AddAssociationError) -> Self {
        match err {
            crate::operation::add_association::AddAssociationError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::add_association::AddAssociationError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::add_association::AddAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::add_tags::AddTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::add_tags::AddTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_tags::AddTagsError> for Error {
    fn from(err: crate::operation::add_tags::AddTagsError) -> Self {
        match err {
            crate::operation::add_tags::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_trial_component::AssociateTrialComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_trial_component::AssociateTrialComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_trial_component::AssociateTrialComponentError> for Error {
    fn from(
        err: crate::operation::associate_trial_component::AssociateTrialComponentError,
    ) -> Self {
        match err {
            crate::operation::associate_trial_component::AssociateTrialComponentError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::associate_trial_component::AssociateTrialComponentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::associate_trial_component::AssociateTrialComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_describe_model_package::BatchDescribeModelPackageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_describe_model_package::BatchDescribeModelPackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_describe_model_package::BatchDescribeModelPackageError>
    for Error
{
    fn from(
        err: crate::operation::batch_describe_model_package::BatchDescribeModelPackageError,
    ) -> Self {
        match err {
            crate::operation::batch_describe_model_package::BatchDescribeModelPackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_action::CreateActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_action::CreateActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_action::CreateActionError> for Error {
    fn from(err: crate::operation::create_action::CreateActionError) -> Self {
        match err {
            crate::operation::create_action::CreateActionError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_action::CreateActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_algorithm::CreateAlgorithmError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_algorithm::CreateAlgorithmError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_algorithm::CreateAlgorithmError> for Error {
    fn from(err: crate::operation::create_algorithm::CreateAlgorithmError) -> Self {
        match err {
            crate::operation::create_algorithm::CreateAlgorithmError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_app::CreateAppError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_app::CreateAppError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_app::CreateAppError> for Error {
    fn from(err: crate::operation::create_app::CreateAppError) -> Self {
        match err {
            crate::operation::create_app::CreateAppError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::create_app::CreateAppError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_app::CreateAppError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_app_image_config::CreateAppImageConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_app_image_config::CreateAppImageConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_app_image_config::CreateAppImageConfigError> for Error {
    fn from(err: crate::operation::create_app_image_config::CreateAppImageConfigError) -> Self {
        match err {
            crate::operation::create_app_image_config::CreateAppImageConfigError::ResourceInUse(
                inner,
            ) => Error::ResourceInUse(inner),
            crate::operation::create_app_image_config::CreateAppImageConfigError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_artifact::CreateArtifactError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_artifact::CreateArtifactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_artifact::CreateArtifactError> for Error {
    fn from(err: crate::operation::create_artifact::CreateArtifactError) -> Self {
        match err {
            crate::operation::create_artifact::CreateArtifactError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_artifact::CreateArtifactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_auto_ml_job::CreateAutoMLJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_auto_ml_job::CreateAutoMLJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_auto_ml_job::CreateAutoMLJobError> for Error {
    fn from(err: crate::operation::create_auto_ml_job::CreateAutoMLJobError) -> Self {
        match err {
            crate::operation::create_auto_ml_job::CreateAutoMLJobError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::create_auto_ml_job::CreateAutoMLJobError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_auto_ml_job::CreateAutoMLJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_code_repository::CreateCodeRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_code_repository::CreateCodeRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_code_repository::CreateCodeRepositoryError> for Error {
    fn from(err: crate::operation::create_code_repository::CreateCodeRepositoryError) -> Self {
        match err {
            crate::operation::create_code_repository::CreateCodeRepositoryError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_compilation_job::CreateCompilationJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_compilation_job::CreateCompilationJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_compilation_job::CreateCompilationJobError> for Error {
    fn from(err: crate::operation::create_compilation_job::CreateCompilationJobError) -> Self {
        match err {
            crate::operation::create_compilation_job::CreateCompilationJobError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_compilation_job::CreateCompilationJobError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_compilation_job::CreateCompilationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_context::CreateContextError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_context::CreateContextError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_context::CreateContextError> for Error {
    fn from(err: crate::operation::create_context::CreateContextError) -> Self {
        match err {
            crate::operation::create_context::CreateContextError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_context::CreateContextError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionError>
    for Error
{
    fn from(
        err: crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionError,
    ) -> Self {
        match err {
            crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_device_fleet::CreateDeviceFleetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_device_fleet::CreateDeviceFleetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_device_fleet::CreateDeviceFleetError> for Error {
    fn from(err: crate::operation::create_device_fleet::CreateDeviceFleetError) -> Self {
        match err {
            crate::operation::create_device_fleet::CreateDeviceFleetError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_device_fleet::CreateDeviceFleetError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_device_fleet::CreateDeviceFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_domain::CreateDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_domain::CreateDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_domain::CreateDomainError> for Error {
    fn from(err: crate::operation::create_domain::CreateDomainError) -> Self {
        match err {
            crate::operation::create_domain::CreateDomainError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::create_domain::CreateDomainError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_domain::CreateDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlanError> for Error {
    fn from(
        err: crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlanError,
    ) -> Self {
        match err {
            crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlanError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_edge_deployment_stage::CreateEdgeDeploymentStageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_edge_deployment_stage::CreateEdgeDeploymentStageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_edge_deployment_stage::CreateEdgeDeploymentStageError>
    for Error
{
    fn from(
        err: crate::operation::create_edge_deployment_stage::CreateEdgeDeploymentStageError,
    ) -> Self {
        match err {
            crate::operation::create_edge_deployment_stage::CreateEdgeDeploymentStageError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_edge_deployment_stage::CreateEdgeDeploymentStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_edge_packaging_job::CreateEdgePackagingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_edge_packaging_job::CreateEdgePackagingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_edge_packaging_job::CreateEdgePackagingJobError> for Error {
    fn from(err: crate::operation::create_edge_packaging_job::CreateEdgePackagingJobError) -> Self {
        match err {
            crate::operation::create_edge_packaging_job::CreateEdgePackagingJobError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_edge_packaging_job::CreateEdgePackagingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_endpoint::CreateEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_endpoint::CreateEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_endpoint::CreateEndpointError> for Error {
    fn from(err: crate::operation::create_endpoint::CreateEndpointError) -> Self {
        match err {
            crate::operation::create_endpoint::CreateEndpointError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_endpoint::CreateEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_endpoint_config::CreateEndpointConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_endpoint_config::CreateEndpointConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_endpoint_config::CreateEndpointConfigError> for Error {
    fn from(err: crate::operation::create_endpoint_config::CreateEndpointConfigError) -> Self {
        match err {
            crate::operation::create_endpoint_config::CreateEndpointConfigError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_endpoint_config::CreateEndpointConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_experiment::CreateExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_experiment::CreateExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_experiment::CreateExperimentError> for Error {
    fn from(err: crate::operation::create_experiment::CreateExperimentError) -> Self {
        match err {
            crate::operation::create_experiment::CreateExperimentError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_experiment::CreateExperimentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_feature_group::CreateFeatureGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_feature_group::CreateFeatureGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_feature_group::CreateFeatureGroupError> for Error {
    fn from(err: crate::operation::create_feature_group::CreateFeatureGroupError) -> Self {
        match err {
            crate::operation::create_feature_group::CreateFeatureGroupError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_feature_group::CreateFeatureGroupError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_feature_group::CreateFeatureGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_flow_definition::CreateFlowDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_flow_definition::CreateFlowDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_flow_definition::CreateFlowDefinitionError> for Error {
    fn from(err: crate::operation::create_flow_definition::CreateFlowDefinitionError) -> Self {
        match err {
            crate::operation::create_flow_definition::CreateFlowDefinitionError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_flow_definition::CreateFlowDefinitionError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_flow_definition::CreateFlowDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_hub::CreateHubError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_hub::CreateHubError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_hub::CreateHubError> for Error {
    fn from(err: crate::operation::create_hub::CreateHubError) -> Self {
        match err {
            crate::operation::create_hub::CreateHubError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::create_hub::CreateHubError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_hub::CreateHubError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_human_task_ui::CreateHumanTaskUiError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_human_task_ui::CreateHumanTaskUiError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_human_task_ui::CreateHumanTaskUiError> for Error {
    fn from(err: crate::operation::create_human_task_ui::CreateHumanTaskUiError) -> Self {
        match err {
            crate::operation::create_human_task_ui::CreateHumanTaskUiError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_human_task_ui::CreateHumanTaskUiError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_human_task_ui::CreateHumanTaskUiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_hyper_parameter_tuning_job::CreateHyperParameterTuningJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_hyper_parameter_tuning_job::CreateHyperParameterTuningJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_hyper_parameter_tuning_job::CreateHyperParameterTuningJobError>
    for Error
{
    fn from(
        err: crate::operation::create_hyper_parameter_tuning_job::CreateHyperParameterTuningJobError,
    ) -> Self {
        match err {
            crate::operation::create_hyper_parameter_tuning_job::CreateHyperParameterTuningJobError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_hyper_parameter_tuning_job::CreateHyperParameterTuningJobError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_hyper_parameter_tuning_job::CreateHyperParameterTuningJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_image::CreateImageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_image::CreateImageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_image::CreateImageError> for Error {
    fn from(err: crate::operation::create_image::CreateImageError) -> Self {
        match err {
            crate::operation::create_image::CreateImageError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::create_image::CreateImageError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_image::CreateImageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_image_version::CreateImageVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_image_version::CreateImageVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_image_version::CreateImageVersionError> for Error {
    fn from(err: crate::operation::create_image_version::CreateImageVersionError) -> Self {
        match err {
            crate::operation::create_image_version::CreateImageVersionError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_image_version::CreateImageVersionError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_image_version::CreateImageVersionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::create_image_version::CreateImageVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_inference_experiment::CreateInferenceExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_inference_experiment::CreateInferenceExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_inference_experiment::CreateInferenceExperimentError> for Error {
    fn from(
        err: crate::operation::create_inference_experiment::CreateInferenceExperimentError,
    ) -> Self {
        match err {
            crate::operation::create_inference_experiment::CreateInferenceExperimentError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_inference_experiment::CreateInferenceExperimentError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_inference_experiment::CreateInferenceExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_inference_recommendations_job::CreateInferenceRecommendationsJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_inference_recommendations_job::CreateInferenceRecommendationsJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_inference_recommendations_job::CreateInferenceRecommendationsJobError> for Error {
    fn from(err: crate::operation::create_inference_recommendations_job::CreateInferenceRecommendationsJobError) -> Self {
        match err {
            crate::operation::create_inference_recommendations_job::CreateInferenceRecommendationsJobError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_inference_recommendations_job::CreateInferenceRecommendationsJobError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_inference_recommendations_job::CreateInferenceRecommendationsJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_labeling_job::CreateLabelingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_labeling_job::CreateLabelingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_labeling_job::CreateLabelingJobError> for Error {
    fn from(err: crate::operation::create_labeling_job::CreateLabelingJobError) -> Self {
        match err {
            crate::operation::create_labeling_job::CreateLabelingJobError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_labeling_job::CreateLabelingJobError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_labeling_job::CreateLabelingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_model::CreateModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_model::CreateModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model::CreateModelError> for Error {
    fn from(err: crate::operation::create_model::CreateModelError) -> Self {
        match err {
            crate::operation::create_model::CreateModelError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_model::CreateModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_model_bias_job_definition::CreateModelBiasJobDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_model_bias_job_definition::CreateModelBiasJobDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model_bias_job_definition::CreateModelBiasJobDefinitionError>
    for Error
{
    fn from(
        err: crate::operation::create_model_bias_job_definition::CreateModelBiasJobDefinitionError,
    ) -> Self {
        match err {
            crate::operation::create_model_bias_job_definition::CreateModelBiasJobDefinitionError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_model_bias_job_definition::CreateModelBiasJobDefinitionError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_model_bias_job_definition::CreateModelBiasJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_model_card::CreateModelCardError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_model_card::CreateModelCardError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model_card::CreateModelCardError> for Error {
    fn from(err: crate::operation::create_model_card::CreateModelCardError) -> Self {
        match err {
            crate::operation::create_model_card::CreateModelCardError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_model_card::CreateModelCardError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_model_card::CreateModelCardError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_model_card_export_job::CreateModelCardExportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_model_card_export_job::CreateModelCardExportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model_card_export_job::CreateModelCardExportJobError> for Error {
    fn from(
        err: crate::operation::create_model_card_export_job::CreateModelCardExportJobError,
    ) -> Self {
        match err {
            crate::operation::create_model_card_export_job::CreateModelCardExportJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_model_card_export_job::CreateModelCardExportJobError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_model_card_export_job::CreateModelCardExportJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::create_model_card_export_job::CreateModelCardExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_model_explainability_job_definition::CreateModelExplainabilityJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_model_explainability_job_definition::CreateModelExplainabilityJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_model_explainability_job_definition::CreateModelExplainabilityJobDefinitionError> for Error {
    fn from(err: crate::operation::create_model_explainability_job_definition::CreateModelExplainabilityJobDefinitionError) -> Self {
        match err {
            crate::operation::create_model_explainability_job_definition::CreateModelExplainabilityJobDefinitionError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_model_explainability_job_definition::CreateModelExplainabilityJobDefinitionError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_model_explainability_job_definition::CreateModelExplainabilityJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_model_package::CreateModelPackageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_model_package::CreateModelPackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model_package::CreateModelPackageError> for Error {
    fn from(err: crate::operation::create_model_package::CreateModelPackageError) -> Self {
        match err {
            crate::operation::create_model_package::CreateModelPackageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_model_package::CreateModelPackageError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_model_package::CreateModelPackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_model_package_group::CreateModelPackageGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_model_package_group::CreateModelPackageGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model_package_group::CreateModelPackageGroupError> for Error {
    fn from(
        err: crate::operation::create_model_package_group::CreateModelPackageGroupError,
    ) -> Self {
        match err {
            crate::operation::create_model_package_group::CreateModelPackageGroupError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_model_package_group::CreateModelPackageGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_model_quality_job_definition::CreateModelQualityJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_model_quality_job_definition::CreateModelQualityJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::create_model_quality_job_definition::CreateModelQualityJobDefinitionError,
    > for Error
{
    fn from(
        err: crate::operation::create_model_quality_job_definition::CreateModelQualityJobDefinitionError,
    ) -> Self {
        match err {
            crate::operation::create_model_quality_job_definition::CreateModelQualityJobDefinitionError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_model_quality_job_definition::CreateModelQualityJobDefinitionError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_model_quality_job_definition::CreateModelQualityJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_monitoring_schedule::CreateMonitoringScheduleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_monitoring_schedule::CreateMonitoringScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_monitoring_schedule::CreateMonitoringScheduleError> for Error {
    fn from(
        err: crate::operation::create_monitoring_schedule::CreateMonitoringScheduleError,
    ) -> Self {
        match err {
            crate::operation::create_monitoring_schedule::CreateMonitoringScheduleError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_monitoring_schedule::CreateMonitoringScheduleError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_monitoring_schedule::CreateMonitoringScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_notebook_instance::CreateNotebookInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_notebook_instance::CreateNotebookInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_notebook_instance::CreateNotebookInstanceError> for Error {
    fn from(err: crate::operation::create_notebook_instance::CreateNotebookInstanceError) -> Self {
        match err {
            crate::operation::create_notebook_instance::CreateNotebookInstanceError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_notebook_instance::CreateNotebookInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigError> for Error {
    fn from(err: crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigError) -> Self {
        match err {
            crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_pipeline::CreatePipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_pipeline::CreatePipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_pipeline::CreatePipelineError> for Error {
    fn from(err: crate::operation::create_pipeline::CreatePipelineError) -> Self {
        match err {
            crate::operation::create_pipeline::CreatePipelineError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_pipeline::CreatePipelineError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::create_pipeline::CreatePipelineError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlError> for Error {
    fn from(
        err: crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlError,
    ) -> Self {
        match err {
            crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_presigned_notebook_instance_url::CreatePresignedNotebookInstanceUrlError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_presigned_notebook_instance_url::CreatePresignedNotebookInstanceUrlError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_presigned_notebook_instance_url::CreatePresignedNotebookInstanceUrlError> for Error {
    fn from(err: crate::operation::create_presigned_notebook_instance_url::CreatePresignedNotebookInstanceUrlError) -> Self {
        match err {
            crate::operation::create_presigned_notebook_instance_url::CreatePresignedNotebookInstanceUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_processing_job::CreateProcessingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_processing_job::CreateProcessingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_processing_job::CreateProcessingJobError> for Error {
    fn from(err: crate::operation::create_processing_job::CreateProcessingJobError) -> Self {
        match err {
            crate::operation::create_processing_job::CreateProcessingJobError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_processing_job::CreateProcessingJobError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_processing_job::CreateProcessingJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::create_processing_job::CreateProcessingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_project::CreateProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_project::CreateProjectError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_project::CreateProjectError> for Error {
    fn from(err: crate::operation::create_project::CreateProjectError) -> Self {
        match err {
            crate::operation::create_project::CreateProjectError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_project::CreateProjectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_space::CreateSpaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_space::CreateSpaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_space::CreateSpaceError> for Error {
    fn from(err: crate::operation::create_space::CreateSpaceError) -> Self {
        match err {
            crate::operation::create_space::CreateSpaceError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::create_space::CreateSpaceError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_space::CreateSpaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_studio_lifecycle_config::CreateStudioLifecycleConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_studio_lifecycle_config::CreateStudioLifecycleConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_studio_lifecycle_config::CreateStudioLifecycleConfigError>
    for Error
{
    fn from(
        err: crate::operation::create_studio_lifecycle_config::CreateStudioLifecycleConfigError,
    ) -> Self {
        match err {
            crate::operation::create_studio_lifecycle_config::CreateStudioLifecycleConfigError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_studio_lifecycle_config::CreateStudioLifecycleConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_training_job::CreateTrainingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_training_job::CreateTrainingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_training_job::CreateTrainingJobError> for Error {
    fn from(err: crate::operation::create_training_job::CreateTrainingJobError) -> Self {
        match err {
            crate::operation::create_training_job::CreateTrainingJobError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_training_job::CreateTrainingJobError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_training_job::CreateTrainingJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::create_training_job::CreateTrainingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_transform_job::CreateTransformJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_transform_job::CreateTransformJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_transform_job::CreateTransformJobError> for Error {
    fn from(err: crate::operation::create_transform_job::CreateTransformJobError) -> Self {
        match err {
            crate::operation::create_transform_job::CreateTransformJobError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_transform_job::CreateTransformJobError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_transform_job::CreateTransformJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::create_transform_job::CreateTransformJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_trial::CreateTrialError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_trial::CreateTrialError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_trial::CreateTrialError> for Error {
    fn from(err: crate::operation::create_trial::CreateTrialError) -> Self {
        match err {
            crate::operation::create_trial::CreateTrialError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::create_trial::CreateTrialError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::create_trial::CreateTrialError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_trial_component::CreateTrialComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_trial_component::CreateTrialComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_trial_component::CreateTrialComponentError> for Error {
    fn from(err: crate::operation::create_trial_component::CreateTrialComponentError) -> Self {
        match err {
            crate::operation::create_trial_component::CreateTrialComponentError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_trial_component::CreateTrialComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_user_profile::CreateUserProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_user_profile::CreateUserProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_user_profile::CreateUserProfileError> for Error {
    fn from(err: crate::operation::create_user_profile::CreateUserProfileError) -> Self {
        match err {
            crate::operation::create_user_profile::CreateUserProfileError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::create_user_profile::CreateUserProfileError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_user_profile::CreateUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_workforce::CreateWorkforceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_workforce::CreateWorkforceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_workforce::CreateWorkforceError> for Error {
    fn from(err: crate::operation::create_workforce::CreateWorkforceError) -> Self {
        match err {
            crate::operation::create_workforce::CreateWorkforceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_workteam::CreateWorkteamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_workteam::CreateWorkteamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_workteam::CreateWorkteamError> for Error {
    fn from(err: crate::operation::create_workteam::CreateWorkteamError) -> Self {
        match err {
            crate::operation::create_workteam::CreateWorkteamError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::create_workteam::CreateWorkteamError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::create_workteam::CreateWorkteamError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_action::DeleteActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_action::DeleteActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_action::DeleteActionError> for Error {
    fn from(err: crate::operation::delete_action::DeleteActionError) -> Self {
        match err {
            crate::operation::delete_action::DeleteActionError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_action::DeleteActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_algorithm::DeleteAlgorithmError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_algorithm::DeleteAlgorithmError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_algorithm::DeleteAlgorithmError> for Error {
    fn from(err: crate::operation::delete_algorithm::DeleteAlgorithmError) -> Self {
        match err {
            crate::operation::delete_algorithm::DeleteAlgorithmError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_app::DeleteAppError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_app::DeleteAppError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_app::DeleteAppError> for Error {
    fn from(err: crate::operation::delete_app::DeleteAppError) -> Self {
        match err {
            crate::operation::delete_app::DeleteAppError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::delete_app::DeleteAppError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_app::DeleteAppError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_app_image_config::DeleteAppImageConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_app_image_config::DeleteAppImageConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_app_image_config::DeleteAppImageConfigError> for Error {
    fn from(err: crate::operation::delete_app_image_config::DeleteAppImageConfigError) -> Self {
        match err {
            crate::operation::delete_app_image_config::DeleteAppImageConfigError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_app_image_config::DeleteAppImageConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_artifact::DeleteArtifactError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_artifact::DeleteArtifactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_artifact::DeleteArtifactError> for Error {
    fn from(err: crate::operation::delete_artifact::DeleteArtifactError) -> Self {
        match err {
            crate::operation::delete_artifact::DeleteArtifactError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_artifact::DeleteArtifactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_association::DeleteAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_association::DeleteAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_association::DeleteAssociationError> for Error {
    fn from(err: crate::operation::delete_association::DeleteAssociationError) -> Self {
        match err {
            crate::operation::delete_association::DeleteAssociationError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::delete_association::DeleteAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_code_repository::DeleteCodeRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_code_repository::DeleteCodeRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_code_repository::DeleteCodeRepositoryError> for Error {
    fn from(err: crate::operation::delete_code_repository::DeleteCodeRepositoryError) -> Self {
        match err {
            crate::operation::delete_code_repository::DeleteCodeRepositoryError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_context::DeleteContextError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_context::DeleteContextError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_context::DeleteContextError> for Error {
    fn from(err: crate::operation::delete_context::DeleteContextError) -> Self {
        match err {
            crate::operation::delete_context::DeleteContextError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_context::DeleteContextError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_data_quality_job_definition::DeleteDataQualityJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_data_quality_job_definition::DeleteDataQualityJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_data_quality_job_definition::DeleteDataQualityJobDefinitionError>
    for Error
{
    fn from(
        err: crate::operation::delete_data_quality_job_definition::DeleteDataQualityJobDefinitionError,
    ) -> Self {
        match err {
            crate::operation::delete_data_quality_job_definition::DeleteDataQualityJobDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_data_quality_job_definition::DeleteDataQualityJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_device_fleet::DeleteDeviceFleetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_device_fleet::DeleteDeviceFleetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_device_fleet::DeleteDeviceFleetError> for Error {
    fn from(err: crate::operation::delete_device_fleet::DeleteDeviceFleetError) -> Self {
        match err {
            crate::operation::delete_device_fleet::DeleteDeviceFleetError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::delete_device_fleet::DeleteDeviceFleetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_domain::DeleteDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_domain::DeleteDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_domain::DeleteDomainError> for Error {
    fn from(err: crate::operation::delete_domain::DeleteDomainError) -> Self {
        match err {
            crate::operation::delete_domain::DeleteDomainError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_edge_deployment_plan::DeleteEdgeDeploymentPlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_edge_deployment_plan::DeleteEdgeDeploymentPlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_edge_deployment_plan::DeleteEdgeDeploymentPlanError> for Error {
    fn from(
        err: crate::operation::delete_edge_deployment_plan::DeleteEdgeDeploymentPlanError,
    ) -> Self {
        match err {
            crate::operation::delete_edge_deployment_plan::DeleteEdgeDeploymentPlanError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::delete_edge_deployment_plan::DeleteEdgeDeploymentPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_edge_deployment_stage::DeleteEdgeDeploymentStageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_edge_deployment_stage::DeleteEdgeDeploymentStageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_edge_deployment_stage::DeleteEdgeDeploymentStageError>
    for Error
{
    fn from(
        err: crate::operation::delete_edge_deployment_stage::DeleteEdgeDeploymentStageError,
    ) -> Self {
        match err {
            crate::operation::delete_edge_deployment_stage::DeleteEdgeDeploymentStageError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::delete_edge_deployment_stage::DeleteEdgeDeploymentStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_endpoint::DeleteEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_endpoint::DeleteEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_endpoint::DeleteEndpointError> for Error {
    fn from(err: crate::operation::delete_endpoint::DeleteEndpointError) -> Self {
        match err {
            crate::operation::delete_endpoint::DeleteEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_endpoint_config::DeleteEndpointConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_endpoint_config::DeleteEndpointConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_endpoint_config::DeleteEndpointConfigError> for Error {
    fn from(err: crate::operation::delete_endpoint_config::DeleteEndpointConfigError) -> Self {
        match err {
            crate::operation::delete_endpoint_config::DeleteEndpointConfigError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_experiment::DeleteExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_experiment::DeleteExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_experiment::DeleteExperimentError> for Error {
    fn from(err: crate::operation::delete_experiment::DeleteExperimentError) -> Self {
        match err {
            crate::operation::delete_experiment::DeleteExperimentError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_experiment::DeleteExperimentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_feature_group::DeleteFeatureGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_feature_group::DeleteFeatureGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_feature_group::DeleteFeatureGroupError> for Error {
    fn from(err: crate::operation::delete_feature_group::DeleteFeatureGroupError) -> Self {
        match err {
            crate::operation::delete_feature_group::DeleteFeatureGroupError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::delete_feature_group::DeleteFeatureGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_flow_definition::DeleteFlowDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_flow_definition::DeleteFlowDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_flow_definition::DeleteFlowDefinitionError> for Error {
    fn from(err: crate::operation::delete_flow_definition::DeleteFlowDefinitionError) -> Self {
        match err {
            crate::operation::delete_flow_definition::DeleteFlowDefinitionError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::delete_flow_definition::DeleteFlowDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_flow_definition::DeleteFlowDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_hub::DeleteHubError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_hub::DeleteHubError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_hub::DeleteHubError> for Error {
    fn from(err: crate::operation::delete_hub::DeleteHubError) -> Self {
        match err {
            crate::operation::delete_hub::DeleteHubError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::delete_hub::DeleteHubError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_hub::DeleteHubError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_hub_content::DeleteHubContentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_hub_content::DeleteHubContentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_hub_content::DeleteHubContentError> for Error {
    fn from(err: crate::operation::delete_hub_content::DeleteHubContentError) -> Self {
        match err {
            crate::operation::delete_hub_content::DeleteHubContentError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::delete_hub_content::DeleteHubContentError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::delete_hub_content::DeleteHubContentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_human_task_ui::DeleteHumanTaskUiError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_human_task_ui::DeleteHumanTaskUiError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_human_task_ui::DeleteHumanTaskUiError> for Error {
    fn from(err: crate::operation::delete_human_task_ui::DeleteHumanTaskUiError) -> Self {
        match err {
            crate::operation::delete_human_task_ui::DeleteHumanTaskUiError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::delete_human_task_ui::DeleteHumanTaskUiError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_image::DeleteImageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_image::DeleteImageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_image::DeleteImageError> for Error {
    fn from(err: crate::operation::delete_image::DeleteImageError) -> Self {
        match err {
            crate::operation::delete_image::DeleteImageError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::delete_image::DeleteImageError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_image::DeleteImageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_image_version::DeleteImageVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_image_version::DeleteImageVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_image_version::DeleteImageVersionError> for Error {
    fn from(err: crate::operation::delete_image_version::DeleteImageVersionError) -> Self {
        match err {
            crate::operation::delete_image_version::DeleteImageVersionError::ResourceInUse(
                inner,
            ) => Error::ResourceInUse(inner),
            crate::operation::delete_image_version::DeleteImageVersionError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::delete_image_version::DeleteImageVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_inference_experiment::DeleteInferenceExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_inference_experiment::DeleteInferenceExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_inference_experiment::DeleteInferenceExperimentError> for Error {
    fn from(
        err: crate::operation::delete_inference_experiment::DeleteInferenceExperimentError,
    ) -> Self {
        match err {
            crate::operation::delete_inference_experiment::DeleteInferenceExperimentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_inference_experiment::DeleteInferenceExperimentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_inference_experiment::DeleteInferenceExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_model::DeleteModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_model::DeleteModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model::DeleteModelError> for Error {
    fn from(err: crate::operation::delete_model::DeleteModelError) -> Self {
        match err {
            crate::operation::delete_model::DeleteModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_model_bias_job_definition::DeleteModelBiasJobDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_model_bias_job_definition::DeleteModelBiasJobDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model_bias_job_definition::DeleteModelBiasJobDefinitionError>
    for Error
{
    fn from(
        err: crate::operation::delete_model_bias_job_definition::DeleteModelBiasJobDefinitionError,
    ) -> Self {
        match err {
            crate::operation::delete_model_bias_job_definition::DeleteModelBiasJobDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_model_bias_job_definition::DeleteModelBiasJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_model_card::DeleteModelCardError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_model_card::DeleteModelCardError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model_card::DeleteModelCardError> for Error {
    fn from(err: crate::operation::delete_model_card::DeleteModelCardError) -> Self {
        match err {
            crate::operation::delete_model_card::DeleteModelCardError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_model_card::DeleteModelCardError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_model_card::DeleteModelCardError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_model_explainability_job_definition::DeleteModelExplainabilityJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_model_explainability_job_definition::DeleteModelExplainabilityJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_model_explainability_job_definition::DeleteModelExplainabilityJobDefinitionError> for Error {
    fn from(err: crate::operation::delete_model_explainability_job_definition::DeleteModelExplainabilityJobDefinitionError) -> Self {
        match err {
            crate::operation::delete_model_explainability_job_definition::DeleteModelExplainabilityJobDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_model_explainability_job_definition::DeleteModelExplainabilityJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_model_package::DeleteModelPackageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_model_package::DeleteModelPackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model_package::DeleteModelPackageError> for Error {
    fn from(err: crate::operation::delete_model_package::DeleteModelPackageError) -> Self {
        match err {
            crate::operation::delete_model_package::DeleteModelPackageError::ConflictException(
                inner,
            ) => Error::ConflictException(inner),
            crate::operation::delete_model_package::DeleteModelPackageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_model_package_group::DeleteModelPackageGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_model_package_group::DeleteModelPackageGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model_package_group::DeleteModelPackageGroupError> for Error {
    fn from(
        err: crate::operation::delete_model_package_group::DeleteModelPackageGroupError,
    ) -> Self {
        match err {
            crate::operation::delete_model_package_group::DeleteModelPackageGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_model_package_group::DeleteModelPackageGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_model_package_group_policy::DeleteModelPackageGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_model_package_group_policy::DeleteModelPackageGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model_package_group_policy::DeleteModelPackageGroupPolicyError>
    for Error
{
    fn from(
        err: crate::operation::delete_model_package_group_policy::DeleteModelPackageGroupPolicyError,
    ) -> Self {
        match err {
            crate::operation::delete_model_package_group_policy::DeleteModelPackageGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_model_quality_job_definition::DeleteModelQualityJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_model_quality_job_definition::DeleteModelQualityJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::delete_model_quality_job_definition::DeleteModelQualityJobDefinitionError,
    > for Error
{
    fn from(
        err: crate::operation::delete_model_quality_job_definition::DeleteModelQualityJobDefinitionError,
    ) -> Self {
        match err {
            crate::operation::delete_model_quality_job_definition::DeleteModelQualityJobDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_model_quality_job_definition::DeleteModelQualityJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_monitoring_schedule::DeleteMonitoringScheduleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_monitoring_schedule::DeleteMonitoringScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_monitoring_schedule::DeleteMonitoringScheduleError> for Error {
    fn from(
        err: crate::operation::delete_monitoring_schedule::DeleteMonitoringScheduleError,
    ) -> Self {
        match err {
            crate::operation::delete_monitoring_schedule::DeleteMonitoringScheduleError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_monitoring_schedule::DeleteMonitoringScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_notebook_instance::DeleteNotebookInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_notebook_instance::DeleteNotebookInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_notebook_instance::DeleteNotebookInstanceError> for Error {
    fn from(err: crate::operation::delete_notebook_instance::DeleteNotebookInstanceError) -> Self {
        match err {
            crate::operation::delete_notebook_instance::DeleteNotebookInstanceError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_notebook_instance_lifecycle_config::DeleteNotebookInstanceLifecycleConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_notebook_instance_lifecycle_config::DeleteNotebookInstanceLifecycleConfigError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_notebook_instance_lifecycle_config::DeleteNotebookInstanceLifecycleConfigError> for Error {
    fn from(err: crate::operation::delete_notebook_instance_lifecycle_config::DeleteNotebookInstanceLifecycleConfigError) -> Self {
        match err {
            crate::operation::delete_notebook_instance_lifecycle_config::DeleteNotebookInstanceLifecycleConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_pipeline::DeletePipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_pipeline::DeletePipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_pipeline::DeletePipelineError> for Error {
    fn from(err: crate::operation::delete_pipeline::DeletePipelineError) -> Self {
        match err {
            crate::operation::delete_pipeline::DeletePipelineError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_pipeline::DeletePipelineError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_project::DeleteProjectError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_project::DeleteProjectError> for Error {
    fn from(err: crate::operation::delete_project::DeleteProjectError) -> Self {
        match err {
            crate::operation::delete_project::DeleteProjectError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_project::DeleteProjectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_space::DeleteSpaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_space::DeleteSpaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_space::DeleteSpaceError> for Error {
    fn from(err: crate::operation::delete_space::DeleteSpaceError) -> Self {
        match err {
            crate::operation::delete_space::DeleteSpaceError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::delete_space::DeleteSpaceError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_space::DeleteSpaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError>
    for Error
{
    fn from(
        err: crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError,
    ) -> Self {
        match err {
            crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_tags::DeleteTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_tags::DeleteTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_tags::DeleteTagsError> for Error {
    fn from(err: crate::operation::delete_tags::DeleteTagsError) -> Self {
        match err {
            crate::operation::delete_tags::DeleteTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_trial::DeleteTrialError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_trial::DeleteTrialError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_trial::DeleteTrialError> for Error {
    fn from(err: crate::operation::delete_trial::DeleteTrialError) -> Self {
        match err {
            crate::operation::delete_trial::DeleteTrialError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::delete_trial::DeleteTrialError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_trial_component::DeleteTrialComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_trial_component::DeleteTrialComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_trial_component::DeleteTrialComponentError> for Error {
    fn from(err: crate::operation::delete_trial_component::DeleteTrialComponentError) -> Self {
        match err {
            crate::operation::delete_trial_component::DeleteTrialComponentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_trial_component::DeleteTrialComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_user_profile::DeleteUserProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_user_profile::DeleteUserProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_user_profile::DeleteUserProfileError> for Error {
    fn from(err: crate::operation::delete_user_profile::DeleteUserProfileError) -> Self {
        match err {
            crate::operation::delete_user_profile::DeleteUserProfileError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::delete_user_profile::DeleteUserProfileError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::delete_user_profile::DeleteUserProfileError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_workforce::DeleteWorkforceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_workforce::DeleteWorkforceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_workforce::DeleteWorkforceError> for Error {
    fn from(err: crate::operation::delete_workforce::DeleteWorkforceError) -> Self {
        match err {
            crate::operation::delete_workforce::DeleteWorkforceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_workteam::DeleteWorkteamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_workteam::DeleteWorkteamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_workteam::DeleteWorkteamError> for Error {
    fn from(err: crate::operation::delete_workteam::DeleteWorkteamError) -> Self {
        match err {
            crate::operation::delete_workteam::DeleteWorkteamError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::delete_workteam::DeleteWorkteamError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deregister_devices::DeregisterDevicesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deregister_devices::DeregisterDevicesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_devices::DeregisterDevicesError> for Error {
    fn from(err: crate::operation::deregister_devices::DeregisterDevicesError) -> Self {
        match err {
            crate::operation::deregister_devices::DeregisterDevicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_action::DescribeActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_action::DescribeActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_action::DescribeActionError> for Error {
    fn from(err: crate::operation::describe_action::DescribeActionError) -> Self {
        match err {
            crate::operation::describe_action::DescribeActionError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_action::DescribeActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_algorithm::DescribeAlgorithmError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_algorithm::DescribeAlgorithmError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_algorithm::DescribeAlgorithmError> for Error {
    fn from(err: crate::operation::describe_algorithm::DescribeAlgorithmError) -> Self {
        match err {
            crate::operation::describe_algorithm::DescribeAlgorithmError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_app::DescribeAppError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::describe_app::DescribeAppError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_app::DescribeAppError> for Error {
    fn from(err: crate::operation::describe_app::DescribeAppError) -> Self {
        match err {
            crate::operation::describe_app::DescribeAppError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_app::DescribeAppError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_app_image_config::DescribeAppImageConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_app_image_config::DescribeAppImageConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_app_image_config::DescribeAppImageConfigError> for Error {
    fn from(err: crate::operation::describe_app_image_config::DescribeAppImageConfigError) -> Self {
        match err {
            crate::operation::describe_app_image_config::DescribeAppImageConfigError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_app_image_config::DescribeAppImageConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_artifact::DescribeArtifactError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_artifact::DescribeArtifactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_artifact::DescribeArtifactError> for Error {
    fn from(err: crate::operation::describe_artifact::DescribeArtifactError) -> Self {
        match err {
            crate::operation::describe_artifact::DescribeArtifactError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_artifact::DescribeArtifactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_auto_ml_job::DescribeAutoMLJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_auto_ml_job::DescribeAutoMLJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_auto_ml_job::DescribeAutoMLJobError> for Error {
    fn from(err: crate::operation::describe_auto_ml_job::DescribeAutoMLJobError) -> Self {
        match err {
            crate::operation::describe_auto_ml_job::DescribeAutoMLJobError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::describe_auto_ml_job::DescribeAutoMLJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_code_repository::DescribeCodeRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_code_repository::DescribeCodeRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_code_repository::DescribeCodeRepositoryError> for Error {
    fn from(err: crate::operation::describe_code_repository::DescribeCodeRepositoryError) -> Self {
        match err {
            crate::operation::describe_code_repository::DescribeCodeRepositoryError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_compilation_job::DescribeCompilationJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_compilation_job::DescribeCompilationJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_compilation_job::DescribeCompilationJobError> for Error {
    fn from(err: crate::operation::describe_compilation_job::DescribeCompilationJobError) -> Self {
        match err {
            crate::operation::describe_compilation_job::DescribeCompilationJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_compilation_job::DescribeCompilationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_context::DescribeContextError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_context::DescribeContextError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_context::DescribeContextError> for Error {
    fn from(err: crate::operation::describe_context::DescribeContextError) -> Self {
        match err {
            crate::operation::describe_context::DescribeContextError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_context::DescribeContextError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_data_quality_job_definition::DescribeDataQualityJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_data_quality_job_definition::DescribeDataQualityJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_data_quality_job_definition::DescribeDataQualityJobDefinitionError> for Error {
    fn from(err: crate::operation::describe_data_quality_job_definition::DescribeDataQualityJobDefinitionError) -> Self {
        match err {
            crate::operation::describe_data_quality_job_definition::DescribeDataQualityJobDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_data_quality_job_definition::DescribeDataQualityJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_device::DescribeDeviceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_device::DescribeDeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_device::DescribeDeviceError> for Error {
    fn from(err: crate::operation::describe_device::DescribeDeviceError) -> Self {
        match err {
            crate::operation::describe_device::DescribeDeviceError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_device::DescribeDeviceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_device_fleet::DescribeDeviceFleetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_device_fleet::DescribeDeviceFleetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_device_fleet::DescribeDeviceFleetError> for Error {
    fn from(err: crate::operation::describe_device_fleet::DescribeDeviceFleetError) -> Self {
        match err {
            crate::operation::describe_device_fleet::DescribeDeviceFleetError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::describe_device_fleet::DescribeDeviceFleetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_domain::DescribeDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_domain::DescribeDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_domain::DescribeDomainError> for Error {
    fn from(err: crate::operation::describe_domain::DescribeDomainError) -> Self {
        match err {
            crate::operation::describe_domain::DescribeDomainError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_domain::DescribeDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanError>
    for Error
{
    fn from(
        err: crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanError,
    ) -> Self {
        match err {
            crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_edge_packaging_job::DescribeEdgePackagingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_edge_packaging_job::DescribeEdgePackagingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_edge_packaging_job::DescribeEdgePackagingJobError> for Error {
    fn from(
        err: crate::operation::describe_edge_packaging_job::DescribeEdgePackagingJobError,
    ) -> Self {
        match err {
            crate::operation::describe_edge_packaging_job::DescribeEdgePackagingJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_edge_packaging_job::DescribeEdgePackagingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_endpoint::DescribeEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_endpoint::DescribeEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_endpoint::DescribeEndpointError> for Error {
    fn from(err: crate::operation::describe_endpoint::DescribeEndpointError) -> Self {
        match err {
            crate::operation::describe_endpoint::DescribeEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_endpoint_config::DescribeEndpointConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_endpoint_config::DescribeEndpointConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_endpoint_config::DescribeEndpointConfigError> for Error {
    fn from(err: crate::operation::describe_endpoint_config::DescribeEndpointConfigError) -> Self {
        match err {
            crate::operation::describe_endpoint_config::DescribeEndpointConfigError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_experiment::DescribeExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_experiment::DescribeExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_experiment::DescribeExperimentError> for Error {
    fn from(err: crate::operation::describe_experiment::DescribeExperimentError) -> Self {
        match err {
            crate::operation::describe_experiment::DescribeExperimentError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::describe_experiment::DescribeExperimentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_feature_group::DescribeFeatureGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_feature_group::DescribeFeatureGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_feature_group::DescribeFeatureGroupError> for Error {
    fn from(err: crate::operation::describe_feature_group::DescribeFeatureGroupError) -> Self {
        match err {
            crate::operation::describe_feature_group::DescribeFeatureGroupError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_feature_group::DescribeFeatureGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_feature_metadata::DescribeFeatureMetadataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_feature_metadata::DescribeFeatureMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_feature_metadata::DescribeFeatureMetadataError> for Error {
    fn from(
        err: crate::operation::describe_feature_metadata::DescribeFeatureMetadataError,
    ) -> Self {
        match err {
            crate::operation::describe_feature_metadata::DescribeFeatureMetadataError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_feature_metadata::DescribeFeatureMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_flow_definition::DescribeFlowDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_flow_definition::DescribeFlowDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_flow_definition::DescribeFlowDefinitionError> for Error {
    fn from(err: crate::operation::describe_flow_definition::DescribeFlowDefinitionError) -> Self {
        match err {
            crate::operation::describe_flow_definition::DescribeFlowDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_flow_definition::DescribeFlowDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_hub::DescribeHubError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::describe_hub::DescribeHubError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_hub::DescribeHubError> for Error {
    fn from(err: crate::operation::describe_hub::DescribeHubError) -> Self {
        match err {
            crate::operation::describe_hub::DescribeHubError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_hub::DescribeHubError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_hub_content::DescribeHubContentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_hub_content::DescribeHubContentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_hub_content::DescribeHubContentError> for Error {
    fn from(err: crate::operation::describe_hub_content::DescribeHubContentError) -> Self {
        match err {
            crate::operation::describe_hub_content::DescribeHubContentError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::describe_hub_content::DescribeHubContentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_human_task_ui::DescribeHumanTaskUiError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_human_task_ui::DescribeHumanTaskUiError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_human_task_ui::DescribeHumanTaskUiError> for Error {
    fn from(err: crate::operation::describe_human_task_ui::DescribeHumanTaskUiError) -> Self {
        match err {
            crate::operation::describe_human_task_ui::DescribeHumanTaskUiError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_human_task_ui::DescribeHumanTaskUiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_hyper_parameter_tuning_job::DescribeHyperParameterTuningJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_hyper_parameter_tuning_job::DescribeHyperParameterTuningJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::describe_hyper_parameter_tuning_job::DescribeHyperParameterTuningJobError,
    > for Error
{
    fn from(
        err: crate::operation::describe_hyper_parameter_tuning_job::DescribeHyperParameterTuningJobError,
    ) -> Self {
        match err {
            crate::operation::describe_hyper_parameter_tuning_job::DescribeHyperParameterTuningJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_hyper_parameter_tuning_job::DescribeHyperParameterTuningJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_image::DescribeImageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_image::DescribeImageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_image::DescribeImageError> for Error {
    fn from(err: crate::operation::describe_image::DescribeImageError) -> Self {
        match err {
            crate::operation::describe_image::DescribeImageError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_image::DescribeImageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_image_version::DescribeImageVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_image_version::DescribeImageVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_image_version::DescribeImageVersionError> for Error {
    fn from(err: crate::operation::describe_image_version::DescribeImageVersionError) -> Self {
        match err {
            crate::operation::describe_image_version::DescribeImageVersionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_image_version::DescribeImageVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_inference_experiment::DescribeInferenceExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_inference_experiment::DescribeInferenceExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_inference_experiment::DescribeInferenceExperimentError>
    for Error
{
    fn from(
        err: crate::operation::describe_inference_experiment::DescribeInferenceExperimentError,
    ) -> Self {
        match err {
            crate::operation::describe_inference_experiment::DescribeInferenceExperimentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_inference_experiment::DescribeInferenceExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_inference_recommendations_job::DescribeInferenceRecommendationsJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_inference_recommendations_job::DescribeInferenceRecommendationsJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_inference_recommendations_job::DescribeInferenceRecommendationsJobError> for Error {
    fn from(err: crate::operation::describe_inference_recommendations_job::DescribeInferenceRecommendationsJobError) -> Self {
        match err {
            crate::operation::describe_inference_recommendations_job::DescribeInferenceRecommendationsJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_inference_recommendations_job::DescribeInferenceRecommendationsJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_labeling_job::DescribeLabelingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_labeling_job::DescribeLabelingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_labeling_job::DescribeLabelingJobError> for Error {
    fn from(err: crate::operation::describe_labeling_job::DescribeLabelingJobError) -> Self {
        match err {
            crate::operation::describe_labeling_job::DescribeLabelingJobError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::describe_labeling_job::DescribeLabelingJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_lineage_group::DescribeLineageGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_lineage_group::DescribeLineageGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_lineage_group::DescribeLineageGroupError> for Error {
    fn from(err: crate::operation::describe_lineage_group::DescribeLineageGroupError) -> Self {
        match err {
            crate::operation::describe_lineage_group::DescribeLineageGroupError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_lineage_group::DescribeLineageGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_model::DescribeModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_model::DescribeModelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_model::DescribeModelError> for Error {
    fn from(err: crate::operation::describe_model::DescribeModelError) -> Self {
        match err {
            crate::operation::describe_model::DescribeModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_model_bias_job_definition::DescribeModelBiasJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_model_bias_job_definition::DescribeModelBiasJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_model_bias_job_definition::DescribeModelBiasJobDefinitionError>
    for Error
{
    fn from(
        err: crate::operation::describe_model_bias_job_definition::DescribeModelBiasJobDefinitionError,
    ) -> Self {
        match err {
            crate::operation::describe_model_bias_job_definition::DescribeModelBiasJobDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_model_bias_job_definition::DescribeModelBiasJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_model_card::DescribeModelCardError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_model_card::DescribeModelCardError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_model_card::DescribeModelCardError> for Error {
    fn from(err: crate::operation::describe_model_card::DescribeModelCardError) -> Self {
        match err {
            crate::operation::describe_model_card::DescribeModelCardError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::describe_model_card::DescribeModelCardError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_model_card_export_job::DescribeModelCardExportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_model_card_export_job::DescribeModelCardExportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_model_card_export_job::DescribeModelCardExportJobError>
    for Error
{
    fn from(
        err: crate::operation::describe_model_card_export_job::DescribeModelCardExportJobError,
    ) -> Self {
        match err {
            crate::operation::describe_model_card_export_job::DescribeModelCardExportJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_model_card_export_job::DescribeModelCardExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionError> for Error {
    fn from(err: crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionError) -> Self {
        match err {
            crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_model_package::DescribeModelPackageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_model_package::DescribeModelPackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_model_package::DescribeModelPackageError> for Error {
    fn from(err: crate::operation::describe_model_package::DescribeModelPackageError) -> Self {
        match err {
            crate::operation::describe_model_package::DescribeModelPackageError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_model_package_group::DescribeModelPackageGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_model_package_group::DescribeModelPackageGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_model_package_group::DescribeModelPackageGroupError>
    for Error
{
    fn from(
        err: crate::operation::describe_model_package_group::DescribeModelPackageGroupError,
    ) -> Self {
        match err {
            crate::operation::describe_model_package_group::DescribeModelPackageGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_model_quality_job_definition::DescribeModelQualityJobDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_model_quality_job_definition::DescribeModelQualityJobDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_model_quality_job_definition::DescribeModelQualityJobDefinitionError> for Error {
    fn from(err: crate::operation::describe_model_quality_job_definition::DescribeModelQualityJobDefinitionError) -> Self {
        match err {
            crate::operation::describe_model_quality_job_definition::DescribeModelQualityJobDefinitionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_model_quality_job_definition::DescribeModelQualityJobDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleError>
    for Error
{
    fn from(
        err: crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleError,
    ) -> Self {
        match err {
            crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_notebook_instance::DescribeNotebookInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_notebook_instance::DescribeNotebookInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_notebook_instance::DescribeNotebookInstanceError> for Error {
    fn from(
        err: crate::operation::describe_notebook_instance::DescribeNotebookInstanceError,
    ) -> Self {
        match err {
            crate::operation::describe_notebook_instance::DescribeNotebookInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_notebook_instance_lifecycle_config::DescribeNotebookInstanceLifecycleConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_notebook_instance_lifecycle_config::DescribeNotebookInstanceLifecycleConfigError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_notebook_instance_lifecycle_config::DescribeNotebookInstanceLifecycleConfigError> for Error {
    fn from(err: crate::operation::describe_notebook_instance_lifecycle_config::DescribeNotebookInstanceLifecycleConfigError) -> Self {
        match err {
            crate::operation::describe_notebook_instance_lifecycle_config::DescribeNotebookInstanceLifecycleConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_pipeline::DescribePipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_pipeline::DescribePipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_pipeline::DescribePipelineError> for Error {
    fn from(err: crate::operation::describe_pipeline::DescribePipelineError) -> Self {
        match err {
            crate::operation::describe_pipeline::DescribePipelineError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_pipeline::DescribePipelineError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_pipeline_definition_for_execution::DescribePipelineDefinitionForExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_pipeline_definition_for_execution::DescribePipelineDefinitionForExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_pipeline_definition_for_execution::DescribePipelineDefinitionForExecutionError> for Error {
    fn from(err: crate::operation::describe_pipeline_definition_for_execution::DescribePipelineDefinitionForExecutionError) -> Self {
        match err {
            crate::operation::describe_pipeline_definition_for_execution::DescribePipelineDefinitionForExecutionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_pipeline_definition_for_execution::DescribePipelineDefinitionForExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_pipeline_execution::DescribePipelineExecutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_pipeline_execution::DescribePipelineExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_pipeline_execution::DescribePipelineExecutionError> for Error {
    fn from(
        err: crate::operation::describe_pipeline_execution::DescribePipelineExecutionError,
    ) -> Self {
        match err {
            crate::operation::describe_pipeline_execution::DescribePipelineExecutionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_pipeline_execution::DescribePipelineExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_processing_job::DescribeProcessingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_processing_job::DescribeProcessingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_processing_job::DescribeProcessingJobError> for Error {
    fn from(err: crate::operation::describe_processing_job::DescribeProcessingJobError) -> Self {
        match err {
            crate::operation::describe_processing_job::DescribeProcessingJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_processing_job::DescribeProcessingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_project::DescribeProjectError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_project::DescribeProjectError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_project::DescribeProjectError> for Error {
    fn from(err: crate::operation::describe_project::DescribeProjectError) -> Self {
        match err {
            crate::operation::describe_project::DescribeProjectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_space::DescribeSpaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_space::DescribeSpaceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_space::DescribeSpaceError> for Error {
    fn from(err: crate::operation::describe_space::DescribeSpaceError) -> Self {
        match err {
            crate::operation::describe_space::DescribeSpaceError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_space::DescribeSpaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_studio_lifecycle_config::DescribeStudioLifecycleConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_studio_lifecycle_config::DescribeStudioLifecycleConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_studio_lifecycle_config::DescribeStudioLifecycleConfigError>
    for Error
{
    fn from(
        err: crate::operation::describe_studio_lifecycle_config::DescribeStudioLifecycleConfigError,
    ) -> Self {
        match err {
            crate::operation::describe_studio_lifecycle_config::DescribeStudioLifecycleConfigError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_studio_lifecycle_config::DescribeStudioLifecycleConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_subscribed_workteam::DescribeSubscribedWorkteamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_subscribed_workteam::DescribeSubscribedWorkteamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_subscribed_workteam::DescribeSubscribedWorkteamError>
    for Error
{
    fn from(
        err: crate::operation::describe_subscribed_workteam::DescribeSubscribedWorkteamError,
    ) -> Self {
        match err {
            crate::operation::describe_subscribed_workteam::DescribeSubscribedWorkteamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_training_job::DescribeTrainingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_training_job::DescribeTrainingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_training_job::DescribeTrainingJobError> for Error {
    fn from(err: crate::operation::describe_training_job::DescribeTrainingJobError) -> Self {
        match err {
            crate::operation::describe_training_job::DescribeTrainingJobError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::describe_training_job::DescribeTrainingJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_transform_job::DescribeTransformJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_transform_job::DescribeTransformJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_transform_job::DescribeTransformJobError> for Error {
    fn from(err: crate::operation::describe_transform_job::DescribeTransformJobError) -> Self {
        match err {
            crate::operation::describe_transform_job::DescribeTransformJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_transform_job::DescribeTransformJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_trial::DescribeTrialError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_trial::DescribeTrialError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_trial::DescribeTrialError> for Error {
    fn from(err: crate::operation::describe_trial::DescribeTrialError) -> Self {
        match err {
            crate::operation::describe_trial::DescribeTrialError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::describe_trial::DescribeTrialError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_trial_component::DescribeTrialComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_trial_component::DescribeTrialComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_trial_component::DescribeTrialComponentError> for Error {
    fn from(err: crate::operation::describe_trial_component::DescribeTrialComponentError) -> Self {
        match err {
            crate::operation::describe_trial_component::DescribeTrialComponentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::describe_trial_component::DescribeTrialComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_user_profile::DescribeUserProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_user_profile::DescribeUserProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_user_profile::DescribeUserProfileError> for Error {
    fn from(err: crate::operation::describe_user_profile::DescribeUserProfileError) -> Self {
        match err {
            crate::operation::describe_user_profile::DescribeUserProfileError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::describe_user_profile::DescribeUserProfileError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_workforce::DescribeWorkforceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_workforce::DescribeWorkforceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_workforce::DescribeWorkforceError> for Error {
    fn from(err: crate::operation::describe_workforce::DescribeWorkforceError) -> Self {
        match err {
            crate::operation::describe_workforce::DescribeWorkforceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_workteam::DescribeWorkteamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_workteam::DescribeWorkteamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_workteam::DescribeWorkteamError> for Error {
    fn from(err: crate::operation::describe_workteam::DescribeWorkteamError) -> Self {
        match err {
            crate::operation::describe_workteam::DescribeWorkteamError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::disable_sagemaker_servicecatalog_portfolio::DisableSagemakerServicecatalogPortfolioError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::disable_sagemaker_servicecatalog_portfolio::DisableSagemakerServicecatalogPortfolioError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::disable_sagemaker_servicecatalog_portfolio::DisableSagemakerServicecatalogPortfolioError> for Error {
    fn from(err: crate::operation::disable_sagemaker_servicecatalog_portfolio::DisableSagemakerServicecatalogPortfolioError) -> Self {
        match err {
            crate::operation::disable_sagemaker_servicecatalog_portfolio::DisableSagemakerServicecatalogPortfolioError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_trial_component::DisassociateTrialComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_trial_component::DisassociateTrialComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_trial_component::DisassociateTrialComponentError>
    for Error
{
    fn from(
        err: crate::operation::disassociate_trial_component::DisassociateTrialComponentError,
    ) -> Self {
        match err {
            crate::operation::disassociate_trial_component::DisassociateTrialComponentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::disassociate_trial_component::DisassociateTrialComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::enable_sagemaker_servicecatalog_portfolio::EnableSagemakerServicecatalogPortfolioError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::enable_sagemaker_servicecatalog_portfolio::EnableSagemakerServicecatalogPortfolioError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::enable_sagemaker_servicecatalog_portfolio::EnableSagemakerServicecatalogPortfolioError> for Error {
    fn from(err: crate::operation::enable_sagemaker_servicecatalog_portfolio::EnableSagemakerServicecatalogPortfolioError) -> Self {
        match err {
            crate::operation::enable_sagemaker_servicecatalog_portfolio::EnableSagemakerServicecatalogPortfolioError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_device_fleet_report::GetDeviceFleetReportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_device_fleet_report::GetDeviceFleetReportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_fleet_report::GetDeviceFleetReportError> for Error {
    fn from(err: crate::operation::get_device_fleet_report::GetDeviceFleetReportError) -> Self {
        match err {
            crate::operation::get_device_fleet_report::GetDeviceFleetReportError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_lineage_group_policy::GetLineageGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_lineage_group_policy::GetLineageGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_lineage_group_policy::GetLineageGroupPolicyError> for Error {
    fn from(err: crate::operation::get_lineage_group_policy::GetLineageGroupPolicyError) -> Self {
        match err {
            crate::operation::get_lineage_group_policy::GetLineageGroupPolicyError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::get_lineage_group_policy::GetLineageGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_model_package_group_policy::GetModelPackageGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_model_package_group_policy::GetModelPackageGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_model_package_group_policy::GetModelPackageGroupPolicyError>
    for Error
{
    fn from(
        err: crate::operation::get_model_package_group_policy::GetModelPackageGroupPolicyError,
    ) -> Self {
        match err {
            crate::operation::get_model_package_group_policy::GetModelPackageGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_sagemaker_servicecatalog_portfolio_status::GetSagemakerServicecatalogPortfolioStatusError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_sagemaker_servicecatalog_portfolio_status::GetSagemakerServicecatalogPortfolioStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_sagemaker_servicecatalog_portfolio_status::GetSagemakerServicecatalogPortfolioStatusError> for Error {
    fn from(err: crate::operation::get_sagemaker_servicecatalog_portfolio_status::GetSagemakerServicecatalogPortfolioStatusError) -> Self {
        match err {
            crate::operation::get_sagemaker_servicecatalog_portfolio_status::GetSagemakerServicecatalogPortfolioStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_search_suggestions::GetSearchSuggestionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_search_suggestions::GetSearchSuggestionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_search_suggestions::GetSearchSuggestionsError> for Error {
    fn from(err: crate::operation::get_search_suggestions::GetSearchSuggestionsError) -> Self {
        match err {
            crate::operation::get_search_suggestions::GetSearchSuggestionsError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::import_hub_content::ImportHubContentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::import_hub_content::ImportHubContentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_hub_content::ImportHubContentError> for Error {
    fn from(err: crate::operation::import_hub_content::ImportHubContentError) -> Self {
        match err {
            crate::operation::import_hub_content::ImportHubContentError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::import_hub_content::ImportHubContentError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::import_hub_content::ImportHubContentError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::import_hub_content::ImportHubContentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_actions::ListActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_actions::ListActionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_actions::ListActionsError> for Error {
    fn from(err: crate::operation::list_actions::ListActionsError) -> Self {
        match err {
            crate::operation::list_actions::ListActionsError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::list_actions::ListActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_algorithms::ListAlgorithmsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_algorithms::ListAlgorithmsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_algorithms::ListAlgorithmsError> for Error {
    fn from(err: crate::operation::list_algorithms::ListAlgorithmsError) -> Self {
        match err {
            crate::operation::list_algorithms::ListAlgorithmsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_aliases::ListAliasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_aliases::ListAliasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_aliases::ListAliasesError> for Error {
    fn from(err: crate::operation::list_aliases::ListAliasesError) -> Self {
        match err {
            crate::operation::list_aliases::ListAliasesError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::list_aliases::ListAliasesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_app_image_configs::ListAppImageConfigsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_app_image_configs::ListAppImageConfigsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_app_image_configs::ListAppImageConfigsError> for Error {
    fn from(err: crate::operation::list_app_image_configs::ListAppImageConfigsError) -> Self {
        match err {
            crate::operation::list_app_image_configs::ListAppImageConfigsError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_apps::ListAppsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_apps::ListAppsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_apps::ListAppsError> for Error {
    fn from(err: crate::operation::list_apps::ListAppsError) -> Self {
        match err {
            crate::operation::list_apps::ListAppsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_artifacts::ListArtifactsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_artifacts::ListArtifactsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_artifacts::ListArtifactsError> for Error {
    fn from(err: crate::operation::list_artifacts::ListArtifactsError) -> Self {
        match err {
            crate::operation::list_artifacts::ListArtifactsError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::list_artifacts::ListArtifactsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_associations::ListAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_associations::ListAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_associations::ListAssociationsError> for Error {
    fn from(err: crate::operation::list_associations::ListAssociationsError) -> Self {
        match err {
            crate::operation::list_associations::ListAssociationsError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::list_associations::ListAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_auto_ml_jobs::ListAutoMLJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_auto_ml_jobs::ListAutoMLJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_auto_ml_jobs::ListAutoMLJobsError> for Error {
    fn from(err: crate::operation::list_auto_ml_jobs::ListAutoMLJobsError) -> Self {
        match err {
            crate::operation::list_auto_ml_jobs::ListAutoMLJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMLJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMLJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMLJobError>
    for Error
{
    fn from(
        err: crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMLJobError,
    ) -> Self {
        match err {
            crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMLJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMLJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_code_repositories::ListCodeRepositoriesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_code_repositories::ListCodeRepositoriesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_code_repositories::ListCodeRepositoriesError> for Error {
    fn from(err: crate::operation::list_code_repositories::ListCodeRepositoriesError) -> Self {
        match err {
            crate::operation::list_code_repositories::ListCodeRepositoriesError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_compilation_jobs::ListCompilationJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_compilation_jobs::ListCompilationJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_compilation_jobs::ListCompilationJobsError> for Error {
    fn from(err: crate::operation::list_compilation_jobs::ListCompilationJobsError) -> Self {
        match err {
            crate::operation::list_compilation_jobs::ListCompilationJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_contexts::ListContextsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_contexts::ListContextsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_contexts::ListContextsError> for Error {
    fn from(err: crate::operation::list_contexts::ListContextsError) -> Self {
        match err {
            crate::operation::list_contexts::ListContextsError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::list_contexts::ListContextsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_data_quality_job_definitions::ListDataQualityJobDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_data_quality_job_definitions::ListDataQualityJobDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_quality_job_definitions::ListDataQualityJobDefinitionsError>
    for Error
{
    fn from(
        err: crate::operation::list_data_quality_job_definitions::ListDataQualityJobDefinitionsError,
    ) -> Self {
        match err {
            crate::operation::list_data_quality_job_definitions::ListDataQualityJobDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_device_fleets::ListDeviceFleetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_device_fleets::ListDeviceFleetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_device_fleets::ListDeviceFleetsError> for Error {
    fn from(err: crate::operation::list_device_fleets::ListDeviceFleetsError) -> Self {
        match err {
            crate::operation::list_device_fleets::ListDeviceFleetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_devices::ListDevicesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_devices::ListDevicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_devices::ListDevicesError> for Error {
    fn from(err: crate::operation::list_devices::ListDevicesError) -> Self {
        match err {
            crate::operation::list_devices::ListDevicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_domains::ListDomainsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_domains::ListDomainsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_domains::ListDomainsError> for Error {
    fn from(err: crate::operation::list_domains::ListDomainsError) -> Self {
        match err {
            crate::operation::list_domains::ListDomainsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_edge_deployment_plans::ListEdgeDeploymentPlansError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_edge_deployment_plans::ListEdgeDeploymentPlansError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_edge_deployment_plans::ListEdgeDeploymentPlansError> for Error {
    fn from(
        err: crate::operation::list_edge_deployment_plans::ListEdgeDeploymentPlansError,
    ) -> Self {
        match err {
            crate::operation::list_edge_deployment_plans::ListEdgeDeploymentPlansError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_edge_packaging_jobs::ListEdgePackagingJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_edge_packaging_jobs::ListEdgePackagingJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_edge_packaging_jobs::ListEdgePackagingJobsError> for Error {
    fn from(err: crate::operation::list_edge_packaging_jobs::ListEdgePackagingJobsError) -> Self {
        match err {
            crate::operation::list_edge_packaging_jobs::ListEdgePackagingJobsError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_endpoint_configs::ListEndpointConfigsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_endpoint_configs::ListEndpointConfigsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_endpoint_configs::ListEndpointConfigsError> for Error {
    fn from(err: crate::operation::list_endpoint_configs::ListEndpointConfigsError) -> Self {
        match err {
            crate::operation::list_endpoint_configs::ListEndpointConfigsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_endpoints::ListEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_endpoints::ListEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_endpoints::ListEndpointsError> for Error {
    fn from(err: crate::operation::list_endpoints::ListEndpointsError) -> Self {
        match err {
            crate::operation::list_endpoints::ListEndpointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_experiments::ListExperimentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_experiments::ListExperimentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_experiments::ListExperimentsError> for Error {
    fn from(err: crate::operation::list_experiments::ListExperimentsError) -> Self {
        match err {
            crate::operation::list_experiments::ListExperimentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_feature_groups::ListFeatureGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_feature_groups::ListFeatureGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_feature_groups::ListFeatureGroupsError> for Error {
    fn from(err: crate::operation::list_feature_groups::ListFeatureGroupsError) -> Self {
        match err {
            crate::operation::list_feature_groups::ListFeatureGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_flow_definitions::ListFlowDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_flow_definitions::ListFlowDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_flow_definitions::ListFlowDefinitionsError> for Error {
    fn from(err: crate::operation::list_flow_definitions::ListFlowDefinitionsError) -> Self {
        match err {
            crate::operation::list_flow_definitions::ListFlowDefinitionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_hub_contents::ListHubContentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_hub_contents::ListHubContentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_hub_contents::ListHubContentsError> for Error {
    fn from(err: crate::operation::list_hub_contents::ListHubContentsError) -> Self {
        match err {
            crate::operation::list_hub_contents::ListHubContentsError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::list_hub_contents::ListHubContentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_hub_content_versions::ListHubContentVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_hub_content_versions::ListHubContentVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_hub_content_versions::ListHubContentVersionsError> for Error {
    fn from(err: crate::operation::list_hub_content_versions::ListHubContentVersionsError) -> Self {
        match err {
            crate::operation::list_hub_content_versions::ListHubContentVersionsError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_hub_content_versions::ListHubContentVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_hubs::ListHubsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_hubs::ListHubsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_hubs::ListHubsError> for Error {
    fn from(err: crate::operation::list_hubs::ListHubsError) -> Self {
        match err {
            crate::operation::list_hubs::ListHubsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_human_task_uis::ListHumanTaskUisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_human_task_uis::ListHumanTaskUisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_human_task_uis::ListHumanTaskUisError> for Error {
    fn from(err: crate::operation::list_human_task_uis::ListHumanTaskUisError) -> Self {
        match err {
            crate::operation::list_human_task_uis::ListHumanTaskUisError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_hyper_parameter_tuning_jobs::ListHyperParameterTuningJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_hyper_parameter_tuning_jobs::ListHyperParameterTuningJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_hyper_parameter_tuning_jobs::ListHyperParameterTuningJobsError>
    for Error
{
    fn from(
        err: crate::operation::list_hyper_parameter_tuning_jobs::ListHyperParameterTuningJobsError,
    ) -> Self {
        match err {
            crate::operation::list_hyper_parameter_tuning_jobs::ListHyperParameterTuningJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_images::ListImagesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_images::ListImagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_images::ListImagesError> for Error {
    fn from(err: crate::operation::list_images::ListImagesError) -> Self {
        match err {
            crate::operation::list_images::ListImagesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_image_versions::ListImageVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_image_versions::ListImageVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_image_versions::ListImageVersionsError> for Error {
    fn from(err: crate::operation::list_image_versions::ListImageVersionsError) -> Self {
        match err {
            crate::operation::list_image_versions::ListImageVersionsError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::list_image_versions::ListImageVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_inference_experiments::ListInferenceExperimentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_inference_experiments::ListInferenceExperimentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_inference_experiments::ListInferenceExperimentsError> for Error {
    fn from(
        err: crate::operation::list_inference_experiments::ListInferenceExperimentsError,
    ) -> Self {
        match err {
            crate::operation::list_inference_experiments::ListInferenceExperimentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_inference_recommendations_jobs::ListInferenceRecommendationsJobsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_inference_recommendations_jobs::ListInferenceRecommendationsJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_inference_recommendations_jobs::ListInferenceRecommendationsJobsError> for Error {
    fn from(err: crate::operation::list_inference_recommendations_jobs::ListInferenceRecommendationsJobsError) -> Self {
        match err {
            crate::operation::list_inference_recommendations_jobs::ListInferenceRecommendationsJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsError> for Error {
    fn from(err: crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsError) -> Self {
        match err {
            crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_labeling_jobs::ListLabelingJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_labeling_jobs::ListLabelingJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_labeling_jobs::ListLabelingJobsError> for Error {
    fn from(err: crate::operation::list_labeling_jobs::ListLabelingJobsError) -> Self {
        match err {
            crate::operation::list_labeling_jobs::ListLabelingJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamError>
    for Error
{
    fn from(
        err: crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamError,
    ) -> Self {
        match err {
            crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_lineage_groups::ListLineageGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_lineage_groups::ListLineageGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_lineage_groups::ListLineageGroupsError> for Error {
    fn from(err: crate::operation::list_lineage_groups::ListLineageGroupsError) -> Self {
        match err {
            crate::operation::list_lineage_groups::ListLineageGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_bias_job_definitions::ListModelBiasJobDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_bias_job_definitions::ListModelBiasJobDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_bias_job_definitions::ListModelBiasJobDefinitionsError>
    for Error
{
    fn from(
        err: crate::operation::list_model_bias_job_definitions::ListModelBiasJobDefinitionsError,
    ) -> Self {
        match err {
            crate::operation::list_model_bias_job_definitions::ListModelBiasJobDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_card_export_jobs::ListModelCardExportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_card_export_jobs::ListModelCardExportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_card_export_jobs::ListModelCardExportJobsError> for Error {
    fn from(
        err: crate::operation::list_model_card_export_jobs::ListModelCardExportJobsError,
    ) -> Self {
        match err {
            crate::operation::list_model_card_export_jobs::ListModelCardExportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_cards::ListModelCardsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_cards::ListModelCardsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_cards::ListModelCardsError> for Error {
    fn from(err: crate::operation::list_model_cards::ListModelCardsError) -> Self {
        match err {
            crate::operation::list_model_cards::ListModelCardsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_card_versions::ListModelCardVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_card_versions::ListModelCardVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_card_versions::ListModelCardVersionsError> for Error {
    fn from(err: crate::operation::list_model_card_versions::ListModelCardVersionsError) -> Self {
        match err {
            crate::operation::list_model_card_versions::ListModelCardVersionsError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_model_card_versions::ListModelCardVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_model_explainability_job_definitions::ListModelExplainabilityJobDefinitionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_model_explainability_job_definitions::ListModelExplainabilityJobDefinitionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_model_explainability_job_definitions::ListModelExplainabilityJobDefinitionsError> for Error {
    fn from(err: crate::operation::list_model_explainability_job_definitions::ListModelExplainabilityJobDefinitionsError) -> Self {
        match err {
            crate::operation::list_model_explainability_job_definitions::ListModelExplainabilityJobDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_metadata::ListModelMetadataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_metadata::ListModelMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_metadata::ListModelMetadataError> for Error {
    fn from(err: crate::operation::list_model_metadata::ListModelMetadataError) -> Self {
        match err {
            crate::operation::list_model_metadata::ListModelMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_package_groups::ListModelPackageGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_package_groups::ListModelPackageGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_package_groups::ListModelPackageGroupsError> for Error {
    fn from(err: crate::operation::list_model_package_groups::ListModelPackageGroupsError) -> Self {
        match err {
            crate::operation::list_model_package_groups::ListModelPackageGroupsError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_packages::ListModelPackagesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_packages::ListModelPackagesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_packages::ListModelPackagesError> for Error {
    fn from(err: crate::operation::list_model_packages::ListModelPackagesError) -> Self {
        match err {
            crate::operation::list_model_packages::ListModelPackagesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_model_quality_job_definitions::ListModelQualityJobDefinitionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_model_quality_job_definitions::ListModelQualityJobDefinitionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_model_quality_job_definitions::ListModelQualityJobDefinitionsError>
    for Error
{
    fn from(
        err: crate::operation::list_model_quality_job_definitions::ListModelQualityJobDefinitionsError,
    ) -> Self {
        match err {
            crate::operation::list_model_quality_job_definitions::ListModelQualityJobDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_models::ListModelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_models::ListModelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_models::ListModelsError> for Error {
    fn from(err: crate::operation::list_models::ListModelsError) -> Self {
        match err {
            crate::operation::list_models::ListModelsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistoryError>
    for Error
{
    fn from(
        err: crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistoryError,
    ) -> Self {
        match err {
            crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistoryError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_alerts::ListMonitoringAlertsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_alerts::ListMonitoringAlertsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_monitoring_alerts::ListMonitoringAlertsError> for Error {
    fn from(err: crate::operation::list_monitoring_alerts::ListMonitoringAlertsError) -> Self {
        match err {
            crate::operation::list_monitoring_alerts::ListMonitoringAlertsError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_monitoring_alerts::ListMonitoringAlertsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_executions::ListMonitoringExecutionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_executions::ListMonitoringExecutionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_monitoring_executions::ListMonitoringExecutionsError> for Error {
    fn from(
        err: crate::operation::list_monitoring_executions::ListMonitoringExecutionsError,
    ) -> Self {
        match err {
            crate::operation::list_monitoring_executions::ListMonitoringExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_schedules::ListMonitoringSchedulesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_schedules::ListMonitoringSchedulesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_monitoring_schedules::ListMonitoringSchedulesError> for Error {
    fn from(
        err: crate::operation::list_monitoring_schedules::ListMonitoringSchedulesError,
    ) -> Self {
        match err {
            crate::operation::list_monitoring_schedules::ListMonitoringSchedulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_notebook_instance_lifecycle_configs::ListNotebookInstanceLifecycleConfigsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_notebook_instance_lifecycle_configs::ListNotebookInstanceLifecycleConfigsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_notebook_instance_lifecycle_configs::ListNotebookInstanceLifecycleConfigsError> for Error {
    fn from(err: crate::operation::list_notebook_instance_lifecycle_configs::ListNotebookInstanceLifecycleConfigsError) -> Self {
        match err {
            crate::operation::list_notebook_instance_lifecycle_configs::ListNotebookInstanceLifecycleConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_notebook_instances::ListNotebookInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_notebook_instances::ListNotebookInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_notebook_instances::ListNotebookInstancesError> for Error {
    fn from(err: crate::operation::list_notebook_instances::ListNotebookInstancesError) -> Self {
        match err {
            crate::operation::list_notebook_instances::ListNotebookInstancesError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_pipeline_executions::ListPipelineExecutionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_pipeline_executions::ListPipelineExecutionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_pipeline_executions::ListPipelineExecutionsError> for Error {
    fn from(err: crate::operation::list_pipeline_executions::ListPipelineExecutionsError) -> Self {
        match err {
            crate::operation::list_pipeline_executions::ListPipelineExecutionsError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_pipeline_executions::ListPipelineExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_pipeline_execution_steps::ListPipelineExecutionStepsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_pipeline_execution_steps::ListPipelineExecutionStepsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_pipeline_execution_steps::ListPipelineExecutionStepsError>
    for Error
{
    fn from(
        err: crate::operation::list_pipeline_execution_steps::ListPipelineExecutionStepsError,
    ) -> Self {
        match err {
            crate::operation::list_pipeline_execution_steps::ListPipelineExecutionStepsError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_pipeline_execution_steps::ListPipelineExecutionStepsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionError> for Error {
    fn from(err: crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionError) -> Self {
        match err {
            crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_pipelines::ListPipelinesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_pipelines::ListPipelinesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_pipelines::ListPipelinesError> for Error {
    fn from(err: crate::operation::list_pipelines::ListPipelinesError) -> Self {
        match err {
            crate::operation::list_pipelines::ListPipelinesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_processing_jobs::ListProcessingJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_processing_jobs::ListProcessingJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_processing_jobs::ListProcessingJobsError> for Error {
    fn from(err: crate::operation::list_processing_jobs::ListProcessingJobsError) -> Self {
        match err {
            crate::operation::list_processing_jobs::ListProcessingJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_projects::ListProjectsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_projects::ListProjectsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_projects::ListProjectsError> for Error {
    fn from(err: crate::operation::list_projects::ListProjectsError) -> Self {
        match err {
            crate::operation::list_projects::ListProjectsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_spaces::ListSpacesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_spaces::ListSpacesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_spaces::ListSpacesError> for Error {
    fn from(err: crate::operation::list_spaces::ListSpacesError) -> Self {
        match err {
            crate::operation::list_spaces::ListSpacesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_stage_devices::ListStageDevicesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_stage_devices::ListStageDevicesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stage_devices::ListStageDevicesError> for Error {
    fn from(err: crate::operation::list_stage_devices::ListStageDevicesError) -> Self {
        match err {
            crate::operation::list_stage_devices::ListStageDevicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_studio_lifecycle_configs::ListStudioLifecycleConfigsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_studio_lifecycle_configs::ListStudioLifecycleConfigsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_studio_lifecycle_configs::ListStudioLifecycleConfigsError>
    for Error
{
    fn from(
        err: crate::operation::list_studio_lifecycle_configs::ListStudioLifecycleConfigsError,
    ) -> Self {
        match err {
            crate::operation::list_studio_lifecycle_configs::ListStudioLifecycleConfigsError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::list_studio_lifecycle_configs::ListStudioLifecycleConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_subscribed_workteams::ListSubscribedWorkteamsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_subscribed_workteams::ListSubscribedWorkteamsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_subscribed_workteams::ListSubscribedWorkteamsError> for Error {
    fn from(
        err: crate::operation::list_subscribed_workteams::ListSubscribedWorkteamsError,
    ) -> Self {
        match err {
            crate::operation::list_subscribed_workteams::ListSubscribedWorkteamsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_tags::ListTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_tags::ListTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags::ListTagsError> for Error {
    fn from(err: crate::operation::list_tags::ListTagsError) -> Self {
        match err {
            crate::operation::list_tags::ListTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_training_jobs::ListTrainingJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_training_jobs::ListTrainingJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_training_jobs::ListTrainingJobsError> for Error {
    fn from(err: crate::operation::list_training_jobs::ListTrainingJobsError) -> Self {
        match err {
            crate::operation::list_training_jobs::ListTrainingJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJobError> for Error {
    fn from(err: crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJobError) -> Self {
        match err {
            crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_transform_jobs::ListTransformJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_transform_jobs::ListTransformJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_transform_jobs::ListTransformJobsError> for Error {
    fn from(err: crate::operation::list_transform_jobs::ListTransformJobsError) -> Self {
        match err {
            crate::operation::list_transform_jobs::ListTransformJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_trial_components::ListTrialComponentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_trial_components::ListTrialComponentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_trial_components::ListTrialComponentsError> for Error {
    fn from(err: crate::operation::list_trial_components::ListTrialComponentsError) -> Self {
        match err {
            crate::operation::list_trial_components::ListTrialComponentsError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::list_trial_components::ListTrialComponentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_trials::ListTrialsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_trials::ListTrialsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_trials::ListTrialsError> for Error {
    fn from(err: crate::operation::list_trials::ListTrialsError) -> Self {
        match err {
            crate::operation::list_trials::ListTrialsError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::list_trials::ListTrialsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_user_profiles::ListUserProfilesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_user_profiles::ListUserProfilesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_user_profiles::ListUserProfilesError> for Error {
    fn from(err: crate::operation::list_user_profiles::ListUserProfilesError) -> Self {
        match err {
            crate::operation::list_user_profiles::ListUserProfilesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_workforces::ListWorkforcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_workforces::ListWorkforcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_workforces::ListWorkforcesError> for Error {
    fn from(err: crate::operation::list_workforces::ListWorkforcesError) -> Self {
        match err {
            crate::operation::list_workforces::ListWorkforcesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_workteams::ListWorkteamsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_workteams::ListWorkteamsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_workteams::ListWorkteamsError> for Error {
    fn from(err: crate::operation::list_workteams::ListWorkteamsError) -> Self {
        match err {
            crate::operation::list_workteams::ListWorkteamsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_model_package_group_policy::PutModelPackageGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_model_package_group_policy::PutModelPackageGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_model_package_group_policy::PutModelPackageGroupPolicyError>
    for Error
{
    fn from(
        err: crate::operation::put_model_package_group_policy::PutModelPackageGroupPolicyError,
    ) -> Self {
        match err {
            crate::operation::put_model_package_group_policy::PutModelPackageGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::query_lineage::QueryLineageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::query_lineage::QueryLineageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::query_lineage::QueryLineageError> for Error {
    fn from(err: crate::operation::query_lineage::QueryLineageError) -> Self {
        match err {
            crate::operation::query_lineage::QueryLineageError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::query_lineage::QueryLineageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::register_devices::RegisterDevicesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_devices::RegisterDevicesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_devices::RegisterDevicesError> for Error {
    fn from(err: crate::operation::register_devices::RegisterDevicesError) -> Self {
        match err {
            crate::operation::register_devices::RegisterDevicesError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::register_devices::RegisterDevicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::render_ui_template::RenderUiTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::render_ui_template::RenderUiTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::render_ui_template::RenderUiTemplateError> for Error {
    fn from(err: crate::operation::render_ui_template::RenderUiTemplateError) -> Self {
        match err {
            crate::operation::render_ui_template::RenderUiTemplateError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::render_ui_template::RenderUiTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::retry_pipeline_execution::RetryPipelineExecutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::retry_pipeline_execution::RetryPipelineExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::retry_pipeline_execution::RetryPipelineExecutionError> for Error {
    fn from(err: crate::operation::retry_pipeline_execution::RetryPipelineExecutionError) -> Self {
        match err {
            crate::operation::retry_pipeline_execution::RetryPipelineExecutionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::retry_pipeline_execution::RetryPipelineExecutionError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::retry_pipeline_execution::RetryPipelineExecutionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::retry_pipeline_execution::RetryPipelineExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::search::SearchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::search::SearchError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search::SearchError> for Error {
    fn from(err: crate::operation::search::SearchError) -> Self {
        match err {
            crate::operation::search::SearchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::send_pipeline_execution_step_failure::SendPipelineExecutionStepFailureError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::send_pipeline_execution_step_failure::SendPipelineExecutionStepFailureError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::send_pipeline_execution_step_failure::SendPipelineExecutionStepFailureError> for Error {
    fn from(err: crate::operation::send_pipeline_execution_step_failure::SendPipelineExecutionStepFailureError) -> Self {
        match err {
            crate::operation::send_pipeline_execution_step_failure::SendPipelineExecutionStepFailureError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::send_pipeline_execution_step_failure::SendPipelineExecutionStepFailureError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::send_pipeline_execution_step_failure::SendPipelineExecutionStepFailureError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::send_pipeline_execution_step_success::SendPipelineExecutionStepSuccessError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::send_pipeline_execution_step_success::SendPipelineExecutionStepSuccessError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::send_pipeline_execution_step_success::SendPipelineExecutionStepSuccessError> for Error {
    fn from(err: crate::operation::send_pipeline_execution_step_success::SendPipelineExecutionStepSuccessError) -> Self {
        match err {
            crate::operation::send_pipeline_execution_step_success::SendPipelineExecutionStepSuccessError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::send_pipeline_execution_step_success::SendPipelineExecutionStepSuccessError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::send_pipeline_execution_step_success::SendPipelineExecutionStepSuccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_edge_deployment_stage::StartEdgeDeploymentStageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_edge_deployment_stage::StartEdgeDeploymentStageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_edge_deployment_stage::StartEdgeDeploymentStageError> for Error {
    fn from(
        err: crate::operation::start_edge_deployment_stage::StartEdgeDeploymentStageError,
    ) -> Self {
        match err {
            crate::operation::start_edge_deployment_stage::StartEdgeDeploymentStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_inference_experiment::StartInferenceExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_inference_experiment::StartInferenceExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_inference_experiment::StartInferenceExperimentError> for Error {
    fn from(
        err: crate::operation::start_inference_experiment::StartInferenceExperimentError,
    ) -> Self {
        match err {
            crate::operation::start_inference_experiment::StartInferenceExperimentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_inference_experiment::StartInferenceExperimentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::start_inference_experiment::StartInferenceExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_monitoring_schedule::StartMonitoringScheduleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_monitoring_schedule::StartMonitoringScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_monitoring_schedule::StartMonitoringScheduleError> for Error {
    fn from(
        err: crate::operation::start_monitoring_schedule::StartMonitoringScheduleError,
    ) -> Self {
        match err {
            crate::operation::start_monitoring_schedule::StartMonitoringScheduleError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::start_monitoring_schedule::StartMonitoringScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_notebook_instance::StartNotebookInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_notebook_instance::StartNotebookInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_notebook_instance::StartNotebookInstanceError> for Error {
    fn from(err: crate::operation::start_notebook_instance::StartNotebookInstanceError) -> Self {
        match err {
            crate::operation::start_notebook_instance::StartNotebookInstanceError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::start_notebook_instance::StartNotebookInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_pipeline_execution::StartPipelineExecutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_pipeline_execution::StartPipelineExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_pipeline_execution::StartPipelineExecutionError> for Error {
    fn from(err: crate::operation::start_pipeline_execution::StartPipelineExecutionError) -> Self {
        match err {
            crate::operation::start_pipeline_execution::StartPipelineExecutionError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::start_pipeline_execution::StartPipelineExecutionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::start_pipeline_execution::StartPipelineExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_auto_ml_job::StopAutoMLJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_auto_ml_job::StopAutoMLJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_auto_ml_job::StopAutoMLJobError> for Error {
    fn from(err: crate::operation::stop_auto_ml_job::StopAutoMLJobError) -> Self {
        match err {
            crate::operation::stop_auto_ml_job::StopAutoMLJobError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::stop_auto_ml_job::StopAutoMLJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_compilation_job::StopCompilationJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_compilation_job::StopCompilationJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_compilation_job::StopCompilationJobError> for Error {
    fn from(err: crate::operation::stop_compilation_job::StopCompilationJobError) -> Self {
        match err {
            crate::operation::stop_compilation_job::StopCompilationJobError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::stop_compilation_job::StopCompilationJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageError> for Error {
    fn from(
        err: crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageError,
    ) -> Self {
        match err {
            crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_edge_packaging_job::StopEdgePackagingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_edge_packaging_job::StopEdgePackagingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_edge_packaging_job::StopEdgePackagingJobError> for Error {
    fn from(err: crate::operation::stop_edge_packaging_job::StopEdgePackagingJobError) -> Self {
        match err {
            crate::operation::stop_edge_packaging_job::StopEdgePackagingJobError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError>
    for Error
{
    fn from(
        err: crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError,
    ) -> Self {
        match err {
            crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_inference_experiment::StopInferenceExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_inference_experiment::StopInferenceExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_inference_experiment::StopInferenceExperimentError> for Error {
    fn from(
        err: crate::operation::stop_inference_experiment::StopInferenceExperimentError,
    ) -> Self {
        match err {
            crate::operation::stop_inference_experiment::StopInferenceExperimentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_inference_experiment::StopInferenceExperimentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::stop_inference_experiment::StopInferenceExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::stop_inference_recommendations_job::StopInferenceRecommendationsJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::stop_inference_recommendations_job::StopInferenceRecommendationsJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::stop_inference_recommendations_job::StopInferenceRecommendationsJobError>
    for Error
{
    fn from(
        err: crate::operation::stop_inference_recommendations_job::StopInferenceRecommendationsJobError,
    ) -> Self {
        match err {
            crate::operation::stop_inference_recommendations_job::StopInferenceRecommendationsJobError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::stop_inference_recommendations_job::StopInferenceRecommendationsJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_labeling_job::StopLabelingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_labeling_job::StopLabelingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_labeling_job::StopLabelingJobError> for Error {
    fn from(err: crate::operation::stop_labeling_job::StopLabelingJobError) -> Self {
        match err {
            crate::operation::stop_labeling_job::StopLabelingJobError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::stop_labeling_job::StopLabelingJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_monitoring_schedule::StopMonitoringScheduleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_monitoring_schedule::StopMonitoringScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_monitoring_schedule::StopMonitoringScheduleError> for Error {
    fn from(err: crate::operation::stop_monitoring_schedule::StopMonitoringScheduleError) -> Self {
        match err {
            crate::operation::stop_monitoring_schedule::StopMonitoringScheduleError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::stop_monitoring_schedule::StopMonitoringScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_notebook_instance::StopNotebookInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_notebook_instance::StopNotebookInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_notebook_instance::StopNotebookInstanceError> for Error {
    fn from(err: crate::operation::stop_notebook_instance::StopNotebookInstanceError) -> Self {
        match err {
            crate::operation::stop_notebook_instance::StopNotebookInstanceError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_pipeline_execution::StopPipelineExecutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_pipeline_execution::StopPipelineExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_pipeline_execution::StopPipelineExecutionError> for Error {
    fn from(err: crate::operation::stop_pipeline_execution::StopPipelineExecutionError) -> Self {
        match err {
            crate::operation::stop_pipeline_execution::StopPipelineExecutionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::stop_pipeline_execution::StopPipelineExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_processing_job::StopProcessingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_processing_job::StopProcessingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_processing_job::StopProcessingJobError> for Error {
    fn from(err: crate::operation::stop_processing_job::StopProcessingJobError) -> Self {
        match err {
            crate::operation::stop_processing_job::StopProcessingJobError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::stop_processing_job::StopProcessingJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_training_job::StopTrainingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_training_job::StopTrainingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_training_job::StopTrainingJobError> for Error {
    fn from(err: crate::operation::stop_training_job::StopTrainingJobError) -> Self {
        match err {
            crate::operation::stop_training_job::StopTrainingJobError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::stop_training_job::StopTrainingJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_transform_job::StopTransformJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_transform_job::StopTransformJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_transform_job::StopTransformJobError> for Error {
    fn from(err: crate::operation::stop_transform_job::StopTransformJobError) -> Self {
        match err {
            crate::operation::stop_transform_job::StopTransformJobError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::stop_transform_job::StopTransformJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_action::UpdateActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_action::UpdateActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_action::UpdateActionError> for Error {
    fn from(err: crate::operation::update_action::UpdateActionError) -> Self {
        match err {
            crate::operation::update_action::UpdateActionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_action::UpdateActionError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_action::UpdateActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_app_image_config::UpdateAppImageConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_app_image_config::UpdateAppImageConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_app_image_config::UpdateAppImageConfigError> for Error {
    fn from(err: crate::operation::update_app_image_config::UpdateAppImageConfigError) -> Self {
        match err {
            crate::operation::update_app_image_config::UpdateAppImageConfigError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_app_image_config::UpdateAppImageConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_artifact::UpdateArtifactError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_artifact::UpdateArtifactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_artifact::UpdateArtifactError> for Error {
    fn from(err: crate::operation::update_artifact::UpdateArtifactError) -> Self {
        match err {
            crate::operation::update_artifact::UpdateArtifactError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_artifact::UpdateArtifactError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_artifact::UpdateArtifactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_code_repository::UpdateCodeRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_code_repository::UpdateCodeRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_code_repository::UpdateCodeRepositoryError> for Error {
    fn from(err: crate::operation::update_code_repository::UpdateCodeRepositoryError) -> Self {
        match err {
            crate::operation::update_code_repository::UpdateCodeRepositoryError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_context::UpdateContextError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_context::UpdateContextError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_context::UpdateContextError> for Error {
    fn from(err: crate::operation::update_context::UpdateContextError) -> Self {
        match err {
            crate::operation::update_context::UpdateContextError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_context::UpdateContextError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_context::UpdateContextError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_device_fleet::UpdateDeviceFleetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_device_fleet::UpdateDeviceFleetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_device_fleet::UpdateDeviceFleetError> for Error {
    fn from(err: crate::operation::update_device_fleet::UpdateDeviceFleetError) -> Self {
        match err {
            crate::operation::update_device_fleet::UpdateDeviceFleetError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::update_device_fleet::UpdateDeviceFleetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_devices::UpdateDevicesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_devices::UpdateDevicesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_devices::UpdateDevicesError> for Error {
    fn from(err: crate::operation::update_devices::UpdateDevicesError) -> Self {
        match err {
            crate::operation::update_devices::UpdateDevicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_domain::UpdateDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_domain::UpdateDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_domain::UpdateDomainError> for Error {
    fn from(err: crate::operation::update_domain::UpdateDomainError) -> Self {
        match err {
            crate::operation::update_domain::UpdateDomainError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::update_domain::UpdateDomainError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::update_domain::UpdateDomainError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_domain::UpdateDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_endpoint::UpdateEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_endpoint::UpdateEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_endpoint::UpdateEndpointError> for Error {
    fn from(err: crate::operation::update_endpoint::UpdateEndpointError) -> Self {
        match err {
            crate::operation::update_endpoint::UpdateEndpointError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::update_endpoint::UpdateEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError> for Error {
    fn from(err: crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError) -> Self {
        match err {
            crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_experiment::UpdateExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_experiment::UpdateExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_experiment::UpdateExperimentError> for Error {
    fn from(err: crate::operation::update_experiment::UpdateExperimentError) -> Self {
        match err {
            crate::operation::update_experiment::UpdateExperimentError::ConflictException(
                inner,
            ) => Error::ConflictException(inner),
            crate::operation::update_experiment::UpdateExperimentError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_experiment::UpdateExperimentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_feature_group::UpdateFeatureGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_feature_group::UpdateFeatureGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_feature_group::UpdateFeatureGroupError> for Error {
    fn from(err: crate::operation::update_feature_group::UpdateFeatureGroupError) -> Self {
        match err {
            crate::operation::update_feature_group::UpdateFeatureGroupError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::update_feature_group::UpdateFeatureGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_feature_metadata::UpdateFeatureMetadataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_feature_metadata::UpdateFeatureMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_feature_metadata::UpdateFeatureMetadataError> for Error {
    fn from(err: crate::operation::update_feature_metadata::UpdateFeatureMetadataError) -> Self {
        match err {
            crate::operation::update_feature_metadata::UpdateFeatureMetadataError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_feature_metadata::UpdateFeatureMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_hub::UpdateHubError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_hub::UpdateHubError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_hub::UpdateHubError> for Error {
    fn from(err: crate::operation::update_hub::UpdateHubError) -> Self {
        match err {
            crate::operation::update_hub::UpdateHubError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_hub::UpdateHubError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_image::UpdateImageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_image::UpdateImageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_image::UpdateImageError> for Error {
    fn from(err: crate::operation::update_image::UpdateImageError) -> Self {
        match err {
            crate::operation::update_image::UpdateImageError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::update_image::UpdateImageError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_image::UpdateImageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_image_version::UpdateImageVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_image_version::UpdateImageVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_image_version::UpdateImageVersionError> for Error {
    fn from(err: crate::operation::update_image_version::UpdateImageVersionError) -> Self {
        match err {
            crate::operation::update_image_version::UpdateImageVersionError::ResourceInUse(
                inner,
            ) => Error::ResourceInUse(inner),
            crate::operation::update_image_version::UpdateImageVersionError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::update_image_version::UpdateImageVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_inference_experiment::UpdateInferenceExperimentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_inference_experiment::UpdateInferenceExperimentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_inference_experiment::UpdateInferenceExperimentError> for Error {
    fn from(
        err: crate::operation::update_inference_experiment::UpdateInferenceExperimentError,
    ) -> Self {
        match err {
            crate::operation::update_inference_experiment::UpdateInferenceExperimentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_inference_experiment::UpdateInferenceExperimentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_inference_experiment::UpdateInferenceExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_model_card::UpdateModelCardError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_model_card::UpdateModelCardError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_model_card::UpdateModelCardError> for Error {
    fn from(err: crate::operation::update_model_card::UpdateModelCardError) -> Self {
        match err {
            crate::operation::update_model_card::UpdateModelCardError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_model_card::UpdateModelCardError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::update_model_card::UpdateModelCardError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_model_card::UpdateModelCardError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_model_package::UpdateModelPackageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_model_package::UpdateModelPackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_model_package::UpdateModelPackageError> for Error {
    fn from(err: crate::operation::update_model_package::UpdateModelPackageError) -> Self {
        match err {
            crate::operation::update_model_package::UpdateModelPackageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_monitoring_alert::UpdateMonitoringAlertError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_monitoring_alert::UpdateMonitoringAlertError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_monitoring_alert::UpdateMonitoringAlertError> for Error {
    fn from(err: crate::operation::update_monitoring_alert::UpdateMonitoringAlertError) -> Self {
        match err {
            crate::operation::update_monitoring_alert::UpdateMonitoringAlertError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::update_monitoring_alert::UpdateMonitoringAlertError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_monitoring_alert::UpdateMonitoringAlertError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_monitoring_schedule::UpdateMonitoringScheduleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_monitoring_schedule::UpdateMonitoringScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_monitoring_schedule::UpdateMonitoringScheduleError> for Error {
    fn from(
        err: crate::operation::update_monitoring_schedule::UpdateMonitoringScheduleError,
    ) -> Self {
        match err {
            crate::operation::update_monitoring_schedule::UpdateMonitoringScheduleError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::update_monitoring_schedule::UpdateMonitoringScheduleError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_monitoring_schedule::UpdateMonitoringScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_notebook_instance::UpdateNotebookInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_notebook_instance::UpdateNotebookInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_notebook_instance::UpdateNotebookInstanceError> for Error {
    fn from(err: crate::operation::update_notebook_instance::UpdateNotebookInstanceError) -> Self {
        match err {
            crate::operation::update_notebook_instance::UpdateNotebookInstanceError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::update_notebook_instance::UpdateNotebookInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_notebook_instance_lifecycle_config::UpdateNotebookInstanceLifecycleConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_notebook_instance_lifecycle_config::UpdateNotebookInstanceLifecycleConfigError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_notebook_instance_lifecycle_config::UpdateNotebookInstanceLifecycleConfigError> for Error {
    fn from(err: crate::operation::update_notebook_instance_lifecycle_config::UpdateNotebookInstanceLifecycleConfigError) -> Self {
        match err {
            crate::operation::update_notebook_instance_lifecycle_config::UpdateNotebookInstanceLifecycleConfigError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::update_notebook_instance_lifecycle_config::UpdateNotebookInstanceLifecycleConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_pipeline::UpdatePipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_pipeline::UpdatePipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_pipeline::UpdatePipelineError> for Error {
    fn from(err: crate::operation::update_pipeline::UpdatePipelineError) -> Self {
        match err {
            crate::operation::update_pipeline::UpdatePipelineError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_pipeline::UpdatePipelineError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_pipeline_execution::UpdatePipelineExecutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_pipeline_execution::UpdatePipelineExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_pipeline_execution::UpdatePipelineExecutionError> for Error {
    fn from(
        err: crate::operation::update_pipeline_execution::UpdatePipelineExecutionError,
    ) -> Self {
        match err {
            crate::operation::update_pipeline_execution::UpdatePipelineExecutionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_pipeline_execution::UpdatePipelineExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_project::UpdateProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_project::UpdateProjectError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_project::UpdateProjectError> for Error {
    fn from(err: crate::operation::update_project::UpdateProjectError) -> Self {
        match err {
            crate::operation::update_project::UpdateProjectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_space::UpdateSpaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_space::UpdateSpaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_space::UpdateSpaceError> for Error {
    fn from(err: crate::operation::update_space::UpdateSpaceError) -> Self {
        match err {
            crate::operation::update_space::UpdateSpaceError::ResourceInUse(inner) => {
                Error::ResourceInUse(inner)
            }
            crate::operation::update_space::UpdateSpaceError::ResourceLimitExceeded(inner) => {
                Error::ResourceLimitExceeded(inner)
            }
            crate::operation::update_space::UpdateSpaceError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_space::UpdateSpaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_training_job::UpdateTrainingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_training_job::UpdateTrainingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_training_job::UpdateTrainingJobError> for Error {
    fn from(err: crate::operation::update_training_job::UpdateTrainingJobError) -> Self {
        match err {
            crate::operation::update_training_job::UpdateTrainingJobError::ResourceNotFound(
                inner,
            ) => Error::ResourceNotFound(inner),
            crate::operation::update_training_job::UpdateTrainingJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_trial::UpdateTrialError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_trial::UpdateTrialError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_trial::UpdateTrialError> for Error {
    fn from(err: crate::operation::update_trial::UpdateTrialError) -> Self {
        match err {
            crate::operation::update_trial::UpdateTrialError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_trial::UpdateTrialError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::update_trial::UpdateTrialError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_trial_component::UpdateTrialComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_trial_component::UpdateTrialComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_trial_component::UpdateTrialComponentError> for Error {
    fn from(err: crate::operation::update_trial_component::UpdateTrialComponentError) -> Self {
        match err {
            crate::operation::update_trial_component::UpdateTrialComponentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_trial_component::UpdateTrialComponentError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_trial_component::UpdateTrialComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_user_profile::UpdateUserProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_user_profile::UpdateUserProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_user_profile::UpdateUserProfileError> for Error {
    fn from(err: crate::operation::update_user_profile::UpdateUserProfileError) -> Self {
        match err {
            crate::operation::update_user_profile::UpdateUserProfileError::ResourceInUse(inner) => Error::ResourceInUse(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_workforce::UpdateWorkforceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_workforce::UpdateWorkforceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_workforce::UpdateWorkforceError> for Error {
    fn from(err: crate::operation::update_workforce::UpdateWorkforceError) -> Self {
        match err {
            crate::operation::update_workforce::UpdateWorkforceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_workforce::UpdateWorkforceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_workteam::UpdateWorkteamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_workteam::UpdateWorkteamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_workteam::UpdateWorkteamError> for Error {
    fn from(err: crate::operation::update_workteam::UpdateWorkteamError) -> Self {
        match err {
            crate::operation::update_workteam::UpdateWorkteamError::ResourceLimitExceeded(
                inner,
            ) => Error::ResourceLimitExceeded(inner),
            crate::operation::update_workteam::UpdateWorkteamError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConflictException(e) => e.request_id(),
            Self::ResourceInUse(e) => e.request_id(),
            Self::ResourceLimitExceeded(e) => e.request_id(),
            Self::ResourceNotFound(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
