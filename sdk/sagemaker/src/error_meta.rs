// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ConflictException(crate::error::ConflictException),
    ResourceInUse(crate::error::ResourceInUse),
    ResourceLimitExceeded(crate::error::ResourceLimitExceeded),
    ResourceNotFound(crate::error::ResourceNotFound),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ResourceInUse(inner) => inner.fmt(f),
            Error::ResourceLimitExceeded(inner) => inner.fmt(f),
            Error::ResourceNotFound(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddAssociationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddAssociationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddAssociationErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::AddAssociationErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::AddAssociationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateTrialComponentError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateTrialComponentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateTrialComponentErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::AssociateTrialComponentErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::AssociateTrialComponentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateActionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateActionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateActionErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateActionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAlgorithmError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAlgorithmError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAlgorithmErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAppError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAppError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAppErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateAppErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateAppErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAppImageConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAppImageConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAppImageConfigErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateAppImageConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateArtifactError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateArtifactError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateArtifactErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateArtifactErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAutoMLJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAutoMLJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAutoMLJobErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateAutoMLJobErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateAutoMLJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCodeRepositoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateCodeRepositoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateCodeRepositoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCompilationJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateCompilationJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateCompilationJobErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateCompilationJobErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateCompilationJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateContextError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateContextError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateContextErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateContextErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDataQualityJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateDataQualityJobDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDataQualityJobDefinitionErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateDataQualityJobDefinitionErrorKind::ResourceLimitExceeded(
                    inner,
                ) => Error::ResourceLimitExceeded(inner),
                crate::error::CreateDataQualityJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDeviceFleetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDeviceFleetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDeviceFleetErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateDeviceFleetErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateDeviceFleetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDomainErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateDomainErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEdgePackagingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateEdgePackagingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEdgePackagingJobErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateEdgePackagingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEndpointErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateEndpointErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEndpointConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateEndpointConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEndpointConfigErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateEndpointConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateExperimentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateExperimentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateExperimentErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateExperimentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateFeatureGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateFeatureGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateFeatureGroupErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateFeatureGroupErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateFeatureGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateFlowDefinitionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateFlowDefinitionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateFlowDefinitionErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateFlowDefinitionErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateFlowDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateHumanTaskUiError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateHumanTaskUiError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateHumanTaskUiErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateHumanTaskUiErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateHumanTaskUiErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateHyperParameterTuningJobError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateHyperParameterTuningJobError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateHyperParameterTuningJobErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateHyperParameterTuningJobErrorKind::ResourceLimitExceeded(
                    inner,
                ) => Error::ResourceLimitExceeded(inner),
                crate::error::CreateHyperParameterTuningJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateImageErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateImageErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateImageVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateImageVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateImageVersionErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateImageVersionErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateImageVersionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::CreateImageVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLabelingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateLabelingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLabelingJobErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateLabelingJobErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateLabelingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateModelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateModelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateModelErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateModelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateModelBiasJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateModelBiasJobDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateModelBiasJobDefinitionErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateModelBiasJobDefinitionErrorKind::ResourceLimitExceeded(
                    inner,
                ) => Error::ResourceLimitExceeded(inner),
                crate::error::CreateModelBiasJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateModelExplainabilityJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateModelExplainabilityJobDefinitionError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateModelExplainabilityJobDefinitionErrorKind::ResourceInUse(inner) => Error::ResourceInUse(inner),
                crate::error::CreateModelExplainabilityJobDefinitionErrorKind::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
                crate::error::CreateModelExplainabilityJobDefinitionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateModelPackageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateModelPackageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateModelPackageErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::CreateModelPackageErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateModelPackageErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateModelPackageGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateModelPackageGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateModelPackageGroupErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateModelPackageGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateModelQualityJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateModelQualityJobDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateModelQualityJobDefinitionErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateModelQualityJobDefinitionErrorKind::ResourceLimitExceeded(
                    inner,
                ) => Error::ResourceLimitExceeded(inner),
                crate::error::CreateModelQualityJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateMonitoringScheduleError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateMonitoringScheduleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateMonitoringScheduleErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateMonitoringScheduleErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateMonitoringScheduleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateNotebookInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateNotebookInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateNotebookInstanceErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateNotebookInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateNotebookInstanceLifecycleConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateNotebookInstanceLifecycleConfigError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateNotebookInstanceLifecycleConfigErrorKind::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
                crate::error::CreateNotebookInstanceLifecycleConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePipelineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreatePipelineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreatePipelineErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreatePipelineErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::CreatePipelineErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePresignedDomainUrlError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreatePresignedDomainUrlError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreatePresignedDomainUrlErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::CreatePresignedDomainUrlErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePresignedNotebookInstanceUrlError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreatePresignedNotebookInstanceUrlError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreatePresignedNotebookInstanceUrlErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateProcessingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateProcessingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateProcessingJobErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateProcessingJobErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateProcessingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::CreateProcessingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateProjectErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateProjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrainingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTrainingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTrainingJobErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateTrainingJobErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateTrainingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::CreateTrainingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransformJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTransformJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransformJobErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateTransformJobErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateTransformJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::CreateTransformJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrialError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTrialError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTrialErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateTrialErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::CreateTrialErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrialComponentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTrialComponentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTrialComponentErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateTrialComponentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUserProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUserProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUserProfileErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateUserProfileErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateUserProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateWorkforceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateWorkforceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateWorkforceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateWorkteamError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateWorkteamError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateWorkteamErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::CreateWorkteamErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::CreateWorkteamErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteActionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteActionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteActionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteActionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAlgorithmError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAlgorithmError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAlgorithmErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAppError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAppError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAppErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::DeleteAppErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteAppErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAppImageConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAppImageConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAppImageConfigErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteAppImageConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteArtifactError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteArtifactError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteArtifactErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteArtifactErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAssociationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAssociationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAssociationErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteAssociationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCodeRepositoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteCodeRepositoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCodeRepositoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteContextError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteContextError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteContextErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteContextErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDataQualityJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteDataQualityJobDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDataQualityJobDefinitionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteDataQualityJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDeviceFleetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDeviceFleetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDeviceFleetErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::DeleteDeviceFleetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDomainErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::DeleteDomainErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEndpointErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEndpointConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteEndpointConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEndpointConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteExperimentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteExperimentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteExperimentErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteExperimentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFeatureGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteFeatureGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteFeatureGroupErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteFeatureGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFlowDefinitionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteFlowDefinitionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteFlowDefinitionErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::DeleteFlowDefinitionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteFlowDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteHumanTaskUiError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteHumanTaskUiError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteHumanTaskUiErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteHumanTaskUiErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteImageErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::DeleteImageErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteImageVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteImageVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteImageVersionErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::DeleteImageVersionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteImageVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteModelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteModelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteModelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteModelBiasJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteModelBiasJobDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteModelBiasJobDefinitionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteModelBiasJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteModelExplainabilityJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteModelExplainabilityJobDefinitionError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteModelExplainabilityJobDefinitionErrorKind::ResourceNotFound(
                    inner,
                ) => Error::ResourceNotFound(inner),
                crate::error::DeleteModelExplainabilityJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteModelPackageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteModelPackageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteModelPackageErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::DeleteModelPackageErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteModelPackageGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteModelPackageGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteModelPackageGroupErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::DeleteModelPackageGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteModelPackageGroupPolicyError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteModelPackageGroupPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteModelPackageGroupPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteModelQualityJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteModelQualityJobDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteModelQualityJobDefinitionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteModelQualityJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteMonitoringScheduleError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteMonitoringScheduleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteMonitoringScheduleErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteMonitoringScheduleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNotebookInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteNotebookInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNotebookInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNotebookInstanceLifecycleConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteNotebookInstanceLifecycleConfigError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNotebookInstanceLifecycleConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePipelineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePipelineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePipelineErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeletePipelineErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteProjectErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::DeleteProjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTrialError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTrialError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTrialErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteTrialErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTrialComponentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTrialComponentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTrialComponentErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteTrialComponentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserProfileErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::DeleteUserProfileErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DeleteUserProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteWorkforceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteWorkforceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteWorkforceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteWorkteamError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteWorkteamError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteWorkteamErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::DeleteWorkteamErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterDevicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeregisterDevicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterDevicesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeActionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeActionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeActionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeActionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAlgorithmError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAlgorithmError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAlgorithmErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAppError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAppError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAppErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeAppErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAppImageConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAppImageConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAppImageConfigErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeAppImageConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeArtifactError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeArtifactError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeArtifactErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeArtifactErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAutoMLJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAutoMLJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAutoMLJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeAutoMLJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCodeRepositoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeCodeRepositoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCodeRepositoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCompilationJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeCompilationJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCompilationJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeCompilationJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeContextError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeContextError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeContextErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeContextErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDataQualityJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDataQualityJobDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDataQualityJobDefinitionErrorKind::ResourceNotFound(
                    inner,
                ) => Error::ResourceNotFound(inner),
                crate::error::DescribeDataQualityJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDeviceErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeDeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDeviceFleetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDeviceFleetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDeviceFleetErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeDeviceFleetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDomainErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEdgePackagingJobError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEdgePackagingJobError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEdgePackagingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeEdgePackagingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEndpointConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEndpointConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEndpointConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeExperimentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeExperimentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeExperimentErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeExperimentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFeatureGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeFeatureGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFeatureGroupErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeFeatureGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFlowDefinitionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeFlowDefinitionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFlowDefinitionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeFlowDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeHumanTaskUiError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeHumanTaskUiError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeHumanTaskUiErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeHumanTaskUiErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeHyperParameterTuningJobError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeHyperParameterTuningJobError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeHyperParameterTuningJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeHyperParameterTuningJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeImageErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeImageVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeImageVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeImageVersionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeImageVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLabelingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeLabelingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLabelingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeLabelingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeModelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeModelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeModelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeModelBiasJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeModelBiasJobDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeModelBiasJobDefinitionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeModelBiasJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::DescribeModelExplainabilityJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeModelExplainabilityJobDefinitionError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeModelExplainabilityJobDefinitionErrorKind::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
                crate::error::DescribeModelExplainabilityJobDefinitionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeModelPackageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeModelPackageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeModelPackageErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeModelPackageGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeModelPackageGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeModelPackageGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeModelQualityJobDefinitionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeModelQualityJobDefinitionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeModelQualityJobDefinitionErrorKind::ResourceNotFound(
                    inner,
                ) => Error::ResourceNotFound(inner),
                crate::error::DescribeModelQualityJobDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMonitoringScheduleError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMonitoringScheduleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMonitoringScheduleErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeMonitoringScheduleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNotebookInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeNotebookInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeNotebookInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNotebookInstanceLifecycleConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeNotebookInstanceLifecycleConfigError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeNotebookInstanceLifecycleConfigErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePipelineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribePipelineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePipelineErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribePipelineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePipelineDefinitionForExecutionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribePipelineDefinitionForExecutionError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePipelineDefinitionForExecutionErrorKind::ResourceNotFound(
                    inner,
                ) => Error::ResourceNotFound(inner),
                crate::error::DescribePipelineDefinitionForExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePipelineExecutionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePipelineExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePipelineExecutionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribePipelineExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeProcessingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeProcessingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeProcessingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeProcessingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeProjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSubscribedWorkteamError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSubscribedWorkteamError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSubscribedWorkteamErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTrainingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTrainingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTrainingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeTrainingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTransformJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTransformJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTransformJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeTransformJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTrialError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTrialError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTrialErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeTrialErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTrialComponentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTrialComponentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTrialComponentErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeTrialComponentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeUserProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeUserProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeUserProfileErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DescribeUserProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeWorkforceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeWorkforceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeWorkforceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeWorkteamError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeWorkteamError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeWorkteamErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableSagemakerServicecatalogPortfolioError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DisableSagemakerServicecatalogPortfolioError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableSagemakerServicecatalogPortfolioErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateTrialComponentError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateTrialComponentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateTrialComponentErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::DisassociateTrialComponentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableSagemakerServicecatalogPortfolioError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::EnableSagemakerServicecatalogPortfolioError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableSagemakerServicecatalogPortfolioErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDeviceFleetReportError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDeviceFleetReportError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDeviceFleetReportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetModelPackageGroupPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetModelPackageGroupPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetModelPackageGroupPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<crate::error::GetSagemakerServicecatalogPortfolioStatusError>,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetSagemakerServicecatalogPortfolioStatusError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSagemakerServicecatalogPortfolioStatusErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSearchSuggestionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSearchSuggestionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSearchSuggestionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListActionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListActionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListActionsErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListActionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAlgorithmsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAlgorithmsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAlgorithmsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAppImageConfigsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAppImageConfigsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAppImageConfigsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAppsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAppsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAppsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListArtifactsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListArtifactsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListArtifactsErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListArtifactsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAssociationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAssociationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAssociationsErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListAssociationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAutoMLJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAutoMLJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAutoMLJobsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCandidatesForAutoMLJobError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListCandidatesForAutoMLJobError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListCandidatesForAutoMLJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListCandidatesForAutoMLJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCodeRepositoriesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListCodeRepositoriesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListCodeRepositoriesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCompilationJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListCompilationJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListCompilationJobsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListContextsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListContextsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListContextsErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListContextsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDataQualityJobDefinitionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListDataQualityJobDefinitionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDataQualityJobDefinitionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDeviceFleetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDeviceFleetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDeviceFleetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDevicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDevicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDevicesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDomainsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDomainsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDomainsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListEdgePackagingJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListEdgePackagingJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListEdgePackagingJobsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListEndpointConfigsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListEndpointConfigsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListEndpointConfigsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListEndpointsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListEndpointsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListEndpointsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListExperimentsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListExperimentsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListExperimentsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListFeatureGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListFeatureGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListFeatureGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListFlowDefinitionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListFlowDefinitionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListFlowDefinitionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHumanTaskUisError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListHumanTaskUisError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListHumanTaskUisErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHyperParameterTuningJobsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListHyperParameterTuningJobsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListHyperParameterTuningJobsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListImagesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListImagesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListImagesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListImageVersionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListImageVersionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListImageVersionsErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListImageVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListLabelingJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListLabelingJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListLabelingJobsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListLabelingJobsForWorkteamError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListLabelingJobsForWorkteamError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListLabelingJobsForWorkteamErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListLabelingJobsForWorkteamErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListModelBiasJobDefinitionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListModelBiasJobDefinitionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListModelBiasJobDefinitionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListModelExplainabilityJobDefinitionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ListModelExplainabilityJobDefinitionsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListModelExplainabilityJobDefinitionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListModelPackageGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListModelPackageGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListModelPackageGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListModelPackagesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListModelPackagesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListModelPackagesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListModelQualityJobDefinitionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListModelQualityJobDefinitionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListModelQualityJobDefinitionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListModelsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListModelsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListModelsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListMonitoringExecutionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListMonitoringExecutionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListMonitoringExecutionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListMonitoringSchedulesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListMonitoringSchedulesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListMonitoringSchedulesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListNotebookInstanceLifecycleConfigsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListNotebookInstanceLifecycleConfigsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListNotebookInstanceLifecycleConfigsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListNotebookInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListNotebookInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListNotebookInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPipelineExecutionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPipelineExecutionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPipelineExecutionsErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListPipelineExecutionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPipelineExecutionStepsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListPipelineExecutionStepsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPipelineExecutionStepsErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListPipelineExecutionStepsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPipelineParametersForExecutionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListPipelineParametersForExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPipelineParametersForExecutionErrorKind::ResourceNotFound(
                    inner,
                ) => Error::ResourceNotFound(inner),
                crate::error::ListPipelineParametersForExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPipelinesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPipelinesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPipelinesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListProcessingJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListProcessingJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListProcessingJobsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListProjectsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListProjectsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListProjectsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSubscribedWorkteamsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListSubscribedWorkteamsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSubscribedWorkteamsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTrainingJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTrainingJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTrainingJobsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::ListTrainingJobsForHyperParameterTuningJobError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ListTrainingJobsForHyperParameterTuningJobError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListTrainingJobsForHyperParameterTuningJobErrorKind::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
                crate::error::ListTrainingJobsForHyperParameterTuningJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTransformJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTransformJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTransformJobsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTrialComponentsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTrialComponentsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTrialComponentsErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListTrialComponentsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTrialsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTrialsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTrialsErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListTrialsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUserProfilesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUserProfilesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUserProfilesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListWorkforcesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListWorkforcesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListWorkforcesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListWorkteamsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListWorkteamsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListWorkteamsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutModelPackageGroupPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutModelPackageGroupPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutModelPackageGroupPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterDevicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterDevicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterDevicesErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::RegisterDevicesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RenderUiTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RenderUiTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RenderUiTemplateErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::RenderUiTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SearchError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SearchError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SearchErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendPipelineExecutionStepFailureError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::SendPipelineExecutionStepFailureError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendPipelineExecutionStepFailureErrorKind::ResourceLimitExceeded(
                    inner,
                ) => Error::ResourceLimitExceeded(inner),
                crate::error::SendPipelineExecutionStepFailureErrorKind::ResourceNotFound(
                    inner,
                ) => Error::ResourceNotFound(inner),
                crate::error::SendPipelineExecutionStepFailureErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendPipelineExecutionStepSuccessError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::SendPipelineExecutionStepSuccessError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendPipelineExecutionStepSuccessErrorKind::ResourceLimitExceeded(
                    inner,
                ) => Error::ResourceLimitExceeded(inner),
                crate::error::SendPipelineExecutionStepSuccessErrorKind::ResourceNotFound(
                    inner,
                ) => Error::ResourceNotFound(inner),
                crate::error::SendPipelineExecutionStepSuccessErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartMonitoringScheduleError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::StartMonitoringScheduleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartMonitoringScheduleErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StartMonitoringScheduleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartNotebookInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartNotebookInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartNotebookInstanceErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::StartNotebookInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartPipelineExecutionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartPipelineExecutionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartPipelineExecutionErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::StartPipelineExecutionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StartPipelineExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopAutoMLJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopAutoMLJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopAutoMLJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StopAutoMLJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopCompilationJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopCompilationJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopCompilationJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StopCompilationJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopEdgePackagingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopEdgePackagingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopEdgePackagingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopHyperParameterTuningJobError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::StopHyperParameterTuningJobError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopHyperParameterTuningJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StopHyperParameterTuningJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopLabelingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopLabelingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopLabelingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StopLabelingJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopMonitoringScheduleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopMonitoringScheduleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopMonitoringScheduleErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StopMonitoringScheduleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopNotebookInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopNotebookInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopNotebookInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopPipelineExecutionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopPipelineExecutionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopPipelineExecutionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StopPipelineExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopProcessingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopProcessingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopProcessingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StopProcessingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopTrainingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopTrainingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopTrainingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StopTrainingJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopTransformJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopTransformJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopTransformJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::StopTransformJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateActionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateActionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateActionErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::UpdateActionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateActionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAppImageConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateAppImageConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAppImageConfigErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateAppImageConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateArtifactError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateArtifactError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateArtifactErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::UpdateArtifactErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateArtifactErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateCodeRepositoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateCodeRepositoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateCodeRepositoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateContextError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateContextError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateContextErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::UpdateContextErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateContextErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDeviceFleetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDeviceFleetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDeviceFleetErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::UpdateDeviceFleetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDevicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDevicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDevicesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDomainErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::UpdateDomainErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::UpdateDomainErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateEndpointErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::UpdateEndpointErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateEndpointWeightsAndCapacitiesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateEndpointWeightsAndCapacitiesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateEndpointWeightsAndCapacitiesErrorKind::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
                crate::error::UpdateEndpointWeightsAndCapacitiesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateExperimentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateExperimentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateExperimentErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::UpdateExperimentErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateExperimentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateImageErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::UpdateImageErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateModelPackageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateModelPackageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateModelPackageErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateMonitoringScheduleError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateMonitoringScheduleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateMonitoringScheduleErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::UpdateMonitoringScheduleErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateMonitoringScheduleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateNotebookInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateNotebookInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateNotebookInstanceErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::UpdateNotebookInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateNotebookInstanceLifecycleConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateNotebookInstanceLifecycleConfigError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateNotebookInstanceLifecycleConfigErrorKind::ResourceLimitExceeded(inner) => Error::ResourceLimitExceeded(inner),
                crate::error::UpdateNotebookInstanceLifecycleConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdatePipelineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdatePipelineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdatePipelineErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdatePipelineErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdatePipelineExecutionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdatePipelineExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdatePipelineExecutionErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdatePipelineExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTrainingJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTrainingJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTrainingJobErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateTrainingJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTrialError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTrialError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTrialErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::UpdateTrialErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateTrialErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTrialComponentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTrialComponentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTrialComponentErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::UpdateTrialComponentErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateTrialComponentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateUserProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateUserProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateUserProfileErrorKind::ResourceInUse(inner) => {
                    Error::ResourceInUse(inner)
                }
                crate::error::UpdateUserProfileErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::UpdateUserProfileErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UpdateUserProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateWorkforceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateWorkforceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateWorkforceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateWorkteamError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateWorkteamError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateWorkteamErrorKind::ResourceLimitExceeded(inner) => {
                    Error::ResourceLimitExceeded(inner)
                }
                crate::error::UpdateWorkteamErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
