// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddAssociationInput,
) {
    if let Some(var_1) = &input.source_arn {
        object.key("SourceArn").string(var_1);
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2);
    }
    if let Some(var_3) = &input.association_type {
        object.key("AssociationType").string(var_3.as_str());
    }
}

pub fn serialize_structure_crate_input_add_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) {
    if let Some(var_4) = &input.resource_arn {
        object.key("ResourceArn").string(var_4);
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_8, item_7);
                object_8.finish();
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_crate_input_associate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTrialComponentInput,
) {
    if let Some(var_9) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_9);
    }
    if let Some(var_10) = &input.trial_name {
        object.key("TrialName").string(var_10);
    }
}

pub fn serialize_structure_crate_input_create_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionInput,
) {
    if let Some(var_11) = &input.action_name {
        object.key("ActionName").string(var_11);
    }
    if let Some(var_12) = &input.source {
        let mut object_13 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_action_source(&mut object_13, var_12);
        object_13.finish();
    }
    if let Some(var_14) = &input.action_type {
        object.key("ActionType").string(var_14);
    }
    if let Some(var_15) = &input.description {
        object.key("Description").string(var_15);
    }
    if let Some(var_16) = &input.status {
        object.key("Status").string(var_16.as_str());
    }
    if let Some(var_17) = &input.properties {
        let mut object_18 = object.key("Properties").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.metadata_properties {
        let mut object_22 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_22,
            var_21,
        );
        object_22.finish();
    }
    if let Some(var_23) = &input.tags {
        let mut array_24 = object.key("Tags").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_26, item_25);
                object_26.finish();
            }
        }
        array_24.finish();
    }
}

pub fn serialize_structure_crate_input_create_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlgorithmInput,
) {
    if let Some(var_27) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_27);
    }
    if let Some(var_28) = &input.algorithm_description {
        object.key("AlgorithmDescription").string(var_28);
    }
    if let Some(var_29) = &input.training_specification {
        let mut object_30 = object.key("TrainingSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_training_specification(
            &mut object_30,
            var_29,
        );
        object_30.finish();
    }
    if let Some(var_31) = &input.inference_specification {
        let mut object_32 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(
            &mut object_32,
            var_31,
        );
        object_32.finish();
    }
    if let Some(var_33) = &input.validation_specification {
        let mut object_34 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_validation_specification(
            &mut object_34,
            var_33,
        );
        object_34.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_35) = &input.tags {
        let mut array_36 = object.key("Tags").start_array();
        for item_37 in var_35 {
            {
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_38, item_37);
                object_38.finish();
            }
        }
        array_36.finish();
    }
}

pub fn serialize_structure_crate_input_create_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInput,
) {
    if let Some(var_39) = &input.domain_id {
        object.key("DomainId").string(var_39);
    }
    if let Some(var_40) = &input.user_profile_name {
        object.key("UserProfileName").string(var_40);
    }
    if let Some(var_41) = &input.app_type {
        object.key("AppType").string(var_41.as_str());
    }
    if let Some(var_42) = &input.app_name {
        object.key("AppName").string(var_42);
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("Tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_46, item_45);
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if let Some(var_47) = &input.resource_spec {
        let mut object_48 = object.key("ResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_48, var_47);
        object_48.finish();
    }
}

pub fn serialize_structure_crate_input_create_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppImageConfigInput,
) {
    if let Some(var_49) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_49);
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("Tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if let Some(var_54) = &input.kernel_gateway_image_config {
        let mut object_55 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(
            &mut object_55,
            var_54,
        );
        object_55.finish();
    }
}

pub fn serialize_structure_crate_input_create_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateArtifactInput,
) {
    if let Some(var_56) = &input.artifact_name {
        object.key("ArtifactName").string(var_56);
    }
    if let Some(var_57) = &input.source {
        let mut object_58 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.artifact_type {
        object.key("ArtifactType").string(var_59);
    }
    if let Some(var_60) = &input.properties {
        let mut object_61 = object.key("Properties").start_object();
        for (key_62, value_63) in var_60 {
            {
                object_61.key(key_62).string(value_63);
            }
        }
        object_61.finish();
    }
    if let Some(var_64) = &input.metadata_properties {
        let mut object_65 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_65,
            var_64,
        );
        object_65.finish();
    }
    if let Some(var_66) = &input.tags {
        let mut array_67 = object.key("Tags").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_69, item_68);
                object_69.finish();
            }
        }
        array_67.finish();
    }
}

pub fn serialize_structure_crate_input_create_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoMlJobInput,
) {
    if let Some(var_70) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_70);
    }
    if let Some(var_71) = &input.input_data_config {
        let mut array_72 = object.key("InputDataConfig").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_crate_model_auto_ml_channel(
                    &mut object_74,
                    item_73,
                );
                object_74.finish();
            }
        }
        array_72.finish();
    }
    if let Some(var_75) = &input.output_data_config {
        let mut object_76 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_output_data_config(
            &mut object_76,
            var_75,
        );
        object_76.finish();
    }
    if let Some(var_77) = &input.problem_type {
        object.key("ProblemType").string(var_77.as_str());
    }
    if let Some(var_78) = &input.auto_ml_job_objective {
        let mut object_79 = object.key("AutoMLJobObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_objective(
            &mut object_79,
            var_78,
        );
        object_79.finish();
    }
    if let Some(var_80) = &input.auto_ml_job_config {
        let mut object_81 = object.key("AutoMLJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_config(&mut object_81, var_80);
        object_81.finish();
    }
    if let Some(var_82) = &input.role_arn {
        object.key("RoleArn").string(var_82);
    }
    if input.generate_candidate_definitions_only {
        object
            .key("GenerateCandidateDefinitionsOnly")
            .boolean(input.generate_candidate_definitions_only);
    }
    if let Some(var_83) = &input.tags {
        let mut array_84 = object.key("Tags").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_86, item_85);
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.model_deploy_config {
        let mut object_88 = object.key("ModelDeployConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_deploy_config(
            &mut object_88,
            var_87,
        );
        object_88.finish();
    }
}

pub fn serialize_structure_crate_input_create_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeRepositoryInput,
) {
    if let Some(var_89) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_89);
    }
    if let Some(var_90) = &input.git_config {
        let mut object_91 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config(&mut object_91, var_90);
        object_91.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("Tags").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_95, item_94);
                object_95.finish();
            }
        }
        array_93.finish();
    }
}

pub fn serialize_structure_crate_input_create_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCompilationJobInput,
) {
    if let Some(var_96) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_96);
    }
    if let Some(var_97) = &input.role_arn {
        object.key("RoleArn").string(var_97);
    }
    if let Some(var_98) = &input.input_config {
        let mut object_99 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_input_config(&mut object_99, var_98);
        object_99.finish();
    }
    if let Some(var_100) = &input.output_config {
        let mut object_101 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_config(&mut object_101, var_100);
        object_101.finish();
    }
    if let Some(var_102) = &input.vpc_config {
        let mut object_103 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_neo_vpc_config(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.stopping_condition {
        let mut object_105 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_105,
            var_104,
        );
        object_105.finish();
    }
    if let Some(var_106) = &input.tags {
        let mut array_107 = object.key("Tags").start_array();
        for item_108 in var_106 {
            {
                let mut object_109 = array_107.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_109, item_108);
                object_109.finish();
            }
        }
        array_107.finish();
    }
}

pub fn serialize_structure_crate_input_create_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContextInput,
) {
    if let Some(var_110) = &input.context_name {
        object.key("ContextName").string(var_110);
    }
    if let Some(var_111) = &input.source {
        let mut object_112 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_context_source(&mut object_112, var_111);
        object_112.finish();
    }
    if let Some(var_113) = &input.context_type {
        object.key("ContextType").string(var_113);
    }
    if let Some(var_114) = &input.description {
        object.key("Description").string(var_114);
    }
    if let Some(var_115) = &input.properties {
        let mut object_116 = object.key("Properties").start_object();
        for (key_117, value_118) in var_115 {
            {
                object_116.key(key_117).string(value_118);
            }
        }
        object_116.finish();
    }
    if let Some(var_119) = &input.tags {
        let mut array_120 = object.key("Tags").start_array();
        for item_121 in var_119 {
            {
                let mut object_122 = array_120.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_122, item_121);
                object_122.finish();
            }
        }
        array_120.finish();
    }
}

pub fn serialize_structure_crate_input_create_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataQualityJobDefinitionInput,
) {
    if let Some(var_123) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_123);
    }
    if let Some(var_124) = &input.data_quality_baseline_config {
        let mut object_125 = object.key("DataQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_baseline_config(
            &mut object_125,
            var_124,
        );
        object_125.finish();
    }
    if let Some(var_126) = &input.data_quality_app_specification {
        let mut object_127 = object.key("DataQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_app_specification(
            &mut object_127,
            var_126,
        );
        object_127.finish();
    }
    if let Some(var_128) = &input.data_quality_job_input {
        let mut object_129 = object.key("DataQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_job_input(
            &mut object_129,
            var_128,
        );
        object_129.finish();
    }
    if let Some(var_130) = &input.data_quality_job_output_config {
        let mut object_131 = object.key("DataQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_131,
            var_130,
        );
        object_131.finish();
    }
    if let Some(var_132) = &input.job_resources {
        let mut object_133 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_133,
            var_132,
        );
        object_133.finish();
    }
    if let Some(var_134) = &input.network_config {
        let mut object_135 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_135,
            var_134,
        );
        object_135.finish();
    }
    if let Some(var_136) = &input.role_arn {
        object.key("RoleArn").string(var_136);
    }
    if let Some(var_137) = &input.stopping_condition {
        let mut object_138 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_138,
            var_137,
        );
        object_138.finish();
    }
    if let Some(var_139) = &input.tags {
        let mut array_140 = object.key("Tags").start_array();
        for item_141 in var_139 {
            {
                let mut object_142 = array_140.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_142, item_141);
                object_142.finish();
            }
        }
        array_140.finish();
    }
}

pub fn serialize_structure_crate_input_create_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceFleetInput,
) {
    if let Some(var_143) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_143);
    }
    if let Some(var_144) = &input.role_arn {
        object.key("RoleArn").string(var_144);
    }
    if let Some(var_145) = &input.description {
        object.key("Description").string(var_145);
    }
    if let Some(var_146) = &input.output_config {
        let mut object_147 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_147,
            var_146,
        );
        object_147.finish();
    }
    if let Some(var_148) = &input.tags {
        let mut array_149 = object.key("Tags").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_151, item_150);
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_152);
    }
}

pub fn serialize_structure_crate_input_create_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) {
    if let Some(var_153) = &input.domain_name {
        object.key("DomainName").string(var_153);
    }
    if let Some(var_154) = &input.auth_mode {
        object.key("AuthMode").string(var_154.as_str());
    }
    if let Some(var_155) = &input.default_user_settings {
        let mut object_156 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_156, var_155);
        object_156.finish();
    }
    if let Some(var_157) = &input.subnet_ids {
        let mut array_158 = object.key("SubnetIds").start_array();
        for item_159 in var_157 {
            {
                array_158.value().string(item_159);
            }
        }
        array_158.finish();
    }
    if let Some(var_160) = &input.vpc_id {
        object.key("VpcId").string(var_160);
    }
    if let Some(var_161) = &input.tags {
        let mut array_162 = object.key("Tags").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_164, item_163);
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_165.as_str());
    }
    if let Some(var_166) = &input.home_efs_file_system_kms_key_id {
        object.key("HomeEfsFileSystemKmsKeyId").string(var_166);
    }
    if let Some(var_167) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_167);
    }
}

pub fn serialize_structure_crate_input_create_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgePackagingJobInput,
) {
    if let Some(var_168) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_168);
    }
    if let Some(var_169) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_169);
    }
    if let Some(var_170) = &input.model_name {
        object.key("ModelName").string(var_170);
    }
    if let Some(var_171) = &input.model_version {
        object.key("ModelVersion").string(var_171);
    }
    if let Some(var_172) = &input.role_arn {
        object.key("RoleArn").string(var_172);
    }
    if let Some(var_173) = &input.output_config {
        let mut object_174 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_174,
            var_173,
        );
        object_174.finish();
    }
    if let Some(var_175) = &input.resource_key {
        object.key("ResourceKey").string(var_175);
    }
    if let Some(var_176) = &input.tags {
        let mut array_177 = object.key("Tags").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_179, item_178);
                object_179.finish();
            }
        }
        array_177.finish();
    }
}

pub fn serialize_structure_crate_input_create_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) {
    if let Some(var_180) = &input.endpoint_name {
        object.key("EndpointName").string(var_180);
    }
    if let Some(var_181) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_181);
    }
    if let Some(var_182) = &input.tags {
        let mut array_183 = object.key("Tags").start_array();
        for item_184 in var_182 {
            {
                let mut object_185 = array_183.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_185, item_184);
                object_185.finish();
            }
        }
        array_183.finish();
    }
}

pub fn serialize_structure_crate_input_create_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointConfigInput,
) {
    if let Some(var_186) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_186);
    }
    if let Some(var_187) = &input.production_variants {
        let mut array_188 = object.key("ProductionVariants").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_crate_model_production_variant(
                    &mut object_190,
                    item_189,
                );
                object_190.finish();
            }
        }
        array_188.finish();
    }
    if let Some(var_191) = &input.data_capture_config {
        let mut object_192 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_capture_config(
            &mut object_192,
            var_191,
        );
        object_192.finish();
    }
    if let Some(var_193) = &input.tags {
        let mut array_194 = object.key("Tags").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_196, item_195);
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_197);
    }
    if let Some(var_198) = &input.async_inference_config {
        let mut object_199 = object.key("AsyncInferenceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_config(
            &mut object_199,
            var_198,
        );
        object_199.finish();
    }
}

pub fn serialize_structure_crate_input_create_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperimentInput,
) {
    if let Some(var_200) = &input.experiment_name {
        object.key("ExperimentName").string(var_200);
    }
    if let Some(var_201) = &input.display_name {
        object.key("DisplayName").string(var_201);
    }
    if let Some(var_202) = &input.description {
        object.key("Description").string(var_202);
    }
    if let Some(var_203) = &input.tags {
        let mut array_204 = object.key("Tags").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_206, item_205);
                object_206.finish();
            }
        }
        array_204.finish();
    }
}

pub fn serialize_structure_crate_input_create_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFeatureGroupInput,
) {
    if let Some(var_207) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_207);
    }
    if let Some(var_208) = &input.record_identifier_feature_name {
        object.key("RecordIdentifierFeatureName").string(var_208);
    }
    if let Some(var_209) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_209);
    }
    if let Some(var_210) = &input.feature_definitions {
        let mut array_211 = object.key("FeatureDefinitions").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_definition(
                    &mut object_213,
                    item_212,
                );
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.online_store_config {
        let mut object_215 = object.key("OnlineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_config(
            &mut object_215,
            var_214,
        );
        object_215.finish();
    }
    if let Some(var_216) = &input.offline_store_config {
        let mut object_217 = object.key("OfflineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_offline_store_config(
            &mut object_217,
            var_216,
        );
        object_217.finish();
    }
    if let Some(var_218) = &input.role_arn {
        object.key("RoleArn").string(var_218);
    }
    if let Some(var_219) = &input.description {
        object.key("Description").string(var_219);
    }
    if let Some(var_220) = &input.tags {
        let mut array_221 = object.key("Tags").start_array();
        for item_222 in var_220 {
            {
                let mut object_223 = array_221.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_223, item_222);
                object_223.finish();
            }
        }
        array_221.finish();
    }
}

pub fn serialize_structure_crate_input_create_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowDefinitionInput,
) {
    if let Some(var_224) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_224);
    }
    if let Some(var_225) = &input.human_loop_request_source {
        let mut object_226 = object.key("HumanLoopRequestSource").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_request_source(
            &mut object_226,
            var_225,
        );
        object_226.finish();
    }
    if let Some(var_227) = &input.human_loop_activation_config {
        let mut object_228 = object.key("HumanLoopActivationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_config(
            &mut object_228,
            var_227,
        );
        object_228.finish();
    }
    if let Some(var_229) = &input.human_loop_config {
        let mut object_230 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_config(
            &mut object_230,
            var_229,
        );
        object_230.finish();
    }
    if let Some(var_231) = &input.output_config {
        let mut object_232 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_flow_definition_output_config(
            &mut object_232,
            var_231,
        );
        object_232.finish();
    }
    if let Some(var_233) = &input.role_arn {
        object.key("RoleArn").string(var_233);
    }
    if let Some(var_234) = &input.tags {
        let mut array_235 = object.key("Tags").start_array();
        for item_236 in var_234 {
            {
                let mut object_237 = array_235.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_237, item_236);
                object_237.finish();
            }
        }
        array_235.finish();
    }
}

pub fn serialize_structure_crate_input_create_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHumanTaskUiInput,
) {
    if let Some(var_238) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_238);
    }
    if let Some(var_239) = &input.ui_template {
        let mut object_240 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_240, var_239);
        object_240.finish();
    }
    if let Some(var_241) = &input.tags {
        let mut array_242 = object.key("Tags").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_244, item_243);
                object_244.finish();
            }
        }
        array_242.finish();
    }
}

pub fn serialize_structure_crate_input_create_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHyperParameterTuningJobInput,
) {
    if let Some(var_245) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_245);
    }
    if let Some(var_246) = &input.hyper_parameter_tuning_job_config {
        let mut object_247 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_config(
            &mut object_247,
            var_246,
        );
        object_247.finish();
    }
    if let Some(var_248) = &input.training_job_definition {
        let mut object_249 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(
            &mut object_249,
            var_248,
        );
        object_249.finish();
    }
    if let Some(var_250) = &input.training_job_definitions {
        let mut array_251 = object.key("TrainingJobDefinitions").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(&mut object_253, item_252);
                object_253.finish();
            }
        }
        array_251.finish();
    }
    if let Some(var_254) = &input.warm_start_config {
        let mut object_255 = object.key("WarmStartConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(&mut object_255, var_254);
        object_255.finish();
    }
    if let Some(var_256) = &input.tags {
        let mut array_257 = object.key("Tags").start_array();
        for item_258 in var_256 {
            {
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_259, item_258);
                object_259.finish();
            }
        }
        array_257.finish();
    }
}

pub fn serialize_structure_crate_input_create_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) {
    if let Some(var_260) = &input.description {
        object.key("Description").string(var_260);
    }
    if let Some(var_261) = &input.display_name {
        object.key("DisplayName").string(var_261);
    }
    if let Some(var_262) = &input.image_name {
        object.key("ImageName").string(var_262);
    }
    if let Some(var_263) = &input.role_arn {
        object.key("RoleArn").string(var_263);
    }
    if let Some(var_264) = &input.tags {
        let mut array_265 = object.key("Tags").start_array();
        for item_266 in var_264 {
            {
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_267, item_266);
                object_267.finish();
            }
        }
        array_265.finish();
    }
}

pub fn serialize_structure_crate_input_create_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageVersionInput,
) {
    if let Some(var_268) = &input.base_image {
        object.key("BaseImage").string(var_268);
    }
    if let Some(var_269) = &input.client_token {
        object.key("ClientToken").string(var_269);
    }
    if let Some(var_270) = &input.image_name {
        object.key("ImageName").string(var_270);
    }
}

pub fn serialize_structure_crate_input_create_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLabelingJobInput,
) {
    if let Some(var_271) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_271);
    }
    if let Some(var_272) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_272);
    }
    if let Some(var_273) = &input.input_config {
        let mut object_274 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_input_config(
            &mut object_274,
            var_273,
        );
        object_274.finish();
    }
    if let Some(var_275) = &input.output_config {
        let mut object_276 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_output_config(
            &mut object_276,
            var_275,
        );
        object_276.finish();
    }
    if let Some(var_277) = &input.role_arn {
        object.key("RoleArn").string(var_277);
    }
    if let Some(var_278) = &input.label_category_config_s3_uri {
        object.key("LabelCategoryConfigS3Uri").string(var_278);
    }
    if let Some(var_279) = &input.stopping_conditions {
        let mut object_280 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_stopping_conditions(
            &mut object_280,
            var_279,
        );
        object_280.finish();
    }
    if let Some(var_281) = &input.labeling_job_algorithms_config {
        let mut object_282 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_algorithms_config(
            &mut object_282,
            var_281,
        );
        object_282.finish();
    }
    if let Some(var_283) = &input.human_task_config {
        let mut object_284 = object.key("HumanTaskConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_task_config(
            &mut object_284,
            var_283,
        );
        object_284.finish();
    }
    if let Some(var_285) = &input.tags {
        let mut array_286 = object.key("Tags").start_array();
        for item_287 in var_285 {
            {
                let mut object_288 = array_286.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_288, item_287);
                object_288.finish();
            }
        }
        array_286.finish();
    }
}

pub fn serialize_structure_crate_input_create_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) {
    if let Some(var_289) = &input.model_name {
        object.key("ModelName").string(var_289);
    }
    if let Some(var_290) = &input.primary_container {
        let mut object_291 = object.key("PrimaryContainer").start_object();
        crate::json_ser::serialize_structure_crate_model_container_definition(
            &mut object_291,
            var_290,
        );
        object_291.finish();
    }
    if let Some(var_292) = &input.containers {
        let mut array_293 = object.key("Containers").start_array();
        for item_294 in var_292 {
            {
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_crate_model_container_definition(
                    &mut object_295,
                    item_294,
                );
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.inference_execution_config {
        let mut object_297 = object.key("InferenceExecutionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_execution_config(
            &mut object_297,
            var_296,
        );
        object_297.finish();
    }
    if let Some(var_298) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_298);
    }
    if let Some(var_299) = &input.tags {
        let mut array_300 = object.key("Tags").start_array();
        for item_301 in var_299 {
            {
                let mut object_302 = array_300.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_302, item_301);
                object_302.finish();
            }
        }
        array_300.finish();
    }
    if let Some(var_303) = &input.vpc_config {
        let mut object_304 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_304, var_303);
        object_304.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
}

pub fn serialize_structure_crate_input_create_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelBiasJobDefinitionInput,
) {
    if let Some(var_305) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_305);
    }
    if let Some(var_306) = &input.model_bias_baseline_config {
        let mut object_307 = object.key("ModelBiasBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_baseline_config(
            &mut object_307,
            var_306,
        );
        object_307.finish();
    }
    if let Some(var_308) = &input.model_bias_app_specification {
        let mut object_309 = object.key("ModelBiasAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_app_specification(
            &mut object_309,
            var_308,
        );
        object_309.finish();
    }
    if let Some(var_310) = &input.model_bias_job_input {
        let mut object_311 = object.key("ModelBiasJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_job_input(
            &mut object_311,
            var_310,
        );
        object_311.finish();
    }
    if let Some(var_312) = &input.model_bias_job_output_config {
        let mut object_313 = object.key("ModelBiasJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_313,
            var_312,
        );
        object_313.finish();
    }
    if let Some(var_314) = &input.job_resources {
        let mut object_315 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_315,
            var_314,
        );
        object_315.finish();
    }
    if let Some(var_316) = &input.network_config {
        let mut object_317 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_317,
            var_316,
        );
        object_317.finish();
    }
    if let Some(var_318) = &input.role_arn {
        object.key("RoleArn").string(var_318);
    }
    if let Some(var_319) = &input.stopping_condition {
        let mut object_320 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_320,
            var_319,
        );
        object_320.finish();
    }
    if let Some(var_321) = &input.tags {
        let mut array_322 = object.key("Tags").start_array();
        for item_323 in var_321 {
            {
                let mut object_324 = array_322.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_324, item_323);
                object_324.finish();
            }
        }
        array_322.finish();
    }
}

pub fn serialize_structure_crate_input_create_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_325) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_325);
    }
    if let Some(var_326) = &input.model_explainability_baseline_config {
        let mut object_327 = object
            .key("ModelExplainabilityBaselineConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_baseline_config(
            &mut object_327,
            var_326,
        );
        object_327.finish();
    }
    if let Some(var_328) = &input.model_explainability_app_specification {
        let mut object_329 = object
            .key("ModelExplainabilityAppSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_app_specification(
            &mut object_329,
            var_328,
        );
        object_329.finish();
    }
    if let Some(var_330) = &input.model_explainability_job_input {
        let mut object_331 = object.key("ModelExplainabilityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_job_input(
            &mut object_331,
            var_330,
        );
        object_331.finish();
    }
    if let Some(var_332) = &input.model_explainability_job_output_config {
        let mut object_333 = object
            .key("ModelExplainabilityJobOutputConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_333,
            var_332,
        );
        object_333.finish();
    }
    if let Some(var_334) = &input.job_resources {
        let mut object_335 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_335,
            var_334,
        );
        object_335.finish();
    }
    if let Some(var_336) = &input.network_config {
        let mut object_337 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_337,
            var_336,
        );
        object_337.finish();
    }
    if let Some(var_338) = &input.role_arn {
        object.key("RoleArn").string(var_338);
    }
    if let Some(var_339) = &input.stopping_condition {
        let mut object_340 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_340,
            var_339,
        );
        object_340.finish();
    }
    if let Some(var_341) = &input.tags {
        let mut array_342 = object.key("Tags").start_array();
        for item_343 in var_341 {
            {
                let mut object_344 = array_342.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_344, item_343);
                object_344.finish();
            }
        }
        array_342.finish();
    }
}

pub fn serialize_structure_crate_input_create_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageInput,
) {
    if let Some(var_345) = &input.model_package_name {
        object.key("ModelPackageName").string(var_345);
    }
    if let Some(var_346) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_346);
    }
    if let Some(var_347) = &input.model_package_description {
        object.key("ModelPackageDescription").string(var_347);
    }
    if let Some(var_348) = &input.inference_specification {
        let mut object_349 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(
            &mut object_349,
            var_348,
        );
        object_349.finish();
    }
    if let Some(var_350) = &input.validation_specification {
        let mut object_351 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_package_validation_specification(
            &mut object_351,
            var_350,
        );
        object_351.finish();
    }
    if let Some(var_352) = &input.source_algorithm_specification {
        let mut object_353 = object.key("SourceAlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_source_algorithm_specification(
            &mut object_353,
            var_352,
        );
        object_353.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_354) = &input.tags {
        let mut array_355 = object.key("Tags").start_array();
        for item_356 in var_354 {
            {
                let mut object_357 = array_355.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_357, item_356);
                object_357.finish();
            }
        }
        array_355.finish();
    }
    if let Some(var_358) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_358.as_str());
    }
    if let Some(var_359) = &input.metadata_properties {
        let mut object_360 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_360,
            var_359,
        );
        object_360.finish();
    }
    if let Some(var_361) = &input.model_metrics {
        let mut object_362 = object.key("ModelMetrics").start_object();
        crate::json_ser::serialize_structure_crate_model_model_metrics(&mut object_362, var_361);
        object_362.finish();
    }
    if let Some(var_363) = &input.client_token {
        object.key("ClientToken").string(var_363);
    }
}

pub fn serialize_structure_crate_input_create_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageGroupInput,
) {
    if let Some(var_364) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_364);
    }
    if let Some(var_365) = &input.model_package_group_description {
        object.key("ModelPackageGroupDescription").string(var_365);
    }
    if let Some(var_366) = &input.tags {
        let mut array_367 = object.key("Tags").start_array();
        for item_368 in var_366 {
            {
                let mut object_369 = array_367.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_369, item_368);
                object_369.finish();
            }
        }
        array_367.finish();
    }
}

pub fn serialize_structure_crate_input_create_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelQualityJobDefinitionInput,
) {
    if let Some(var_370) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_370);
    }
    if let Some(var_371) = &input.model_quality_baseline_config {
        let mut object_372 = object.key("ModelQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_baseline_config(
            &mut object_372,
            var_371,
        );
        object_372.finish();
    }
    if let Some(var_373) = &input.model_quality_app_specification {
        let mut object_374 = object.key("ModelQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_app_specification(
            &mut object_374,
            var_373,
        );
        object_374.finish();
    }
    if let Some(var_375) = &input.model_quality_job_input {
        let mut object_376 = object.key("ModelQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_job_input(
            &mut object_376,
            var_375,
        );
        object_376.finish();
    }
    if let Some(var_377) = &input.model_quality_job_output_config {
        let mut object_378 = object.key("ModelQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_378,
            var_377,
        );
        object_378.finish();
    }
    if let Some(var_379) = &input.job_resources {
        let mut object_380 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_380,
            var_379,
        );
        object_380.finish();
    }
    if let Some(var_381) = &input.network_config {
        let mut object_382 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_382,
            var_381,
        );
        object_382.finish();
    }
    if let Some(var_383) = &input.role_arn {
        object.key("RoleArn").string(var_383);
    }
    if let Some(var_384) = &input.stopping_condition {
        let mut object_385 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_385,
            var_384,
        );
        object_385.finish();
    }
    if let Some(var_386) = &input.tags {
        let mut array_387 = object.key("Tags").start_array();
        for item_388 in var_386 {
            {
                let mut object_389 = array_387.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_389, item_388);
                object_389.finish();
            }
        }
        array_387.finish();
    }
}

pub fn serialize_structure_crate_input_create_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMonitoringScheduleInput,
) {
    if let Some(var_390) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_390);
    }
    if let Some(var_391) = &input.monitoring_schedule_config {
        let mut object_392 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(
            &mut object_392,
            var_391,
        );
        object_392.finish();
    }
    if let Some(var_393) = &input.tags {
        let mut array_394 = object.key("Tags").start_array();
        for item_395 in var_393 {
            {
                let mut object_396 = array_394.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_396, item_395);
                object_396.finish();
            }
        }
        array_394.finish();
    }
}

pub fn serialize_structure_crate_input_create_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceInput,
) {
    if let Some(var_397) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_397);
    }
    if let Some(var_398) = &input.instance_type {
        object.key("InstanceType").string(var_398.as_str());
    }
    if let Some(var_399) = &input.subnet_id {
        object.key("SubnetId").string(var_399);
    }
    if let Some(var_400) = &input.security_group_ids {
        let mut array_401 = object.key("SecurityGroupIds").start_array();
        for item_402 in var_400 {
            {
                array_401.value().string(item_402);
            }
        }
        array_401.finish();
    }
    if let Some(var_403) = &input.role_arn {
        object.key("RoleArn").string(var_403);
    }
    if let Some(var_404) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_404);
    }
    if let Some(var_405) = &input.tags {
        let mut array_406 = object.key("Tags").start_array();
        for item_407 in var_405 {
            {
                let mut object_408 = array_406.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_408, item_407);
                object_408.finish();
            }
        }
        array_406.finish();
    }
    if let Some(var_409) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_409);
    }
    if let Some(var_410) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_410.as_str());
    }
    if let Some(var_411) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_411).into()),
        );
    }
    if let Some(var_412) = &input.accelerator_types {
        let mut array_413 = object.key("AcceleratorTypes").start_array();
        for item_414 in var_412 {
            {
                array_413.value().string(item_414.as_str());
            }
        }
        array_413.finish();
    }
    if let Some(var_415) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_415);
    }
    if let Some(var_416) = &input.additional_code_repositories {
        let mut array_417 = object.key("AdditionalCodeRepositories").start_array();
        for item_418 in var_416 {
            {
                array_417.value().string(item_418);
            }
        }
        array_417.finish();
    }
    if let Some(var_419) = &input.root_access {
        object.key("RootAccess").string(var_419.as_str());
    }
    if let Some(var_420) = &input.platform_identifier {
        object.key("PlatformIdentifier").string(var_420);
    }
}

pub fn serialize_structure_crate_input_create_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_421) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_421);
    }
    if let Some(var_422) = &input.on_create {
        let mut array_423 = object.key("OnCreate").start_array();
        for item_424 in var_422 {
            {
                let mut object_425 = array_423.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_425,
                    item_424,
                );
                object_425.finish();
            }
        }
        array_423.finish();
    }
    if let Some(var_426) = &input.on_start {
        let mut array_427 = object.key("OnStart").start_array();
        for item_428 in var_426 {
            {
                let mut object_429 = array_427.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_429,
                    item_428,
                );
                object_429.finish();
            }
        }
        array_427.finish();
    }
}

pub fn serialize_structure_crate_input_create_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePipelineInput,
) {
    if let Some(var_430) = &input.pipeline_name {
        object.key("PipelineName").string(var_430);
    }
    if let Some(var_431) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_431);
    }
    if let Some(var_432) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_432);
    }
    if let Some(var_433) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_433);
    }
    if let Some(var_434) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_434);
    }
    if let Some(var_435) = &input.role_arn {
        object.key("RoleArn").string(var_435);
    }
    if let Some(var_436) = &input.tags {
        let mut array_437 = object.key("Tags").start_array();
        for item_438 in var_436 {
            {
                let mut object_439 = array_437.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_439, item_438);
                object_439.finish();
            }
        }
        array_437.finish();
    }
}

pub fn serialize_structure_crate_input_create_presigned_domain_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedDomainUrlInput,
) {
    if let Some(var_440) = &input.domain_id {
        object.key("DomainId").string(var_440);
    }
    if let Some(var_441) = &input.user_profile_name {
        object.key("UserProfileName").string(var_441);
    }
    if let Some(var_442) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    if let Some(var_443) = &input.expires_in_seconds {
        object.key("ExpiresInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_443).into()),
        );
    }
}

pub fn serialize_structure_crate_input_create_presigned_notebook_instance_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedNotebookInstanceUrlInput,
) {
    if let Some(var_444) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_444);
    }
    if let Some(var_445) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_445).into()),
        );
    }
}

pub fn serialize_structure_crate_input_create_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProcessingJobInput,
) {
    if let Some(var_446) = &input.processing_inputs {
        let mut array_447 = object.key("ProcessingInputs").start_array();
        for item_448 in var_446 {
            {
                let mut object_449 = array_447.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_input(
                    &mut object_449,
                    item_448,
                );
                object_449.finish();
            }
        }
        array_447.finish();
    }
    if let Some(var_450) = &input.processing_output_config {
        let mut object_451 = object.key("ProcessingOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_output_config(
            &mut object_451,
            var_450,
        );
        object_451.finish();
    }
    if let Some(var_452) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_452);
    }
    if let Some(var_453) = &input.processing_resources {
        let mut object_454 = object.key("ProcessingResources").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_resources(
            &mut object_454,
            var_453,
        );
        object_454.finish();
    }
    if let Some(var_455) = &input.stopping_condition {
        let mut object_456 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_stopping_condition(
            &mut object_456,
            var_455,
        );
        object_456.finish();
    }
    if let Some(var_457) = &input.app_specification {
        let mut object_458 = object.key("AppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_app_specification(
            &mut object_458,
            var_457,
        );
        object_458.finish();
    }
    if let Some(var_459) = &input.environment {
        let mut object_460 = object.key("Environment").start_object();
        for (key_461, value_462) in var_459 {
            {
                object_460.key(key_461).string(value_462);
            }
        }
        object_460.finish();
    }
    if let Some(var_463) = &input.network_config {
        let mut object_464 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(&mut object_464, var_463);
        object_464.finish();
    }
    if let Some(var_465) = &input.role_arn {
        object.key("RoleArn").string(var_465);
    }
    if let Some(var_466) = &input.tags {
        let mut array_467 = object.key("Tags").start_array();
        for item_468 in var_466 {
            {
                let mut object_469 = array_467.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_469, item_468);
                object_469.finish();
            }
        }
        array_467.finish();
    }
    if let Some(var_470) = &input.experiment_config {
        let mut object_471 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_471,
            var_470,
        );
        object_471.finish();
    }
}

pub fn serialize_structure_crate_input_create_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) {
    if let Some(var_472) = &input.project_name {
        object.key("ProjectName").string(var_472);
    }
    if let Some(var_473) = &input.project_description {
        object.key("ProjectDescription").string(var_473);
    }
    if let Some(var_474) = &input.service_catalog_provisioning_details {
        let mut object_475 = object
            .key("ServiceCatalogProvisioningDetails")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_service_catalog_provisioning_details(
            &mut object_475,
            var_474,
        );
        object_475.finish();
    }
    if let Some(var_476) = &input.tags {
        let mut array_477 = object.key("Tags").start_array();
        for item_478 in var_476 {
            {
                let mut object_479 = array_477.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_479, item_478);
                object_479.finish();
            }
        }
        array_477.finish();
    }
}

pub fn serialize_structure_crate_input_create_studio_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioLifecycleConfigInput,
) {
    if let Some(var_480) = &input.studio_lifecycle_config_name {
        object.key("StudioLifecycleConfigName").string(var_480);
    }
    if let Some(var_481) = &input.studio_lifecycle_config_content {
        object.key("StudioLifecycleConfigContent").string(var_481);
    }
    if let Some(var_482) = &input.studio_lifecycle_config_app_type {
        object
            .key("StudioLifecycleConfigAppType")
            .string(var_482.as_str());
    }
    if let Some(var_483) = &input.tags {
        let mut array_484 = object.key("Tags").start_array();
        for item_485 in var_483 {
            {
                let mut object_486 = array_484.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_486, item_485);
                object_486.finish();
            }
        }
        array_484.finish();
    }
}

pub fn serialize_structure_crate_input_create_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrainingJobInput,
) {
    if let Some(var_487) = &input.training_job_name {
        object.key("TrainingJobName").string(var_487);
    }
    if let Some(var_488) = &input.hyper_parameters {
        let mut object_489 = object.key("HyperParameters").start_object();
        for (key_490, value_491) in var_488 {
            {
                object_489.key(key_490).string(value_491);
            }
        }
        object_489.finish();
    }
    if let Some(var_492) = &input.algorithm_specification {
        let mut object_493 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_specification(
            &mut object_493,
            var_492,
        );
        object_493.finish();
    }
    if let Some(var_494) = &input.role_arn {
        object.key("RoleArn").string(var_494);
    }
    if let Some(var_495) = &input.input_data_config {
        let mut array_496 = object.key("InputDataConfig").start_array();
        for item_497 in var_495 {
            {
                let mut object_498 = array_496.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(&mut object_498, item_497);
                object_498.finish();
            }
        }
        array_496.finish();
    }
    if let Some(var_499) = &input.output_data_config {
        let mut object_500 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_500,
            var_499,
        );
        object_500.finish();
    }
    if let Some(var_501) = &input.resource_config {
        let mut object_502 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(&mut object_502, var_501);
        object_502.finish();
    }
    if let Some(var_503) = &input.vpc_config {
        let mut object_504 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_504, var_503);
        object_504.finish();
    }
    if let Some(var_505) = &input.stopping_condition {
        let mut object_506 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_506,
            var_505,
        );
        object_506.finish();
    }
    if let Some(var_507) = &input.tags {
        let mut array_508 = object.key("Tags").start_array();
        for item_509 in var_507 {
            {
                let mut object_510 = array_508.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_510, item_509);
                object_510.finish();
            }
        }
        array_508.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_511) = &input.checkpoint_config {
        let mut object_512 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(
            &mut object_512,
            var_511,
        );
        object_512.finish();
    }
    if let Some(var_513) = &input.debug_hook_config {
        let mut object_514 = object.key("DebugHookConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_debug_hook_config(
            &mut object_514,
            var_513,
        );
        object_514.finish();
    }
    if let Some(var_515) = &input.debug_rule_configurations {
        let mut array_516 = object.key("DebugRuleConfigurations").start_array();
        for item_517 in var_515 {
            {
                let mut object_518 = array_516.value().start_object();
                crate::json_ser::serialize_structure_crate_model_debug_rule_configuration(
                    &mut object_518,
                    item_517,
                );
                object_518.finish();
            }
        }
        array_516.finish();
    }
    if let Some(var_519) = &input.tensor_board_output_config {
        let mut object_520 = object.key("TensorBoardOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_output_config(
            &mut object_520,
            var_519,
        );
        object_520.finish();
    }
    if let Some(var_521) = &input.experiment_config {
        let mut object_522 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_522,
            var_521,
        );
        object_522.finish();
    }
    if let Some(var_523) = &input.profiler_config {
        let mut object_524 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config(&mut object_524, var_523);
        object_524.finish();
    }
    if let Some(var_525) = &input.profiler_rule_configurations {
        let mut array_526 = object.key("ProfilerRuleConfigurations").start_array();
        for item_527 in var_525 {
            {
                let mut object_528 = array_526.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(
                    &mut object_528,
                    item_527,
                );
                object_528.finish();
            }
        }
        array_526.finish();
    }
    if let Some(var_529) = &input.environment {
        let mut object_530 = object.key("Environment").start_object();
        for (key_531, value_532) in var_529 {
            {
                object_530.key(key_531).string(value_532);
            }
        }
        object_530.finish();
    }
    if let Some(var_533) = &input.retry_strategy {
        let mut object_534 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(&mut object_534, var_533);
        object_534.finish();
    }
}

pub fn serialize_structure_crate_input_create_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTransformJobInput,
) {
    if let Some(var_535) = &input.transform_job_name {
        object.key("TransformJobName").string(var_535);
    }
    if let Some(var_536) = &input.model_name {
        object.key("ModelName").string(var_536);
    }
    if let Some(var_537) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_537).into()),
        );
    }
    if let Some(var_538) = &input.model_client_config {
        let mut object_539 = object.key("ModelClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_client_config(
            &mut object_539,
            var_538,
        );
        object_539.finish();
    }
    if let Some(var_540) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_540).into()),
        );
    }
    if let Some(var_541) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_541.as_str());
    }
    if let Some(var_542) = &input.environment {
        let mut object_543 = object.key("Environment").start_object();
        for (key_544, value_545) in var_542 {
            {
                object_543.key(key_544).string(value_545);
            }
        }
        object_543.finish();
    }
    if let Some(var_546) = &input.transform_input {
        let mut object_547 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(&mut object_547, var_546);
        object_547.finish();
    }
    if let Some(var_548) = &input.transform_output {
        let mut object_549 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(&mut object_549, var_548);
        object_549.finish();
    }
    if let Some(var_550) = &input.transform_resources {
        let mut object_551 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(
            &mut object_551,
            var_550,
        );
        object_551.finish();
    }
    if let Some(var_552) = &input.data_processing {
        let mut object_553 = object.key("DataProcessing").start_object();
        crate::json_ser::serialize_structure_crate_model_data_processing(&mut object_553, var_552);
        object_553.finish();
    }
    if let Some(var_554) = &input.tags {
        let mut array_555 = object.key("Tags").start_array();
        for item_556 in var_554 {
            {
                let mut object_557 = array_555.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_557, item_556);
                object_557.finish();
            }
        }
        array_555.finish();
    }
    if let Some(var_558) = &input.experiment_config {
        let mut object_559 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_559,
            var_558,
        );
        object_559.finish();
    }
}

pub fn serialize_structure_crate_input_create_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialInput,
) {
    if let Some(var_560) = &input.trial_name {
        object.key("TrialName").string(var_560);
    }
    if let Some(var_561) = &input.display_name {
        object.key("DisplayName").string(var_561);
    }
    if let Some(var_562) = &input.experiment_name {
        object.key("ExperimentName").string(var_562);
    }
    if let Some(var_563) = &input.metadata_properties {
        let mut object_564 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_564,
            var_563,
        );
        object_564.finish();
    }
    if let Some(var_565) = &input.tags {
        let mut array_566 = object.key("Tags").start_array();
        for item_567 in var_565 {
            {
                let mut object_568 = array_566.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_568, item_567);
                object_568.finish();
            }
        }
        array_566.finish();
    }
}

pub fn serialize_structure_crate_input_create_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialComponentInput,
) {
    if let Some(var_569) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_569);
    }
    if let Some(var_570) = &input.display_name {
        object.key("DisplayName").string(var_570);
    }
    if let Some(var_571) = &input.status {
        let mut object_572 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(
            &mut object_572,
            var_571,
        );
        object_572.finish();
    }
    if let Some(var_573) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_573, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_574) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_574, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_575) = &input.parameters {
        let mut object_576 = object.key("Parameters").start_object();
        for (key_577, value_578) in var_575 {
            {
                let mut object_579 = object_576.key(key_577).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(
                    &mut object_579,
                    value_578,
                );
                object_579.finish();
            }
        }
        object_576.finish();
    }
    if let Some(var_580) = &input.input_artifacts {
        let mut object_581 = object.key("InputArtifacts").start_object();
        for (key_582, value_583) in var_580 {
            {
                let mut object_584 = object_581.key(key_582).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_584,
                    value_583,
                );
                object_584.finish();
            }
        }
        object_581.finish();
    }
    if let Some(var_585) = &input.output_artifacts {
        let mut object_586 = object.key("OutputArtifacts").start_object();
        for (key_587, value_588) in var_585 {
            {
                let mut object_589 = object_586.key(key_587).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_589,
                    value_588,
                );
                object_589.finish();
            }
        }
        object_586.finish();
    }
    if let Some(var_590) = &input.metadata_properties {
        let mut object_591 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_591,
            var_590,
        );
        object_591.finish();
    }
    if let Some(var_592) = &input.tags {
        let mut array_593 = object.key("Tags").start_array();
        for item_594 in var_592 {
            {
                let mut object_595 = array_593.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_595, item_594);
                object_595.finish();
            }
        }
        array_593.finish();
    }
}

pub fn serialize_structure_crate_input_create_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserProfileInput,
) {
    if let Some(var_596) = &input.domain_id {
        object.key("DomainId").string(var_596);
    }
    if let Some(var_597) = &input.user_profile_name {
        object.key("UserProfileName").string(var_597);
    }
    if let Some(var_598) = &input.single_sign_on_user_identifier {
        object.key("SingleSignOnUserIdentifier").string(var_598);
    }
    if let Some(var_599) = &input.single_sign_on_user_value {
        object.key("SingleSignOnUserValue").string(var_599);
    }
    if let Some(var_600) = &input.tags {
        let mut array_601 = object.key("Tags").start_array();
        for item_602 in var_600 {
            {
                let mut object_603 = array_601.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_603, item_602);
                object_603.finish();
            }
        }
        array_601.finish();
    }
    if let Some(var_604) = &input.user_settings {
        let mut object_605 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_605, var_604);
        object_605.finish();
    }
}

pub fn serialize_structure_crate_input_create_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkforceInput,
) {
    if let Some(var_606) = &input.cognito_config {
        let mut object_607 = object.key("CognitoConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_config(&mut object_607, var_606);
        object_607.finish();
    }
    if let Some(var_608) = &input.oidc_config {
        let mut object_609 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_609, var_608);
        object_609.finish();
    }
    if let Some(var_610) = &input.source_ip_config {
        let mut object_611 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(&mut object_611, var_610);
        object_611.finish();
    }
    if let Some(var_612) = &input.workforce_name {
        object.key("WorkforceName").string(var_612);
    }
    if let Some(var_613) = &input.tags {
        let mut array_614 = object.key("Tags").start_array();
        for item_615 in var_613 {
            {
                let mut object_616 = array_614.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_616, item_615);
                object_616.finish();
            }
        }
        array_614.finish();
    }
}

pub fn serialize_structure_crate_input_create_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkteamInput,
) {
    if let Some(var_617) = &input.workteam_name {
        object.key("WorkteamName").string(var_617);
    }
    if let Some(var_618) = &input.workforce_name {
        object.key("WorkforceName").string(var_618);
    }
    if let Some(var_619) = &input.member_definitions {
        let mut array_620 = object.key("MemberDefinitions").start_array();
        for item_621 in var_619 {
            {
                let mut object_622 = array_620.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(
                    &mut object_622,
                    item_621,
                );
                object_622.finish();
            }
        }
        array_620.finish();
    }
    if let Some(var_623) = &input.description {
        object.key("Description").string(var_623);
    }
    if let Some(var_624) = &input.notification_configuration {
        let mut object_625 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(
            &mut object_625,
            var_624,
        );
        object_625.finish();
    }
    if let Some(var_626) = &input.tags {
        let mut array_627 = object.key("Tags").start_array();
        for item_628 in var_626 {
            {
                let mut object_629 = array_627.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_629, item_628);
                object_629.finish();
            }
        }
        array_627.finish();
    }
}

pub fn serialize_structure_crate_input_delete_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActionInput,
) {
    if let Some(var_630) = &input.action_name {
        object.key("ActionName").string(var_630);
    }
}

pub fn serialize_structure_crate_input_delete_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlgorithmInput,
) {
    if let Some(var_631) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_631);
    }
}

pub fn serialize_structure_crate_input_delete_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppInput,
) {
    if let Some(var_632) = &input.domain_id {
        object.key("DomainId").string(var_632);
    }
    if let Some(var_633) = &input.user_profile_name {
        object.key("UserProfileName").string(var_633);
    }
    if let Some(var_634) = &input.app_type {
        object.key("AppType").string(var_634.as_str());
    }
    if let Some(var_635) = &input.app_name {
        object.key("AppName").string(var_635);
    }
}

pub fn serialize_structure_crate_input_delete_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppImageConfigInput,
) {
    if let Some(var_636) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_636);
    }
}

pub fn serialize_structure_crate_input_delete_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteArtifactInput,
) {
    if let Some(var_637) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_637);
    }
    if let Some(var_638) = &input.source {
        let mut object_639 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_639, var_638);
        object_639.finish();
    }
}

pub fn serialize_structure_crate_input_delete_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) {
    if let Some(var_640) = &input.source_arn {
        object.key("SourceArn").string(var_640);
    }
    if let Some(var_641) = &input.destination_arn {
        object.key("DestinationArn").string(var_641);
    }
}

pub fn serialize_structure_crate_input_delete_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCodeRepositoryInput,
) {
    if let Some(var_642) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_642);
    }
}

pub fn serialize_structure_crate_input_delete_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContextInput,
) {
    if let Some(var_643) = &input.context_name {
        object.key("ContextName").string(var_643);
    }
}

pub fn serialize_structure_crate_input_delete_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataQualityJobDefinitionInput,
) {
    if let Some(var_644) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_644);
    }
}

pub fn serialize_structure_crate_input_delete_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeviceFleetInput,
) {
    if let Some(var_645) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_645);
    }
}

pub fn serialize_structure_crate_input_delete_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) {
    if let Some(var_646) = &input.domain_id {
        object.key("DomainId").string(var_646);
    }
    if let Some(var_647) = &input.retention_policy {
        let mut object_648 = object.key("RetentionPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_retention_policy(&mut object_648, var_647);
        object_648.finish();
    }
}

pub fn serialize_structure_crate_input_delete_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) {
    if let Some(var_649) = &input.endpoint_name {
        object.key("EndpointName").string(var_649);
    }
}

pub fn serialize_structure_crate_input_delete_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointConfigInput,
) {
    if let Some(var_650) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_650);
    }
}

pub fn serialize_structure_crate_input_delete_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperimentInput,
) {
    if let Some(var_651) = &input.experiment_name {
        object.key("ExperimentName").string(var_651);
    }
}

pub fn serialize_structure_crate_input_delete_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFeatureGroupInput,
) {
    if let Some(var_652) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_652);
    }
}

pub fn serialize_structure_crate_input_delete_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFlowDefinitionInput,
) {
    if let Some(var_653) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_653);
    }
}

pub fn serialize_structure_crate_input_delete_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteHumanTaskUiInput,
) {
    if let Some(var_654) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_654);
    }
}

pub fn serialize_structure_crate_input_delete_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) {
    if let Some(var_655) = &input.image_name {
        object.key("ImageName").string(var_655);
    }
}

pub fn serialize_structure_crate_input_delete_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageVersionInput,
) {
    if let Some(var_656) = &input.image_name {
        object.key("ImageName").string(var_656);
    }
    if let Some(var_657) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_657).into()),
        );
    }
}

pub fn serialize_structure_crate_input_delete_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelInput,
) {
    if let Some(var_658) = &input.model_name {
        object.key("ModelName").string(var_658);
    }
}

pub fn serialize_structure_crate_input_delete_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelBiasJobDefinitionInput,
) {
    if let Some(var_659) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_659);
    }
}

pub fn serialize_structure_crate_input_delete_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_660) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_660);
    }
}

pub fn serialize_structure_crate_input_delete_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageInput,
) {
    if let Some(var_661) = &input.model_package_name {
        object.key("ModelPackageName").string(var_661);
    }
}

pub fn serialize_structure_crate_input_delete_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupInput,
) {
    if let Some(var_662) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_662);
    }
}

pub fn serialize_structure_crate_input_delete_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupPolicyInput,
) {
    if let Some(var_663) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_663);
    }
}

pub fn serialize_structure_crate_input_delete_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelQualityJobDefinitionInput,
) {
    if let Some(var_664) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_664);
    }
}

pub fn serialize_structure_crate_input_delete_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMonitoringScheduleInput,
) {
    if let Some(var_665) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_665);
    }
}

pub fn serialize_structure_crate_input_delete_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceInput,
) {
    if let Some(var_666) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_666);
    }
}

pub fn serialize_structure_crate_input_delete_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_667) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_667);
    }
}

pub fn serialize_structure_crate_input_delete_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePipelineInput,
) {
    if let Some(var_668) = &input.pipeline_name {
        object.key("PipelineName").string(var_668);
    }
    if let Some(var_669) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_669);
    }
}

pub fn serialize_structure_crate_input_delete_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) {
    if let Some(var_670) = &input.project_name {
        object.key("ProjectName").string(var_670);
    }
}

pub fn serialize_structure_crate_input_delete_studio_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioLifecycleConfigInput,
) {
    if let Some(var_671) = &input.studio_lifecycle_config_name {
        object.key("StudioLifecycleConfigName").string(var_671);
    }
}

pub fn serialize_structure_crate_input_delete_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsInput,
) {
    if let Some(var_672) = &input.resource_arn {
        object.key("ResourceArn").string(var_672);
    }
    if let Some(var_673) = &input.tag_keys {
        let mut array_674 = object.key("TagKeys").start_array();
        for item_675 in var_673 {
            {
                array_674.value().string(item_675);
            }
        }
        array_674.finish();
    }
}

pub fn serialize_structure_crate_input_delete_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialInput,
) {
    if let Some(var_676) = &input.trial_name {
        object.key("TrialName").string(var_676);
    }
}

pub fn serialize_structure_crate_input_delete_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialComponentInput,
) {
    if let Some(var_677) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_677);
    }
}

pub fn serialize_structure_crate_input_delete_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserProfileInput,
) {
    if let Some(var_678) = &input.domain_id {
        object.key("DomainId").string(var_678);
    }
    if let Some(var_679) = &input.user_profile_name {
        object.key("UserProfileName").string(var_679);
    }
}

pub fn serialize_structure_crate_input_delete_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkforceInput,
) {
    if let Some(var_680) = &input.workforce_name {
        object.key("WorkforceName").string(var_680);
    }
}

pub fn serialize_structure_crate_input_delete_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkteamInput,
) {
    if let Some(var_681) = &input.workteam_name {
        object.key("WorkteamName").string(var_681);
    }
}

pub fn serialize_structure_crate_input_deregister_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterDevicesInput,
) {
    if let Some(var_682) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_682);
    }
    if let Some(var_683) = &input.device_names {
        let mut array_684 = object.key("DeviceNames").start_array();
        for item_685 in var_683 {
            {
                array_684.value().string(item_685);
            }
        }
        array_684.finish();
    }
}

pub fn serialize_structure_crate_input_describe_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionInput,
) {
    if let Some(var_686) = &input.action_name {
        object.key("ActionName").string(var_686);
    }
}

pub fn serialize_structure_crate_input_describe_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlgorithmInput,
) {
    if let Some(var_687) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_687);
    }
}

pub fn serialize_structure_crate_input_describe_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppInput,
) {
    if let Some(var_688) = &input.domain_id {
        object.key("DomainId").string(var_688);
    }
    if let Some(var_689) = &input.user_profile_name {
        object.key("UserProfileName").string(var_689);
    }
    if let Some(var_690) = &input.app_type {
        object.key("AppType").string(var_690.as_str());
    }
    if let Some(var_691) = &input.app_name {
        object.key("AppName").string(var_691);
    }
}

pub fn serialize_structure_crate_input_describe_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppImageConfigInput,
) {
    if let Some(var_692) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_692);
    }
}

pub fn serialize_structure_crate_input_describe_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeArtifactInput,
) {
    if let Some(var_693) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_693);
    }
}

pub fn serialize_structure_crate_input_describe_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoMlJobInput,
) {
    if let Some(var_694) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_694);
    }
}

pub fn serialize_structure_crate_input_describe_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCodeRepositoryInput,
) {
    if let Some(var_695) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_695);
    }
}

pub fn serialize_structure_crate_input_describe_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCompilationJobInput,
) {
    if let Some(var_696) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_696);
    }
}

pub fn serialize_structure_crate_input_describe_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContextInput,
) {
    if let Some(var_697) = &input.context_name {
        object.key("ContextName").string(var_697);
    }
}

pub fn serialize_structure_crate_input_describe_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataQualityJobDefinitionInput,
) {
    if let Some(var_698) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_698);
    }
}

pub fn serialize_structure_crate_input_describe_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceInput,
) {
    if let Some(var_699) = &input.next_token {
        object.key("NextToken").string(var_699);
    }
    if let Some(var_700) = &input.device_name {
        object.key("DeviceName").string(var_700);
    }
    if let Some(var_701) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_701);
    }
}

pub fn serialize_structure_crate_input_describe_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceFleetInput,
) {
    if let Some(var_702) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_702);
    }
}

pub fn serialize_structure_crate_input_describe_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainInput,
) {
    if let Some(var_703) = &input.domain_id {
        object.key("DomainId").string(var_703);
    }
}

pub fn serialize_structure_crate_input_describe_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgePackagingJobInput,
) {
    if let Some(var_704) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_704);
    }
}

pub fn serialize_structure_crate_input_describe_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) {
    if let Some(var_705) = &input.endpoint_name {
        object.key("EndpointName").string(var_705);
    }
}

pub fn serialize_structure_crate_input_describe_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointConfigInput,
) {
    if let Some(var_706) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_706);
    }
}

pub fn serialize_structure_crate_input_describe_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperimentInput,
) {
    if let Some(var_707) = &input.experiment_name {
        object.key("ExperimentName").string(var_707);
    }
}

pub fn serialize_structure_crate_input_describe_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureGroupInput,
) {
    if let Some(var_708) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_708);
    }
    if let Some(var_709) = &input.next_token {
        object.key("NextToken").string(var_709);
    }
}

pub fn serialize_structure_crate_input_describe_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowDefinitionInput,
) {
    if let Some(var_710) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_710);
    }
}

pub fn serialize_structure_crate_input_describe_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHumanTaskUiInput,
) {
    if let Some(var_711) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_711);
    }
}

pub fn serialize_structure_crate_input_describe_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHyperParameterTuningJobInput,
) {
    if let Some(var_712) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_712);
    }
}

pub fn serialize_structure_crate_input_describe_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageInput,
) {
    if let Some(var_713) = &input.image_name {
        object.key("ImageName").string(var_713);
    }
}

pub fn serialize_structure_crate_input_describe_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageVersionInput,
) {
    if let Some(var_714) = &input.image_name {
        object.key("ImageName").string(var_714);
    }
    if let Some(var_715) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_715).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLabelingJobInput,
) {
    if let Some(var_716) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_716);
    }
}

pub fn serialize_structure_crate_input_describe_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelInput,
) {
    if let Some(var_717) = &input.model_name {
        object.key("ModelName").string(var_717);
    }
}

pub fn serialize_structure_crate_input_describe_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelBiasJobDefinitionInput,
) {
    if let Some(var_718) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_718);
    }
}

pub fn serialize_structure_crate_input_describe_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_719) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_719);
    }
}

pub fn serialize_structure_crate_input_describe_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageInput,
) {
    if let Some(var_720) = &input.model_package_name {
        object.key("ModelPackageName").string(var_720);
    }
}

pub fn serialize_structure_crate_input_describe_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageGroupInput,
) {
    if let Some(var_721) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_721);
    }
}

pub fn serialize_structure_crate_input_describe_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelQualityJobDefinitionInput,
) {
    if let Some(var_722) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_722);
    }
}

pub fn serialize_structure_crate_input_describe_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMonitoringScheduleInput,
) {
    if let Some(var_723) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_723);
    }
}

pub fn serialize_structure_crate_input_describe_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceInput,
) {
    if let Some(var_724) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_724);
    }
}

pub fn serialize_structure_crate_input_describe_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_725) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_725);
    }
}

pub fn serialize_structure_crate_input_describe_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineInput,
) {
    if let Some(var_726) = &input.pipeline_name {
        object.key("PipelineName").string(var_726);
    }
}

pub fn serialize_structure_crate_input_describe_pipeline_definition_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineDefinitionForExecutionInput,
) {
    if let Some(var_727) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_727);
    }
}

pub fn serialize_structure_crate_input_describe_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineExecutionInput,
) {
    if let Some(var_728) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_728);
    }
}

pub fn serialize_structure_crate_input_describe_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProcessingJobInput,
) {
    if let Some(var_729) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_729);
    }
}

pub fn serialize_structure_crate_input_describe_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectInput,
) {
    if let Some(var_730) = &input.project_name {
        object.key("ProjectName").string(var_730);
    }
}

pub fn serialize_structure_crate_input_describe_studio_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStudioLifecycleConfigInput,
) {
    if let Some(var_731) = &input.studio_lifecycle_config_name {
        object.key("StudioLifecycleConfigName").string(var_731);
    }
}

pub fn serialize_structure_crate_input_describe_subscribed_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSubscribedWorkteamInput,
) {
    if let Some(var_732) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_732);
    }
}

pub fn serialize_structure_crate_input_describe_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrainingJobInput,
) {
    if let Some(var_733) = &input.training_job_name {
        object.key("TrainingJobName").string(var_733);
    }
}

pub fn serialize_structure_crate_input_describe_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTransformJobInput,
) {
    if let Some(var_734) = &input.transform_job_name {
        object.key("TransformJobName").string(var_734);
    }
}

pub fn serialize_structure_crate_input_describe_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialInput,
) {
    if let Some(var_735) = &input.trial_name {
        object.key("TrialName").string(var_735);
    }
}

pub fn serialize_structure_crate_input_describe_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialComponentInput,
) {
    if let Some(var_736) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_736);
    }
}

pub fn serialize_structure_crate_input_describe_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserProfileInput,
) {
    if let Some(var_737) = &input.domain_id {
        object.key("DomainId").string(var_737);
    }
    if let Some(var_738) = &input.user_profile_name {
        object.key("UserProfileName").string(var_738);
    }
}

pub fn serialize_structure_crate_input_describe_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkforceInput,
) {
    if let Some(var_739) = &input.workforce_name {
        object.key("WorkforceName").string(var_739);
    }
}

pub fn serialize_structure_crate_input_describe_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkteamInput,
) {
    if let Some(var_740) = &input.workteam_name {
        object.key("WorkteamName").string(var_740);
    }
}

pub fn serialize_structure_crate_input_disassociate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTrialComponentInput,
) {
    if let Some(var_741) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_741);
    }
    if let Some(var_742) = &input.trial_name {
        object.key("TrialName").string(var_742);
    }
}

pub fn serialize_structure_crate_input_get_device_fleet_report_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceFleetReportInput,
) {
    if let Some(var_743) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_743);
    }
}

pub fn serialize_structure_crate_input_get_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelPackageGroupPolicyInput,
) {
    if let Some(var_744) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_744);
    }
}

pub fn serialize_structure_crate_input_get_search_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSearchSuggestionsInput,
) {
    if let Some(var_745) = &input.resource {
        object.key("Resource").string(var_745.as_str());
    }
    if let Some(var_746) = &input.suggestion_query {
        let mut object_747 = object.key("SuggestionQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_suggestion_query(&mut object_747, var_746);
        object_747.finish();
    }
}

pub fn serialize_structure_crate_input_list_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListActionsInput,
) {
    if let Some(var_748) = &input.source_uri {
        object.key("SourceUri").string(var_748);
    }
    if let Some(var_749) = &input.action_type {
        object.key("ActionType").string(var_749);
    }
    if let Some(var_750) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_750, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_751) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_751, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_752) = &input.sort_by {
        object.key("SortBy").string(var_752.as_str());
    }
    if let Some(var_753) = &input.sort_order {
        object.key("SortOrder").string(var_753.as_str());
    }
    if let Some(var_754) = &input.next_token {
        object.key("NextToken").string(var_754);
    }
    if let Some(var_755) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_755).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_algorithms_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlgorithmsInput,
) {
    if let Some(var_756) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_756, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_757) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_757, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_758) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_758).into()),
        );
    }
    if let Some(var_759) = &input.name_contains {
        object.key("NameContains").string(var_759);
    }
    if let Some(var_760) = &input.next_token {
        object.key("NextToken").string(var_760);
    }
    if let Some(var_761) = &input.sort_by {
        object.key("SortBy").string(var_761.as_str());
    }
    if let Some(var_762) = &input.sort_order {
        object.key("SortOrder").string(var_762.as_str());
    }
}

pub fn serialize_structure_crate_input_list_app_image_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppImageConfigsInput,
) {
    if let Some(var_763) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_763).into()),
        );
    }
    if let Some(var_764) = &input.next_token {
        object.key("NextToken").string(var_764);
    }
    if let Some(var_765) = &input.name_contains {
        object.key("NameContains").string(var_765);
    }
    if let Some(var_766) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_766, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_767) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_767, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_768) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .instant(var_768, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_769) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .instant(var_769, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_770) = &input.sort_by {
        object.key("SortBy").string(var_770.as_str());
    }
    if let Some(var_771) = &input.sort_order {
        object.key("SortOrder").string(var_771.as_str());
    }
}

pub fn serialize_structure_crate_input_list_apps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppsInput,
) {
    if let Some(var_772) = &input.next_token {
        object.key("NextToken").string(var_772);
    }
    if let Some(var_773) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_773).into()),
        );
    }
    if let Some(var_774) = &input.sort_order {
        object.key("SortOrder").string(var_774.as_str());
    }
    if let Some(var_775) = &input.sort_by {
        object.key("SortBy").string(var_775.as_str());
    }
    if let Some(var_776) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_776);
    }
    if let Some(var_777) = &input.user_profile_name_equals {
        object.key("UserProfileNameEquals").string(var_777);
    }
}

pub fn serialize_structure_crate_input_list_artifacts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListArtifactsInput,
) {
    if let Some(var_778) = &input.source_uri {
        object.key("SourceUri").string(var_778);
    }
    if let Some(var_779) = &input.artifact_type {
        object.key("ArtifactType").string(var_779);
    }
    if let Some(var_780) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_780, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_781) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_781, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_782) = &input.sort_by {
        object.key("SortBy").string(var_782.as_str());
    }
    if let Some(var_783) = &input.sort_order {
        object.key("SortOrder").string(var_783.as_str());
    }
    if let Some(var_784) = &input.next_token {
        object.key("NextToken").string(var_784);
    }
    if let Some(var_785) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_785).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) {
    if let Some(var_786) = &input.source_arn {
        object.key("SourceArn").string(var_786);
    }
    if let Some(var_787) = &input.destination_arn {
        object.key("DestinationArn").string(var_787);
    }
    if let Some(var_788) = &input.source_type {
        object.key("SourceType").string(var_788);
    }
    if let Some(var_789) = &input.destination_type {
        object.key("DestinationType").string(var_789);
    }
    if let Some(var_790) = &input.association_type {
        object.key("AssociationType").string(var_790.as_str());
    }
    if let Some(var_791) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_791, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_792) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_792, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_793) = &input.sort_by {
        object.key("SortBy").string(var_793.as_str());
    }
    if let Some(var_794) = &input.sort_order {
        object.key("SortOrder").string(var_794.as_str());
    }
    if let Some(var_795) = &input.next_token {
        object.key("NextToken").string(var_795);
    }
    if let Some(var_796) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_796).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_auto_ml_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutoMlJobsInput,
) {
    if let Some(var_797) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_797, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_798) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_798, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_799) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_799, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_800) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_800, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_801) = &input.name_contains {
        object.key("NameContains").string(var_801);
    }
    if let Some(var_802) = &input.status_equals {
        object.key("StatusEquals").string(var_802.as_str());
    }
    if let Some(var_803) = &input.sort_order {
        object.key("SortOrder").string(var_803.as_str());
    }
    if let Some(var_804) = &input.sort_by {
        object.key("SortBy").string(var_804.as_str());
    }
    if let Some(var_805) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_805).into()),
        );
    }
    if let Some(var_806) = &input.next_token {
        object.key("NextToken").string(var_806);
    }
}

pub fn serialize_structure_crate_input_list_candidates_for_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCandidatesForAutoMlJobInput,
) {
    if let Some(var_807) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_807);
    }
    if let Some(var_808) = &input.status_equals {
        object.key("StatusEquals").string(var_808.as_str());
    }
    if let Some(var_809) = &input.candidate_name_equals {
        object.key("CandidateNameEquals").string(var_809);
    }
    if let Some(var_810) = &input.sort_order {
        object.key("SortOrder").string(var_810.as_str());
    }
    if let Some(var_811) = &input.sort_by {
        object.key("SortBy").string(var_811.as_str());
    }
    if let Some(var_812) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_812).into()),
        );
    }
    if let Some(var_813) = &input.next_token {
        object.key("NextToken").string(var_813);
    }
}

pub fn serialize_structure_crate_input_list_code_repositories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCodeRepositoriesInput,
) {
    if let Some(var_814) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_814, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_815) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_815, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_816) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_816, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_817) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_817, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_818) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_818).into()),
        );
    }
    if let Some(var_819) = &input.name_contains {
        object.key("NameContains").string(var_819);
    }
    if let Some(var_820) = &input.next_token {
        object.key("NextToken").string(var_820);
    }
    if let Some(var_821) = &input.sort_by {
        object.key("SortBy").string(var_821.as_str());
    }
    if let Some(var_822) = &input.sort_order {
        object.key("SortOrder").string(var_822.as_str());
    }
}

pub fn serialize_structure_crate_input_list_compilation_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCompilationJobsInput,
) {
    if let Some(var_823) = &input.next_token {
        object.key("NextToken").string(var_823);
    }
    if let Some(var_824) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_824).into()),
        );
    }
    if let Some(var_825) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_825, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_826) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_826, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_827) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_827, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_828) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_828, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_829) = &input.name_contains {
        object.key("NameContains").string(var_829);
    }
    if let Some(var_830) = &input.status_equals {
        object.key("StatusEquals").string(var_830.as_str());
    }
    if let Some(var_831) = &input.sort_by {
        object.key("SortBy").string(var_831.as_str());
    }
    if let Some(var_832) = &input.sort_order {
        object.key("SortOrder").string(var_832.as_str());
    }
}

pub fn serialize_structure_crate_input_list_contexts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContextsInput,
) {
    if let Some(var_833) = &input.source_uri {
        object.key("SourceUri").string(var_833);
    }
    if let Some(var_834) = &input.context_type {
        object.key("ContextType").string(var_834);
    }
    if let Some(var_835) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_835, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_836) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_836, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_837) = &input.sort_by {
        object.key("SortBy").string(var_837.as_str());
    }
    if let Some(var_838) = &input.sort_order {
        object.key("SortOrder").string(var_838.as_str());
    }
    if let Some(var_839) = &input.next_token {
        object.key("NextToken").string(var_839);
    }
    if let Some(var_840) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_840).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_data_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataQualityJobDefinitionsInput,
) {
    if let Some(var_841) = &input.endpoint_name {
        object.key("EndpointName").string(var_841);
    }
    if let Some(var_842) = &input.sort_by {
        object.key("SortBy").string(var_842.as_str());
    }
    if let Some(var_843) = &input.sort_order {
        object.key("SortOrder").string(var_843.as_str());
    }
    if let Some(var_844) = &input.next_token {
        object.key("NextToken").string(var_844);
    }
    if let Some(var_845) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_845).into()),
        );
    }
    if let Some(var_846) = &input.name_contains {
        object.key("NameContains").string(var_846);
    }
    if let Some(var_847) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_847, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_848) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_848, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_list_device_fleets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeviceFleetsInput,
) {
    if let Some(var_849) = &input.next_token {
        object.key("NextToken").string(var_849);
    }
    if let Some(var_850) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_850).into()),
        );
    }
    if let Some(var_851) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_851, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_852) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_852, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_853) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_853, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_854) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_854, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_855) = &input.name_contains {
        object.key("NameContains").string(var_855);
    }
    if let Some(var_856) = &input.sort_by {
        object.key("SortBy").string(var_856.as_str());
    }
    if let Some(var_857) = &input.sort_order {
        object.key("SortOrder").string(var_857.as_str());
    }
}

pub fn serialize_structure_crate_input_list_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) {
    if let Some(var_858) = &input.next_token {
        object.key("NextToken").string(var_858);
    }
    if let Some(var_859) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_859).into()),
        );
    }
    if let Some(var_860) = &input.latest_heartbeat_after {
        object
            .key("LatestHeartbeatAfter")
            .instant(var_860, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_861) = &input.model_name {
        object.key("ModelName").string(var_861);
    }
    if let Some(var_862) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_862);
    }
}

pub fn serialize_structure_crate_input_list_domains_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) {
    if let Some(var_863) = &input.next_token {
        object.key("NextToken").string(var_863);
    }
    if let Some(var_864) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_864).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_edge_packaging_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgePackagingJobsInput,
) {
    if let Some(var_865) = &input.next_token {
        object.key("NextToken").string(var_865);
    }
    if let Some(var_866) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_866).into()),
        );
    }
    if let Some(var_867) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_867, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_868) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_868, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_869) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_869, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_870) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_870, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_871) = &input.name_contains {
        object.key("NameContains").string(var_871);
    }
    if let Some(var_872) = &input.model_name_contains {
        object.key("ModelNameContains").string(var_872);
    }
    if let Some(var_873) = &input.status_equals {
        object.key("StatusEquals").string(var_873.as_str());
    }
    if let Some(var_874) = &input.sort_by {
        object.key("SortBy").string(var_874.as_str());
    }
    if let Some(var_875) = &input.sort_order {
        object.key("SortOrder").string(var_875.as_str());
    }
}

pub fn serialize_structure_crate_input_list_endpoint_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointConfigsInput,
) {
    if let Some(var_876) = &input.sort_by {
        object.key("SortBy").string(var_876.as_str());
    }
    if let Some(var_877) = &input.sort_order {
        object.key("SortOrder").string(var_877.as_str());
    }
    if let Some(var_878) = &input.next_token {
        object.key("NextToken").string(var_878);
    }
    if let Some(var_879) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_879).into()),
        );
    }
    if let Some(var_880) = &input.name_contains {
        object.key("NameContains").string(var_880);
    }
    if let Some(var_881) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_881, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_882) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_882, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_list_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) {
    if let Some(var_883) = &input.sort_by {
        object.key("SortBy").string(var_883.as_str());
    }
    if let Some(var_884) = &input.sort_order {
        object.key("SortOrder").string(var_884.as_str());
    }
    if let Some(var_885) = &input.next_token {
        object.key("NextToken").string(var_885);
    }
    if let Some(var_886) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_886).into()),
        );
    }
    if let Some(var_887) = &input.name_contains {
        object.key("NameContains").string(var_887);
    }
    if let Some(var_888) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_888, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_889) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_889, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_890) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_890, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_891) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_891, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_892) = &input.status_equals {
        object.key("StatusEquals").string(var_892.as_str());
    }
}

pub fn serialize_structure_crate_input_list_experiments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperimentsInput,
) {
    if let Some(var_893) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_893, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_894) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_894, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_895) = &input.sort_by {
        object.key("SortBy").string(var_895.as_str());
    }
    if let Some(var_896) = &input.sort_order {
        object.key("SortOrder").string(var_896.as_str());
    }
    if let Some(var_897) = &input.next_token {
        object.key("NextToken").string(var_897);
    }
    if let Some(var_898) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_898).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_feature_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFeatureGroupsInput,
) {
    if let Some(var_899) = &input.name_contains {
        object.key("NameContains").string(var_899);
    }
    if let Some(var_900) = &input.feature_group_status_equals {
        object
            .key("FeatureGroupStatusEquals")
            .string(var_900.as_str());
    }
    if let Some(var_901) = &input.offline_store_status_equals {
        object
            .key("OfflineStoreStatusEquals")
            .string(var_901.as_str());
    }
    if let Some(var_902) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_902, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_903) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_903, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_904) = &input.sort_order {
        object.key("SortOrder").string(var_904.as_str());
    }
    if let Some(var_905) = &input.sort_by {
        object.key("SortBy").string(var_905.as_str());
    }
    if let Some(var_906) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_906).into()),
        );
    }
    if let Some(var_907) = &input.next_token {
        object.key("NextToken").string(var_907);
    }
}

pub fn serialize_structure_crate_input_list_flow_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFlowDefinitionsInput,
) {
    if let Some(var_908) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_908, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_909) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_909, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_910) = &input.sort_order {
        object.key("SortOrder").string(var_910.as_str());
    }
    if let Some(var_911) = &input.next_token {
        object.key("NextToken").string(var_911);
    }
    if let Some(var_912) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_912).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_human_task_uis_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHumanTaskUisInput,
) {
    if let Some(var_913) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_913, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_914) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_914, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_915) = &input.sort_order {
        object.key("SortOrder").string(var_915.as_str());
    }
    if let Some(var_916) = &input.next_token {
        object.key("NextToken").string(var_916);
    }
    if let Some(var_917) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_917).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_hyper_parameter_tuning_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHyperParameterTuningJobsInput,
) {
    if let Some(var_918) = &input.next_token {
        object.key("NextToken").string(var_918);
    }
    if let Some(var_919) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_919).into()),
        );
    }
    if let Some(var_920) = &input.sort_by {
        object.key("SortBy").string(var_920.as_str());
    }
    if let Some(var_921) = &input.sort_order {
        object.key("SortOrder").string(var_921.as_str());
    }
    if let Some(var_922) = &input.name_contains {
        object.key("NameContains").string(var_922);
    }
    if let Some(var_923) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_923, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_924) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_924, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_925) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_925, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_926) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_926, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_927) = &input.status_equals {
        object.key("StatusEquals").string(var_927.as_str());
    }
}

pub fn serialize_structure_crate_input_list_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) {
    if let Some(var_928) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_928, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_929) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_929, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_930) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_930, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_931) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_931, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_932) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_932).into()),
        );
    }
    if let Some(var_933) = &input.name_contains {
        object.key("NameContains").string(var_933);
    }
    if let Some(var_934) = &input.next_token {
        object.key("NextToken").string(var_934);
    }
    if let Some(var_935) = &input.sort_by {
        object.key("SortBy").string(var_935.as_str());
    }
    if let Some(var_936) = &input.sort_order {
        object.key("SortOrder").string(var_936.as_str());
    }
}

pub fn serialize_structure_crate_input_list_image_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageVersionsInput,
) {
    if let Some(var_937) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_937, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_938) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_938, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_939) = &input.image_name {
        object.key("ImageName").string(var_939);
    }
    if let Some(var_940) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_940, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_941) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_941, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_942) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_942).into()),
        );
    }
    if let Some(var_943) = &input.next_token {
        object.key("NextToken").string(var_943);
    }
    if let Some(var_944) = &input.sort_by {
        object.key("SortBy").string(var_944.as_str());
    }
    if let Some(var_945) = &input.sort_order {
        object.key("SortOrder").string(var_945.as_str());
    }
}

pub fn serialize_structure_crate_input_list_labeling_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsInput,
) {
    if let Some(var_946) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_946, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_947) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_947, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_948) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_948, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_949) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_949, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_950) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_950).into()),
        );
    }
    if let Some(var_951) = &input.next_token {
        object.key("NextToken").string(var_951);
    }
    if let Some(var_952) = &input.name_contains {
        object.key("NameContains").string(var_952);
    }
    if let Some(var_953) = &input.sort_by {
        object.key("SortBy").string(var_953.as_str());
    }
    if let Some(var_954) = &input.sort_order {
        object.key("SortOrder").string(var_954.as_str());
    }
    if let Some(var_955) = &input.status_equals {
        object.key("StatusEquals").string(var_955.as_str());
    }
}

pub fn serialize_structure_crate_input_list_labeling_jobs_for_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsForWorkteamInput,
) {
    if let Some(var_956) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_956);
    }
    if let Some(var_957) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_957).into()),
        );
    }
    if let Some(var_958) = &input.next_token {
        object.key("NextToken").string(var_958);
    }
    if let Some(var_959) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_959, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_960) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_960, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_961) = &input.job_reference_code_contains {
        object.key("JobReferenceCodeContains").string(var_961);
    }
    if let Some(var_962) = &input.sort_by {
        object.key("SortBy").string(var_962.as_str());
    }
    if let Some(var_963) = &input.sort_order {
        object.key("SortOrder").string(var_963.as_str());
    }
}

pub fn serialize_structure_crate_input_list_model_bias_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelBiasJobDefinitionsInput,
) {
    if let Some(var_964) = &input.endpoint_name {
        object.key("EndpointName").string(var_964);
    }
    if let Some(var_965) = &input.sort_by {
        object.key("SortBy").string(var_965.as_str());
    }
    if let Some(var_966) = &input.sort_order {
        object.key("SortOrder").string(var_966.as_str());
    }
    if let Some(var_967) = &input.next_token {
        object.key("NextToken").string(var_967);
    }
    if let Some(var_968) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_968).into()),
        );
    }
    if let Some(var_969) = &input.name_contains {
        object.key("NameContains").string(var_969);
    }
    if let Some(var_970) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_970, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_971) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_971, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_list_model_explainability_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelExplainabilityJobDefinitionsInput,
) {
    if let Some(var_972) = &input.endpoint_name {
        object.key("EndpointName").string(var_972);
    }
    if let Some(var_973) = &input.sort_by {
        object.key("SortBy").string(var_973.as_str());
    }
    if let Some(var_974) = &input.sort_order {
        object.key("SortOrder").string(var_974.as_str());
    }
    if let Some(var_975) = &input.next_token {
        object.key("NextToken").string(var_975);
    }
    if let Some(var_976) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_976).into()),
        );
    }
    if let Some(var_977) = &input.name_contains {
        object.key("NameContains").string(var_977);
    }
    if let Some(var_978) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_978, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_979) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_979, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_list_model_package_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackageGroupsInput,
) {
    if let Some(var_980) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_980, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_981) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_981, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_982) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_982).into()),
        );
    }
    if let Some(var_983) = &input.name_contains {
        object.key("NameContains").string(var_983);
    }
    if let Some(var_984) = &input.next_token {
        object.key("NextToken").string(var_984);
    }
    if let Some(var_985) = &input.sort_by {
        object.key("SortBy").string(var_985.as_str());
    }
    if let Some(var_986) = &input.sort_order {
        object.key("SortOrder").string(var_986.as_str());
    }
}

pub fn serialize_structure_crate_input_list_model_packages_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackagesInput,
) {
    if let Some(var_987) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_987, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_988) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_988, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_989) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_989).into()),
        );
    }
    if let Some(var_990) = &input.name_contains {
        object.key("NameContains").string(var_990);
    }
    if let Some(var_991) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_991.as_str());
    }
    if let Some(var_992) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_992);
    }
    if let Some(var_993) = &input.model_package_type {
        object.key("ModelPackageType").string(var_993.as_str());
    }
    if let Some(var_994) = &input.next_token {
        object.key("NextToken").string(var_994);
    }
    if let Some(var_995) = &input.sort_by {
        object.key("SortBy").string(var_995.as_str());
    }
    if let Some(var_996) = &input.sort_order {
        object.key("SortOrder").string(var_996.as_str());
    }
}

pub fn serialize_structure_crate_input_list_model_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelQualityJobDefinitionsInput,
) {
    if let Some(var_997) = &input.endpoint_name {
        object.key("EndpointName").string(var_997);
    }
    if let Some(var_998) = &input.sort_by {
        object.key("SortBy").string(var_998.as_str());
    }
    if let Some(var_999) = &input.sort_order {
        object.key("SortOrder").string(var_999.as_str());
    }
    if let Some(var_1000) = &input.next_token {
        object.key("NextToken").string(var_1000);
    }
    if let Some(var_1001) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1001).into()),
        );
    }
    if let Some(var_1002) = &input.name_contains {
        object.key("NameContains").string(var_1002);
    }
    if let Some(var_1003) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1003, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1004) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1004, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_list_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelsInput,
) {
    if let Some(var_1005) = &input.sort_by {
        object.key("SortBy").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.sort_order {
        object.key("SortOrder").string(var_1006.as_str());
    }
    if let Some(var_1007) = &input.next_token {
        object.key("NextToken").string(var_1007);
    }
    if let Some(var_1008) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1008).into()),
        );
    }
    if let Some(var_1009) = &input.name_contains {
        object.key("NameContains").string(var_1009);
    }
    if let Some(var_1010) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1010, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1011) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1011, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_list_monitoring_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringExecutionsInput,
) {
    if let Some(var_1012) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1012);
    }
    if let Some(var_1013) = &input.endpoint_name {
        object.key("EndpointName").string(var_1013);
    }
    if let Some(var_1014) = &input.sort_by {
        object.key("SortBy").string(var_1014.as_str());
    }
    if let Some(var_1015) = &input.sort_order {
        object.key("SortOrder").string(var_1015.as_str());
    }
    if let Some(var_1016) = &input.next_token {
        object.key("NextToken").string(var_1016);
    }
    if let Some(var_1017) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1017).into()),
        );
    }
    if let Some(var_1018) = &input.scheduled_time_before {
        object
            .key("ScheduledTimeBefore")
            .instant(var_1018, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1019) = &input.scheduled_time_after {
        object
            .key("ScheduledTimeAfter")
            .instant(var_1019, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1020) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1020, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1021) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1021, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1022) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1022, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1023) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1023, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1024) = &input.status_equals {
        object.key("StatusEquals").string(var_1024.as_str());
    }
    if let Some(var_1025) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1025);
    }
    if let Some(var_1026) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1026.as_str());
    }
}

pub fn serialize_structure_crate_input_list_monitoring_schedules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringSchedulesInput,
) {
    if let Some(var_1027) = &input.endpoint_name {
        object.key("EndpointName").string(var_1027);
    }
    if let Some(var_1028) = &input.sort_by {
        object.key("SortBy").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.sort_order {
        object.key("SortOrder").string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.next_token {
        object.key("NextToken").string(var_1030);
    }
    if let Some(var_1031) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1031).into()),
        );
    }
    if let Some(var_1032) = &input.name_contains {
        object.key("NameContains").string(var_1032);
    }
    if let Some(var_1033) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1033, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1034) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1034, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1035) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1035, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1036) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1036, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1037) = &input.status_equals {
        object.key("StatusEquals").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1038);
    }
    if let Some(var_1039) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1039.as_str());
    }
}

pub fn serialize_structure_crate_input_list_notebook_instance_lifecycle_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstanceLifecycleConfigsInput,
) {
    if let Some(var_1040) = &input.next_token {
        object.key("NextToken").string(var_1040);
    }
    if let Some(var_1041) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1041).into()),
        );
    }
    if let Some(var_1042) = &input.sort_by {
        object.key("SortBy").string(var_1042.as_str());
    }
    if let Some(var_1043) = &input.sort_order {
        object.key("SortOrder").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.name_contains {
        object.key("NameContains").string(var_1044);
    }
    if let Some(var_1045) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1045, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1046) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1046, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1047) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1047, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1048) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1048, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_list_notebook_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstancesInput,
) {
    if let Some(var_1049) = &input.next_token {
        object.key("NextToken").string(var_1049);
    }
    if let Some(var_1050) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1050).into()),
        );
    }
    if let Some(var_1051) = &input.sort_by {
        object.key("SortBy").string(var_1051.as_str());
    }
    if let Some(var_1052) = &input.sort_order {
        object.key("SortOrder").string(var_1052.as_str());
    }
    if let Some(var_1053) = &input.name_contains {
        object.key("NameContains").string(var_1053);
    }
    if let Some(var_1054) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1054, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1055) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1055, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1056) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1056, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1057) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1057, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1058) = &input.status_equals {
        object.key("StatusEquals").string(var_1058.as_str());
    }
    if let Some(var_1059) = &input.notebook_instance_lifecycle_config_name_contains {
        object
            .key("NotebookInstanceLifecycleConfigNameContains")
            .string(var_1059);
    }
    if let Some(var_1060) = &input.default_code_repository_contains {
        object.key("DefaultCodeRepositoryContains").string(var_1060);
    }
    if let Some(var_1061) = &input.additional_code_repository_equals {
        object
            .key("AdditionalCodeRepositoryEquals")
            .string(var_1061);
    }
}

pub fn serialize_structure_crate_input_list_pipeline_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionsInput,
) {
    if let Some(var_1062) = &input.pipeline_name {
        object.key("PipelineName").string(var_1062);
    }
    if let Some(var_1063) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1063, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1064) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1064, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1065) = &input.sort_by {
        object.key("SortBy").string(var_1065.as_str());
    }
    if let Some(var_1066) = &input.sort_order {
        object.key("SortOrder").string(var_1066.as_str());
    }
    if let Some(var_1067) = &input.next_token {
        object.key("NextToken").string(var_1067);
    }
    if let Some(var_1068) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1068).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_pipeline_execution_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionStepsInput,
) {
    if let Some(var_1069) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1069);
    }
    if let Some(var_1070) = &input.next_token {
        object.key("NextToken").string(var_1070);
    }
    if let Some(var_1071) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1071).into()),
        );
    }
    if let Some(var_1072) = &input.sort_order {
        object.key("SortOrder").string(var_1072.as_str());
    }
}

pub fn serialize_structure_crate_input_list_pipeline_parameters_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineParametersForExecutionInput,
) {
    if let Some(var_1073) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1073);
    }
    if let Some(var_1074) = &input.next_token {
        object.key("NextToken").string(var_1074);
    }
    if let Some(var_1075) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1075).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_pipelines_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelinesInput,
) {
    if let Some(var_1076) = &input.pipeline_name_prefix {
        object.key("PipelineNamePrefix").string(var_1076);
    }
    if let Some(var_1077) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1077, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1078) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1078, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1079) = &input.sort_by {
        object.key("SortBy").string(var_1079.as_str());
    }
    if let Some(var_1080) = &input.sort_order {
        object.key("SortOrder").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.next_token {
        object.key("NextToken").string(var_1081);
    }
    if let Some(var_1082) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1082).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_processing_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProcessingJobsInput,
) {
    if let Some(var_1083) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1083, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1084) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1084, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1085) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1085, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1086) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1086, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1087) = &input.name_contains {
        object.key("NameContains").string(var_1087);
    }
    if let Some(var_1088) = &input.status_equals {
        object.key("StatusEquals").string(var_1088.as_str());
    }
    if let Some(var_1089) = &input.sort_by {
        object.key("SortBy").string(var_1089.as_str());
    }
    if let Some(var_1090) = &input.sort_order {
        object.key("SortOrder").string(var_1090.as_str());
    }
    if let Some(var_1091) = &input.next_token {
        object.key("NextToken").string(var_1091);
    }
    if let Some(var_1092) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1092).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_projects_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProjectsInput,
) {
    if let Some(var_1093) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1093, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1094) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1094, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1095) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1095).into()),
        );
    }
    if let Some(var_1096) = &input.name_contains {
        object.key("NameContains").string(var_1096);
    }
    if let Some(var_1097) = &input.next_token {
        object.key("NextToken").string(var_1097);
    }
    if let Some(var_1098) = &input.sort_by {
        object.key("SortBy").string(var_1098.as_str());
    }
    if let Some(var_1099) = &input.sort_order {
        object.key("SortOrder").string(var_1099.as_str());
    }
}

pub fn serialize_structure_crate_input_list_studio_lifecycle_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudioLifecycleConfigsInput,
) {
    if let Some(var_1100) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1100).into()),
        );
    }
    if let Some(var_1101) = &input.next_token {
        object.key("NextToken").string(var_1101);
    }
    if let Some(var_1102) = &input.name_contains {
        object.key("NameContains").string(var_1102);
    }
    if let Some(var_1103) = &input.app_type_equals {
        object.key("AppTypeEquals").string(var_1103.as_str());
    }
    if let Some(var_1104) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1104, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1105) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1105, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1106) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .instant(var_1106, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1107) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .instant(var_1107, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1108) = &input.sort_by {
        object.key("SortBy").string(var_1108.as_str());
    }
    if let Some(var_1109) = &input.sort_order {
        object.key("SortOrder").string(var_1109.as_str());
    }
}

pub fn serialize_structure_crate_input_list_subscribed_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSubscribedWorkteamsInput,
) {
    if let Some(var_1110) = &input.name_contains {
        object.key("NameContains").string(var_1110);
    }
    if let Some(var_1111) = &input.next_token {
        object.key("NextToken").string(var_1111);
    }
    if let Some(var_1112) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1112).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsInput,
) {
    if let Some(var_1113) = &input.resource_arn {
        object.key("ResourceArn").string(var_1113);
    }
    if let Some(var_1114) = &input.next_token {
        object.key("NextToken").string(var_1114);
    }
    if let Some(var_1115) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1115).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_training_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsInput,
) {
    if let Some(var_1116) = &input.next_token {
        object.key("NextToken").string(var_1116);
    }
    if let Some(var_1117) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1117).into()),
        );
    }
    if let Some(var_1118) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1118, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1119) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1119, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1120) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1120, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1121) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1121, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1122) = &input.name_contains {
        object.key("NameContains").string(var_1122);
    }
    if let Some(var_1123) = &input.status_equals {
        object.key("StatusEquals").string(var_1123.as_str());
    }
    if let Some(var_1124) = &input.sort_by {
        object.key("SortBy").string(var_1124.as_str());
    }
    if let Some(var_1125) = &input.sort_order {
        object.key("SortOrder").string(var_1125.as_str());
    }
}

pub fn serialize_structure_crate_input_list_training_jobs_for_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsForHyperParameterTuningJobInput,
) {
    if let Some(var_1126) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1126);
    }
    if let Some(var_1127) = &input.next_token {
        object.key("NextToken").string(var_1127);
    }
    if let Some(var_1128) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1128).into()),
        );
    }
    if let Some(var_1129) = &input.status_equals {
        object.key("StatusEquals").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.sort_by {
        object.key("SortBy").string(var_1130.as_str());
    }
    if let Some(var_1131) = &input.sort_order {
        object.key("SortOrder").string(var_1131.as_str());
    }
}

pub fn serialize_structure_crate_input_list_transform_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTransformJobsInput,
) {
    if let Some(var_1132) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1132, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1133) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1133, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1134) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1134, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1135) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1135, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1136) = &input.name_contains {
        object.key("NameContains").string(var_1136);
    }
    if let Some(var_1137) = &input.status_equals {
        object.key("StatusEquals").string(var_1137.as_str());
    }
    if let Some(var_1138) = &input.sort_by {
        object.key("SortBy").string(var_1138.as_str());
    }
    if let Some(var_1139) = &input.sort_order {
        object.key("SortOrder").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.next_token {
        object.key("NextToken").string(var_1140);
    }
    if let Some(var_1141) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1141).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_trial_components_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialComponentsInput,
) {
    if let Some(var_1142) = &input.experiment_name {
        object.key("ExperimentName").string(var_1142);
    }
    if let Some(var_1143) = &input.trial_name {
        object.key("TrialName").string(var_1143);
    }
    if let Some(var_1144) = &input.source_arn {
        object.key("SourceArn").string(var_1144);
    }
    if let Some(var_1145) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1145, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1146) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1146, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1147) = &input.sort_by {
        object.key("SortBy").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.sort_order {
        object.key("SortOrder").string(var_1148.as_str());
    }
    if let Some(var_1149) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1149).into()),
        );
    }
    if let Some(var_1150) = &input.next_token {
        object.key("NextToken").string(var_1150);
    }
}

pub fn serialize_structure_crate_input_list_trials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialsInput,
) {
    if let Some(var_1151) = &input.experiment_name {
        object.key("ExperimentName").string(var_1151);
    }
    if let Some(var_1152) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1152);
    }
    if let Some(var_1153) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1153, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1154) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1154, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1155) = &input.sort_by {
        object.key("SortBy").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.sort_order {
        object.key("SortOrder").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1157).into()),
        );
    }
    if let Some(var_1158) = &input.next_token {
        object.key("NextToken").string(var_1158);
    }
}

pub fn serialize_structure_crate_input_list_user_profiles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserProfilesInput,
) {
    if let Some(var_1159) = &input.next_token {
        object.key("NextToken").string(var_1159);
    }
    if let Some(var_1160) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1160).into()),
        );
    }
    if let Some(var_1161) = &input.sort_order {
        object.key("SortOrder").string(var_1161.as_str());
    }
    if let Some(var_1162) = &input.sort_by {
        object.key("SortBy").string(var_1162.as_str());
    }
    if let Some(var_1163) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_1163);
    }
    if let Some(var_1164) = &input.user_profile_name_contains {
        object.key("UserProfileNameContains").string(var_1164);
    }
}

pub fn serialize_structure_crate_input_list_workforces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkforcesInput,
) {
    if let Some(var_1165) = &input.sort_by {
        object.key("SortBy").string(var_1165.as_str());
    }
    if let Some(var_1166) = &input.sort_order {
        object.key("SortOrder").string(var_1166.as_str());
    }
    if let Some(var_1167) = &input.name_contains {
        object.key("NameContains").string(var_1167);
    }
    if let Some(var_1168) = &input.next_token {
        object.key("NextToken").string(var_1168);
    }
    if let Some(var_1169) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1169).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkteamsInput,
) {
    if let Some(var_1170) = &input.sort_by {
        object.key("SortBy").string(var_1170.as_str());
    }
    if let Some(var_1171) = &input.sort_order {
        object.key("SortOrder").string(var_1171.as_str());
    }
    if let Some(var_1172) = &input.name_contains {
        object.key("NameContains").string(var_1172);
    }
    if let Some(var_1173) = &input.next_token {
        object.key("NextToken").string(var_1173);
    }
    if let Some(var_1174) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1174).into()),
        );
    }
}

pub fn serialize_structure_crate_input_put_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutModelPackageGroupPolicyInput,
) {
    if let Some(var_1175) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_1175);
    }
    if let Some(var_1176) = &input.resource_policy {
        object.key("ResourcePolicy").string(var_1176);
    }
}

pub fn serialize_structure_crate_input_register_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDevicesInput,
) {
    if let Some(var_1177) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1177);
    }
    if let Some(var_1178) = &input.devices {
        let mut array_1179 = object.key("Devices").start_array();
        for item_1180 in var_1178 {
            {
                let mut object_1181 = array_1179.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(
                    &mut object_1181,
                    item_1180,
                );
                object_1181.finish();
            }
        }
        array_1179.finish();
    }
    if let Some(var_1182) = &input.tags {
        let mut array_1183 = object.key("Tags").start_array();
        for item_1184 in var_1182 {
            {
                let mut object_1185 = array_1183.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_1185, item_1184);
                object_1185.finish();
            }
        }
        array_1183.finish();
    }
}

pub fn serialize_structure_crate_input_render_ui_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RenderUiTemplateInput,
) {
    if let Some(var_1186) = &input.ui_template {
        let mut object_1187 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_1187, var_1186);
        object_1187.finish();
    }
    if let Some(var_1188) = &input.task {
        let mut object_1189 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_crate_model_renderable_task(
            &mut object_1189,
            var_1188,
        );
        object_1189.finish();
    }
    if let Some(var_1190) = &input.role_arn {
        object.key("RoleArn").string(var_1190);
    }
    if let Some(var_1191) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1191);
    }
}

pub fn serialize_structure_crate_input_retry_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetryPipelineExecutionInput,
) {
    if let Some(var_1192) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1192);
    }
    if let Some(var_1193) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1193);
    }
}

pub fn serialize_structure_crate_input_search_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchInput,
) {
    if let Some(var_1194) = &input.resource {
        object.key("Resource").string(var_1194.as_str());
    }
    if let Some(var_1195) = &input.search_expression {
        let mut object_1196 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_crate_model_search_expression(
            &mut object_1196,
            var_1195,
        );
        object_1196.finish();
    }
    if let Some(var_1197) = &input.sort_by {
        object.key("SortBy").string(var_1197);
    }
    if let Some(var_1198) = &input.sort_order {
        object.key("SortOrder").string(var_1198.as_str());
    }
    if let Some(var_1199) = &input.next_token {
        object.key("NextToken").string(var_1199);
    }
    if let Some(var_1200) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1200).into()),
        );
    }
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_failure_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepFailureInput,
) {
    if let Some(var_1201) = &input.callback_token {
        object.key("CallbackToken").string(var_1201);
    }
    if let Some(var_1202) = &input.failure_reason {
        object.key("FailureReason").string(var_1202);
    }
    if let Some(var_1203) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1203);
    }
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_success_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepSuccessInput,
) {
    if let Some(var_1204) = &input.callback_token {
        object.key("CallbackToken").string(var_1204);
    }
    if let Some(var_1205) = &input.output_parameters {
        let mut array_1206 = object.key("OutputParameters").start_array();
        for item_1207 in var_1205 {
            {
                let mut object_1208 = array_1206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_parameter(
                    &mut object_1208,
                    item_1207,
                );
                object_1208.finish();
            }
        }
        array_1206.finish();
    }
    if let Some(var_1209) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1209);
    }
}

pub fn serialize_structure_crate_input_start_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMonitoringScheduleInput,
) {
    if let Some(var_1210) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1210);
    }
}

pub fn serialize_structure_crate_input_start_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookInstanceInput,
) {
    if let Some(var_1211) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1211);
    }
}

pub fn serialize_structure_crate_input_start_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPipelineExecutionInput,
) {
    if let Some(var_1212) = &input.pipeline_name {
        object.key("PipelineName").string(var_1212);
    }
    if let Some(var_1213) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1213);
    }
    if let Some(var_1214) = &input.pipeline_parameters {
        let mut array_1215 = object.key("PipelineParameters").start_array();
        for item_1216 in var_1214 {
            {
                let mut object_1217 = array_1215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter(
                    &mut object_1217,
                    item_1216,
                );
                object_1217.finish();
            }
        }
        array_1215.finish();
    }
    if let Some(var_1218) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1218);
    }
    if let Some(var_1219) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1219);
    }
}

pub fn serialize_structure_crate_input_stop_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutoMlJobInput,
) {
    if let Some(var_1220) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_1220);
    }
}

pub fn serialize_structure_crate_input_stop_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCompilationJobInput,
) {
    if let Some(var_1221) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1221);
    }
}

pub fn serialize_structure_crate_input_stop_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgePackagingJobInput,
) {
    if let Some(var_1222) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1222);
    }
}

pub fn serialize_structure_crate_input_stop_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopHyperParameterTuningJobInput,
) {
    if let Some(var_1223) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1223);
    }
}

pub fn serialize_structure_crate_input_stop_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopLabelingJobInput,
) {
    if let Some(var_1224) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1224);
    }
}

pub fn serialize_structure_crate_input_stop_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopMonitoringScheduleInput,
) {
    if let Some(var_1225) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1225);
    }
}

pub fn serialize_structure_crate_input_stop_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookInstanceInput,
) {
    if let Some(var_1226) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1226);
    }
}

pub fn serialize_structure_crate_input_stop_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPipelineExecutionInput,
) {
    if let Some(var_1227) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1227);
    }
    if let Some(var_1228) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1228);
    }
}

pub fn serialize_structure_crate_input_stop_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProcessingJobInput,
) {
    if let Some(var_1229) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_1229);
    }
}

pub fn serialize_structure_crate_input_stop_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingJobInput,
) {
    if let Some(var_1230) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1230);
    }
}

pub fn serialize_structure_crate_input_stop_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTransformJobInput,
) {
    if let Some(var_1231) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1231);
    }
}

pub fn serialize_structure_crate_input_update_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionInput,
) {
    if let Some(var_1232) = &input.action_name {
        object.key("ActionName").string(var_1232);
    }
    if let Some(var_1233) = &input.description {
        object.key("Description").string(var_1233);
    }
    if let Some(var_1234) = &input.status {
        object.key("Status").string(var_1234.as_str());
    }
    if let Some(var_1235) = &input.properties {
        let mut object_1236 = object.key("Properties").start_object();
        for (key_1237, value_1238) in var_1235 {
            {
                object_1236.key(key_1237).string(value_1238);
            }
        }
        object_1236.finish();
    }
    if let Some(var_1239) = &input.properties_to_remove {
        let mut array_1240 = object.key("PropertiesToRemove").start_array();
        for item_1241 in var_1239 {
            {
                array_1240.value().string(item_1241);
            }
        }
        array_1240.finish();
    }
}

pub fn serialize_structure_crate_input_update_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppImageConfigInput,
) {
    if let Some(var_1242) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_1242);
    }
    if let Some(var_1243) = &input.kernel_gateway_image_config {
        let mut object_1244 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(
            &mut object_1244,
            var_1243,
        );
        object_1244.finish();
    }
}

pub fn serialize_structure_crate_input_update_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateArtifactInput,
) {
    if let Some(var_1245) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_1245);
    }
    if let Some(var_1246) = &input.artifact_name {
        object.key("ArtifactName").string(var_1246);
    }
    if let Some(var_1247) = &input.properties {
        let mut object_1248 = object.key("Properties").start_object();
        for (key_1249, value_1250) in var_1247 {
            {
                object_1248.key(key_1249).string(value_1250);
            }
        }
        object_1248.finish();
    }
    if let Some(var_1251) = &input.properties_to_remove {
        let mut array_1252 = object.key("PropertiesToRemove").start_array();
        for item_1253 in var_1251 {
            {
                array_1252.value().string(item_1253);
            }
        }
        array_1252.finish();
    }
}

pub fn serialize_structure_crate_input_update_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeRepositoryInput,
) {
    if let Some(var_1254) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_1254);
    }
    if let Some(var_1255) = &input.git_config {
        let mut object_1256 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config_for_update(
            &mut object_1256,
            var_1255,
        );
        object_1256.finish();
    }
}

pub fn serialize_structure_crate_input_update_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContextInput,
) {
    if let Some(var_1257) = &input.context_name {
        object.key("ContextName").string(var_1257);
    }
    if let Some(var_1258) = &input.description {
        object.key("Description").string(var_1258);
    }
    if let Some(var_1259) = &input.properties {
        let mut object_1260 = object.key("Properties").start_object();
        for (key_1261, value_1262) in var_1259 {
            {
                object_1260.key(key_1261).string(value_1262);
            }
        }
        object_1260.finish();
    }
    if let Some(var_1263) = &input.properties_to_remove {
        let mut array_1264 = object.key("PropertiesToRemove").start_array();
        for item_1265 in var_1263 {
            {
                array_1264.value().string(item_1265);
            }
        }
        array_1264.finish();
    }
}

pub fn serialize_structure_crate_input_update_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceFleetInput,
) {
    if let Some(var_1266) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1266);
    }
    if let Some(var_1267) = &input.role_arn {
        object.key("RoleArn").string(var_1267);
    }
    if let Some(var_1268) = &input.description {
        object.key("Description").string(var_1268);
    }
    if let Some(var_1269) = &input.output_config {
        let mut object_1270 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_1270,
            var_1269,
        );
        object_1270.finish();
    }
    if let Some(var_1271) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_1271);
    }
}

pub fn serialize_structure_crate_input_update_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevicesInput,
) {
    if let Some(var_1272) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1272);
    }
    if let Some(var_1273) = &input.devices {
        let mut array_1274 = object.key("Devices").start_array();
        for item_1275 in var_1273 {
            {
                let mut object_1276 = array_1274.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(
                    &mut object_1276,
                    item_1275,
                );
                object_1276.finish();
            }
        }
        array_1274.finish();
    }
}

pub fn serialize_structure_crate_input_update_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) {
    if let Some(var_1277) = &input.domain_id {
        object.key("DomainId").string(var_1277);
    }
    if let Some(var_1278) = &input.default_user_settings {
        let mut object_1279 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1279, var_1278);
        object_1279.finish();
    }
}

pub fn serialize_structure_crate_input_update_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) {
    if let Some(var_1280) = &input.endpoint_name {
        object.key("EndpointName").string(var_1280);
    }
    if let Some(var_1281) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1281);
    }
    if input.retain_all_variant_properties {
        object
            .key("RetainAllVariantProperties")
            .boolean(input.retain_all_variant_properties);
    }
    if let Some(var_1282) = &input.exclude_retained_variant_properties {
        let mut array_1283 = object.key("ExcludeRetainedVariantProperties").start_array();
        for item_1284 in var_1282 {
            {
                let mut object_1285 = array_1283.value().start_object();
                crate::json_ser::serialize_structure_crate_model_variant_property(
                    &mut object_1285,
                    item_1284,
                );
                object_1285.finish();
            }
        }
        array_1283.finish();
    }
    if let Some(var_1286) = &input.deployment_config {
        let mut object_1287 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(
            &mut object_1287,
            var_1286,
        );
        object_1287.finish();
    }
}

pub fn serialize_structure_crate_input_update_endpoint_weights_and_capacities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointWeightsAndCapacitiesInput,
) {
    if let Some(var_1288) = &input.endpoint_name {
        object.key("EndpointName").string(var_1288);
    }
    if let Some(var_1289) = &input.desired_weights_and_capacities {
        let mut array_1290 = object.key("DesiredWeightsAndCapacities").start_array();
        for item_1291 in var_1289 {
            {
                let mut object_1292 = array_1290.value().start_object();
                crate::json_ser::serialize_structure_crate_model_desired_weight_and_capacity(
                    &mut object_1292,
                    item_1291,
                );
                object_1292.finish();
            }
        }
        array_1290.finish();
    }
}

pub fn serialize_structure_crate_input_update_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperimentInput,
) {
    if let Some(var_1293) = &input.experiment_name {
        object.key("ExperimentName").string(var_1293);
    }
    if let Some(var_1294) = &input.display_name {
        object.key("DisplayName").string(var_1294);
    }
    if let Some(var_1295) = &input.description {
        object.key("Description").string(var_1295);
    }
}

pub fn serialize_structure_crate_input_update_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImageInput,
) {
    if let Some(var_1296) = &input.delete_properties {
        let mut array_1297 = object.key("DeleteProperties").start_array();
        for item_1298 in var_1296 {
            {
                array_1297.value().string(item_1298);
            }
        }
        array_1297.finish();
    }
    if let Some(var_1299) = &input.description {
        object.key("Description").string(var_1299);
    }
    if let Some(var_1300) = &input.display_name {
        object.key("DisplayName").string(var_1300);
    }
    if let Some(var_1301) = &input.image_name {
        object.key("ImageName").string(var_1301);
    }
    if let Some(var_1302) = &input.role_arn {
        object.key("RoleArn").string(var_1302);
    }
}

pub fn serialize_structure_crate_input_update_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelPackageInput,
) {
    if let Some(var_1303) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1303);
    }
    if let Some(var_1304) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1304.as_str());
    }
    if let Some(var_1305) = &input.approval_description {
        object.key("ApprovalDescription").string(var_1305);
    }
}

pub fn serialize_structure_crate_input_update_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMonitoringScheduleInput,
) {
    if let Some(var_1306) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1306);
    }
    if let Some(var_1307) = &input.monitoring_schedule_config {
        let mut object_1308 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(
            &mut object_1308,
            var_1307,
        );
        object_1308.finish();
    }
}

pub fn serialize_structure_crate_input_update_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceInput,
) {
    if let Some(var_1309) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1309);
    }
    if let Some(var_1310) = &input.instance_type {
        object.key("InstanceType").string(var_1310.as_str());
    }
    if let Some(var_1311) = &input.role_arn {
        object.key("RoleArn").string(var_1311);
    }
    if let Some(var_1312) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_1312);
    }
    if input.disassociate_lifecycle_config {
        object
            .key("DisassociateLifecycleConfig")
            .boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_1313) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1313).into()),
        );
    }
    if let Some(var_1314) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_1314);
    }
    if let Some(var_1315) = &input.additional_code_repositories {
        let mut array_1316 = object.key("AdditionalCodeRepositories").start_array();
        for item_1317 in var_1315 {
            {
                array_1316.value().string(item_1317);
            }
        }
        array_1316.finish();
    }
    if let Some(var_1318) = &input.accelerator_types {
        let mut array_1319 = object.key("AcceleratorTypes").start_array();
        for item_1320 in var_1318 {
            {
                array_1319.value().string(item_1320.as_str());
            }
        }
        array_1319.finish();
    }
    if input.disassociate_accelerator_types {
        object
            .key("DisassociateAcceleratorTypes")
            .boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object
            .key("DisassociateDefaultCodeRepository")
            .boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object
            .key("DisassociateAdditionalCodeRepositories")
            .boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_1321) = &input.root_access {
        object.key("RootAccess").string(var_1321.as_str());
    }
}

pub fn serialize_structure_crate_input_update_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_1322) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_1322);
    }
    if let Some(var_1323) = &input.on_create {
        let mut array_1324 = object.key("OnCreate").start_array();
        for item_1325 in var_1323 {
            {
                let mut object_1326 = array_1324.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_1326,
                    item_1325,
                );
                object_1326.finish();
            }
        }
        array_1324.finish();
    }
    if let Some(var_1327) = &input.on_start {
        let mut array_1328 = object.key("OnStart").start_array();
        for item_1329 in var_1327 {
            {
                let mut object_1330 = array_1328.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_1330,
                    item_1329,
                );
                object_1330.finish();
            }
        }
        array_1328.finish();
    }
}

pub fn serialize_structure_crate_input_update_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineInput,
) {
    if let Some(var_1331) = &input.pipeline_name {
        object.key("PipelineName").string(var_1331);
    }
    if let Some(var_1332) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_1332);
    }
    if let Some(var_1333) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_1333);
    }
    if let Some(var_1334) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_1334);
    }
    if let Some(var_1335) = &input.role_arn {
        object.key("RoleArn").string(var_1335);
    }
}

pub fn serialize_structure_crate_input_update_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineExecutionInput,
) {
    if let Some(var_1336) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1336);
    }
    if let Some(var_1337) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1337);
    }
    if let Some(var_1338) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1338);
    }
}

pub fn serialize_structure_crate_input_update_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrainingJobInput,
) {
    if let Some(var_1339) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1339);
    }
    if let Some(var_1340) = &input.profiler_config {
        let mut object_1341 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config_for_update(
            &mut object_1341,
            var_1340,
        );
        object_1341.finish();
    }
    if let Some(var_1342) = &input.profiler_rule_configurations {
        let mut array_1343 = object.key("ProfilerRuleConfigurations").start_array();
        for item_1344 in var_1342 {
            {
                let mut object_1345 = array_1343.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(
                    &mut object_1345,
                    item_1344,
                );
                object_1345.finish();
            }
        }
        array_1343.finish();
    }
}

pub fn serialize_structure_crate_input_update_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialInput,
) {
    if let Some(var_1346) = &input.trial_name {
        object.key("TrialName").string(var_1346);
    }
    if let Some(var_1347) = &input.display_name {
        object.key("DisplayName").string(var_1347);
    }
}

pub fn serialize_structure_crate_input_update_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialComponentInput,
) {
    if let Some(var_1348) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1348);
    }
    if let Some(var_1349) = &input.display_name {
        object.key("DisplayName").string(var_1349);
    }
    if let Some(var_1350) = &input.status {
        let mut object_1351 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(
            &mut object_1351,
            var_1350,
        );
        object_1351.finish();
    }
    if let Some(var_1352) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_1352, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1353) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_1353, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1354) = &input.parameters {
        let mut object_1355 = object.key("Parameters").start_object();
        for (key_1356, value_1357) in var_1354 {
            {
                let mut object_1358 = object_1355.key(key_1356).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(
                    &mut object_1358,
                    value_1357,
                );
                object_1358.finish();
            }
        }
        object_1355.finish();
    }
    if let Some(var_1359) = &input.parameters_to_remove {
        let mut array_1360 = object.key("ParametersToRemove").start_array();
        for item_1361 in var_1359 {
            {
                array_1360.value().string(item_1361);
            }
        }
        array_1360.finish();
    }
    if let Some(var_1362) = &input.input_artifacts {
        let mut object_1363 = object.key("InputArtifacts").start_object();
        for (key_1364, value_1365) in var_1362 {
            {
                let mut object_1366 = object_1363.key(key_1364).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_1366,
                    value_1365,
                );
                object_1366.finish();
            }
        }
        object_1363.finish();
    }
    if let Some(var_1367) = &input.input_artifacts_to_remove {
        let mut array_1368 = object.key("InputArtifactsToRemove").start_array();
        for item_1369 in var_1367 {
            {
                array_1368.value().string(item_1369);
            }
        }
        array_1368.finish();
    }
    if let Some(var_1370) = &input.output_artifacts {
        let mut object_1371 = object.key("OutputArtifacts").start_object();
        for (key_1372, value_1373) in var_1370 {
            {
                let mut object_1374 = object_1371.key(key_1372).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_1374,
                    value_1373,
                );
                object_1374.finish();
            }
        }
        object_1371.finish();
    }
    if let Some(var_1375) = &input.output_artifacts_to_remove {
        let mut array_1376 = object.key("OutputArtifactsToRemove").start_array();
        for item_1377 in var_1375 {
            {
                array_1376.value().string(item_1377);
            }
        }
        array_1376.finish();
    }
}

pub fn serialize_structure_crate_input_update_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserProfileInput,
) {
    if let Some(var_1378) = &input.domain_id {
        object.key("DomainId").string(var_1378);
    }
    if let Some(var_1379) = &input.user_profile_name {
        object.key("UserProfileName").string(var_1379);
    }
    if let Some(var_1380) = &input.user_settings {
        let mut object_1381 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1381, var_1380);
        object_1381.finish();
    }
}

pub fn serialize_structure_crate_input_update_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkforceInput,
) {
    if let Some(var_1382) = &input.workforce_name {
        object.key("WorkforceName").string(var_1382);
    }
    if let Some(var_1383) = &input.source_ip_config {
        let mut object_1384 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(
            &mut object_1384,
            var_1383,
        );
        object_1384.finish();
    }
    if let Some(var_1385) = &input.oidc_config {
        let mut object_1386 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_1386, var_1385);
        object_1386.finish();
    }
}

pub fn serialize_structure_crate_input_update_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkteamInput,
) {
    if let Some(var_1387) = &input.workteam_name {
        object.key("WorkteamName").string(var_1387);
    }
    if let Some(var_1388) = &input.member_definitions {
        let mut array_1389 = object.key("MemberDefinitions").start_array();
        for item_1390 in var_1388 {
            {
                let mut object_1391 = array_1389.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(
                    &mut object_1391,
                    item_1390,
                );
                object_1391.finish();
            }
        }
        array_1389.finish();
    }
    if let Some(var_1392) = &input.description {
        object.key("Description").string(var_1392);
    }
    if let Some(var_1393) = &input.notification_configuration {
        let mut object_1394 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(
            &mut object_1394,
            var_1393,
        );
        object_1394.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_1395) = &input.key {
        object.key("Key").string(var_1395);
    }
    if let Some(var_1396) = &input.value {
        object.key("Value").string(var_1396);
    }
}

pub fn serialize_structure_crate_model_action_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionSource,
) {
    if let Some(var_1397) = &input.source_uri {
        object.key("SourceUri").string(var_1397);
    }
    if let Some(var_1398) = &input.source_type {
        object.key("SourceType").string(var_1398);
    }
    if let Some(var_1399) = &input.source_id {
        object.key("SourceId").string(var_1399);
    }
}

pub fn serialize_structure_crate_model_metadata_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataProperties,
) {
    if let Some(var_1400) = &input.commit_id {
        object.key("CommitId").string(var_1400);
    }
    if let Some(var_1401) = &input.repository {
        object.key("Repository").string(var_1401);
    }
    if let Some(var_1402) = &input.generated_by {
        object.key("GeneratedBy").string(var_1402);
    }
    if let Some(var_1403) = &input.project_id {
        object.key("ProjectId").string(var_1403);
    }
}

pub fn serialize_structure_crate_model_training_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingSpecification,
) {
    if let Some(var_1404) = &input.training_image {
        object.key("TrainingImage").string(var_1404);
    }
    if let Some(var_1405) = &input.training_image_digest {
        object.key("TrainingImageDigest").string(var_1405);
    }
    if let Some(var_1406) = &input.supported_hyper_parameters {
        let mut array_1407 = object.key("SupportedHyperParameters").start_array();
        for item_1408 in var_1406 {
            {
                let mut object_1409 = array_1407.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_specification(
                    &mut object_1409,
                    item_1408,
                );
                object_1409.finish();
            }
        }
        array_1407.finish();
    }
    if let Some(var_1410) = &input.supported_training_instance_types {
        let mut array_1411 = object.key("SupportedTrainingInstanceTypes").start_array();
        for item_1412 in var_1410 {
            {
                array_1411.value().string(item_1412.as_str());
            }
        }
        array_1411.finish();
    }
    if input.supports_distributed_training {
        object
            .key("SupportsDistributedTraining")
            .boolean(input.supports_distributed_training);
    }
    if let Some(var_1413) = &input.metric_definitions {
        let mut array_1414 = object.key("MetricDefinitions").start_array();
        for item_1415 in var_1413 {
            {
                let mut object_1416 = array_1414.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_1416,
                    item_1415,
                );
                object_1416.finish();
            }
        }
        array_1414.finish();
    }
    if let Some(var_1417) = &input.training_channels {
        let mut array_1418 = object.key("TrainingChannels").start_array();
        for item_1419 in var_1417 {
            {
                let mut object_1420 = array_1418.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel_specification(
                    &mut object_1420,
                    item_1419,
                );
                object_1420.finish();
            }
        }
        array_1418.finish();
    }
    if let Some(var_1421) = &input.supported_tuning_job_objective_metrics {
        let mut array_1422 = object
            .key("SupportedTuningJobObjectiveMetrics")
            .start_array();
        for item_1423 in var_1421 {
            {
                let mut object_1424 = array_1422.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(&mut object_1424, item_1423);
                object_1424.finish();
            }
        }
        array_1422.finish();
    }
}

pub fn serialize_structure_crate_model_inference_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceSpecification,
) {
    if let Some(var_1425) = &input.containers {
        let mut array_1426 = object.key("Containers").start_array();
        for item_1427 in var_1425 {
            {
                let mut object_1428 = array_1426.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_container_definition(
                    &mut object_1428,
                    item_1427,
                );
                object_1428.finish();
            }
        }
        array_1426.finish();
    }
    if let Some(var_1429) = &input.supported_transform_instance_types {
        let mut array_1430 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1431 in var_1429 {
            {
                array_1430.value().string(item_1431.as_str());
            }
        }
        array_1430.finish();
    }
    if let Some(var_1432) = &input.supported_realtime_inference_instance_types {
        let mut array_1433 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1434 in var_1432 {
            {
                array_1433.value().string(item_1434.as_str());
            }
        }
        array_1433.finish();
    }
    if let Some(var_1435) = &input.supported_content_types {
        let mut array_1436 = object.key("SupportedContentTypes").start_array();
        for item_1437 in var_1435 {
            {
                array_1436.value().string(item_1437);
            }
        }
        array_1436.finish();
    }
    if let Some(var_1438) = &input.supported_response_mime_types {
        let mut array_1439 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1440 in var_1438 {
            {
                array_1439.value().string(item_1440);
            }
        }
        array_1439.finish();
    }
}

pub fn serialize_structure_crate_model_algorithm_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationSpecification,
) {
    if let Some(var_1441) = &input.validation_role {
        object.key("ValidationRole").string(var_1441);
    }
    if let Some(var_1442) = &input.validation_profiles {
        let mut array_1443 = object.key("ValidationProfiles").start_array();
        for item_1444 in var_1442 {
            {
                let mut object_1445 = array_1443.value().start_object();
                crate::json_ser::serialize_structure_crate_model_algorithm_validation_profile(
                    &mut object_1445,
                    item_1444,
                );
                object_1445.finish();
            }
        }
        array_1443.finish();
    }
}

pub fn serialize_structure_crate_model_resource_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceSpec,
) {
    if let Some(var_1446) = &input.sage_maker_image_arn {
        object.key("SageMakerImageArn").string(var_1446);
    }
    if let Some(var_1447) = &input.sage_maker_image_version_arn {
        object.key("SageMakerImageVersionArn").string(var_1447);
    }
    if let Some(var_1448) = &input.instance_type {
        object.key("InstanceType").string(var_1448.as_str());
    }
    if let Some(var_1449) = &input.lifecycle_config_arn {
        object.key("LifecycleConfigArn").string(var_1449);
    }
}

pub fn serialize_structure_crate_model_kernel_gateway_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayImageConfig,
) {
    if let Some(var_1450) = &input.kernel_specs {
        let mut array_1451 = object.key("KernelSpecs").start_array();
        for item_1452 in var_1450 {
            {
                let mut object_1453 = array_1451.value().start_object();
                crate::json_ser::serialize_structure_crate_model_kernel_spec(
                    &mut object_1453,
                    item_1452,
                );
                object_1453.finish();
            }
        }
        array_1451.finish();
    }
    if let Some(var_1454) = &input.file_system_config {
        let mut object_1455 = object.key("FileSystemConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_config(
            &mut object_1455,
            var_1454,
        );
        object_1455.finish();
    }
}

pub fn serialize_structure_crate_model_artifact_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSource,
) {
    if let Some(var_1456) = &input.source_uri {
        object.key("SourceUri").string(var_1456);
    }
    if let Some(var_1457) = &input.source_types {
        let mut array_1458 = object.key("SourceTypes").start_array();
        for item_1459 in var_1457 {
            {
                let mut object_1460 = array_1458.value().start_object();
                crate::json_ser::serialize_structure_crate_model_artifact_source_type(
                    &mut object_1460,
                    item_1459,
                );
                object_1460.finish();
            }
        }
        array_1458.finish();
    }
}

pub fn serialize_structure_crate_model_auto_ml_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlChannel,
) {
    if let Some(var_1461) = &input.data_source {
        let mut object_1462 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_data_source(
            &mut object_1462,
            var_1461,
        );
        object_1462.finish();
    }
    if let Some(var_1463) = &input.compression_type {
        object.key("CompressionType").string(var_1463.as_str());
    }
    if let Some(var_1464) = &input.target_attribute_name {
        object.key("TargetAttributeName").string(var_1464);
    }
}

pub fn serialize_structure_crate_model_auto_ml_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlOutputDataConfig,
) {
    if let Some(var_1465) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1465);
    }
    if let Some(var_1466) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1466);
    }
}

pub fn serialize_structure_crate_model_auto_ml_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobObjective,
) {
    if let Some(var_1467) = &input.metric_name {
        object.key("MetricName").string(var_1467.as_str());
    }
}

pub fn serialize_structure_crate_model_auto_ml_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobConfig,
) {
    if let Some(var_1468) = &input.completion_criteria {
        let mut object_1469 = object.key("CompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_completion_criteria(
            &mut object_1469,
            var_1468,
        );
        object_1469.finish();
    }
    if let Some(var_1470) = &input.security_config {
        let mut object_1471 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_security_config(
            &mut object_1471,
            var_1470,
        );
        object_1471.finish();
    }
}

pub fn serialize_structure_crate_model_model_deploy_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDeployConfig,
) {
    if input.auto_generate_endpoint_name {
        object
            .key("AutoGenerateEndpointName")
            .boolean(input.auto_generate_endpoint_name);
    }
    if let Some(var_1472) = &input.endpoint_name {
        object.key("EndpointName").string(var_1472);
    }
}

pub fn serialize_structure_crate_model_git_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfig,
) {
    if let Some(var_1473) = &input.repository_url {
        object.key("RepositoryUrl").string(var_1473);
    }
    if let Some(var_1474) = &input.branch {
        object.key("Branch").string(var_1474);
    }
    if let Some(var_1475) = &input.secret_arn {
        object.key("SecretArn").string(var_1475);
    }
}

pub fn serialize_structure_crate_model_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputConfig,
) {
    if let Some(var_1476) = &input.s3_uri {
        object.key("S3Uri").string(var_1476);
    }
    if let Some(var_1477) = &input.data_input_config {
        object.key("DataInputConfig").string(var_1477);
    }
    if let Some(var_1478) = &input.framework {
        object.key("Framework").string(var_1478.as_str());
    }
    if let Some(var_1479) = &input.framework_version {
        object.key("FrameworkVersion").string(var_1479);
    }
}

pub fn serialize_structure_crate_model_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) {
    if let Some(var_1480) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1480);
    }
    if let Some(var_1481) = &input.target_device {
        object.key("TargetDevice").string(var_1481.as_str());
    }
    if let Some(var_1482) = &input.target_platform {
        let mut object_1483 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_crate_model_target_platform(
            &mut object_1483,
            var_1482,
        );
        object_1483.finish();
    }
    if let Some(var_1484) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1484);
    }
    if let Some(var_1485) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1485);
    }
}

pub fn serialize_structure_crate_model_neo_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeoVpcConfig,
) {
    if let Some(var_1486) = &input.security_group_ids {
        let mut array_1487 = object.key("SecurityGroupIds").start_array();
        for item_1488 in var_1486 {
            {
                array_1487.value().string(item_1488);
            }
        }
        array_1487.finish();
    }
    if let Some(var_1489) = &input.subnets {
        let mut array_1490 = object.key("Subnets").start_array();
        for item_1491 in var_1489 {
            {
                array_1490.value().string(item_1491);
            }
        }
        array_1490.finish();
    }
}

pub fn serialize_structure_crate_model_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoppingCondition,
) {
    if input.max_runtime_in_seconds != 0 {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    if let Some(var_1492) = &input.max_wait_time_in_seconds {
        object.key("MaxWaitTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1492).into()),
        );
    }
}

pub fn serialize_structure_crate_model_context_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContextSource,
) {
    if let Some(var_1493) = &input.source_uri {
        object.key("SourceUri").string(var_1493);
    }
    if let Some(var_1494) = &input.source_type {
        object.key("SourceType").string(var_1494);
    }
    if let Some(var_1495) = &input.source_id {
        object.key("SourceId").string(var_1495);
    }
}

pub fn serialize_structure_crate_model_data_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityBaselineConfig,
) {
    if let Some(var_1496) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1496);
    }
    if let Some(var_1497) = &input.constraints_resource {
        let mut object_1498 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1498,
            var_1497,
        );
        object_1498.finish();
    }
    if let Some(var_1499) = &input.statistics_resource {
        let mut object_1500 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(
            &mut object_1500,
            var_1499,
        );
        object_1500.finish();
    }
}

pub fn serialize_structure_crate_model_data_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityAppSpecification,
) {
    if let Some(var_1501) = &input.image_uri {
        object.key("ImageUri").string(var_1501);
    }
    if let Some(var_1502) = &input.container_entrypoint {
        let mut array_1503 = object.key("ContainerEntrypoint").start_array();
        for item_1504 in var_1502 {
            {
                array_1503.value().string(item_1504);
            }
        }
        array_1503.finish();
    }
    if let Some(var_1505) = &input.container_arguments {
        let mut array_1506 = object.key("ContainerArguments").start_array();
        for item_1507 in var_1505 {
            {
                array_1506.value().string(item_1507);
            }
        }
        array_1506.finish();
    }
    if let Some(var_1508) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1508);
    }
    if let Some(var_1509) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1509);
    }
    if let Some(var_1510) = &input.environment {
        let mut object_1511 = object.key("Environment").start_object();
        for (key_1512, value_1513) in var_1510 {
            {
                object_1511.key(key_1512).string(value_1513);
            }
        }
        object_1511.finish();
    }
}

pub fn serialize_structure_crate_model_data_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityJobInput,
) {
    if let Some(var_1514) = &input.endpoint_input {
        let mut object_1515 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_1515, var_1514);
        object_1515.finish();
    }
}

pub fn serialize_structure_crate_model_monitoring_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutputConfig,
) {
    if let Some(var_1516) = &input.monitoring_outputs {
        let mut array_1517 = object.key("MonitoringOutputs").start_array();
        for item_1518 in var_1516 {
            {
                let mut object_1519 = array_1517.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_output(
                    &mut object_1519,
                    item_1518,
                );
                object_1519.finish();
            }
        }
        array_1517.finish();
    }
    if let Some(var_1520) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1520);
    }
}

pub fn serialize_structure_crate_model_monitoring_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringResources,
) {
    if let Some(var_1521) = &input.cluster_config {
        let mut object_1522 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_cluster_config(
            &mut object_1522,
            var_1521,
        );
        object_1522.finish();
    }
}

pub fn serialize_structure_crate_model_monitoring_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringNetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1523) = &input.vpc_config {
        let mut object_1524 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1524, var_1523);
        object_1524.finish();
    }
}

pub fn serialize_structure_crate_model_monitoring_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_crate_model_edge_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeOutputConfig,
) {
    if let Some(var_1525) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1525);
    }
    if let Some(var_1526) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1526);
    }
    if let Some(var_1527) = &input.preset_deployment_type {
        object.key("PresetDeploymentType").string(var_1527.as_str());
    }
    if let Some(var_1528) = &input.preset_deployment_config {
        object.key("PresetDeploymentConfig").string(var_1528);
    }
}

pub fn serialize_structure_crate_model_user_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSettings,
) {
    if let Some(var_1529) = &input.execution_role {
        object.key("ExecutionRole").string(var_1529);
    }
    if let Some(var_1530) = &input.security_groups {
        let mut array_1531 = object.key("SecurityGroups").start_array();
        for item_1532 in var_1530 {
            {
                array_1531.value().string(item_1532);
            }
        }
        array_1531.finish();
    }
    if let Some(var_1533) = &input.sharing_settings {
        let mut object_1534 = object.key("SharingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sharing_settings(
            &mut object_1534,
            var_1533,
        );
        object_1534.finish();
    }
    if let Some(var_1535) = &input.jupyter_server_app_settings {
        let mut object_1536 = object.key("JupyterServerAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_jupyter_server_app_settings(
            &mut object_1536,
            var_1535,
        );
        object_1536.finish();
    }
    if let Some(var_1537) = &input.kernel_gateway_app_settings {
        let mut object_1538 = object.key("KernelGatewayAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_app_settings(
            &mut object_1538,
            var_1537,
        );
        object_1538.finish();
    }
    if let Some(var_1539) = &input.tensor_board_app_settings {
        let mut object_1540 = object.key("TensorBoardAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_app_settings(
            &mut object_1540,
            var_1539,
        );
        object_1540.finish();
    }
}

pub fn serialize_structure_crate_model_production_variant(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariant,
) {
    if let Some(var_1541) = &input.variant_name {
        object.key("VariantName").string(var_1541);
    }
    if let Some(var_1542) = &input.model_name {
        object.key("ModelName").string(var_1542);
    }
    if let Some(var_1543) = &input.initial_instance_count {
        object.key("InitialInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1543).into()),
        );
    }
    if let Some(var_1544) = &input.instance_type {
        object.key("InstanceType").string(var_1544.as_str());
    }
    if let Some(var_1545) = &input.initial_variant_weight {
        object.key("InitialVariantWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1545).into()),
        );
    }
    if let Some(var_1546) = &input.accelerator_type {
        object.key("AcceleratorType").string(var_1546.as_str());
    }
    if let Some(var_1547) = &input.core_dump_config {
        let mut object_1548 = object.key("CoreDumpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_production_variant_core_dump_config(
            &mut object_1548,
            var_1547,
        );
        object_1548.finish();
    }
}

pub fn serialize_structure_crate_model_data_capture_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCaptureConfig,
) {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1549) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1549).into()),
        );
    }
    if let Some(var_1550) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1550);
    }
    if let Some(var_1551) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1551);
    }
    if let Some(var_1552) = &input.capture_options {
        let mut array_1553 = object.key("CaptureOptions").start_array();
        for item_1554 in var_1552 {
            {
                let mut object_1555 = array_1553.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capture_option(
                    &mut object_1555,
                    item_1554,
                );
                object_1555.finish();
            }
        }
        array_1553.finish();
    }
    if let Some(var_1556) = &input.capture_content_type_header {
        let mut object_1557 = object.key("CaptureContentTypeHeader").start_object();
        crate::json_ser::serialize_structure_crate_model_capture_content_type_header(
            &mut object_1557,
            var_1556,
        );
        object_1557.finish();
    }
}

pub fn serialize_structure_crate_model_async_inference_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceConfig,
) {
    if let Some(var_1558) = &input.client_config {
        let mut object_1559 = object.key("ClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_client_config(
            &mut object_1559,
            var_1558,
        );
        object_1559.finish();
    }
    if let Some(var_1560) = &input.output_config {
        let mut object_1561 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_output_config(
            &mut object_1561,
            var_1560,
        );
        object_1561.finish();
    }
}

pub fn serialize_structure_crate_model_feature_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureDefinition,
) {
    if let Some(var_1562) = &input.feature_name {
        object.key("FeatureName").string(var_1562);
    }
    if let Some(var_1563) = &input.feature_type {
        object.key("FeatureType").string(var_1563.as_str());
    }
}

pub fn serialize_structure_crate_model_online_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreConfig,
) {
    if let Some(var_1564) = &input.security_config {
        let mut object_1565 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_security_config(
            &mut object_1565,
            var_1564,
        );
        object_1565.finish();
    }
    if input.enable_online_store {
        object
            .key("EnableOnlineStore")
            .boolean(input.enable_online_store);
    }
}

pub fn serialize_structure_crate_model_offline_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OfflineStoreConfig,
) {
    if let Some(var_1566) = &input.s3_storage_config {
        let mut object_1567 = object.key("S3StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_storage_config(
            &mut object_1567,
            var_1566,
        );
        object_1567.finish();
    }
    if input.disable_glue_table_creation {
        object
            .key("DisableGlueTableCreation")
            .boolean(input.disable_glue_table_creation);
    }
    if let Some(var_1568) = &input.data_catalog_config {
        let mut object_1569 = object.key("DataCatalogConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_config(
            &mut object_1569,
            var_1568,
        );
        object_1569.finish();
    }
}

pub fn serialize_structure_crate_model_human_loop_request_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopRequestSource,
) {
    if let Some(var_1570) = &input.aws_managed_human_loop_request_source {
        object
            .key("AwsManagedHumanLoopRequestSource")
            .string(var_1570.as_str());
    }
}

pub fn serialize_structure_crate_model_human_loop_activation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConfig,
) {
    if let Some(var_1571) = &input.human_loop_activation_conditions_config {
        let mut object_1572 = object
            .key("HumanLoopActivationConditionsConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_conditions_config(
            &mut object_1572,
            var_1571,
        );
        object_1572.finish();
    }
}

pub fn serialize_structure_crate_model_human_loop_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) {
    if let Some(var_1573) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1573);
    }
    if let Some(var_1574) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1574);
    }
    if let Some(var_1575) = &input.task_title {
        object.key("TaskTitle").string(var_1575);
    }
    if let Some(var_1576) = &input.task_description {
        object.key("TaskDescription").string(var_1576);
    }
    if let Some(var_1577) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1577).into()),
        );
    }
    if let Some(var_1578) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1578).into()),
        );
    }
    if let Some(var_1579) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1579).into()),
        );
    }
    if let Some(var_1580) = &input.task_keywords {
        let mut array_1581 = object.key("TaskKeywords").start_array();
        for item_1582 in var_1580 {
            {
                array_1581.value().string(item_1582);
            }
        }
        array_1581.finish();
    }
    if let Some(var_1583) = &input.public_workforce_task_price {
        let mut object_1584 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(
            &mut object_1584,
            var_1583,
        );
        object_1584.finish();
    }
}

pub fn serialize_structure_crate_model_flow_definition_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinitionOutputConfig,
) {
    if let Some(var_1585) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1585);
    }
    if let Some(var_1586) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1586);
    }
}

pub fn serialize_structure_crate_model_ui_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiTemplate,
) {
    if let Some(var_1587) = &input.content {
        object.key("Content").string(var_1587);
    }
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) {
    if let Some(var_1588) = &input.strategy {
        object.key("Strategy").string(var_1588.as_str());
    }
    if let Some(var_1589) = &input.hyper_parameter_tuning_job_objective {
        let mut object_1590 = object
            .key("HyperParameterTuningJobObjective")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
            &mut object_1590,
            var_1589,
        );
        object_1590.finish();
    }
    if let Some(var_1591) = &input.resource_limits {
        let mut object_1592 = object.key("ResourceLimits").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_limits(
            &mut object_1592,
            var_1591,
        );
        object_1592.finish();
    }
    if let Some(var_1593) = &input.parameter_ranges {
        let mut object_1594 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(
            &mut object_1594,
            var_1593,
        );
        object_1594.finish();
    }
    if let Some(var_1595) = &input.training_job_early_stopping_type {
        object
            .key("TrainingJobEarlyStoppingType")
            .string(var_1595.as_str());
    }
    if let Some(var_1596) = &input.tuning_job_completion_criteria {
        let mut object_1597 = object.key("TuningJobCompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_tuning_job_completion_criteria(
            &mut object_1597,
            var_1596,
        );
        object_1597.finish();
    }
}

pub fn serialize_structure_crate_model_hyper_parameter_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTrainingJobDefinition,
) {
    if let Some(var_1598) = &input.definition_name {
        object.key("DefinitionName").string(var_1598);
    }
    if let Some(var_1599) = &input.tuning_objective {
        let mut object_1600 = object.key("TuningObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
            &mut object_1600,
            var_1599,
        );
        object_1600.finish();
    }
    if let Some(var_1601) = &input.hyper_parameter_ranges {
        let mut object_1602 = object.key("HyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(
            &mut object_1602,
            var_1601,
        );
        object_1602.finish();
    }
    if let Some(var_1603) = &input.static_hyper_parameters {
        let mut object_1604 = object.key("StaticHyperParameters").start_object();
        for (key_1605, value_1606) in var_1603 {
            {
                object_1604.key(key_1605).string(value_1606);
            }
        }
        object_1604.finish();
    }
    if let Some(var_1607) = &input.algorithm_specification {
        let mut object_1608 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_algorithm_specification(
            &mut object_1608,
            var_1607,
        );
        object_1608.finish();
    }
    if let Some(var_1609) = &input.role_arn {
        object.key("RoleArn").string(var_1609);
    }
    if let Some(var_1610) = &input.input_data_config {
        let mut array_1611 = object.key("InputDataConfig").start_array();
        for item_1612 in var_1610 {
            {
                let mut object_1613 = array_1611.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_1613,
                    item_1612,
                );
                object_1613.finish();
            }
        }
        array_1611.finish();
    }
    if let Some(var_1614) = &input.vpc_config {
        let mut object_1615 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1615, var_1614);
        object_1615.finish();
    }
    if let Some(var_1616) = &input.output_data_config {
        let mut object_1617 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_1617,
            var_1616,
        );
        object_1617.finish();
    }
    if let Some(var_1618) = &input.resource_config {
        let mut object_1619 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(
            &mut object_1619,
            var_1618,
        );
        object_1619.finish();
    }
    if let Some(var_1620) = &input.stopping_condition {
        let mut object_1621 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_1621,
            var_1620,
        );
        object_1621.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_1622) = &input.checkpoint_config {
        let mut object_1623 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(
            &mut object_1623,
            var_1622,
        );
        object_1623.finish();
    }
    if let Some(var_1624) = &input.retry_strategy {
        let mut object_1625 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(&mut object_1625, var_1624);
        object_1625.finish();
    }
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobWarmStartConfig,
) {
    if let Some(var_1626) = &input.parent_hyper_parameter_tuning_jobs {
        let mut array_1627 = object.key("ParentHyperParameterTuningJobs").start_array();
        for item_1628 in var_1626 {
            {
                let mut object_1629 = array_1627.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parent_hyper_parameter_tuning_job(
                    &mut object_1629,
                    item_1628,
                );
                object_1629.finish();
            }
        }
        array_1627.finish();
    }
    if let Some(var_1630) = &input.warm_start_type {
        object.key("WarmStartType").string(var_1630.as_str());
    }
}

pub fn serialize_structure_crate_model_labeling_job_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobInputConfig,
) {
    if let Some(var_1631) = &input.data_source {
        let mut object_1632 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_source(
            &mut object_1632,
            var_1631,
        );
        object_1632.finish();
    }
    if let Some(var_1633) = &input.data_attributes {
        let mut object_1634 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_attributes(
            &mut object_1634,
            var_1633,
        );
        object_1634.finish();
    }
}

pub fn serialize_structure_crate_model_labeling_job_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobOutputConfig,
) {
    if let Some(var_1635) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1635);
    }
    if let Some(var_1636) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1636);
    }
    if let Some(var_1637) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1637);
    }
}

pub fn serialize_structure_crate_model_labeling_job_stopping_conditions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobStoppingConditions,
) {
    if let Some(var_1638) = &input.max_human_labeled_object_count {
        object.key("MaxHumanLabeledObjectCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1638).into()),
        );
    }
    if let Some(var_1639) = &input.max_percentage_of_input_dataset_labeled {
        object.key("MaxPercentageOfInputDatasetLabeled").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1639).into()),
        );
    }
}

pub fn serialize_structure_crate_model_labeling_job_algorithms_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobAlgorithmsConfig,
) {
    if let Some(var_1640) = &input.labeling_job_algorithm_specification_arn {
        object
            .key("LabelingJobAlgorithmSpecificationArn")
            .string(var_1640);
    }
    if let Some(var_1641) = &input.initial_active_learning_model_arn {
        object.key("InitialActiveLearningModelArn").string(var_1641);
    }
    if let Some(var_1642) = &input.labeling_job_resource_config {
        let mut object_1643 = object.key("LabelingJobResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_resource_config(
            &mut object_1643,
            var_1642,
        );
        object_1643.finish();
    }
}

pub fn serialize_structure_crate_model_human_task_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanTaskConfig,
) {
    if let Some(var_1644) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1644);
    }
    if let Some(var_1645) = &input.ui_config {
        let mut object_1646 = object.key("UiConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_config(&mut object_1646, var_1645);
        object_1646.finish();
    }
    if let Some(var_1647) = &input.pre_human_task_lambda_arn {
        object.key("PreHumanTaskLambdaArn").string(var_1647);
    }
    if let Some(var_1648) = &input.task_keywords {
        let mut array_1649 = object.key("TaskKeywords").start_array();
        for item_1650 in var_1648 {
            {
                array_1649.value().string(item_1650);
            }
        }
        array_1649.finish();
    }
    if let Some(var_1651) = &input.task_title {
        object.key("TaskTitle").string(var_1651);
    }
    if let Some(var_1652) = &input.task_description {
        object.key("TaskDescription").string(var_1652);
    }
    if let Some(var_1653) = &input.number_of_human_workers_per_data_object {
        object.key("NumberOfHumanWorkersPerDataObject").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1653).into()),
        );
    }
    if let Some(var_1654) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1654).into()),
        );
    }
    if let Some(var_1655) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1655).into()),
        );
    }
    if let Some(var_1656) = &input.max_concurrent_task_count {
        object.key("MaxConcurrentTaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1656).into()),
        );
    }
    if let Some(var_1657) = &input.annotation_consolidation_config {
        let mut object_1658 = object.key("AnnotationConsolidationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_annotation_consolidation_config(
            &mut object_1658,
            var_1657,
        );
        object_1658.finish();
    }
    if let Some(var_1659) = &input.public_workforce_task_price {
        let mut object_1660 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(
            &mut object_1660,
            var_1659,
        );
        object_1660.finish();
    }
}

pub fn serialize_structure_crate_model_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) {
    if let Some(var_1661) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1661);
    }
    if let Some(var_1662) = &input.image {
        object.key("Image").string(var_1662);
    }
    if let Some(var_1663) = &input.image_config {
        let mut object_1664 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_image_config(&mut object_1664, var_1663);
        object_1664.finish();
    }
    if let Some(var_1665) = &input.mode {
        object.key("Mode").string(var_1665.as_str());
    }
    if let Some(var_1666) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1666);
    }
    if let Some(var_1667) = &input.environment {
        let mut object_1668 = object.key("Environment").start_object();
        for (key_1669, value_1670) in var_1667 {
            {
                object_1668.key(key_1669).string(value_1670);
            }
        }
        object_1668.finish();
    }
    if let Some(var_1671) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1671);
    }
    if let Some(var_1672) = &input.multi_model_config {
        let mut object_1673 = object.key("MultiModelConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_multi_model_config(
            &mut object_1673,
            var_1672,
        );
        object_1673.finish();
    }
}

pub fn serialize_structure_crate_model_inference_execution_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceExecutionConfig,
) {
    if let Some(var_1674) = &input.mode {
        object.key("Mode").string(var_1674.as_str());
    }
}

pub fn serialize_structure_crate_model_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_1675) = &input.security_group_ids {
        let mut array_1676 = object.key("SecurityGroupIds").start_array();
        for item_1677 in var_1675 {
            {
                array_1676.value().string(item_1677);
            }
        }
        array_1676.finish();
    }
    if let Some(var_1678) = &input.subnets {
        let mut array_1679 = object.key("Subnets").start_array();
        for item_1680 in var_1678 {
            {
                array_1679.value().string(item_1680);
            }
        }
        array_1679.finish();
    }
}

pub fn serialize_structure_crate_model_model_bias_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasBaselineConfig,
) {
    if let Some(var_1681) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1681);
    }
    if let Some(var_1682) = &input.constraints_resource {
        let mut object_1683 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1683,
            var_1682,
        );
        object_1683.finish();
    }
}

pub fn serialize_structure_crate_model_model_bias_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasAppSpecification,
) {
    if let Some(var_1684) = &input.image_uri {
        object.key("ImageUri").string(var_1684);
    }
    if let Some(var_1685) = &input.config_uri {
        object.key("ConfigUri").string(var_1685);
    }
    if let Some(var_1686) = &input.environment {
        let mut object_1687 = object.key("Environment").start_object();
        for (key_1688, value_1689) in var_1686 {
            {
                object_1687.key(key_1688).string(value_1689);
            }
        }
        object_1687.finish();
    }
}

pub fn serialize_structure_crate_model_model_bias_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasJobInput,
) {
    if let Some(var_1690) = &input.endpoint_input {
        let mut object_1691 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_1691, var_1690);
        object_1691.finish();
    }
    if let Some(var_1692) = &input.ground_truth_s3_input {
        let mut object_1693 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(
            &mut object_1693,
            var_1692,
        );
        object_1693.finish();
    }
}

pub fn serialize_structure_crate_model_model_explainability_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityBaselineConfig,
) {
    if let Some(var_1694) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1694);
    }
    if let Some(var_1695) = &input.constraints_resource {
        let mut object_1696 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1696,
            var_1695,
        );
        object_1696.finish();
    }
}

pub fn serialize_structure_crate_model_model_explainability_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityAppSpecification,
) {
    if let Some(var_1697) = &input.image_uri {
        object.key("ImageUri").string(var_1697);
    }
    if let Some(var_1698) = &input.config_uri {
        object.key("ConfigUri").string(var_1698);
    }
    if let Some(var_1699) = &input.environment {
        let mut object_1700 = object.key("Environment").start_object();
        for (key_1701, value_1702) in var_1699 {
            {
                object_1700.key(key_1701).string(value_1702);
            }
        }
        object_1700.finish();
    }
}

pub fn serialize_structure_crate_model_model_explainability_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityJobInput,
) {
    if let Some(var_1703) = &input.endpoint_input {
        let mut object_1704 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_1704, var_1703);
        object_1704.finish();
    }
}

pub fn serialize_structure_crate_model_model_package_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationSpecification,
) {
    if let Some(var_1705) = &input.validation_role {
        object.key("ValidationRole").string(var_1705);
    }
    if let Some(var_1706) = &input.validation_profiles {
        let mut array_1707 = object.key("ValidationProfiles").start_array();
        for item_1708 in var_1706 {
            {
                let mut object_1709 = array_1707.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_validation_profile(
                    &mut object_1709,
                    item_1708,
                );
                object_1709.finish();
            }
        }
        array_1707.finish();
    }
}

pub fn serialize_structure_crate_model_source_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithmSpecification,
) {
    if let Some(var_1710) = &input.source_algorithms {
        let mut array_1711 = object.key("SourceAlgorithms").start_array();
        for item_1712 in var_1710 {
            {
                let mut object_1713 = array_1711.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_algorithm(
                    &mut object_1713,
                    item_1712,
                );
                object_1713.finish();
            }
        }
        array_1711.finish();
    }
}

pub fn serialize_structure_crate_model_model_metrics(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetrics,
) {
    if let Some(var_1714) = &input.model_quality {
        let mut object_1715 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality(&mut object_1715, var_1714);
        object_1715.finish();
    }
    if let Some(var_1716) = &input.model_data_quality {
        let mut object_1717 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_data_quality(
            &mut object_1717,
            var_1716,
        );
        object_1717.finish();
    }
    if let Some(var_1718) = &input.bias {
        let mut object_1719 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_crate_model_bias(&mut object_1719, var_1718);
        object_1719.finish();
    }
    if let Some(var_1720) = &input.explainability {
        let mut object_1721 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_crate_model_explainability(&mut object_1721, var_1720);
        object_1721.finish();
    }
}

pub fn serialize_structure_crate_model_model_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityBaselineConfig,
) {
    if let Some(var_1722) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1722);
    }
    if let Some(var_1723) = &input.constraints_resource {
        let mut object_1724 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1724,
            var_1723,
        );
        object_1724.finish();
    }
}

pub fn serialize_structure_crate_model_model_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityAppSpecification,
) {
    if let Some(var_1725) = &input.image_uri {
        object.key("ImageUri").string(var_1725);
    }
    if let Some(var_1726) = &input.container_entrypoint {
        let mut array_1727 = object.key("ContainerEntrypoint").start_array();
        for item_1728 in var_1726 {
            {
                array_1727.value().string(item_1728);
            }
        }
        array_1727.finish();
    }
    if let Some(var_1729) = &input.container_arguments {
        let mut array_1730 = object.key("ContainerArguments").start_array();
        for item_1731 in var_1729 {
            {
                array_1730.value().string(item_1731);
            }
        }
        array_1730.finish();
    }
    if let Some(var_1732) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1732);
    }
    if let Some(var_1733) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1733);
    }
    if let Some(var_1734) = &input.problem_type {
        object.key("ProblemType").string(var_1734.as_str());
    }
    if let Some(var_1735) = &input.environment {
        let mut object_1736 = object.key("Environment").start_object();
        for (key_1737, value_1738) in var_1735 {
            {
                object_1736.key(key_1737).string(value_1738);
            }
        }
        object_1736.finish();
    }
}

pub fn serialize_structure_crate_model_model_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityJobInput,
) {
    if let Some(var_1739) = &input.endpoint_input {
        let mut object_1740 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_1740, var_1739);
        object_1740.finish();
    }
    if let Some(var_1741) = &input.ground_truth_s3_input {
        let mut object_1742 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(
            &mut object_1742,
            var_1741,
        );
        object_1742.finish();
    }
}

pub fn serialize_structure_crate_model_monitoring_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringScheduleConfig,
) {
    if let Some(var_1743) = &input.schedule_config {
        let mut object_1744 = object.key("ScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule_config(
            &mut object_1744,
            var_1743,
        );
        object_1744.finish();
    }
    if let Some(var_1745) = &input.monitoring_job_definition {
        let mut object_1746 = object.key("MonitoringJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_job_definition(
            &mut object_1746,
            var_1745,
        );
        object_1746.finish();
    }
    if let Some(var_1747) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1747);
    }
    if let Some(var_1748) = &input.monitoring_type {
        object.key("MonitoringType").string(var_1748.as_str());
    }
}

pub fn serialize_structure_crate_model_notebook_instance_lifecycle_hook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotebookInstanceLifecycleHook,
) {
    if let Some(var_1749) = &input.content {
        object.key("Content").string(var_1749);
    }
}

pub fn serialize_structure_crate_model_processing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingInput,
) {
    if let Some(var_1750) = &input.input_name {
        object.key("InputName").string(var_1750);
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    if let Some(var_1751) = &input.s3_input {
        let mut object_1752 = object.key("S3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_input(
            &mut object_1752,
            var_1751,
        );
        object_1752.finish();
    }
    if let Some(var_1753) = &input.dataset_definition {
        let mut object_1754 = object.key("DatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_definition(
            &mut object_1754,
            var_1753,
        );
        object_1754.finish();
    }
}

pub fn serialize_structure_crate_model_processing_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutputConfig,
) {
    if let Some(var_1755) = &input.outputs {
        let mut array_1756 = object.key("Outputs").start_array();
        for item_1757 in var_1755 {
            {
                let mut object_1758 = array_1756.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_output(
                    &mut object_1758,
                    item_1757,
                );
                object_1758.finish();
            }
        }
        array_1756.finish();
    }
    if let Some(var_1759) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1759);
    }
}

pub fn serialize_structure_crate_model_processing_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingResources,
) {
    if let Some(var_1760) = &input.cluster_config {
        let mut object_1761 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_cluster_config(
            &mut object_1761,
            var_1760,
        );
        object_1761.finish();
    }
}

pub fn serialize_structure_crate_model_processing_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_crate_model_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppSpecification,
) {
    if let Some(var_1762) = &input.image_uri {
        object.key("ImageUri").string(var_1762);
    }
    if let Some(var_1763) = &input.container_entrypoint {
        let mut array_1764 = object.key("ContainerEntrypoint").start_array();
        for item_1765 in var_1763 {
            {
                array_1764.value().string(item_1765);
            }
        }
        array_1764.finish();
    }
    if let Some(var_1766) = &input.container_arguments {
        let mut array_1767 = object.key("ContainerArguments").start_array();
        for item_1768 in var_1766 {
            {
                array_1767.value().string(item_1768);
            }
        }
        array_1767.finish();
    }
}

pub fn serialize_structure_crate_model_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1769) = &input.vpc_config {
        let mut object_1770 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1770, var_1769);
        object_1770.finish();
    }
}

pub fn serialize_structure_crate_model_experiment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperimentConfig,
) {
    if let Some(var_1771) = &input.experiment_name {
        object.key("ExperimentName").string(var_1771);
    }
    if let Some(var_1772) = &input.trial_name {
        object.key("TrialName").string(var_1772);
    }
    if let Some(var_1773) = &input.trial_component_display_name {
        object.key("TrialComponentDisplayName").string(var_1773);
    }
}

pub fn serialize_structure_crate_model_service_catalog_provisioning_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningDetails,
) {
    if let Some(var_1774) = &input.product_id {
        object.key("ProductId").string(var_1774);
    }
    if let Some(var_1775) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_1775);
    }
    if let Some(var_1776) = &input.path_id {
        object.key("PathId").string(var_1776);
    }
    if let Some(var_1777) = &input.provisioning_parameters {
        let mut array_1778 = object.key("ProvisioningParameters").start_array();
        for item_1779 in var_1777 {
            {
                let mut object_1780 = array_1778.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(
                    &mut object_1780,
                    item_1779,
                );
                object_1780.finish();
            }
        }
        array_1778.finish();
    }
}

pub fn serialize_structure_crate_model_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmSpecification,
) {
    if let Some(var_1781) = &input.training_image {
        object.key("TrainingImage").string(var_1781);
    }
    if let Some(var_1782) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_1782);
    }
    if let Some(var_1783) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_1783.as_str());
    }
    if let Some(var_1784) = &input.metric_definitions {
        let mut array_1785 = object.key("MetricDefinitions").start_array();
        for item_1786 in var_1784 {
            {
                let mut object_1787 = array_1785.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_1787,
                    item_1786,
                );
                object_1787.finish();
            }
        }
        array_1785.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object
            .key("EnableSageMakerMetricsTimeSeries")
            .boolean(input.enable_sage_maker_metrics_time_series);
    }
}

pub fn serialize_structure_crate_model_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Channel,
) {
    if let Some(var_1788) = &input.channel_name {
        object.key("ChannelName").string(var_1788);
    }
    if let Some(var_1789) = &input.data_source {
        let mut object_1790 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_1790, var_1789);
        object_1790.finish();
    }
    if let Some(var_1791) = &input.content_type {
        object.key("ContentType").string(var_1791);
    }
    if let Some(var_1792) = &input.compression_type {
        object.key("CompressionType").string(var_1792.as_str());
    }
    if let Some(var_1793) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_1793.as_str());
    }
    if let Some(var_1794) = &input.input_mode {
        object.key("InputMode").string(var_1794.as_str());
    }
    if let Some(var_1795) = &input.shuffle_config {
        let mut object_1796 = object.key("ShuffleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_shuffle_config(&mut object_1796, var_1795);
        object_1796.finish();
    }
}

pub fn serialize_structure_crate_model_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) {
    if let Some(var_1797) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1797);
    }
    if let Some(var_1798) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1798);
    }
}

pub fn serialize_structure_crate_model_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceConfig,
) {
    if let Some(var_1799) = &input.instance_type {
        object.key("InstanceType").string(var_1799.as_str());
    }
    {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1800) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1800);
    }
}

pub fn serialize_structure_crate_model_checkpoint_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfig,
) {
    if let Some(var_1801) = &input.s3_uri {
        object.key("S3Uri").string(var_1801);
    }
    if let Some(var_1802) = &input.local_path {
        object.key("LocalPath").string(var_1802);
    }
}

pub fn serialize_structure_crate_model_debug_hook_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugHookConfig,
) {
    if let Some(var_1803) = &input.local_path {
        object.key("LocalPath").string(var_1803);
    }
    if let Some(var_1804) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1804);
    }
    if let Some(var_1805) = &input.hook_parameters {
        let mut object_1806 = object.key("HookParameters").start_object();
        for (key_1807, value_1808) in var_1805 {
            {
                object_1806.key(key_1807).string(value_1808);
            }
        }
        object_1806.finish();
    }
    if let Some(var_1809) = &input.collection_configurations {
        let mut array_1810 = object.key("CollectionConfigurations").start_array();
        for item_1811 in var_1809 {
            {
                let mut object_1812 = array_1810.value().start_object();
                crate::json_ser::serialize_structure_crate_model_collection_configuration(
                    &mut object_1812,
                    item_1811,
                );
                object_1812.finish();
            }
        }
        array_1810.finish();
    }
}

pub fn serialize_structure_crate_model_debug_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugRuleConfiguration,
) {
    if let Some(var_1813) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1813);
    }
    if let Some(var_1814) = &input.local_path {
        object.key("LocalPath").string(var_1814);
    }
    if let Some(var_1815) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1815);
    }
    if let Some(var_1816) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1816);
    }
    if let Some(var_1817) = &input.instance_type {
        object.key("InstanceType").string(var_1817.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1818) = &input.rule_parameters {
        let mut object_1819 = object.key("RuleParameters").start_object();
        for (key_1820, value_1821) in var_1818 {
            {
                object_1819.key(key_1820).string(value_1821);
            }
        }
        object_1819.finish();
    }
}

pub fn serialize_structure_crate_model_tensor_board_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardOutputConfig,
) {
    if let Some(var_1822) = &input.local_path {
        object.key("LocalPath").string(var_1822);
    }
    if let Some(var_1823) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1823);
    }
}

pub fn serialize_structure_crate_model_profiler_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfig,
) {
    if let Some(var_1824) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1824);
    }
    if let Some(var_1825) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1825).into()),
        );
    }
    if let Some(var_1826) = &input.profiling_parameters {
        let mut object_1827 = object.key("ProfilingParameters").start_object();
        for (key_1828, value_1829) in var_1826 {
            {
                object_1827.key(key_1828).string(value_1829);
            }
        }
        object_1827.finish();
    }
}

pub fn serialize_structure_crate_model_profiler_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerRuleConfiguration,
) {
    if let Some(var_1830) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1830);
    }
    if let Some(var_1831) = &input.local_path {
        object.key("LocalPath").string(var_1831);
    }
    if let Some(var_1832) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1832);
    }
    if let Some(var_1833) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1833);
    }
    if let Some(var_1834) = &input.instance_type {
        object.key("InstanceType").string(var_1834.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1835) = &input.rule_parameters {
        let mut object_1836 = object.key("RuleParameters").start_object();
        for (key_1837, value_1838) in var_1835 {
            {
                object_1836.key(key_1837).string(value_1838);
            }
        }
        object_1836.finish();
    }
}

pub fn serialize_structure_crate_model_retry_strategy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) {
    {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_retry_attempts).into()),
        );
    }
}

pub fn serialize_structure_crate_model_model_client_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelClientConfig,
) {
    if let Some(var_1839) = &input.invocations_timeout_in_seconds {
        object.key("InvocationsTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1839).into()),
        );
    }
    if let Some(var_1840) = &input.invocations_max_retries {
        object.key("InvocationsMaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1840).into()),
        );
    }
}

pub fn serialize_structure_crate_model_transform_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformInput,
) {
    if let Some(var_1841) = &input.data_source {
        let mut object_1842 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_data_source(
            &mut object_1842,
            var_1841,
        );
        object_1842.finish();
    }
    if let Some(var_1843) = &input.content_type {
        object.key("ContentType").string(var_1843);
    }
    if let Some(var_1844) = &input.compression_type {
        object.key("CompressionType").string(var_1844.as_str());
    }
    if let Some(var_1845) = &input.split_type {
        object.key("SplitType").string(var_1845.as_str());
    }
}

pub fn serialize_structure_crate_model_transform_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOutput,
) {
    if let Some(var_1846) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1846);
    }
    if let Some(var_1847) = &input.accept {
        object.key("Accept").string(var_1847);
    }
    if let Some(var_1848) = &input.assemble_with {
        object.key("AssembleWith").string(var_1848.as_str());
    }
    if let Some(var_1849) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1849);
    }
}

pub fn serialize_structure_crate_model_transform_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformResources,
) {
    if let Some(var_1850) = &input.instance_type {
        object.key("InstanceType").string(var_1850.as_str());
    }
    if let Some(var_1851) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1851).into()),
        );
    }
    if let Some(var_1852) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1852);
    }
}

pub fn serialize_structure_crate_model_data_processing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataProcessing,
) {
    if let Some(var_1853) = &input.input_filter {
        object.key("InputFilter").string(var_1853);
    }
    if let Some(var_1854) = &input.output_filter {
        object.key("OutputFilter").string(var_1854);
    }
    if let Some(var_1855) = &input.join_source {
        object.key("JoinSource").string(var_1855.as_str());
    }
}

pub fn serialize_structure_crate_model_trial_component_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentStatus,
) {
    if let Some(var_1856) = &input.primary_status {
        object.key("PrimaryStatus").string(var_1856.as_str());
    }
    if let Some(var_1857) = &input.message {
        object.key("Message").string(var_1857);
    }
}

pub fn serialize_union_crate_model_trial_component_parameter_value(
    object_579: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentParameterValue,
) {
    match input {
        crate::model::TrialComponentParameterValue::StringValue(inner) => {
            object_579.key("StringValue").string(inner);
        }
        crate::model::TrialComponentParameterValue::NumberValue(inner) => {
            object_579.key("NumberValue").number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::Float((*inner).into()),
            );
        }
    }
}

pub fn serialize_structure_crate_model_trial_component_artifact(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentArtifact,
) {
    if let Some(var_1858) = &input.media_type {
        object.key("MediaType").string(var_1858);
    }
    if let Some(var_1859) = &input.value {
        object.key("Value").string(var_1859);
    }
}

pub fn serialize_structure_crate_model_cognito_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoConfig,
) {
    if let Some(var_1860) = &input.user_pool {
        object.key("UserPool").string(var_1860);
    }
    if let Some(var_1861) = &input.client_id {
        object.key("ClientId").string(var_1861);
    }
}

pub fn serialize_structure_crate_model_oidc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcConfig,
) {
    if let Some(var_1862) = &input.client_id {
        object.key("ClientId").string(var_1862);
    }
    if let Some(var_1863) = &input.client_secret {
        object.key("ClientSecret").string(var_1863);
    }
    if let Some(var_1864) = &input.issuer {
        object.key("Issuer").string(var_1864);
    }
    if let Some(var_1865) = &input.authorization_endpoint {
        object.key("AuthorizationEndpoint").string(var_1865);
    }
    if let Some(var_1866) = &input.token_endpoint {
        object.key("TokenEndpoint").string(var_1866);
    }
    if let Some(var_1867) = &input.user_info_endpoint {
        object.key("UserInfoEndpoint").string(var_1867);
    }
    if let Some(var_1868) = &input.logout_endpoint {
        object.key("LogoutEndpoint").string(var_1868);
    }
    if let Some(var_1869) = &input.jwks_uri {
        object.key("JwksUri").string(var_1869);
    }
}

pub fn serialize_structure_crate_model_source_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceIpConfig,
) {
    if let Some(var_1870) = &input.cidrs {
        let mut array_1871 = object.key("Cidrs").start_array();
        for item_1872 in var_1870 {
            {
                array_1871.value().string(item_1872);
            }
        }
        array_1871.finish();
    }
}

pub fn serialize_structure_crate_model_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberDefinition,
) {
    if let Some(var_1873) = &input.cognito_member_definition {
        let mut object_1874 = object.key("CognitoMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_member_definition(
            &mut object_1874,
            var_1873,
        );
        object_1874.finish();
    }
    if let Some(var_1875) = &input.oidc_member_definition {
        let mut object_1876 = object.key("OidcMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_member_definition(
            &mut object_1876,
            var_1875,
        );
        object_1876.finish();
    }
}

pub fn serialize_structure_crate_model_notification_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfiguration,
) {
    if let Some(var_1877) = &input.notification_topic_arn {
        object.key("NotificationTopicArn").string(var_1877);
    }
}

pub fn serialize_structure_crate_model_retention_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionPolicy,
) {
    if let Some(var_1878) = &input.home_efs_file_system {
        object.key("HomeEfsFileSystem").string(var_1878.as_str());
    }
}

pub fn serialize_structure_crate_model_suggestion_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuggestionQuery,
) {
    if let Some(var_1879) = &input.property_name_query {
        let mut object_1880 = object.key("PropertyNameQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_property_name_query(
            &mut object_1880,
            var_1879,
        );
        object_1880.finish();
    }
}

pub fn serialize_structure_crate_model_device(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) {
    if let Some(var_1881) = &input.device_name {
        object.key("DeviceName").string(var_1881);
    }
    if let Some(var_1882) = &input.description {
        object.key("Description").string(var_1882);
    }
    if let Some(var_1883) = &input.iot_thing_name {
        object.key("IotThingName").string(var_1883);
    }
}

pub fn serialize_structure_crate_model_renderable_task(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenderableTask,
) {
    if let Some(var_1884) = &input.input {
        object.key("Input").string(var_1884);
    }
}

pub fn serialize_structure_crate_model_search_expression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchExpression,
) {
    if let Some(var_1885) = &input.filters {
        let mut array_1886 = object.key("Filters").start_array();
        for item_1887 in var_1885 {
            {
                let mut object_1888 = array_1886.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(
                    &mut object_1888,
                    item_1887,
                );
                object_1888.finish();
            }
        }
        array_1886.finish();
    }
    if let Some(var_1889) = &input.nested_filters {
        let mut array_1890 = object.key("NestedFilters").start_array();
        for item_1891 in var_1889 {
            {
                let mut object_1892 = array_1890.value().start_object();
                crate::json_ser::serialize_structure_crate_model_nested_filters(
                    &mut object_1892,
                    item_1891,
                );
                object_1892.finish();
            }
        }
        array_1890.finish();
    }
    if let Some(var_1893) = &input.sub_expressions {
        let mut array_1894 = object.key("SubExpressions").start_array();
        for item_1895 in var_1893 {
            {
                let mut object_1896 = array_1894.value().start_object();
                crate::json_ser::serialize_structure_crate_model_search_expression(
                    &mut object_1896,
                    item_1895,
                );
                object_1896.finish();
            }
        }
        array_1894.finish();
    }
    if let Some(var_1897) = &input.operator {
        object.key("Operator").string(var_1897.as_str());
    }
}

pub fn serialize_structure_crate_model_output_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputParameter,
) {
    if let Some(var_1898) = &input.name {
        object.key("Name").string(var_1898);
    }
    if let Some(var_1899) = &input.value {
        object.key("Value").string(var_1899);
    }
}

pub fn serialize_structure_crate_model_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameter,
) {
    if let Some(var_1900) = &input.name {
        object.key("Name").string(var_1900);
    }
    if let Some(var_1901) = &input.value {
        object.key("Value").string(var_1901);
    }
}

pub fn serialize_structure_crate_model_git_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfigForUpdate,
) {
    if let Some(var_1902) = &input.secret_arn {
        object.key("SecretArn").string(var_1902);
    }
}

pub fn serialize_structure_crate_model_variant_property(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariantProperty,
) {
    if let Some(var_1903) = &input.variant_property_type {
        object.key("VariantPropertyType").string(var_1903.as_str());
    }
}

pub fn serialize_structure_crate_model_deployment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfig,
) {
    if let Some(var_1904) = &input.blue_green_update_policy {
        let mut object_1905 = object.key("BlueGreenUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_blue_green_update_policy(
            &mut object_1905,
            var_1904,
        );
        object_1905.finish();
    }
    if let Some(var_1906) = &input.auto_rollback_configuration {
        let mut object_1907 = object.key("AutoRollbackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_rollback_config(
            &mut object_1907,
            var_1906,
        );
        object_1907.finish();
    }
}

pub fn serialize_structure_crate_model_desired_weight_and_capacity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DesiredWeightAndCapacity,
) {
    if let Some(var_1908) = &input.variant_name {
        object.key("VariantName").string(var_1908);
    }
    if let Some(var_1909) = &input.desired_weight {
        object.key("DesiredWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1909).into()),
        );
    }
    if let Some(var_1910) = &input.desired_instance_count {
        object.key("DesiredInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1910).into()),
        );
    }
}

pub fn serialize_structure_crate_model_profiler_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfigForUpdate,
) {
    if let Some(var_1911) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1911);
    }
    if let Some(var_1912) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1912).into()),
        );
    }
    if let Some(var_1913) = &input.profiling_parameters {
        let mut object_1914 = object.key("ProfilingParameters").start_object();
        for (key_1915, value_1916) in var_1913 {
            {
                object_1914.key(key_1915).string(value_1916);
            }
        }
        object_1914.finish();
    }
    if input.disable_profiler {
        object
            .key("DisableProfiler")
            .boolean(input.disable_profiler);
    }
}

pub fn serialize_structure_crate_model_hyper_parameter_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterSpecification,
) {
    if let Some(var_1917) = &input.name {
        object.key("Name").string(var_1917);
    }
    if let Some(var_1918) = &input.description {
        object.key("Description").string(var_1918);
    }
    if let Some(var_1919) = &input.r#type {
        object.key("Type").string(var_1919.as_str());
    }
    if let Some(var_1920) = &input.range {
        let mut object_1921 = object.key("Range").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_range(
            &mut object_1921,
            var_1920,
        );
        object_1921.finish();
    }
    if input.is_tunable {
        object.key("IsTunable").boolean(input.is_tunable);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1922) = &input.default_value {
        object.key("DefaultValue").string(var_1922);
    }
}

pub fn serialize_structure_crate_model_metric_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDefinition,
) {
    if let Some(var_1923) = &input.name {
        object.key("Name").string(var_1923);
    }
    if let Some(var_1924) = &input.regex {
        object.key("Regex").string(var_1924);
    }
}

pub fn serialize_structure_crate_model_channel_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelSpecification,
) {
    if let Some(var_1925) = &input.name {
        object.key("Name").string(var_1925);
    }
    if let Some(var_1926) = &input.description {
        object.key("Description").string(var_1926);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1927) = &input.supported_content_types {
        let mut array_1928 = object.key("SupportedContentTypes").start_array();
        for item_1929 in var_1927 {
            {
                array_1928.value().string(item_1929);
            }
        }
        array_1928.finish();
    }
    if let Some(var_1930) = &input.supported_compression_types {
        let mut array_1931 = object.key("SupportedCompressionTypes").start_array();
        for item_1932 in var_1930 {
            {
                array_1931.value().string(item_1932.as_str());
            }
        }
        array_1931.finish();
    }
    if let Some(var_1933) = &input.supported_input_modes {
        let mut array_1934 = object.key("SupportedInputModes").start_array();
        for item_1935 in var_1933 {
            {
                array_1934.value().string(item_1935.as_str());
            }
        }
        array_1934.finish();
    }
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobObjective,
) {
    if let Some(var_1936) = &input.r#type {
        object.key("Type").string(var_1936.as_str());
    }
    if let Some(var_1937) = &input.metric_name {
        object.key("MetricName").string(var_1937);
    }
}

pub fn serialize_structure_crate_model_model_package_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageContainerDefinition,
) {
    if let Some(var_1938) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1938);
    }
    if let Some(var_1939) = &input.image {
        object.key("Image").string(var_1939);
    }
    if let Some(var_1940) = &input.image_digest {
        object.key("ImageDigest").string(var_1940);
    }
    if let Some(var_1941) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1941);
    }
    if let Some(var_1942) = &input.product_id {
        object.key("ProductId").string(var_1942);
    }
    if let Some(var_1943) = &input.environment {
        let mut object_1944 = object.key("Environment").start_object();
        for (key_1945, value_1946) in var_1943 {
            {
                object_1944.key(key_1945).string(value_1946);
            }
        }
        object_1944.finish();
    }
}

pub fn serialize_structure_crate_model_algorithm_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationProfile,
) {
    if let Some(var_1947) = &input.profile_name {
        object.key("ProfileName").string(var_1947);
    }
    if let Some(var_1948) = &input.training_job_definition {
        let mut object_1949 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_training_job_definition(
            &mut object_1949,
            var_1948,
        );
        object_1949.finish();
    }
    if let Some(var_1950) = &input.transform_job_definition {
        let mut object_1951 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(
            &mut object_1951,
            var_1950,
        );
        object_1951.finish();
    }
}

pub fn serialize_structure_crate_model_kernel_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelSpec,
) {
    if let Some(var_1952) = &input.name {
        object.key("Name").string(var_1952);
    }
    if let Some(var_1953) = &input.display_name {
        object.key("DisplayName").string(var_1953);
    }
}

pub fn serialize_structure_crate_model_file_system_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) {
    if let Some(var_1954) = &input.mount_path {
        object.key("MountPath").string(var_1954);
    }
    if let Some(var_1955) = &input.default_uid {
        object.key("DefaultUid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1955).into()),
        );
    }
    if let Some(var_1956) = &input.default_gid {
        object.key("DefaultGid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1956).into()),
        );
    }
}

pub fn serialize_structure_crate_model_artifact_source_type(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSourceType,
) {
    if let Some(var_1957) = &input.source_id_type {
        object.key("SourceIdType").string(var_1957.as_str());
    }
    if let Some(var_1958) = &input.value {
        object.key("Value").string(var_1958);
    }
}

pub fn serialize_structure_crate_model_auto_ml_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlDataSource,
) {
    if let Some(var_1959) = &input.s3_data_source {
        let mut object_1960 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_mls3_data_source(
            &mut object_1960,
            var_1959,
        );
        object_1960.finish();
    }
}

pub fn serialize_structure_crate_model_auto_ml_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobCompletionCriteria,
) {
    if let Some(var_1961) = &input.max_candidates {
        object.key("MaxCandidates").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1961).into()),
        );
    }
    if let Some(var_1962) = &input.max_runtime_per_training_job_in_seconds {
        object.key("MaxRuntimePerTrainingJobInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1962).into()),
        );
    }
    if let Some(var_1963) = &input.max_auto_ml_job_runtime_in_seconds {
        object.key("MaxAutoMLJobRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1963).into()),
        );
    }
}

pub fn serialize_structure_crate_model_auto_ml_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlSecurityConfig,
) {
    if let Some(var_1964) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1964);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if let Some(var_1965) = &input.vpc_config {
        let mut object_1966 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1966, var_1965);
        object_1966.finish();
    }
}

pub fn serialize_structure_crate_model_target_platform(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetPlatform,
) {
    if let Some(var_1967) = &input.os {
        object.key("Os").string(var_1967.as_str());
    }
    if let Some(var_1968) = &input.arch {
        object.key("Arch").string(var_1968.as_str());
    }
    if let Some(var_1969) = &input.accelerator {
        object.key("Accelerator").string(var_1969.as_str());
    }
}

pub fn serialize_structure_crate_model_monitoring_constraints_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConstraintsResource,
) {
    if let Some(var_1970) = &input.s3_uri {
        object.key("S3Uri").string(var_1970);
    }
}

pub fn serialize_structure_crate_model_monitoring_statistics_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStatisticsResource,
) {
    if let Some(var_1971) = &input.s3_uri {
        object.key("S3Uri").string(var_1971);
    }
}

pub fn serialize_structure_crate_model_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInput,
) {
    if let Some(var_1972) = &input.endpoint_name {
        object.key("EndpointName").string(var_1972);
    }
    if let Some(var_1973) = &input.local_path {
        object.key("LocalPath").string(var_1973);
    }
    if let Some(var_1974) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_1974.as_str());
    }
    if let Some(var_1975) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_1975.as_str());
    }
    if let Some(var_1976) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_1976);
    }
    if let Some(var_1977) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_1977);
    }
    if let Some(var_1978) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_1978);
    }
    if let Some(var_1979) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1979).into()),
        );
    }
    if let Some(var_1980) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_1980);
    }
    if let Some(var_1981) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_1981);
    }
}

pub fn serialize_structure_crate_model_monitoring_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutput,
) {
    if let Some(var_1982) = &input.s3_output {
        let mut object_1983 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_s3_output(
            &mut object_1983,
            var_1982,
        );
        object_1983.finish();
    }
}

pub fn serialize_structure_crate_model_monitoring_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringClusterConfig,
) {
    if let Some(var_1984) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1984).into()),
        );
    }
    if let Some(var_1985) = &input.instance_type {
        object.key("InstanceType").string(var_1985.as_str());
    }
    if let Some(var_1986) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1986).into()),
        );
    }
    if let Some(var_1987) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1987);
    }
}

pub fn serialize_structure_crate_model_sharing_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharingSettings,
) {
    if let Some(var_1988) = &input.notebook_output_option {
        object.key("NotebookOutputOption").string(var_1988.as_str());
    }
    if let Some(var_1989) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1989);
    }
    if let Some(var_1990) = &input.s3_kms_key_id {
        object.key("S3KmsKeyId").string(var_1990);
    }
}

pub fn serialize_structure_crate_model_jupyter_server_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JupyterServerAppSettings,
) {
    if let Some(var_1991) = &input.default_resource_spec {
        let mut object_1992 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_1992, var_1991);
        object_1992.finish();
    }
    if let Some(var_1993) = &input.lifecycle_config_arns {
        let mut array_1994 = object.key("LifecycleConfigArns").start_array();
        for item_1995 in var_1993 {
            {
                array_1994.value().string(item_1995);
            }
        }
        array_1994.finish();
    }
}

pub fn serialize_structure_crate_model_kernel_gateway_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayAppSettings,
) {
    if let Some(var_1996) = &input.default_resource_spec {
        let mut object_1997 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_1997, var_1996);
        object_1997.finish();
    }
    if let Some(var_1998) = &input.custom_images {
        let mut array_1999 = object.key("CustomImages").start_array();
        for item_2000 in var_1998 {
            {
                let mut object_2001 = array_1999.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_image(
                    &mut object_2001,
                    item_2000,
                );
                object_2001.finish();
            }
        }
        array_1999.finish();
    }
    if let Some(var_2002) = &input.lifecycle_config_arns {
        let mut array_2003 = object.key("LifecycleConfigArns").start_array();
        for item_2004 in var_2002 {
            {
                array_2003.value().string(item_2004);
            }
        }
        array_2003.finish();
    }
}

pub fn serialize_structure_crate_model_tensor_board_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardAppSettings,
) {
    if let Some(var_2005) = &input.default_resource_spec {
        let mut object_2006 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2006, var_2005);
        object_2006.finish();
    }
}

pub fn serialize_structure_crate_model_production_variant_core_dump_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantCoreDumpConfig,
) {
    if let Some(var_2007) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_2007);
    }
    if let Some(var_2008) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2008);
    }
}

pub fn serialize_structure_crate_model_capture_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureOption,
) {
    if let Some(var_2009) = &input.capture_mode {
        object.key("CaptureMode").string(var_2009.as_str());
    }
}

pub fn serialize_structure_crate_model_capture_content_type_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureContentTypeHeader,
) {
    if let Some(var_2010) = &input.csv_content_types {
        let mut array_2011 = object.key("CsvContentTypes").start_array();
        for item_2012 in var_2010 {
            {
                array_2011.value().string(item_2012);
            }
        }
        array_2011.finish();
    }
    if let Some(var_2013) = &input.json_content_types {
        let mut array_2014 = object.key("JsonContentTypes").start_array();
        for item_2015 in var_2013 {
            {
                array_2014.value().string(item_2015);
            }
        }
        array_2014.finish();
    }
}

pub fn serialize_structure_crate_model_async_inference_client_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceClientConfig,
) {
    if let Some(var_2016) = &input.max_concurrent_invocations_per_instance {
        object.key("MaxConcurrentInvocationsPerInstance").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2016).into()),
        );
    }
}

pub fn serialize_structure_crate_model_async_inference_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceOutputConfig,
) {
    if let Some(var_2017) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2017);
    }
    if let Some(var_2018) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2018);
    }
    if let Some(var_2019) = &input.notification_config {
        let mut object_2020 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_notification_config(
            &mut object_2020,
            var_2019,
        );
        object_2020.finish();
    }
}

pub fn serialize_structure_crate_model_online_store_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreSecurityConfig,
) {
    if let Some(var_2021) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2021);
    }
}

pub fn serialize_structure_crate_model_s3_storage_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3StorageConfig,
) {
    if let Some(var_2022) = &input.s3_uri {
        object.key("S3Uri").string(var_2022);
    }
    if let Some(var_2023) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2023);
    }
    if let Some(var_2024) = &input.resolved_output_s3_uri {
        object.key("ResolvedOutputS3Uri").string(var_2024);
    }
}

pub fn serialize_structure_crate_model_data_catalog_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogConfig,
) {
    if let Some(var_2025) = &input.table_name {
        object.key("TableName").string(var_2025);
    }
    if let Some(var_2026) = &input.catalog {
        object.key("Catalog").string(var_2026);
    }
    if let Some(var_2027) = &input.database {
        object.key("Database").string(var_2027);
    }
}

pub fn serialize_structure_crate_model_human_loop_activation_conditions_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConditionsConfig,
) {
    if let Some(var_2028) = &input.human_loop_activation_conditions {
        object.key("HumanLoopActivationConditions").string(var_2028);
    }
}

pub fn serialize_structure_crate_model_public_workforce_task_price(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicWorkforceTaskPrice,
) {
    if let Some(var_2029) = &input.amount_in_usd {
        let mut object_2030 = object.key("AmountInUsd").start_object();
        crate::json_ser::serialize_structure_crate_model_usd(&mut object_2030, var_2029);
        object_2030.finish();
    }
}

pub fn serialize_structure_crate_model_resource_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceLimits,
) {
    {
        object.key("MaxNumberOfTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_number_of_training_jobs).into()),
        );
    }
    {
        object.key("MaxParallelTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_parallel_training_jobs).into()),
        );
    }
}

pub fn serialize_structure_crate_model_parameter_ranges(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) {
    if let Some(var_2031) = &input.integer_parameter_ranges {
        let mut array_2032 = object.key("IntegerParameterRanges").start_array();
        for item_2033 in var_2031 {
            {
                let mut object_2034 = array_2032.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter_range(
                    &mut object_2034,
                    item_2033,
                );
                object_2034.finish();
            }
        }
        array_2032.finish();
    }
    if let Some(var_2035) = &input.continuous_parameter_ranges {
        let mut array_2036 = object.key("ContinuousParameterRanges").start_array();
        for item_2037 in var_2035 {
            {
                let mut object_2038 = array_2036.value().start_object();
                crate::json_ser::serialize_structure_crate_model_continuous_parameter_range(
                    &mut object_2038,
                    item_2037,
                );
                object_2038.finish();
            }
        }
        array_2036.finish();
    }
    if let Some(var_2039) = &input.categorical_parameter_ranges {
        let mut array_2040 = object.key("CategoricalParameterRanges").start_array();
        for item_2041 in var_2039 {
            {
                let mut object_2042 = array_2040.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter_range(
                    &mut object_2042,
                    item_2041,
                );
                object_2042.finish();
            }
        }
        array_2040.finish();
    }
}

pub fn serialize_structure_crate_model_tuning_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TuningJobCompletionCriteria,
) {
    if let Some(var_2043) = &input.target_objective_metric_value {
        object.key("TargetObjectiveMetricValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_2043).into()),
        );
    }
}

pub fn serialize_structure_crate_model_hyper_parameter_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterAlgorithmSpecification,
) {
    if let Some(var_2044) = &input.training_image {
        object.key("TrainingImage").string(var_2044);
    }
    if let Some(var_2045) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2045.as_str());
    }
    if let Some(var_2046) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2046);
    }
    if let Some(var_2047) = &input.metric_definitions {
        let mut array_2048 = object.key("MetricDefinitions").start_array();
        for item_2049 in var_2047 {
            {
                let mut object_2050 = array_2048.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_2050,
                    item_2049,
                );
                object_2050.finish();
            }
        }
        array_2048.finish();
    }
}

pub fn serialize_structure_crate_model_parent_hyper_parameter_tuning_job(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentHyperParameterTuningJob,
) {
    if let Some(var_2051) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_2051);
    }
}

pub fn serialize_structure_crate_model_labeling_job_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataSource,
) {
    if let Some(var_2052) = &input.s3_data_source {
        let mut object_2053 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_s3_data_source(
            &mut object_2053,
            var_2052,
        );
        object_2053.finish();
    }
    if let Some(var_2054) = &input.sns_data_source {
        let mut object_2055 = object.key("SnsDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_sns_data_source(
            &mut object_2055,
            var_2054,
        );
        object_2055.finish();
    }
}

pub fn serialize_structure_crate_model_labeling_job_data_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataAttributes,
) {
    if let Some(var_2056) = &input.content_classifiers {
        let mut array_2057 = object.key("ContentClassifiers").start_array();
        for item_2058 in var_2056 {
            {
                array_2057.value().string(item_2058.as_str());
            }
        }
        array_2057.finish();
    }
}

pub fn serialize_structure_crate_model_labeling_job_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobResourceConfig,
) {
    if let Some(var_2059) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2059);
    }
}

pub fn serialize_structure_crate_model_ui_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiConfig,
) {
    if let Some(var_2060) = &input.ui_template_s3_uri {
        object.key("UiTemplateS3Uri").string(var_2060);
    }
    if let Some(var_2061) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_2061);
    }
}

pub fn serialize_structure_crate_model_annotation_consolidation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnnotationConsolidationConfig,
) {
    if let Some(var_2062) = &input.annotation_consolidation_lambda_arn {
        object
            .key("AnnotationConsolidationLambdaArn")
            .string(var_2062);
    }
}

pub fn serialize_structure_crate_model_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) {
    if let Some(var_2063) = &input.repository_access_mode {
        object.key("RepositoryAccessMode").string(var_2063.as_str());
    }
    if let Some(var_2064) = &input.repository_auth_config {
        let mut object_2065 = object.key("RepositoryAuthConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_repository_auth_config(
            &mut object_2065,
            var_2064,
        );
        object_2065.finish();
    }
}

pub fn serialize_structure_crate_model_multi_model_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiModelConfig,
) {
    if let Some(var_2066) = &input.model_cache_setting {
        object.key("ModelCacheSetting").string(var_2066.as_str());
    }
}

pub fn serialize_structure_crate_model_monitoring_ground_truth_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringGroundTruthS3Input,
) {
    if let Some(var_2067) = &input.s3_uri {
        object.key("S3Uri").string(var_2067);
    }
}

pub fn serialize_structure_crate_model_model_package_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationProfile,
) {
    if let Some(var_2068) = &input.profile_name {
        object.key("ProfileName").string(var_2068);
    }
    if let Some(var_2069) = &input.transform_job_definition {
        let mut object_2070 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(
            &mut object_2070,
            var_2069,
        );
        object_2070.finish();
    }
}

pub fn serialize_structure_crate_model_source_algorithm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithm,
) {
    if let Some(var_2071) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2071);
    }
    if let Some(var_2072) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2072);
    }
}

pub fn serialize_structure_crate_model_model_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQuality,
) {
    if let Some(var_2073) = &input.statistics {
        let mut object_2074 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2074, var_2073);
        object_2074.finish();
    }
    if let Some(var_2075) = &input.constraints {
        let mut object_2076 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2076, var_2075);
        object_2076.finish();
    }
}

pub fn serialize_structure_crate_model_model_data_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDataQuality,
) {
    if let Some(var_2077) = &input.statistics {
        let mut object_2078 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2078, var_2077);
        object_2078.finish();
    }
    if let Some(var_2079) = &input.constraints {
        let mut object_2080 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2080, var_2079);
        object_2080.finish();
    }
}

pub fn serialize_structure_crate_model_bias(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bias,
) {
    if let Some(var_2081) = &input.report {
        let mut object_2082 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2082, var_2081);
        object_2082.finish();
    }
}

pub fn serialize_structure_crate_model_explainability(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Explainability,
) {
    if let Some(var_2083) = &input.report {
        let mut object_2084 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2084, var_2083);
        object_2084.finish();
    }
}

pub fn serialize_structure_crate_model_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleConfig,
) {
    if let Some(var_2085) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_2085);
    }
}

pub fn serialize_structure_crate_model_monitoring_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringJobDefinition,
) {
    if let Some(var_2086) = &input.baseline_config {
        let mut object_2087 = object.key("BaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_baseline_config(
            &mut object_2087,
            var_2086,
        );
        object_2087.finish();
    }
    if let Some(var_2088) = &input.monitoring_inputs {
        let mut array_2089 = object.key("MonitoringInputs").start_array();
        for item_2090 in var_2088 {
            {
                let mut object_2091 = array_2089.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_input(
                    &mut object_2091,
                    item_2090,
                );
                object_2091.finish();
            }
        }
        array_2089.finish();
    }
    if let Some(var_2092) = &input.monitoring_output_config {
        let mut object_2093 = object.key("MonitoringOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_2093,
            var_2092,
        );
        object_2093.finish();
    }
    if let Some(var_2094) = &input.monitoring_resources {
        let mut object_2095 = object.key("MonitoringResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_2095,
            var_2094,
        );
        object_2095.finish();
    }
    if let Some(var_2096) = &input.monitoring_app_specification {
        let mut object_2097 = object.key("MonitoringAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_app_specification(
            &mut object_2097,
            var_2096,
        );
        object_2097.finish();
    }
    if let Some(var_2098) = &input.stopping_condition {
        let mut object_2099 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_2099,
            var_2098,
        );
        object_2099.finish();
    }
    if let Some(var_2100) = &input.environment {
        let mut object_2101 = object.key("Environment").start_object();
        for (key_2102, value_2103) in var_2100 {
            {
                object_2101.key(key_2102).string(value_2103);
            }
        }
        object_2101.finish();
    }
    if let Some(var_2104) = &input.network_config {
        let mut object_2105 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(&mut object_2105, var_2104);
        object_2105.finish();
    }
    if let Some(var_2106) = &input.role_arn {
        object.key("RoleArn").string(var_2106);
    }
}

pub fn serialize_structure_crate_model_processing_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Input,
) {
    if let Some(var_2107) = &input.s3_uri {
        object.key("S3Uri").string(var_2107);
    }
    if let Some(var_2108) = &input.local_path {
        object.key("LocalPath").string(var_2108);
    }
    if let Some(var_2109) = &input.s3_data_type {
        object.key("S3DataType").string(var_2109.as_str());
    }
    if let Some(var_2110) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2110.as_str());
    }
    if let Some(var_2111) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2111.as_str());
    }
    if let Some(var_2112) = &input.s3_compression_type {
        object.key("S3CompressionType").string(var_2112.as_str());
    }
}

pub fn serialize_structure_crate_model_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetDefinition,
) {
    if let Some(var_2113) = &input.athena_dataset_definition {
        let mut object_2114 = object.key("AthenaDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_dataset_definition(
            &mut object_2114,
            var_2113,
        );
        object_2114.finish();
    }
    if let Some(var_2115) = &input.redshift_dataset_definition {
        let mut object_2116 = object.key("RedshiftDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_dataset_definition(
            &mut object_2116,
            var_2115,
        );
        object_2116.finish();
    }
    if let Some(var_2117) = &input.local_path {
        object.key("LocalPath").string(var_2117);
    }
    if let Some(var_2118) = &input.data_distribution_type {
        object.key("DataDistributionType").string(var_2118.as_str());
    }
    if let Some(var_2119) = &input.input_mode {
        object.key("InputMode").string(var_2119.as_str());
    }
}

pub fn serialize_structure_crate_model_processing_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutput,
) {
    if let Some(var_2120) = &input.output_name {
        object.key("OutputName").string(var_2120);
    }
    if let Some(var_2121) = &input.s3_output {
        let mut object_2122 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_output(
            &mut object_2122,
            var_2121,
        );
        object_2122.finish();
    }
    if let Some(var_2123) = &input.feature_store_output {
        let mut object_2124 = object.key("FeatureStoreOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_feature_store_output(
            &mut object_2124,
            var_2123,
        );
        object_2124.finish();
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
}

pub fn serialize_structure_crate_model_processing_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingClusterConfig,
) {
    if let Some(var_2125) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2125).into()),
        );
    }
    if let Some(var_2126) = &input.instance_type {
        object.key("InstanceType").string(var_2126.as_str());
    }
    if let Some(var_2127) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2127).into()),
        );
    }
    if let Some(var_2128) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2128);
    }
}

pub fn serialize_structure_crate_model_provisioning_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningParameter,
) {
    if let Some(var_2129) = &input.key {
        object.key("Key").string(var_2129);
    }
    if let Some(var_2130) = &input.value {
        object.key("Value").string(var_2130);
    }
}

pub fn serialize_structure_crate_model_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) {
    if let Some(var_2131) = &input.s3_data_source {
        let mut object_2132 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source(&mut object_2132, var_2131);
        object_2132.finish();
    }
    if let Some(var_2133) = &input.file_system_data_source {
        let mut object_2134 = object.key("FileSystemDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_data_source(
            &mut object_2134,
            var_2133,
        );
        object_2134.finish();
    }
}

pub fn serialize_structure_crate_model_shuffle_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShuffleConfig,
) {
    {
        object.key("Seed").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.seed).into()),
        );
    }
}

pub fn serialize_structure_crate_model_collection_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CollectionConfiguration,
) {
    if let Some(var_2135) = &input.collection_name {
        object.key("CollectionName").string(var_2135);
    }
    if let Some(var_2136) = &input.collection_parameters {
        let mut object_2137 = object.key("CollectionParameters").start_object();
        for (key_2138, value_2139) in var_2136 {
            {
                object_2137.key(key_2138).string(value_2139);
            }
        }
        object_2137.finish();
    }
}

pub fn serialize_structure_crate_model_transform_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformDataSource,
) {
    if let Some(var_2140) = &input.s3_data_source {
        let mut object_2141 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_s3_data_source(
            &mut object_2141,
            var_2140,
        );
        object_2141.finish();
    }
}

pub fn serialize_structure_crate_model_cognito_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoMemberDefinition,
) {
    if let Some(var_2142) = &input.user_pool {
        object.key("UserPool").string(var_2142);
    }
    if let Some(var_2143) = &input.user_group {
        object.key("UserGroup").string(var_2143);
    }
    if let Some(var_2144) = &input.client_id {
        object.key("ClientId").string(var_2144);
    }
}

pub fn serialize_structure_crate_model_oidc_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcMemberDefinition,
) {
    if let Some(var_2145) = &input.groups {
        let mut array_2146 = object.key("Groups").start_array();
        for item_2147 in var_2145 {
            {
                array_2146.value().string(item_2147);
            }
        }
        array_2146.finish();
    }
}

pub fn serialize_structure_crate_model_property_name_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyNameQuery,
) {
    if let Some(var_2148) = &input.property_name_hint {
        object.key("PropertyNameHint").string(var_2148);
    }
}

pub fn serialize_structure_crate_model_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_2149) = &input.name {
        object.key("Name").string(var_2149);
    }
    if let Some(var_2150) = &input.operator {
        object.key("Operator").string(var_2150.as_str());
    }
    if let Some(var_2151) = &input.value {
        object.key("Value").string(var_2151);
    }
}

pub fn serialize_structure_crate_model_nested_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NestedFilters,
) {
    if let Some(var_2152) = &input.nested_property_name {
        object.key("NestedPropertyName").string(var_2152);
    }
    if let Some(var_2153) = &input.filters {
        let mut array_2154 = object.key("Filters").start_array();
        for item_2155 in var_2153 {
            {
                let mut object_2156 = array_2154.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(
                    &mut object_2156,
                    item_2155,
                );
                object_2156.finish();
            }
        }
        array_2154.finish();
    }
}

pub fn serialize_structure_crate_model_blue_green_update_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlueGreenUpdatePolicy,
) {
    if let Some(var_2157) = &input.traffic_routing_configuration {
        let mut object_2158 = object.key("TrafficRoutingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_traffic_routing_config(
            &mut object_2158,
            var_2157,
        );
        object_2158.finish();
    }
    if let Some(var_2159) = &input.termination_wait_in_seconds {
        object.key("TerminationWaitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2159).into()),
        );
    }
    if let Some(var_2160) = &input.maximum_execution_timeout_in_seconds {
        object.key("MaximumExecutionTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2160).into()),
        );
    }
}

pub fn serialize_structure_crate_model_auto_rollback_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoRollbackConfig,
) {
    if let Some(var_2161) = &input.alarms {
        let mut array_2162 = object.key("Alarms").start_array();
        for item_2163 in var_2161 {
            {
                let mut object_2164 = array_2162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_alarm(&mut object_2164, item_2163);
                object_2164.finish();
            }
        }
        array_2162.finish();
    }
}

pub fn serialize_structure_crate_model_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRange,
) {
    if let Some(var_2165) = &input.integer_parameter_range_specification {
        let mut object_2166 = object
            .key("IntegerParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_integer_parameter_range_specification(
            &mut object_2166,
            var_2165,
        );
        object_2166.finish();
    }
    if let Some(var_2167) = &input.continuous_parameter_range_specification {
        let mut object_2168 = object
            .key("ContinuousParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_continuous_parameter_range_specification(
            &mut object_2168,
            var_2167,
        );
        object_2168.finish();
    }
    if let Some(var_2169) = &input.categorical_parameter_range_specification {
        let mut object_2170 = object
            .key("CategoricalParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_categorical_parameter_range_specification(
            &mut object_2170,
            var_2169,
        );
        object_2170.finish();
    }
}

pub fn serialize_structure_crate_model_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingJobDefinition,
) {
    if let Some(var_2171) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2171.as_str());
    }
    if let Some(var_2172) = &input.hyper_parameters {
        let mut object_2173 = object.key("HyperParameters").start_object();
        for (key_2174, value_2175) in var_2172 {
            {
                object_2173.key(key_2174).string(value_2175);
            }
        }
        object_2173.finish();
    }
    if let Some(var_2176) = &input.input_data_config {
        let mut array_2177 = object.key("InputDataConfig").start_array();
        for item_2178 in var_2176 {
            {
                let mut object_2179 = array_2177.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_2179,
                    item_2178,
                );
                object_2179.finish();
            }
        }
        array_2177.finish();
    }
    if let Some(var_2180) = &input.output_data_config {
        let mut object_2181 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_2181,
            var_2180,
        );
        object_2181.finish();
    }
    if let Some(var_2182) = &input.resource_config {
        let mut object_2183 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(
            &mut object_2183,
            var_2182,
        );
        object_2183.finish();
    }
    if let Some(var_2184) = &input.stopping_condition {
        let mut object_2185 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_2185,
            var_2184,
        );
        object_2185.finish();
    }
}

pub fn serialize_structure_crate_model_transform_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformJobDefinition,
) {
    if let Some(var_2186) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2186).into()),
        );
    }
    if let Some(var_2187) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2187).into()),
        );
    }
    if let Some(var_2188) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_2188.as_str());
    }
    if let Some(var_2189) = &input.environment {
        let mut object_2190 = object.key("Environment").start_object();
        for (key_2191, value_2192) in var_2189 {
            {
                object_2190.key(key_2191).string(value_2192);
            }
        }
        object_2190.finish();
    }
    if let Some(var_2193) = &input.transform_input {
        let mut object_2194 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(
            &mut object_2194,
            var_2193,
        );
        object_2194.finish();
    }
    if let Some(var_2195) = &input.transform_output {
        let mut object_2196 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(
            &mut object_2196,
            var_2195,
        );
        object_2196.finish();
    }
    if let Some(var_2197) = &input.transform_resources {
        let mut object_2198 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(
            &mut object_2198,
            var_2197,
        );
        object_2198.finish();
    }
}

pub fn serialize_structure_crate_model_auto_mls3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMls3DataSource,
) {
    if let Some(var_2199) = &input.s3_data_type {
        object.key("S3DataType").string(var_2199.as_str());
    }
    if let Some(var_2200) = &input.s3_uri {
        object.key("S3Uri").string(var_2200);
    }
}

pub fn serialize_structure_crate_model_monitoring_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringS3Output,
) {
    if let Some(var_2201) = &input.s3_uri {
        object.key("S3Uri").string(var_2201);
    }
    if let Some(var_2202) = &input.local_path {
        object.key("LocalPath").string(var_2202);
    }
    if let Some(var_2203) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2203.as_str());
    }
}

pub fn serialize_structure_crate_model_custom_image(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomImage,
) {
    if let Some(var_2204) = &input.image_name {
        object.key("ImageName").string(var_2204);
    }
    if let Some(var_2205) = &input.image_version_number {
        object.key("ImageVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2205).into()),
        );
    }
    if let Some(var_2206) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_2206);
    }
}

pub fn serialize_structure_crate_model_async_inference_notification_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceNotificationConfig,
) {
    if let Some(var_2207) = &input.success_topic {
        object.key("SuccessTopic").string(var_2207);
    }
    if let Some(var_2208) = &input.error_topic {
        object.key("ErrorTopic").string(var_2208);
    }
}

pub fn serialize_structure_crate_model_usd(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Usd,
) {
    if input.dollars != 0 {
        object.key("Dollars").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.dollars).into()),
        );
    }
    if input.cents != 0 {
        object.key("Cents").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cents).into()),
        );
    }
    if input.tenth_fractions_of_a_cent != 0 {
        object.key("TenthFractionsOfACent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.tenth_fractions_of_a_cent).into()),
        );
    }
}

pub fn serialize_structure_crate_model_integer_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) {
    if let Some(var_2209) = &input.name {
        object.key("Name").string(var_2209);
    }
    if let Some(var_2210) = &input.min_value {
        object.key("MinValue").string(var_2210);
    }
    if let Some(var_2211) = &input.max_value {
        object.key("MaxValue").string(var_2211);
    }
    if let Some(var_2212) = &input.scaling_type {
        object.key("ScalingType").string(var_2212.as_str());
    }
}

pub fn serialize_structure_crate_model_continuous_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) {
    if let Some(var_2213) = &input.name {
        object.key("Name").string(var_2213);
    }
    if let Some(var_2214) = &input.min_value {
        object.key("MinValue").string(var_2214);
    }
    if let Some(var_2215) = &input.max_value {
        object.key("MaxValue").string(var_2215);
    }
    if let Some(var_2216) = &input.scaling_type {
        object.key("ScalingType").string(var_2216.as_str());
    }
}

pub fn serialize_structure_crate_model_categorical_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) {
    if let Some(var_2217) = &input.name {
        object.key("Name").string(var_2217);
    }
    if let Some(var_2218) = &input.values {
        let mut array_2219 = object.key("Values").start_array();
        for item_2220 in var_2218 {
            {
                array_2219.value().string(item_2220);
            }
        }
        array_2219.finish();
    }
}

pub fn serialize_structure_crate_model_labeling_job_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobS3DataSource,
) {
    if let Some(var_2221) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_2221);
    }
}

pub fn serialize_structure_crate_model_labeling_job_sns_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobSnsDataSource,
) {
    if let Some(var_2222) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2222);
    }
}

pub fn serialize_structure_crate_model_repository_auth_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAuthConfig,
) {
    if let Some(var_2223) = &input.repository_credentials_provider_arn {
        object
            .key("RepositoryCredentialsProviderArn")
            .string(var_2223);
    }
}

pub fn serialize_structure_crate_model_metrics_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricsSource,
) {
    if let Some(var_2224) = &input.content_type {
        object.key("ContentType").string(var_2224);
    }
    if let Some(var_2225) = &input.content_digest {
        object.key("ContentDigest").string(var_2225);
    }
    if let Some(var_2226) = &input.s3_uri {
        object.key("S3Uri").string(var_2226);
    }
}

pub fn serialize_structure_crate_model_monitoring_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringBaselineConfig,
) {
    if let Some(var_2227) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2227);
    }
    if let Some(var_2228) = &input.constraints_resource {
        let mut object_2229 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_2229,
            var_2228,
        );
        object_2229.finish();
    }
    if let Some(var_2230) = &input.statistics_resource {
        let mut object_2231 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(
            &mut object_2231,
            var_2230,
        );
        object_2231.finish();
    }
}

pub fn serialize_structure_crate_model_monitoring_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringInput,
) {
    if let Some(var_2232) = &input.endpoint_input {
        let mut object_2233 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_2233, var_2232);
        object_2233.finish();
    }
}

pub fn serialize_structure_crate_model_monitoring_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringAppSpecification,
) {
    if let Some(var_2234) = &input.image_uri {
        object.key("ImageUri").string(var_2234);
    }
    if let Some(var_2235) = &input.container_entrypoint {
        let mut array_2236 = object.key("ContainerEntrypoint").start_array();
        for item_2237 in var_2235 {
            {
                array_2236.value().string(item_2237);
            }
        }
        array_2236.finish();
    }
    if let Some(var_2238) = &input.container_arguments {
        let mut array_2239 = object.key("ContainerArguments").start_array();
        for item_2240 in var_2238 {
            {
                array_2239.value().string(item_2240);
            }
        }
        array_2239.finish();
    }
    if let Some(var_2241) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_2241);
    }
    if let Some(var_2242) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_2242);
    }
}

pub fn serialize_structure_crate_model_athena_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaDatasetDefinition,
) {
    if let Some(var_2243) = &input.catalog {
        object.key("Catalog").string(var_2243);
    }
    if let Some(var_2244) = &input.database {
        object.key("Database").string(var_2244);
    }
    if let Some(var_2245) = &input.query_string {
        object.key("QueryString").string(var_2245);
    }
    if let Some(var_2246) = &input.work_group {
        object.key("WorkGroup").string(var_2246);
    }
    if let Some(var_2247) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2247);
    }
    if let Some(var_2248) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2248);
    }
    if let Some(var_2249) = &input.output_format {
        object.key("OutputFormat").string(var_2249.as_str());
    }
    if let Some(var_2250) = &input.output_compression {
        object.key("OutputCompression").string(var_2250.as_str());
    }
}

pub fn serialize_structure_crate_model_redshift_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDatasetDefinition,
) {
    if let Some(var_2251) = &input.cluster_id {
        object.key("ClusterId").string(var_2251);
    }
    if let Some(var_2252) = &input.database {
        object.key("Database").string(var_2252);
    }
    if let Some(var_2253) = &input.db_user {
        object.key("DbUser").string(var_2253);
    }
    if let Some(var_2254) = &input.query_string {
        object.key("QueryString").string(var_2254);
    }
    if let Some(var_2255) = &input.cluster_role_arn {
        object.key("ClusterRoleArn").string(var_2255);
    }
    if let Some(var_2256) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2256);
    }
    if let Some(var_2257) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2257);
    }
    if let Some(var_2258) = &input.output_format {
        object.key("OutputFormat").string(var_2258.as_str());
    }
    if let Some(var_2259) = &input.output_compression {
        object.key("OutputCompression").string(var_2259.as_str());
    }
}

pub fn serialize_structure_crate_model_processing_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Output,
) {
    if let Some(var_2260) = &input.s3_uri {
        object.key("S3Uri").string(var_2260);
    }
    if let Some(var_2261) = &input.local_path {
        object.key("LocalPath").string(var_2261);
    }
    if let Some(var_2262) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2262.as_str());
    }
}

pub fn serialize_structure_crate_model_processing_feature_store_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingFeatureStoreOutput,
) {
    if let Some(var_2263) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_2263);
    }
}

pub fn serialize_structure_crate_model_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSource,
) {
    if let Some(var_2264) = &input.s3_data_type {
        object.key("S3DataType").string(var_2264.as_str());
    }
    if let Some(var_2265) = &input.s3_uri {
        object.key("S3Uri").string(var_2265);
    }
    if let Some(var_2266) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2266.as_str());
    }
    if let Some(var_2267) = &input.attribute_names {
        let mut array_2268 = object.key("AttributeNames").start_array();
        for item_2269 in var_2267 {
            {
                array_2268.value().string(item_2269);
            }
        }
        array_2268.finish();
    }
}

pub fn serialize_structure_crate_model_file_system_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemDataSource,
) {
    if let Some(var_2270) = &input.file_system_id {
        object.key("FileSystemId").string(var_2270);
    }
    if let Some(var_2271) = &input.file_system_access_mode {
        object.key("FileSystemAccessMode").string(var_2271.as_str());
    }
    if let Some(var_2272) = &input.file_system_type {
        object.key("FileSystemType").string(var_2272.as_str());
    }
    if let Some(var_2273) = &input.directory_path {
        object.key("DirectoryPath").string(var_2273);
    }
}

pub fn serialize_structure_crate_model_transform_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformS3DataSource,
) {
    if let Some(var_2274) = &input.s3_data_type {
        object.key("S3DataType").string(var_2274.as_str());
    }
    if let Some(var_2275) = &input.s3_uri {
        object.key("S3Uri").string(var_2275);
    }
}

pub fn serialize_structure_crate_model_traffic_routing_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficRoutingConfig,
) {
    if let Some(var_2276) = &input.r#type {
        object.key("Type").string(var_2276.as_str());
    }
    if let Some(var_2277) = &input.wait_interval_in_seconds {
        object.key("WaitIntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2277).into()),
        );
    }
    if let Some(var_2278) = &input.canary_size {
        let mut object_2279 = object.key("CanarySize").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_size(&mut object_2279, var_2278);
        object_2279.finish();
    }
}

pub fn serialize_structure_crate_model_alarm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Alarm,
) {
    if let Some(var_2280) = &input.alarm_name {
        object.key("AlarmName").string(var_2280);
    }
}

pub fn serialize_structure_crate_model_integer_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRangeSpecification,
) {
    if let Some(var_2281) = &input.min_value {
        object.key("MinValue").string(var_2281);
    }
    if let Some(var_2282) = &input.max_value {
        object.key("MaxValue").string(var_2282);
    }
}

pub fn serialize_structure_crate_model_continuous_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRangeSpecification,
) {
    if let Some(var_2283) = &input.min_value {
        object.key("MinValue").string(var_2283);
    }
    if let Some(var_2284) = &input.max_value {
        object.key("MaxValue").string(var_2284);
    }
}

pub fn serialize_structure_crate_model_categorical_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRangeSpecification,
) {
    if let Some(var_2285) = &input.values {
        let mut array_2286 = object.key("Values").start_array();
        for item_2287 in var_2285 {
            {
                array_2286.value().string(item_2287);
            }
        }
        array_2286.finish();
    }
}

pub fn serialize_structure_crate_model_capacity_size(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacitySize,
) {
    if let Some(var_2288) = &input.r#type {
        object.key("Type").string(var_2288.as_str());
    }
    if let Some(var_2289) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2289).into()),
        );
    }
}
