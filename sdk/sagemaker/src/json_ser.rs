// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddAssociationInput,
) {
    if let Some(var_1) = &input.source_arn {
        object.key("SourceArn").string(var_1);
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2);
    }
    if let Some(var_3) = &input.association_type {
        object.key("AssociationType").string(var_3.as_str());
    }
}

pub fn serialize_structure_add_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) {
    if let Some(var_4) = &input.resource_arn {
        object.key("ResourceArn").string(var_4);
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_8, item_7);
                object_8.finish();
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_associate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTrialComponentInput,
) {
    if let Some(var_9) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_9);
    }
    if let Some(var_10) = &input.trial_name {
        object.key("TrialName").string(var_10);
    }
}

pub fn serialize_structure_create_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionInput,
) {
    if let Some(var_11) = &input.action_name {
        object.key("ActionName").string(var_11);
    }
    if let Some(var_12) = &input.source {
        let mut object_13 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_action_source(&mut object_13, var_12);
        object_13.finish();
    }
    if let Some(var_14) = &input.action_type {
        object.key("ActionType").string(var_14);
    }
    if let Some(var_15) = &input.description {
        object.key("Description").string(var_15);
    }
    if let Some(var_16) = &input.status {
        object.key("Status").string(var_16.as_str());
    }
    if let Some(var_17) = &input.properties {
        let mut object_18 = object.key("Properties").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.metadata_properties {
        let mut object_22 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_22, var_21);
        object_22.finish();
    }
    if let Some(var_23) = &input.tags {
        let mut array_24 = object.key("Tags").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_26, item_25);
                object_26.finish();
            }
        }
        array_24.finish();
    }
}

pub fn serialize_structure_create_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlgorithmInput,
) {
    if let Some(var_27) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_27);
    }
    if let Some(var_28) = &input.algorithm_description {
        object.key("AlgorithmDescription").string(var_28);
    }
    if let Some(var_29) = &input.training_specification {
        let mut object_30 = object.key("TrainingSpecification").start_object();
        crate::json_ser::serialize_structure_training_specification(&mut object_30, var_29);
        object_30.finish();
    }
    if let Some(var_31) = &input.inference_specification {
        let mut object_32 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_inference_specification(&mut object_32, var_31);
        object_32.finish();
    }
    if let Some(var_33) = &input.validation_specification {
        let mut object_34 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_algorithm_validation_specification(
            &mut object_34,
            var_33,
        );
        object_34.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_35) = &input.tags {
        let mut array_36 = object.key("Tags").start_array();
        for item_37 in var_35 {
            {
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_38, item_37);
                object_38.finish();
            }
        }
        array_36.finish();
    }
}

pub fn serialize_structure_create_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInput,
) {
    if let Some(var_39) = &input.domain_id {
        object.key("DomainId").string(var_39);
    }
    if let Some(var_40) = &input.user_profile_name {
        object.key("UserProfileName").string(var_40);
    }
    if let Some(var_41) = &input.app_type {
        object.key("AppType").string(var_41.as_str());
    }
    if let Some(var_42) = &input.app_name {
        object.key("AppName").string(var_42);
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("Tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_46, item_45);
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if let Some(var_47) = &input.resource_spec {
        let mut object_48 = object.key("ResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_48, var_47);
        object_48.finish();
    }
}

pub fn serialize_structure_create_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppImageConfigInput,
) {
    if let Some(var_49) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_49);
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("Tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if let Some(var_54) = &input.kernel_gateway_image_config {
        let mut object_55 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_image_config(&mut object_55, var_54);
        object_55.finish();
    }
}

pub fn serialize_structure_create_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateArtifactInput,
) {
    if let Some(var_56) = &input.artifact_name {
        object.key("ArtifactName").string(var_56);
    }
    if let Some(var_57) = &input.source {
        let mut object_58 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_artifact_source(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.artifact_type {
        object.key("ArtifactType").string(var_59);
    }
    if let Some(var_60) = &input.properties {
        let mut object_61 = object.key("Properties").start_object();
        for (key_62, value_63) in var_60 {
            {
                object_61.key(key_62).string(value_63);
            }
        }
        object_61.finish();
    }
    if let Some(var_64) = &input.metadata_properties {
        let mut object_65 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_65, var_64);
        object_65.finish();
    }
    if let Some(var_66) = &input.tags {
        let mut array_67 = object.key("Tags").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_69, item_68);
                object_69.finish();
            }
        }
        array_67.finish();
    }
}

pub fn serialize_structure_create_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoMLJobInput,
) {
    if let Some(var_70) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_70);
    }
    if let Some(var_71) = &input.input_data_config {
        let mut array_72 = object.key("InputDataConfig").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_auto_ml_channel(&mut object_74, item_73);
                object_74.finish();
            }
        }
        array_72.finish();
    }
    if let Some(var_75) = &input.output_data_config {
        let mut object_76 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_output_data_config(&mut object_76, var_75);
        object_76.finish();
    }
    if let Some(var_77) = &input.problem_type {
        object.key("ProblemType").string(var_77.as_str());
    }
    if let Some(var_78) = &input.auto_ml_job_objective {
        let mut object_79 = object.key("AutoMLJobObjective").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_objective(&mut object_79, var_78);
        object_79.finish();
    }
    if let Some(var_80) = &input.auto_ml_job_config {
        let mut object_81 = object.key("AutoMLJobConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_config(&mut object_81, var_80);
        object_81.finish();
    }
    if let Some(var_82) = &input.role_arn {
        object.key("RoleArn").string(var_82);
    }
    if input.generate_candidate_definitions_only {
        object
            .key("GenerateCandidateDefinitionsOnly")
            .boolean(input.generate_candidate_definitions_only);
    }
    if let Some(var_83) = &input.tags {
        let mut array_84 = object.key("Tags").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_86, item_85);
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.model_deploy_config {
        let mut object_88 = object.key("ModelDeployConfig").start_object();
        crate::json_ser::serialize_structure_model_deploy_config(&mut object_88, var_87);
        object_88.finish();
    }
}

pub fn serialize_structure_create_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeRepositoryInput,
) {
    if let Some(var_89) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_89);
    }
    if let Some(var_90) = &input.git_config {
        let mut object_91 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_git_config(&mut object_91, var_90);
        object_91.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("Tags").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_95, item_94);
                object_95.finish();
            }
        }
        array_93.finish();
    }
}

pub fn serialize_structure_create_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCompilationJobInput,
) {
    if let Some(var_96) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_96);
    }
    if let Some(var_97) = &input.role_arn {
        object.key("RoleArn").string(var_97);
    }
    if let Some(var_98) = &input.input_config {
        let mut object_99 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_input_config(&mut object_99, var_98);
        object_99.finish();
    }
    if let Some(var_100) = &input.output_config {
        let mut object_101 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_output_config(&mut object_101, var_100);
        object_101.finish();
    }
    if let Some(var_102) = &input.stopping_condition {
        let mut object_103 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.tags {
        let mut array_105 = object.key("Tags").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_107, item_106);
                object_107.finish();
            }
        }
        array_105.finish();
    }
}

pub fn serialize_structure_create_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContextInput,
) {
    if let Some(var_108) = &input.context_name {
        object.key("ContextName").string(var_108);
    }
    if let Some(var_109) = &input.source {
        let mut object_110 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_context_source(&mut object_110, var_109);
        object_110.finish();
    }
    if let Some(var_111) = &input.context_type {
        object.key("ContextType").string(var_111);
    }
    if let Some(var_112) = &input.description {
        object.key("Description").string(var_112);
    }
    if let Some(var_113) = &input.properties {
        let mut object_114 = object.key("Properties").start_object();
        for (key_115, value_116) in var_113 {
            {
                object_114.key(key_115).string(value_116);
            }
        }
        object_114.finish();
    }
    if let Some(var_117) = &input.tags {
        let mut array_118 = object.key("Tags").start_array();
        for item_119 in var_117 {
            {
                let mut object_120 = array_118.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_120, item_119);
                object_120.finish();
            }
        }
        array_118.finish();
    }
}

pub fn serialize_structure_create_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataQualityJobDefinitionInput,
) {
    if let Some(var_121) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_121);
    }
    if let Some(var_122) = &input.data_quality_baseline_config {
        let mut object_123 = object.key("DataQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_data_quality_baseline_config(&mut object_123, var_122);
        object_123.finish();
    }
    if let Some(var_124) = &input.data_quality_app_specification {
        let mut object_125 = object.key("DataQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_data_quality_app_specification(
            &mut object_125,
            var_124,
        );
        object_125.finish();
    }
    if let Some(var_126) = &input.data_quality_job_input {
        let mut object_127 = object.key("DataQualityJobInput").start_object();
        crate::json_ser::serialize_structure_data_quality_job_input(&mut object_127, var_126);
        object_127.finish();
    }
    if let Some(var_128) = &input.data_quality_job_output_config {
        let mut object_129 = object.key("DataQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_129, var_128);
        object_129.finish();
    }
    if let Some(var_130) = &input.job_resources {
        let mut object_131 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_131, var_130);
        object_131.finish();
    }
    if let Some(var_132) = &input.network_config {
        let mut object_133 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_133, var_132);
        object_133.finish();
    }
    if let Some(var_134) = &input.role_arn {
        object.key("RoleArn").string(var_134);
    }
    if let Some(var_135) = &input.stopping_condition {
        let mut object_136 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_136,
            var_135,
        );
        object_136.finish();
    }
    if let Some(var_137) = &input.tags {
        let mut array_138 = object.key("Tags").start_array();
        for item_139 in var_137 {
            {
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_140, item_139);
                object_140.finish();
            }
        }
        array_138.finish();
    }
}

pub fn serialize_structure_create_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceFleetInput,
) {
    if let Some(var_141) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_141);
    }
    if let Some(var_142) = &input.role_arn {
        object.key("RoleArn").string(var_142);
    }
    if let Some(var_143) = &input.description {
        object.key("Description").string(var_143);
    }
    if let Some(var_144) = &input.output_config {
        let mut object_145 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_145, var_144);
        object_145.finish();
    }
    if let Some(var_146) = &input.tags {
        let mut array_147 = object.key("Tags").start_array();
        for item_148 in var_146 {
            {
                let mut object_149 = array_147.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_149, item_148);
                object_149.finish();
            }
        }
        array_147.finish();
    }
    if let Some(var_150) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_150);
    }
}

pub fn serialize_structure_create_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) {
    if let Some(var_151) = &input.domain_name {
        object.key("DomainName").string(var_151);
    }
    if let Some(var_152) = &input.auth_mode {
        object.key("AuthMode").string(var_152.as_str());
    }
    if let Some(var_153) = &input.default_user_settings {
        let mut object_154 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_154, var_153);
        object_154.finish();
    }
    if let Some(var_155) = &input.subnet_ids {
        let mut array_156 = object.key("SubnetIds").start_array();
        for item_157 in var_155 {
            {
                array_156.value().string(item_157);
            }
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.vpc_id {
        object.key("VpcId").string(var_158);
    }
    if let Some(var_159) = &input.tags {
        let mut array_160 = object.key("Tags").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_162, item_161);
                object_162.finish();
            }
        }
        array_160.finish();
    }
    if let Some(var_163) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_163.as_str());
    }
    if let Some(var_164) = &input.home_efs_file_system_kms_key_id {
        object.key("HomeEfsFileSystemKmsKeyId").string(var_164);
    }
    if let Some(var_165) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_165);
    }
}

pub fn serialize_structure_create_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgePackagingJobInput,
) {
    if let Some(var_166) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_166);
    }
    if let Some(var_167) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_167);
    }
    if let Some(var_168) = &input.model_name {
        object.key("ModelName").string(var_168);
    }
    if let Some(var_169) = &input.model_version {
        object.key("ModelVersion").string(var_169);
    }
    if let Some(var_170) = &input.role_arn {
        object.key("RoleArn").string(var_170);
    }
    if let Some(var_171) = &input.output_config {
        let mut object_172 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_172, var_171);
        object_172.finish();
    }
    if let Some(var_173) = &input.resource_key {
        object.key("ResourceKey").string(var_173);
    }
    if let Some(var_174) = &input.tags {
        let mut array_175 = object.key("Tags").start_array();
        for item_176 in var_174 {
            {
                let mut object_177 = array_175.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_177, item_176);
                object_177.finish();
            }
        }
        array_175.finish();
    }
}

pub fn serialize_structure_create_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) {
    if let Some(var_178) = &input.endpoint_name {
        object.key("EndpointName").string(var_178);
    }
    if let Some(var_179) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_179);
    }
    if let Some(var_180) = &input.tags {
        let mut array_181 = object.key("Tags").start_array();
        for item_182 in var_180 {
            {
                let mut object_183 = array_181.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_183, item_182);
                object_183.finish();
            }
        }
        array_181.finish();
    }
}

pub fn serialize_structure_create_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointConfigInput,
) {
    if let Some(var_184) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_184);
    }
    if let Some(var_185) = &input.production_variants {
        let mut array_186 = object.key("ProductionVariants").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_production_variant(&mut object_188, item_187);
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.data_capture_config {
        let mut object_190 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_data_capture_config(&mut object_190, var_189);
        object_190.finish();
    }
    if let Some(var_191) = &input.tags {
        let mut array_192 = object.key("Tags").start_array();
        for item_193 in var_191 {
            {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_194, item_193);
                object_194.finish();
            }
        }
        array_192.finish();
    }
    if let Some(var_195) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_195);
    }
}

pub fn serialize_structure_create_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperimentInput,
) {
    if let Some(var_196) = &input.experiment_name {
        object.key("ExperimentName").string(var_196);
    }
    if let Some(var_197) = &input.display_name {
        object.key("DisplayName").string(var_197);
    }
    if let Some(var_198) = &input.description {
        object.key("Description").string(var_198);
    }
    if let Some(var_199) = &input.tags {
        let mut array_200 = object.key("Tags").start_array();
        for item_201 in var_199 {
            {
                let mut object_202 = array_200.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_202, item_201);
                object_202.finish();
            }
        }
        array_200.finish();
    }
}

pub fn serialize_structure_create_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFeatureGroupInput,
) {
    if let Some(var_203) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_203);
    }
    if let Some(var_204) = &input.record_identifier_feature_name {
        object.key("RecordIdentifierFeatureName").string(var_204);
    }
    if let Some(var_205) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_205);
    }
    if let Some(var_206) = &input.feature_definitions {
        let mut array_207 = object.key("FeatureDefinitions").start_array();
        for item_208 in var_206 {
            {
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_feature_definition(&mut object_209, item_208);
                object_209.finish();
            }
        }
        array_207.finish();
    }
    if let Some(var_210) = &input.online_store_config {
        let mut object_211 = object.key("OnlineStoreConfig").start_object();
        crate::json_ser::serialize_structure_online_store_config(&mut object_211, var_210);
        object_211.finish();
    }
    if let Some(var_212) = &input.offline_store_config {
        let mut object_213 = object.key("OfflineStoreConfig").start_object();
        crate::json_ser::serialize_structure_offline_store_config(&mut object_213, var_212);
        object_213.finish();
    }
    if let Some(var_214) = &input.role_arn {
        object.key("RoleArn").string(var_214);
    }
    if let Some(var_215) = &input.description {
        object.key("Description").string(var_215);
    }
    if let Some(var_216) = &input.tags {
        let mut array_217 = object.key("Tags").start_array();
        for item_218 in var_216 {
            {
                let mut object_219 = array_217.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_219, item_218);
                object_219.finish();
            }
        }
        array_217.finish();
    }
}

pub fn serialize_structure_create_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowDefinitionInput,
) {
    if let Some(var_220) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_220);
    }
    if let Some(var_221) = &input.human_loop_request_source {
        let mut object_222 = object.key("HumanLoopRequestSource").start_object();
        crate::json_ser::serialize_structure_human_loop_request_source(&mut object_222, var_221);
        object_222.finish();
    }
    if let Some(var_223) = &input.human_loop_activation_config {
        let mut object_224 = object.key("HumanLoopActivationConfig").start_object();
        crate::json_ser::serialize_structure_human_loop_activation_config(&mut object_224, var_223);
        object_224.finish();
    }
    if let Some(var_225) = &input.human_loop_config {
        let mut object_226 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_human_loop_config(&mut object_226, var_225);
        object_226.finish();
    }
    if let Some(var_227) = &input.output_config {
        let mut object_228 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_flow_definition_output_config(
            &mut object_228,
            var_227,
        );
        object_228.finish();
    }
    if let Some(var_229) = &input.role_arn {
        object.key("RoleArn").string(var_229);
    }
    if let Some(var_230) = &input.tags {
        let mut array_231 = object.key("Tags").start_array();
        for item_232 in var_230 {
            {
                let mut object_233 = array_231.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_233, item_232);
                object_233.finish();
            }
        }
        array_231.finish();
    }
}

pub fn serialize_structure_create_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHumanTaskUiInput,
) {
    if let Some(var_234) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_234);
    }
    if let Some(var_235) = &input.ui_template {
        let mut object_236 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_ui_template(&mut object_236, var_235);
        object_236.finish();
    }
    if let Some(var_237) = &input.tags {
        let mut array_238 = object.key("Tags").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_240, item_239);
                object_240.finish();
            }
        }
        array_238.finish();
    }
}

pub fn serialize_structure_create_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHyperParameterTuningJobInput,
) {
    if let Some(var_241) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_241);
    }
    if let Some(var_242) = &input.hyper_parameter_tuning_job_config {
        let mut object_243 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_config(
            &mut object_243,
            var_242,
        );
        object_243.finish();
    }
    if let Some(var_244) = &input.training_job_definition {
        let mut object_245 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_training_job_definition(
            &mut object_245,
            var_244,
        );
        object_245.finish();
    }
    if let Some(var_246) = &input.training_job_definitions {
        let mut array_247 = object.key("TrainingJobDefinitions").start_array();
        for item_248 in var_246 {
            {
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_training_job_definition(
                    &mut object_249,
                    item_248,
                );
                object_249.finish();
            }
        }
        array_247.finish();
    }
    if let Some(var_250) = &input.warm_start_config {
        let mut object_251 = object.key("WarmStartConfig").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_warm_start_config(
            &mut object_251,
            var_250,
        );
        object_251.finish();
    }
    if let Some(var_252) = &input.tags {
        let mut array_253 = object.key("Tags").start_array();
        for item_254 in var_252 {
            {
                let mut object_255 = array_253.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_255, item_254);
                object_255.finish();
            }
        }
        array_253.finish();
    }
}

pub fn serialize_structure_create_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) {
    if let Some(var_256) = &input.description {
        object.key("Description").string(var_256);
    }
    if let Some(var_257) = &input.display_name {
        object.key("DisplayName").string(var_257);
    }
    if let Some(var_258) = &input.image_name {
        object.key("ImageName").string(var_258);
    }
    if let Some(var_259) = &input.role_arn {
        object.key("RoleArn").string(var_259);
    }
    if let Some(var_260) = &input.tags {
        let mut array_261 = object.key("Tags").start_array();
        for item_262 in var_260 {
            {
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_263, item_262);
                object_263.finish();
            }
        }
        array_261.finish();
    }
}

pub fn serialize_structure_create_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageVersionInput,
) {
    if let Some(var_264) = &input.base_image {
        object.key("BaseImage").string(var_264);
    }
    if let Some(var_265) = &input.client_token {
        object.key("ClientToken").string(var_265);
    }
    if let Some(var_266) = &input.image_name {
        object.key("ImageName").string(var_266);
    }
}

pub fn serialize_structure_create_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLabelingJobInput,
) {
    if let Some(var_267) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_267);
    }
    if let Some(var_268) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_268);
    }
    if let Some(var_269) = &input.input_config {
        let mut object_270 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_input_config(&mut object_270, var_269);
        object_270.finish();
    }
    if let Some(var_271) = &input.output_config {
        let mut object_272 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_output_config(&mut object_272, var_271);
        object_272.finish();
    }
    if let Some(var_273) = &input.role_arn {
        object.key("RoleArn").string(var_273);
    }
    if let Some(var_274) = &input.label_category_config_s3_uri {
        object.key("LabelCategoryConfigS3Uri").string(var_274);
    }
    if let Some(var_275) = &input.stopping_conditions {
        let mut object_276 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_labeling_job_stopping_conditions(
            &mut object_276,
            var_275,
        );
        object_276.finish();
    }
    if let Some(var_277) = &input.labeling_job_algorithms_config {
        let mut object_278 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_algorithms_config(
            &mut object_278,
            var_277,
        );
        object_278.finish();
    }
    if let Some(var_279) = &input.human_task_config {
        let mut object_280 = object.key("HumanTaskConfig").start_object();
        crate::json_ser::serialize_structure_human_task_config(&mut object_280, var_279);
        object_280.finish();
    }
    if let Some(var_281) = &input.tags {
        let mut array_282 = object.key("Tags").start_array();
        for item_283 in var_281 {
            {
                let mut object_284 = array_282.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_284, item_283);
                object_284.finish();
            }
        }
        array_282.finish();
    }
}

pub fn serialize_structure_create_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) {
    if let Some(var_285) = &input.model_name {
        object.key("ModelName").string(var_285);
    }
    if let Some(var_286) = &input.primary_container {
        let mut object_287 = object.key("PrimaryContainer").start_object();
        crate::json_ser::serialize_structure_container_definition(&mut object_287, var_286);
        object_287.finish();
    }
    if let Some(var_288) = &input.containers {
        let mut array_289 = object.key("Containers").start_array();
        for item_290 in var_288 {
            {
                let mut object_291 = array_289.value().start_object();
                crate::json_ser::serialize_structure_container_definition(
                    &mut object_291,
                    item_290,
                );
                object_291.finish();
            }
        }
        array_289.finish();
    }
    if let Some(var_292) = &input.inference_execution_config {
        let mut object_293 = object.key("InferenceExecutionConfig").start_object();
        crate::json_ser::serialize_structure_inference_execution_config(&mut object_293, var_292);
        object_293.finish();
    }
    if let Some(var_294) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_294);
    }
    if let Some(var_295) = &input.tags {
        let mut array_296 = object.key("Tags").start_array();
        for item_297 in var_295 {
            {
                let mut object_298 = array_296.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_298, item_297);
                object_298.finish();
            }
        }
        array_296.finish();
    }
    if let Some(var_299) = &input.vpc_config {
        let mut object_300 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_300, var_299);
        object_300.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
}

pub fn serialize_structure_create_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelBiasJobDefinitionInput,
) {
    if let Some(var_301) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_301);
    }
    if let Some(var_302) = &input.model_bias_baseline_config {
        let mut object_303 = object.key("ModelBiasBaselineConfig").start_object();
        crate::json_ser::serialize_structure_model_bias_baseline_config(&mut object_303, var_302);
        object_303.finish();
    }
    if let Some(var_304) = &input.model_bias_app_specification {
        let mut object_305 = object.key("ModelBiasAppSpecification").start_object();
        crate::json_ser::serialize_structure_model_bias_app_specification(&mut object_305, var_304);
        object_305.finish();
    }
    if let Some(var_306) = &input.model_bias_job_input {
        let mut object_307 = object.key("ModelBiasJobInput").start_object();
        crate::json_ser::serialize_structure_model_bias_job_input(&mut object_307, var_306);
        object_307.finish();
    }
    if let Some(var_308) = &input.model_bias_job_output_config {
        let mut object_309 = object.key("ModelBiasJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_309, var_308);
        object_309.finish();
    }
    if let Some(var_310) = &input.job_resources {
        let mut object_311 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_311, var_310);
        object_311.finish();
    }
    if let Some(var_312) = &input.network_config {
        let mut object_313 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_313, var_312);
        object_313.finish();
    }
    if let Some(var_314) = &input.role_arn {
        object.key("RoleArn").string(var_314);
    }
    if let Some(var_315) = &input.stopping_condition {
        let mut object_316 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_316,
            var_315,
        );
        object_316.finish();
    }
    if let Some(var_317) = &input.tags {
        let mut array_318 = object.key("Tags").start_array();
        for item_319 in var_317 {
            {
                let mut object_320 = array_318.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_320, item_319);
                object_320.finish();
            }
        }
        array_318.finish();
    }
}

pub fn serialize_structure_create_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_321) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_321);
    }
    if let Some(var_322) = &input.model_explainability_baseline_config {
        let mut object_323 = object
            .key("ModelExplainabilityBaselineConfig")
            .start_object();
        crate::json_ser::serialize_structure_model_explainability_baseline_config(
            &mut object_323,
            var_322,
        );
        object_323.finish();
    }
    if let Some(var_324) = &input.model_explainability_app_specification {
        let mut object_325 = object
            .key("ModelExplainabilityAppSpecification")
            .start_object();
        crate::json_ser::serialize_structure_model_explainability_app_specification(
            &mut object_325,
            var_324,
        );
        object_325.finish();
    }
    if let Some(var_326) = &input.model_explainability_job_input {
        let mut object_327 = object.key("ModelExplainabilityJobInput").start_object();
        crate::json_ser::serialize_structure_model_explainability_job_input(
            &mut object_327,
            var_326,
        );
        object_327.finish();
    }
    if let Some(var_328) = &input.model_explainability_job_output_config {
        let mut object_329 = object
            .key("ModelExplainabilityJobOutputConfig")
            .start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_329, var_328);
        object_329.finish();
    }
    if let Some(var_330) = &input.job_resources {
        let mut object_331 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_331, var_330);
        object_331.finish();
    }
    if let Some(var_332) = &input.network_config {
        let mut object_333 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_333, var_332);
        object_333.finish();
    }
    if let Some(var_334) = &input.role_arn {
        object.key("RoleArn").string(var_334);
    }
    if let Some(var_335) = &input.stopping_condition {
        let mut object_336 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_336,
            var_335,
        );
        object_336.finish();
    }
    if let Some(var_337) = &input.tags {
        let mut array_338 = object.key("Tags").start_array();
        for item_339 in var_337 {
            {
                let mut object_340 = array_338.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_340, item_339);
                object_340.finish();
            }
        }
        array_338.finish();
    }
}

pub fn serialize_structure_create_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageInput,
) {
    if let Some(var_341) = &input.model_package_name {
        object.key("ModelPackageName").string(var_341);
    }
    if let Some(var_342) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_342);
    }
    if let Some(var_343) = &input.model_package_description {
        object.key("ModelPackageDescription").string(var_343);
    }
    if let Some(var_344) = &input.inference_specification {
        let mut object_345 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_inference_specification(&mut object_345, var_344);
        object_345.finish();
    }
    if let Some(var_346) = &input.validation_specification {
        let mut object_347 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_model_package_validation_specification(
            &mut object_347,
            var_346,
        );
        object_347.finish();
    }
    if let Some(var_348) = &input.source_algorithm_specification {
        let mut object_349 = object.key("SourceAlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_source_algorithm_specification(
            &mut object_349,
            var_348,
        );
        object_349.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_350) = &input.tags {
        let mut array_351 = object.key("Tags").start_array();
        for item_352 in var_350 {
            {
                let mut object_353 = array_351.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_353, item_352);
                object_353.finish();
            }
        }
        array_351.finish();
    }
    if let Some(var_354) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_354.as_str());
    }
    if let Some(var_355) = &input.metadata_properties {
        let mut object_356 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_356, var_355);
        object_356.finish();
    }
    if let Some(var_357) = &input.model_metrics {
        let mut object_358 = object.key("ModelMetrics").start_object();
        crate::json_ser::serialize_structure_model_metrics(&mut object_358, var_357);
        object_358.finish();
    }
    if let Some(var_359) = &input.client_token {
        object.key("ClientToken").string(var_359);
    }
}

pub fn serialize_structure_create_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageGroupInput,
) {
    if let Some(var_360) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_360);
    }
    if let Some(var_361) = &input.model_package_group_description {
        object.key("ModelPackageGroupDescription").string(var_361);
    }
    if let Some(var_362) = &input.tags {
        let mut array_363 = object.key("Tags").start_array();
        for item_364 in var_362 {
            {
                let mut object_365 = array_363.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_365, item_364);
                object_365.finish();
            }
        }
        array_363.finish();
    }
}

pub fn serialize_structure_create_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelQualityJobDefinitionInput,
) {
    if let Some(var_366) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_366);
    }
    if let Some(var_367) = &input.model_quality_baseline_config {
        let mut object_368 = object.key("ModelQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_model_quality_baseline_config(
            &mut object_368,
            var_367,
        );
        object_368.finish();
    }
    if let Some(var_369) = &input.model_quality_app_specification {
        let mut object_370 = object.key("ModelQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_model_quality_app_specification(
            &mut object_370,
            var_369,
        );
        object_370.finish();
    }
    if let Some(var_371) = &input.model_quality_job_input {
        let mut object_372 = object.key("ModelQualityJobInput").start_object();
        crate::json_ser::serialize_structure_model_quality_job_input(&mut object_372, var_371);
        object_372.finish();
    }
    if let Some(var_373) = &input.model_quality_job_output_config {
        let mut object_374 = object.key("ModelQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_374, var_373);
        object_374.finish();
    }
    if let Some(var_375) = &input.job_resources {
        let mut object_376 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_376, var_375);
        object_376.finish();
    }
    if let Some(var_377) = &input.network_config {
        let mut object_378 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_378, var_377);
        object_378.finish();
    }
    if let Some(var_379) = &input.role_arn {
        object.key("RoleArn").string(var_379);
    }
    if let Some(var_380) = &input.stopping_condition {
        let mut object_381 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_381,
            var_380,
        );
        object_381.finish();
    }
    if let Some(var_382) = &input.tags {
        let mut array_383 = object.key("Tags").start_array();
        for item_384 in var_382 {
            {
                let mut object_385 = array_383.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_385, item_384);
                object_385.finish();
            }
        }
        array_383.finish();
    }
}

pub fn serialize_structure_create_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMonitoringScheduleInput,
) {
    if let Some(var_386) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_386);
    }
    if let Some(var_387) = &input.monitoring_schedule_config {
        let mut object_388 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_schedule_config(&mut object_388, var_387);
        object_388.finish();
    }
    if let Some(var_389) = &input.tags {
        let mut array_390 = object.key("Tags").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_392, item_391);
                object_392.finish();
            }
        }
        array_390.finish();
    }
}

pub fn serialize_structure_create_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceInput,
) {
    if let Some(var_393) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_393);
    }
    if let Some(var_394) = &input.instance_type {
        object.key("InstanceType").string(var_394.as_str());
    }
    if let Some(var_395) = &input.subnet_id {
        object.key("SubnetId").string(var_395);
    }
    if let Some(var_396) = &input.security_group_ids {
        let mut array_397 = object.key("SecurityGroupIds").start_array();
        for item_398 in var_396 {
            {
                array_397.value().string(item_398);
            }
        }
        array_397.finish();
    }
    if let Some(var_399) = &input.role_arn {
        object.key("RoleArn").string(var_399);
    }
    if let Some(var_400) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_400);
    }
    if let Some(var_401) = &input.tags {
        let mut array_402 = object.key("Tags").start_array();
        for item_403 in var_401 {
            {
                let mut object_404 = array_402.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_404, item_403);
                object_404.finish();
            }
        }
        array_402.finish();
    }
    if let Some(var_405) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_405);
    }
    if let Some(var_406) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_406.as_str());
    }
    if let Some(var_407) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_407).into()),
        );
    }
    if let Some(var_408) = &input.accelerator_types {
        let mut array_409 = object.key("AcceleratorTypes").start_array();
        for item_410 in var_408 {
            {
                array_409.value().string(item_410.as_str());
            }
        }
        array_409.finish();
    }
    if let Some(var_411) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_411);
    }
    if let Some(var_412) = &input.additional_code_repositories {
        let mut array_413 = object.key("AdditionalCodeRepositories").start_array();
        for item_414 in var_412 {
            {
                array_413.value().string(item_414);
            }
        }
        array_413.finish();
    }
    if let Some(var_415) = &input.root_access {
        object.key("RootAccess").string(var_415.as_str());
    }
}

pub fn serialize_structure_create_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_416) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_416);
    }
    if let Some(var_417) = &input.on_create {
        let mut array_418 = object.key("OnCreate").start_array();
        for item_419 in var_417 {
            {
                let mut object_420 = array_418.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_420,
                    item_419,
                );
                object_420.finish();
            }
        }
        array_418.finish();
    }
    if let Some(var_421) = &input.on_start {
        let mut array_422 = object.key("OnStart").start_array();
        for item_423 in var_421 {
            {
                let mut object_424 = array_422.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_424,
                    item_423,
                );
                object_424.finish();
            }
        }
        array_422.finish();
    }
}

pub fn serialize_structure_create_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePipelineInput,
) {
    if let Some(var_425) = &input.pipeline_name {
        object.key("PipelineName").string(var_425);
    }
    if let Some(var_426) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_426);
    }
    if let Some(var_427) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_427);
    }
    if let Some(var_428) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_428);
    }
    if let Some(var_429) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_429);
    }
    if let Some(var_430) = &input.role_arn {
        object.key("RoleArn").string(var_430);
    }
    if let Some(var_431) = &input.tags {
        let mut array_432 = object.key("Tags").start_array();
        for item_433 in var_431 {
            {
                let mut object_434 = array_432.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_434, item_433);
                object_434.finish();
            }
        }
        array_432.finish();
    }
}

pub fn serialize_structure_create_presigned_domain_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedDomainUrlInput,
) {
    if let Some(var_435) = &input.domain_id {
        object.key("DomainId").string(var_435);
    }
    if let Some(var_436) = &input.user_profile_name {
        object.key("UserProfileName").string(var_436);
    }
    if let Some(var_437) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_437).into()),
        );
    }
    if let Some(var_438) = &input.expires_in_seconds {
        object.key("ExpiresInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_438).into()),
        );
    }
}

pub fn serialize_structure_create_presigned_notebook_instance_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedNotebookInstanceUrlInput,
) {
    if let Some(var_439) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_439);
    }
    if let Some(var_440) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_440).into()),
        );
    }
}

pub fn serialize_structure_create_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProcessingJobInput,
) {
    if let Some(var_441) = &input.processing_inputs {
        let mut array_442 = object.key("ProcessingInputs").start_array();
        for item_443 in var_441 {
            {
                let mut object_444 = array_442.value().start_object();
                crate::json_ser::serialize_structure_processing_input(&mut object_444, item_443);
                object_444.finish();
            }
        }
        array_442.finish();
    }
    if let Some(var_445) = &input.processing_output_config {
        let mut object_446 = object.key("ProcessingOutputConfig").start_object();
        crate::json_ser::serialize_structure_processing_output_config(&mut object_446, var_445);
        object_446.finish();
    }
    if let Some(var_447) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_447);
    }
    if let Some(var_448) = &input.processing_resources {
        let mut object_449 = object.key("ProcessingResources").start_object();
        crate::json_ser::serialize_structure_processing_resources(&mut object_449, var_448);
        object_449.finish();
    }
    if let Some(var_450) = &input.stopping_condition {
        let mut object_451 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_processing_stopping_condition(
            &mut object_451,
            var_450,
        );
        object_451.finish();
    }
    if let Some(var_452) = &input.app_specification {
        let mut object_453 = object.key("AppSpecification").start_object();
        crate::json_ser::serialize_structure_app_specification(&mut object_453, var_452);
        object_453.finish();
    }
    if let Some(var_454) = &input.environment {
        let mut object_455 = object.key("Environment").start_object();
        for (key_456, value_457) in var_454 {
            {
                object_455.key(key_456).string(value_457);
            }
        }
        object_455.finish();
    }
    if let Some(var_458) = &input.network_config {
        let mut object_459 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_network_config(&mut object_459, var_458);
        object_459.finish();
    }
    if let Some(var_460) = &input.role_arn {
        object.key("RoleArn").string(var_460);
    }
    if let Some(var_461) = &input.tags {
        let mut array_462 = object.key("Tags").start_array();
        for item_463 in var_461 {
            {
                let mut object_464 = array_462.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_464, item_463);
                object_464.finish();
            }
        }
        array_462.finish();
    }
    if let Some(var_465) = &input.experiment_config {
        let mut object_466 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_466, var_465);
        object_466.finish();
    }
}

pub fn serialize_structure_create_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) {
    if let Some(var_467) = &input.project_name {
        object.key("ProjectName").string(var_467);
    }
    if let Some(var_468) = &input.project_description {
        object.key("ProjectDescription").string(var_468);
    }
    if let Some(var_469) = &input.service_catalog_provisioning_details {
        let mut object_470 = object
            .key("ServiceCatalogProvisioningDetails")
            .start_object();
        crate::json_ser::serialize_structure_service_catalog_provisioning_details(
            &mut object_470,
            var_469,
        );
        object_470.finish();
    }
    if let Some(var_471) = &input.tags {
        let mut array_472 = object.key("Tags").start_array();
        for item_473 in var_471 {
            {
                let mut object_474 = array_472.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_474, item_473);
                object_474.finish();
            }
        }
        array_472.finish();
    }
}

pub fn serialize_structure_create_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrainingJobInput,
) {
    if let Some(var_475) = &input.training_job_name {
        object.key("TrainingJobName").string(var_475);
    }
    if let Some(var_476) = &input.hyper_parameters {
        let mut object_477 = object.key("HyperParameters").start_object();
        for (key_478, value_479) in var_476 {
            {
                object_477.key(key_478).string(value_479);
            }
        }
        object_477.finish();
    }
    if let Some(var_480) = &input.algorithm_specification {
        let mut object_481 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_algorithm_specification(&mut object_481, var_480);
        object_481.finish();
    }
    if let Some(var_482) = &input.role_arn {
        object.key("RoleArn").string(var_482);
    }
    if let Some(var_483) = &input.input_data_config {
        let mut array_484 = object.key("InputDataConfig").start_array();
        for item_485 in var_483 {
            {
                let mut object_486 = array_484.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_486, item_485);
                object_486.finish();
            }
        }
        array_484.finish();
    }
    if let Some(var_487) = &input.output_data_config {
        let mut object_488 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_488, var_487);
        object_488.finish();
    }
    if let Some(var_489) = &input.resource_config {
        let mut object_490 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_490, var_489);
        object_490.finish();
    }
    if let Some(var_491) = &input.vpc_config {
        let mut object_492 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_492, var_491);
        object_492.finish();
    }
    if let Some(var_493) = &input.stopping_condition {
        let mut object_494 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_494, var_493);
        object_494.finish();
    }
    if let Some(var_495) = &input.tags {
        let mut array_496 = object.key("Tags").start_array();
        for item_497 in var_495 {
            {
                let mut object_498 = array_496.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_498, item_497);
                object_498.finish();
            }
        }
        array_496.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_499) = &input.checkpoint_config {
        let mut object_500 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_checkpoint_config(&mut object_500, var_499);
        object_500.finish();
    }
    if let Some(var_501) = &input.debug_hook_config {
        let mut object_502 = object.key("DebugHookConfig").start_object();
        crate::json_ser::serialize_structure_debug_hook_config(&mut object_502, var_501);
        object_502.finish();
    }
    if let Some(var_503) = &input.debug_rule_configurations {
        let mut array_504 = object.key("DebugRuleConfigurations").start_array();
        for item_505 in var_503 {
            {
                let mut object_506 = array_504.value().start_object();
                crate::json_ser::serialize_structure_debug_rule_configuration(
                    &mut object_506,
                    item_505,
                );
                object_506.finish();
            }
        }
        array_504.finish();
    }
    if let Some(var_507) = &input.tensor_board_output_config {
        let mut object_508 = object.key("TensorBoardOutputConfig").start_object();
        crate::json_ser::serialize_structure_tensor_board_output_config(&mut object_508, var_507);
        object_508.finish();
    }
    if let Some(var_509) = &input.experiment_config {
        let mut object_510 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_510, var_509);
        object_510.finish();
    }
    if let Some(var_511) = &input.profiler_config {
        let mut object_512 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_profiler_config(&mut object_512, var_511);
        object_512.finish();
    }
    if let Some(var_513) = &input.profiler_rule_configurations {
        let mut array_514 = object.key("ProfilerRuleConfigurations").start_array();
        for item_515 in var_513 {
            {
                let mut object_516 = array_514.value().start_object();
                crate::json_ser::serialize_structure_profiler_rule_configuration(
                    &mut object_516,
                    item_515,
                );
                object_516.finish();
            }
        }
        array_514.finish();
    }
    if let Some(var_517) = &input.environment {
        let mut object_518 = object.key("Environment").start_object();
        for (key_519, value_520) in var_517 {
            {
                object_518.key(key_519).string(value_520);
            }
        }
        object_518.finish();
    }
    if let Some(var_521) = &input.retry_strategy {
        let mut object_522 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_522, var_521);
        object_522.finish();
    }
}

pub fn serialize_structure_create_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTransformJobInput,
) {
    if let Some(var_523) = &input.transform_job_name {
        object.key("TransformJobName").string(var_523);
    }
    if let Some(var_524) = &input.model_name {
        object.key("ModelName").string(var_524);
    }
    if let Some(var_525) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_525).into()),
        );
    }
    if let Some(var_526) = &input.model_client_config {
        let mut object_527 = object.key("ModelClientConfig").start_object();
        crate::json_ser::serialize_structure_model_client_config(&mut object_527, var_526);
        object_527.finish();
    }
    if let Some(var_528) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_528).into()),
        );
    }
    if let Some(var_529) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_529.as_str());
    }
    if let Some(var_530) = &input.environment {
        let mut object_531 = object.key("Environment").start_object();
        for (key_532, value_533) in var_530 {
            {
                object_531.key(key_532).string(value_533);
            }
        }
        object_531.finish();
    }
    if let Some(var_534) = &input.transform_input {
        let mut object_535 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_transform_input(&mut object_535, var_534);
        object_535.finish();
    }
    if let Some(var_536) = &input.transform_output {
        let mut object_537 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_transform_output(&mut object_537, var_536);
        object_537.finish();
    }
    if let Some(var_538) = &input.transform_resources {
        let mut object_539 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_transform_resources(&mut object_539, var_538);
        object_539.finish();
    }
    if let Some(var_540) = &input.data_processing {
        let mut object_541 = object.key("DataProcessing").start_object();
        crate::json_ser::serialize_structure_data_processing(&mut object_541, var_540);
        object_541.finish();
    }
    if let Some(var_542) = &input.tags {
        let mut array_543 = object.key("Tags").start_array();
        for item_544 in var_542 {
            {
                let mut object_545 = array_543.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_545, item_544);
                object_545.finish();
            }
        }
        array_543.finish();
    }
    if let Some(var_546) = &input.experiment_config {
        let mut object_547 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_547, var_546);
        object_547.finish();
    }
}

pub fn serialize_structure_create_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialInput,
) {
    if let Some(var_548) = &input.trial_name {
        object.key("TrialName").string(var_548);
    }
    if let Some(var_549) = &input.display_name {
        object.key("DisplayName").string(var_549);
    }
    if let Some(var_550) = &input.experiment_name {
        object.key("ExperimentName").string(var_550);
    }
    if let Some(var_551) = &input.metadata_properties {
        let mut object_552 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_552, var_551);
        object_552.finish();
    }
    if let Some(var_553) = &input.tags {
        let mut array_554 = object.key("Tags").start_array();
        for item_555 in var_553 {
            {
                let mut object_556 = array_554.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_556, item_555);
                object_556.finish();
            }
        }
        array_554.finish();
    }
}

pub fn serialize_structure_create_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialComponentInput,
) {
    if let Some(var_557) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_557);
    }
    if let Some(var_558) = &input.display_name {
        object.key("DisplayName").string(var_558);
    }
    if let Some(var_559) = &input.status {
        let mut object_560 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_trial_component_status(&mut object_560, var_559);
        object_560.finish();
    }
    if let Some(var_561) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_561, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_562) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_562, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_563) = &input.parameters {
        let mut object_564 = object.key("Parameters").start_object();
        for (key_565, value_566) in var_563 {
            {
                let mut object_567 = object_564.key(key_565).start_object();
                crate::json_ser::serialize_union_trial_component_parameter_value(
                    &mut object_567,
                    value_566,
                );
                object_567.finish();
            }
        }
        object_564.finish();
    }
    if let Some(var_568) = &input.input_artifacts {
        let mut object_569 = object.key("InputArtifacts").start_object();
        for (key_570, value_571) in var_568 {
            {
                let mut object_572 = object_569.key(key_570).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_572,
                    value_571,
                );
                object_572.finish();
            }
        }
        object_569.finish();
    }
    if let Some(var_573) = &input.output_artifacts {
        let mut object_574 = object.key("OutputArtifacts").start_object();
        for (key_575, value_576) in var_573 {
            {
                let mut object_577 = object_574.key(key_575).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_577,
                    value_576,
                );
                object_577.finish();
            }
        }
        object_574.finish();
    }
    if let Some(var_578) = &input.metadata_properties {
        let mut object_579 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_579, var_578);
        object_579.finish();
    }
    if let Some(var_580) = &input.tags {
        let mut array_581 = object.key("Tags").start_array();
        for item_582 in var_580 {
            {
                let mut object_583 = array_581.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_583, item_582);
                object_583.finish();
            }
        }
        array_581.finish();
    }
}

pub fn serialize_structure_create_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserProfileInput,
) {
    if let Some(var_584) = &input.domain_id {
        object.key("DomainId").string(var_584);
    }
    if let Some(var_585) = &input.user_profile_name {
        object.key("UserProfileName").string(var_585);
    }
    if let Some(var_586) = &input.single_sign_on_user_identifier {
        object.key("SingleSignOnUserIdentifier").string(var_586);
    }
    if let Some(var_587) = &input.single_sign_on_user_value {
        object.key("SingleSignOnUserValue").string(var_587);
    }
    if let Some(var_588) = &input.tags {
        let mut array_589 = object.key("Tags").start_array();
        for item_590 in var_588 {
            {
                let mut object_591 = array_589.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_591, item_590);
                object_591.finish();
            }
        }
        array_589.finish();
    }
    if let Some(var_592) = &input.user_settings {
        let mut object_593 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_593, var_592);
        object_593.finish();
    }
}

pub fn serialize_structure_create_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkforceInput,
) {
    if let Some(var_594) = &input.cognito_config {
        let mut object_595 = object.key("CognitoConfig").start_object();
        crate::json_ser::serialize_structure_cognito_config(&mut object_595, var_594);
        object_595.finish();
    }
    if let Some(var_596) = &input.oidc_config {
        let mut object_597 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_oidc_config(&mut object_597, var_596);
        object_597.finish();
    }
    if let Some(var_598) = &input.source_ip_config {
        let mut object_599 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_source_ip_config(&mut object_599, var_598);
        object_599.finish();
    }
    if let Some(var_600) = &input.workforce_name {
        object.key("WorkforceName").string(var_600);
    }
    if let Some(var_601) = &input.tags {
        let mut array_602 = object.key("Tags").start_array();
        for item_603 in var_601 {
            {
                let mut object_604 = array_602.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_604, item_603);
                object_604.finish();
            }
        }
        array_602.finish();
    }
}

pub fn serialize_structure_create_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkteamInput,
) {
    if let Some(var_605) = &input.workteam_name {
        object.key("WorkteamName").string(var_605);
    }
    if let Some(var_606) = &input.workforce_name {
        object.key("WorkforceName").string(var_606);
    }
    if let Some(var_607) = &input.member_definitions {
        let mut array_608 = object.key("MemberDefinitions").start_array();
        for item_609 in var_607 {
            {
                let mut object_610 = array_608.value().start_object();
                crate::json_ser::serialize_structure_member_definition(&mut object_610, item_609);
                object_610.finish();
            }
        }
        array_608.finish();
    }
    if let Some(var_611) = &input.description {
        object.key("Description").string(var_611);
    }
    if let Some(var_612) = &input.notification_configuration {
        let mut object_613 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_notification_configuration(&mut object_613, var_612);
        object_613.finish();
    }
    if let Some(var_614) = &input.tags {
        let mut array_615 = object.key("Tags").start_array();
        for item_616 in var_614 {
            {
                let mut object_617 = array_615.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_617, item_616);
                object_617.finish();
            }
        }
        array_615.finish();
    }
}

pub fn serialize_structure_delete_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActionInput,
) {
    if let Some(var_618) = &input.action_name {
        object.key("ActionName").string(var_618);
    }
}

pub fn serialize_structure_delete_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlgorithmInput,
) {
    if let Some(var_619) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_619);
    }
}

pub fn serialize_structure_delete_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppInput,
) {
    if let Some(var_620) = &input.domain_id {
        object.key("DomainId").string(var_620);
    }
    if let Some(var_621) = &input.user_profile_name {
        object.key("UserProfileName").string(var_621);
    }
    if let Some(var_622) = &input.app_type {
        object.key("AppType").string(var_622.as_str());
    }
    if let Some(var_623) = &input.app_name {
        object.key("AppName").string(var_623);
    }
}

pub fn serialize_structure_delete_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppImageConfigInput,
) {
    if let Some(var_624) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_624);
    }
}

pub fn serialize_structure_delete_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteArtifactInput,
) {
    if let Some(var_625) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_625);
    }
    if let Some(var_626) = &input.source {
        let mut object_627 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_artifact_source(&mut object_627, var_626);
        object_627.finish();
    }
}

pub fn serialize_structure_delete_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) {
    if let Some(var_628) = &input.source_arn {
        object.key("SourceArn").string(var_628);
    }
    if let Some(var_629) = &input.destination_arn {
        object.key("DestinationArn").string(var_629);
    }
}

pub fn serialize_structure_delete_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCodeRepositoryInput,
) {
    if let Some(var_630) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_630);
    }
}

pub fn serialize_structure_delete_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContextInput,
) {
    if let Some(var_631) = &input.context_name {
        object.key("ContextName").string(var_631);
    }
}

pub fn serialize_structure_delete_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataQualityJobDefinitionInput,
) {
    if let Some(var_632) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_632);
    }
}

pub fn serialize_structure_delete_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeviceFleetInput,
) {
    if let Some(var_633) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_633);
    }
}

pub fn serialize_structure_delete_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) {
    if let Some(var_634) = &input.domain_id {
        object.key("DomainId").string(var_634);
    }
    if let Some(var_635) = &input.retention_policy {
        let mut object_636 = object.key("RetentionPolicy").start_object();
        crate::json_ser::serialize_structure_retention_policy(&mut object_636, var_635);
        object_636.finish();
    }
}

pub fn serialize_structure_delete_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) {
    if let Some(var_637) = &input.endpoint_name {
        object.key("EndpointName").string(var_637);
    }
}

pub fn serialize_structure_delete_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointConfigInput,
) {
    if let Some(var_638) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_638);
    }
}

pub fn serialize_structure_delete_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperimentInput,
) {
    if let Some(var_639) = &input.experiment_name {
        object.key("ExperimentName").string(var_639);
    }
}

pub fn serialize_structure_delete_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFeatureGroupInput,
) {
    if let Some(var_640) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_640);
    }
}

pub fn serialize_structure_delete_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFlowDefinitionInput,
) {
    if let Some(var_641) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_641);
    }
}

pub fn serialize_structure_delete_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteHumanTaskUiInput,
) {
    if let Some(var_642) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_642);
    }
}

pub fn serialize_structure_delete_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) {
    if let Some(var_643) = &input.image_name {
        object.key("ImageName").string(var_643);
    }
}

pub fn serialize_structure_delete_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageVersionInput,
) {
    if let Some(var_644) = &input.image_name {
        object.key("ImageName").string(var_644);
    }
    if let Some(var_645) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_645).into()),
        );
    }
}

pub fn serialize_structure_delete_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelInput,
) {
    if let Some(var_646) = &input.model_name {
        object.key("ModelName").string(var_646);
    }
}

pub fn serialize_structure_delete_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelBiasJobDefinitionInput,
) {
    if let Some(var_647) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_647);
    }
}

pub fn serialize_structure_delete_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_648) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_648);
    }
}

pub fn serialize_structure_delete_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageInput,
) {
    if let Some(var_649) = &input.model_package_name {
        object.key("ModelPackageName").string(var_649);
    }
}

pub fn serialize_structure_delete_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupInput,
) {
    if let Some(var_650) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_650);
    }
}

pub fn serialize_structure_delete_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupPolicyInput,
) {
    if let Some(var_651) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_651);
    }
}

pub fn serialize_structure_delete_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelQualityJobDefinitionInput,
) {
    if let Some(var_652) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_652);
    }
}

pub fn serialize_structure_delete_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMonitoringScheduleInput,
) {
    if let Some(var_653) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_653);
    }
}

pub fn serialize_structure_delete_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceInput,
) {
    if let Some(var_654) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_654);
    }
}

pub fn serialize_structure_delete_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_655) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_655);
    }
}

pub fn serialize_structure_delete_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePipelineInput,
) {
    if let Some(var_656) = &input.pipeline_name {
        object.key("PipelineName").string(var_656);
    }
    if let Some(var_657) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_657);
    }
}

pub fn serialize_structure_delete_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) {
    if let Some(var_658) = &input.project_name {
        object.key("ProjectName").string(var_658);
    }
}

pub fn serialize_structure_delete_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsInput,
) {
    if let Some(var_659) = &input.resource_arn {
        object.key("ResourceArn").string(var_659);
    }
    if let Some(var_660) = &input.tag_keys {
        let mut array_661 = object.key("TagKeys").start_array();
        for item_662 in var_660 {
            {
                array_661.value().string(item_662);
            }
        }
        array_661.finish();
    }
}

pub fn serialize_structure_delete_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialInput,
) {
    if let Some(var_663) = &input.trial_name {
        object.key("TrialName").string(var_663);
    }
}

pub fn serialize_structure_delete_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialComponentInput,
) {
    if let Some(var_664) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_664);
    }
}

pub fn serialize_structure_delete_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserProfileInput,
) {
    if let Some(var_665) = &input.domain_id {
        object.key("DomainId").string(var_665);
    }
    if let Some(var_666) = &input.user_profile_name {
        object.key("UserProfileName").string(var_666);
    }
}

pub fn serialize_structure_delete_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkforceInput,
) {
    if let Some(var_667) = &input.workforce_name {
        object.key("WorkforceName").string(var_667);
    }
}

pub fn serialize_structure_delete_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkteamInput,
) {
    if let Some(var_668) = &input.workteam_name {
        object.key("WorkteamName").string(var_668);
    }
}

pub fn serialize_structure_deregister_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterDevicesInput,
) {
    if let Some(var_669) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_669);
    }
    if let Some(var_670) = &input.device_names {
        let mut array_671 = object.key("DeviceNames").start_array();
        for item_672 in var_670 {
            {
                array_671.value().string(item_672);
            }
        }
        array_671.finish();
    }
}

pub fn serialize_structure_describe_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionInput,
) {
    if let Some(var_673) = &input.action_name {
        object.key("ActionName").string(var_673);
    }
}

pub fn serialize_structure_describe_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlgorithmInput,
) {
    if let Some(var_674) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_674);
    }
}

pub fn serialize_structure_describe_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppInput,
) {
    if let Some(var_675) = &input.domain_id {
        object.key("DomainId").string(var_675);
    }
    if let Some(var_676) = &input.user_profile_name {
        object.key("UserProfileName").string(var_676);
    }
    if let Some(var_677) = &input.app_type {
        object.key("AppType").string(var_677.as_str());
    }
    if let Some(var_678) = &input.app_name {
        object.key("AppName").string(var_678);
    }
}

pub fn serialize_structure_describe_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppImageConfigInput,
) {
    if let Some(var_679) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_679);
    }
}

pub fn serialize_structure_describe_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeArtifactInput,
) {
    if let Some(var_680) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_680);
    }
}

pub fn serialize_structure_describe_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoMLJobInput,
) {
    if let Some(var_681) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_681);
    }
}

pub fn serialize_structure_describe_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCodeRepositoryInput,
) {
    if let Some(var_682) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_682);
    }
}

pub fn serialize_structure_describe_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCompilationJobInput,
) {
    if let Some(var_683) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_683);
    }
}

pub fn serialize_structure_describe_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContextInput,
) {
    if let Some(var_684) = &input.context_name {
        object.key("ContextName").string(var_684);
    }
}

pub fn serialize_structure_describe_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataQualityJobDefinitionInput,
) {
    if let Some(var_685) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_685);
    }
}

pub fn serialize_structure_describe_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceInput,
) {
    if let Some(var_686) = &input.next_token {
        object.key("NextToken").string(var_686);
    }
    if let Some(var_687) = &input.device_name {
        object.key("DeviceName").string(var_687);
    }
    if let Some(var_688) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_688);
    }
}

pub fn serialize_structure_describe_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceFleetInput,
) {
    if let Some(var_689) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_689);
    }
}

pub fn serialize_structure_describe_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainInput,
) {
    if let Some(var_690) = &input.domain_id {
        object.key("DomainId").string(var_690);
    }
}

pub fn serialize_structure_describe_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgePackagingJobInput,
) {
    if let Some(var_691) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_691);
    }
}

pub fn serialize_structure_describe_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) {
    if let Some(var_692) = &input.endpoint_name {
        object.key("EndpointName").string(var_692);
    }
}

pub fn serialize_structure_describe_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointConfigInput,
) {
    if let Some(var_693) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_693);
    }
}

pub fn serialize_structure_describe_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperimentInput,
) {
    if let Some(var_694) = &input.experiment_name {
        object.key("ExperimentName").string(var_694);
    }
}

pub fn serialize_structure_describe_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureGroupInput,
) {
    if let Some(var_695) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_695);
    }
    if let Some(var_696) = &input.next_token {
        object.key("NextToken").string(var_696);
    }
}

pub fn serialize_structure_describe_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowDefinitionInput,
) {
    if let Some(var_697) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_697);
    }
}

pub fn serialize_structure_describe_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHumanTaskUiInput,
) {
    if let Some(var_698) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_698);
    }
}

pub fn serialize_structure_describe_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHyperParameterTuningJobInput,
) {
    if let Some(var_699) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_699);
    }
}

pub fn serialize_structure_describe_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageInput,
) {
    if let Some(var_700) = &input.image_name {
        object.key("ImageName").string(var_700);
    }
}

pub fn serialize_structure_describe_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageVersionInput,
) {
    if let Some(var_701) = &input.image_name {
        object.key("ImageName").string(var_701);
    }
    if let Some(var_702) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_702).into()),
        );
    }
}

pub fn serialize_structure_describe_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLabelingJobInput,
) {
    if let Some(var_703) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_703);
    }
}

pub fn serialize_structure_describe_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelInput,
) {
    if let Some(var_704) = &input.model_name {
        object.key("ModelName").string(var_704);
    }
}

pub fn serialize_structure_describe_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelBiasJobDefinitionInput,
) {
    if let Some(var_705) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_705);
    }
}

pub fn serialize_structure_describe_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_706) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_706);
    }
}

pub fn serialize_structure_describe_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageInput,
) {
    if let Some(var_707) = &input.model_package_name {
        object.key("ModelPackageName").string(var_707);
    }
}

pub fn serialize_structure_describe_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageGroupInput,
) {
    if let Some(var_708) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_708);
    }
}

pub fn serialize_structure_describe_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelQualityJobDefinitionInput,
) {
    if let Some(var_709) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_709);
    }
}

pub fn serialize_structure_describe_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMonitoringScheduleInput,
) {
    if let Some(var_710) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_710);
    }
}

pub fn serialize_structure_describe_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceInput,
) {
    if let Some(var_711) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_711);
    }
}

pub fn serialize_structure_describe_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_712) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_712);
    }
}

pub fn serialize_structure_describe_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineInput,
) {
    if let Some(var_713) = &input.pipeline_name {
        object.key("PipelineName").string(var_713);
    }
}

pub fn serialize_structure_describe_pipeline_definition_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineDefinitionForExecutionInput,
) {
    if let Some(var_714) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_714);
    }
}

pub fn serialize_structure_describe_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineExecutionInput,
) {
    if let Some(var_715) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_715);
    }
}

pub fn serialize_structure_describe_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProcessingJobInput,
) {
    if let Some(var_716) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_716);
    }
}

pub fn serialize_structure_describe_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectInput,
) {
    if let Some(var_717) = &input.project_name {
        object.key("ProjectName").string(var_717);
    }
}

pub fn serialize_structure_describe_subscribed_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSubscribedWorkteamInput,
) {
    if let Some(var_718) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_718);
    }
}

pub fn serialize_structure_describe_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrainingJobInput,
) {
    if let Some(var_719) = &input.training_job_name {
        object.key("TrainingJobName").string(var_719);
    }
}

pub fn serialize_structure_describe_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTransformJobInput,
) {
    if let Some(var_720) = &input.transform_job_name {
        object.key("TransformJobName").string(var_720);
    }
}

pub fn serialize_structure_describe_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialInput,
) {
    if let Some(var_721) = &input.trial_name {
        object.key("TrialName").string(var_721);
    }
}

pub fn serialize_structure_describe_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialComponentInput,
) {
    if let Some(var_722) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_722);
    }
}

pub fn serialize_structure_describe_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserProfileInput,
) {
    if let Some(var_723) = &input.domain_id {
        object.key("DomainId").string(var_723);
    }
    if let Some(var_724) = &input.user_profile_name {
        object.key("UserProfileName").string(var_724);
    }
}

pub fn serialize_structure_describe_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkforceInput,
) {
    if let Some(var_725) = &input.workforce_name {
        object.key("WorkforceName").string(var_725);
    }
}

pub fn serialize_structure_describe_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkteamInput,
) {
    if let Some(var_726) = &input.workteam_name {
        object.key("WorkteamName").string(var_726);
    }
}

pub fn serialize_structure_disassociate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTrialComponentInput,
) {
    if let Some(var_727) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_727);
    }
    if let Some(var_728) = &input.trial_name {
        object.key("TrialName").string(var_728);
    }
}

pub fn serialize_structure_get_device_fleet_report_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceFleetReportInput,
) {
    if let Some(var_729) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_729);
    }
}

pub fn serialize_structure_get_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelPackageGroupPolicyInput,
) {
    if let Some(var_730) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_730);
    }
}

pub fn serialize_structure_get_search_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSearchSuggestionsInput,
) {
    if let Some(var_731) = &input.resource {
        object.key("Resource").string(var_731.as_str());
    }
    if let Some(var_732) = &input.suggestion_query {
        let mut object_733 = object.key("SuggestionQuery").start_object();
        crate::json_ser::serialize_structure_suggestion_query(&mut object_733, var_732);
        object_733.finish();
    }
}

pub fn serialize_structure_list_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListActionsInput,
) {
    if let Some(var_734) = &input.source_uri {
        object.key("SourceUri").string(var_734);
    }
    if let Some(var_735) = &input.action_type {
        object.key("ActionType").string(var_735);
    }
    if let Some(var_736) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_736, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_737) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_737, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_738) = &input.sort_by {
        object.key("SortBy").string(var_738.as_str());
    }
    if let Some(var_739) = &input.sort_order {
        object.key("SortOrder").string(var_739.as_str());
    }
    if let Some(var_740) = &input.next_token {
        object.key("NextToken").string(var_740);
    }
    if let Some(var_741) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_741).into()),
        );
    }
}

pub fn serialize_structure_list_algorithms_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlgorithmsInput,
) {
    if let Some(var_742) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_742, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_743) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_743, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_744) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_744).into()),
        );
    }
    if let Some(var_745) = &input.name_contains {
        object.key("NameContains").string(var_745);
    }
    if let Some(var_746) = &input.next_token {
        object.key("NextToken").string(var_746);
    }
    if let Some(var_747) = &input.sort_by {
        object.key("SortBy").string(var_747.as_str());
    }
    if let Some(var_748) = &input.sort_order {
        object.key("SortOrder").string(var_748.as_str());
    }
}

pub fn serialize_structure_list_app_image_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppImageConfigsInput,
) {
    if let Some(var_749) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_749).into()),
        );
    }
    if let Some(var_750) = &input.next_token {
        object.key("NextToken").string(var_750);
    }
    if let Some(var_751) = &input.name_contains {
        object.key("NameContains").string(var_751);
    }
    if let Some(var_752) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_752, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_753) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_753, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_754) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .instant(var_754, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_755) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .instant(var_755, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_756) = &input.sort_by {
        object.key("SortBy").string(var_756.as_str());
    }
    if let Some(var_757) = &input.sort_order {
        object.key("SortOrder").string(var_757.as_str());
    }
}

pub fn serialize_structure_list_apps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppsInput,
) {
    if let Some(var_758) = &input.next_token {
        object.key("NextToken").string(var_758);
    }
    if let Some(var_759) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_759).into()),
        );
    }
    if let Some(var_760) = &input.sort_order {
        object.key("SortOrder").string(var_760.as_str());
    }
    if let Some(var_761) = &input.sort_by {
        object.key("SortBy").string(var_761.as_str());
    }
    if let Some(var_762) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_762);
    }
    if let Some(var_763) = &input.user_profile_name_equals {
        object.key("UserProfileNameEquals").string(var_763);
    }
}

pub fn serialize_structure_list_artifacts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListArtifactsInput,
) {
    if let Some(var_764) = &input.source_uri {
        object.key("SourceUri").string(var_764);
    }
    if let Some(var_765) = &input.artifact_type {
        object.key("ArtifactType").string(var_765);
    }
    if let Some(var_766) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_766, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_767) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_767, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_768) = &input.sort_by {
        object.key("SortBy").string(var_768.as_str());
    }
    if let Some(var_769) = &input.sort_order {
        object.key("SortOrder").string(var_769.as_str());
    }
    if let Some(var_770) = &input.next_token {
        object.key("NextToken").string(var_770);
    }
    if let Some(var_771) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_771).into()),
        );
    }
}

pub fn serialize_structure_list_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) {
    if let Some(var_772) = &input.source_arn {
        object.key("SourceArn").string(var_772);
    }
    if let Some(var_773) = &input.destination_arn {
        object.key("DestinationArn").string(var_773);
    }
    if let Some(var_774) = &input.source_type {
        object.key("SourceType").string(var_774);
    }
    if let Some(var_775) = &input.destination_type {
        object.key("DestinationType").string(var_775);
    }
    if let Some(var_776) = &input.association_type {
        object.key("AssociationType").string(var_776.as_str());
    }
    if let Some(var_777) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_777, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_778) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_778, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_779) = &input.sort_by {
        object.key("SortBy").string(var_779.as_str());
    }
    if let Some(var_780) = &input.sort_order {
        object.key("SortOrder").string(var_780.as_str());
    }
    if let Some(var_781) = &input.next_token {
        object.key("NextToken").string(var_781);
    }
    if let Some(var_782) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_782).into()),
        );
    }
}

pub fn serialize_structure_list_auto_ml_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutoMLJobsInput,
) {
    if let Some(var_783) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_783, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_784) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_784, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_785) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_785, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_786) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_786, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_787) = &input.name_contains {
        object.key("NameContains").string(var_787);
    }
    if let Some(var_788) = &input.status_equals {
        object.key("StatusEquals").string(var_788.as_str());
    }
    if let Some(var_789) = &input.sort_order {
        object.key("SortOrder").string(var_789.as_str());
    }
    if let Some(var_790) = &input.sort_by {
        object.key("SortBy").string(var_790.as_str());
    }
    if let Some(var_791) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_791).into()),
        );
    }
    if let Some(var_792) = &input.next_token {
        object.key("NextToken").string(var_792);
    }
}

pub fn serialize_structure_list_candidates_for_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCandidatesForAutoMLJobInput,
) {
    if let Some(var_793) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_793);
    }
    if let Some(var_794) = &input.status_equals {
        object.key("StatusEquals").string(var_794.as_str());
    }
    if let Some(var_795) = &input.candidate_name_equals {
        object.key("CandidateNameEquals").string(var_795);
    }
    if let Some(var_796) = &input.sort_order {
        object.key("SortOrder").string(var_796.as_str());
    }
    if let Some(var_797) = &input.sort_by {
        object.key("SortBy").string(var_797.as_str());
    }
    if let Some(var_798) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_798).into()),
        );
    }
    if let Some(var_799) = &input.next_token {
        object.key("NextToken").string(var_799);
    }
}

pub fn serialize_structure_list_code_repositories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCodeRepositoriesInput,
) {
    if let Some(var_800) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_800, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_801) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_801, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_802) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_802, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_803) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_803, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_804) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_804).into()),
        );
    }
    if let Some(var_805) = &input.name_contains {
        object.key("NameContains").string(var_805);
    }
    if let Some(var_806) = &input.next_token {
        object.key("NextToken").string(var_806);
    }
    if let Some(var_807) = &input.sort_by {
        object.key("SortBy").string(var_807.as_str());
    }
    if let Some(var_808) = &input.sort_order {
        object.key("SortOrder").string(var_808.as_str());
    }
}

pub fn serialize_structure_list_compilation_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCompilationJobsInput,
) {
    if let Some(var_809) = &input.next_token {
        object.key("NextToken").string(var_809);
    }
    if let Some(var_810) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_810).into()),
        );
    }
    if let Some(var_811) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_811, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_812) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_812, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_813) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_813, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_814) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_814, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_815) = &input.name_contains {
        object.key("NameContains").string(var_815);
    }
    if let Some(var_816) = &input.status_equals {
        object.key("StatusEquals").string(var_816.as_str());
    }
    if let Some(var_817) = &input.sort_by {
        object.key("SortBy").string(var_817.as_str());
    }
    if let Some(var_818) = &input.sort_order {
        object.key("SortOrder").string(var_818.as_str());
    }
}

pub fn serialize_structure_list_contexts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContextsInput,
) {
    if let Some(var_819) = &input.source_uri {
        object.key("SourceUri").string(var_819);
    }
    if let Some(var_820) = &input.context_type {
        object.key("ContextType").string(var_820);
    }
    if let Some(var_821) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_821, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_822) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_822, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_823) = &input.sort_by {
        object.key("SortBy").string(var_823.as_str());
    }
    if let Some(var_824) = &input.sort_order {
        object.key("SortOrder").string(var_824.as_str());
    }
    if let Some(var_825) = &input.next_token {
        object.key("NextToken").string(var_825);
    }
    if let Some(var_826) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_826).into()),
        );
    }
}

pub fn serialize_structure_list_data_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataQualityJobDefinitionsInput,
) {
    if let Some(var_827) = &input.endpoint_name {
        object.key("EndpointName").string(var_827);
    }
    if let Some(var_828) = &input.sort_by {
        object.key("SortBy").string(var_828.as_str());
    }
    if let Some(var_829) = &input.sort_order {
        object.key("SortOrder").string(var_829.as_str());
    }
    if let Some(var_830) = &input.next_token {
        object.key("NextToken").string(var_830);
    }
    if let Some(var_831) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_831).into()),
        );
    }
    if let Some(var_832) = &input.name_contains {
        object.key("NameContains").string(var_832);
    }
    if let Some(var_833) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_833, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_834) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_834, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_device_fleets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeviceFleetsInput,
) {
    if let Some(var_835) = &input.next_token {
        object.key("NextToken").string(var_835);
    }
    if let Some(var_836) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_836).into()),
        );
    }
    if let Some(var_837) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_837, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_838) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_838, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_839) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_839, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_840) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_840, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_841) = &input.name_contains {
        object.key("NameContains").string(var_841);
    }
    if let Some(var_842) = &input.sort_by {
        object.key("SortBy").string(var_842.as_str());
    }
    if let Some(var_843) = &input.sort_order {
        object.key("SortOrder").string(var_843.as_str());
    }
}

pub fn serialize_structure_list_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) {
    if let Some(var_844) = &input.next_token {
        object.key("NextToken").string(var_844);
    }
    if let Some(var_845) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_845).into()),
        );
    }
    if let Some(var_846) = &input.latest_heartbeat_after {
        object
            .key("LatestHeartbeatAfter")
            .instant(var_846, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_847) = &input.model_name {
        object.key("ModelName").string(var_847);
    }
    if let Some(var_848) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_848);
    }
}

pub fn serialize_structure_list_domains_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) {
    if let Some(var_849) = &input.next_token {
        object.key("NextToken").string(var_849);
    }
    if let Some(var_850) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_850).into()),
        );
    }
}

pub fn serialize_structure_list_edge_packaging_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgePackagingJobsInput,
) {
    if let Some(var_851) = &input.next_token {
        object.key("NextToken").string(var_851);
    }
    if let Some(var_852) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_852).into()),
        );
    }
    if let Some(var_853) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_853, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_854) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_854, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_855) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_855, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_856) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_856, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_857) = &input.name_contains {
        object.key("NameContains").string(var_857);
    }
    if let Some(var_858) = &input.model_name_contains {
        object.key("ModelNameContains").string(var_858);
    }
    if let Some(var_859) = &input.status_equals {
        object.key("StatusEquals").string(var_859.as_str());
    }
    if let Some(var_860) = &input.sort_by {
        object.key("SortBy").string(var_860.as_str());
    }
    if let Some(var_861) = &input.sort_order {
        object.key("SortOrder").string(var_861.as_str());
    }
}

pub fn serialize_structure_list_endpoint_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointConfigsInput,
) {
    if let Some(var_862) = &input.sort_by {
        object.key("SortBy").string(var_862.as_str());
    }
    if let Some(var_863) = &input.sort_order {
        object.key("SortOrder").string(var_863.as_str());
    }
    if let Some(var_864) = &input.next_token {
        object.key("NextToken").string(var_864);
    }
    if let Some(var_865) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_865).into()),
        );
    }
    if let Some(var_866) = &input.name_contains {
        object.key("NameContains").string(var_866);
    }
    if let Some(var_867) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_867, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_868) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_868, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) {
    if let Some(var_869) = &input.sort_by {
        object.key("SortBy").string(var_869.as_str());
    }
    if let Some(var_870) = &input.sort_order {
        object.key("SortOrder").string(var_870.as_str());
    }
    if let Some(var_871) = &input.next_token {
        object.key("NextToken").string(var_871);
    }
    if let Some(var_872) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_872).into()),
        );
    }
    if let Some(var_873) = &input.name_contains {
        object.key("NameContains").string(var_873);
    }
    if let Some(var_874) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_874, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_875) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_875, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_876) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_876, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_877) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_877, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_878) = &input.status_equals {
        object.key("StatusEquals").string(var_878.as_str());
    }
}

pub fn serialize_structure_list_experiments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperimentsInput,
) {
    if let Some(var_879) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_879, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_880) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_880, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_881) = &input.sort_by {
        object.key("SortBy").string(var_881.as_str());
    }
    if let Some(var_882) = &input.sort_order {
        object.key("SortOrder").string(var_882.as_str());
    }
    if let Some(var_883) = &input.next_token {
        object.key("NextToken").string(var_883);
    }
    if let Some(var_884) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_884).into()),
        );
    }
}

pub fn serialize_structure_list_feature_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFeatureGroupsInput,
) {
    if let Some(var_885) = &input.name_contains {
        object.key("NameContains").string(var_885);
    }
    if let Some(var_886) = &input.feature_group_status_equals {
        object
            .key("FeatureGroupStatusEquals")
            .string(var_886.as_str());
    }
    if let Some(var_887) = &input.offline_store_status_equals {
        object
            .key("OfflineStoreStatusEquals")
            .string(var_887.as_str());
    }
    if let Some(var_888) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_888, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_889) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_889, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_890) = &input.sort_order {
        object.key("SortOrder").string(var_890.as_str());
    }
    if let Some(var_891) = &input.sort_by {
        object.key("SortBy").string(var_891.as_str());
    }
    if let Some(var_892) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_892).into()),
        );
    }
    if let Some(var_893) = &input.next_token {
        object.key("NextToken").string(var_893);
    }
}

pub fn serialize_structure_list_flow_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFlowDefinitionsInput,
) {
    if let Some(var_894) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_894, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_895) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_895, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_896) = &input.sort_order {
        object.key("SortOrder").string(var_896.as_str());
    }
    if let Some(var_897) = &input.next_token {
        object.key("NextToken").string(var_897);
    }
    if let Some(var_898) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_898).into()),
        );
    }
}

pub fn serialize_structure_list_human_task_uis_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHumanTaskUisInput,
) {
    if let Some(var_899) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_899, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_900) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_900, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_901) = &input.sort_order {
        object.key("SortOrder").string(var_901.as_str());
    }
    if let Some(var_902) = &input.next_token {
        object.key("NextToken").string(var_902);
    }
    if let Some(var_903) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_903).into()),
        );
    }
}

pub fn serialize_structure_list_hyper_parameter_tuning_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHyperParameterTuningJobsInput,
) {
    if let Some(var_904) = &input.next_token {
        object.key("NextToken").string(var_904);
    }
    if let Some(var_905) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_905).into()),
        );
    }
    if let Some(var_906) = &input.sort_by {
        object.key("SortBy").string(var_906.as_str());
    }
    if let Some(var_907) = &input.sort_order {
        object.key("SortOrder").string(var_907.as_str());
    }
    if let Some(var_908) = &input.name_contains {
        object.key("NameContains").string(var_908);
    }
    if let Some(var_909) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_909, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_910) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_910, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_911) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_911, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_912) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_912, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_913) = &input.status_equals {
        object.key("StatusEquals").string(var_913.as_str());
    }
}

pub fn serialize_structure_list_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) {
    if let Some(var_914) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_914, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_915) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_915, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_916) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_916, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_917) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_917, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_918) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_918).into()),
        );
    }
    if let Some(var_919) = &input.name_contains {
        object.key("NameContains").string(var_919);
    }
    if let Some(var_920) = &input.next_token {
        object.key("NextToken").string(var_920);
    }
    if let Some(var_921) = &input.sort_by {
        object.key("SortBy").string(var_921.as_str());
    }
    if let Some(var_922) = &input.sort_order {
        object.key("SortOrder").string(var_922.as_str());
    }
}

pub fn serialize_structure_list_image_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageVersionsInput,
) {
    if let Some(var_923) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_923, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_924) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_924, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_925) = &input.image_name {
        object.key("ImageName").string(var_925);
    }
    if let Some(var_926) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_926, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_927) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_927, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_928) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_928).into()),
        );
    }
    if let Some(var_929) = &input.next_token {
        object.key("NextToken").string(var_929);
    }
    if let Some(var_930) = &input.sort_by {
        object.key("SortBy").string(var_930.as_str());
    }
    if let Some(var_931) = &input.sort_order {
        object.key("SortOrder").string(var_931.as_str());
    }
}

pub fn serialize_structure_list_labeling_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsInput,
) {
    if let Some(var_932) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_932, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_933) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_933, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_934) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_934, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_935) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_935, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_936) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_936).into()),
        );
    }
    if let Some(var_937) = &input.next_token {
        object.key("NextToken").string(var_937);
    }
    if let Some(var_938) = &input.name_contains {
        object.key("NameContains").string(var_938);
    }
    if let Some(var_939) = &input.sort_by {
        object.key("SortBy").string(var_939.as_str());
    }
    if let Some(var_940) = &input.sort_order {
        object.key("SortOrder").string(var_940.as_str());
    }
    if let Some(var_941) = &input.status_equals {
        object.key("StatusEquals").string(var_941.as_str());
    }
}

pub fn serialize_structure_list_labeling_jobs_for_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsForWorkteamInput,
) {
    if let Some(var_942) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_942);
    }
    if let Some(var_943) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_943).into()),
        );
    }
    if let Some(var_944) = &input.next_token {
        object.key("NextToken").string(var_944);
    }
    if let Some(var_945) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_945, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_946) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_946, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_947) = &input.job_reference_code_contains {
        object.key("JobReferenceCodeContains").string(var_947);
    }
    if let Some(var_948) = &input.sort_by {
        object.key("SortBy").string(var_948.as_str());
    }
    if let Some(var_949) = &input.sort_order {
        object.key("SortOrder").string(var_949.as_str());
    }
}

pub fn serialize_structure_list_model_bias_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelBiasJobDefinitionsInput,
) {
    if let Some(var_950) = &input.endpoint_name {
        object.key("EndpointName").string(var_950);
    }
    if let Some(var_951) = &input.sort_by {
        object.key("SortBy").string(var_951.as_str());
    }
    if let Some(var_952) = &input.sort_order {
        object.key("SortOrder").string(var_952.as_str());
    }
    if let Some(var_953) = &input.next_token {
        object.key("NextToken").string(var_953);
    }
    if let Some(var_954) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_954).into()),
        );
    }
    if let Some(var_955) = &input.name_contains {
        object.key("NameContains").string(var_955);
    }
    if let Some(var_956) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_956, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_957) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_957, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_model_explainability_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelExplainabilityJobDefinitionsInput,
) {
    if let Some(var_958) = &input.endpoint_name {
        object.key("EndpointName").string(var_958);
    }
    if let Some(var_959) = &input.sort_by {
        object.key("SortBy").string(var_959.as_str());
    }
    if let Some(var_960) = &input.sort_order {
        object.key("SortOrder").string(var_960.as_str());
    }
    if let Some(var_961) = &input.next_token {
        object.key("NextToken").string(var_961);
    }
    if let Some(var_962) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_962).into()),
        );
    }
    if let Some(var_963) = &input.name_contains {
        object.key("NameContains").string(var_963);
    }
    if let Some(var_964) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_964, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_965) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_965, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_model_package_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackageGroupsInput,
) {
    if let Some(var_966) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_966, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_967) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_967, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_968) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_968).into()),
        );
    }
    if let Some(var_969) = &input.name_contains {
        object.key("NameContains").string(var_969);
    }
    if let Some(var_970) = &input.next_token {
        object.key("NextToken").string(var_970);
    }
    if let Some(var_971) = &input.sort_by {
        object.key("SortBy").string(var_971.as_str());
    }
    if let Some(var_972) = &input.sort_order {
        object.key("SortOrder").string(var_972.as_str());
    }
}

pub fn serialize_structure_list_model_packages_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackagesInput,
) {
    if let Some(var_973) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_973, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_974) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_974, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_975) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_975).into()),
        );
    }
    if let Some(var_976) = &input.name_contains {
        object.key("NameContains").string(var_976);
    }
    if let Some(var_977) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_977.as_str());
    }
    if let Some(var_978) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_978);
    }
    if let Some(var_979) = &input.model_package_type {
        object.key("ModelPackageType").string(var_979.as_str());
    }
    if let Some(var_980) = &input.next_token {
        object.key("NextToken").string(var_980);
    }
    if let Some(var_981) = &input.sort_by {
        object.key("SortBy").string(var_981.as_str());
    }
    if let Some(var_982) = &input.sort_order {
        object.key("SortOrder").string(var_982.as_str());
    }
}

pub fn serialize_structure_list_model_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelQualityJobDefinitionsInput,
) {
    if let Some(var_983) = &input.endpoint_name {
        object.key("EndpointName").string(var_983);
    }
    if let Some(var_984) = &input.sort_by {
        object.key("SortBy").string(var_984.as_str());
    }
    if let Some(var_985) = &input.sort_order {
        object.key("SortOrder").string(var_985.as_str());
    }
    if let Some(var_986) = &input.next_token {
        object.key("NextToken").string(var_986);
    }
    if let Some(var_987) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_987).into()),
        );
    }
    if let Some(var_988) = &input.name_contains {
        object.key("NameContains").string(var_988);
    }
    if let Some(var_989) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_989, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_990) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_990, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelsInput,
) {
    if let Some(var_991) = &input.sort_by {
        object.key("SortBy").string(var_991.as_str());
    }
    if let Some(var_992) = &input.sort_order {
        object.key("SortOrder").string(var_992.as_str());
    }
    if let Some(var_993) = &input.next_token {
        object.key("NextToken").string(var_993);
    }
    if let Some(var_994) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_994).into()),
        );
    }
    if let Some(var_995) = &input.name_contains {
        object.key("NameContains").string(var_995);
    }
    if let Some(var_996) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_996, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_997) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_997, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_monitoring_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringExecutionsInput,
) {
    if let Some(var_998) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_998);
    }
    if let Some(var_999) = &input.endpoint_name {
        object.key("EndpointName").string(var_999);
    }
    if let Some(var_1000) = &input.sort_by {
        object.key("SortBy").string(var_1000.as_str());
    }
    if let Some(var_1001) = &input.sort_order {
        object.key("SortOrder").string(var_1001.as_str());
    }
    if let Some(var_1002) = &input.next_token {
        object.key("NextToken").string(var_1002);
    }
    if let Some(var_1003) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1003).into()),
        );
    }
    if let Some(var_1004) = &input.scheduled_time_before {
        object
            .key("ScheduledTimeBefore")
            .instant(var_1004, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1005) = &input.scheduled_time_after {
        object
            .key("ScheduledTimeAfter")
            .instant(var_1005, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1006) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1006, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1007) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1007, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1008) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1008, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1009) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1009, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1010) = &input.status_equals {
        object.key("StatusEquals").string(var_1010.as_str());
    }
    if let Some(var_1011) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1011);
    }
    if let Some(var_1012) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1012.as_str());
    }
}

pub fn serialize_structure_list_monitoring_schedules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringSchedulesInput,
) {
    if let Some(var_1013) = &input.endpoint_name {
        object.key("EndpointName").string(var_1013);
    }
    if let Some(var_1014) = &input.sort_by {
        object.key("SortBy").string(var_1014.as_str());
    }
    if let Some(var_1015) = &input.sort_order {
        object.key("SortOrder").string(var_1015.as_str());
    }
    if let Some(var_1016) = &input.next_token {
        object.key("NextToken").string(var_1016);
    }
    if let Some(var_1017) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1017).into()),
        );
    }
    if let Some(var_1018) = &input.name_contains {
        object.key("NameContains").string(var_1018);
    }
    if let Some(var_1019) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1019, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1020) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1020, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1021) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1021, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1022) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1022, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1023) = &input.status_equals {
        object.key("StatusEquals").string(var_1023.as_str());
    }
    if let Some(var_1024) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1024);
    }
    if let Some(var_1025) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1025.as_str());
    }
}

pub fn serialize_structure_list_notebook_instance_lifecycle_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstanceLifecycleConfigsInput,
) {
    if let Some(var_1026) = &input.next_token {
        object.key("NextToken").string(var_1026);
    }
    if let Some(var_1027) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1027).into()),
        );
    }
    if let Some(var_1028) = &input.sort_by {
        object.key("SortBy").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.sort_order {
        object.key("SortOrder").string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.name_contains {
        object.key("NameContains").string(var_1030);
    }
    if let Some(var_1031) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1031, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1032) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1032, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1033) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1033, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1034) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1034, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_notebook_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstancesInput,
) {
    if let Some(var_1035) = &input.next_token {
        object.key("NextToken").string(var_1035);
    }
    if let Some(var_1036) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1036).into()),
        );
    }
    if let Some(var_1037) = &input.sort_by {
        object.key("SortBy").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.sort_order {
        object.key("SortOrder").string(var_1038.as_str());
    }
    if let Some(var_1039) = &input.name_contains {
        object.key("NameContains").string(var_1039);
    }
    if let Some(var_1040) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1040, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1041) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1041, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1042) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1042, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1043) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1043, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1044) = &input.status_equals {
        object.key("StatusEquals").string(var_1044.as_str());
    }
    if let Some(var_1045) = &input.notebook_instance_lifecycle_config_name_contains {
        object
            .key("NotebookInstanceLifecycleConfigNameContains")
            .string(var_1045);
    }
    if let Some(var_1046) = &input.default_code_repository_contains {
        object.key("DefaultCodeRepositoryContains").string(var_1046);
    }
    if let Some(var_1047) = &input.additional_code_repository_equals {
        object
            .key("AdditionalCodeRepositoryEquals")
            .string(var_1047);
    }
}

pub fn serialize_structure_list_pipeline_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionsInput,
) {
    if let Some(var_1048) = &input.pipeline_name {
        object.key("PipelineName").string(var_1048);
    }
    if let Some(var_1049) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1049, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1050) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1050, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1051) = &input.sort_by {
        object.key("SortBy").string(var_1051.as_str());
    }
    if let Some(var_1052) = &input.sort_order {
        object.key("SortOrder").string(var_1052.as_str());
    }
    if let Some(var_1053) = &input.next_token {
        object.key("NextToken").string(var_1053);
    }
    if let Some(var_1054) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1054).into()),
        );
    }
}

pub fn serialize_structure_list_pipeline_execution_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionStepsInput,
) {
    if let Some(var_1055) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1055);
    }
    if let Some(var_1056) = &input.next_token {
        object.key("NextToken").string(var_1056);
    }
    if let Some(var_1057) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1057).into()),
        );
    }
    if let Some(var_1058) = &input.sort_order {
        object.key("SortOrder").string(var_1058.as_str());
    }
}

pub fn serialize_structure_list_pipeline_parameters_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineParametersForExecutionInput,
) {
    if let Some(var_1059) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1059);
    }
    if let Some(var_1060) = &input.next_token {
        object.key("NextToken").string(var_1060);
    }
    if let Some(var_1061) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1061).into()),
        );
    }
}

pub fn serialize_structure_list_pipelines_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelinesInput,
) {
    if let Some(var_1062) = &input.pipeline_name_prefix {
        object.key("PipelineNamePrefix").string(var_1062);
    }
    if let Some(var_1063) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1063, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1064) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1064, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1065) = &input.sort_by {
        object.key("SortBy").string(var_1065.as_str());
    }
    if let Some(var_1066) = &input.sort_order {
        object.key("SortOrder").string(var_1066.as_str());
    }
    if let Some(var_1067) = &input.next_token {
        object.key("NextToken").string(var_1067);
    }
    if let Some(var_1068) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1068).into()),
        );
    }
}

pub fn serialize_structure_list_processing_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProcessingJobsInput,
) {
    if let Some(var_1069) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1069, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1070) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1070, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1071) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1071, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1072) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1072, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1073) = &input.name_contains {
        object.key("NameContains").string(var_1073);
    }
    if let Some(var_1074) = &input.status_equals {
        object.key("StatusEquals").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.sort_by {
        object.key("SortBy").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.sort_order {
        object.key("SortOrder").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.next_token {
        object.key("NextToken").string(var_1077);
    }
    if let Some(var_1078) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1078).into()),
        );
    }
}

pub fn serialize_structure_list_projects_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProjectsInput,
) {
    if let Some(var_1079) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1079, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1080) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1080, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1081) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1081).into()),
        );
    }
    if let Some(var_1082) = &input.name_contains {
        object.key("NameContains").string(var_1082);
    }
    if let Some(var_1083) = &input.next_token {
        object.key("NextToken").string(var_1083);
    }
    if let Some(var_1084) = &input.sort_by {
        object.key("SortBy").string(var_1084.as_str());
    }
    if let Some(var_1085) = &input.sort_order {
        object.key("SortOrder").string(var_1085.as_str());
    }
}

pub fn serialize_structure_list_subscribed_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSubscribedWorkteamsInput,
) {
    if let Some(var_1086) = &input.name_contains {
        object.key("NameContains").string(var_1086);
    }
    if let Some(var_1087) = &input.next_token {
        object.key("NextToken").string(var_1087);
    }
    if let Some(var_1088) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1088).into()),
        );
    }
}

pub fn serialize_structure_list_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsInput,
) {
    if let Some(var_1089) = &input.resource_arn {
        object.key("ResourceArn").string(var_1089);
    }
    if let Some(var_1090) = &input.next_token {
        object.key("NextToken").string(var_1090);
    }
    if let Some(var_1091) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1091).into()),
        );
    }
}

pub fn serialize_structure_list_training_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsInput,
) {
    if let Some(var_1092) = &input.next_token {
        object.key("NextToken").string(var_1092);
    }
    if let Some(var_1093) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1093).into()),
        );
    }
    if let Some(var_1094) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1094, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1095) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1095, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1096) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1096, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1097) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1097, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1098) = &input.name_contains {
        object.key("NameContains").string(var_1098);
    }
    if let Some(var_1099) = &input.status_equals {
        object.key("StatusEquals").string(var_1099.as_str());
    }
    if let Some(var_1100) = &input.sort_by {
        object.key("SortBy").string(var_1100.as_str());
    }
    if let Some(var_1101) = &input.sort_order {
        object.key("SortOrder").string(var_1101.as_str());
    }
}

pub fn serialize_structure_list_training_jobs_for_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsForHyperParameterTuningJobInput,
) {
    if let Some(var_1102) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1102);
    }
    if let Some(var_1103) = &input.next_token {
        object.key("NextToken").string(var_1103);
    }
    if let Some(var_1104) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1104).into()),
        );
    }
    if let Some(var_1105) = &input.status_equals {
        object.key("StatusEquals").string(var_1105.as_str());
    }
    if let Some(var_1106) = &input.sort_by {
        object.key("SortBy").string(var_1106.as_str());
    }
    if let Some(var_1107) = &input.sort_order {
        object.key("SortOrder").string(var_1107.as_str());
    }
}

pub fn serialize_structure_list_transform_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTransformJobsInput,
) {
    if let Some(var_1108) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1108, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1109) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1109, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1110) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1110, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1111) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1111, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1112) = &input.name_contains {
        object.key("NameContains").string(var_1112);
    }
    if let Some(var_1113) = &input.status_equals {
        object.key("StatusEquals").string(var_1113.as_str());
    }
    if let Some(var_1114) = &input.sort_by {
        object.key("SortBy").string(var_1114.as_str());
    }
    if let Some(var_1115) = &input.sort_order {
        object.key("SortOrder").string(var_1115.as_str());
    }
    if let Some(var_1116) = &input.next_token {
        object.key("NextToken").string(var_1116);
    }
    if let Some(var_1117) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1117).into()),
        );
    }
}

pub fn serialize_structure_list_trial_components_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialComponentsInput,
) {
    if let Some(var_1118) = &input.experiment_name {
        object.key("ExperimentName").string(var_1118);
    }
    if let Some(var_1119) = &input.trial_name {
        object.key("TrialName").string(var_1119);
    }
    if let Some(var_1120) = &input.source_arn {
        object.key("SourceArn").string(var_1120);
    }
    if let Some(var_1121) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1121, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1122) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1122, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1123) = &input.sort_by {
        object.key("SortBy").string(var_1123.as_str());
    }
    if let Some(var_1124) = &input.sort_order {
        object.key("SortOrder").string(var_1124.as_str());
    }
    if let Some(var_1125) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1125).into()),
        );
    }
    if let Some(var_1126) = &input.next_token {
        object.key("NextToken").string(var_1126);
    }
}

pub fn serialize_structure_list_trials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialsInput,
) {
    if let Some(var_1127) = &input.experiment_name {
        object.key("ExperimentName").string(var_1127);
    }
    if let Some(var_1128) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1128);
    }
    if let Some(var_1129) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1129, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1130) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1130, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1131) = &input.sort_by {
        object.key("SortBy").string(var_1131.as_str());
    }
    if let Some(var_1132) = &input.sort_order {
        object.key("SortOrder").string(var_1132.as_str());
    }
    if let Some(var_1133) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1133).into()),
        );
    }
    if let Some(var_1134) = &input.next_token {
        object.key("NextToken").string(var_1134);
    }
}

pub fn serialize_structure_list_user_profiles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserProfilesInput,
) {
    if let Some(var_1135) = &input.next_token {
        object.key("NextToken").string(var_1135);
    }
    if let Some(var_1136) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1136).into()),
        );
    }
    if let Some(var_1137) = &input.sort_order {
        object.key("SortOrder").string(var_1137.as_str());
    }
    if let Some(var_1138) = &input.sort_by {
        object.key("SortBy").string(var_1138.as_str());
    }
    if let Some(var_1139) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_1139);
    }
    if let Some(var_1140) = &input.user_profile_name_contains {
        object.key("UserProfileNameContains").string(var_1140);
    }
}

pub fn serialize_structure_list_workforces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkforcesInput,
) {
    if let Some(var_1141) = &input.sort_by {
        object.key("SortBy").string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.sort_order {
        object.key("SortOrder").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.name_contains {
        object.key("NameContains").string(var_1143);
    }
    if let Some(var_1144) = &input.next_token {
        object.key("NextToken").string(var_1144);
    }
    if let Some(var_1145) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1145).into()),
        );
    }
}

pub fn serialize_structure_list_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkteamsInput,
) {
    if let Some(var_1146) = &input.sort_by {
        object.key("SortBy").string(var_1146.as_str());
    }
    if let Some(var_1147) = &input.sort_order {
        object.key("SortOrder").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.name_contains {
        object.key("NameContains").string(var_1148);
    }
    if let Some(var_1149) = &input.next_token {
        object.key("NextToken").string(var_1149);
    }
    if let Some(var_1150) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1150).into()),
        );
    }
}

pub fn serialize_structure_put_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutModelPackageGroupPolicyInput,
) {
    if let Some(var_1151) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_1151);
    }
    if let Some(var_1152) = &input.resource_policy {
        object.key("ResourcePolicy").string(var_1152);
    }
}

pub fn serialize_structure_register_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDevicesInput,
) {
    if let Some(var_1153) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1153);
    }
    if let Some(var_1154) = &input.devices {
        let mut array_1155 = object.key("Devices").start_array();
        for item_1156 in var_1154 {
            {
                let mut object_1157 = array_1155.value().start_object();
                crate::json_ser::serialize_structure_device(&mut object_1157, item_1156);
                object_1157.finish();
            }
        }
        array_1155.finish();
    }
    if let Some(var_1158) = &input.tags {
        let mut array_1159 = object.key("Tags").start_array();
        for item_1160 in var_1158 {
            {
                let mut object_1161 = array_1159.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_1161, item_1160);
                object_1161.finish();
            }
        }
        array_1159.finish();
    }
}

pub fn serialize_structure_render_ui_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RenderUiTemplateInput,
) {
    if let Some(var_1162) = &input.ui_template {
        let mut object_1163 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_ui_template(&mut object_1163, var_1162);
        object_1163.finish();
    }
    if let Some(var_1164) = &input.task {
        let mut object_1165 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_renderable_task(&mut object_1165, var_1164);
        object_1165.finish();
    }
    if let Some(var_1166) = &input.role_arn {
        object.key("RoleArn").string(var_1166);
    }
    if let Some(var_1167) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1167);
    }
}

pub fn serialize_structure_search_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchInput,
) {
    if let Some(var_1168) = &input.resource {
        object.key("Resource").string(var_1168.as_str());
    }
    if let Some(var_1169) = &input.search_expression {
        let mut object_1170 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_search_expression(&mut object_1170, var_1169);
        object_1170.finish();
    }
    if let Some(var_1171) = &input.sort_by {
        object.key("SortBy").string(var_1171);
    }
    if let Some(var_1172) = &input.sort_order {
        object.key("SortOrder").string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.next_token {
        object.key("NextToken").string(var_1173);
    }
    if let Some(var_1174) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1174).into()),
        );
    }
}

pub fn serialize_structure_send_pipeline_execution_step_failure_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepFailureInput,
) {
    if let Some(var_1175) = &input.callback_token {
        object.key("CallbackToken").string(var_1175);
    }
    if let Some(var_1176) = &input.failure_reason {
        object.key("FailureReason").string(var_1176);
    }
    if let Some(var_1177) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1177);
    }
}

pub fn serialize_structure_send_pipeline_execution_step_success_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepSuccessInput,
) {
    if let Some(var_1178) = &input.callback_token {
        object.key("CallbackToken").string(var_1178);
    }
    if let Some(var_1179) = &input.output_parameters {
        let mut array_1180 = object.key("OutputParameters").start_array();
        for item_1181 in var_1179 {
            {
                let mut object_1182 = array_1180.value().start_object();
                crate::json_ser::serialize_structure_output_parameter(&mut object_1182, item_1181);
                object_1182.finish();
            }
        }
        array_1180.finish();
    }
    if let Some(var_1183) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1183);
    }
}

pub fn serialize_structure_start_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMonitoringScheduleInput,
) {
    if let Some(var_1184) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1184);
    }
}

pub fn serialize_structure_start_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookInstanceInput,
) {
    if let Some(var_1185) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1185);
    }
}

pub fn serialize_structure_start_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPipelineExecutionInput,
) {
    if let Some(var_1186) = &input.pipeline_name {
        object.key("PipelineName").string(var_1186);
    }
    if let Some(var_1187) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1187);
    }
    if let Some(var_1188) = &input.pipeline_parameters {
        let mut array_1189 = object.key("PipelineParameters").start_array();
        for item_1190 in var_1188 {
            {
                let mut object_1191 = array_1189.value().start_object();
                crate::json_ser::serialize_structure_parameter(&mut object_1191, item_1190);
                object_1191.finish();
            }
        }
        array_1189.finish();
    }
    if let Some(var_1192) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1192);
    }
    if let Some(var_1193) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1193);
    }
}

pub fn serialize_structure_stop_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutoMLJobInput,
) {
    if let Some(var_1194) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_1194);
    }
}

pub fn serialize_structure_stop_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCompilationJobInput,
) {
    if let Some(var_1195) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1195);
    }
}

pub fn serialize_structure_stop_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgePackagingJobInput,
) {
    if let Some(var_1196) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1196);
    }
}

pub fn serialize_structure_stop_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopHyperParameterTuningJobInput,
) {
    if let Some(var_1197) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1197);
    }
}

pub fn serialize_structure_stop_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopLabelingJobInput,
) {
    if let Some(var_1198) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1198);
    }
}

pub fn serialize_structure_stop_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopMonitoringScheduleInput,
) {
    if let Some(var_1199) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1199);
    }
}

pub fn serialize_structure_stop_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookInstanceInput,
) {
    if let Some(var_1200) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1200);
    }
}

pub fn serialize_structure_stop_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPipelineExecutionInput,
) {
    if let Some(var_1201) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1201);
    }
    if let Some(var_1202) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1202);
    }
}

pub fn serialize_structure_stop_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProcessingJobInput,
) {
    if let Some(var_1203) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_1203);
    }
}

pub fn serialize_structure_stop_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingJobInput,
) {
    if let Some(var_1204) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1204);
    }
}

pub fn serialize_structure_stop_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTransformJobInput,
) {
    if let Some(var_1205) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1205);
    }
}

pub fn serialize_structure_update_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionInput,
) {
    if let Some(var_1206) = &input.action_name {
        object.key("ActionName").string(var_1206);
    }
    if let Some(var_1207) = &input.description {
        object.key("Description").string(var_1207);
    }
    if let Some(var_1208) = &input.status {
        object.key("Status").string(var_1208.as_str());
    }
    if let Some(var_1209) = &input.properties {
        let mut object_1210 = object.key("Properties").start_object();
        for (key_1211, value_1212) in var_1209 {
            {
                object_1210.key(key_1211).string(value_1212);
            }
        }
        object_1210.finish();
    }
    if let Some(var_1213) = &input.properties_to_remove {
        let mut array_1214 = object.key("PropertiesToRemove").start_array();
        for item_1215 in var_1213 {
            {
                array_1214.value().string(item_1215);
            }
        }
        array_1214.finish();
    }
}

pub fn serialize_structure_update_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppImageConfigInput,
) {
    if let Some(var_1216) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_1216);
    }
    if let Some(var_1217) = &input.kernel_gateway_image_config {
        let mut object_1218 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_image_config(
            &mut object_1218,
            var_1217,
        );
        object_1218.finish();
    }
}

pub fn serialize_structure_update_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateArtifactInput,
) {
    if let Some(var_1219) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_1219);
    }
    if let Some(var_1220) = &input.artifact_name {
        object.key("ArtifactName").string(var_1220);
    }
    if let Some(var_1221) = &input.properties {
        let mut object_1222 = object.key("Properties").start_object();
        for (key_1223, value_1224) in var_1221 {
            {
                object_1222.key(key_1223).string(value_1224);
            }
        }
        object_1222.finish();
    }
    if let Some(var_1225) = &input.properties_to_remove {
        let mut array_1226 = object.key("PropertiesToRemove").start_array();
        for item_1227 in var_1225 {
            {
                array_1226.value().string(item_1227);
            }
        }
        array_1226.finish();
    }
}

pub fn serialize_structure_update_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeRepositoryInput,
) {
    if let Some(var_1228) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_1228);
    }
    if let Some(var_1229) = &input.git_config {
        let mut object_1230 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_git_config_for_update(&mut object_1230, var_1229);
        object_1230.finish();
    }
}

pub fn serialize_structure_update_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContextInput,
) {
    if let Some(var_1231) = &input.context_name {
        object.key("ContextName").string(var_1231);
    }
    if let Some(var_1232) = &input.description {
        object.key("Description").string(var_1232);
    }
    if let Some(var_1233) = &input.properties {
        let mut object_1234 = object.key("Properties").start_object();
        for (key_1235, value_1236) in var_1233 {
            {
                object_1234.key(key_1235).string(value_1236);
            }
        }
        object_1234.finish();
    }
    if let Some(var_1237) = &input.properties_to_remove {
        let mut array_1238 = object.key("PropertiesToRemove").start_array();
        for item_1239 in var_1237 {
            {
                array_1238.value().string(item_1239);
            }
        }
        array_1238.finish();
    }
}

pub fn serialize_structure_update_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceFleetInput,
) {
    if let Some(var_1240) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1240);
    }
    if let Some(var_1241) = &input.role_arn {
        object.key("RoleArn").string(var_1241);
    }
    if let Some(var_1242) = &input.description {
        object.key("Description").string(var_1242);
    }
    if let Some(var_1243) = &input.output_config {
        let mut object_1244 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_1244, var_1243);
        object_1244.finish();
    }
    if let Some(var_1245) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_1245);
    }
}

pub fn serialize_structure_update_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevicesInput,
) {
    if let Some(var_1246) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1246);
    }
    if let Some(var_1247) = &input.devices {
        let mut array_1248 = object.key("Devices").start_array();
        for item_1249 in var_1247 {
            {
                let mut object_1250 = array_1248.value().start_object();
                crate::json_ser::serialize_structure_device(&mut object_1250, item_1249);
                object_1250.finish();
            }
        }
        array_1248.finish();
    }
}

pub fn serialize_structure_update_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) {
    if let Some(var_1251) = &input.domain_id {
        object.key("DomainId").string(var_1251);
    }
    if let Some(var_1252) = &input.default_user_settings {
        let mut object_1253 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_1253, var_1252);
        object_1253.finish();
    }
}

pub fn serialize_structure_update_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) {
    if let Some(var_1254) = &input.endpoint_name {
        object.key("EndpointName").string(var_1254);
    }
    if let Some(var_1255) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1255);
    }
    if input.retain_all_variant_properties {
        object
            .key("RetainAllVariantProperties")
            .boolean(input.retain_all_variant_properties);
    }
    if let Some(var_1256) = &input.exclude_retained_variant_properties {
        let mut array_1257 = object.key("ExcludeRetainedVariantProperties").start_array();
        for item_1258 in var_1256 {
            {
                let mut object_1259 = array_1257.value().start_object();
                crate::json_ser::serialize_structure_variant_property(&mut object_1259, item_1258);
                object_1259.finish();
            }
        }
        array_1257.finish();
    }
    if let Some(var_1260) = &input.deployment_config {
        let mut object_1261 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_deployment_config(&mut object_1261, var_1260);
        object_1261.finish();
    }
}

pub fn serialize_structure_update_endpoint_weights_and_capacities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointWeightsAndCapacitiesInput,
) {
    if let Some(var_1262) = &input.endpoint_name {
        object.key("EndpointName").string(var_1262);
    }
    if let Some(var_1263) = &input.desired_weights_and_capacities {
        let mut array_1264 = object.key("DesiredWeightsAndCapacities").start_array();
        for item_1265 in var_1263 {
            {
                let mut object_1266 = array_1264.value().start_object();
                crate::json_ser::serialize_structure_desired_weight_and_capacity(
                    &mut object_1266,
                    item_1265,
                );
                object_1266.finish();
            }
        }
        array_1264.finish();
    }
}

pub fn serialize_structure_update_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperimentInput,
) {
    if let Some(var_1267) = &input.experiment_name {
        object.key("ExperimentName").string(var_1267);
    }
    if let Some(var_1268) = &input.display_name {
        object.key("DisplayName").string(var_1268);
    }
    if let Some(var_1269) = &input.description {
        object.key("Description").string(var_1269);
    }
}

pub fn serialize_structure_update_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImageInput,
) {
    if let Some(var_1270) = &input.delete_properties {
        let mut array_1271 = object.key("DeleteProperties").start_array();
        for item_1272 in var_1270 {
            {
                array_1271.value().string(item_1272);
            }
        }
        array_1271.finish();
    }
    if let Some(var_1273) = &input.description {
        object.key("Description").string(var_1273);
    }
    if let Some(var_1274) = &input.display_name {
        object.key("DisplayName").string(var_1274);
    }
    if let Some(var_1275) = &input.image_name {
        object.key("ImageName").string(var_1275);
    }
    if let Some(var_1276) = &input.role_arn {
        object.key("RoleArn").string(var_1276);
    }
}

pub fn serialize_structure_update_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelPackageInput,
) {
    if let Some(var_1277) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1277);
    }
    if let Some(var_1278) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.approval_description {
        object.key("ApprovalDescription").string(var_1279);
    }
}

pub fn serialize_structure_update_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMonitoringScheduleInput,
) {
    if let Some(var_1280) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1280);
    }
    if let Some(var_1281) = &input.monitoring_schedule_config {
        let mut object_1282 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_schedule_config(&mut object_1282, var_1281);
        object_1282.finish();
    }
}

pub fn serialize_structure_update_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceInput,
) {
    if let Some(var_1283) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1283);
    }
    if let Some(var_1284) = &input.instance_type {
        object.key("InstanceType").string(var_1284.as_str());
    }
    if let Some(var_1285) = &input.role_arn {
        object.key("RoleArn").string(var_1285);
    }
    if let Some(var_1286) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_1286);
    }
    if input.disassociate_lifecycle_config {
        object
            .key("DisassociateLifecycleConfig")
            .boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_1287) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1287).into()),
        );
    }
    if let Some(var_1288) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_1288);
    }
    if let Some(var_1289) = &input.additional_code_repositories {
        let mut array_1290 = object.key("AdditionalCodeRepositories").start_array();
        for item_1291 in var_1289 {
            {
                array_1290.value().string(item_1291);
            }
        }
        array_1290.finish();
    }
    if let Some(var_1292) = &input.accelerator_types {
        let mut array_1293 = object.key("AcceleratorTypes").start_array();
        for item_1294 in var_1292 {
            {
                array_1293.value().string(item_1294.as_str());
            }
        }
        array_1293.finish();
    }
    if input.disassociate_accelerator_types {
        object
            .key("DisassociateAcceleratorTypes")
            .boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object
            .key("DisassociateDefaultCodeRepository")
            .boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object
            .key("DisassociateAdditionalCodeRepositories")
            .boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_1295) = &input.root_access {
        object.key("RootAccess").string(var_1295.as_str());
    }
}

pub fn serialize_structure_update_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_1296) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_1296);
    }
    if let Some(var_1297) = &input.on_create {
        let mut array_1298 = object.key("OnCreate").start_array();
        for item_1299 in var_1297 {
            {
                let mut object_1300 = array_1298.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_1300,
                    item_1299,
                );
                object_1300.finish();
            }
        }
        array_1298.finish();
    }
    if let Some(var_1301) = &input.on_start {
        let mut array_1302 = object.key("OnStart").start_array();
        for item_1303 in var_1301 {
            {
                let mut object_1304 = array_1302.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_1304,
                    item_1303,
                );
                object_1304.finish();
            }
        }
        array_1302.finish();
    }
}

pub fn serialize_structure_update_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineInput,
) {
    if let Some(var_1305) = &input.pipeline_name {
        object.key("PipelineName").string(var_1305);
    }
    if let Some(var_1306) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_1306);
    }
    if let Some(var_1307) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_1307);
    }
    if let Some(var_1308) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_1308);
    }
    if let Some(var_1309) = &input.role_arn {
        object.key("RoleArn").string(var_1309);
    }
}

pub fn serialize_structure_update_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineExecutionInput,
) {
    if let Some(var_1310) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1310);
    }
    if let Some(var_1311) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1311);
    }
    if let Some(var_1312) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1312);
    }
}

pub fn serialize_structure_update_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrainingJobInput,
) {
    if let Some(var_1313) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1313);
    }
    if let Some(var_1314) = &input.profiler_config {
        let mut object_1315 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_profiler_config_for_update(&mut object_1315, var_1314);
        object_1315.finish();
    }
    if let Some(var_1316) = &input.profiler_rule_configurations {
        let mut array_1317 = object.key("ProfilerRuleConfigurations").start_array();
        for item_1318 in var_1316 {
            {
                let mut object_1319 = array_1317.value().start_object();
                crate::json_ser::serialize_structure_profiler_rule_configuration(
                    &mut object_1319,
                    item_1318,
                );
                object_1319.finish();
            }
        }
        array_1317.finish();
    }
}

pub fn serialize_structure_update_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialInput,
) {
    if let Some(var_1320) = &input.trial_name {
        object.key("TrialName").string(var_1320);
    }
    if let Some(var_1321) = &input.display_name {
        object.key("DisplayName").string(var_1321);
    }
}

pub fn serialize_structure_update_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialComponentInput,
) {
    if let Some(var_1322) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1322);
    }
    if let Some(var_1323) = &input.display_name {
        object.key("DisplayName").string(var_1323);
    }
    if let Some(var_1324) = &input.status {
        let mut object_1325 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_trial_component_status(&mut object_1325, var_1324);
        object_1325.finish();
    }
    if let Some(var_1326) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_1326, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1327) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_1327, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1328) = &input.parameters {
        let mut object_1329 = object.key("Parameters").start_object();
        for (key_1330, value_1331) in var_1328 {
            {
                let mut object_1332 = object_1329.key(key_1330).start_object();
                crate::json_ser::serialize_union_trial_component_parameter_value(
                    &mut object_1332,
                    value_1331,
                );
                object_1332.finish();
            }
        }
        object_1329.finish();
    }
    if let Some(var_1333) = &input.parameters_to_remove {
        let mut array_1334 = object.key("ParametersToRemove").start_array();
        for item_1335 in var_1333 {
            {
                array_1334.value().string(item_1335);
            }
        }
        array_1334.finish();
    }
    if let Some(var_1336) = &input.input_artifacts {
        let mut object_1337 = object.key("InputArtifacts").start_object();
        for (key_1338, value_1339) in var_1336 {
            {
                let mut object_1340 = object_1337.key(key_1338).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_1340,
                    value_1339,
                );
                object_1340.finish();
            }
        }
        object_1337.finish();
    }
    if let Some(var_1341) = &input.input_artifacts_to_remove {
        let mut array_1342 = object.key("InputArtifactsToRemove").start_array();
        for item_1343 in var_1341 {
            {
                array_1342.value().string(item_1343);
            }
        }
        array_1342.finish();
    }
    if let Some(var_1344) = &input.output_artifacts {
        let mut object_1345 = object.key("OutputArtifacts").start_object();
        for (key_1346, value_1347) in var_1344 {
            {
                let mut object_1348 = object_1345.key(key_1346).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_1348,
                    value_1347,
                );
                object_1348.finish();
            }
        }
        object_1345.finish();
    }
    if let Some(var_1349) = &input.output_artifacts_to_remove {
        let mut array_1350 = object.key("OutputArtifactsToRemove").start_array();
        for item_1351 in var_1349 {
            {
                array_1350.value().string(item_1351);
            }
        }
        array_1350.finish();
    }
}

pub fn serialize_structure_update_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserProfileInput,
) {
    if let Some(var_1352) = &input.domain_id {
        object.key("DomainId").string(var_1352);
    }
    if let Some(var_1353) = &input.user_profile_name {
        object.key("UserProfileName").string(var_1353);
    }
    if let Some(var_1354) = &input.user_settings {
        let mut object_1355 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_1355, var_1354);
        object_1355.finish();
    }
}

pub fn serialize_structure_update_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkforceInput,
) {
    if let Some(var_1356) = &input.workforce_name {
        object.key("WorkforceName").string(var_1356);
    }
    if let Some(var_1357) = &input.source_ip_config {
        let mut object_1358 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_source_ip_config(&mut object_1358, var_1357);
        object_1358.finish();
    }
    if let Some(var_1359) = &input.oidc_config {
        let mut object_1360 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_oidc_config(&mut object_1360, var_1359);
        object_1360.finish();
    }
}

pub fn serialize_structure_update_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkteamInput,
) {
    if let Some(var_1361) = &input.workteam_name {
        object.key("WorkteamName").string(var_1361);
    }
    if let Some(var_1362) = &input.member_definitions {
        let mut array_1363 = object.key("MemberDefinitions").start_array();
        for item_1364 in var_1362 {
            {
                let mut object_1365 = array_1363.value().start_object();
                crate::json_ser::serialize_structure_member_definition(&mut object_1365, item_1364);
                object_1365.finish();
            }
        }
        array_1363.finish();
    }
    if let Some(var_1366) = &input.description {
        object.key("Description").string(var_1366);
    }
    if let Some(var_1367) = &input.notification_configuration {
        let mut object_1368 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_notification_configuration(&mut object_1368, var_1367);
        object_1368.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_1369) = &input.key {
        object.key("Key").string(var_1369);
    }
    if let Some(var_1370) = &input.value {
        object.key("Value").string(var_1370);
    }
}

pub fn serialize_structure_action_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionSource,
) {
    if let Some(var_1371) = &input.source_uri {
        object.key("SourceUri").string(var_1371);
    }
    if let Some(var_1372) = &input.source_type {
        object.key("SourceType").string(var_1372);
    }
    if let Some(var_1373) = &input.source_id {
        object.key("SourceId").string(var_1373);
    }
}

pub fn serialize_structure_metadata_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataProperties,
) {
    if let Some(var_1374) = &input.commit_id {
        object.key("CommitId").string(var_1374);
    }
    if let Some(var_1375) = &input.repository {
        object.key("Repository").string(var_1375);
    }
    if let Some(var_1376) = &input.generated_by {
        object.key("GeneratedBy").string(var_1376);
    }
    if let Some(var_1377) = &input.project_id {
        object.key("ProjectId").string(var_1377);
    }
}

pub fn serialize_structure_training_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingSpecification,
) {
    if let Some(var_1378) = &input.training_image {
        object.key("TrainingImage").string(var_1378);
    }
    if let Some(var_1379) = &input.training_image_digest {
        object.key("TrainingImageDigest").string(var_1379);
    }
    if let Some(var_1380) = &input.supported_hyper_parameters {
        let mut array_1381 = object.key("SupportedHyperParameters").start_array();
        for item_1382 in var_1380 {
            {
                let mut object_1383 = array_1381.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_specification(
                    &mut object_1383,
                    item_1382,
                );
                object_1383.finish();
            }
        }
        array_1381.finish();
    }
    if let Some(var_1384) = &input.supported_training_instance_types {
        let mut array_1385 = object.key("SupportedTrainingInstanceTypes").start_array();
        for item_1386 in var_1384 {
            {
                array_1385.value().string(item_1386.as_str());
            }
        }
        array_1385.finish();
    }
    if input.supports_distributed_training {
        object
            .key("SupportsDistributedTraining")
            .boolean(input.supports_distributed_training);
    }
    if let Some(var_1387) = &input.metric_definitions {
        let mut array_1388 = object.key("MetricDefinitions").start_array();
        for item_1389 in var_1387 {
            {
                let mut object_1390 = array_1388.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1390, item_1389);
                object_1390.finish();
            }
        }
        array_1388.finish();
    }
    if let Some(var_1391) = &input.training_channels {
        let mut array_1392 = object.key("TrainingChannels").start_array();
        for item_1393 in var_1391 {
            {
                let mut object_1394 = array_1392.value().start_object();
                crate::json_ser::serialize_structure_channel_specification(
                    &mut object_1394,
                    item_1393,
                );
                object_1394.finish();
            }
        }
        array_1392.finish();
    }
    if let Some(var_1395) = &input.supported_tuning_job_objective_metrics {
        let mut array_1396 = object
            .key("SupportedTuningJobObjectiveMetrics")
            .start_array();
        for item_1397 in var_1395 {
            {
                let mut object_1398 = array_1396.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
                    &mut object_1398,
                    item_1397,
                );
                object_1398.finish();
            }
        }
        array_1396.finish();
    }
}

pub fn serialize_structure_inference_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceSpecification,
) {
    if let Some(var_1399) = &input.containers {
        let mut array_1400 = object.key("Containers").start_array();
        for item_1401 in var_1399 {
            {
                let mut object_1402 = array_1400.value().start_object();
                crate::json_ser::serialize_structure_model_package_container_definition(
                    &mut object_1402,
                    item_1401,
                );
                object_1402.finish();
            }
        }
        array_1400.finish();
    }
    if let Some(var_1403) = &input.supported_transform_instance_types {
        let mut array_1404 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1405 in var_1403 {
            {
                array_1404.value().string(item_1405.as_str());
            }
        }
        array_1404.finish();
    }
    if let Some(var_1406) = &input.supported_realtime_inference_instance_types {
        let mut array_1407 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1408 in var_1406 {
            {
                array_1407.value().string(item_1408.as_str());
            }
        }
        array_1407.finish();
    }
    if let Some(var_1409) = &input.supported_content_types {
        let mut array_1410 = object.key("SupportedContentTypes").start_array();
        for item_1411 in var_1409 {
            {
                array_1410.value().string(item_1411);
            }
        }
        array_1410.finish();
    }
    if let Some(var_1412) = &input.supported_response_mime_types {
        let mut array_1413 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1414 in var_1412 {
            {
                array_1413.value().string(item_1414);
            }
        }
        array_1413.finish();
    }
}

pub fn serialize_structure_algorithm_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationSpecification,
) {
    if let Some(var_1415) = &input.validation_role {
        object.key("ValidationRole").string(var_1415);
    }
    if let Some(var_1416) = &input.validation_profiles {
        let mut array_1417 = object.key("ValidationProfiles").start_array();
        for item_1418 in var_1416 {
            {
                let mut object_1419 = array_1417.value().start_object();
                crate::json_ser::serialize_structure_algorithm_validation_profile(
                    &mut object_1419,
                    item_1418,
                );
                object_1419.finish();
            }
        }
        array_1417.finish();
    }
}

pub fn serialize_structure_resource_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceSpec,
) {
    if let Some(var_1420) = &input.sage_maker_image_arn {
        object.key("SageMakerImageArn").string(var_1420);
    }
    if let Some(var_1421) = &input.sage_maker_image_version_arn {
        object.key("SageMakerImageVersionArn").string(var_1421);
    }
    if let Some(var_1422) = &input.instance_type {
        object.key("InstanceType").string(var_1422.as_str());
    }
}

pub fn serialize_structure_kernel_gateway_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayImageConfig,
) {
    if let Some(var_1423) = &input.kernel_specs {
        let mut array_1424 = object.key("KernelSpecs").start_array();
        for item_1425 in var_1423 {
            {
                let mut object_1426 = array_1424.value().start_object();
                crate::json_ser::serialize_structure_kernel_spec(&mut object_1426, item_1425);
                object_1426.finish();
            }
        }
        array_1424.finish();
    }
    if let Some(var_1427) = &input.file_system_config {
        let mut object_1428 = object.key("FileSystemConfig").start_object();
        crate::json_ser::serialize_structure_file_system_config(&mut object_1428, var_1427);
        object_1428.finish();
    }
}

pub fn serialize_structure_artifact_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSource,
) {
    if let Some(var_1429) = &input.source_uri {
        object.key("SourceUri").string(var_1429);
    }
    if let Some(var_1430) = &input.source_types {
        let mut array_1431 = object.key("SourceTypes").start_array();
        for item_1432 in var_1430 {
            {
                let mut object_1433 = array_1431.value().start_object();
                crate::json_ser::serialize_structure_artifact_source_type(
                    &mut object_1433,
                    item_1432,
                );
                object_1433.finish();
            }
        }
        array_1431.finish();
    }
}

pub fn serialize_structure_auto_ml_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLChannel,
) {
    if let Some(var_1434) = &input.data_source {
        let mut object_1435 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_auto_ml_data_source(&mut object_1435, var_1434);
        object_1435.finish();
    }
    if let Some(var_1436) = &input.compression_type {
        object.key("CompressionType").string(var_1436.as_str());
    }
    if let Some(var_1437) = &input.target_attribute_name {
        object.key("TargetAttributeName").string(var_1437);
    }
}

pub fn serialize_structure_auto_ml_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLOutputDataConfig,
) {
    if let Some(var_1438) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1438);
    }
    if let Some(var_1439) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1439);
    }
}

pub fn serialize_structure_auto_ml_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLJobObjective,
) {
    if let Some(var_1440) = &input.metric_name {
        object.key("MetricName").string(var_1440.as_str());
    }
}

pub fn serialize_structure_auto_ml_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLJobConfig,
) {
    if let Some(var_1441) = &input.completion_criteria {
        let mut object_1442 = object.key("CompletionCriteria").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_completion_criteria(
            &mut object_1442,
            var_1441,
        );
        object_1442.finish();
    }
    if let Some(var_1443) = &input.security_config {
        let mut object_1444 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_security_config(&mut object_1444, var_1443);
        object_1444.finish();
    }
}

pub fn serialize_structure_model_deploy_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDeployConfig,
) {
    if input.auto_generate_endpoint_name {
        object
            .key("AutoGenerateEndpointName")
            .boolean(input.auto_generate_endpoint_name);
    }
    if let Some(var_1445) = &input.endpoint_name {
        object.key("EndpointName").string(var_1445);
    }
}

pub fn serialize_structure_git_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfig,
) {
    if let Some(var_1446) = &input.repository_url {
        object.key("RepositoryUrl").string(var_1446);
    }
    if let Some(var_1447) = &input.branch {
        object.key("Branch").string(var_1447);
    }
    if let Some(var_1448) = &input.secret_arn {
        object.key("SecretArn").string(var_1448);
    }
}

pub fn serialize_structure_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputConfig,
) {
    if let Some(var_1449) = &input.s3_uri {
        object.key("S3Uri").string(var_1449);
    }
    if let Some(var_1450) = &input.data_input_config {
        object.key("DataInputConfig").string(var_1450);
    }
    if let Some(var_1451) = &input.framework {
        object.key("Framework").string(var_1451.as_str());
    }
    if let Some(var_1452) = &input.framework_version {
        object.key("FrameworkVersion").string(var_1452);
    }
}

pub fn serialize_structure_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) {
    if let Some(var_1453) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1453);
    }
    if let Some(var_1454) = &input.target_device {
        object.key("TargetDevice").string(var_1454.as_str());
    }
    if let Some(var_1455) = &input.target_platform {
        let mut object_1456 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_target_platform(&mut object_1456, var_1455);
        object_1456.finish();
    }
    if let Some(var_1457) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1457);
    }
    if let Some(var_1458) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1458);
    }
}

pub fn serialize_structure_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoppingCondition,
) {
    if input.max_runtime_in_seconds != 0 {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    if let Some(var_1459) = &input.max_wait_time_in_seconds {
        object.key("MaxWaitTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1459).into()),
        );
    }
}

pub fn serialize_structure_context_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContextSource,
) {
    if let Some(var_1460) = &input.source_uri {
        object.key("SourceUri").string(var_1460);
    }
    if let Some(var_1461) = &input.source_type {
        object.key("SourceType").string(var_1461);
    }
    if let Some(var_1462) = &input.source_id {
        object.key("SourceId").string(var_1462);
    }
}

pub fn serialize_structure_data_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityBaselineConfig,
) {
    if let Some(var_1463) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1463);
    }
    if let Some(var_1464) = &input.constraints_resource {
        let mut object_1465 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1465,
            var_1464,
        );
        object_1465.finish();
    }
    if let Some(var_1466) = &input.statistics_resource {
        let mut object_1467 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_statistics_resource(
            &mut object_1467,
            var_1466,
        );
        object_1467.finish();
    }
}

pub fn serialize_structure_data_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityAppSpecification,
) {
    if let Some(var_1468) = &input.image_uri {
        object.key("ImageUri").string(var_1468);
    }
    if let Some(var_1469) = &input.container_entrypoint {
        let mut array_1470 = object.key("ContainerEntrypoint").start_array();
        for item_1471 in var_1469 {
            {
                array_1470.value().string(item_1471);
            }
        }
        array_1470.finish();
    }
    if let Some(var_1472) = &input.container_arguments {
        let mut array_1473 = object.key("ContainerArguments").start_array();
        for item_1474 in var_1472 {
            {
                array_1473.value().string(item_1474);
            }
        }
        array_1473.finish();
    }
    if let Some(var_1475) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1475);
    }
    if let Some(var_1476) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1476);
    }
    if let Some(var_1477) = &input.environment {
        let mut object_1478 = object.key("Environment").start_object();
        for (key_1479, value_1480) in var_1477 {
            {
                object_1478.key(key_1479).string(value_1480);
            }
        }
        object_1478.finish();
    }
}

pub fn serialize_structure_data_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityJobInput,
) {
    if let Some(var_1481) = &input.endpoint_input {
        let mut object_1482 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1482, var_1481);
        object_1482.finish();
    }
}

pub fn serialize_structure_monitoring_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutputConfig,
) {
    if let Some(var_1483) = &input.monitoring_outputs {
        let mut array_1484 = object.key("MonitoringOutputs").start_array();
        for item_1485 in var_1483 {
            {
                let mut object_1486 = array_1484.value().start_object();
                crate::json_ser::serialize_structure_monitoring_output(&mut object_1486, item_1485);
                object_1486.finish();
            }
        }
        array_1484.finish();
    }
    if let Some(var_1487) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1487);
    }
}

pub fn serialize_structure_monitoring_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringResources,
) {
    if let Some(var_1488) = &input.cluster_config {
        let mut object_1489 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_cluster_config(&mut object_1489, var_1488);
        object_1489.finish();
    }
}

pub fn serialize_structure_monitoring_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringNetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1490) = &input.vpc_config {
        let mut object_1491 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1491, var_1490);
        object_1491.finish();
    }
}

pub fn serialize_structure_monitoring_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_edge_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeOutputConfig,
) {
    if let Some(var_1492) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1492);
    }
    if let Some(var_1493) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1493);
    }
    if let Some(var_1494) = &input.preset_deployment_type {
        object.key("PresetDeploymentType").string(var_1494.as_str());
    }
    if let Some(var_1495) = &input.preset_deployment_config {
        object.key("PresetDeploymentConfig").string(var_1495);
    }
}

pub fn serialize_structure_user_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSettings,
) {
    if let Some(var_1496) = &input.execution_role {
        object.key("ExecutionRole").string(var_1496);
    }
    if let Some(var_1497) = &input.security_groups {
        let mut array_1498 = object.key("SecurityGroups").start_array();
        for item_1499 in var_1497 {
            {
                array_1498.value().string(item_1499);
            }
        }
        array_1498.finish();
    }
    if let Some(var_1500) = &input.sharing_settings {
        let mut object_1501 = object.key("SharingSettings").start_object();
        crate::json_ser::serialize_structure_sharing_settings(&mut object_1501, var_1500);
        object_1501.finish();
    }
    if let Some(var_1502) = &input.jupyter_server_app_settings {
        let mut object_1503 = object.key("JupyterServerAppSettings").start_object();
        crate::json_ser::serialize_structure_jupyter_server_app_settings(
            &mut object_1503,
            var_1502,
        );
        object_1503.finish();
    }
    if let Some(var_1504) = &input.kernel_gateway_app_settings {
        let mut object_1505 = object.key("KernelGatewayAppSettings").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_app_settings(
            &mut object_1505,
            var_1504,
        );
        object_1505.finish();
    }
    if let Some(var_1506) = &input.tensor_board_app_settings {
        let mut object_1507 = object.key("TensorBoardAppSettings").start_object();
        crate::json_ser::serialize_structure_tensor_board_app_settings(&mut object_1507, var_1506);
        object_1507.finish();
    }
}

pub fn serialize_structure_production_variant(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariant,
) {
    if let Some(var_1508) = &input.variant_name {
        object.key("VariantName").string(var_1508);
    }
    if let Some(var_1509) = &input.model_name {
        object.key("ModelName").string(var_1509);
    }
    if let Some(var_1510) = &input.initial_instance_count {
        object.key("InitialInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1510).into()),
        );
    }
    if let Some(var_1511) = &input.instance_type {
        object.key("InstanceType").string(var_1511.as_str());
    }
    if let Some(var_1512) = &input.initial_variant_weight {
        object.key("InitialVariantWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1512).into()),
        );
    }
    if let Some(var_1513) = &input.accelerator_type {
        object.key("AcceleratorType").string(var_1513.as_str());
    }
    if let Some(var_1514) = &input.core_dump_config {
        let mut object_1515 = object.key("CoreDumpConfig").start_object();
        crate::json_ser::serialize_structure_production_variant_core_dump_config(
            &mut object_1515,
            var_1514,
        );
        object_1515.finish();
    }
}

pub fn serialize_structure_data_capture_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCaptureConfig,
) {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1516) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1516).into()),
        );
    }
    if let Some(var_1517) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1517);
    }
    if let Some(var_1518) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1518);
    }
    if let Some(var_1519) = &input.capture_options {
        let mut array_1520 = object.key("CaptureOptions").start_array();
        for item_1521 in var_1519 {
            {
                let mut object_1522 = array_1520.value().start_object();
                crate::json_ser::serialize_structure_capture_option(&mut object_1522, item_1521);
                object_1522.finish();
            }
        }
        array_1520.finish();
    }
    if let Some(var_1523) = &input.capture_content_type_header {
        let mut object_1524 = object.key("CaptureContentTypeHeader").start_object();
        crate::json_ser::serialize_structure_capture_content_type_header(
            &mut object_1524,
            var_1523,
        );
        object_1524.finish();
    }
}

pub fn serialize_structure_feature_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureDefinition,
) {
    if let Some(var_1525) = &input.feature_name {
        object.key("FeatureName").string(var_1525);
    }
    if let Some(var_1526) = &input.feature_type {
        object.key("FeatureType").string(var_1526.as_str());
    }
}

pub fn serialize_structure_online_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreConfig,
) {
    if let Some(var_1527) = &input.security_config {
        let mut object_1528 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_online_store_security_config(
            &mut object_1528,
            var_1527,
        );
        object_1528.finish();
    }
    if input.enable_online_store {
        object
            .key("EnableOnlineStore")
            .boolean(input.enable_online_store);
    }
}

pub fn serialize_structure_offline_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OfflineStoreConfig,
) {
    if let Some(var_1529) = &input.s3_storage_config {
        let mut object_1530 = object.key("S3StorageConfig").start_object();
        crate::json_ser::serialize_structure_s3_storage_config(&mut object_1530, var_1529);
        object_1530.finish();
    }
    if input.disable_glue_table_creation {
        object
            .key("DisableGlueTableCreation")
            .boolean(input.disable_glue_table_creation);
    }
    if let Some(var_1531) = &input.data_catalog_config {
        let mut object_1532 = object.key("DataCatalogConfig").start_object();
        crate::json_ser::serialize_structure_data_catalog_config(&mut object_1532, var_1531);
        object_1532.finish();
    }
}

pub fn serialize_structure_human_loop_request_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopRequestSource,
) {
    if let Some(var_1533) = &input.aws_managed_human_loop_request_source {
        object
            .key("AwsManagedHumanLoopRequestSource")
            .string(var_1533.as_str());
    }
}

pub fn serialize_structure_human_loop_activation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConfig,
) {
    if let Some(var_1534) = &input.human_loop_activation_conditions_config {
        let mut object_1535 = object
            .key("HumanLoopActivationConditionsConfig")
            .start_object();
        crate::json_ser::serialize_structure_human_loop_activation_conditions_config(
            &mut object_1535,
            var_1534,
        );
        object_1535.finish();
    }
}

pub fn serialize_structure_human_loop_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) {
    if let Some(var_1536) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1536);
    }
    if let Some(var_1537) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1537);
    }
    if let Some(var_1538) = &input.task_title {
        object.key("TaskTitle").string(var_1538);
    }
    if let Some(var_1539) = &input.task_description {
        object.key("TaskDescription").string(var_1539);
    }
    if let Some(var_1540) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1540).into()),
        );
    }
    if let Some(var_1541) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1541).into()),
        );
    }
    if let Some(var_1542) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1542).into()),
        );
    }
    if let Some(var_1543) = &input.task_keywords {
        let mut array_1544 = object.key("TaskKeywords").start_array();
        for item_1545 in var_1543 {
            {
                array_1544.value().string(item_1545);
            }
        }
        array_1544.finish();
    }
    if let Some(var_1546) = &input.public_workforce_task_price {
        let mut object_1547 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_public_workforce_task_price(
            &mut object_1547,
            var_1546,
        );
        object_1547.finish();
    }
}

pub fn serialize_structure_flow_definition_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinitionOutputConfig,
) {
    if let Some(var_1548) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1548);
    }
    if let Some(var_1549) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1549);
    }
}

pub fn serialize_structure_ui_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiTemplate,
) {
    if let Some(var_1550) = &input.content {
        object.key("Content").string(var_1550);
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) {
    if let Some(var_1551) = &input.strategy {
        object.key("Strategy").string(var_1551.as_str());
    }
    if let Some(var_1552) = &input.hyper_parameter_tuning_job_objective {
        let mut object_1553 = object
            .key("HyperParameterTuningJobObjective")
            .start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
            &mut object_1553,
            var_1552,
        );
        object_1553.finish();
    }
    if let Some(var_1554) = &input.resource_limits {
        let mut object_1555 = object.key("ResourceLimits").start_object();
        crate::json_ser::serialize_structure_resource_limits(&mut object_1555, var_1554);
        object_1555.finish();
    }
    if let Some(var_1556) = &input.parameter_ranges {
        let mut object_1557 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_parameter_ranges(&mut object_1557, var_1556);
        object_1557.finish();
    }
    if let Some(var_1558) = &input.training_job_early_stopping_type {
        object
            .key("TrainingJobEarlyStoppingType")
            .string(var_1558.as_str());
    }
    if let Some(var_1559) = &input.tuning_job_completion_criteria {
        let mut object_1560 = object.key("TuningJobCompletionCriteria").start_object();
        crate::json_ser::serialize_structure_tuning_job_completion_criteria(
            &mut object_1560,
            var_1559,
        );
        object_1560.finish();
    }
}

pub fn serialize_structure_hyper_parameter_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTrainingJobDefinition,
) {
    if let Some(var_1561) = &input.definition_name {
        object.key("DefinitionName").string(var_1561);
    }
    if let Some(var_1562) = &input.tuning_objective {
        let mut object_1563 = object.key("TuningObjective").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
            &mut object_1563,
            var_1562,
        );
        object_1563.finish();
    }
    if let Some(var_1564) = &input.hyper_parameter_ranges {
        let mut object_1565 = object.key("HyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_parameter_ranges(&mut object_1565, var_1564);
        object_1565.finish();
    }
    if let Some(var_1566) = &input.static_hyper_parameters {
        let mut object_1567 = object.key("StaticHyperParameters").start_object();
        for (key_1568, value_1569) in var_1566 {
            {
                object_1567.key(key_1568).string(value_1569);
            }
        }
        object_1567.finish();
    }
    if let Some(var_1570) = &input.algorithm_specification {
        let mut object_1571 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_algorithm_specification(
            &mut object_1571,
            var_1570,
        );
        object_1571.finish();
    }
    if let Some(var_1572) = &input.role_arn {
        object.key("RoleArn").string(var_1572);
    }
    if let Some(var_1573) = &input.input_data_config {
        let mut array_1574 = object.key("InputDataConfig").start_array();
        for item_1575 in var_1573 {
            {
                let mut object_1576 = array_1574.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_1576, item_1575);
                object_1576.finish();
            }
        }
        array_1574.finish();
    }
    if let Some(var_1577) = &input.vpc_config {
        let mut object_1578 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1578, var_1577);
        object_1578.finish();
    }
    if let Some(var_1579) = &input.output_data_config {
        let mut object_1580 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_1580, var_1579);
        object_1580.finish();
    }
    if let Some(var_1581) = &input.resource_config {
        let mut object_1582 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_1582, var_1581);
        object_1582.finish();
    }
    if let Some(var_1583) = &input.stopping_condition {
        let mut object_1584 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_1584, var_1583);
        object_1584.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_1585) = &input.checkpoint_config {
        let mut object_1586 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_checkpoint_config(&mut object_1586, var_1585);
        object_1586.finish();
    }
    if let Some(var_1587) = &input.retry_strategy {
        let mut object_1588 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_1588, var_1587);
        object_1588.finish();
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_warm_start_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobWarmStartConfig,
) {
    if let Some(var_1589) = &input.parent_hyper_parameter_tuning_jobs {
        let mut array_1590 = object.key("ParentHyperParameterTuningJobs").start_array();
        for item_1591 in var_1589 {
            {
                let mut object_1592 = array_1590.value().start_object();
                crate::json_ser::serialize_structure_parent_hyper_parameter_tuning_job(
                    &mut object_1592,
                    item_1591,
                );
                object_1592.finish();
            }
        }
        array_1590.finish();
    }
    if let Some(var_1593) = &input.warm_start_type {
        object.key("WarmStartType").string(var_1593.as_str());
    }
}

pub fn serialize_structure_labeling_job_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobInputConfig,
) {
    if let Some(var_1594) = &input.data_source {
        let mut object_1595 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_data_source(&mut object_1595, var_1594);
        object_1595.finish();
    }
    if let Some(var_1596) = &input.data_attributes {
        let mut object_1597 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_labeling_job_data_attributes(
            &mut object_1597,
            var_1596,
        );
        object_1597.finish();
    }
}

pub fn serialize_structure_labeling_job_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobOutputConfig,
) {
    if let Some(var_1598) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1598);
    }
    if let Some(var_1599) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1599);
    }
    if let Some(var_1600) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1600);
    }
}

pub fn serialize_structure_labeling_job_stopping_conditions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobStoppingConditions,
) {
    if let Some(var_1601) = &input.max_human_labeled_object_count {
        object.key("MaxHumanLabeledObjectCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1601).into()),
        );
    }
    if let Some(var_1602) = &input.max_percentage_of_input_dataset_labeled {
        object.key("MaxPercentageOfInputDatasetLabeled").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1602).into()),
        );
    }
}

pub fn serialize_structure_labeling_job_algorithms_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobAlgorithmsConfig,
) {
    if let Some(var_1603) = &input.labeling_job_algorithm_specification_arn {
        object
            .key("LabelingJobAlgorithmSpecificationArn")
            .string(var_1603);
    }
    if let Some(var_1604) = &input.initial_active_learning_model_arn {
        object.key("InitialActiveLearningModelArn").string(var_1604);
    }
    if let Some(var_1605) = &input.labeling_job_resource_config {
        let mut object_1606 = object.key("LabelingJobResourceConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_resource_config(
            &mut object_1606,
            var_1605,
        );
        object_1606.finish();
    }
}

pub fn serialize_structure_human_task_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanTaskConfig,
) {
    if let Some(var_1607) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1607);
    }
    if let Some(var_1608) = &input.ui_config {
        let mut object_1609 = object.key("UiConfig").start_object();
        crate::json_ser::serialize_structure_ui_config(&mut object_1609, var_1608);
        object_1609.finish();
    }
    if let Some(var_1610) = &input.pre_human_task_lambda_arn {
        object.key("PreHumanTaskLambdaArn").string(var_1610);
    }
    if let Some(var_1611) = &input.task_keywords {
        let mut array_1612 = object.key("TaskKeywords").start_array();
        for item_1613 in var_1611 {
            {
                array_1612.value().string(item_1613);
            }
        }
        array_1612.finish();
    }
    if let Some(var_1614) = &input.task_title {
        object.key("TaskTitle").string(var_1614);
    }
    if let Some(var_1615) = &input.task_description {
        object.key("TaskDescription").string(var_1615);
    }
    if let Some(var_1616) = &input.number_of_human_workers_per_data_object {
        object.key("NumberOfHumanWorkersPerDataObject").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1616).into()),
        );
    }
    if let Some(var_1617) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1617).into()),
        );
    }
    if let Some(var_1618) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1618).into()),
        );
    }
    if let Some(var_1619) = &input.max_concurrent_task_count {
        object.key("MaxConcurrentTaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1619).into()),
        );
    }
    if let Some(var_1620) = &input.annotation_consolidation_config {
        let mut object_1621 = object.key("AnnotationConsolidationConfig").start_object();
        crate::json_ser::serialize_structure_annotation_consolidation_config(
            &mut object_1621,
            var_1620,
        );
        object_1621.finish();
    }
    if let Some(var_1622) = &input.public_workforce_task_price {
        let mut object_1623 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_public_workforce_task_price(
            &mut object_1623,
            var_1622,
        );
        object_1623.finish();
    }
}

pub fn serialize_structure_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) {
    if let Some(var_1624) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1624);
    }
    if let Some(var_1625) = &input.image {
        object.key("Image").string(var_1625);
    }
    if let Some(var_1626) = &input.image_config {
        let mut object_1627 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_image_config(&mut object_1627, var_1626);
        object_1627.finish();
    }
    if let Some(var_1628) = &input.mode {
        object.key("Mode").string(var_1628.as_str());
    }
    if let Some(var_1629) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1629);
    }
    if let Some(var_1630) = &input.environment {
        let mut object_1631 = object.key("Environment").start_object();
        for (key_1632, value_1633) in var_1630 {
            {
                object_1631.key(key_1632).string(value_1633);
            }
        }
        object_1631.finish();
    }
    if let Some(var_1634) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1634);
    }
    if let Some(var_1635) = &input.multi_model_config {
        let mut object_1636 = object.key("MultiModelConfig").start_object();
        crate::json_ser::serialize_structure_multi_model_config(&mut object_1636, var_1635);
        object_1636.finish();
    }
}

pub fn serialize_structure_inference_execution_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceExecutionConfig,
) {
    if let Some(var_1637) = &input.mode {
        object.key("Mode").string(var_1637.as_str());
    }
}

pub fn serialize_structure_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_1638) = &input.security_group_ids {
        let mut array_1639 = object.key("SecurityGroupIds").start_array();
        for item_1640 in var_1638 {
            {
                array_1639.value().string(item_1640);
            }
        }
        array_1639.finish();
    }
    if let Some(var_1641) = &input.subnets {
        let mut array_1642 = object.key("Subnets").start_array();
        for item_1643 in var_1641 {
            {
                array_1642.value().string(item_1643);
            }
        }
        array_1642.finish();
    }
}

pub fn serialize_structure_model_bias_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasBaselineConfig,
) {
    if let Some(var_1644) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1644);
    }
    if let Some(var_1645) = &input.constraints_resource {
        let mut object_1646 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1646,
            var_1645,
        );
        object_1646.finish();
    }
}

pub fn serialize_structure_model_bias_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasAppSpecification,
) {
    if let Some(var_1647) = &input.image_uri {
        object.key("ImageUri").string(var_1647);
    }
    if let Some(var_1648) = &input.config_uri {
        object.key("ConfigUri").string(var_1648);
    }
    if let Some(var_1649) = &input.environment {
        let mut object_1650 = object.key("Environment").start_object();
        for (key_1651, value_1652) in var_1649 {
            {
                object_1650.key(key_1651).string(value_1652);
            }
        }
        object_1650.finish();
    }
}

pub fn serialize_structure_model_bias_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasJobInput,
) {
    if let Some(var_1653) = &input.endpoint_input {
        let mut object_1654 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1654, var_1653);
        object_1654.finish();
    }
    if let Some(var_1655) = &input.ground_truth_s3_input {
        let mut object_1656 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_monitoring_ground_truth_s3_input(
            &mut object_1656,
            var_1655,
        );
        object_1656.finish();
    }
}

pub fn serialize_structure_model_explainability_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityBaselineConfig,
) {
    if let Some(var_1657) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1657);
    }
    if let Some(var_1658) = &input.constraints_resource {
        let mut object_1659 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1659,
            var_1658,
        );
        object_1659.finish();
    }
}

pub fn serialize_structure_model_explainability_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityAppSpecification,
) {
    if let Some(var_1660) = &input.image_uri {
        object.key("ImageUri").string(var_1660);
    }
    if let Some(var_1661) = &input.config_uri {
        object.key("ConfigUri").string(var_1661);
    }
    if let Some(var_1662) = &input.environment {
        let mut object_1663 = object.key("Environment").start_object();
        for (key_1664, value_1665) in var_1662 {
            {
                object_1663.key(key_1664).string(value_1665);
            }
        }
        object_1663.finish();
    }
}

pub fn serialize_structure_model_explainability_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityJobInput,
) {
    if let Some(var_1666) = &input.endpoint_input {
        let mut object_1667 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1667, var_1666);
        object_1667.finish();
    }
}

pub fn serialize_structure_model_package_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationSpecification,
) {
    if let Some(var_1668) = &input.validation_role {
        object.key("ValidationRole").string(var_1668);
    }
    if let Some(var_1669) = &input.validation_profiles {
        let mut array_1670 = object.key("ValidationProfiles").start_array();
        for item_1671 in var_1669 {
            {
                let mut object_1672 = array_1670.value().start_object();
                crate::json_ser::serialize_structure_model_package_validation_profile(
                    &mut object_1672,
                    item_1671,
                );
                object_1672.finish();
            }
        }
        array_1670.finish();
    }
}

pub fn serialize_structure_source_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithmSpecification,
) {
    if let Some(var_1673) = &input.source_algorithms {
        let mut array_1674 = object.key("SourceAlgorithms").start_array();
        for item_1675 in var_1673 {
            {
                let mut object_1676 = array_1674.value().start_object();
                crate::json_ser::serialize_structure_source_algorithm(&mut object_1676, item_1675);
                object_1676.finish();
            }
        }
        array_1674.finish();
    }
}

pub fn serialize_structure_model_metrics(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetrics,
) {
    if let Some(var_1677) = &input.model_quality {
        let mut object_1678 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_model_quality(&mut object_1678, var_1677);
        object_1678.finish();
    }
    if let Some(var_1679) = &input.model_data_quality {
        let mut object_1680 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_model_data_quality(&mut object_1680, var_1679);
        object_1680.finish();
    }
    if let Some(var_1681) = &input.bias {
        let mut object_1682 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_bias(&mut object_1682, var_1681);
        object_1682.finish();
    }
    if let Some(var_1683) = &input.explainability {
        let mut object_1684 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_explainability(&mut object_1684, var_1683);
        object_1684.finish();
    }
}

pub fn serialize_structure_model_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityBaselineConfig,
) {
    if let Some(var_1685) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1685);
    }
    if let Some(var_1686) = &input.constraints_resource {
        let mut object_1687 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1687,
            var_1686,
        );
        object_1687.finish();
    }
}

pub fn serialize_structure_model_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityAppSpecification,
) {
    if let Some(var_1688) = &input.image_uri {
        object.key("ImageUri").string(var_1688);
    }
    if let Some(var_1689) = &input.container_entrypoint {
        let mut array_1690 = object.key("ContainerEntrypoint").start_array();
        for item_1691 in var_1689 {
            {
                array_1690.value().string(item_1691);
            }
        }
        array_1690.finish();
    }
    if let Some(var_1692) = &input.container_arguments {
        let mut array_1693 = object.key("ContainerArguments").start_array();
        for item_1694 in var_1692 {
            {
                array_1693.value().string(item_1694);
            }
        }
        array_1693.finish();
    }
    if let Some(var_1695) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1695);
    }
    if let Some(var_1696) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1696);
    }
    if let Some(var_1697) = &input.problem_type {
        object.key("ProblemType").string(var_1697.as_str());
    }
    if let Some(var_1698) = &input.environment {
        let mut object_1699 = object.key("Environment").start_object();
        for (key_1700, value_1701) in var_1698 {
            {
                object_1699.key(key_1700).string(value_1701);
            }
        }
        object_1699.finish();
    }
}

pub fn serialize_structure_model_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityJobInput,
) {
    if let Some(var_1702) = &input.endpoint_input {
        let mut object_1703 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1703, var_1702);
        object_1703.finish();
    }
    if let Some(var_1704) = &input.ground_truth_s3_input {
        let mut object_1705 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_monitoring_ground_truth_s3_input(
            &mut object_1705,
            var_1704,
        );
        object_1705.finish();
    }
}

pub fn serialize_structure_monitoring_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringScheduleConfig,
) {
    if let Some(var_1706) = &input.schedule_config {
        let mut object_1707 = object.key("ScheduleConfig").start_object();
        crate::json_ser::serialize_structure_schedule_config(&mut object_1707, var_1706);
        object_1707.finish();
    }
    if let Some(var_1708) = &input.monitoring_job_definition {
        let mut object_1709 = object.key("MonitoringJobDefinition").start_object();
        crate::json_ser::serialize_structure_monitoring_job_definition(&mut object_1709, var_1708);
        object_1709.finish();
    }
    if let Some(var_1710) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1710);
    }
    if let Some(var_1711) = &input.monitoring_type {
        object.key("MonitoringType").string(var_1711.as_str());
    }
}

pub fn serialize_structure_notebook_instance_lifecycle_hook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotebookInstanceLifecycleHook,
) {
    if let Some(var_1712) = &input.content {
        object.key("Content").string(var_1712);
    }
}

pub fn serialize_structure_processing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingInput,
) {
    if let Some(var_1713) = &input.input_name {
        object.key("InputName").string(var_1713);
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    if let Some(var_1714) = &input.s3_input {
        let mut object_1715 = object.key("S3Input").start_object();
        crate::json_ser::serialize_structure_processing_s3_input(&mut object_1715, var_1714);
        object_1715.finish();
    }
    if let Some(var_1716) = &input.dataset_definition {
        let mut object_1717 = object.key("DatasetDefinition").start_object();
        crate::json_ser::serialize_structure_dataset_definition(&mut object_1717, var_1716);
        object_1717.finish();
    }
}

pub fn serialize_structure_processing_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutputConfig,
) {
    if let Some(var_1718) = &input.outputs {
        let mut array_1719 = object.key("Outputs").start_array();
        for item_1720 in var_1718 {
            {
                let mut object_1721 = array_1719.value().start_object();
                crate::json_ser::serialize_structure_processing_output(&mut object_1721, item_1720);
                object_1721.finish();
            }
        }
        array_1719.finish();
    }
    if let Some(var_1722) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1722);
    }
}

pub fn serialize_structure_processing_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingResources,
) {
    if let Some(var_1723) = &input.cluster_config {
        let mut object_1724 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_processing_cluster_config(&mut object_1724, var_1723);
        object_1724.finish();
    }
}

pub fn serialize_structure_processing_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppSpecification,
) {
    if let Some(var_1725) = &input.image_uri {
        object.key("ImageUri").string(var_1725);
    }
    if let Some(var_1726) = &input.container_entrypoint {
        let mut array_1727 = object.key("ContainerEntrypoint").start_array();
        for item_1728 in var_1726 {
            {
                array_1727.value().string(item_1728);
            }
        }
        array_1727.finish();
    }
    if let Some(var_1729) = &input.container_arguments {
        let mut array_1730 = object.key("ContainerArguments").start_array();
        for item_1731 in var_1729 {
            {
                array_1730.value().string(item_1731);
            }
        }
        array_1730.finish();
    }
}

pub fn serialize_structure_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1732) = &input.vpc_config {
        let mut object_1733 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1733, var_1732);
        object_1733.finish();
    }
}

pub fn serialize_structure_experiment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperimentConfig,
) {
    if let Some(var_1734) = &input.experiment_name {
        object.key("ExperimentName").string(var_1734);
    }
    if let Some(var_1735) = &input.trial_name {
        object.key("TrialName").string(var_1735);
    }
    if let Some(var_1736) = &input.trial_component_display_name {
        object.key("TrialComponentDisplayName").string(var_1736);
    }
}

pub fn serialize_structure_service_catalog_provisioning_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningDetails,
) {
    if let Some(var_1737) = &input.product_id {
        object.key("ProductId").string(var_1737);
    }
    if let Some(var_1738) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_1738);
    }
    if let Some(var_1739) = &input.path_id {
        object.key("PathId").string(var_1739);
    }
    if let Some(var_1740) = &input.provisioning_parameters {
        let mut array_1741 = object.key("ProvisioningParameters").start_array();
        for item_1742 in var_1740 {
            {
                let mut object_1743 = array_1741.value().start_object();
                crate::json_ser::serialize_structure_provisioning_parameter(
                    &mut object_1743,
                    item_1742,
                );
                object_1743.finish();
            }
        }
        array_1741.finish();
    }
}

pub fn serialize_structure_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmSpecification,
) {
    if let Some(var_1744) = &input.training_image {
        object.key("TrainingImage").string(var_1744);
    }
    if let Some(var_1745) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_1745);
    }
    if let Some(var_1746) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_1746.as_str());
    }
    if let Some(var_1747) = &input.metric_definitions {
        let mut array_1748 = object.key("MetricDefinitions").start_array();
        for item_1749 in var_1747 {
            {
                let mut object_1750 = array_1748.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1750, item_1749);
                object_1750.finish();
            }
        }
        array_1748.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object
            .key("EnableSageMakerMetricsTimeSeries")
            .boolean(input.enable_sage_maker_metrics_time_series);
    }
}

pub fn serialize_structure_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Channel,
) {
    if let Some(var_1751) = &input.channel_name {
        object.key("ChannelName").string(var_1751);
    }
    if let Some(var_1752) = &input.data_source {
        let mut object_1753 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_data_source(&mut object_1753, var_1752);
        object_1753.finish();
    }
    if let Some(var_1754) = &input.content_type {
        object.key("ContentType").string(var_1754);
    }
    if let Some(var_1755) = &input.compression_type {
        object.key("CompressionType").string(var_1755.as_str());
    }
    if let Some(var_1756) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_1756.as_str());
    }
    if let Some(var_1757) = &input.input_mode {
        object.key("InputMode").string(var_1757.as_str());
    }
    if let Some(var_1758) = &input.shuffle_config {
        let mut object_1759 = object.key("ShuffleConfig").start_object();
        crate::json_ser::serialize_structure_shuffle_config(&mut object_1759, var_1758);
        object_1759.finish();
    }
}

pub fn serialize_structure_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) {
    if let Some(var_1760) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1760);
    }
    if let Some(var_1761) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1761);
    }
}

pub fn serialize_structure_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceConfig,
) {
    if let Some(var_1762) = &input.instance_type {
        object.key("InstanceType").string(var_1762.as_str());
    }
    {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1763) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1763);
    }
}

pub fn serialize_structure_checkpoint_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfig,
) {
    if let Some(var_1764) = &input.s3_uri {
        object.key("S3Uri").string(var_1764);
    }
    if let Some(var_1765) = &input.local_path {
        object.key("LocalPath").string(var_1765);
    }
}

pub fn serialize_structure_debug_hook_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugHookConfig,
) {
    if let Some(var_1766) = &input.local_path {
        object.key("LocalPath").string(var_1766);
    }
    if let Some(var_1767) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1767);
    }
    if let Some(var_1768) = &input.hook_parameters {
        let mut object_1769 = object.key("HookParameters").start_object();
        for (key_1770, value_1771) in var_1768 {
            {
                object_1769.key(key_1770).string(value_1771);
            }
        }
        object_1769.finish();
    }
    if let Some(var_1772) = &input.collection_configurations {
        let mut array_1773 = object.key("CollectionConfigurations").start_array();
        for item_1774 in var_1772 {
            {
                let mut object_1775 = array_1773.value().start_object();
                crate::json_ser::serialize_structure_collection_configuration(
                    &mut object_1775,
                    item_1774,
                );
                object_1775.finish();
            }
        }
        array_1773.finish();
    }
}

pub fn serialize_structure_debug_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugRuleConfiguration,
) {
    if let Some(var_1776) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1776);
    }
    if let Some(var_1777) = &input.local_path {
        object.key("LocalPath").string(var_1777);
    }
    if let Some(var_1778) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1778);
    }
    if let Some(var_1779) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1779);
    }
    if let Some(var_1780) = &input.instance_type {
        object.key("InstanceType").string(var_1780.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1781) = &input.rule_parameters {
        let mut object_1782 = object.key("RuleParameters").start_object();
        for (key_1783, value_1784) in var_1781 {
            {
                object_1782.key(key_1783).string(value_1784);
            }
        }
        object_1782.finish();
    }
}

pub fn serialize_structure_tensor_board_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardOutputConfig,
) {
    if let Some(var_1785) = &input.local_path {
        object.key("LocalPath").string(var_1785);
    }
    if let Some(var_1786) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1786);
    }
}

pub fn serialize_structure_profiler_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfig,
) {
    if let Some(var_1787) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1787);
    }
    if let Some(var_1788) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1788).into()),
        );
    }
    if let Some(var_1789) = &input.profiling_parameters {
        let mut object_1790 = object.key("ProfilingParameters").start_object();
        for (key_1791, value_1792) in var_1789 {
            {
                object_1790.key(key_1791).string(value_1792);
            }
        }
        object_1790.finish();
    }
}

pub fn serialize_structure_profiler_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerRuleConfiguration,
) {
    if let Some(var_1793) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1793);
    }
    if let Some(var_1794) = &input.local_path {
        object.key("LocalPath").string(var_1794);
    }
    if let Some(var_1795) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1795);
    }
    if let Some(var_1796) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1796);
    }
    if let Some(var_1797) = &input.instance_type {
        object.key("InstanceType").string(var_1797.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1798) = &input.rule_parameters {
        let mut object_1799 = object.key("RuleParameters").start_object();
        for (key_1800, value_1801) in var_1798 {
            {
                object_1799.key(key_1800).string(value_1801);
            }
        }
        object_1799.finish();
    }
}

pub fn serialize_structure_retry_strategy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) {
    {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_retry_attempts).into()),
        );
    }
}

pub fn serialize_structure_model_client_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelClientConfig,
) {
    if let Some(var_1802) = &input.invocations_timeout_in_seconds {
        object.key("InvocationsTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1802).into()),
        );
    }
    if let Some(var_1803) = &input.invocations_max_retries {
        object.key("InvocationsMaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1803).into()),
        );
    }
}

pub fn serialize_structure_transform_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformInput,
) {
    if let Some(var_1804) = &input.data_source {
        let mut object_1805 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_transform_data_source(&mut object_1805, var_1804);
        object_1805.finish();
    }
    if let Some(var_1806) = &input.content_type {
        object.key("ContentType").string(var_1806);
    }
    if let Some(var_1807) = &input.compression_type {
        object.key("CompressionType").string(var_1807.as_str());
    }
    if let Some(var_1808) = &input.split_type {
        object.key("SplitType").string(var_1808.as_str());
    }
}

pub fn serialize_structure_transform_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOutput,
) {
    if let Some(var_1809) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1809);
    }
    if let Some(var_1810) = &input.accept {
        object.key("Accept").string(var_1810);
    }
    if let Some(var_1811) = &input.assemble_with {
        object.key("AssembleWith").string(var_1811.as_str());
    }
    if let Some(var_1812) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1812);
    }
}

pub fn serialize_structure_transform_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformResources,
) {
    if let Some(var_1813) = &input.instance_type {
        object.key("InstanceType").string(var_1813.as_str());
    }
    if let Some(var_1814) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1814).into()),
        );
    }
    if let Some(var_1815) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1815);
    }
}

pub fn serialize_structure_data_processing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataProcessing,
) {
    if let Some(var_1816) = &input.input_filter {
        object.key("InputFilter").string(var_1816);
    }
    if let Some(var_1817) = &input.output_filter {
        object.key("OutputFilter").string(var_1817);
    }
    if let Some(var_1818) = &input.join_source {
        object.key("JoinSource").string(var_1818.as_str());
    }
}

pub fn serialize_structure_trial_component_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentStatus,
) {
    if let Some(var_1819) = &input.primary_status {
        object.key("PrimaryStatus").string(var_1819.as_str());
    }
    if let Some(var_1820) = &input.message {
        object.key("Message").string(var_1820);
    }
}

pub fn serialize_union_trial_component_parameter_value(
    object_567: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentParameterValue,
) {
    match input {
        crate::model::TrialComponentParameterValue::StringValue(inner) => {
            object_567.key("StringValue").string(inner);
        }
        crate::model::TrialComponentParameterValue::NumberValue(inner) => {
            object_567.key("NumberValue").number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::Float((*inner).into()),
            );
        }
    }
}

pub fn serialize_structure_trial_component_artifact(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentArtifact,
) {
    if let Some(var_1821) = &input.media_type {
        object.key("MediaType").string(var_1821);
    }
    if let Some(var_1822) = &input.value {
        object.key("Value").string(var_1822);
    }
}

pub fn serialize_structure_cognito_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoConfig,
) {
    if let Some(var_1823) = &input.user_pool {
        object.key("UserPool").string(var_1823);
    }
    if let Some(var_1824) = &input.client_id {
        object.key("ClientId").string(var_1824);
    }
}

pub fn serialize_structure_oidc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcConfig,
) {
    if let Some(var_1825) = &input.client_id {
        object.key("ClientId").string(var_1825);
    }
    if let Some(var_1826) = &input.client_secret {
        object.key("ClientSecret").string(var_1826);
    }
    if let Some(var_1827) = &input.issuer {
        object.key("Issuer").string(var_1827);
    }
    if let Some(var_1828) = &input.authorization_endpoint {
        object.key("AuthorizationEndpoint").string(var_1828);
    }
    if let Some(var_1829) = &input.token_endpoint {
        object.key("TokenEndpoint").string(var_1829);
    }
    if let Some(var_1830) = &input.user_info_endpoint {
        object.key("UserInfoEndpoint").string(var_1830);
    }
    if let Some(var_1831) = &input.logout_endpoint {
        object.key("LogoutEndpoint").string(var_1831);
    }
    if let Some(var_1832) = &input.jwks_uri {
        object.key("JwksUri").string(var_1832);
    }
}

pub fn serialize_structure_source_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceIpConfig,
) {
    if let Some(var_1833) = &input.cidrs {
        let mut array_1834 = object.key("Cidrs").start_array();
        for item_1835 in var_1833 {
            {
                array_1834.value().string(item_1835);
            }
        }
        array_1834.finish();
    }
}

pub fn serialize_structure_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberDefinition,
) {
    if let Some(var_1836) = &input.cognito_member_definition {
        let mut object_1837 = object.key("CognitoMemberDefinition").start_object();
        crate::json_ser::serialize_structure_cognito_member_definition(&mut object_1837, var_1836);
        object_1837.finish();
    }
    if let Some(var_1838) = &input.oidc_member_definition {
        let mut object_1839 = object.key("OidcMemberDefinition").start_object();
        crate::json_ser::serialize_structure_oidc_member_definition(&mut object_1839, var_1838);
        object_1839.finish();
    }
}

pub fn serialize_structure_notification_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfiguration,
) {
    if let Some(var_1840) = &input.notification_topic_arn {
        object.key("NotificationTopicArn").string(var_1840);
    }
}

pub fn serialize_structure_retention_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionPolicy,
) {
    if let Some(var_1841) = &input.home_efs_file_system {
        object.key("HomeEfsFileSystem").string(var_1841.as_str());
    }
}

pub fn serialize_structure_suggestion_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuggestionQuery,
) {
    if let Some(var_1842) = &input.property_name_query {
        let mut object_1843 = object.key("PropertyNameQuery").start_object();
        crate::json_ser::serialize_structure_property_name_query(&mut object_1843, var_1842);
        object_1843.finish();
    }
}

pub fn serialize_structure_device(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) {
    if let Some(var_1844) = &input.device_name {
        object.key("DeviceName").string(var_1844);
    }
    if let Some(var_1845) = &input.description {
        object.key("Description").string(var_1845);
    }
    if let Some(var_1846) = &input.iot_thing_name {
        object.key("IotThingName").string(var_1846);
    }
}

pub fn serialize_structure_renderable_task(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenderableTask,
) {
    if let Some(var_1847) = &input.input {
        object.key("Input").string(var_1847);
    }
}

pub fn serialize_structure_search_expression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchExpression,
) {
    if let Some(var_1848) = &input.filters {
        let mut array_1849 = object.key("Filters").start_array();
        for item_1850 in var_1848 {
            {
                let mut object_1851 = array_1849.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_1851, item_1850);
                object_1851.finish();
            }
        }
        array_1849.finish();
    }
    if let Some(var_1852) = &input.nested_filters {
        let mut array_1853 = object.key("NestedFilters").start_array();
        for item_1854 in var_1852 {
            {
                let mut object_1855 = array_1853.value().start_object();
                crate::json_ser::serialize_structure_nested_filters(&mut object_1855, item_1854);
                object_1855.finish();
            }
        }
        array_1853.finish();
    }
    if let Some(var_1856) = &input.sub_expressions {
        let mut array_1857 = object.key("SubExpressions").start_array();
        for item_1858 in var_1856 {
            {
                let mut object_1859 = array_1857.value().start_object();
                crate::json_ser::serialize_structure_search_expression(&mut object_1859, item_1858);
                object_1859.finish();
            }
        }
        array_1857.finish();
    }
    if let Some(var_1860) = &input.operator {
        object.key("Operator").string(var_1860.as_str());
    }
}

pub fn serialize_structure_output_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputParameter,
) {
    if let Some(var_1861) = &input.name {
        object.key("Name").string(var_1861);
    }
    if let Some(var_1862) = &input.value {
        object.key("Value").string(var_1862);
    }
}

pub fn serialize_structure_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameter,
) {
    if let Some(var_1863) = &input.name {
        object.key("Name").string(var_1863);
    }
    if let Some(var_1864) = &input.value {
        object.key("Value").string(var_1864);
    }
}

pub fn serialize_structure_git_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfigForUpdate,
) {
    if let Some(var_1865) = &input.secret_arn {
        object.key("SecretArn").string(var_1865);
    }
}

pub fn serialize_structure_variant_property(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariantProperty,
) {
    if let Some(var_1866) = &input.variant_property_type {
        object.key("VariantPropertyType").string(var_1866.as_str());
    }
}

pub fn serialize_structure_deployment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfig,
) {
    if let Some(var_1867) = &input.blue_green_update_policy {
        let mut object_1868 = object.key("BlueGreenUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_blue_green_update_policy(&mut object_1868, var_1867);
        object_1868.finish();
    }
    if let Some(var_1869) = &input.auto_rollback_configuration {
        let mut object_1870 = object.key("AutoRollbackConfiguration").start_object();
        crate::json_ser::serialize_structure_auto_rollback_config(&mut object_1870, var_1869);
        object_1870.finish();
    }
}

pub fn serialize_structure_desired_weight_and_capacity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DesiredWeightAndCapacity,
) {
    if let Some(var_1871) = &input.variant_name {
        object.key("VariantName").string(var_1871);
    }
    if let Some(var_1872) = &input.desired_weight {
        object.key("DesiredWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1872).into()),
        );
    }
    if let Some(var_1873) = &input.desired_instance_count {
        object.key("DesiredInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1873).into()),
        );
    }
}

pub fn serialize_structure_profiler_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfigForUpdate,
) {
    if let Some(var_1874) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1874);
    }
    if let Some(var_1875) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1875).into()),
        );
    }
    if let Some(var_1876) = &input.profiling_parameters {
        let mut object_1877 = object.key("ProfilingParameters").start_object();
        for (key_1878, value_1879) in var_1876 {
            {
                object_1877.key(key_1878).string(value_1879);
            }
        }
        object_1877.finish();
    }
    if input.disable_profiler {
        object
            .key("DisableProfiler")
            .boolean(input.disable_profiler);
    }
}

pub fn serialize_structure_hyper_parameter_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterSpecification,
) {
    if let Some(var_1880) = &input.name {
        object.key("Name").string(var_1880);
    }
    if let Some(var_1881) = &input.description {
        object.key("Description").string(var_1881);
    }
    if let Some(var_1882) = &input.r#type {
        object.key("Type").string(var_1882.as_str());
    }
    if let Some(var_1883) = &input.range {
        let mut object_1884 = object.key("Range").start_object();
        crate::json_ser::serialize_structure_parameter_range(&mut object_1884, var_1883);
        object_1884.finish();
    }
    if input.is_tunable {
        object.key("IsTunable").boolean(input.is_tunable);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1885) = &input.default_value {
        object.key("DefaultValue").string(var_1885);
    }
}

pub fn serialize_structure_metric_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDefinition,
) {
    if let Some(var_1886) = &input.name {
        object.key("Name").string(var_1886);
    }
    if let Some(var_1887) = &input.regex {
        object.key("Regex").string(var_1887);
    }
}

pub fn serialize_structure_channel_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelSpecification,
) {
    if let Some(var_1888) = &input.name {
        object.key("Name").string(var_1888);
    }
    if let Some(var_1889) = &input.description {
        object.key("Description").string(var_1889);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1890) = &input.supported_content_types {
        let mut array_1891 = object.key("SupportedContentTypes").start_array();
        for item_1892 in var_1890 {
            {
                array_1891.value().string(item_1892);
            }
        }
        array_1891.finish();
    }
    if let Some(var_1893) = &input.supported_compression_types {
        let mut array_1894 = object.key("SupportedCompressionTypes").start_array();
        for item_1895 in var_1893 {
            {
                array_1894.value().string(item_1895.as_str());
            }
        }
        array_1894.finish();
    }
    if let Some(var_1896) = &input.supported_input_modes {
        let mut array_1897 = object.key("SupportedInputModes").start_array();
        for item_1898 in var_1896 {
            {
                array_1897.value().string(item_1898.as_str());
            }
        }
        array_1897.finish();
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobObjective,
) {
    if let Some(var_1899) = &input.r#type {
        object.key("Type").string(var_1899.as_str());
    }
    if let Some(var_1900) = &input.metric_name {
        object.key("MetricName").string(var_1900);
    }
}

pub fn serialize_structure_model_package_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageContainerDefinition,
) {
    if let Some(var_1901) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1901);
    }
    if let Some(var_1902) = &input.image {
        object.key("Image").string(var_1902);
    }
    if let Some(var_1903) = &input.image_digest {
        object.key("ImageDigest").string(var_1903);
    }
    if let Some(var_1904) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1904);
    }
    if let Some(var_1905) = &input.product_id {
        object.key("ProductId").string(var_1905);
    }
}

pub fn serialize_structure_algorithm_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationProfile,
) {
    if let Some(var_1906) = &input.profile_name {
        object.key("ProfileName").string(var_1906);
    }
    if let Some(var_1907) = &input.training_job_definition {
        let mut object_1908 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_training_job_definition(&mut object_1908, var_1907);
        object_1908.finish();
    }
    if let Some(var_1909) = &input.transform_job_definition {
        let mut object_1910 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_transform_job_definition(&mut object_1910, var_1909);
        object_1910.finish();
    }
}

pub fn serialize_structure_kernel_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelSpec,
) {
    if let Some(var_1911) = &input.name {
        object.key("Name").string(var_1911);
    }
    if let Some(var_1912) = &input.display_name {
        object.key("DisplayName").string(var_1912);
    }
}

pub fn serialize_structure_file_system_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) {
    if let Some(var_1913) = &input.mount_path {
        object.key("MountPath").string(var_1913);
    }
    if let Some(var_1914) = &input.default_uid {
        object.key("DefaultUid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1914).into()),
        );
    }
    if let Some(var_1915) = &input.default_gid {
        object.key("DefaultGid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1915).into()),
        );
    }
}

pub fn serialize_structure_artifact_source_type(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSourceType,
) {
    if let Some(var_1916) = &input.source_id_type {
        object.key("SourceIdType").string(var_1916.as_str());
    }
    if let Some(var_1917) = &input.value {
        object.key("Value").string(var_1917);
    }
}

pub fn serialize_structure_auto_ml_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLDataSource,
) {
    if let Some(var_1918) = &input.s3_data_source {
        let mut object_1919 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_auto_mls3_data_source(&mut object_1919, var_1918);
        object_1919.finish();
    }
}

pub fn serialize_structure_auto_ml_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLJobCompletionCriteria,
) {
    if let Some(var_1920) = &input.max_candidates {
        object.key("MaxCandidates").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1920).into()),
        );
    }
    if let Some(var_1921) = &input.max_runtime_per_training_job_in_seconds {
        object.key("MaxRuntimePerTrainingJobInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1921).into()),
        );
    }
    if let Some(var_1922) = &input.max_auto_ml_job_runtime_in_seconds {
        object.key("MaxAutoMLJobRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1922).into()),
        );
    }
}

pub fn serialize_structure_auto_ml_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLSecurityConfig,
) {
    if let Some(var_1923) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1923);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if let Some(var_1924) = &input.vpc_config {
        let mut object_1925 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1925, var_1924);
        object_1925.finish();
    }
}

pub fn serialize_structure_target_platform(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetPlatform,
) {
    if let Some(var_1926) = &input.os {
        object.key("Os").string(var_1926.as_str());
    }
    if let Some(var_1927) = &input.arch {
        object.key("Arch").string(var_1927.as_str());
    }
    if let Some(var_1928) = &input.accelerator {
        object.key("Accelerator").string(var_1928.as_str());
    }
}

pub fn serialize_structure_monitoring_constraints_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConstraintsResource,
) {
    if let Some(var_1929) = &input.s3_uri {
        object.key("S3Uri").string(var_1929);
    }
}

pub fn serialize_structure_monitoring_statistics_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStatisticsResource,
) {
    if let Some(var_1930) = &input.s3_uri {
        object.key("S3Uri").string(var_1930);
    }
}

pub fn serialize_structure_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInput,
) {
    if let Some(var_1931) = &input.endpoint_name {
        object.key("EndpointName").string(var_1931);
    }
    if let Some(var_1932) = &input.local_path {
        object.key("LocalPath").string(var_1932);
    }
    if let Some(var_1933) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_1933.as_str());
    }
    if let Some(var_1934) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_1934.as_str());
    }
    if let Some(var_1935) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_1935);
    }
    if let Some(var_1936) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_1936);
    }
    if let Some(var_1937) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_1937);
    }
    if let Some(var_1938) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1938).into()),
        );
    }
    if let Some(var_1939) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_1939);
    }
    if let Some(var_1940) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_1940);
    }
}

pub fn serialize_structure_monitoring_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutput,
) {
    if let Some(var_1941) = &input.s3_output {
        let mut object_1942 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_monitoring_s3_output(&mut object_1942, var_1941);
        object_1942.finish();
    }
}

pub fn serialize_structure_monitoring_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringClusterConfig,
) {
    if let Some(var_1943) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1943).into()),
        );
    }
    if let Some(var_1944) = &input.instance_type {
        object.key("InstanceType").string(var_1944.as_str());
    }
    if let Some(var_1945) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1945).into()),
        );
    }
    if let Some(var_1946) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1946);
    }
}

pub fn serialize_structure_sharing_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharingSettings,
) {
    if let Some(var_1947) = &input.notebook_output_option {
        object.key("NotebookOutputOption").string(var_1947.as_str());
    }
    if let Some(var_1948) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1948);
    }
    if let Some(var_1949) = &input.s3_kms_key_id {
        object.key("S3KmsKeyId").string(var_1949);
    }
}

pub fn serialize_structure_jupyter_server_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JupyterServerAppSettings,
) {
    if let Some(var_1950) = &input.default_resource_spec {
        let mut object_1951 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1951, var_1950);
        object_1951.finish();
    }
}

pub fn serialize_structure_kernel_gateway_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayAppSettings,
) {
    if let Some(var_1952) = &input.default_resource_spec {
        let mut object_1953 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1953, var_1952);
        object_1953.finish();
    }
    if let Some(var_1954) = &input.custom_images {
        let mut array_1955 = object.key("CustomImages").start_array();
        for item_1956 in var_1954 {
            {
                let mut object_1957 = array_1955.value().start_object();
                crate::json_ser::serialize_structure_custom_image(&mut object_1957, item_1956);
                object_1957.finish();
            }
        }
        array_1955.finish();
    }
}

pub fn serialize_structure_tensor_board_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardAppSettings,
) {
    if let Some(var_1958) = &input.default_resource_spec {
        let mut object_1959 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1959, var_1958);
        object_1959.finish();
    }
}

pub fn serialize_structure_production_variant_core_dump_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantCoreDumpConfig,
) {
    if let Some(var_1960) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1960);
    }
    if let Some(var_1961) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1961);
    }
}

pub fn serialize_structure_capture_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureOption,
) {
    if let Some(var_1962) = &input.capture_mode {
        object.key("CaptureMode").string(var_1962.as_str());
    }
}

pub fn serialize_structure_capture_content_type_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureContentTypeHeader,
) {
    if let Some(var_1963) = &input.csv_content_types {
        let mut array_1964 = object.key("CsvContentTypes").start_array();
        for item_1965 in var_1963 {
            {
                array_1964.value().string(item_1965);
            }
        }
        array_1964.finish();
    }
    if let Some(var_1966) = &input.json_content_types {
        let mut array_1967 = object.key("JsonContentTypes").start_array();
        for item_1968 in var_1966 {
            {
                array_1967.value().string(item_1968);
            }
        }
        array_1967.finish();
    }
}

pub fn serialize_structure_online_store_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreSecurityConfig,
) {
    if let Some(var_1969) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1969);
    }
}

pub fn serialize_structure_s3_storage_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3StorageConfig,
) {
    if let Some(var_1970) = &input.s3_uri {
        object.key("S3Uri").string(var_1970);
    }
    if let Some(var_1971) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1971);
    }
    if let Some(var_1972) = &input.resolved_output_s3_uri {
        object.key("ResolvedOutputS3Uri").string(var_1972);
    }
}

pub fn serialize_structure_data_catalog_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogConfig,
) {
    if let Some(var_1973) = &input.table_name {
        object.key("TableName").string(var_1973);
    }
    if let Some(var_1974) = &input.catalog {
        object.key("Catalog").string(var_1974);
    }
    if let Some(var_1975) = &input.database {
        object.key("Database").string(var_1975);
    }
}

pub fn serialize_structure_human_loop_activation_conditions_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConditionsConfig,
) {
    if let Some(var_1976) = &input.human_loop_activation_conditions {
        object.key("HumanLoopActivationConditions").string(var_1976);
    }
}

pub fn serialize_structure_public_workforce_task_price(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicWorkforceTaskPrice,
) {
    if let Some(var_1977) = &input.amount_in_usd {
        let mut object_1978 = object.key("AmountInUsd").start_object();
        crate::json_ser::serialize_structure_usd(&mut object_1978, var_1977);
        object_1978.finish();
    }
}

pub fn serialize_structure_resource_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceLimits,
) {
    {
        object.key("MaxNumberOfTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_number_of_training_jobs).into()),
        );
    }
    {
        object.key("MaxParallelTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_parallel_training_jobs).into()),
        );
    }
}

pub fn serialize_structure_parameter_ranges(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) {
    if let Some(var_1979) = &input.integer_parameter_ranges {
        let mut array_1980 = object.key("IntegerParameterRanges").start_array();
        for item_1981 in var_1979 {
            {
                let mut object_1982 = array_1980.value().start_object();
                crate::json_ser::serialize_structure_integer_parameter_range(
                    &mut object_1982,
                    item_1981,
                );
                object_1982.finish();
            }
        }
        array_1980.finish();
    }
    if let Some(var_1983) = &input.continuous_parameter_ranges {
        let mut array_1984 = object.key("ContinuousParameterRanges").start_array();
        for item_1985 in var_1983 {
            {
                let mut object_1986 = array_1984.value().start_object();
                crate::json_ser::serialize_structure_continuous_parameter_range(
                    &mut object_1986,
                    item_1985,
                );
                object_1986.finish();
            }
        }
        array_1984.finish();
    }
    if let Some(var_1987) = &input.categorical_parameter_ranges {
        let mut array_1988 = object.key("CategoricalParameterRanges").start_array();
        for item_1989 in var_1987 {
            {
                let mut object_1990 = array_1988.value().start_object();
                crate::json_ser::serialize_structure_categorical_parameter_range(
                    &mut object_1990,
                    item_1989,
                );
                object_1990.finish();
            }
        }
        array_1988.finish();
    }
}

pub fn serialize_structure_tuning_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TuningJobCompletionCriteria,
) {
    if let Some(var_1991) = &input.target_objective_metric_value {
        object.key("TargetObjectiveMetricValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1991).into()),
        );
    }
}

pub fn serialize_structure_hyper_parameter_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterAlgorithmSpecification,
) {
    if let Some(var_1992) = &input.training_image {
        object.key("TrainingImage").string(var_1992);
    }
    if let Some(var_1993) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_1993.as_str());
    }
    if let Some(var_1994) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_1994);
    }
    if let Some(var_1995) = &input.metric_definitions {
        let mut array_1996 = object.key("MetricDefinitions").start_array();
        for item_1997 in var_1995 {
            {
                let mut object_1998 = array_1996.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1998, item_1997);
                object_1998.finish();
            }
        }
        array_1996.finish();
    }
}

pub fn serialize_structure_parent_hyper_parameter_tuning_job(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentHyperParameterTuningJob,
) {
    if let Some(var_1999) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1999);
    }
}

pub fn serialize_structure_labeling_job_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataSource,
) {
    if let Some(var_2000) = &input.s3_data_source {
        let mut object_2001 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_s3_data_source(
            &mut object_2001,
            var_2000,
        );
        object_2001.finish();
    }
    if let Some(var_2002) = &input.sns_data_source {
        let mut object_2003 = object.key("SnsDataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_sns_data_source(
            &mut object_2003,
            var_2002,
        );
        object_2003.finish();
    }
}

pub fn serialize_structure_labeling_job_data_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataAttributes,
) {
    if let Some(var_2004) = &input.content_classifiers {
        let mut array_2005 = object.key("ContentClassifiers").start_array();
        for item_2006 in var_2004 {
            {
                array_2005.value().string(item_2006.as_str());
            }
        }
        array_2005.finish();
    }
}

pub fn serialize_structure_labeling_job_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobResourceConfig,
) {
    if let Some(var_2007) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2007);
    }
}

pub fn serialize_structure_ui_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiConfig,
) {
    if let Some(var_2008) = &input.ui_template_s3_uri {
        object.key("UiTemplateS3Uri").string(var_2008);
    }
    if let Some(var_2009) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_2009);
    }
}

pub fn serialize_structure_annotation_consolidation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnnotationConsolidationConfig,
) {
    if let Some(var_2010) = &input.annotation_consolidation_lambda_arn {
        object
            .key("AnnotationConsolidationLambdaArn")
            .string(var_2010);
    }
}

pub fn serialize_structure_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) {
    if let Some(var_2011) = &input.repository_access_mode {
        object.key("RepositoryAccessMode").string(var_2011.as_str());
    }
    if let Some(var_2012) = &input.repository_auth_config {
        let mut object_2013 = object.key("RepositoryAuthConfig").start_object();
        crate::json_ser::serialize_structure_repository_auth_config(&mut object_2013, var_2012);
        object_2013.finish();
    }
}

pub fn serialize_structure_multi_model_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiModelConfig,
) {
    if let Some(var_2014) = &input.model_cache_setting {
        object.key("ModelCacheSetting").string(var_2014.as_str());
    }
}

pub fn serialize_structure_monitoring_ground_truth_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringGroundTruthS3Input,
) {
    if let Some(var_2015) = &input.s3_uri {
        object.key("S3Uri").string(var_2015);
    }
}

pub fn serialize_structure_model_package_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationProfile,
) {
    if let Some(var_2016) = &input.profile_name {
        object.key("ProfileName").string(var_2016);
    }
    if let Some(var_2017) = &input.transform_job_definition {
        let mut object_2018 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_transform_job_definition(&mut object_2018, var_2017);
        object_2018.finish();
    }
}

pub fn serialize_structure_source_algorithm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithm,
) {
    if let Some(var_2019) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2019);
    }
    if let Some(var_2020) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2020);
    }
}

pub fn serialize_structure_model_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQuality,
) {
    if let Some(var_2021) = &input.statistics {
        let mut object_2022 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2022, var_2021);
        object_2022.finish();
    }
    if let Some(var_2023) = &input.constraints {
        let mut object_2024 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2024, var_2023);
        object_2024.finish();
    }
}

pub fn serialize_structure_model_data_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDataQuality,
) {
    if let Some(var_2025) = &input.statistics {
        let mut object_2026 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2026, var_2025);
        object_2026.finish();
    }
    if let Some(var_2027) = &input.constraints {
        let mut object_2028 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2028, var_2027);
        object_2028.finish();
    }
}

pub fn serialize_structure_bias(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bias,
) {
    if let Some(var_2029) = &input.report {
        let mut object_2030 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2030, var_2029);
        object_2030.finish();
    }
}

pub fn serialize_structure_explainability(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Explainability,
) {
    if let Some(var_2031) = &input.report {
        let mut object_2032 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2032, var_2031);
        object_2032.finish();
    }
}

pub fn serialize_structure_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleConfig,
) {
    if let Some(var_2033) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_2033);
    }
}

pub fn serialize_structure_monitoring_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringJobDefinition,
) {
    if let Some(var_2034) = &input.baseline_config {
        let mut object_2035 = object.key("BaselineConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_baseline_config(&mut object_2035, var_2034);
        object_2035.finish();
    }
    if let Some(var_2036) = &input.monitoring_inputs {
        let mut array_2037 = object.key("MonitoringInputs").start_array();
        for item_2038 in var_2036 {
            {
                let mut object_2039 = array_2037.value().start_object();
                crate::json_ser::serialize_structure_monitoring_input(&mut object_2039, item_2038);
                object_2039.finish();
            }
        }
        array_2037.finish();
    }
    if let Some(var_2040) = &input.monitoring_output_config {
        let mut object_2041 = object.key("MonitoringOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_2041, var_2040);
        object_2041.finish();
    }
    if let Some(var_2042) = &input.monitoring_resources {
        let mut object_2043 = object.key("MonitoringResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_2043, var_2042);
        object_2043.finish();
    }
    if let Some(var_2044) = &input.monitoring_app_specification {
        let mut object_2045 = object.key("MonitoringAppSpecification").start_object();
        crate::json_ser::serialize_structure_monitoring_app_specification(
            &mut object_2045,
            var_2044,
        );
        object_2045.finish();
    }
    if let Some(var_2046) = &input.stopping_condition {
        let mut object_2047 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_2047,
            var_2046,
        );
        object_2047.finish();
    }
    if let Some(var_2048) = &input.environment {
        let mut object_2049 = object.key("Environment").start_object();
        for (key_2050, value_2051) in var_2048 {
            {
                object_2049.key(key_2050).string(value_2051);
            }
        }
        object_2049.finish();
    }
    if let Some(var_2052) = &input.network_config {
        let mut object_2053 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_network_config(&mut object_2053, var_2052);
        object_2053.finish();
    }
    if let Some(var_2054) = &input.role_arn {
        object.key("RoleArn").string(var_2054);
    }
}

pub fn serialize_structure_processing_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Input,
) {
    if let Some(var_2055) = &input.s3_uri {
        object.key("S3Uri").string(var_2055);
    }
    if let Some(var_2056) = &input.local_path {
        object.key("LocalPath").string(var_2056);
    }
    if let Some(var_2057) = &input.s3_data_type {
        object.key("S3DataType").string(var_2057.as_str());
    }
    if let Some(var_2058) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2058.as_str());
    }
    if let Some(var_2059) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2059.as_str());
    }
    if let Some(var_2060) = &input.s3_compression_type {
        object.key("S3CompressionType").string(var_2060.as_str());
    }
}

pub fn serialize_structure_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetDefinition,
) {
    if let Some(var_2061) = &input.athena_dataset_definition {
        let mut object_2062 = object.key("AthenaDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_athena_dataset_definition(&mut object_2062, var_2061);
        object_2062.finish();
    }
    if let Some(var_2063) = &input.redshift_dataset_definition {
        let mut object_2064 = object.key("RedshiftDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_redshift_dataset_definition(
            &mut object_2064,
            var_2063,
        );
        object_2064.finish();
    }
    if let Some(var_2065) = &input.local_path {
        object.key("LocalPath").string(var_2065);
    }
    if let Some(var_2066) = &input.data_distribution_type {
        object.key("DataDistributionType").string(var_2066.as_str());
    }
    if let Some(var_2067) = &input.input_mode {
        object.key("InputMode").string(var_2067.as_str());
    }
}

pub fn serialize_structure_processing_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutput,
) {
    if let Some(var_2068) = &input.output_name {
        object.key("OutputName").string(var_2068);
    }
    if let Some(var_2069) = &input.s3_output {
        let mut object_2070 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_processing_s3_output(&mut object_2070, var_2069);
        object_2070.finish();
    }
    if let Some(var_2071) = &input.feature_store_output {
        let mut object_2072 = object.key("FeatureStoreOutput").start_object();
        crate::json_ser::serialize_structure_processing_feature_store_output(
            &mut object_2072,
            var_2071,
        );
        object_2072.finish();
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
}

pub fn serialize_structure_processing_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingClusterConfig,
) {
    if let Some(var_2073) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2073).into()),
        );
    }
    if let Some(var_2074) = &input.instance_type {
        object.key("InstanceType").string(var_2074.as_str());
    }
    if let Some(var_2075) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2075).into()),
        );
    }
    if let Some(var_2076) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2076);
    }
}

pub fn serialize_structure_provisioning_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningParameter,
) {
    if let Some(var_2077) = &input.key {
        object.key("Key").string(var_2077);
    }
    if let Some(var_2078) = &input.value {
        object.key("Value").string(var_2078);
    }
}

pub fn serialize_structure_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) {
    if let Some(var_2079) = &input.s3_data_source {
        let mut object_2080 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_s3_data_source(&mut object_2080, var_2079);
        object_2080.finish();
    }
    if let Some(var_2081) = &input.file_system_data_source {
        let mut object_2082 = object.key("FileSystemDataSource").start_object();
        crate::json_ser::serialize_structure_file_system_data_source(&mut object_2082, var_2081);
        object_2082.finish();
    }
}

pub fn serialize_structure_shuffle_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShuffleConfig,
) {
    {
        object.key("Seed").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.seed).into()),
        );
    }
}

pub fn serialize_structure_collection_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CollectionConfiguration,
) {
    if let Some(var_2083) = &input.collection_name {
        object.key("CollectionName").string(var_2083);
    }
    if let Some(var_2084) = &input.collection_parameters {
        let mut object_2085 = object.key("CollectionParameters").start_object();
        for (key_2086, value_2087) in var_2084 {
            {
                object_2085.key(key_2086).string(value_2087);
            }
        }
        object_2085.finish();
    }
}

pub fn serialize_structure_transform_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformDataSource,
) {
    if let Some(var_2088) = &input.s3_data_source {
        let mut object_2089 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_transform_s3_data_source(&mut object_2089, var_2088);
        object_2089.finish();
    }
}

pub fn serialize_structure_cognito_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoMemberDefinition,
) {
    if let Some(var_2090) = &input.user_pool {
        object.key("UserPool").string(var_2090);
    }
    if let Some(var_2091) = &input.user_group {
        object.key("UserGroup").string(var_2091);
    }
    if let Some(var_2092) = &input.client_id {
        object.key("ClientId").string(var_2092);
    }
}

pub fn serialize_structure_oidc_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcMemberDefinition,
) {
    if let Some(var_2093) = &input.groups {
        let mut array_2094 = object.key("Groups").start_array();
        for item_2095 in var_2093 {
            {
                array_2094.value().string(item_2095);
            }
        }
        array_2094.finish();
    }
}

pub fn serialize_structure_property_name_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyNameQuery,
) {
    if let Some(var_2096) = &input.property_name_hint {
        object.key("PropertyNameHint").string(var_2096);
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_2097) = &input.name {
        object.key("Name").string(var_2097);
    }
    if let Some(var_2098) = &input.operator {
        object.key("Operator").string(var_2098.as_str());
    }
    if let Some(var_2099) = &input.value {
        object.key("Value").string(var_2099);
    }
}

pub fn serialize_structure_nested_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NestedFilters,
) {
    if let Some(var_2100) = &input.nested_property_name {
        object.key("NestedPropertyName").string(var_2100);
    }
    if let Some(var_2101) = &input.filters {
        let mut array_2102 = object.key("Filters").start_array();
        for item_2103 in var_2101 {
            {
                let mut object_2104 = array_2102.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_2104, item_2103);
                object_2104.finish();
            }
        }
        array_2102.finish();
    }
}

pub fn serialize_structure_blue_green_update_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlueGreenUpdatePolicy,
) {
    if let Some(var_2105) = &input.traffic_routing_configuration {
        let mut object_2106 = object.key("TrafficRoutingConfiguration").start_object();
        crate::json_ser::serialize_structure_traffic_routing_config(&mut object_2106, var_2105);
        object_2106.finish();
    }
    if let Some(var_2107) = &input.termination_wait_in_seconds {
        object.key("TerminationWaitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2107).into()),
        );
    }
    if let Some(var_2108) = &input.maximum_execution_timeout_in_seconds {
        object.key("MaximumExecutionTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2108).into()),
        );
    }
}

pub fn serialize_structure_auto_rollback_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoRollbackConfig,
) {
    if let Some(var_2109) = &input.alarms {
        let mut array_2110 = object.key("Alarms").start_array();
        for item_2111 in var_2109 {
            {
                let mut object_2112 = array_2110.value().start_object();
                crate::json_ser::serialize_structure_alarm(&mut object_2112, item_2111);
                object_2112.finish();
            }
        }
        array_2110.finish();
    }
}

pub fn serialize_structure_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRange,
) {
    if let Some(var_2113) = &input.integer_parameter_range_specification {
        let mut object_2114 = object
            .key("IntegerParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_integer_parameter_range_specification(
            &mut object_2114,
            var_2113,
        );
        object_2114.finish();
    }
    if let Some(var_2115) = &input.continuous_parameter_range_specification {
        let mut object_2116 = object
            .key("ContinuousParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_continuous_parameter_range_specification(
            &mut object_2116,
            var_2115,
        );
        object_2116.finish();
    }
    if let Some(var_2117) = &input.categorical_parameter_range_specification {
        let mut object_2118 = object
            .key("CategoricalParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_categorical_parameter_range_specification(
            &mut object_2118,
            var_2117,
        );
        object_2118.finish();
    }
}

pub fn serialize_structure_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingJobDefinition,
) {
    if let Some(var_2119) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2119.as_str());
    }
    if let Some(var_2120) = &input.hyper_parameters {
        let mut object_2121 = object.key("HyperParameters").start_object();
        for (key_2122, value_2123) in var_2120 {
            {
                object_2121.key(key_2122).string(value_2123);
            }
        }
        object_2121.finish();
    }
    if let Some(var_2124) = &input.input_data_config {
        let mut array_2125 = object.key("InputDataConfig").start_array();
        for item_2126 in var_2124 {
            {
                let mut object_2127 = array_2125.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_2127, item_2126);
                object_2127.finish();
            }
        }
        array_2125.finish();
    }
    if let Some(var_2128) = &input.output_data_config {
        let mut object_2129 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_2129, var_2128);
        object_2129.finish();
    }
    if let Some(var_2130) = &input.resource_config {
        let mut object_2131 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_2131, var_2130);
        object_2131.finish();
    }
    if let Some(var_2132) = &input.stopping_condition {
        let mut object_2133 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_2133, var_2132);
        object_2133.finish();
    }
}

pub fn serialize_structure_transform_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformJobDefinition,
) {
    if let Some(var_2134) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2134).into()),
        );
    }
    if let Some(var_2135) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2135).into()),
        );
    }
    if let Some(var_2136) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_2136.as_str());
    }
    if let Some(var_2137) = &input.environment {
        let mut object_2138 = object.key("Environment").start_object();
        for (key_2139, value_2140) in var_2137 {
            {
                object_2138.key(key_2139).string(value_2140);
            }
        }
        object_2138.finish();
    }
    if let Some(var_2141) = &input.transform_input {
        let mut object_2142 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_transform_input(&mut object_2142, var_2141);
        object_2142.finish();
    }
    if let Some(var_2143) = &input.transform_output {
        let mut object_2144 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_transform_output(&mut object_2144, var_2143);
        object_2144.finish();
    }
    if let Some(var_2145) = &input.transform_resources {
        let mut object_2146 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_transform_resources(&mut object_2146, var_2145);
        object_2146.finish();
    }
}

pub fn serialize_structure_auto_mls3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLS3DataSource,
) {
    if let Some(var_2147) = &input.s3_data_type {
        object.key("S3DataType").string(var_2147.as_str());
    }
    if let Some(var_2148) = &input.s3_uri {
        object.key("S3Uri").string(var_2148);
    }
}

pub fn serialize_structure_monitoring_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringS3Output,
) {
    if let Some(var_2149) = &input.s3_uri {
        object.key("S3Uri").string(var_2149);
    }
    if let Some(var_2150) = &input.local_path {
        object.key("LocalPath").string(var_2150);
    }
    if let Some(var_2151) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2151.as_str());
    }
}

pub fn serialize_structure_custom_image(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomImage,
) {
    if let Some(var_2152) = &input.image_name {
        object.key("ImageName").string(var_2152);
    }
    if let Some(var_2153) = &input.image_version_number {
        object.key("ImageVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2153).into()),
        );
    }
    if let Some(var_2154) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_2154);
    }
}

pub fn serialize_structure_usd(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::USD,
) {
    if input.dollars != 0 {
        object.key("Dollars").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.dollars).into()),
        );
    }
    if input.cents != 0 {
        object.key("Cents").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cents).into()),
        );
    }
    if input.tenth_fractions_of_a_cent != 0 {
        object.key("TenthFractionsOfACent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.tenth_fractions_of_a_cent).into()),
        );
    }
}

pub fn serialize_structure_integer_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) {
    if let Some(var_2155) = &input.name {
        object.key("Name").string(var_2155);
    }
    if let Some(var_2156) = &input.min_value {
        object.key("MinValue").string(var_2156);
    }
    if let Some(var_2157) = &input.max_value {
        object.key("MaxValue").string(var_2157);
    }
    if let Some(var_2158) = &input.scaling_type {
        object.key("ScalingType").string(var_2158.as_str());
    }
}

pub fn serialize_structure_continuous_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) {
    if let Some(var_2159) = &input.name {
        object.key("Name").string(var_2159);
    }
    if let Some(var_2160) = &input.min_value {
        object.key("MinValue").string(var_2160);
    }
    if let Some(var_2161) = &input.max_value {
        object.key("MaxValue").string(var_2161);
    }
    if let Some(var_2162) = &input.scaling_type {
        object.key("ScalingType").string(var_2162.as_str());
    }
}

pub fn serialize_structure_categorical_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) {
    if let Some(var_2163) = &input.name {
        object.key("Name").string(var_2163);
    }
    if let Some(var_2164) = &input.values {
        let mut array_2165 = object.key("Values").start_array();
        for item_2166 in var_2164 {
            {
                array_2165.value().string(item_2166);
            }
        }
        array_2165.finish();
    }
}

pub fn serialize_structure_labeling_job_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobS3DataSource,
) {
    if let Some(var_2167) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_2167);
    }
}

pub fn serialize_structure_labeling_job_sns_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobSnsDataSource,
) {
    if let Some(var_2168) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2168);
    }
}

pub fn serialize_structure_repository_auth_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAuthConfig,
) {
    if let Some(var_2169) = &input.repository_credentials_provider_arn {
        object
            .key("RepositoryCredentialsProviderArn")
            .string(var_2169);
    }
}

pub fn serialize_structure_metrics_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricsSource,
) {
    if let Some(var_2170) = &input.content_type {
        object.key("ContentType").string(var_2170);
    }
    if let Some(var_2171) = &input.content_digest {
        object.key("ContentDigest").string(var_2171);
    }
    if let Some(var_2172) = &input.s3_uri {
        object.key("S3Uri").string(var_2172);
    }
}

pub fn serialize_structure_monitoring_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringBaselineConfig,
) {
    if let Some(var_2173) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2173);
    }
    if let Some(var_2174) = &input.constraints_resource {
        let mut object_2175 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_2175,
            var_2174,
        );
        object_2175.finish();
    }
    if let Some(var_2176) = &input.statistics_resource {
        let mut object_2177 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_statistics_resource(
            &mut object_2177,
            var_2176,
        );
        object_2177.finish();
    }
}

pub fn serialize_structure_monitoring_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringInput,
) {
    if let Some(var_2178) = &input.endpoint_input {
        let mut object_2179 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_2179, var_2178);
        object_2179.finish();
    }
}

pub fn serialize_structure_monitoring_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringAppSpecification,
) {
    if let Some(var_2180) = &input.image_uri {
        object.key("ImageUri").string(var_2180);
    }
    if let Some(var_2181) = &input.container_entrypoint {
        let mut array_2182 = object.key("ContainerEntrypoint").start_array();
        for item_2183 in var_2181 {
            {
                array_2182.value().string(item_2183);
            }
        }
        array_2182.finish();
    }
    if let Some(var_2184) = &input.container_arguments {
        let mut array_2185 = object.key("ContainerArguments").start_array();
        for item_2186 in var_2184 {
            {
                array_2185.value().string(item_2186);
            }
        }
        array_2185.finish();
    }
    if let Some(var_2187) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_2187);
    }
    if let Some(var_2188) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_2188);
    }
}

pub fn serialize_structure_athena_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaDatasetDefinition,
) {
    if let Some(var_2189) = &input.catalog {
        object.key("Catalog").string(var_2189);
    }
    if let Some(var_2190) = &input.database {
        object.key("Database").string(var_2190);
    }
    if let Some(var_2191) = &input.query_string {
        object.key("QueryString").string(var_2191);
    }
    if let Some(var_2192) = &input.work_group {
        object.key("WorkGroup").string(var_2192);
    }
    if let Some(var_2193) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2193);
    }
    if let Some(var_2194) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2194);
    }
    if let Some(var_2195) = &input.output_format {
        object.key("OutputFormat").string(var_2195.as_str());
    }
    if let Some(var_2196) = &input.output_compression {
        object.key("OutputCompression").string(var_2196.as_str());
    }
}

pub fn serialize_structure_redshift_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDatasetDefinition,
) {
    if let Some(var_2197) = &input.cluster_id {
        object.key("ClusterId").string(var_2197);
    }
    if let Some(var_2198) = &input.database {
        object.key("Database").string(var_2198);
    }
    if let Some(var_2199) = &input.db_user {
        object.key("DbUser").string(var_2199);
    }
    if let Some(var_2200) = &input.query_string {
        object.key("QueryString").string(var_2200);
    }
    if let Some(var_2201) = &input.cluster_role_arn {
        object.key("ClusterRoleArn").string(var_2201);
    }
    if let Some(var_2202) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2202);
    }
    if let Some(var_2203) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2203);
    }
    if let Some(var_2204) = &input.output_format {
        object.key("OutputFormat").string(var_2204.as_str());
    }
    if let Some(var_2205) = &input.output_compression {
        object.key("OutputCompression").string(var_2205.as_str());
    }
}

pub fn serialize_structure_processing_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Output,
) {
    if let Some(var_2206) = &input.s3_uri {
        object.key("S3Uri").string(var_2206);
    }
    if let Some(var_2207) = &input.local_path {
        object.key("LocalPath").string(var_2207);
    }
    if let Some(var_2208) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2208.as_str());
    }
}

pub fn serialize_structure_processing_feature_store_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingFeatureStoreOutput,
) {
    if let Some(var_2209) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_2209);
    }
}

pub fn serialize_structure_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSource,
) {
    if let Some(var_2210) = &input.s3_data_type {
        object.key("S3DataType").string(var_2210.as_str());
    }
    if let Some(var_2211) = &input.s3_uri {
        object.key("S3Uri").string(var_2211);
    }
    if let Some(var_2212) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2212.as_str());
    }
    if let Some(var_2213) = &input.attribute_names {
        let mut array_2214 = object.key("AttributeNames").start_array();
        for item_2215 in var_2213 {
            {
                array_2214.value().string(item_2215);
            }
        }
        array_2214.finish();
    }
}

pub fn serialize_structure_file_system_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemDataSource,
) {
    if let Some(var_2216) = &input.file_system_id {
        object.key("FileSystemId").string(var_2216);
    }
    if let Some(var_2217) = &input.file_system_access_mode {
        object.key("FileSystemAccessMode").string(var_2217.as_str());
    }
    if let Some(var_2218) = &input.file_system_type {
        object.key("FileSystemType").string(var_2218.as_str());
    }
    if let Some(var_2219) = &input.directory_path {
        object.key("DirectoryPath").string(var_2219);
    }
}

pub fn serialize_structure_transform_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformS3DataSource,
) {
    if let Some(var_2220) = &input.s3_data_type {
        object.key("S3DataType").string(var_2220.as_str());
    }
    if let Some(var_2221) = &input.s3_uri {
        object.key("S3Uri").string(var_2221);
    }
}

pub fn serialize_structure_traffic_routing_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficRoutingConfig,
) {
    if let Some(var_2222) = &input.r#type {
        object.key("Type").string(var_2222.as_str());
    }
    if let Some(var_2223) = &input.wait_interval_in_seconds {
        object.key("WaitIntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2223).into()),
        );
    }
    if let Some(var_2224) = &input.canary_size {
        let mut object_2225 = object.key("CanarySize").start_object();
        crate::json_ser::serialize_structure_capacity_size(&mut object_2225, var_2224);
        object_2225.finish();
    }
}

pub fn serialize_structure_alarm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Alarm,
) {
    if let Some(var_2226) = &input.alarm_name {
        object.key("AlarmName").string(var_2226);
    }
}

pub fn serialize_structure_integer_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRangeSpecification,
) {
    if let Some(var_2227) = &input.min_value {
        object.key("MinValue").string(var_2227);
    }
    if let Some(var_2228) = &input.max_value {
        object.key("MaxValue").string(var_2228);
    }
}

pub fn serialize_structure_continuous_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRangeSpecification,
) {
    if let Some(var_2229) = &input.min_value {
        object.key("MinValue").string(var_2229);
    }
    if let Some(var_2230) = &input.max_value {
        object.key("MaxValue").string(var_2230);
    }
}

pub fn serialize_structure_categorical_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRangeSpecification,
) {
    if let Some(var_2231) = &input.values {
        let mut array_2232 = object.key("Values").start_array();
        for item_2233 in var_2231 {
            {
                array_2232.value().string(item_2233);
            }
        }
        array_2232.finish();
    }
}

pub fn serialize_structure_capacity_size(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacitySize,
) {
    if let Some(var_2234) = &input.r#type {
        object.key("Type").string(var_2234.as_str());
    }
    if let Some(var_2235) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2235).into()),
        );
    }
}
