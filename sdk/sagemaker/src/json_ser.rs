// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddAssociationInput,
) {
    if let Some(var_1) = &input.source_arn {
        object.key("SourceArn").string(var_1);
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2);
    }
    if let Some(var_3) = &input.association_type {
        object.key("AssociationType").string(var_3.as_str());
    }
}

pub fn serialize_structure_add_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) {
    if let Some(var_4) = &input.resource_arn {
        object.key("ResourceArn").string(var_4);
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_8, item_7);
                object_8.finish();
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_associate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTrialComponentInput,
) {
    if let Some(var_9) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_9);
    }
    if let Some(var_10) = &input.trial_name {
        object.key("TrialName").string(var_10);
    }
}

pub fn serialize_structure_create_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionInput,
) {
    if let Some(var_11) = &input.action_name {
        object.key("ActionName").string(var_11);
    }
    if let Some(var_12) = &input.source {
        let mut object_13 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_action_source(&mut object_13, var_12);
        object_13.finish();
    }
    if let Some(var_14) = &input.action_type {
        object.key("ActionType").string(var_14);
    }
    if let Some(var_15) = &input.description {
        object.key("Description").string(var_15);
    }
    if let Some(var_16) = &input.status {
        object.key("Status").string(var_16.as_str());
    }
    if let Some(var_17) = &input.properties {
        let mut object_18 = object.key("Properties").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.metadata_properties {
        let mut object_22 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_22, var_21);
        object_22.finish();
    }
    if let Some(var_23) = &input.tags {
        let mut array_24 = object.key("Tags").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_26, item_25);
                object_26.finish();
            }
        }
        array_24.finish();
    }
}

pub fn serialize_structure_create_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlgorithmInput,
) {
    if let Some(var_27) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_27);
    }
    if let Some(var_28) = &input.algorithm_description {
        object.key("AlgorithmDescription").string(var_28);
    }
    if let Some(var_29) = &input.training_specification {
        let mut object_30 = object.key("TrainingSpecification").start_object();
        crate::json_ser::serialize_structure_training_specification(&mut object_30, var_29);
        object_30.finish();
    }
    if let Some(var_31) = &input.inference_specification {
        let mut object_32 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_inference_specification(&mut object_32, var_31);
        object_32.finish();
    }
    if let Some(var_33) = &input.validation_specification {
        let mut object_34 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_algorithm_validation_specification(
            &mut object_34,
            var_33,
        );
        object_34.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_35) = &input.tags {
        let mut array_36 = object.key("Tags").start_array();
        for item_37 in var_35 {
            {
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_38, item_37);
                object_38.finish();
            }
        }
        array_36.finish();
    }
}

pub fn serialize_structure_create_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInput,
) {
    if let Some(var_39) = &input.domain_id {
        object.key("DomainId").string(var_39);
    }
    if let Some(var_40) = &input.user_profile_name {
        object.key("UserProfileName").string(var_40);
    }
    if let Some(var_41) = &input.app_type {
        object.key("AppType").string(var_41.as_str());
    }
    if let Some(var_42) = &input.app_name {
        object.key("AppName").string(var_42);
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("Tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_46, item_45);
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if let Some(var_47) = &input.resource_spec {
        let mut object_48 = object.key("ResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_48, var_47);
        object_48.finish();
    }
}

pub fn serialize_structure_create_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppImageConfigInput,
) {
    if let Some(var_49) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_49);
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("Tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if let Some(var_54) = &input.kernel_gateway_image_config {
        let mut object_55 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_image_config(&mut object_55, var_54);
        object_55.finish();
    }
}

pub fn serialize_structure_create_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateArtifactInput,
) {
    if let Some(var_56) = &input.artifact_name {
        object.key("ArtifactName").string(var_56);
    }
    if let Some(var_57) = &input.source {
        let mut object_58 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_artifact_source(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.artifact_type {
        object.key("ArtifactType").string(var_59);
    }
    if let Some(var_60) = &input.properties {
        let mut object_61 = object.key("Properties").start_object();
        for (key_62, value_63) in var_60 {
            {
                object_61.key(key_62).string(value_63);
            }
        }
        object_61.finish();
    }
    if let Some(var_64) = &input.metadata_properties {
        let mut object_65 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_65, var_64);
        object_65.finish();
    }
    if let Some(var_66) = &input.tags {
        let mut array_67 = object.key("Tags").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_69, item_68);
                object_69.finish();
            }
        }
        array_67.finish();
    }
}

pub fn serialize_structure_create_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoMlJobInput,
) {
    if let Some(var_70) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_70);
    }
    if let Some(var_71) = &input.input_data_config {
        let mut array_72 = object.key("InputDataConfig").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_auto_ml_channel(&mut object_74, item_73);
                object_74.finish();
            }
        }
        array_72.finish();
    }
    if let Some(var_75) = &input.output_data_config {
        let mut object_76 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_output_data_config(&mut object_76, var_75);
        object_76.finish();
    }
    if let Some(var_77) = &input.problem_type {
        object.key("ProblemType").string(var_77.as_str());
    }
    if let Some(var_78) = &input.auto_ml_job_objective {
        let mut object_79 = object.key("AutoMLJobObjective").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_objective(&mut object_79, var_78);
        object_79.finish();
    }
    if let Some(var_80) = &input.auto_ml_job_config {
        let mut object_81 = object.key("AutoMLJobConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_config(&mut object_81, var_80);
        object_81.finish();
    }
    if let Some(var_82) = &input.role_arn {
        object.key("RoleArn").string(var_82);
    }
    if input.generate_candidate_definitions_only {
        object
            .key("GenerateCandidateDefinitionsOnly")
            .boolean(input.generate_candidate_definitions_only);
    }
    if let Some(var_83) = &input.tags {
        let mut array_84 = object.key("Tags").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_86, item_85);
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.model_deploy_config {
        let mut object_88 = object.key("ModelDeployConfig").start_object();
        crate::json_ser::serialize_structure_model_deploy_config(&mut object_88, var_87);
        object_88.finish();
    }
}

pub fn serialize_structure_create_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeRepositoryInput,
) {
    if let Some(var_89) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_89);
    }
    if let Some(var_90) = &input.git_config {
        let mut object_91 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_git_config(&mut object_91, var_90);
        object_91.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("Tags").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_95, item_94);
                object_95.finish();
            }
        }
        array_93.finish();
    }
}

pub fn serialize_structure_create_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCompilationJobInput,
) {
    if let Some(var_96) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_96);
    }
    if let Some(var_97) = &input.role_arn {
        object.key("RoleArn").string(var_97);
    }
    if let Some(var_98) = &input.input_config {
        let mut object_99 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_input_config(&mut object_99, var_98);
        object_99.finish();
    }
    if let Some(var_100) = &input.output_config {
        let mut object_101 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_output_config(&mut object_101, var_100);
        object_101.finish();
    }
    if let Some(var_102) = &input.vpc_config {
        let mut object_103 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_neo_vpc_config(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.stopping_condition {
        let mut object_105 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_105, var_104);
        object_105.finish();
    }
    if let Some(var_106) = &input.tags {
        let mut array_107 = object.key("Tags").start_array();
        for item_108 in var_106 {
            {
                let mut object_109 = array_107.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_109, item_108);
                object_109.finish();
            }
        }
        array_107.finish();
    }
}

pub fn serialize_structure_create_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContextInput,
) {
    if let Some(var_110) = &input.context_name {
        object.key("ContextName").string(var_110);
    }
    if let Some(var_111) = &input.source {
        let mut object_112 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_context_source(&mut object_112, var_111);
        object_112.finish();
    }
    if let Some(var_113) = &input.context_type {
        object.key("ContextType").string(var_113);
    }
    if let Some(var_114) = &input.description {
        object.key("Description").string(var_114);
    }
    if let Some(var_115) = &input.properties {
        let mut object_116 = object.key("Properties").start_object();
        for (key_117, value_118) in var_115 {
            {
                object_116.key(key_117).string(value_118);
            }
        }
        object_116.finish();
    }
    if let Some(var_119) = &input.tags {
        let mut array_120 = object.key("Tags").start_array();
        for item_121 in var_119 {
            {
                let mut object_122 = array_120.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_122, item_121);
                object_122.finish();
            }
        }
        array_120.finish();
    }
}

pub fn serialize_structure_create_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataQualityJobDefinitionInput,
) {
    if let Some(var_123) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_123);
    }
    if let Some(var_124) = &input.data_quality_baseline_config {
        let mut object_125 = object.key("DataQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_data_quality_baseline_config(&mut object_125, var_124);
        object_125.finish();
    }
    if let Some(var_126) = &input.data_quality_app_specification {
        let mut object_127 = object.key("DataQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_data_quality_app_specification(
            &mut object_127,
            var_126,
        );
        object_127.finish();
    }
    if let Some(var_128) = &input.data_quality_job_input {
        let mut object_129 = object.key("DataQualityJobInput").start_object();
        crate::json_ser::serialize_structure_data_quality_job_input(&mut object_129, var_128);
        object_129.finish();
    }
    if let Some(var_130) = &input.data_quality_job_output_config {
        let mut object_131 = object.key("DataQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_131, var_130);
        object_131.finish();
    }
    if let Some(var_132) = &input.job_resources {
        let mut object_133 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_133, var_132);
        object_133.finish();
    }
    if let Some(var_134) = &input.network_config {
        let mut object_135 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_135, var_134);
        object_135.finish();
    }
    if let Some(var_136) = &input.role_arn {
        object.key("RoleArn").string(var_136);
    }
    if let Some(var_137) = &input.stopping_condition {
        let mut object_138 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_138,
            var_137,
        );
        object_138.finish();
    }
    if let Some(var_139) = &input.tags {
        let mut array_140 = object.key("Tags").start_array();
        for item_141 in var_139 {
            {
                let mut object_142 = array_140.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_142, item_141);
                object_142.finish();
            }
        }
        array_140.finish();
    }
}

pub fn serialize_structure_create_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceFleetInput,
) {
    if let Some(var_143) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_143);
    }
    if let Some(var_144) = &input.role_arn {
        object.key("RoleArn").string(var_144);
    }
    if let Some(var_145) = &input.description {
        object.key("Description").string(var_145);
    }
    if let Some(var_146) = &input.output_config {
        let mut object_147 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_147, var_146);
        object_147.finish();
    }
    if let Some(var_148) = &input.tags {
        let mut array_149 = object.key("Tags").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_151, item_150);
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_152);
    }
}

pub fn serialize_structure_create_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) {
    if let Some(var_153) = &input.domain_name {
        object.key("DomainName").string(var_153);
    }
    if let Some(var_154) = &input.auth_mode {
        object.key("AuthMode").string(var_154.as_str());
    }
    if let Some(var_155) = &input.default_user_settings {
        let mut object_156 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_156, var_155);
        object_156.finish();
    }
    if let Some(var_157) = &input.subnet_ids {
        let mut array_158 = object.key("SubnetIds").start_array();
        for item_159 in var_157 {
            {
                array_158.value().string(item_159);
            }
        }
        array_158.finish();
    }
    if let Some(var_160) = &input.vpc_id {
        object.key("VpcId").string(var_160);
    }
    if let Some(var_161) = &input.tags {
        let mut array_162 = object.key("Tags").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_164, item_163);
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_165.as_str());
    }
    if let Some(var_166) = &input.home_efs_file_system_kms_key_id {
        object.key("HomeEfsFileSystemKmsKeyId").string(var_166);
    }
    if let Some(var_167) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_167);
    }
}

pub fn serialize_structure_create_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgePackagingJobInput,
) {
    if let Some(var_168) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_168);
    }
    if let Some(var_169) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_169);
    }
    if let Some(var_170) = &input.model_name {
        object.key("ModelName").string(var_170);
    }
    if let Some(var_171) = &input.model_version {
        object.key("ModelVersion").string(var_171);
    }
    if let Some(var_172) = &input.role_arn {
        object.key("RoleArn").string(var_172);
    }
    if let Some(var_173) = &input.output_config {
        let mut object_174 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_174, var_173);
        object_174.finish();
    }
    if let Some(var_175) = &input.resource_key {
        object.key("ResourceKey").string(var_175);
    }
    if let Some(var_176) = &input.tags {
        let mut array_177 = object.key("Tags").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_179, item_178);
                object_179.finish();
            }
        }
        array_177.finish();
    }
}

pub fn serialize_structure_create_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) {
    if let Some(var_180) = &input.endpoint_name {
        object.key("EndpointName").string(var_180);
    }
    if let Some(var_181) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_181);
    }
    if let Some(var_182) = &input.tags {
        let mut array_183 = object.key("Tags").start_array();
        for item_184 in var_182 {
            {
                let mut object_185 = array_183.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_185, item_184);
                object_185.finish();
            }
        }
        array_183.finish();
    }
}

pub fn serialize_structure_create_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointConfigInput,
) {
    if let Some(var_186) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_186);
    }
    if let Some(var_187) = &input.production_variants {
        let mut array_188 = object.key("ProductionVariants").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_production_variant(&mut object_190, item_189);
                object_190.finish();
            }
        }
        array_188.finish();
    }
    if let Some(var_191) = &input.data_capture_config {
        let mut object_192 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_data_capture_config(&mut object_192, var_191);
        object_192.finish();
    }
    if let Some(var_193) = &input.tags {
        let mut array_194 = object.key("Tags").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_196, item_195);
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_197);
    }
}

pub fn serialize_structure_create_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperimentInput,
) {
    if let Some(var_198) = &input.experiment_name {
        object.key("ExperimentName").string(var_198);
    }
    if let Some(var_199) = &input.display_name {
        object.key("DisplayName").string(var_199);
    }
    if let Some(var_200) = &input.description {
        object.key("Description").string(var_200);
    }
    if let Some(var_201) = &input.tags {
        let mut array_202 = object.key("Tags").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_204, item_203);
                object_204.finish();
            }
        }
        array_202.finish();
    }
}

pub fn serialize_structure_create_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFeatureGroupInput,
) {
    if let Some(var_205) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_205);
    }
    if let Some(var_206) = &input.record_identifier_feature_name {
        object.key("RecordIdentifierFeatureName").string(var_206);
    }
    if let Some(var_207) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_207);
    }
    if let Some(var_208) = &input.feature_definitions {
        let mut array_209 = object.key("FeatureDefinitions").start_array();
        for item_210 in var_208 {
            {
                let mut object_211 = array_209.value().start_object();
                crate::json_ser::serialize_structure_feature_definition(&mut object_211, item_210);
                object_211.finish();
            }
        }
        array_209.finish();
    }
    if let Some(var_212) = &input.online_store_config {
        let mut object_213 = object.key("OnlineStoreConfig").start_object();
        crate::json_ser::serialize_structure_online_store_config(&mut object_213, var_212);
        object_213.finish();
    }
    if let Some(var_214) = &input.offline_store_config {
        let mut object_215 = object.key("OfflineStoreConfig").start_object();
        crate::json_ser::serialize_structure_offline_store_config(&mut object_215, var_214);
        object_215.finish();
    }
    if let Some(var_216) = &input.role_arn {
        object.key("RoleArn").string(var_216);
    }
    if let Some(var_217) = &input.description {
        object.key("Description").string(var_217);
    }
    if let Some(var_218) = &input.tags {
        let mut array_219 = object.key("Tags").start_array();
        for item_220 in var_218 {
            {
                let mut object_221 = array_219.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_221, item_220);
                object_221.finish();
            }
        }
        array_219.finish();
    }
}

pub fn serialize_structure_create_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowDefinitionInput,
) {
    if let Some(var_222) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_222);
    }
    if let Some(var_223) = &input.human_loop_request_source {
        let mut object_224 = object.key("HumanLoopRequestSource").start_object();
        crate::json_ser::serialize_structure_human_loop_request_source(&mut object_224, var_223);
        object_224.finish();
    }
    if let Some(var_225) = &input.human_loop_activation_config {
        let mut object_226 = object.key("HumanLoopActivationConfig").start_object();
        crate::json_ser::serialize_structure_human_loop_activation_config(&mut object_226, var_225);
        object_226.finish();
    }
    if let Some(var_227) = &input.human_loop_config {
        let mut object_228 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_human_loop_config(&mut object_228, var_227);
        object_228.finish();
    }
    if let Some(var_229) = &input.output_config {
        let mut object_230 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_flow_definition_output_config(
            &mut object_230,
            var_229,
        );
        object_230.finish();
    }
    if let Some(var_231) = &input.role_arn {
        object.key("RoleArn").string(var_231);
    }
    if let Some(var_232) = &input.tags {
        let mut array_233 = object.key("Tags").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_235, item_234);
                object_235.finish();
            }
        }
        array_233.finish();
    }
}

pub fn serialize_structure_create_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHumanTaskUiInput,
) {
    if let Some(var_236) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_236);
    }
    if let Some(var_237) = &input.ui_template {
        let mut object_238 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_ui_template(&mut object_238, var_237);
        object_238.finish();
    }
    if let Some(var_239) = &input.tags {
        let mut array_240 = object.key("Tags").start_array();
        for item_241 in var_239 {
            {
                let mut object_242 = array_240.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_242, item_241);
                object_242.finish();
            }
        }
        array_240.finish();
    }
}

pub fn serialize_structure_create_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHyperParameterTuningJobInput,
) {
    if let Some(var_243) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_243);
    }
    if let Some(var_244) = &input.hyper_parameter_tuning_job_config {
        let mut object_245 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_config(
            &mut object_245,
            var_244,
        );
        object_245.finish();
    }
    if let Some(var_246) = &input.training_job_definition {
        let mut object_247 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_training_job_definition(
            &mut object_247,
            var_246,
        );
        object_247.finish();
    }
    if let Some(var_248) = &input.training_job_definitions {
        let mut array_249 = object.key("TrainingJobDefinitions").start_array();
        for item_250 in var_248 {
            {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_training_job_definition(
                    &mut object_251,
                    item_250,
                );
                object_251.finish();
            }
        }
        array_249.finish();
    }
    if let Some(var_252) = &input.warm_start_config {
        let mut object_253 = object.key("WarmStartConfig").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_warm_start_config(
            &mut object_253,
            var_252,
        );
        object_253.finish();
    }
    if let Some(var_254) = &input.tags {
        let mut array_255 = object.key("Tags").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_257, item_256);
                object_257.finish();
            }
        }
        array_255.finish();
    }
}

pub fn serialize_structure_create_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) {
    if let Some(var_258) = &input.description {
        object.key("Description").string(var_258);
    }
    if let Some(var_259) = &input.display_name {
        object.key("DisplayName").string(var_259);
    }
    if let Some(var_260) = &input.image_name {
        object.key("ImageName").string(var_260);
    }
    if let Some(var_261) = &input.role_arn {
        object.key("RoleArn").string(var_261);
    }
    if let Some(var_262) = &input.tags {
        let mut array_263 = object.key("Tags").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_265, item_264);
                object_265.finish();
            }
        }
        array_263.finish();
    }
}

pub fn serialize_structure_create_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageVersionInput,
) {
    if let Some(var_266) = &input.base_image {
        object.key("BaseImage").string(var_266);
    }
    if let Some(var_267) = &input.client_token {
        object.key("ClientToken").string(var_267);
    }
    if let Some(var_268) = &input.image_name {
        object.key("ImageName").string(var_268);
    }
}

pub fn serialize_structure_create_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLabelingJobInput,
) {
    if let Some(var_269) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_269);
    }
    if let Some(var_270) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_270);
    }
    if let Some(var_271) = &input.input_config {
        let mut object_272 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_input_config(&mut object_272, var_271);
        object_272.finish();
    }
    if let Some(var_273) = &input.output_config {
        let mut object_274 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_output_config(&mut object_274, var_273);
        object_274.finish();
    }
    if let Some(var_275) = &input.role_arn {
        object.key("RoleArn").string(var_275);
    }
    if let Some(var_276) = &input.label_category_config_s3_uri {
        object.key("LabelCategoryConfigS3Uri").string(var_276);
    }
    if let Some(var_277) = &input.stopping_conditions {
        let mut object_278 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_labeling_job_stopping_conditions(
            &mut object_278,
            var_277,
        );
        object_278.finish();
    }
    if let Some(var_279) = &input.labeling_job_algorithms_config {
        let mut object_280 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_algorithms_config(
            &mut object_280,
            var_279,
        );
        object_280.finish();
    }
    if let Some(var_281) = &input.human_task_config {
        let mut object_282 = object.key("HumanTaskConfig").start_object();
        crate::json_ser::serialize_structure_human_task_config(&mut object_282, var_281);
        object_282.finish();
    }
    if let Some(var_283) = &input.tags {
        let mut array_284 = object.key("Tags").start_array();
        for item_285 in var_283 {
            {
                let mut object_286 = array_284.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_286, item_285);
                object_286.finish();
            }
        }
        array_284.finish();
    }
}

pub fn serialize_structure_create_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) {
    if let Some(var_287) = &input.model_name {
        object.key("ModelName").string(var_287);
    }
    if let Some(var_288) = &input.primary_container {
        let mut object_289 = object.key("PrimaryContainer").start_object();
        crate::json_ser::serialize_structure_container_definition(&mut object_289, var_288);
        object_289.finish();
    }
    if let Some(var_290) = &input.containers {
        let mut array_291 = object.key("Containers").start_array();
        for item_292 in var_290 {
            {
                let mut object_293 = array_291.value().start_object();
                crate::json_ser::serialize_structure_container_definition(
                    &mut object_293,
                    item_292,
                );
                object_293.finish();
            }
        }
        array_291.finish();
    }
    if let Some(var_294) = &input.inference_execution_config {
        let mut object_295 = object.key("InferenceExecutionConfig").start_object();
        crate::json_ser::serialize_structure_inference_execution_config(&mut object_295, var_294);
        object_295.finish();
    }
    if let Some(var_296) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_296);
    }
    if let Some(var_297) = &input.tags {
        let mut array_298 = object.key("Tags").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_300, item_299);
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.vpc_config {
        let mut object_302 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_302, var_301);
        object_302.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
}

pub fn serialize_structure_create_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelBiasJobDefinitionInput,
) {
    if let Some(var_303) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_303);
    }
    if let Some(var_304) = &input.model_bias_baseline_config {
        let mut object_305 = object.key("ModelBiasBaselineConfig").start_object();
        crate::json_ser::serialize_structure_model_bias_baseline_config(&mut object_305, var_304);
        object_305.finish();
    }
    if let Some(var_306) = &input.model_bias_app_specification {
        let mut object_307 = object.key("ModelBiasAppSpecification").start_object();
        crate::json_ser::serialize_structure_model_bias_app_specification(&mut object_307, var_306);
        object_307.finish();
    }
    if let Some(var_308) = &input.model_bias_job_input {
        let mut object_309 = object.key("ModelBiasJobInput").start_object();
        crate::json_ser::serialize_structure_model_bias_job_input(&mut object_309, var_308);
        object_309.finish();
    }
    if let Some(var_310) = &input.model_bias_job_output_config {
        let mut object_311 = object.key("ModelBiasJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_311, var_310);
        object_311.finish();
    }
    if let Some(var_312) = &input.job_resources {
        let mut object_313 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_313, var_312);
        object_313.finish();
    }
    if let Some(var_314) = &input.network_config {
        let mut object_315 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_315, var_314);
        object_315.finish();
    }
    if let Some(var_316) = &input.role_arn {
        object.key("RoleArn").string(var_316);
    }
    if let Some(var_317) = &input.stopping_condition {
        let mut object_318 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_318,
            var_317,
        );
        object_318.finish();
    }
    if let Some(var_319) = &input.tags {
        let mut array_320 = object.key("Tags").start_array();
        for item_321 in var_319 {
            {
                let mut object_322 = array_320.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_322, item_321);
                object_322.finish();
            }
        }
        array_320.finish();
    }
}

pub fn serialize_structure_create_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_323) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_323);
    }
    if let Some(var_324) = &input.model_explainability_baseline_config {
        let mut object_325 = object
            .key("ModelExplainabilityBaselineConfig")
            .start_object();
        crate::json_ser::serialize_structure_model_explainability_baseline_config(
            &mut object_325,
            var_324,
        );
        object_325.finish();
    }
    if let Some(var_326) = &input.model_explainability_app_specification {
        let mut object_327 = object
            .key("ModelExplainabilityAppSpecification")
            .start_object();
        crate::json_ser::serialize_structure_model_explainability_app_specification(
            &mut object_327,
            var_326,
        );
        object_327.finish();
    }
    if let Some(var_328) = &input.model_explainability_job_input {
        let mut object_329 = object.key("ModelExplainabilityJobInput").start_object();
        crate::json_ser::serialize_structure_model_explainability_job_input(
            &mut object_329,
            var_328,
        );
        object_329.finish();
    }
    if let Some(var_330) = &input.model_explainability_job_output_config {
        let mut object_331 = object
            .key("ModelExplainabilityJobOutputConfig")
            .start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_331, var_330);
        object_331.finish();
    }
    if let Some(var_332) = &input.job_resources {
        let mut object_333 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_333, var_332);
        object_333.finish();
    }
    if let Some(var_334) = &input.network_config {
        let mut object_335 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_335, var_334);
        object_335.finish();
    }
    if let Some(var_336) = &input.role_arn {
        object.key("RoleArn").string(var_336);
    }
    if let Some(var_337) = &input.stopping_condition {
        let mut object_338 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_338,
            var_337,
        );
        object_338.finish();
    }
    if let Some(var_339) = &input.tags {
        let mut array_340 = object.key("Tags").start_array();
        for item_341 in var_339 {
            {
                let mut object_342 = array_340.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_342, item_341);
                object_342.finish();
            }
        }
        array_340.finish();
    }
}

pub fn serialize_structure_create_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageInput,
) {
    if let Some(var_343) = &input.model_package_name {
        object.key("ModelPackageName").string(var_343);
    }
    if let Some(var_344) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_344);
    }
    if let Some(var_345) = &input.model_package_description {
        object.key("ModelPackageDescription").string(var_345);
    }
    if let Some(var_346) = &input.inference_specification {
        let mut object_347 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_inference_specification(&mut object_347, var_346);
        object_347.finish();
    }
    if let Some(var_348) = &input.validation_specification {
        let mut object_349 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_model_package_validation_specification(
            &mut object_349,
            var_348,
        );
        object_349.finish();
    }
    if let Some(var_350) = &input.source_algorithm_specification {
        let mut object_351 = object.key("SourceAlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_source_algorithm_specification(
            &mut object_351,
            var_350,
        );
        object_351.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_352) = &input.tags {
        let mut array_353 = object.key("Tags").start_array();
        for item_354 in var_352 {
            {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_355, item_354);
                object_355.finish();
            }
        }
        array_353.finish();
    }
    if let Some(var_356) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_356.as_str());
    }
    if let Some(var_357) = &input.metadata_properties {
        let mut object_358 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_358, var_357);
        object_358.finish();
    }
    if let Some(var_359) = &input.model_metrics {
        let mut object_360 = object.key("ModelMetrics").start_object();
        crate::json_ser::serialize_structure_model_metrics(&mut object_360, var_359);
        object_360.finish();
    }
    if let Some(var_361) = &input.client_token {
        object.key("ClientToken").string(var_361);
    }
}

pub fn serialize_structure_create_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageGroupInput,
) {
    if let Some(var_362) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_362);
    }
    if let Some(var_363) = &input.model_package_group_description {
        object.key("ModelPackageGroupDescription").string(var_363);
    }
    if let Some(var_364) = &input.tags {
        let mut array_365 = object.key("Tags").start_array();
        for item_366 in var_364 {
            {
                let mut object_367 = array_365.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_367, item_366);
                object_367.finish();
            }
        }
        array_365.finish();
    }
}

pub fn serialize_structure_create_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelQualityJobDefinitionInput,
) {
    if let Some(var_368) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_368);
    }
    if let Some(var_369) = &input.model_quality_baseline_config {
        let mut object_370 = object.key("ModelQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_model_quality_baseline_config(
            &mut object_370,
            var_369,
        );
        object_370.finish();
    }
    if let Some(var_371) = &input.model_quality_app_specification {
        let mut object_372 = object.key("ModelQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_model_quality_app_specification(
            &mut object_372,
            var_371,
        );
        object_372.finish();
    }
    if let Some(var_373) = &input.model_quality_job_input {
        let mut object_374 = object.key("ModelQualityJobInput").start_object();
        crate::json_ser::serialize_structure_model_quality_job_input(&mut object_374, var_373);
        object_374.finish();
    }
    if let Some(var_375) = &input.model_quality_job_output_config {
        let mut object_376 = object.key("ModelQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_376, var_375);
        object_376.finish();
    }
    if let Some(var_377) = &input.job_resources {
        let mut object_378 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_378, var_377);
        object_378.finish();
    }
    if let Some(var_379) = &input.network_config {
        let mut object_380 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_380, var_379);
        object_380.finish();
    }
    if let Some(var_381) = &input.role_arn {
        object.key("RoleArn").string(var_381);
    }
    if let Some(var_382) = &input.stopping_condition {
        let mut object_383 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_383,
            var_382,
        );
        object_383.finish();
    }
    if let Some(var_384) = &input.tags {
        let mut array_385 = object.key("Tags").start_array();
        for item_386 in var_384 {
            {
                let mut object_387 = array_385.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_387, item_386);
                object_387.finish();
            }
        }
        array_385.finish();
    }
}

pub fn serialize_structure_create_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMonitoringScheduleInput,
) {
    if let Some(var_388) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_388);
    }
    if let Some(var_389) = &input.monitoring_schedule_config {
        let mut object_390 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_schedule_config(&mut object_390, var_389);
        object_390.finish();
    }
    if let Some(var_391) = &input.tags {
        let mut array_392 = object.key("Tags").start_array();
        for item_393 in var_391 {
            {
                let mut object_394 = array_392.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_394, item_393);
                object_394.finish();
            }
        }
        array_392.finish();
    }
}

pub fn serialize_structure_create_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceInput,
) {
    if let Some(var_395) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_395);
    }
    if let Some(var_396) = &input.instance_type {
        object.key("InstanceType").string(var_396.as_str());
    }
    if let Some(var_397) = &input.subnet_id {
        object.key("SubnetId").string(var_397);
    }
    if let Some(var_398) = &input.security_group_ids {
        let mut array_399 = object.key("SecurityGroupIds").start_array();
        for item_400 in var_398 {
            {
                array_399.value().string(item_400);
            }
        }
        array_399.finish();
    }
    if let Some(var_401) = &input.role_arn {
        object.key("RoleArn").string(var_401);
    }
    if let Some(var_402) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_402);
    }
    if let Some(var_403) = &input.tags {
        let mut array_404 = object.key("Tags").start_array();
        for item_405 in var_403 {
            {
                let mut object_406 = array_404.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_406, item_405);
                object_406.finish();
            }
        }
        array_404.finish();
    }
    if let Some(var_407) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_407);
    }
    if let Some(var_408) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_408.as_str());
    }
    if let Some(var_409) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_409).into()),
        );
    }
    if let Some(var_410) = &input.accelerator_types {
        let mut array_411 = object.key("AcceleratorTypes").start_array();
        for item_412 in var_410 {
            {
                array_411.value().string(item_412.as_str());
            }
        }
        array_411.finish();
    }
    if let Some(var_413) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_413);
    }
    if let Some(var_414) = &input.additional_code_repositories {
        let mut array_415 = object.key("AdditionalCodeRepositories").start_array();
        for item_416 in var_414 {
            {
                array_415.value().string(item_416);
            }
        }
        array_415.finish();
    }
    if let Some(var_417) = &input.root_access {
        object.key("RootAccess").string(var_417.as_str());
    }
}

pub fn serialize_structure_create_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_418) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_418);
    }
    if let Some(var_419) = &input.on_create {
        let mut array_420 = object.key("OnCreate").start_array();
        for item_421 in var_419 {
            {
                let mut object_422 = array_420.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_422,
                    item_421,
                );
                object_422.finish();
            }
        }
        array_420.finish();
    }
    if let Some(var_423) = &input.on_start {
        let mut array_424 = object.key("OnStart").start_array();
        for item_425 in var_423 {
            {
                let mut object_426 = array_424.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_426,
                    item_425,
                );
                object_426.finish();
            }
        }
        array_424.finish();
    }
}

pub fn serialize_structure_create_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePipelineInput,
) {
    if let Some(var_427) = &input.pipeline_name {
        object.key("PipelineName").string(var_427);
    }
    if let Some(var_428) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_428);
    }
    if let Some(var_429) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_429);
    }
    if let Some(var_430) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_430);
    }
    if let Some(var_431) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_431);
    }
    if let Some(var_432) = &input.role_arn {
        object.key("RoleArn").string(var_432);
    }
    if let Some(var_433) = &input.tags {
        let mut array_434 = object.key("Tags").start_array();
        for item_435 in var_433 {
            {
                let mut object_436 = array_434.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_436, item_435);
                object_436.finish();
            }
        }
        array_434.finish();
    }
}

pub fn serialize_structure_create_presigned_domain_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedDomainUrlInput,
) {
    if let Some(var_437) = &input.domain_id {
        object.key("DomainId").string(var_437);
    }
    if let Some(var_438) = &input.user_profile_name {
        object.key("UserProfileName").string(var_438);
    }
    if let Some(var_439) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_439).into()),
        );
    }
    if let Some(var_440) = &input.expires_in_seconds {
        object.key("ExpiresInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_440).into()),
        );
    }
}

pub fn serialize_structure_create_presigned_notebook_instance_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedNotebookInstanceUrlInput,
) {
    if let Some(var_441) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_441);
    }
    if let Some(var_442) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_442).into()),
        );
    }
}

pub fn serialize_structure_create_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProcessingJobInput,
) {
    if let Some(var_443) = &input.processing_inputs {
        let mut array_444 = object.key("ProcessingInputs").start_array();
        for item_445 in var_443 {
            {
                let mut object_446 = array_444.value().start_object();
                crate::json_ser::serialize_structure_processing_input(&mut object_446, item_445);
                object_446.finish();
            }
        }
        array_444.finish();
    }
    if let Some(var_447) = &input.processing_output_config {
        let mut object_448 = object.key("ProcessingOutputConfig").start_object();
        crate::json_ser::serialize_structure_processing_output_config(&mut object_448, var_447);
        object_448.finish();
    }
    if let Some(var_449) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_449);
    }
    if let Some(var_450) = &input.processing_resources {
        let mut object_451 = object.key("ProcessingResources").start_object();
        crate::json_ser::serialize_structure_processing_resources(&mut object_451, var_450);
        object_451.finish();
    }
    if let Some(var_452) = &input.stopping_condition {
        let mut object_453 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_processing_stopping_condition(
            &mut object_453,
            var_452,
        );
        object_453.finish();
    }
    if let Some(var_454) = &input.app_specification {
        let mut object_455 = object.key("AppSpecification").start_object();
        crate::json_ser::serialize_structure_app_specification(&mut object_455, var_454);
        object_455.finish();
    }
    if let Some(var_456) = &input.environment {
        let mut object_457 = object.key("Environment").start_object();
        for (key_458, value_459) in var_456 {
            {
                object_457.key(key_458).string(value_459);
            }
        }
        object_457.finish();
    }
    if let Some(var_460) = &input.network_config {
        let mut object_461 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_network_config(&mut object_461, var_460);
        object_461.finish();
    }
    if let Some(var_462) = &input.role_arn {
        object.key("RoleArn").string(var_462);
    }
    if let Some(var_463) = &input.tags {
        let mut array_464 = object.key("Tags").start_array();
        for item_465 in var_463 {
            {
                let mut object_466 = array_464.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_466, item_465);
                object_466.finish();
            }
        }
        array_464.finish();
    }
    if let Some(var_467) = &input.experiment_config {
        let mut object_468 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_468, var_467);
        object_468.finish();
    }
}

pub fn serialize_structure_create_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) {
    if let Some(var_469) = &input.project_name {
        object.key("ProjectName").string(var_469);
    }
    if let Some(var_470) = &input.project_description {
        object.key("ProjectDescription").string(var_470);
    }
    if let Some(var_471) = &input.service_catalog_provisioning_details {
        let mut object_472 = object
            .key("ServiceCatalogProvisioningDetails")
            .start_object();
        crate::json_ser::serialize_structure_service_catalog_provisioning_details(
            &mut object_472,
            var_471,
        );
        object_472.finish();
    }
    if let Some(var_473) = &input.tags {
        let mut array_474 = object.key("Tags").start_array();
        for item_475 in var_473 {
            {
                let mut object_476 = array_474.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_476, item_475);
                object_476.finish();
            }
        }
        array_474.finish();
    }
}

pub fn serialize_structure_create_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrainingJobInput,
) {
    if let Some(var_477) = &input.training_job_name {
        object.key("TrainingJobName").string(var_477);
    }
    if let Some(var_478) = &input.hyper_parameters {
        let mut object_479 = object.key("HyperParameters").start_object();
        for (key_480, value_481) in var_478 {
            {
                object_479.key(key_480).string(value_481);
            }
        }
        object_479.finish();
    }
    if let Some(var_482) = &input.algorithm_specification {
        let mut object_483 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_algorithm_specification(&mut object_483, var_482);
        object_483.finish();
    }
    if let Some(var_484) = &input.role_arn {
        object.key("RoleArn").string(var_484);
    }
    if let Some(var_485) = &input.input_data_config {
        let mut array_486 = object.key("InputDataConfig").start_array();
        for item_487 in var_485 {
            {
                let mut object_488 = array_486.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_488, item_487);
                object_488.finish();
            }
        }
        array_486.finish();
    }
    if let Some(var_489) = &input.output_data_config {
        let mut object_490 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_490, var_489);
        object_490.finish();
    }
    if let Some(var_491) = &input.resource_config {
        let mut object_492 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_492, var_491);
        object_492.finish();
    }
    if let Some(var_493) = &input.vpc_config {
        let mut object_494 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_494, var_493);
        object_494.finish();
    }
    if let Some(var_495) = &input.stopping_condition {
        let mut object_496 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_496, var_495);
        object_496.finish();
    }
    if let Some(var_497) = &input.tags {
        let mut array_498 = object.key("Tags").start_array();
        for item_499 in var_497 {
            {
                let mut object_500 = array_498.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_500, item_499);
                object_500.finish();
            }
        }
        array_498.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_501) = &input.checkpoint_config {
        let mut object_502 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_checkpoint_config(&mut object_502, var_501);
        object_502.finish();
    }
    if let Some(var_503) = &input.debug_hook_config {
        let mut object_504 = object.key("DebugHookConfig").start_object();
        crate::json_ser::serialize_structure_debug_hook_config(&mut object_504, var_503);
        object_504.finish();
    }
    if let Some(var_505) = &input.debug_rule_configurations {
        let mut array_506 = object.key("DebugRuleConfigurations").start_array();
        for item_507 in var_505 {
            {
                let mut object_508 = array_506.value().start_object();
                crate::json_ser::serialize_structure_debug_rule_configuration(
                    &mut object_508,
                    item_507,
                );
                object_508.finish();
            }
        }
        array_506.finish();
    }
    if let Some(var_509) = &input.tensor_board_output_config {
        let mut object_510 = object.key("TensorBoardOutputConfig").start_object();
        crate::json_ser::serialize_structure_tensor_board_output_config(&mut object_510, var_509);
        object_510.finish();
    }
    if let Some(var_511) = &input.experiment_config {
        let mut object_512 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_512, var_511);
        object_512.finish();
    }
    if let Some(var_513) = &input.profiler_config {
        let mut object_514 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_profiler_config(&mut object_514, var_513);
        object_514.finish();
    }
    if let Some(var_515) = &input.profiler_rule_configurations {
        let mut array_516 = object.key("ProfilerRuleConfigurations").start_array();
        for item_517 in var_515 {
            {
                let mut object_518 = array_516.value().start_object();
                crate::json_ser::serialize_structure_profiler_rule_configuration(
                    &mut object_518,
                    item_517,
                );
                object_518.finish();
            }
        }
        array_516.finish();
    }
    if let Some(var_519) = &input.environment {
        let mut object_520 = object.key("Environment").start_object();
        for (key_521, value_522) in var_519 {
            {
                object_520.key(key_521).string(value_522);
            }
        }
        object_520.finish();
    }
    if let Some(var_523) = &input.retry_strategy {
        let mut object_524 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_524, var_523);
        object_524.finish();
    }
}

pub fn serialize_structure_create_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTransformJobInput,
) {
    if let Some(var_525) = &input.transform_job_name {
        object.key("TransformJobName").string(var_525);
    }
    if let Some(var_526) = &input.model_name {
        object.key("ModelName").string(var_526);
    }
    if let Some(var_527) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_527).into()),
        );
    }
    if let Some(var_528) = &input.model_client_config {
        let mut object_529 = object.key("ModelClientConfig").start_object();
        crate::json_ser::serialize_structure_model_client_config(&mut object_529, var_528);
        object_529.finish();
    }
    if let Some(var_530) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_530).into()),
        );
    }
    if let Some(var_531) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_531.as_str());
    }
    if let Some(var_532) = &input.environment {
        let mut object_533 = object.key("Environment").start_object();
        for (key_534, value_535) in var_532 {
            {
                object_533.key(key_534).string(value_535);
            }
        }
        object_533.finish();
    }
    if let Some(var_536) = &input.transform_input {
        let mut object_537 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_transform_input(&mut object_537, var_536);
        object_537.finish();
    }
    if let Some(var_538) = &input.transform_output {
        let mut object_539 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_transform_output(&mut object_539, var_538);
        object_539.finish();
    }
    if let Some(var_540) = &input.transform_resources {
        let mut object_541 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_transform_resources(&mut object_541, var_540);
        object_541.finish();
    }
    if let Some(var_542) = &input.data_processing {
        let mut object_543 = object.key("DataProcessing").start_object();
        crate::json_ser::serialize_structure_data_processing(&mut object_543, var_542);
        object_543.finish();
    }
    if let Some(var_544) = &input.tags {
        let mut array_545 = object.key("Tags").start_array();
        for item_546 in var_544 {
            {
                let mut object_547 = array_545.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_547, item_546);
                object_547.finish();
            }
        }
        array_545.finish();
    }
    if let Some(var_548) = &input.experiment_config {
        let mut object_549 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_549, var_548);
        object_549.finish();
    }
}

pub fn serialize_structure_create_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialInput,
) {
    if let Some(var_550) = &input.trial_name {
        object.key("TrialName").string(var_550);
    }
    if let Some(var_551) = &input.display_name {
        object.key("DisplayName").string(var_551);
    }
    if let Some(var_552) = &input.experiment_name {
        object.key("ExperimentName").string(var_552);
    }
    if let Some(var_553) = &input.metadata_properties {
        let mut object_554 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_554, var_553);
        object_554.finish();
    }
    if let Some(var_555) = &input.tags {
        let mut array_556 = object.key("Tags").start_array();
        for item_557 in var_555 {
            {
                let mut object_558 = array_556.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_558, item_557);
                object_558.finish();
            }
        }
        array_556.finish();
    }
}

pub fn serialize_structure_create_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialComponentInput,
) {
    if let Some(var_559) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_559);
    }
    if let Some(var_560) = &input.display_name {
        object.key("DisplayName").string(var_560);
    }
    if let Some(var_561) = &input.status {
        let mut object_562 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_trial_component_status(&mut object_562, var_561);
        object_562.finish();
    }
    if let Some(var_563) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_563, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_564) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_564, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_565) = &input.parameters {
        let mut object_566 = object.key("Parameters").start_object();
        for (key_567, value_568) in var_565 {
            {
                let mut object_569 = object_566.key(key_567).start_object();
                crate::json_ser::serialize_union_trial_component_parameter_value(
                    &mut object_569,
                    value_568,
                );
                object_569.finish();
            }
        }
        object_566.finish();
    }
    if let Some(var_570) = &input.input_artifacts {
        let mut object_571 = object.key("InputArtifacts").start_object();
        for (key_572, value_573) in var_570 {
            {
                let mut object_574 = object_571.key(key_572).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_574,
                    value_573,
                );
                object_574.finish();
            }
        }
        object_571.finish();
    }
    if let Some(var_575) = &input.output_artifacts {
        let mut object_576 = object.key("OutputArtifacts").start_object();
        for (key_577, value_578) in var_575 {
            {
                let mut object_579 = object_576.key(key_577).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_579,
                    value_578,
                );
                object_579.finish();
            }
        }
        object_576.finish();
    }
    if let Some(var_580) = &input.metadata_properties {
        let mut object_581 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_581, var_580);
        object_581.finish();
    }
    if let Some(var_582) = &input.tags {
        let mut array_583 = object.key("Tags").start_array();
        for item_584 in var_582 {
            {
                let mut object_585 = array_583.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_585, item_584);
                object_585.finish();
            }
        }
        array_583.finish();
    }
}

pub fn serialize_structure_create_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserProfileInput,
) {
    if let Some(var_586) = &input.domain_id {
        object.key("DomainId").string(var_586);
    }
    if let Some(var_587) = &input.user_profile_name {
        object.key("UserProfileName").string(var_587);
    }
    if let Some(var_588) = &input.single_sign_on_user_identifier {
        object.key("SingleSignOnUserIdentifier").string(var_588);
    }
    if let Some(var_589) = &input.single_sign_on_user_value {
        object.key("SingleSignOnUserValue").string(var_589);
    }
    if let Some(var_590) = &input.tags {
        let mut array_591 = object.key("Tags").start_array();
        for item_592 in var_590 {
            {
                let mut object_593 = array_591.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_593, item_592);
                object_593.finish();
            }
        }
        array_591.finish();
    }
    if let Some(var_594) = &input.user_settings {
        let mut object_595 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_595, var_594);
        object_595.finish();
    }
}

pub fn serialize_structure_create_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkforceInput,
) {
    if let Some(var_596) = &input.cognito_config {
        let mut object_597 = object.key("CognitoConfig").start_object();
        crate::json_ser::serialize_structure_cognito_config(&mut object_597, var_596);
        object_597.finish();
    }
    if let Some(var_598) = &input.oidc_config {
        let mut object_599 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_oidc_config(&mut object_599, var_598);
        object_599.finish();
    }
    if let Some(var_600) = &input.source_ip_config {
        let mut object_601 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_source_ip_config(&mut object_601, var_600);
        object_601.finish();
    }
    if let Some(var_602) = &input.workforce_name {
        object.key("WorkforceName").string(var_602);
    }
    if let Some(var_603) = &input.tags {
        let mut array_604 = object.key("Tags").start_array();
        for item_605 in var_603 {
            {
                let mut object_606 = array_604.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_606, item_605);
                object_606.finish();
            }
        }
        array_604.finish();
    }
}

pub fn serialize_structure_create_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkteamInput,
) {
    if let Some(var_607) = &input.workteam_name {
        object.key("WorkteamName").string(var_607);
    }
    if let Some(var_608) = &input.workforce_name {
        object.key("WorkforceName").string(var_608);
    }
    if let Some(var_609) = &input.member_definitions {
        let mut array_610 = object.key("MemberDefinitions").start_array();
        for item_611 in var_609 {
            {
                let mut object_612 = array_610.value().start_object();
                crate::json_ser::serialize_structure_member_definition(&mut object_612, item_611);
                object_612.finish();
            }
        }
        array_610.finish();
    }
    if let Some(var_613) = &input.description {
        object.key("Description").string(var_613);
    }
    if let Some(var_614) = &input.notification_configuration {
        let mut object_615 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_notification_configuration(&mut object_615, var_614);
        object_615.finish();
    }
    if let Some(var_616) = &input.tags {
        let mut array_617 = object.key("Tags").start_array();
        for item_618 in var_616 {
            {
                let mut object_619 = array_617.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_619, item_618);
                object_619.finish();
            }
        }
        array_617.finish();
    }
}

pub fn serialize_structure_delete_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActionInput,
) {
    if let Some(var_620) = &input.action_name {
        object.key("ActionName").string(var_620);
    }
}

pub fn serialize_structure_delete_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlgorithmInput,
) {
    if let Some(var_621) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_621);
    }
}

pub fn serialize_structure_delete_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppInput,
) {
    if let Some(var_622) = &input.domain_id {
        object.key("DomainId").string(var_622);
    }
    if let Some(var_623) = &input.user_profile_name {
        object.key("UserProfileName").string(var_623);
    }
    if let Some(var_624) = &input.app_type {
        object.key("AppType").string(var_624.as_str());
    }
    if let Some(var_625) = &input.app_name {
        object.key("AppName").string(var_625);
    }
}

pub fn serialize_structure_delete_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppImageConfigInput,
) {
    if let Some(var_626) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_626);
    }
}

pub fn serialize_structure_delete_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteArtifactInput,
) {
    if let Some(var_627) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_627);
    }
    if let Some(var_628) = &input.source {
        let mut object_629 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_artifact_source(&mut object_629, var_628);
        object_629.finish();
    }
}

pub fn serialize_structure_delete_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) {
    if let Some(var_630) = &input.source_arn {
        object.key("SourceArn").string(var_630);
    }
    if let Some(var_631) = &input.destination_arn {
        object.key("DestinationArn").string(var_631);
    }
}

pub fn serialize_structure_delete_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCodeRepositoryInput,
) {
    if let Some(var_632) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_632);
    }
}

pub fn serialize_structure_delete_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContextInput,
) {
    if let Some(var_633) = &input.context_name {
        object.key("ContextName").string(var_633);
    }
}

pub fn serialize_structure_delete_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataQualityJobDefinitionInput,
) {
    if let Some(var_634) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_634);
    }
}

pub fn serialize_structure_delete_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeviceFleetInput,
) {
    if let Some(var_635) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_635);
    }
}

pub fn serialize_structure_delete_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) {
    if let Some(var_636) = &input.domain_id {
        object.key("DomainId").string(var_636);
    }
    if let Some(var_637) = &input.retention_policy {
        let mut object_638 = object.key("RetentionPolicy").start_object();
        crate::json_ser::serialize_structure_retention_policy(&mut object_638, var_637);
        object_638.finish();
    }
}

pub fn serialize_structure_delete_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) {
    if let Some(var_639) = &input.endpoint_name {
        object.key("EndpointName").string(var_639);
    }
}

pub fn serialize_structure_delete_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointConfigInput,
) {
    if let Some(var_640) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_640);
    }
}

pub fn serialize_structure_delete_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperimentInput,
) {
    if let Some(var_641) = &input.experiment_name {
        object.key("ExperimentName").string(var_641);
    }
}

pub fn serialize_structure_delete_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFeatureGroupInput,
) {
    if let Some(var_642) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_642);
    }
}

pub fn serialize_structure_delete_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFlowDefinitionInput,
) {
    if let Some(var_643) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_643);
    }
}

pub fn serialize_structure_delete_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteHumanTaskUiInput,
) {
    if let Some(var_644) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_644);
    }
}

pub fn serialize_structure_delete_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) {
    if let Some(var_645) = &input.image_name {
        object.key("ImageName").string(var_645);
    }
}

pub fn serialize_structure_delete_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageVersionInput,
) {
    if let Some(var_646) = &input.image_name {
        object.key("ImageName").string(var_646);
    }
    if let Some(var_647) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_647).into()),
        );
    }
}

pub fn serialize_structure_delete_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelInput,
) {
    if let Some(var_648) = &input.model_name {
        object.key("ModelName").string(var_648);
    }
}

pub fn serialize_structure_delete_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelBiasJobDefinitionInput,
) {
    if let Some(var_649) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_649);
    }
}

pub fn serialize_structure_delete_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_650) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_650);
    }
}

pub fn serialize_structure_delete_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageInput,
) {
    if let Some(var_651) = &input.model_package_name {
        object.key("ModelPackageName").string(var_651);
    }
}

pub fn serialize_structure_delete_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupInput,
) {
    if let Some(var_652) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_652);
    }
}

pub fn serialize_structure_delete_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupPolicyInput,
) {
    if let Some(var_653) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_653);
    }
}

pub fn serialize_structure_delete_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelQualityJobDefinitionInput,
) {
    if let Some(var_654) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_654);
    }
}

pub fn serialize_structure_delete_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMonitoringScheduleInput,
) {
    if let Some(var_655) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_655);
    }
}

pub fn serialize_structure_delete_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceInput,
) {
    if let Some(var_656) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_656);
    }
}

pub fn serialize_structure_delete_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_657) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_657);
    }
}

pub fn serialize_structure_delete_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePipelineInput,
) {
    if let Some(var_658) = &input.pipeline_name {
        object.key("PipelineName").string(var_658);
    }
    if let Some(var_659) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_659);
    }
}

pub fn serialize_structure_delete_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) {
    if let Some(var_660) = &input.project_name {
        object.key("ProjectName").string(var_660);
    }
}

pub fn serialize_structure_delete_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsInput,
) {
    if let Some(var_661) = &input.resource_arn {
        object.key("ResourceArn").string(var_661);
    }
    if let Some(var_662) = &input.tag_keys {
        let mut array_663 = object.key("TagKeys").start_array();
        for item_664 in var_662 {
            {
                array_663.value().string(item_664);
            }
        }
        array_663.finish();
    }
}

pub fn serialize_structure_delete_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialInput,
) {
    if let Some(var_665) = &input.trial_name {
        object.key("TrialName").string(var_665);
    }
}

pub fn serialize_structure_delete_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialComponentInput,
) {
    if let Some(var_666) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_666);
    }
}

pub fn serialize_structure_delete_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserProfileInput,
) {
    if let Some(var_667) = &input.domain_id {
        object.key("DomainId").string(var_667);
    }
    if let Some(var_668) = &input.user_profile_name {
        object.key("UserProfileName").string(var_668);
    }
}

pub fn serialize_structure_delete_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkforceInput,
) {
    if let Some(var_669) = &input.workforce_name {
        object.key("WorkforceName").string(var_669);
    }
}

pub fn serialize_structure_delete_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkteamInput,
) {
    if let Some(var_670) = &input.workteam_name {
        object.key("WorkteamName").string(var_670);
    }
}

pub fn serialize_structure_deregister_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterDevicesInput,
) {
    if let Some(var_671) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_671);
    }
    if let Some(var_672) = &input.device_names {
        let mut array_673 = object.key("DeviceNames").start_array();
        for item_674 in var_672 {
            {
                array_673.value().string(item_674);
            }
        }
        array_673.finish();
    }
}

pub fn serialize_structure_describe_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionInput,
) {
    if let Some(var_675) = &input.action_name {
        object.key("ActionName").string(var_675);
    }
}

pub fn serialize_structure_describe_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlgorithmInput,
) {
    if let Some(var_676) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_676);
    }
}

pub fn serialize_structure_describe_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppInput,
) {
    if let Some(var_677) = &input.domain_id {
        object.key("DomainId").string(var_677);
    }
    if let Some(var_678) = &input.user_profile_name {
        object.key("UserProfileName").string(var_678);
    }
    if let Some(var_679) = &input.app_type {
        object.key("AppType").string(var_679.as_str());
    }
    if let Some(var_680) = &input.app_name {
        object.key("AppName").string(var_680);
    }
}

pub fn serialize_structure_describe_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppImageConfigInput,
) {
    if let Some(var_681) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_681);
    }
}

pub fn serialize_structure_describe_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeArtifactInput,
) {
    if let Some(var_682) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_682);
    }
}

pub fn serialize_structure_describe_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoMlJobInput,
) {
    if let Some(var_683) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_683);
    }
}

pub fn serialize_structure_describe_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCodeRepositoryInput,
) {
    if let Some(var_684) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_684);
    }
}

pub fn serialize_structure_describe_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCompilationJobInput,
) {
    if let Some(var_685) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_685);
    }
}

pub fn serialize_structure_describe_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContextInput,
) {
    if let Some(var_686) = &input.context_name {
        object.key("ContextName").string(var_686);
    }
}

pub fn serialize_structure_describe_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataQualityJobDefinitionInput,
) {
    if let Some(var_687) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_687);
    }
}

pub fn serialize_structure_describe_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceInput,
) {
    if let Some(var_688) = &input.next_token {
        object.key("NextToken").string(var_688);
    }
    if let Some(var_689) = &input.device_name {
        object.key("DeviceName").string(var_689);
    }
    if let Some(var_690) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_690);
    }
}

pub fn serialize_structure_describe_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceFleetInput,
) {
    if let Some(var_691) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_691);
    }
}

pub fn serialize_structure_describe_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainInput,
) {
    if let Some(var_692) = &input.domain_id {
        object.key("DomainId").string(var_692);
    }
}

pub fn serialize_structure_describe_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgePackagingJobInput,
) {
    if let Some(var_693) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_693);
    }
}

pub fn serialize_structure_describe_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) {
    if let Some(var_694) = &input.endpoint_name {
        object.key("EndpointName").string(var_694);
    }
}

pub fn serialize_structure_describe_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointConfigInput,
) {
    if let Some(var_695) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_695);
    }
}

pub fn serialize_structure_describe_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperimentInput,
) {
    if let Some(var_696) = &input.experiment_name {
        object.key("ExperimentName").string(var_696);
    }
}

pub fn serialize_structure_describe_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureGroupInput,
) {
    if let Some(var_697) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_697);
    }
    if let Some(var_698) = &input.next_token {
        object.key("NextToken").string(var_698);
    }
}

pub fn serialize_structure_describe_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowDefinitionInput,
) {
    if let Some(var_699) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_699);
    }
}

pub fn serialize_structure_describe_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHumanTaskUiInput,
) {
    if let Some(var_700) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_700);
    }
}

pub fn serialize_structure_describe_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHyperParameterTuningJobInput,
) {
    if let Some(var_701) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_701);
    }
}

pub fn serialize_structure_describe_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageInput,
) {
    if let Some(var_702) = &input.image_name {
        object.key("ImageName").string(var_702);
    }
}

pub fn serialize_structure_describe_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageVersionInput,
) {
    if let Some(var_703) = &input.image_name {
        object.key("ImageName").string(var_703);
    }
    if let Some(var_704) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_704).into()),
        );
    }
}

pub fn serialize_structure_describe_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLabelingJobInput,
) {
    if let Some(var_705) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_705);
    }
}

pub fn serialize_structure_describe_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelInput,
) {
    if let Some(var_706) = &input.model_name {
        object.key("ModelName").string(var_706);
    }
}

pub fn serialize_structure_describe_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelBiasJobDefinitionInput,
) {
    if let Some(var_707) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_707);
    }
}

pub fn serialize_structure_describe_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_708) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_708);
    }
}

pub fn serialize_structure_describe_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageInput,
) {
    if let Some(var_709) = &input.model_package_name {
        object.key("ModelPackageName").string(var_709);
    }
}

pub fn serialize_structure_describe_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageGroupInput,
) {
    if let Some(var_710) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_710);
    }
}

pub fn serialize_structure_describe_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelQualityJobDefinitionInput,
) {
    if let Some(var_711) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_711);
    }
}

pub fn serialize_structure_describe_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMonitoringScheduleInput,
) {
    if let Some(var_712) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_712);
    }
}

pub fn serialize_structure_describe_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceInput,
) {
    if let Some(var_713) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_713);
    }
}

pub fn serialize_structure_describe_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_714) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_714);
    }
}

pub fn serialize_structure_describe_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineInput,
) {
    if let Some(var_715) = &input.pipeline_name {
        object.key("PipelineName").string(var_715);
    }
}

pub fn serialize_structure_describe_pipeline_definition_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineDefinitionForExecutionInput,
) {
    if let Some(var_716) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_716);
    }
}

pub fn serialize_structure_describe_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineExecutionInput,
) {
    if let Some(var_717) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_717);
    }
}

pub fn serialize_structure_describe_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProcessingJobInput,
) {
    if let Some(var_718) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_718);
    }
}

pub fn serialize_structure_describe_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectInput,
) {
    if let Some(var_719) = &input.project_name {
        object.key("ProjectName").string(var_719);
    }
}

pub fn serialize_structure_describe_subscribed_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSubscribedWorkteamInput,
) {
    if let Some(var_720) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_720);
    }
}

pub fn serialize_structure_describe_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrainingJobInput,
) {
    if let Some(var_721) = &input.training_job_name {
        object.key("TrainingJobName").string(var_721);
    }
}

pub fn serialize_structure_describe_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTransformJobInput,
) {
    if let Some(var_722) = &input.transform_job_name {
        object.key("TransformJobName").string(var_722);
    }
}

pub fn serialize_structure_describe_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialInput,
) {
    if let Some(var_723) = &input.trial_name {
        object.key("TrialName").string(var_723);
    }
}

pub fn serialize_structure_describe_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialComponentInput,
) {
    if let Some(var_724) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_724);
    }
}

pub fn serialize_structure_describe_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserProfileInput,
) {
    if let Some(var_725) = &input.domain_id {
        object.key("DomainId").string(var_725);
    }
    if let Some(var_726) = &input.user_profile_name {
        object.key("UserProfileName").string(var_726);
    }
}

pub fn serialize_structure_describe_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkforceInput,
) {
    if let Some(var_727) = &input.workforce_name {
        object.key("WorkforceName").string(var_727);
    }
}

pub fn serialize_structure_describe_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkteamInput,
) {
    if let Some(var_728) = &input.workteam_name {
        object.key("WorkteamName").string(var_728);
    }
}

pub fn serialize_structure_disassociate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTrialComponentInput,
) {
    if let Some(var_729) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_729);
    }
    if let Some(var_730) = &input.trial_name {
        object.key("TrialName").string(var_730);
    }
}

pub fn serialize_structure_get_device_fleet_report_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceFleetReportInput,
) {
    if let Some(var_731) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_731);
    }
}

pub fn serialize_structure_get_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelPackageGroupPolicyInput,
) {
    if let Some(var_732) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_732);
    }
}

pub fn serialize_structure_get_search_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSearchSuggestionsInput,
) {
    if let Some(var_733) = &input.resource {
        object.key("Resource").string(var_733.as_str());
    }
    if let Some(var_734) = &input.suggestion_query {
        let mut object_735 = object.key("SuggestionQuery").start_object();
        crate::json_ser::serialize_structure_suggestion_query(&mut object_735, var_734);
        object_735.finish();
    }
}

pub fn serialize_structure_list_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListActionsInput,
) {
    if let Some(var_736) = &input.source_uri {
        object.key("SourceUri").string(var_736);
    }
    if let Some(var_737) = &input.action_type {
        object.key("ActionType").string(var_737);
    }
    if let Some(var_738) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_738, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_739) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_739, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_740) = &input.sort_by {
        object.key("SortBy").string(var_740.as_str());
    }
    if let Some(var_741) = &input.sort_order {
        object.key("SortOrder").string(var_741.as_str());
    }
    if let Some(var_742) = &input.next_token {
        object.key("NextToken").string(var_742);
    }
    if let Some(var_743) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_743).into()),
        );
    }
}

pub fn serialize_structure_list_algorithms_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlgorithmsInput,
) {
    if let Some(var_744) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_744, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_745) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_745, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_746) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_746).into()),
        );
    }
    if let Some(var_747) = &input.name_contains {
        object.key("NameContains").string(var_747);
    }
    if let Some(var_748) = &input.next_token {
        object.key("NextToken").string(var_748);
    }
    if let Some(var_749) = &input.sort_by {
        object.key("SortBy").string(var_749.as_str());
    }
    if let Some(var_750) = &input.sort_order {
        object.key("SortOrder").string(var_750.as_str());
    }
}

pub fn serialize_structure_list_app_image_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppImageConfigsInput,
) {
    if let Some(var_751) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_751).into()),
        );
    }
    if let Some(var_752) = &input.next_token {
        object.key("NextToken").string(var_752);
    }
    if let Some(var_753) = &input.name_contains {
        object.key("NameContains").string(var_753);
    }
    if let Some(var_754) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_754, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_755) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_755, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_756) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .instant(var_756, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_757) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .instant(var_757, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_758) = &input.sort_by {
        object.key("SortBy").string(var_758.as_str());
    }
    if let Some(var_759) = &input.sort_order {
        object.key("SortOrder").string(var_759.as_str());
    }
}

pub fn serialize_structure_list_apps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppsInput,
) {
    if let Some(var_760) = &input.next_token {
        object.key("NextToken").string(var_760);
    }
    if let Some(var_761) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_761).into()),
        );
    }
    if let Some(var_762) = &input.sort_order {
        object.key("SortOrder").string(var_762.as_str());
    }
    if let Some(var_763) = &input.sort_by {
        object.key("SortBy").string(var_763.as_str());
    }
    if let Some(var_764) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_764);
    }
    if let Some(var_765) = &input.user_profile_name_equals {
        object.key("UserProfileNameEquals").string(var_765);
    }
}

pub fn serialize_structure_list_artifacts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListArtifactsInput,
) {
    if let Some(var_766) = &input.source_uri {
        object.key("SourceUri").string(var_766);
    }
    if let Some(var_767) = &input.artifact_type {
        object.key("ArtifactType").string(var_767);
    }
    if let Some(var_768) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_768, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_769) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_769, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_770) = &input.sort_by {
        object.key("SortBy").string(var_770.as_str());
    }
    if let Some(var_771) = &input.sort_order {
        object.key("SortOrder").string(var_771.as_str());
    }
    if let Some(var_772) = &input.next_token {
        object.key("NextToken").string(var_772);
    }
    if let Some(var_773) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_773).into()),
        );
    }
}

pub fn serialize_structure_list_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) {
    if let Some(var_774) = &input.source_arn {
        object.key("SourceArn").string(var_774);
    }
    if let Some(var_775) = &input.destination_arn {
        object.key("DestinationArn").string(var_775);
    }
    if let Some(var_776) = &input.source_type {
        object.key("SourceType").string(var_776);
    }
    if let Some(var_777) = &input.destination_type {
        object.key("DestinationType").string(var_777);
    }
    if let Some(var_778) = &input.association_type {
        object.key("AssociationType").string(var_778.as_str());
    }
    if let Some(var_779) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_779, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_780) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_780, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_781) = &input.sort_by {
        object.key("SortBy").string(var_781.as_str());
    }
    if let Some(var_782) = &input.sort_order {
        object.key("SortOrder").string(var_782.as_str());
    }
    if let Some(var_783) = &input.next_token {
        object.key("NextToken").string(var_783);
    }
    if let Some(var_784) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_784).into()),
        );
    }
}

pub fn serialize_structure_list_auto_ml_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutoMlJobsInput,
) {
    if let Some(var_785) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_785, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_786) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_786, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_787) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_787, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_788) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_788, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_789) = &input.name_contains {
        object.key("NameContains").string(var_789);
    }
    if let Some(var_790) = &input.status_equals {
        object.key("StatusEquals").string(var_790.as_str());
    }
    if let Some(var_791) = &input.sort_order {
        object.key("SortOrder").string(var_791.as_str());
    }
    if let Some(var_792) = &input.sort_by {
        object.key("SortBy").string(var_792.as_str());
    }
    if let Some(var_793) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_793).into()),
        );
    }
    if let Some(var_794) = &input.next_token {
        object.key("NextToken").string(var_794);
    }
}

pub fn serialize_structure_list_candidates_for_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCandidatesForAutoMlJobInput,
) {
    if let Some(var_795) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_795);
    }
    if let Some(var_796) = &input.status_equals {
        object.key("StatusEquals").string(var_796.as_str());
    }
    if let Some(var_797) = &input.candidate_name_equals {
        object.key("CandidateNameEquals").string(var_797);
    }
    if let Some(var_798) = &input.sort_order {
        object.key("SortOrder").string(var_798.as_str());
    }
    if let Some(var_799) = &input.sort_by {
        object.key("SortBy").string(var_799.as_str());
    }
    if let Some(var_800) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_800).into()),
        );
    }
    if let Some(var_801) = &input.next_token {
        object.key("NextToken").string(var_801);
    }
}

pub fn serialize_structure_list_code_repositories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCodeRepositoriesInput,
) {
    if let Some(var_802) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_802, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_803) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_803, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_804) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_804, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_805) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_805, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_806) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_806).into()),
        );
    }
    if let Some(var_807) = &input.name_contains {
        object.key("NameContains").string(var_807);
    }
    if let Some(var_808) = &input.next_token {
        object.key("NextToken").string(var_808);
    }
    if let Some(var_809) = &input.sort_by {
        object.key("SortBy").string(var_809.as_str());
    }
    if let Some(var_810) = &input.sort_order {
        object.key("SortOrder").string(var_810.as_str());
    }
}

pub fn serialize_structure_list_compilation_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCompilationJobsInput,
) {
    if let Some(var_811) = &input.next_token {
        object.key("NextToken").string(var_811);
    }
    if let Some(var_812) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_812).into()),
        );
    }
    if let Some(var_813) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_813, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_814) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_814, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_815) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_815, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_816) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_816, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_817) = &input.name_contains {
        object.key("NameContains").string(var_817);
    }
    if let Some(var_818) = &input.status_equals {
        object.key("StatusEquals").string(var_818.as_str());
    }
    if let Some(var_819) = &input.sort_by {
        object.key("SortBy").string(var_819.as_str());
    }
    if let Some(var_820) = &input.sort_order {
        object.key("SortOrder").string(var_820.as_str());
    }
}

pub fn serialize_structure_list_contexts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContextsInput,
) {
    if let Some(var_821) = &input.source_uri {
        object.key("SourceUri").string(var_821);
    }
    if let Some(var_822) = &input.context_type {
        object.key("ContextType").string(var_822);
    }
    if let Some(var_823) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_823, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_824) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_824, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_825) = &input.sort_by {
        object.key("SortBy").string(var_825.as_str());
    }
    if let Some(var_826) = &input.sort_order {
        object.key("SortOrder").string(var_826.as_str());
    }
    if let Some(var_827) = &input.next_token {
        object.key("NextToken").string(var_827);
    }
    if let Some(var_828) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_828).into()),
        );
    }
}

pub fn serialize_structure_list_data_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataQualityJobDefinitionsInput,
) {
    if let Some(var_829) = &input.endpoint_name {
        object.key("EndpointName").string(var_829);
    }
    if let Some(var_830) = &input.sort_by {
        object.key("SortBy").string(var_830.as_str());
    }
    if let Some(var_831) = &input.sort_order {
        object.key("SortOrder").string(var_831.as_str());
    }
    if let Some(var_832) = &input.next_token {
        object.key("NextToken").string(var_832);
    }
    if let Some(var_833) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_833).into()),
        );
    }
    if let Some(var_834) = &input.name_contains {
        object.key("NameContains").string(var_834);
    }
    if let Some(var_835) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_835, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_836) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_836, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_device_fleets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeviceFleetsInput,
) {
    if let Some(var_837) = &input.next_token {
        object.key("NextToken").string(var_837);
    }
    if let Some(var_838) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_838).into()),
        );
    }
    if let Some(var_839) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_839, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_840) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_840, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_841) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_841, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_842) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_842, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_843) = &input.name_contains {
        object.key("NameContains").string(var_843);
    }
    if let Some(var_844) = &input.sort_by {
        object.key("SortBy").string(var_844.as_str());
    }
    if let Some(var_845) = &input.sort_order {
        object.key("SortOrder").string(var_845.as_str());
    }
}

pub fn serialize_structure_list_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) {
    if let Some(var_846) = &input.next_token {
        object.key("NextToken").string(var_846);
    }
    if let Some(var_847) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_847).into()),
        );
    }
    if let Some(var_848) = &input.latest_heartbeat_after {
        object
            .key("LatestHeartbeatAfter")
            .instant(var_848, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_849) = &input.model_name {
        object.key("ModelName").string(var_849);
    }
    if let Some(var_850) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_850);
    }
}

pub fn serialize_structure_list_domains_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) {
    if let Some(var_851) = &input.next_token {
        object.key("NextToken").string(var_851);
    }
    if let Some(var_852) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_852).into()),
        );
    }
}

pub fn serialize_structure_list_edge_packaging_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgePackagingJobsInput,
) {
    if let Some(var_853) = &input.next_token {
        object.key("NextToken").string(var_853);
    }
    if let Some(var_854) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_854).into()),
        );
    }
    if let Some(var_855) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_855, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_856) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_856, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_857) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_857, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_858) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_858, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_859) = &input.name_contains {
        object.key("NameContains").string(var_859);
    }
    if let Some(var_860) = &input.model_name_contains {
        object.key("ModelNameContains").string(var_860);
    }
    if let Some(var_861) = &input.status_equals {
        object.key("StatusEquals").string(var_861.as_str());
    }
    if let Some(var_862) = &input.sort_by {
        object.key("SortBy").string(var_862.as_str());
    }
    if let Some(var_863) = &input.sort_order {
        object.key("SortOrder").string(var_863.as_str());
    }
}

pub fn serialize_structure_list_endpoint_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointConfigsInput,
) {
    if let Some(var_864) = &input.sort_by {
        object.key("SortBy").string(var_864.as_str());
    }
    if let Some(var_865) = &input.sort_order {
        object.key("SortOrder").string(var_865.as_str());
    }
    if let Some(var_866) = &input.next_token {
        object.key("NextToken").string(var_866);
    }
    if let Some(var_867) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_867).into()),
        );
    }
    if let Some(var_868) = &input.name_contains {
        object.key("NameContains").string(var_868);
    }
    if let Some(var_869) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_869, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_870) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_870, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) {
    if let Some(var_871) = &input.sort_by {
        object.key("SortBy").string(var_871.as_str());
    }
    if let Some(var_872) = &input.sort_order {
        object.key("SortOrder").string(var_872.as_str());
    }
    if let Some(var_873) = &input.next_token {
        object.key("NextToken").string(var_873);
    }
    if let Some(var_874) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_874).into()),
        );
    }
    if let Some(var_875) = &input.name_contains {
        object.key("NameContains").string(var_875);
    }
    if let Some(var_876) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_876, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_877) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_877, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_878) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_878, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_879) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_879, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_880) = &input.status_equals {
        object.key("StatusEquals").string(var_880.as_str());
    }
}

pub fn serialize_structure_list_experiments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperimentsInput,
) {
    if let Some(var_881) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_881, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_882) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_882, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_883) = &input.sort_by {
        object.key("SortBy").string(var_883.as_str());
    }
    if let Some(var_884) = &input.sort_order {
        object.key("SortOrder").string(var_884.as_str());
    }
    if let Some(var_885) = &input.next_token {
        object.key("NextToken").string(var_885);
    }
    if let Some(var_886) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_886).into()),
        );
    }
}

pub fn serialize_structure_list_feature_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFeatureGroupsInput,
) {
    if let Some(var_887) = &input.name_contains {
        object.key("NameContains").string(var_887);
    }
    if let Some(var_888) = &input.feature_group_status_equals {
        object
            .key("FeatureGroupStatusEquals")
            .string(var_888.as_str());
    }
    if let Some(var_889) = &input.offline_store_status_equals {
        object
            .key("OfflineStoreStatusEquals")
            .string(var_889.as_str());
    }
    if let Some(var_890) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_890, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_891) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_891, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_892) = &input.sort_order {
        object.key("SortOrder").string(var_892.as_str());
    }
    if let Some(var_893) = &input.sort_by {
        object.key("SortBy").string(var_893.as_str());
    }
    if let Some(var_894) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_894).into()),
        );
    }
    if let Some(var_895) = &input.next_token {
        object.key("NextToken").string(var_895);
    }
}

pub fn serialize_structure_list_flow_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFlowDefinitionsInput,
) {
    if let Some(var_896) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_896, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_897) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_897, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_898) = &input.sort_order {
        object.key("SortOrder").string(var_898.as_str());
    }
    if let Some(var_899) = &input.next_token {
        object.key("NextToken").string(var_899);
    }
    if let Some(var_900) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_900).into()),
        );
    }
}

pub fn serialize_structure_list_human_task_uis_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHumanTaskUisInput,
) {
    if let Some(var_901) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_901, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_902) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_902, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_903) = &input.sort_order {
        object.key("SortOrder").string(var_903.as_str());
    }
    if let Some(var_904) = &input.next_token {
        object.key("NextToken").string(var_904);
    }
    if let Some(var_905) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_905).into()),
        );
    }
}

pub fn serialize_structure_list_hyper_parameter_tuning_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHyperParameterTuningJobsInput,
) {
    if let Some(var_906) = &input.next_token {
        object.key("NextToken").string(var_906);
    }
    if let Some(var_907) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_907).into()),
        );
    }
    if let Some(var_908) = &input.sort_by {
        object.key("SortBy").string(var_908.as_str());
    }
    if let Some(var_909) = &input.sort_order {
        object.key("SortOrder").string(var_909.as_str());
    }
    if let Some(var_910) = &input.name_contains {
        object.key("NameContains").string(var_910);
    }
    if let Some(var_911) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_911, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_912) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_912, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_913) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_913, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_914) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_914, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_915) = &input.status_equals {
        object.key("StatusEquals").string(var_915.as_str());
    }
}

pub fn serialize_structure_list_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) {
    if let Some(var_916) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_916, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_917) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_917, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_918) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_918, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_919) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_919, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_920) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_920).into()),
        );
    }
    if let Some(var_921) = &input.name_contains {
        object.key("NameContains").string(var_921);
    }
    if let Some(var_922) = &input.next_token {
        object.key("NextToken").string(var_922);
    }
    if let Some(var_923) = &input.sort_by {
        object.key("SortBy").string(var_923.as_str());
    }
    if let Some(var_924) = &input.sort_order {
        object.key("SortOrder").string(var_924.as_str());
    }
}

pub fn serialize_structure_list_image_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageVersionsInput,
) {
    if let Some(var_925) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_925, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_926) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_926, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_927) = &input.image_name {
        object.key("ImageName").string(var_927);
    }
    if let Some(var_928) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_928, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_929) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_929, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_930) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_930).into()),
        );
    }
    if let Some(var_931) = &input.next_token {
        object.key("NextToken").string(var_931);
    }
    if let Some(var_932) = &input.sort_by {
        object.key("SortBy").string(var_932.as_str());
    }
    if let Some(var_933) = &input.sort_order {
        object.key("SortOrder").string(var_933.as_str());
    }
}

pub fn serialize_structure_list_labeling_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsInput,
) {
    if let Some(var_934) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_934, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_935) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_935, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_936) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_936, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_937) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_937, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_938) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_938).into()),
        );
    }
    if let Some(var_939) = &input.next_token {
        object.key("NextToken").string(var_939);
    }
    if let Some(var_940) = &input.name_contains {
        object.key("NameContains").string(var_940);
    }
    if let Some(var_941) = &input.sort_by {
        object.key("SortBy").string(var_941.as_str());
    }
    if let Some(var_942) = &input.sort_order {
        object.key("SortOrder").string(var_942.as_str());
    }
    if let Some(var_943) = &input.status_equals {
        object.key("StatusEquals").string(var_943.as_str());
    }
}

pub fn serialize_structure_list_labeling_jobs_for_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsForWorkteamInput,
) {
    if let Some(var_944) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_944);
    }
    if let Some(var_945) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_945).into()),
        );
    }
    if let Some(var_946) = &input.next_token {
        object.key("NextToken").string(var_946);
    }
    if let Some(var_947) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_947, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_948) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_948, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_949) = &input.job_reference_code_contains {
        object.key("JobReferenceCodeContains").string(var_949);
    }
    if let Some(var_950) = &input.sort_by {
        object.key("SortBy").string(var_950.as_str());
    }
    if let Some(var_951) = &input.sort_order {
        object.key("SortOrder").string(var_951.as_str());
    }
}

pub fn serialize_structure_list_model_bias_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelBiasJobDefinitionsInput,
) {
    if let Some(var_952) = &input.endpoint_name {
        object.key("EndpointName").string(var_952);
    }
    if let Some(var_953) = &input.sort_by {
        object.key("SortBy").string(var_953.as_str());
    }
    if let Some(var_954) = &input.sort_order {
        object.key("SortOrder").string(var_954.as_str());
    }
    if let Some(var_955) = &input.next_token {
        object.key("NextToken").string(var_955);
    }
    if let Some(var_956) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_956).into()),
        );
    }
    if let Some(var_957) = &input.name_contains {
        object.key("NameContains").string(var_957);
    }
    if let Some(var_958) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_958, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_959) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_959, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_model_explainability_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelExplainabilityJobDefinitionsInput,
) {
    if let Some(var_960) = &input.endpoint_name {
        object.key("EndpointName").string(var_960);
    }
    if let Some(var_961) = &input.sort_by {
        object.key("SortBy").string(var_961.as_str());
    }
    if let Some(var_962) = &input.sort_order {
        object.key("SortOrder").string(var_962.as_str());
    }
    if let Some(var_963) = &input.next_token {
        object.key("NextToken").string(var_963);
    }
    if let Some(var_964) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_964).into()),
        );
    }
    if let Some(var_965) = &input.name_contains {
        object.key("NameContains").string(var_965);
    }
    if let Some(var_966) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_966, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_967) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_967, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_model_package_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackageGroupsInput,
) {
    if let Some(var_968) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_968, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_969) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_969, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_970) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_970).into()),
        );
    }
    if let Some(var_971) = &input.name_contains {
        object.key("NameContains").string(var_971);
    }
    if let Some(var_972) = &input.next_token {
        object.key("NextToken").string(var_972);
    }
    if let Some(var_973) = &input.sort_by {
        object.key("SortBy").string(var_973.as_str());
    }
    if let Some(var_974) = &input.sort_order {
        object.key("SortOrder").string(var_974.as_str());
    }
}

pub fn serialize_structure_list_model_packages_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackagesInput,
) {
    if let Some(var_975) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_975, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_976) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_976, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_977) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_977).into()),
        );
    }
    if let Some(var_978) = &input.name_contains {
        object.key("NameContains").string(var_978);
    }
    if let Some(var_979) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_979.as_str());
    }
    if let Some(var_980) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_980);
    }
    if let Some(var_981) = &input.model_package_type {
        object.key("ModelPackageType").string(var_981.as_str());
    }
    if let Some(var_982) = &input.next_token {
        object.key("NextToken").string(var_982);
    }
    if let Some(var_983) = &input.sort_by {
        object.key("SortBy").string(var_983.as_str());
    }
    if let Some(var_984) = &input.sort_order {
        object.key("SortOrder").string(var_984.as_str());
    }
}

pub fn serialize_structure_list_model_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelQualityJobDefinitionsInput,
) {
    if let Some(var_985) = &input.endpoint_name {
        object.key("EndpointName").string(var_985);
    }
    if let Some(var_986) = &input.sort_by {
        object.key("SortBy").string(var_986.as_str());
    }
    if let Some(var_987) = &input.sort_order {
        object.key("SortOrder").string(var_987.as_str());
    }
    if let Some(var_988) = &input.next_token {
        object.key("NextToken").string(var_988);
    }
    if let Some(var_989) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_989).into()),
        );
    }
    if let Some(var_990) = &input.name_contains {
        object.key("NameContains").string(var_990);
    }
    if let Some(var_991) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_991, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_992) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_992, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelsInput,
) {
    if let Some(var_993) = &input.sort_by {
        object.key("SortBy").string(var_993.as_str());
    }
    if let Some(var_994) = &input.sort_order {
        object.key("SortOrder").string(var_994.as_str());
    }
    if let Some(var_995) = &input.next_token {
        object.key("NextToken").string(var_995);
    }
    if let Some(var_996) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_996).into()),
        );
    }
    if let Some(var_997) = &input.name_contains {
        object.key("NameContains").string(var_997);
    }
    if let Some(var_998) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_998, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_999) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_999, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_monitoring_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringExecutionsInput,
) {
    if let Some(var_1000) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1000);
    }
    if let Some(var_1001) = &input.endpoint_name {
        object.key("EndpointName").string(var_1001);
    }
    if let Some(var_1002) = &input.sort_by {
        object.key("SortBy").string(var_1002.as_str());
    }
    if let Some(var_1003) = &input.sort_order {
        object.key("SortOrder").string(var_1003.as_str());
    }
    if let Some(var_1004) = &input.next_token {
        object.key("NextToken").string(var_1004);
    }
    if let Some(var_1005) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1005).into()),
        );
    }
    if let Some(var_1006) = &input.scheduled_time_before {
        object
            .key("ScheduledTimeBefore")
            .instant(var_1006, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1007) = &input.scheduled_time_after {
        object
            .key("ScheduledTimeAfter")
            .instant(var_1007, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1008) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1008, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1009) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1009, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1010) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1010, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1011) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1011, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1012) = &input.status_equals {
        object.key("StatusEquals").string(var_1012.as_str());
    }
    if let Some(var_1013) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1013);
    }
    if let Some(var_1014) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1014.as_str());
    }
}

pub fn serialize_structure_list_monitoring_schedules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringSchedulesInput,
) {
    if let Some(var_1015) = &input.endpoint_name {
        object.key("EndpointName").string(var_1015);
    }
    if let Some(var_1016) = &input.sort_by {
        object.key("SortBy").string(var_1016.as_str());
    }
    if let Some(var_1017) = &input.sort_order {
        object.key("SortOrder").string(var_1017.as_str());
    }
    if let Some(var_1018) = &input.next_token {
        object.key("NextToken").string(var_1018);
    }
    if let Some(var_1019) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1019).into()),
        );
    }
    if let Some(var_1020) = &input.name_contains {
        object.key("NameContains").string(var_1020);
    }
    if let Some(var_1021) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1021, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1022) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1022, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1023) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1023, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1024) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1024, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1025) = &input.status_equals {
        object.key("StatusEquals").string(var_1025.as_str());
    }
    if let Some(var_1026) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1026);
    }
    if let Some(var_1027) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1027.as_str());
    }
}

pub fn serialize_structure_list_notebook_instance_lifecycle_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstanceLifecycleConfigsInput,
) {
    if let Some(var_1028) = &input.next_token {
        object.key("NextToken").string(var_1028);
    }
    if let Some(var_1029) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1029).into()),
        );
    }
    if let Some(var_1030) = &input.sort_by {
        object.key("SortBy").string(var_1030.as_str());
    }
    if let Some(var_1031) = &input.sort_order {
        object.key("SortOrder").string(var_1031.as_str());
    }
    if let Some(var_1032) = &input.name_contains {
        object.key("NameContains").string(var_1032);
    }
    if let Some(var_1033) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1033, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1034) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1034, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1035) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1035, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1036) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1036, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_notebook_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstancesInput,
) {
    if let Some(var_1037) = &input.next_token {
        object.key("NextToken").string(var_1037);
    }
    if let Some(var_1038) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1038).into()),
        );
    }
    if let Some(var_1039) = &input.sort_by {
        object.key("SortBy").string(var_1039.as_str());
    }
    if let Some(var_1040) = &input.sort_order {
        object.key("SortOrder").string(var_1040.as_str());
    }
    if let Some(var_1041) = &input.name_contains {
        object.key("NameContains").string(var_1041);
    }
    if let Some(var_1042) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1042, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1043) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1043, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1044) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1044, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1045) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1045, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1046) = &input.status_equals {
        object.key("StatusEquals").string(var_1046.as_str());
    }
    if let Some(var_1047) = &input.notebook_instance_lifecycle_config_name_contains {
        object
            .key("NotebookInstanceLifecycleConfigNameContains")
            .string(var_1047);
    }
    if let Some(var_1048) = &input.default_code_repository_contains {
        object.key("DefaultCodeRepositoryContains").string(var_1048);
    }
    if let Some(var_1049) = &input.additional_code_repository_equals {
        object
            .key("AdditionalCodeRepositoryEquals")
            .string(var_1049);
    }
}

pub fn serialize_structure_list_pipeline_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionsInput,
) {
    if let Some(var_1050) = &input.pipeline_name {
        object.key("PipelineName").string(var_1050);
    }
    if let Some(var_1051) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1051, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1052) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1052, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1053) = &input.sort_by {
        object.key("SortBy").string(var_1053.as_str());
    }
    if let Some(var_1054) = &input.sort_order {
        object.key("SortOrder").string(var_1054.as_str());
    }
    if let Some(var_1055) = &input.next_token {
        object.key("NextToken").string(var_1055);
    }
    if let Some(var_1056) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1056).into()),
        );
    }
}

pub fn serialize_structure_list_pipeline_execution_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionStepsInput,
) {
    if let Some(var_1057) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1057);
    }
    if let Some(var_1058) = &input.next_token {
        object.key("NextToken").string(var_1058);
    }
    if let Some(var_1059) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1059).into()),
        );
    }
    if let Some(var_1060) = &input.sort_order {
        object.key("SortOrder").string(var_1060.as_str());
    }
}

pub fn serialize_structure_list_pipeline_parameters_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineParametersForExecutionInput,
) {
    if let Some(var_1061) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1061);
    }
    if let Some(var_1062) = &input.next_token {
        object.key("NextToken").string(var_1062);
    }
    if let Some(var_1063) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1063).into()),
        );
    }
}

pub fn serialize_structure_list_pipelines_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelinesInput,
) {
    if let Some(var_1064) = &input.pipeline_name_prefix {
        object.key("PipelineNamePrefix").string(var_1064);
    }
    if let Some(var_1065) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1065, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1066) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1066, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1067) = &input.sort_by {
        object.key("SortBy").string(var_1067.as_str());
    }
    if let Some(var_1068) = &input.sort_order {
        object.key("SortOrder").string(var_1068.as_str());
    }
    if let Some(var_1069) = &input.next_token {
        object.key("NextToken").string(var_1069);
    }
    if let Some(var_1070) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1070).into()),
        );
    }
}

pub fn serialize_structure_list_processing_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProcessingJobsInput,
) {
    if let Some(var_1071) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1071, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1072) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1072, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1073) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1073, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1074) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1074, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1075) = &input.name_contains {
        object.key("NameContains").string(var_1075);
    }
    if let Some(var_1076) = &input.status_equals {
        object.key("StatusEquals").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.sort_by {
        object.key("SortBy").string(var_1077.as_str());
    }
    if let Some(var_1078) = &input.sort_order {
        object.key("SortOrder").string(var_1078.as_str());
    }
    if let Some(var_1079) = &input.next_token {
        object.key("NextToken").string(var_1079);
    }
    if let Some(var_1080) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1080).into()),
        );
    }
}

pub fn serialize_structure_list_projects_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProjectsInput,
) {
    if let Some(var_1081) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1081, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1082) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1082, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1083) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1083).into()),
        );
    }
    if let Some(var_1084) = &input.name_contains {
        object.key("NameContains").string(var_1084);
    }
    if let Some(var_1085) = &input.next_token {
        object.key("NextToken").string(var_1085);
    }
    if let Some(var_1086) = &input.sort_by {
        object.key("SortBy").string(var_1086.as_str());
    }
    if let Some(var_1087) = &input.sort_order {
        object.key("SortOrder").string(var_1087.as_str());
    }
}

pub fn serialize_structure_list_subscribed_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSubscribedWorkteamsInput,
) {
    if let Some(var_1088) = &input.name_contains {
        object.key("NameContains").string(var_1088);
    }
    if let Some(var_1089) = &input.next_token {
        object.key("NextToken").string(var_1089);
    }
    if let Some(var_1090) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1090).into()),
        );
    }
}

pub fn serialize_structure_list_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsInput,
) {
    if let Some(var_1091) = &input.resource_arn {
        object.key("ResourceArn").string(var_1091);
    }
    if let Some(var_1092) = &input.next_token {
        object.key("NextToken").string(var_1092);
    }
    if let Some(var_1093) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1093).into()),
        );
    }
}

pub fn serialize_structure_list_training_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsInput,
) {
    if let Some(var_1094) = &input.next_token {
        object.key("NextToken").string(var_1094);
    }
    if let Some(var_1095) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1095).into()),
        );
    }
    if let Some(var_1096) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1096, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1097) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1097, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1098) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1098, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1099) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1099, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1100) = &input.name_contains {
        object.key("NameContains").string(var_1100);
    }
    if let Some(var_1101) = &input.status_equals {
        object.key("StatusEquals").string(var_1101.as_str());
    }
    if let Some(var_1102) = &input.sort_by {
        object.key("SortBy").string(var_1102.as_str());
    }
    if let Some(var_1103) = &input.sort_order {
        object.key("SortOrder").string(var_1103.as_str());
    }
}

pub fn serialize_structure_list_training_jobs_for_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsForHyperParameterTuningJobInput,
) {
    if let Some(var_1104) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1104);
    }
    if let Some(var_1105) = &input.next_token {
        object.key("NextToken").string(var_1105);
    }
    if let Some(var_1106) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1106).into()),
        );
    }
    if let Some(var_1107) = &input.status_equals {
        object.key("StatusEquals").string(var_1107.as_str());
    }
    if let Some(var_1108) = &input.sort_by {
        object.key("SortBy").string(var_1108.as_str());
    }
    if let Some(var_1109) = &input.sort_order {
        object.key("SortOrder").string(var_1109.as_str());
    }
}

pub fn serialize_structure_list_transform_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTransformJobsInput,
) {
    if let Some(var_1110) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1110, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1111) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1111, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1112) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1112, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1113) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1113, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1114) = &input.name_contains {
        object.key("NameContains").string(var_1114);
    }
    if let Some(var_1115) = &input.status_equals {
        object.key("StatusEquals").string(var_1115.as_str());
    }
    if let Some(var_1116) = &input.sort_by {
        object.key("SortBy").string(var_1116.as_str());
    }
    if let Some(var_1117) = &input.sort_order {
        object.key("SortOrder").string(var_1117.as_str());
    }
    if let Some(var_1118) = &input.next_token {
        object.key("NextToken").string(var_1118);
    }
    if let Some(var_1119) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1119).into()),
        );
    }
}

pub fn serialize_structure_list_trial_components_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialComponentsInput,
) {
    if let Some(var_1120) = &input.experiment_name {
        object.key("ExperimentName").string(var_1120);
    }
    if let Some(var_1121) = &input.trial_name {
        object.key("TrialName").string(var_1121);
    }
    if let Some(var_1122) = &input.source_arn {
        object.key("SourceArn").string(var_1122);
    }
    if let Some(var_1123) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1123, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1124) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1124, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1125) = &input.sort_by {
        object.key("SortBy").string(var_1125.as_str());
    }
    if let Some(var_1126) = &input.sort_order {
        object.key("SortOrder").string(var_1126.as_str());
    }
    if let Some(var_1127) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1127).into()),
        );
    }
    if let Some(var_1128) = &input.next_token {
        object.key("NextToken").string(var_1128);
    }
}

pub fn serialize_structure_list_trials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialsInput,
) {
    if let Some(var_1129) = &input.experiment_name {
        object.key("ExperimentName").string(var_1129);
    }
    if let Some(var_1130) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1130);
    }
    if let Some(var_1131) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1131, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1132) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1132, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1133) = &input.sort_by {
        object.key("SortBy").string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.sort_order {
        object.key("SortOrder").string(var_1134.as_str());
    }
    if let Some(var_1135) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1135).into()),
        );
    }
    if let Some(var_1136) = &input.next_token {
        object.key("NextToken").string(var_1136);
    }
}

pub fn serialize_structure_list_user_profiles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserProfilesInput,
) {
    if let Some(var_1137) = &input.next_token {
        object.key("NextToken").string(var_1137);
    }
    if let Some(var_1138) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1138).into()),
        );
    }
    if let Some(var_1139) = &input.sort_order {
        object.key("SortOrder").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.sort_by {
        object.key("SortBy").string(var_1140.as_str());
    }
    if let Some(var_1141) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_1141);
    }
    if let Some(var_1142) = &input.user_profile_name_contains {
        object.key("UserProfileNameContains").string(var_1142);
    }
}

pub fn serialize_structure_list_workforces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkforcesInput,
) {
    if let Some(var_1143) = &input.sort_by {
        object.key("SortBy").string(var_1143.as_str());
    }
    if let Some(var_1144) = &input.sort_order {
        object.key("SortOrder").string(var_1144.as_str());
    }
    if let Some(var_1145) = &input.name_contains {
        object.key("NameContains").string(var_1145);
    }
    if let Some(var_1146) = &input.next_token {
        object.key("NextToken").string(var_1146);
    }
    if let Some(var_1147) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1147).into()),
        );
    }
}

pub fn serialize_structure_list_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkteamsInput,
) {
    if let Some(var_1148) = &input.sort_by {
        object.key("SortBy").string(var_1148.as_str());
    }
    if let Some(var_1149) = &input.sort_order {
        object.key("SortOrder").string(var_1149.as_str());
    }
    if let Some(var_1150) = &input.name_contains {
        object.key("NameContains").string(var_1150);
    }
    if let Some(var_1151) = &input.next_token {
        object.key("NextToken").string(var_1151);
    }
    if let Some(var_1152) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1152).into()),
        );
    }
}

pub fn serialize_structure_put_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutModelPackageGroupPolicyInput,
) {
    if let Some(var_1153) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_1153);
    }
    if let Some(var_1154) = &input.resource_policy {
        object.key("ResourcePolicy").string(var_1154);
    }
}

pub fn serialize_structure_register_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDevicesInput,
) {
    if let Some(var_1155) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1155);
    }
    if let Some(var_1156) = &input.devices {
        let mut array_1157 = object.key("Devices").start_array();
        for item_1158 in var_1156 {
            {
                let mut object_1159 = array_1157.value().start_object();
                crate::json_ser::serialize_structure_device(&mut object_1159, item_1158);
                object_1159.finish();
            }
        }
        array_1157.finish();
    }
    if let Some(var_1160) = &input.tags {
        let mut array_1161 = object.key("Tags").start_array();
        for item_1162 in var_1160 {
            {
                let mut object_1163 = array_1161.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_1163, item_1162);
                object_1163.finish();
            }
        }
        array_1161.finish();
    }
}

pub fn serialize_structure_render_ui_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RenderUiTemplateInput,
) {
    if let Some(var_1164) = &input.ui_template {
        let mut object_1165 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_ui_template(&mut object_1165, var_1164);
        object_1165.finish();
    }
    if let Some(var_1166) = &input.task {
        let mut object_1167 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_renderable_task(&mut object_1167, var_1166);
        object_1167.finish();
    }
    if let Some(var_1168) = &input.role_arn {
        object.key("RoleArn").string(var_1168);
    }
    if let Some(var_1169) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1169);
    }
}

pub fn serialize_structure_search_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchInput,
) {
    if let Some(var_1170) = &input.resource {
        object.key("Resource").string(var_1170.as_str());
    }
    if let Some(var_1171) = &input.search_expression {
        let mut object_1172 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_search_expression(&mut object_1172, var_1171);
        object_1172.finish();
    }
    if let Some(var_1173) = &input.sort_by {
        object.key("SortBy").string(var_1173);
    }
    if let Some(var_1174) = &input.sort_order {
        object.key("SortOrder").string(var_1174.as_str());
    }
    if let Some(var_1175) = &input.next_token {
        object.key("NextToken").string(var_1175);
    }
    if let Some(var_1176) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1176).into()),
        );
    }
}

pub fn serialize_structure_send_pipeline_execution_step_failure_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepFailureInput,
) {
    if let Some(var_1177) = &input.callback_token {
        object.key("CallbackToken").string(var_1177);
    }
    if let Some(var_1178) = &input.failure_reason {
        object.key("FailureReason").string(var_1178);
    }
    if let Some(var_1179) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1179);
    }
}

pub fn serialize_structure_send_pipeline_execution_step_success_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepSuccessInput,
) {
    if let Some(var_1180) = &input.callback_token {
        object.key("CallbackToken").string(var_1180);
    }
    if let Some(var_1181) = &input.output_parameters {
        let mut array_1182 = object.key("OutputParameters").start_array();
        for item_1183 in var_1181 {
            {
                let mut object_1184 = array_1182.value().start_object();
                crate::json_ser::serialize_structure_output_parameter(&mut object_1184, item_1183);
                object_1184.finish();
            }
        }
        array_1182.finish();
    }
    if let Some(var_1185) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1185);
    }
}

pub fn serialize_structure_start_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMonitoringScheduleInput,
) {
    if let Some(var_1186) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1186);
    }
}

pub fn serialize_structure_start_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookInstanceInput,
) {
    if let Some(var_1187) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1187);
    }
}

pub fn serialize_structure_start_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPipelineExecutionInput,
) {
    if let Some(var_1188) = &input.pipeline_name {
        object.key("PipelineName").string(var_1188);
    }
    if let Some(var_1189) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1189);
    }
    if let Some(var_1190) = &input.pipeline_parameters {
        let mut array_1191 = object.key("PipelineParameters").start_array();
        for item_1192 in var_1190 {
            {
                let mut object_1193 = array_1191.value().start_object();
                crate::json_ser::serialize_structure_parameter(&mut object_1193, item_1192);
                object_1193.finish();
            }
        }
        array_1191.finish();
    }
    if let Some(var_1194) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1194);
    }
    if let Some(var_1195) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1195);
    }
}

pub fn serialize_structure_stop_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutoMlJobInput,
) {
    if let Some(var_1196) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_1196);
    }
}

pub fn serialize_structure_stop_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCompilationJobInput,
) {
    if let Some(var_1197) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1197);
    }
}

pub fn serialize_structure_stop_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgePackagingJobInput,
) {
    if let Some(var_1198) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1198);
    }
}

pub fn serialize_structure_stop_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopHyperParameterTuningJobInput,
) {
    if let Some(var_1199) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1199);
    }
}

pub fn serialize_structure_stop_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopLabelingJobInput,
) {
    if let Some(var_1200) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1200);
    }
}

pub fn serialize_structure_stop_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopMonitoringScheduleInput,
) {
    if let Some(var_1201) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1201);
    }
}

pub fn serialize_structure_stop_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookInstanceInput,
) {
    if let Some(var_1202) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1202);
    }
}

pub fn serialize_structure_stop_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPipelineExecutionInput,
) {
    if let Some(var_1203) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1203);
    }
    if let Some(var_1204) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1204);
    }
}

pub fn serialize_structure_stop_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProcessingJobInput,
) {
    if let Some(var_1205) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_1205);
    }
}

pub fn serialize_structure_stop_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingJobInput,
) {
    if let Some(var_1206) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1206);
    }
}

pub fn serialize_structure_stop_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTransformJobInput,
) {
    if let Some(var_1207) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1207);
    }
}

pub fn serialize_structure_update_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionInput,
) {
    if let Some(var_1208) = &input.action_name {
        object.key("ActionName").string(var_1208);
    }
    if let Some(var_1209) = &input.description {
        object.key("Description").string(var_1209);
    }
    if let Some(var_1210) = &input.status {
        object.key("Status").string(var_1210.as_str());
    }
    if let Some(var_1211) = &input.properties {
        let mut object_1212 = object.key("Properties").start_object();
        for (key_1213, value_1214) in var_1211 {
            {
                object_1212.key(key_1213).string(value_1214);
            }
        }
        object_1212.finish();
    }
    if let Some(var_1215) = &input.properties_to_remove {
        let mut array_1216 = object.key("PropertiesToRemove").start_array();
        for item_1217 in var_1215 {
            {
                array_1216.value().string(item_1217);
            }
        }
        array_1216.finish();
    }
}

pub fn serialize_structure_update_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppImageConfigInput,
) {
    if let Some(var_1218) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_1218);
    }
    if let Some(var_1219) = &input.kernel_gateway_image_config {
        let mut object_1220 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_image_config(
            &mut object_1220,
            var_1219,
        );
        object_1220.finish();
    }
}

pub fn serialize_structure_update_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateArtifactInput,
) {
    if let Some(var_1221) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_1221);
    }
    if let Some(var_1222) = &input.artifact_name {
        object.key("ArtifactName").string(var_1222);
    }
    if let Some(var_1223) = &input.properties {
        let mut object_1224 = object.key("Properties").start_object();
        for (key_1225, value_1226) in var_1223 {
            {
                object_1224.key(key_1225).string(value_1226);
            }
        }
        object_1224.finish();
    }
    if let Some(var_1227) = &input.properties_to_remove {
        let mut array_1228 = object.key("PropertiesToRemove").start_array();
        for item_1229 in var_1227 {
            {
                array_1228.value().string(item_1229);
            }
        }
        array_1228.finish();
    }
}

pub fn serialize_structure_update_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeRepositoryInput,
) {
    if let Some(var_1230) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_1230);
    }
    if let Some(var_1231) = &input.git_config {
        let mut object_1232 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_git_config_for_update(&mut object_1232, var_1231);
        object_1232.finish();
    }
}

pub fn serialize_structure_update_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContextInput,
) {
    if let Some(var_1233) = &input.context_name {
        object.key("ContextName").string(var_1233);
    }
    if let Some(var_1234) = &input.description {
        object.key("Description").string(var_1234);
    }
    if let Some(var_1235) = &input.properties {
        let mut object_1236 = object.key("Properties").start_object();
        for (key_1237, value_1238) in var_1235 {
            {
                object_1236.key(key_1237).string(value_1238);
            }
        }
        object_1236.finish();
    }
    if let Some(var_1239) = &input.properties_to_remove {
        let mut array_1240 = object.key("PropertiesToRemove").start_array();
        for item_1241 in var_1239 {
            {
                array_1240.value().string(item_1241);
            }
        }
        array_1240.finish();
    }
}

pub fn serialize_structure_update_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceFleetInput,
) {
    if let Some(var_1242) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1242);
    }
    if let Some(var_1243) = &input.role_arn {
        object.key("RoleArn").string(var_1243);
    }
    if let Some(var_1244) = &input.description {
        object.key("Description").string(var_1244);
    }
    if let Some(var_1245) = &input.output_config {
        let mut object_1246 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_1246, var_1245);
        object_1246.finish();
    }
    if let Some(var_1247) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_1247);
    }
}

pub fn serialize_structure_update_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevicesInput,
) {
    if let Some(var_1248) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1248);
    }
    if let Some(var_1249) = &input.devices {
        let mut array_1250 = object.key("Devices").start_array();
        for item_1251 in var_1249 {
            {
                let mut object_1252 = array_1250.value().start_object();
                crate::json_ser::serialize_structure_device(&mut object_1252, item_1251);
                object_1252.finish();
            }
        }
        array_1250.finish();
    }
}

pub fn serialize_structure_update_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) {
    if let Some(var_1253) = &input.domain_id {
        object.key("DomainId").string(var_1253);
    }
    if let Some(var_1254) = &input.default_user_settings {
        let mut object_1255 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_1255, var_1254);
        object_1255.finish();
    }
}

pub fn serialize_structure_update_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) {
    if let Some(var_1256) = &input.endpoint_name {
        object.key("EndpointName").string(var_1256);
    }
    if let Some(var_1257) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1257);
    }
    if input.retain_all_variant_properties {
        object
            .key("RetainAllVariantProperties")
            .boolean(input.retain_all_variant_properties);
    }
    if let Some(var_1258) = &input.exclude_retained_variant_properties {
        let mut array_1259 = object.key("ExcludeRetainedVariantProperties").start_array();
        for item_1260 in var_1258 {
            {
                let mut object_1261 = array_1259.value().start_object();
                crate::json_ser::serialize_structure_variant_property(&mut object_1261, item_1260);
                object_1261.finish();
            }
        }
        array_1259.finish();
    }
    if let Some(var_1262) = &input.deployment_config {
        let mut object_1263 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_deployment_config(&mut object_1263, var_1262);
        object_1263.finish();
    }
}

pub fn serialize_structure_update_endpoint_weights_and_capacities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointWeightsAndCapacitiesInput,
) {
    if let Some(var_1264) = &input.endpoint_name {
        object.key("EndpointName").string(var_1264);
    }
    if let Some(var_1265) = &input.desired_weights_and_capacities {
        let mut array_1266 = object.key("DesiredWeightsAndCapacities").start_array();
        for item_1267 in var_1265 {
            {
                let mut object_1268 = array_1266.value().start_object();
                crate::json_ser::serialize_structure_desired_weight_and_capacity(
                    &mut object_1268,
                    item_1267,
                );
                object_1268.finish();
            }
        }
        array_1266.finish();
    }
}

pub fn serialize_structure_update_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperimentInput,
) {
    if let Some(var_1269) = &input.experiment_name {
        object.key("ExperimentName").string(var_1269);
    }
    if let Some(var_1270) = &input.display_name {
        object.key("DisplayName").string(var_1270);
    }
    if let Some(var_1271) = &input.description {
        object.key("Description").string(var_1271);
    }
}

pub fn serialize_structure_update_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImageInput,
) {
    if let Some(var_1272) = &input.delete_properties {
        let mut array_1273 = object.key("DeleteProperties").start_array();
        for item_1274 in var_1272 {
            {
                array_1273.value().string(item_1274);
            }
        }
        array_1273.finish();
    }
    if let Some(var_1275) = &input.description {
        object.key("Description").string(var_1275);
    }
    if let Some(var_1276) = &input.display_name {
        object.key("DisplayName").string(var_1276);
    }
    if let Some(var_1277) = &input.image_name {
        object.key("ImageName").string(var_1277);
    }
    if let Some(var_1278) = &input.role_arn {
        object.key("RoleArn").string(var_1278);
    }
}

pub fn serialize_structure_update_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelPackageInput,
) {
    if let Some(var_1279) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1279);
    }
    if let Some(var_1280) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.approval_description {
        object.key("ApprovalDescription").string(var_1281);
    }
}

pub fn serialize_structure_update_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMonitoringScheduleInput,
) {
    if let Some(var_1282) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1282);
    }
    if let Some(var_1283) = &input.monitoring_schedule_config {
        let mut object_1284 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_schedule_config(&mut object_1284, var_1283);
        object_1284.finish();
    }
}

pub fn serialize_structure_update_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceInput,
) {
    if let Some(var_1285) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1285);
    }
    if let Some(var_1286) = &input.instance_type {
        object.key("InstanceType").string(var_1286.as_str());
    }
    if let Some(var_1287) = &input.role_arn {
        object.key("RoleArn").string(var_1287);
    }
    if let Some(var_1288) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_1288);
    }
    if input.disassociate_lifecycle_config {
        object
            .key("DisassociateLifecycleConfig")
            .boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_1289) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1289).into()),
        );
    }
    if let Some(var_1290) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_1290);
    }
    if let Some(var_1291) = &input.additional_code_repositories {
        let mut array_1292 = object.key("AdditionalCodeRepositories").start_array();
        for item_1293 in var_1291 {
            {
                array_1292.value().string(item_1293);
            }
        }
        array_1292.finish();
    }
    if let Some(var_1294) = &input.accelerator_types {
        let mut array_1295 = object.key("AcceleratorTypes").start_array();
        for item_1296 in var_1294 {
            {
                array_1295.value().string(item_1296.as_str());
            }
        }
        array_1295.finish();
    }
    if input.disassociate_accelerator_types {
        object
            .key("DisassociateAcceleratorTypes")
            .boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object
            .key("DisassociateDefaultCodeRepository")
            .boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object
            .key("DisassociateAdditionalCodeRepositories")
            .boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_1297) = &input.root_access {
        object.key("RootAccess").string(var_1297.as_str());
    }
}

pub fn serialize_structure_update_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_1298) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_1298);
    }
    if let Some(var_1299) = &input.on_create {
        let mut array_1300 = object.key("OnCreate").start_array();
        for item_1301 in var_1299 {
            {
                let mut object_1302 = array_1300.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_1302,
                    item_1301,
                );
                object_1302.finish();
            }
        }
        array_1300.finish();
    }
    if let Some(var_1303) = &input.on_start {
        let mut array_1304 = object.key("OnStart").start_array();
        for item_1305 in var_1303 {
            {
                let mut object_1306 = array_1304.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_1306,
                    item_1305,
                );
                object_1306.finish();
            }
        }
        array_1304.finish();
    }
}

pub fn serialize_structure_update_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineInput,
) {
    if let Some(var_1307) = &input.pipeline_name {
        object.key("PipelineName").string(var_1307);
    }
    if let Some(var_1308) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_1308);
    }
    if let Some(var_1309) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_1309);
    }
    if let Some(var_1310) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_1310);
    }
    if let Some(var_1311) = &input.role_arn {
        object.key("RoleArn").string(var_1311);
    }
}

pub fn serialize_structure_update_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineExecutionInput,
) {
    if let Some(var_1312) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1312);
    }
    if let Some(var_1313) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1313);
    }
    if let Some(var_1314) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1314);
    }
}

pub fn serialize_structure_update_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrainingJobInput,
) {
    if let Some(var_1315) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1315);
    }
    if let Some(var_1316) = &input.profiler_config {
        let mut object_1317 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_profiler_config_for_update(&mut object_1317, var_1316);
        object_1317.finish();
    }
    if let Some(var_1318) = &input.profiler_rule_configurations {
        let mut array_1319 = object.key("ProfilerRuleConfigurations").start_array();
        for item_1320 in var_1318 {
            {
                let mut object_1321 = array_1319.value().start_object();
                crate::json_ser::serialize_structure_profiler_rule_configuration(
                    &mut object_1321,
                    item_1320,
                );
                object_1321.finish();
            }
        }
        array_1319.finish();
    }
}

pub fn serialize_structure_update_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialInput,
) {
    if let Some(var_1322) = &input.trial_name {
        object.key("TrialName").string(var_1322);
    }
    if let Some(var_1323) = &input.display_name {
        object.key("DisplayName").string(var_1323);
    }
}

pub fn serialize_structure_update_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialComponentInput,
) {
    if let Some(var_1324) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1324);
    }
    if let Some(var_1325) = &input.display_name {
        object.key("DisplayName").string(var_1325);
    }
    if let Some(var_1326) = &input.status {
        let mut object_1327 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_trial_component_status(&mut object_1327, var_1326);
        object_1327.finish();
    }
    if let Some(var_1328) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_1328, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1329) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_1329, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1330) = &input.parameters {
        let mut object_1331 = object.key("Parameters").start_object();
        for (key_1332, value_1333) in var_1330 {
            {
                let mut object_1334 = object_1331.key(key_1332).start_object();
                crate::json_ser::serialize_union_trial_component_parameter_value(
                    &mut object_1334,
                    value_1333,
                );
                object_1334.finish();
            }
        }
        object_1331.finish();
    }
    if let Some(var_1335) = &input.parameters_to_remove {
        let mut array_1336 = object.key("ParametersToRemove").start_array();
        for item_1337 in var_1335 {
            {
                array_1336.value().string(item_1337);
            }
        }
        array_1336.finish();
    }
    if let Some(var_1338) = &input.input_artifacts {
        let mut object_1339 = object.key("InputArtifacts").start_object();
        for (key_1340, value_1341) in var_1338 {
            {
                let mut object_1342 = object_1339.key(key_1340).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_1342,
                    value_1341,
                );
                object_1342.finish();
            }
        }
        object_1339.finish();
    }
    if let Some(var_1343) = &input.input_artifacts_to_remove {
        let mut array_1344 = object.key("InputArtifactsToRemove").start_array();
        for item_1345 in var_1343 {
            {
                array_1344.value().string(item_1345);
            }
        }
        array_1344.finish();
    }
    if let Some(var_1346) = &input.output_artifacts {
        let mut object_1347 = object.key("OutputArtifacts").start_object();
        for (key_1348, value_1349) in var_1346 {
            {
                let mut object_1350 = object_1347.key(key_1348).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_1350,
                    value_1349,
                );
                object_1350.finish();
            }
        }
        object_1347.finish();
    }
    if let Some(var_1351) = &input.output_artifacts_to_remove {
        let mut array_1352 = object.key("OutputArtifactsToRemove").start_array();
        for item_1353 in var_1351 {
            {
                array_1352.value().string(item_1353);
            }
        }
        array_1352.finish();
    }
}

pub fn serialize_structure_update_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserProfileInput,
) {
    if let Some(var_1354) = &input.domain_id {
        object.key("DomainId").string(var_1354);
    }
    if let Some(var_1355) = &input.user_profile_name {
        object.key("UserProfileName").string(var_1355);
    }
    if let Some(var_1356) = &input.user_settings {
        let mut object_1357 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_1357, var_1356);
        object_1357.finish();
    }
}

pub fn serialize_structure_update_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkforceInput,
) {
    if let Some(var_1358) = &input.workforce_name {
        object.key("WorkforceName").string(var_1358);
    }
    if let Some(var_1359) = &input.source_ip_config {
        let mut object_1360 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_source_ip_config(&mut object_1360, var_1359);
        object_1360.finish();
    }
    if let Some(var_1361) = &input.oidc_config {
        let mut object_1362 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_oidc_config(&mut object_1362, var_1361);
        object_1362.finish();
    }
}

pub fn serialize_structure_update_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkteamInput,
) {
    if let Some(var_1363) = &input.workteam_name {
        object.key("WorkteamName").string(var_1363);
    }
    if let Some(var_1364) = &input.member_definitions {
        let mut array_1365 = object.key("MemberDefinitions").start_array();
        for item_1366 in var_1364 {
            {
                let mut object_1367 = array_1365.value().start_object();
                crate::json_ser::serialize_structure_member_definition(&mut object_1367, item_1366);
                object_1367.finish();
            }
        }
        array_1365.finish();
    }
    if let Some(var_1368) = &input.description {
        object.key("Description").string(var_1368);
    }
    if let Some(var_1369) = &input.notification_configuration {
        let mut object_1370 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_notification_configuration(&mut object_1370, var_1369);
        object_1370.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_1371) = &input.key {
        object.key("Key").string(var_1371);
    }
    if let Some(var_1372) = &input.value {
        object.key("Value").string(var_1372);
    }
}

pub fn serialize_structure_action_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionSource,
) {
    if let Some(var_1373) = &input.source_uri {
        object.key("SourceUri").string(var_1373);
    }
    if let Some(var_1374) = &input.source_type {
        object.key("SourceType").string(var_1374);
    }
    if let Some(var_1375) = &input.source_id {
        object.key("SourceId").string(var_1375);
    }
}

pub fn serialize_structure_metadata_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataProperties,
) {
    if let Some(var_1376) = &input.commit_id {
        object.key("CommitId").string(var_1376);
    }
    if let Some(var_1377) = &input.repository {
        object.key("Repository").string(var_1377);
    }
    if let Some(var_1378) = &input.generated_by {
        object.key("GeneratedBy").string(var_1378);
    }
    if let Some(var_1379) = &input.project_id {
        object.key("ProjectId").string(var_1379);
    }
}

pub fn serialize_structure_training_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingSpecification,
) {
    if let Some(var_1380) = &input.training_image {
        object.key("TrainingImage").string(var_1380);
    }
    if let Some(var_1381) = &input.training_image_digest {
        object.key("TrainingImageDigest").string(var_1381);
    }
    if let Some(var_1382) = &input.supported_hyper_parameters {
        let mut array_1383 = object.key("SupportedHyperParameters").start_array();
        for item_1384 in var_1382 {
            {
                let mut object_1385 = array_1383.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_specification(
                    &mut object_1385,
                    item_1384,
                );
                object_1385.finish();
            }
        }
        array_1383.finish();
    }
    if let Some(var_1386) = &input.supported_training_instance_types {
        let mut array_1387 = object.key("SupportedTrainingInstanceTypes").start_array();
        for item_1388 in var_1386 {
            {
                array_1387.value().string(item_1388.as_str());
            }
        }
        array_1387.finish();
    }
    if input.supports_distributed_training {
        object
            .key("SupportsDistributedTraining")
            .boolean(input.supports_distributed_training);
    }
    if let Some(var_1389) = &input.metric_definitions {
        let mut array_1390 = object.key("MetricDefinitions").start_array();
        for item_1391 in var_1389 {
            {
                let mut object_1392 = array_1390.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1392, item_1391);
                object_1392.finish();
            }
        }
        array_1390.finish();
    }
    if let Some(var_1393) = &input.training_channels {
        let mut array_1394 = object.key("TrainingChannels").start_array();
        for item_1395 in var_1393 {
            {
                let mut object_1396 = array_1394.value().start_object();
                crate::json_ser::serialize_structure_channel_specification(
                    &mut object_1396,
                    item_1395,
                );
                object_1396.finish();
            }
        }
        array_1394.finish();
    }
    if let Some(var_1397) = &input.supported_tuning_job_objective_metrics {
        let mut array_1398 = object
            .key("SupportedTuningJobObjectiveMetrics")
            .start_array();
        for item_1399 in var_1397 {
            {
                let mut object_1400 = array_1398.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
                    &mut object_1400,
                    item_1399,
                );
                object_1400.finish();
            }
        }
        array_1398.finish();
    }
}

pub fn serialize_structure_inference_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceSpecification,
) {
    if let Some(var_1401) = &input.containers {
        let mut array_1402 = object.key("Containers").start_array();
        for item_1403 in var_1401 {
            {
                let mut object_1404 = array_1402.value().start_object();
                crate::json_ser::serialize_structure_model_package_container_definition(
                    &mut object_1404,
                    item_1403,
                );
                object_1404.finish();
            }
        }
        array_1402.finish();
    }
    if let Some(var_1405) = &input.supported_transform_instance_types {
        let mut array_1406 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1407 in var_1405 {
            {
                array_1406.value().string(item_1407.as_str());
            }
        }
        array_1406.finish();
    }
    if let Some(var_1408) = &input.supported_realtime_inference_instance_types {
        let mut array_1409 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1410 in var_1408 {
            {
                array_1409.value().string(item_1410.as_str());
            }
        }
        array_1409.finish();
    }
    if let Some(var_1411) = &input.supported_content_types {
        let mut array_1412 = object.key("SupportedContentTypes").start_array();
        for item_1413 in var_1411 {
            {
                array_1412.value().string(item_1413);
            }
        }
        array_1412.finish();
    }
    if let Some(var_1414) = &input.supported_response_mime_types {
        let mut array_1415 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1416 in var_1414 {
            {
                array_1415.value().string(item_1416);
            }
        }
        array_1415.finish();
    }
}

pub fn serialize_structure_algorithm_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationSpecification,
) {
    if let Some(var_1417) = &input.validation_role {
        object.key("ValidationRole").string(var_1417);
    }
    if let Some(var_1418) = &input.validation_profiles {
        let mut array_1419 = object.key("ValidationProfiles").start_array();
        for item_1420 in var_1418 {
            {
                let mut object_1421 = array_1419.value().start_object();
                crate::json_ser::serialize_structure_algorithm_validation_profile(
                    &mut object_1421,
                    item_1420,
                );
                object_1421.finish();
            }
        }
        array_1419.finish();
    }
}

pub fn serialize_structure_resource_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceSpec,
) {
    if let Some(var_1422) = &input.sage_maker_image_arn {
        object.key("SageMakerImageArn").string(var_1422);
    }
    if let Some(var_1423) = &input.sage_maker_image_version_arn {
        object.key("SageMakerImageVersionArn").string(var_1423);
    }
    if let Some(var_1424) = &input.instance_type {
        object.key("InstanceType").string(var_1424.as_str());
    }
}

pub fn serialize_structure_kernel_gateway_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayImageConfig,
) {
    if let Some(var_1425) = &input.kernel_specs {
        let mut array_1426 = object.key("KernelSpecs").start_array();
        for item_1427 in var_1425 {
            {
                let mut object_1428 = array_1426.value().start_object();
                crate::json_ser::serialize_structure_kernel_spec(&mut object_1428, item_1427);
                object_1428.finish();
            }
        }
        array_1426.finish();
    }
    if let Some(var_1429) = &input.file_system_config {
        let mut object_1430 = object.key("FileSystemConfig").start_object();
        crate::json_ser::serialize_structure_file_system_config(&mut object_1430, var_1429);
        object_1430.finish();
    }
}

pub fn serialize_structure_artifact_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSource,
) {
    if let Some(var_1431) = &input.source_uri {
        object.key("SourceUri").string(var_1431);
    }
    if let Some(var_1432) = &input.source_types {
        let mut array_1433 = object.key("SourceTypes").start_array();
        for item_1434 in var_1432 {
            {
                let mut object_1435 = array_1433.value().start_object();
                crate::json_ser::serialize_structure_artifact_source_type(
                    &mut object_1435,
                    item_1434,
                );
                object_1435.finish();
            }
        }
        array_1433.finish();
    }
}

pub fn serialize_structure_auto_ml_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlChannel,
) {
    if let Some(var_1436) = &input.data_source {
        let mut object_1437 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_auto_ml_data_source(&mut object_1437, var_1436);
        object_1437.finish();
    }
    if let Some(var_1438) = &input.compression_type {
        object.key("CompressionType").string(var_1438.as_str());
    }
    if let Some(var_1439) = &input.target_attribute_name {
        object.key("TargetAttributeName").string(var_1439);
    }
}

pub fn serialize_structure_auto_ml_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlOutputDataConfig,
) {
    if let Some(var_1440) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1440);
    }
    if let Some(var_1441) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1441);
    }
}

pub fn serialize_structure_auto_ml_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobObjective,
) {
    if let Some(var_1442) = &input.metric_name {
        object.key("MetricName").string(var_1442.as_str());
    }
}

pub fn serialize_structure_auto_ml_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobConfig,
) {
    if let Some(var_1443) = &input.completion_criteria {
        let mut object_1444 = object.key("CompletionCriteria").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_completion_criteria(
            &mut object_1444,
            var_1443,
        );
        object_1444.finish();
    }
    if let Some(var_1445) = &input.security_config {
        let mut object_1446 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_security_config(&mut object_1446, var_1445);
        object_1446.finish();
    }
}

pub fn serialize_structure_model_deploy_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDeployConfig,
) {
    if input.auto_generate_endpoint_name {
        object
            .key("AutoGenerateEndpointName")
            .boolean(input.auto_generate_endpoint_name);
    }
    if let Some(var_1447) = &input.endpoint_name {
        object.key("EndpointName").string(var_1447);
    }
}

pub fn serialize_structure_git_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfig,
) {
    if let Some(var_1448) = &input.repository_url {
        object.key("RepositoryUrl").string(var_1448);
    }
    if let Some(var_1449) = &input.branch {
        object.key("Branch").string(var_1449);
    }
    if let Some(var_1450) = &input.secret_arn {
        object.key("SecretArn").string(var_1450);
    }
}

pub fn serialize_structure_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputConfig,
) {
    if let Some(var_1451) = &input.s3_uri {
        object.key("S3Uri").string(var_1451);
    }
    if let Some(var_1452) = &input.data_input_config {
        object.key("DataInputConfig").string(var_1452);
    }
    if let Some(var_1453) = &input.framework {
        object.key("Framework").string(var_1453.as_str());
    }
    if let Some(var_1454) = &input.framework_version {
        object.key("FrameworkVersion").string(var_1454);
    }
}

pub fn serialize_structure_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) {
    if let Some(var_1455) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1455);
    }
    if let Some(var_1456) = &input.target_device {
        object.key("TargetDevice").string(var_1456.as_str());
    }
    if let Some(var_1457) = &input.target_platform {
        let mut object_1458 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_target_platform(&mut object_1458, var_1457);
        object_1458.finish();
    }
    if let Some(var_1459) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1459);
    }
    if let Some(var_1460) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1460);
    }
}

pub fn serialize_structure_neo_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeoVpcConfig,
) {
    if let Some(var_1461) = &input.security_group_ids {
        let mut array_1462 = object.key("SecurityGroupIds").start_array();
        for item_1463 in var_1461 {
            {
                array_1462.value().string(item_1463);
            }
        }
        array_1462.finish();
    }
    if let Some(var_1464) = &input.subnets {
        let mut array_1465 = object.key("Subnets").start_array();
        for item_1466 in var_1464 {
            {
                array_1465.value().string(item_1466);
            }
        }
        array_1465.finish();
    }
}

pub fn serialize_structure_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoppingCondition,
) {
    if input.max_runtime_in_seconds != 0 {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    if let Some(var_1467) = &input.max_wait_time_in_seconds {
        object.key("MaxWaitTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1467).into()),
        );
    }
}

pub fn serialize_structure_context_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContextSource,
) {
    if let Some(var_1468) = &input.source_uri {
        object.key("SourceUri").string(var_1468);
    }
    if let Some(var_1469) = &input.source_type {
        object.key("SourceType").string(var_1469);
    }
    if let Some(var_1470) = &input.source_id {
        object.key("SourceId").string(var_1470);
    }
}

pub fn serialize_structure_data_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityBaselineConfig,
) {
    if let Some(var_1471) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1471);
    }
    if let Some(var_1472) = &input.constraints_resource {
        let mut object_1473 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1473,
            var_1472,
        );
        object_1473.finish();
    }
    if let Some(var_1474) = &input.statistics_resource {
        let mut object_1475 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_statistics_resource(
            &mut object_1475,
            var_1474,
        );
        object_1475.finish();
    }
}

pub fn serialize_structure_data_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityAppSpecification,
) {
    if let Some(var_1476) = &input.image_uri {
        object.key("ImageUri").string(var_1476);
    }
    if let Some(var_1477) = &input.container_entrypoint {
        let mut array_1478 = object.key("ContainerEntrypoint").start_array();
        for item_1479 in var_1477 {
            {
                array_1478.value().string(item_1479);
            }
        }
        array_1478.finish();
    }
    if let Some(var_1480) = &input.container_arguments {
        let mut array_1481 = object.key("ContainerArguments").start_array();
        for item_1482 in var_1480 {
            {
                array_1481.value().string(item_1482);
            }
        }
        array_1481.finish();
    }
    if let Some(var_1483) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1483);
    }
    if let Some(var_1484) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1484);
    }
    if let Some(var_1485) = &input.environment {
        let mut object_1486 = object.key("Environment").start_object();
        for (key_1487, value_1488) in var_1485 {
            {
                object_1486.key(key_1487).string(value_1488);
            }
        }
        object_1486.finish();
    }
}

pub fn serialize_structure_data_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityJobInput,
) {
    if let Some(var_1489) = &input.endpoint_input {
        let mut object_1490 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1490, var_1489);
        object_1490.finish();
    }
}

pub fn serialize_structure_monitoring_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutputConfig,
) {
    if let Some(var_1491) = &input.monitoring_outputs {
        let mut array_1492 = object.key("MonitoringOutputs").start_array();
        for item_1493 in var_1491 {
            {
                let mut object_1494 = array_1492.value().start_object();
                crate::json_ser::serialize_structure_monitoring_output(&mut object_1494, item_1493);
                object_1494.finish();
            }
        }
        array_1492.finish();
    }
    if let Some(var_1495) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1495);
    }
}

pub fn serialize_structure_monitoring_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringResources,
) {
    if let Some(var_1496) = &input.cluster_config {
        let mut object_1497 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_cluster_config(&mut object_1497, var_1496);
        object_1497.finish();
    }
}

pub fn serialize_structure_monitoring_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringNetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1498) = &input.vpc_config {
        let mut object_1499 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1499, var_1498);
        object_1499.finish();
    }
}

pub fn serialize_structure_monitoring_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_edge_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeOutputConfig,
) {
    if let Some(var_1500) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1500);
    }
    if let Some(var_1501) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1501);
    }
    if let Some(var_1502) = &input.preset_deployment_type {
        object.key("PresetDeploymentType").string(var_1502.as_str());
    }
    if let Some(var_1503) = &input.preset_deployment_config {
        object.key("PresetDeploymentConfig").string(var_1503);
    }
}

pub fn serialize_structure_user_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSettings,
) {
    if let Some(var_1504) = &input.execution_role {
        object.key("ExecutionRole").string(var_1504);
    }
    if let Some(var_1505) = &input.security_groups {
        let mut array_1506 = object.key("SecurityGroups").start_array();
        for item_1507 in var_1505 {
            {
                array_1506.value().string(item_1507);
            }
        }
        array_1506.finish();
    }
    if let Some(var_1508) = &input.sharing_settings {
        let mut object_1509 = object.key("SharingSettings").start_object();
        crate::json_ser::serialize_structure_sharing_settings(&mut object_1509, var_1508);
        object_1509.finish();
    }
    if let Some(var_1510) = &input.jupyter_server_app_settings {
        let mut object_1511 = object.key("JupyterServerAppSettings").start_object();
        crate::json_ser::serialize_structure_jupyter_server_app_settings(
            &mut object_1511,
            var_1510,
        );
        object_1511.finish();
    }
    if let Some(var_1512) = &input.kernel_gateway_app_settings {
        let mut object_1513 = object.key("KernelGatewayAppSettings").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_app_settings(
            &mut object_1513,
            var_1512,
        );
        object_1513.finish();
    }
    if let Some(var_1514) = &input.tensor_board_app_settings {
        let mut object_1515 = object.key("TensorBoardAppSettings").start_object();
        crate::json_ser::serialize_structure_tensor_board_app_settings(&mut object_1515, var_1514);
        object_1515.finish();
    }
}

pub fn serialize_structure_production_variant(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariant,
) {
    if let Some(var_1516) = &input.variant_name {
        object.key("VariantName").string(var_1516);
    }
    if let Some(var_1517) = &input.model_name {
        object.key("ModelName").string(var_1517);
    }
    if let Some(var_1518) = &input.initial_instance_count {
        object.key("InitialInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1518).into()),
        );
    }
    if let Some(var_1519) = &input.instance_type {
        object.key("InstanceType").string(var_1519.as_str());
    }
    if let Some(var_1520) = &input.initial_variant_weight {
        object.key("InitialVariantWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1520).into()),
        );
    }
    if let Some(var_1521) = &input.accelerator_type {
        object.key("AcceleratorType").string(var_1521.as_str());
    }
    if let Some(var_1522) = &input.core_dump_config {
        let mut object_1523 = object.key("CoreDumpConfig").start_object();
        crate::json_ser::serialize_structure_production_variant_core_dump_config(
            &mut object_1523,
            var_1522,
        );
        object_1523.finish();
    }
}

pub fn serialize_structure_data_capture_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCaptureConfig,
) {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1524) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1524).into()),
        );
    }
    if let Some(var_1525) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1525);
    }
    if let Some(var_1526) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1526);
    }
    if let Some(var_1527) = &input.capture_options {
        let mut array_1528 = object.key("CaptureOptions").start_array();
        for item_1529 in var_1527 {
            {
                let mut object_1530 = array_1528.value().start_object();
                crate::json_ser::serialize_structure_capture_option(&mut object_1530, item_1529);
                object_1530.finish();
            }
        }
        array_1528.finish();
    }
    if let Some(var_1531) = &input.capture_content_type_header {
        let mut object_1532 = object.key("CaptureContentTypeHeader").start_object();
        crate::json_ser::serialize_structure_capture_content_type_header(
            &mut object_1532,
            var_1531,
        );
        object_1532.finish();
    }
}

pub fn serialize_structure_feature_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureDefinition,
) {
    if let Some(var_1533) = &input.feature_name {
        object.key("FeatureName").string(var_1533);
    }
    if let Some(var_1534) = &input.feature_type {
        object.key("FeatureType").string(var_1534.as_str());
    }
}

pub fn serialize_structure_online_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreConfig,
) {
    if let Some(var_1535) = &input.security_config {
        let mut object_1536 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_online_store_security_config(
            &mut object_1536,
            var_1535,
        );
        object_1536.finish();
    }
    if input.enable_online_store {
        object
            .key("EnableOnlineStore")
            .boolean(input.enable_online_store);
    }
}

pub fn serialize_structure_offline_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OfflineStoreConfig,
) {
    if let Some(var_1537) = &input.s3_storage_config {
        let mut object_1538 = object.key("S3StorageConfig").start_object();
        crate::json_ser::serialize_structure_s3_storage_config(&mut object_1538, var_1537);
        object_1538.finish();
    }
    if input.disable_glue_table_creation {
        object
            .key("DisableGlueTableCreation")
            .boolean(input.disable_glue_table_creation);
    }
    if let Some(var_1539) = &input.data_catalog_config {
        let mut object_1540 = object.key("DataCatalogConfig").start_object();
        crate::json_ser::serialize_structure_data_catalog_config(&mut object_1540, var_1539);
        object_1540.finish();
    }
}

pub fn serialize_structure_human_loop_request_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopRequestSource,
) {
    if let Some(var_1541) = &input.aws_managed_human_loop_request_source {
        object
            .key("AwsManagedHumanLoopRequestSource")
            .string(var_1541.as_str());
    }
}

pub fn serialize_structure_human_loop_activation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConfig,
) {
    if let Some(var_1542) = &input.human_loop_activation_conditions_config {
        let mut object_1543 = object
            .key("HumanLoopActivationConditionsConfig")
            .start_object();
        crate::json_ser::serialize_structure_human_loop_activation_conditions_config(
            &mut object_1543,
            var_1542,
        );
        object_1543.finish();
    }
}

pub fn serialize_structure_human_loop_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) {
    if let Some(var_1544) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1544);
    }
    if let Some(var_1545) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1545);
    }
    if let Some(var_1546) = &input.task_title {
        object.key("TaskTitle").string(var_1546);
    }
    if let Some(var_1547) = &input.task_description {
        object.key("TaskDescription").string(var_1547);
    }
    if let Some(var_1548) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1548).into()),
        );
    }
    if let Some(var_1549) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1549).into()),
        );
    }
    if let Some(var_1550) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1550).into()),
        );
    }
    if let Some(var_1551) = &input.task_keywords {
        let mut array_1552 = object.key("TaskKeywords").start_array();
        for item_1553 in var_1551 {
            {
                array_1552.value().string(item_1553);
            }
        }
        array_1552.finish();
    }
    if let Some(var_1554) = &input.public_workforce_task_price {
        let mut object_1555 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_public_workforce_task_price(
            &mut object_1555,
            var_1554,
        );
        object_1555.finish();
    }
}

pub fn serialize_structure_flow_definition_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinitionOutputConfig,
) {
    if let Some(var_1556) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1556);
    }
    if let Some(var_1557) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1557);
    }
}

pub fn serialize_structure_ui_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiTemplate,
) {
    if let Some(var_1558) = &input.content {
        object.key("Content").string(var_1558);
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) {
    if let Some(var_1559) = &input.strategy {
        object.key("Strategy").string(var_1559.as_str());
    }
    if let Some(var_1560) = &input.hyper_parameter_tuning_job_objective {
        let mut object_1561 = object
            .key("HyperParameterTuningJobObjective")
            .start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
            &mut object_1561,
            var_1560,
        );
        object_1561.finish();
    }
    if let Some(var_1562) = &input.resource_limits {
        let mut object_1563 = object.key("ResourceLimits").start_object();
        crate::json_ser::serialize_structure_resource_limits(&mut object_1563, var_1562);
        object_1563.finish();
    }
    if let Some(var_1564) = &input.parameter_ranges {
        let mut object_1565 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_parameter_ranges(&mut object_1565, var_1564);
        object_1565.finish();
    }
    if let Some(var_1566) = &input.training_job_early_stopping_type {
        object
            .key("TrainingJobEarlyStoppingType")
            .string(var_1566.as_str());
    }
    if let Some(var_1567) = &input.tuning_job_completion_criteria {
        let mut object_1568 = object.key("TuningJobCompletionCriteria").start_object();
        crate::json_ser::serialize_structure_tuning_job_completion_criteria(
            &mut object_1568,
            var_1567,
        );
        object_1568.finish();
    }
}

pub fn serialize_structure_hyper_parameter_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTrainingJobDefinition,
) {
    if let Some(var_1569) = &input.definition_name {
        object.key("DefinitionName").string(var_1569);
    }
    if let Some(var_1570) = &input.tuning_objective {
        let mut object_1571 = object.key("TuningObjective").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
            &mut object_1571,
            var_1570,
        );
        object_1571.finish();
    }
    if let Some(var_1572) = &input.hyper_parameter_ranges {
        let mut object_1573 = object.key("HyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_parameter_ranges(&mut object_1573, var_1572);
        object_1573.finish();
    }
    if let Some(var_1574) = &input.static_hyper_parameters {
        let mut object_1575 = object.key("StaticHyperParameters").start_object();
        for (key_1576, value_1577) in var_1574 {
            {
                object_1575.key(key_1576).string(value_1577);
            }
        }
        object_1575.finish();
    }
    if let Some(var_1578) = &input.algorithm_specification {
        let mut object_1579 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_algorithm_specification(
            &mut object_1579,
            var_1578,
        );
        object_1579.finish();
    }
    if let Some(var_1580) = &input.role_arn {
        object.key("RoleArn").string(var_1580);
    }
    if let Some(var_1581) = &input.input_data_config {
        let mut array_1582 = object.key("InputDataConfig").start_array();
        for item_1583 in var_1581 {
            {
                let mut object_1584 = array_1582.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_1584, item_1583);
                object_1584.finish();
            }
        }
        array_1582.finish();
    }
    if let Some(var_1585) = &input.vpc_config {
        let mut object_1586 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1586, var_1585);
        object_1586.finish();
    }
    if let Some(var_1587) = &input.output_data_config {
        let mut object_1588 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_1588, var_1587);
        object_1588.finish();
    }
    if let Some(var_1589) = &input.resource_config {
        let mut object_1590 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_1590, var_1589);
        object_1590.finish();
    }
    if let Some(var_1591) = &input.stopping_condition {
        let mut object_1592 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_1592, var_1591);
        object_1592.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_1593) = &input.checkpoint_config {
        let mut object_1594 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_checkpoint_config(&mut object_1594, var_1593);
        object_1594.finish();
    }
    if let Some(var_1595) = &input.retry_strategy {
        let mut object_1596 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_1596, var_1595);
        object_1596.finish();
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_warm_start_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobWarmStartConfig,
) {
    if let Some(var_1597) = &input.parent_hyper_parameter_tuning_jobs {
        let mut array_1598 = object.key("ParentHyperParameterTuningJobs").start_array();
        for item_1599 in var_1597 {
            {
                let mut object_1600 = array_1598.value().start_object();
                crate::json_ser::serialize_structure_parent_hyper_parameter_tuning_job(
                    &mut object_1600,
                    item_1599,
                );
                object_1600.finish();
            }
        }
        array_1598.finish();
    }
    if let Some(var_1601) = &input.warm_start_type {
        object.key("WarmStartType").string(var_1601.as_str());
    }
}

pub fn serialize_structure_labeling_job_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobInputConfig,
) {
    if let Some(var_1602) = &input.data_source {
        let mut object_1603 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_data_source(&mut object_1603, var_1602);
        object_1603.finish();
    }
    if let Some(var_1604) = &input.data_attributes {
        let mut object_1605 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_labeling_job_data_attributes(
            &mut object_1605,
            var_1604,
        );
        object_1605.finish();
    }
}

pub fn serialize_structure_labeling_job_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobOutputConfig,
) {
    if let Some(var_1606) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1606);
    }
    if let Some(var_1607) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1607);
    }
    if let Some(var_1608) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1608);
    }
}

pub fn serialize_structure_labeling_job_stopping_conditions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobStoppingConditions,
) {
    if let Some(var_1609) = &input.max_human_labeled_object_count {
        object.key("MaxHumanLabeledObjectCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1609).into()),
        );
    }
    if let Some(var_1610) = &input.max_percentage_of_input_dataset_labeled {
        object.key("MaxPercentageOfInputDatasetLabeled").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1610).into()),
        );
    }
}

pub fn serialize_structure_labeling_job_algorithms_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobAlgorithmsConfig,
) {
    if let Some(var_1611) = &input.labeling_job_algorithm_specification_arn {
        object
            .key("LabelingJobAlgorithmSpecificationArn")
            .string(var_1611);
    }
    if let Some(var_1612) = &input.initial_active_learning_model_arn {
        object.key("InitialActiveLearningModelArn").string(var_1612);
    }
    if let Some(var_1613) = &input.labeling_job_resource_config {
        let mut object_1614 = object.key("LabelingJobResourceConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_resource_config(
            &mut object_1614,
            var_1613,
        );
        object_1614.finish();
    }
}

pub fn serialize_structure_human_task_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanTaskConfig,
) {
    if let Some(var_1615) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1615);
    }
    if let Some(var_1616) = &input.ui_config {
        let mut object_1617 = object.key("UiConfig").start_object();
        crate::json_ser::serialize_structure_ui_config(&mut object_1617, var_1616);
        object_1617.finish();
    }
    if let Some(var_1618) = &input.pre_human_task_lambda_arn {
        object.key("PreHumanTaskLambdaArn").string(var_1618);
    }
    if let Some(var_1619) = &input.task_keywords {
        let mut array_1620 = object.key("TaskKeywords").start_array();
        for item_1621 in var_1619 {
            {
                array_1620.value().string(item_1621);
            }
        }
        array_1620.finish();
    }
    if let Some(var_1622) = &input.task_title {
        object.key("TaskTitle").string(var_1622);
    }
    if let Some(var_1623) = &input.task_description {
        object.key("TaskDescription").string(var_1623);
    }
    if let Some(var_1624) = &input.number_of_human_workers_per_data_object {
        object.key("NumberOfHumanWorkersPerDataObject").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1624).into()),
        );
    }
    if let Some(var_1625) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1625).into()),
        );
    }
    if let Some(var_1626) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1626).into()),
        );
    }
    if let Some(var_1627) = &input.max_concurrent_task_count {
        object.key("MaxConcurrentTaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1627).into()),
        );
    }
    if let Some(var_1628) = &input.annotation_consolidation_config {
        let mut object_1629 = object.key("AnnotationConsolidationConfig").start_object();
        crate::json_ser::serialize_structure_annotation_consolidation_config(
            &mut object_1629,
            var_1628,
        );
        object_1629.finish();
    }
    if let Some(var_1630) = &input.public_workforce_task_price {
        let mut object_1631 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_public_workforce_task_price(
            &mut object_1631,
            var_1630,
        );
        object_1631.finish();
    }
}

pub fn serialize_structure_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) {
    if let Some(var_1632) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1632);
    }
    if let Some(var_1633) = &input.image {
        object.key("Image").string(var_1633);
    }
    if let Some(var_1634) = &input.image_config {
        let mut object_1635 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_image_config(&mut object_1635, var_1634);
        object_1635.finish();
    }
    if let Some(var_1636) = &input.mode {
        object.key("Mode").string(var_1636.as_str());
    }
    if let Some(var_1637) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1637);
    }
    if let Some(var_1638) = &input.environment {
        let mut object_1639 = object.key("Environment").start_object();
        for (key_1640, value_1641) in var_1638 {
            {
                object_1639.key(key_1640).string(value_1641);
            }
        }
        object_1639.finish();
    }
    if let Some(var_1642) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1642);
    }
    if let Some(var_1643) = &input.multi_model_config {
        let mut object_1644 = object.key("MultiModelConfig").start_object();
        crate::json_ser::serialize_structure_multi_model_config(&mut object_1644, var_1643);
        object_1644.finish();
    }
}

pub fn serialize_structure_inference_execution_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceExecutionConfig,
) {
    if let Some(var_1645) = &input.mode {
        object.key("Mode").string(var_1645.as_str());
    }
}

pub fn serialize_structure_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_1646) = &input.security_group_ids {
        let mut array_1647 = object.key("SecurityGroupIds").start_array();
        for item_1648 in var_1646 {
            {
                array_1647.value().string(item_1648);
            }
        }
        array_1647.finish();
    }
    if let Some(var_1649) = &input.subnets {
        let mut array_1650 = object.key("Subnets").start_array();
        for item_1651 in var_1649 {
            {
                array_1650.value().string(item_1651);
            }
        }
        array_1650.finish();
    }
}

pub fn serialize_structure_model_bias_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasBaselineConfig,
) {
    if let Some(var_1652) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1652);
    }
    if let Some(var_1653) = &input.constraints_resource {
        let mut object_1654 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1654,
            var_1653,
        );
        object_1654.finish();
    }
}

pub fn serialize_structure_model_bias_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasAppSpecification,
) {
    if let Some(var_1655) = &input.image_uri {
        object.key("ImageUri").string(var_1655);
    }
    if let Some(var_1656) = &input.config_uri {
        object.key("ConfigUri").string(var_1656);
    }
    if let Some(var_1657) = &input.environment {
        let mut object_1658 = object.key("Environment").start_object();
        for (key_1659, value_1660) in var_1657 {
            {
                object_1658.key(key_1659).string(value_1660);
            }
        }
        object_1658.finish();
    }
}

pub fn serialize_structure_model_bias_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasJobInput,
) {
    if let Some(var_1661) = &input.endpoint_input {
        let mut object_1662 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1662, var_1661);
        object_1662.finish();
    }
    if let Some(var_1663) = &input.ground_truth_s3_input {
        let mut object_1664 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_monitoring_ground_truth_s3_input(
            &mut object_1664,
            var_1663,
        );
        object_1664.finish();
    }
}

pub fn serialize_structure_model_explainability_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityBaselineConfig,
) {
    if let Some(var_1665) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1665);
    }
    if let Some(var_1666) = &input.constraints_resource {
        let mut object_1667 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1667,
            var_1666,
        );
        object_1667.finish();
    }
}

pub fn serialize_structure_model_explainability_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityAppSpecification,
) {
    if let Some(var_1668) = &input.image_uri {
        object.key("ImageUri").string(var_1668);
    }
    if let Some(var_1669) = &input.config_uri {
        object.key("ConfigUri").string(var_1669);
    }
    if let Some(var_1670) = &input.environment {
        let mut object_1671 = object.key("Environment").start_object();
        for (key_1672, value_1673) in var_1670 {
            {
                object_1671.key(key_1672).string(value_1673);
            }
        }
        object_1671.finish();
    }
}

pub fn serialize_structure_model_explainability_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityJobInput,
) {
    if let Some(var_1674) = &input.endpoint_input {
        let mut object_1675 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1675, var_1674);
        object_1675.finish();
    }
}

pub fn serialize_structure_model_package_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationSpecification,
) {
    if let Some(var_1676) = &input.validation_role {
        object.key("ValidationRole").string(var_1676);
    }
    if let Some(var_1677) = &input.validation_profiles {
        let mut array_1678 = object.key("ValidationProfiles").start_array();
        for item_1679 in var_1677 {
            {
                let mut object_1680 = array_1678.value().start_object();
                crate::json_ser::serialize_structure_model_package_validation_profile(
                    &mut object_1680,
                    item_1679,
                );
                object_1680.finish();
            }
        }
        array_1678.finish();
    }
}

pub fn serialize_structure_source_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithmSpecification,
) {
    if let Some(var_1681) = &input.source_algorithms {
        let mut array_1682 = object.key("SourceAlgorithms").start_array();
        for item_1683 in var_1681 {
            {
                let mut object_1684 = array_1682.value().start_object();
                crate::json_ser::serialize_structure_source_algorithm(&mut object_1684, item_1683);
                object_1684.finish();
            }
        }
        array_1682.finish();
    }
}

pub fn serialize_structure_model_metrics(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetrics,
) {
    if let Some(var_1685) = &input.model_quality {
        let mut object_1686 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_model_quality(&mut object_1686, var_1685);
        object_1686.finish();
    }
    if let Some(var_1687) = &input.model_data_quality {
        let mut object_1688 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_model_data_quality(&mut object_1688, var_1687);
        object_1688.finish();
    }
    if let Some(var_1689) = &input.bias {
        let mut object_1690 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_bias(&mut object_1690, var_1689);
        object_1690.finish();
    }
    if let Some(var_1691) = &input.explainability {
        let mut object_1692 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_explainability(&mut object_1692, var_1691);
        object_1692.finish();
    }
}

pub fn serialize_structure_model_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityBaselineConfig,
) {
    if let Some(var_1693) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1693);
    }
    if let Some(var_1694) = &input.constraints_resource {
        let mut object_1695 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1695,
            var_1694,
        );
        object_1695.finish();
    }
}

pub fn serialize_structure_model_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityAppSpecification,
) {
    if let Some(var_1696) = &input.image_uri {
        object.key("ImageUri").string(var_1696);
    }
    if let Some(var_1697) = &input.container_entrypoint {
        let mut array_1698 = object.key("ContainerEntrypoint").start_array();
        for item_1699 in var_1697 {
            {
                array_1698.value().string(item_1699);
            }
        }
        array_1698.finish();
    }
    if let Some(var_1700) = &input.container_arguments {
        let mut array_1701 = object.key("ContainerArguments").start_array();
        for item_1702 in var_1700 {
            {
                array_1701.value().string(item_1702);
            }
        }
        array_1701.finish();
    }
    if let Some(var_1703) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1703);
    }
    if let Some(var_1704) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1704);
    }
    if let Some(var_1705) = &input.problem_type {
        object.key("ProblemType").string(var_1705.as_str());
    }
    if let Some(var_1706) = &input.environment {
        let mut object_1707 = object.key("Environment").start_object();
        for (key_1708, value_1709) in var_1706 {
            {
                object_1707.key(key_1708).string(value_1709);
            }
        }
        object_1707.finish();
    }
}

pub fn serialize_structure_model_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityJobInput,
) {
    if let Some(var_1710) = &input.endpoint_input {
        let mut object_1711 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1711, var_1710);
        object_1711.finish();
    }
    if let Some(var_1712) = &input.ground_truth_s3_input {
        let mut object_1713 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_monitoring_ground_truth_s3_input(
            &mut object_1713,
            var_1712,
        );
        object_1713.finish();
    }
}

pub fn serialize_structure_monitoring_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringScheduleConfig,
) {
    if let Some(var_1714) = &input.schedule_config {
        let mut object_1715 = object.key("ScheduleConfig").start_object();
        crate::json_ser::serialize_structure_schedule_config(&mut object_1715, var_1714);
        object_1715.finish();
    }
    if let Some(var_1716) = &input.monitoring_job_definition {
        let mut object_1717 = object.key("MonitoringJobDefinition").start_object();
        crate::json_ser::serialize_structure_monitoring_job_definition(&mut object_1717, var_1716);
        object_1717.finish();
    }
    if let Some(var_1718) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1718);
    }
    if let Some(var_1719) = &input.monitoring_type {
        object.key("MonitoringType").string(var_1719.as_str());
    }
}

pub fn serialize_structure_notebook_instance_lifecycle_hook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotebookInstanceLifecycleHook,
) {
    if let Some(var_1720) = &input.content {
        object.key("Content").string(var_1720);
    }
}

pub fn serialize_structure_processing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingInput,
) {
    if let Some(var_1721) = &input.input_name {
        object.key("InputName").string(var_1721);
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    if let Some(var_1722) = &input.s3_input {
        let mut object_1723 = object.key("S3Input").start_object();
        crate::json_ser::serialize_structure_processing_s3_input(&mut object_1723, var_1722);
        object_1723.finish();
    }
    if let Some(var_1724) = &input.dataset_definition {
        let mut object_1725 = object.key("DatasetDefinition").start_object();
        crate::json_ser::serialize_structure_dataset_definition(&mut object_1725, var_1724);
        object_1725.finish();
    }
}

pub fn serialize_structure_processing_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutputConfig,
) {
    if let Some(var_1726) = &input.outputs {
        let mut array_1727 = object.key("Outputs").start_array();
        for item_1728 in var_1726 {
            {
                let mut object_1729 = array_1727.value().start_object();
                crate::json_ser::serialize_structure_processing_output(&mut object_1729, item_1728);
                object_1729.finish();
            }
        }
        array_1727.finish();
    }
    if let Some(var_1730) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1730);
    }
}

pub fn serialize_structure_processing_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingResources,
) {
    if let Some(var_1731) = &input.cluster_config {
        let mut object_1732 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_processing_cluster_config(&mut object_1732, var_1731);
        object_1732.finish();
    }
}

pub fn serialize_structure_processing_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppSpecification,
) {
    if let Some(var_1733) = &input.image_uri {
        object.key("ImageUri").string(var_1733);
    }
    if let Some(var_1734) = &input.container_entrypoint {
        let mut array_1735 = object.key("ContainerEntrypoint").start_array();
        for item_1736 in var_1734 {
            {
                array_1735.value().string(item_1736);
            }
        }
        array_1735.finish();
    }
    if let Some(var_1737) = &input.container_arguments {
        let mut array_1738 = object.key("ContainerArguments").start_array();
        for item_1739 in var_1737 {
            {
                array_1738.value().string(item_1739);
            }
        }
        array_1738.finish();
    }
}

pub fn serialize_structure_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1740) = &input.vpc_config {
        let mut object_1741 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1741, var_1740);
        object_1741.finish();
    }
}

pub fn serialize_structure_experiment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperimentConfig,
) {
    if let Some(var_1742) = &input.experiment_name {
        object.key("ExperimentName").string(var_1742);
    }
    if let Some(var_1743) = &input.trial_name {
        object.key("TrialName").string(var_1743);
    }
    if let Some(var_1744) = &input.trial_component_display_name {
        object.key("TrialComponentDisplayName").string(var_1744);
    }
}

pub fn serialize_structure_service_catalog_provisioning_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningDetails,
) {
    if let Some(var_1745) = &input.product_id {
        object.key("ProductId").string(var_1745);
    }
    if let Some(var_1746) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_1746);
    }
    if let Some(var_1747) = &input.path_id {
        object.key("PathId").string(var_1747);
    }
    if let Some(var_1748) = &input.provisioning_parameters {
        let mut array_1749 = object.key("ProvisioningParameters").start_array();
        for item_1750 in var_1748 {
            {
                let mut object_1751 = array_1749.value().start_object();
                crate::json_ser::serialize_structure_provisioning_parameter(
                    &mut object_1751,
                    item_1750,
                );
                object_1751.finish();
            }
        }
        array_1749.finish();
    }
}

pub fn serialize_structure_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmSpecification,
) {
    if let Some(var_1752) = &input.training_image {
        object.key("TrainingImage").string(var_1752);
    }
    if let Some(var_1753) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_1753);
    }
    if let Some(var_1754) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_1754.as_str());
    }
    if let Some(var_1755) = &input.metric_definitions {
        let mut array_1756 = object.key("MetricDefinitions").start_array();
        for item_1757 in var_1755 {
            {
                let mut object_1758 = array_1756.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1758, item_1757);
                object_1758.finish();
            }
        }
        array_1756.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object
            .key("EnableSageMakerMetricsTimeSeries")
            .boolean(input.enable_sage_maker_metrics_time_series);
    }
}

pub fn serialize_structure_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Channel,
) {
    if let Some(var_1759) = &input.channel_name {
        object.key("ChannelName").string(var_1759);
    }
    if let Some(var_1760) = &input.data_source {
        let mut object_1761 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_data_source(&mut object_1761, var_1760);
        object_1761.finish();
    }
    if let Some(var_1762) = &input.content_type {
        object.key("ContentType").string(var_1762);
    }
    if let Some(var_1763) = &input.compression_type {
        object.key("CompressionType").string(var_1763.as_str());
    }
    if let Some(var_1764) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_1764.as_str());
    }
    if let Some(var_1765) = &input.input_mode {
        object.key("InputMode").string(var_1765.as_str());
    }
    if let Some(var_1766) = &input.shuffle_config {
        let mut object_1767 = object.key("ShuffleConfig").start_object();
        crate::json_ser::serialize_structure_shuffle_config(&mut object_1767, var_1766);
        object_1767.finish();
    }
}

pub fn serialize_structure_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) {
    if let Some(var_1768) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1768);
    }
    if let Some(var_1769) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1769);
    }
}

pub fn serialize_structure_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceConfig,
) {
    if let Some(var_1770) = &input.instance_type {
        object.key("InstanceType").string(var_1770.as_str());
    }
    {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1771) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1771);
    }
}

pub fn serialize_structure_checkpoint_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfig,
) {
    if let Some(var_1772) = &input.s3_uri {
        object.key("S3Uri").string(var_1772);
    }
    if let Some(var_1773) = &input.local_path {
        object.key("LocalPath").string(var_1773);
    }
}

pub fn serialize_structure_debug_hook_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugHookConfig,
) {
    if let Some(var_1774) = &input.local_path {
        object.key("LocalPath").string(var_1774);
    }
    if let Some(var_1775) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1775);
    }
    if let Some(var_1776) = &input.hook_parameters {
        let mut object_1777 = object.key("HookParameters").start_object();
        for (key_1778, value_1779) in var_1776 {
            {
                object_1777.key(key_1778).string(value_1779);
            }
        }
        object_1777.finish();
    }
    if let Some(var_1780) = &input.collection_configurations {
        let mut array_1781 = object.key("CollectionConfigurations").start_array();
        for item_1782 in var_1780 {
            {
                let mut object_1783 = array_1781.value().start_object();
                crate::json_ser::serialize_structure_collection_configuration(
                    &mut object_1783,
                    item_1782,
                );
                object_1783.finish();
            }
        }
        array_1781.finish();
    }
}

pub fn serialize_structure_debug_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugRuleConfiguration,
) {
    if let Some(var_1784) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1784);
    }
    if let Some(var_1785) = &input.local_path {
        object.key("LocalPath").string(var_1785);
    }
    if let Some(var_1786) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1786);
    }
    if let Some(var_1787) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1787);
    }
    if let Some(var_1788) = &input.instance_type {
        object.key("InstanceType").string(var_1788.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1789) = &input.rule_parameters {
        let mut object_1790 = object.key("RuleParameters").start_object();
        for (key_1791, value_1792) in var_1789 {
            {
                object_1790.key(key_1791).string(value_1792);
            }
        }
        object_1790.finish();
    }
}

pub fn serialize_structure_tensor_board_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardOutputConfig,
) {
    if let Some(var_1793) = &input.local_path {
        object.key("LocalPath").string(var_1793);
    }
    if let Some(var_1794) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1794);
    }
}

pub fn serialize_structure_profiler_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfig,
) {
    if let Some(var_1795) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1795);
    }
    if let Some(var_1796) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1796).into()),
        );
    }
    if let Some(var_1797) = &input.profiling_parameters {
        let mut object_1798 = object.key("ProfilingParameters").start_object();
        for (key_1799, value_1800) in var_1797 {
            {
                object_1798.key(key_1799).string(value_1800);
            }
        }
        object_1798.finish();
    }
}

pub fn serialize_structure_profiler_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerRuleConfiguration,
) {
    if let Some(var_1801) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1801);
    }
    if let Some(var_1802) = &input.local_path {
        object.key("LocalPath").string(var_1802);
    }
    if let Some(var_1803) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1803);
    }
    if let Some(var_1804) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1804);
    }
    if let Some(var_1805) = &input.instance_type {
        object.key("InstanceType").string(var_1805.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1806) = &input.rule_parameters {
        let mut object_1807 = object.key("RuleParameters").start_object();
        for (key_1808, value_1809) in var_1806 {
            {
                object_1807.key(key_1808).string(value_1809);
            }
        }
        object_1807.finish();
    }
}

pub fn serialize_structure_retry_strategy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) {
    {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_retry_attempts).into()),
        );
    }
}

pub fn serialize_structure_model_client_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelClientConfig,
) {
    if let Some(var_1810) = &input.invocations_timeout_in_seconds {
        object.key("InvocationsTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1810).into()),
        );
    }
    if let Some(var_1811) = &input.invocations_max_retries {
        object.key("InvocationsMaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1811).into()),
        );
    }
}

pub fn serialize_structure_transform_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformInput,
) {
    if let Some(var_1812) = &input.data_source {
        let mut object_1813 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_transform_data_source(&mut object_1813, var_1812);
        object_1813.finish();
    }
    if let Some(var_1814) = &input.content_type {
        object.key("ContentType").string(var_1814);
    }
    if let Some(var_1815) = &input.compression_type {
        object.key("CompressionType").string(var_1815.as_str());
    }
    if let Some(var_1816) = &input.split_type {
        object.key("SplitType").string(var_1816.as_str());
    }
}

pub fn serialize_structure_transform_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOutput,
) {
    if let Some(var_1817) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1817);
    }
    if let Some(var_1818) = &input.accept {
        object.key("Accept").string(var_1818);
    }
    if let Some(var_1819) = &input.assemble_with {
        object.key("AssembleWith").string(var_1819.as_str());
    }
    if let Some(var_1820) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1820);
    }
}

pub fn serialize_structure_transform_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformResources,
) {
    if let Some(var_1821) = &input.instance_type {
        object.key("InstanceType").string(var_1821.as_str());
    }
    if let Some(var_1822) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1822).into()),
        );
    }
    if let Some(var_1823) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1823);
    }
}

pub fn serialize_structure_data_processing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataProcessing,
) {
    if let Some(var_1824) = &input.input_filter {
        object.key("InputFilter").string(var_1824);
    }
    if let Some(var_1825) = &input.output_filter {
        object.key("OutputFilter").string(var_1825);
    }
    if let Some(var_1826) = &input.join_source {
        object.key("JoinSource").string(var_1826.as_str());
    }
}

pub fn serialize_structure_trial_component_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentStatus,
) {
    if let Some(var_1827) = &input.primary_status {
        object.key("PrimaryStatus").string(var_1827.as_str());
    }
    if let Some(var_1828) = &input.message {
        object.key("Message").string(var_1828);
    }
}

pub fn serialize_union_trial_component_parameter_value(
    object_569: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentParameterValue,
) {
    match input {
        crate::model::TrialComponentParameterValue::StringValue(inner) => {
            object_569.key("StringValue").string(inner);
        }
        crate::model::TrialComponentParameterValue::NumberValue(inner) => {
            object_569.key("NumberValue").number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::Float((*inner).into()),
            );
        }
    }
}

pub fn serialize_structure_trial_component_artifact(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentArtifact,
) {
    if let Some(var_1829) = &input.media_type {
        object.key("MediaType").string(var_1829);
    }
    if let Some(var_1830) = &input.value {
        object.key("Value").string(var_1830);
    }
}

pub fn serialize_structure_cognito_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoConfig,
) {
    if let Some(var_1831) = &input.user_pool {
        object.key("UserPool").string(var_1831);
    }
    if let Some(var_1832) = &input.client_id {
        object.key("ClientId").string(var_1832);
    }
}

pub fn serialize_structure_oidc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcConfig,
) {
    if let Some(var_1833) = &input.client_id {
        object.key("ClientId").string(var_1833);
    }
    if let Some(var_1834) = &input.client_secret {
        object.key("ClientSecret").string(var_1834);
    }
    if let Some(var_1835) = &input.issuer {
        object.key("Issuer").string(var_1835);
    }
    if let Some(var_1836) = &input.authorization_endpoint {
        object.key("AuthorizationEndpoint").string(var_1836);
    }
    if let Some(var_1837) = &input.token_endpoint {
        object.key("TokenEndpoint").string(var_1837);
    }
    if let Some(var_1838) = &input.user_info_endpoint {
        object.key("UserInfoEndpoint").string(var_1838);
    }
    if let Some(var_1839) = &input.logout_endpoint {
        object.key("LogoutEndpoint").string(var_1839);
    }
    if let Some(var_1840) = &input.jwks_uri {
        object.key("JwksUri").string(var_1840);
    }
}

pub fn serialize_structure_source_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceIpConfig,
) {
    if let Some(var_1841) = &input.cidrs {
        let mut array_1842 = object.key("Cidrs").start_array();
        for item_1843 in var_1841 {
            {
                array_1842.value().string(item_1843);
            }
        }
        array_1842.finish();
    }
}

pub fn serialize_structure_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberDefinition,
) {
    if let Some(var_1844) = &input.cognito_member_definition {
        let mut object_1845 = object.key("CognitoMemberDefinition").start_object();
        crate::json_ser::serialize_structure_cognito_member_definition(&mut object_1845, var_1844);
        object_1845.finish();
    }
    if let Some(var_1846) = &input.oidc_member_definition {
        let mut object_1847 = object.key("OidcMemberDefinition").start_object();
        crate::json_ser::serialize_structure_oidc_member_definition(&mut object_1847, var_1846);
        object_1847.finish();
    }
}

pub fn serialize_structure_notification_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfiguration,
) {
    if let Some(var_1848) = &input.notification_topic_arn {
        object.key("NotificationTopicArn").string(var_1848);
    }
}

pub fn serialize_structure_retention_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionPolicy,
) {
    if let Some(var_1849) = &input.home_efs_file_system {
        object.key("HomeEfsFileSystem").string(var_1849.as_str());
    }
}

pub fn serialize_structure_suggestion_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuggestionQuery,
) {
    if let Some(var_1850) = &input.property_name_query {
        let mut object_1851 = object.key("PropertyNameQuery").start_object();
        crate::json_ser::serialize_structure_property_name_query(&mut object_1851, var_1850);
        object_1851.finish();
    }
}

pub fn serialize_structure_device(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) {
    if let Some(var_1852) = &input.device_name {
        object.key("DeviceName").string(var_1852);
    }
    if let Some(var_1853) = &input.description {
        object.key("Description").string(var_1853);
    }
    if let Some(var_1854) = &input.iot_thing_name {
        object.key("IotThingName").string(var_1854);
    }
}

pub fn serialize_structure_renderable_task(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenderableTask,
) {
    if let Some(var_1855) = &input.input {
        object.key("Input").string(var_1855);
    }
}

pub fn serialize_structure_search_expression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchExpression,
) {
    if let Some(var_1856) = &input.filters {
        let mut array_1857 = object.key("Filters").start_array();
        for item_1858 in var_1856 {
            {
                let mut object_1859 = array_1857.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_1859, item_1858);
                object_1859.finish();
            }
        }
        array_1857.finish();
    }
    if let Some(var_1860) = &input.nested_filters {
        let mut array_1861 = object.key("NestedFilters").start_array();
        for item_1862 in var_1860 {
            {
                let mut object_1863 = array_1861.value().start_object();
                crate::json_ser::serialize_structure_nested_filters(&mut object_1863, item_1862);
                object_1863.finish();
            }
        }
        array_1861.finish();
    }
    if let Some(var_1864) = &input.sub_expressions {
        let mut array_1865 = object.key("SubExpressions").start_array();
        for item_1866 in var_1864 {
            {
                let mut object_1867 = array_1865.value().start_object();
                crate::json_ser::serialize_structure_search_expression(&mut object_1867, item_1866);
                object_1867.finish();
            }
        }
        array_1865.finish();
    }
    if let Some(var_1868) = &input.operator {
        object.key("Operator").string(var_1868.as_str());
    }
}

pub fn serialize_structure_output_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputParameter,
) {
    if let Some(var_1869) = &input.name {
        object.key("Name").string(var_1869);
    }
    if let Some(var_1870) = &input.value {
        object.key("Value").string(var_1870);
    }
}

pub fn serialize_structure_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameter,
) {
    if let Some(var_1871) = &input.name {
        object.key("Name").string(var_1871);
    }
    if let Some(var_1872) = &input.value {
        object.key("Value").string(var_1872);
    }
}

pub fn serialize_structure_git_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfigForUpdate,
) {
    if let Some(var_1873) = &input.secret_arn {
        object.key("SecretArn").string(var_1873);
    }
}

pub fn serialize_structure_variant_property(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariantProperty,
) {
    if let Some(var_1874) = &input.variant_property_type {
        object.key("VariantPropertyType").string(var_1874.as_str());
    }
}

pub fn serialize_structure_deployment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfig,
) {
    if let Some(var_1875) = &input.blue_green_update_policy {
        let mut object_1876 = object.key("BlueGreenUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_blue_green_update_policy(&mut object_1876, var_1875);
        object_1876.finish();
    }
    if let Some(var_1877) = &input.auto_rollback_configuration {
        let mut object_1878 = object.key("AutoRollbackConfiguration").start_object();
        crate::json_ser::serialize_structure_auto_rollback_config(&mut object_1878, var_1877);
        object_1878.finish();
    }
}

pub fn serialize_structure_desired_weight_and_capacity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DesiredWeightAndCapacity,
) {
    if let Some(var_1879) = &input.variant_name {
        object.key("VariantName").string(var_1879);
    }
    if let Some(var_1880) = &input.desired_weight {
        object.key("DesiredWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1880).into()),
        );
    }
    if let Some(var_1881) = &input.desired_instance_count {
        object.key("DesiredInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1881).into()),
        );
    }
}

pub fn serialize_structure_profiler_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfigForUpdate,
) {
    if let Some(var_1882) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1882);
    }
    if let Some(var_1883) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1883).into()),
        );
    }
    if let Some(var_1884) = &input.profiling_parameters {
        let mut object_1885 = object.key("ProfilingParameters").start_object();
        for (key_1886, value_1887) in var_1884 {
            {
                object_1885.key(key_1886).string(value_1887);
            }
        }
        object_1885.finish();
    }
    if input.disable_profiler {
        object
            .key("DisableProfiler")
            .boolean(input.disable_profiler);
    }
}

pub fn serialize_structure_hyper_parameter_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterSpecification,
) {
    if let Some(var_1888) = &input.name {
        object.key("Name").string(var_1888);
    }
    if let Some(var_1889) = &input.description {
        object.key("Description").string(var_1889);
    }
    if let Some(var_1890) = &input.r#type {
        object.key("Type").string(var_1890.as_str());
    }
    if let Some(var_1891) = &input.range {
        let mut object_1892 = object.key("Range").start_object();
        crate::json_ser::serialize_structure_parameter_range(&mut object_1892, var_1891);
        object_1892.finish();
    }
    if input.is_tunable {
        object.key("IsTunable").boolean(input.is_tunable);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1893) = &input.default_value {
        object.key("DefaultValue").string(var_1893);
    }
}

pub fn serialize_structure_metric_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDefinition,
) {
    if let Some(var_1894) = &input.name {
        object.key("Name").string(var_1894);
    }
    if let Some(var_1895) = &input.regex {
        object.key("Regex").string(var_1895);
    }
}

pub fn serialize_structure_channel_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelSpecification,
) {
    if let Some(var_1896) = &input.name {
        object.key("Name").string(var_1896);
    }
    if let Some(var_1897) = &input.description {
        object.key("Description").string(var_1897);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1898) = &input.supported_content_types {
        let mut array_1899 = object.key("SupportedContentTypes").start_array();
        for item_1900 in var_1898 {
            {
                array_1899.value().string(item_1900);
            }
        }
        array_1899.finish();
    }
    if let Some(var_1901) = &input.supported_compression_types {
        let mut array_1902 = object.key("SupportedCompressionTypes").start_array();
        for item_1903 in var_1901 {
            {
                array_1902.value().string(item_1903.as_str());
            }
        }
        array_1902.finish();
    }
    if let Some(var_1904) = &input.supported_input_modes {
        let mut array_1905 = object.key("SupportedInputModes").start_array();
        for item_1906 in var_1904 {
            {
                array_1905.value().string(item_1906.as_str());
            }
        }
        array_1905.finish();
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobObjective,
) {
    if let Some(var_1907) = &input.r#type {
        object.key("Type").string(var_1907.as_str());
    }
    if let Some(var_1908) = &input.metric_name {
        object.key("MetricName").string(var_1908);
    }
}

pub fn serialize_structure_model_package_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageContainerDefinition,
) {
    if let Some(var_1909) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1909);
    }
    if let Some(var_1910) = &input.image {
        object.key("Image").string(var_1910);
    }
    if let Some(var_1911) = &input.image_digest {
        object.key("ImageDigest").string(var_1911);
    }
    if let Some(var_1912) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1912);
    }
    if let Some(var_1913) = &input.product_id {
        object.key("ProductId").string(var_1913);
    }
    if let Some(var_1914) = &input.environment {
        let mut object_1915 = object.key("Environment").start_object();
        for (key_1916, value_1917) in var_1914 {
            {
                object_1915.key(key_1916).string(value_1917);
            }
        }
        object_1915.finish();
    }
}

pub fn serialize_structure_algorithm_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationProfile,
) {
    if let Some(var_1918) = &input.profile_name {
        object.key("ProfileName").string(var_1918);
    }
    if let Some(var_1919) = &input.training_job_definition {
        let mut object_1920 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_training_job_definition(&mut object_1920, var_1919);
        object_1920.finish();
    }
    if let Some(var_1921) = &input.transform_job_definition {
        let mut object_1922 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_transform_job_definition(&mut object_1922, var_1921);
        object_1922.finish();
    }
}

pub fn serialize_structure_kernel_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelSpec,
) {
    if let Some(var_1923) = &input.name {
        object.key("Name").string(var_1923);
    }
    if let Some(var_1924) = &input.display_name {
        object.key("DisplayName").string(var_1924);
    }
}

pub fn serialize_structure_file_system_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) {
    if let Some(var_1925) = &input.mount_path {
        object.key("MountPath").string(var_1925);
    }
    if let Some(var_1926) = &input.default_uid {
        object.key("DefaultUid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1926).into()),
        );
    }
    if let Some(var_1927) = &input.default_gid {
        object.key("DefaultGid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1927).into()),
        );
    }
}

pub fn serialize_structure_artifact_source_type(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSourceType,
) {
    if let Some(var_1928) = &input.source_id_type {
        object.key("SourceIdType").string(var_1928.as_str());
    }
    if let Some(var_1929) = &input.value {
        object.key("Value").string(var_1929);
    }
}

pub fn serialize_structure_auto_ml_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlDataSource,
) {
    if let Some(var_1930) = &input.s3_data_source {
        let mut object_1931 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_auto_mls3_data_source(&mut object_1931, var_1930);
        object_1931.finish();
    }
}

pub fn serialize_structure_auto_ml_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobCompletionCriteria,
) {
    if let Some(var_1932) = &input.max_candidates {
        object.key("MaxCandidates").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1932).into()),
        );
    }
    if let Some(var_1933) = &input.max_runtime_per_training_job_in_seconds {
        object.key("MaxRuntimePerTrainingJobInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1933).into()),
        );
    }
    if let Some(var_1934) = &input.max_auto_ml_job_runtime_in_seconds {
        object.key("MaxAutoMLJobRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1934).into()),
        );
    }
}

pub fn serialize_structure_auto_ml_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlSecurityConfig,
) {
    if let Some(var_1935) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1935);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if let Some(var_1936) = &input.vpc_config {
        let mut object_1937 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1937, var_1936);
        object_1937.finish();
    }
}

pub fn serialize_structure_target_platform(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetPlatform,
) {
    if let Some(var_1938) = &input.os {
        object.key("Os").string(var_1938.as_str());
    }
    if let Some(var_1939) = &input.arch {
        object.key("Arch").string(var_1939.as_str());
    }
    if let Some(var_1940) = &input.accelerator {
        object.key("Accelerator").string(var_1940.as_str());
    }
}

pub fn serialize_structure_monitoring_constraints_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConstraintsResource,
) {
    if let Some(var_1941) = &input.s3_uri {
        object.key("S3Uri").string(var_1941);
    }
}

pub fn serialize_structure_monitoring_statistics_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStatisticsResource,
) {
    if let Some(var_1942) = &input.s3_uri {
        object.key("S3Uri").string(var_1942);
    }
}

pub fn serialize_structure_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInput,
) {
    if let Some(var_1943) = &input.endpoint_name {
        object.key("EndpointName").string(var_1943);
    }
    if let Some(var_1944) = &input.local_path {
        object.key("LocalPath").string(var_1944);
    }
    if let Some(var_1945) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_1945.as_str());
    }
    if let Some(var_1946) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_1946.as_str());
    }
    if let Some(var_1947) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_1947);
    }
    if let Some(var_1948) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_1948);
    }
    if let Some(var_1949) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_1949);
    }
    if let Some(var_1950) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1950).into()),
        );
    }
    if let Some(var_1951) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_1951);
    }
    if let Some(var_1952) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_1952);
    }
}

pub fn serialize_structure_monitoring_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutput,
) {
    if let Some(var_1953) = &input.s3_output {
        let mut object_1954 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_monitoring_s3_output(&mut object_1954, var_1953);
        object_1954.finish();
    }
}

pub fn serialize_structure_monitoring_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringClusterConfig,
) {
    if let Some(var_1955) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1955).into()),
        );
    }
    if let Some(var_1956) = &input.instance_type {
        object.key("InstanceType").string(var_1956.as_str());
    }
    if let Some(var_1957) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1957).into()),
        );
    }
    if let Some(var_1958) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1958);
    }
}

pub fn serialize_structure_sharing_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharingSettings,
) {
    if let Some(var_1959) = &input.notebook_output_option {
        object.key("NotebookOutputOption").string(var_1959.as_str());
    }
    if let Some(var_1960) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1960);
    }
    if let Some(var_1961) = &input.s3_kms_key_id {
        object.key("S3KmsKeyId").string(var_1961);
    }
}

pub fn serialize_structure_jupyter_server_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JupyterServerAppSettings,
) {
    if let Some(var_1962) = &input.default_resource_spec {
        let mut object_1963 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1963, var_1962);
        object_1963.finish();
    }
}

pub fn serialize_structure_kernel_gateway_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayAppSettings,
) {
    if let Some(var_1964) = &input.default_resource_spec {
        let mut object_1965 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1965, var_1964);
        object_1965.finish();
    }
    if let Some(var_1966) = &input.custom_images {
        let mut array_1967 = object.key("CustomImages").start_array();
        for item_1968 in var_1966 {
            {
                let mut object_1969 = array_1967.value().start_object();
                crate::json_ser::serialize_structure_custom_image(&mut object_1969, item_1968);
                object_1969.finish();
            }
        }
        array_1967.finish();
    }
}

pub fn serialize_structure_tensor_board_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardAppSettings,
) {
    if let Some(var_1970) = &input.default_resource_spec {
        let mut object_1971 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1971, var_1970);
        object_1971.finish();
    }
}

pub fn serialize_structure_production_variant_core_dump_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantCoreDumpConfig,
) {
    if let Some(var_1972) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1972);
    }
    if let Some(var_1973) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1973);
    }
}

pub fn serialize_structure_capture_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureOption,
) {
    if let Some(var_1974) = &input.capture_mode {
        object.key("CaptureMode").string(var_1974.as_str());
    }
}

pub fn serialize_structure_capture_content_type_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureContentTypeHeader,
) {
    if let Some(var_1975) = &input.csv_content_types {
        let mut array_1976 = object.key("CsvContentTypes").start_array();
        for item_1977 in var_1975 {
            {
                array_1976.value().string(item_1977);
            }
        }
        array_1976.finish();
    }
    if let Some(var_1978) = &input.json_content_types {
        let mut array_1979 = object.key("JsonContentTypes").start_array();
        for item_1980 in var_1978 {
            {
                array_1979.value().string(item_1980);
            }
        }
        array_1979.finish();
    }
}

pub fn serialize_structure_online_store_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreSecurityConfig,
) {
    if let Some(var_1981) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1981);
    }
}

pub fn serialize_structure_s3_storage_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3StorageConfig,
) {
    if let Some(var_1982) = &input.s3_uri {
        object.key("S3Uri").string(var_1982);
    }
    if let Some(var_1983) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1983);
    }
    if let Some(var_1984) = &input.resolved_output_s3_uri {
        object.key("ResolvedOutputS3Uri").string(var_1984);
    }
}

pub fn serialize_structure_data_catalog_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogConfig,
) {
    if let Some(var_1985) = &input.table_name {
        object.key("TableName").string(var_1985);
    }
    if let Some(var_1986) = &input.catalog {
        object.key("Catalog").string(var_1986);
    }
    if let Some(var_1987) = &input.database {
        object.key("Database").string(var_1987);
    }
}

pub fn serialize_structure_human_loop_activation_conditions_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConditionsConfig,
) {
    if let Some(var_1988) = &input.human_loop_activation_conditions {
        object.key("HumanLoopActivationConditions").string(var_1988);
    }
}

pub fn serialize_structure_public_workforce_task_price(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicWorkforceTaskPrice,
) {
    if let Some(var_1989) = &input.amount_in_usd {
        let mut object_1990 = object.key("AmountInUsd").start_object();
        crate::json_ser::serialize_structure_usd(&mut object_1990, var_1989);
        object_1990.finish();
    }
}

pub fn serialize_structure_resource_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceLimits,
) {
    {
        object.key("MaxNumberOfTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_number_of_training_jobs).into()),
        );
    }
    {
        object.key("MaxParallelTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_parallel_training_jobs).into()),
        );
    }
}

pub fn serialize_structure_parameter_ranges(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) {
    if let Some(var_1991) = &input.integer_parameter_ranges {
        let mut array_1992 = object.key("IntegerParameterRanges").start_array();
        for item_1993 in var_1991 {
            {
                let mut object_1994 = array_1992.value().start_object();
                crate::json_ser::serialize_structure_integer_parameter_range(
                    &mut object_1994,
                    item_1993,
                );
                object_1994.finish();
            }
        }
        array_1992.finish();
    }
    if let Some(var_1995) = &input.continuous_parameter_ranges {
        let mut array_1996 = object.key("ContinuousParameterRanges").start_array();
        for item_1997 in var_1995 {
            {
                let mut object_1998 = array_1996.value().start_object();
                crate::json_ser::serialize_structure_continuous_parameter_range(
                    &mut object_1998,
                    item_1997,
                );
                object_1998.finish();
            }
        }
        array_1996.finish();
    }
    if let Some(var_1999) = &input.categorical_parameter_ranges {
        let mut array_2000 = object.key("CategoricalParameterRanges").start_array();
        for item_2001 in var_1999 {
            {
                let mut object_2002 = array_2000.value().start_object();
                crate::json_ser::serialize_structure_categorical_parameter_range(
                    &mut object_2002,
                    item_2001,
                );
                object_2002.finish();
            }
        }
        array_2000.finish();
    }
}

pub fn serialize_structure_tuning_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TuningJobCompletionCriteria,
) {
    if let Some(var_2003) = &input.target_objective_metric_value {
        object.key("TargetObjectiveMetricValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_2003).into()),
        );
    }
}

pub fn serialize_structure_hyper_parameter_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterAlgorithmSpecification,
) {
    if let Some(var_2004) = &input.training_image {
        object.key("TrainingImage").string(var_2004);
    }
    if let Some(var_2005) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2005.as_str());
    }
    if let Some(var_2006) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2006);
    }
    if let Some(var_2007) = &input.metric_definitions {
        let mut array_2008 = object.key("MetricDefinitions").start_array();
        for item_2009 in var_2007 {
            {
                let mut object_2010 = array_2008.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_2010, item_2009);
                object_2010.finish();
            }
        }
        array_2008.finish();
    }
}

pub fn serialize_structure_parent_hyper_parameter_tuning_job(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentHyperParameterTuningJob,
) {
    if let Some(var_2011) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_2011);
    }
}

pub fn serialize_structure_labeling_job_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataSource,
) {
    if let Some(var_2012) = &input.s3_data_source {
        let mut object_2013 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_s3_data_source(
            &mut object_2013,
            var_2012,
        );
        object_2013.finish();
    }
    if let Some(var_2014) = &input.sns_data_source {
        let mut object_2015 = object.key("SnsDataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_sns_data_source(
            &mut object_2015,
            var_2014,
        );
        object_2015.finish();
    }
}

pub fn serialize_structure_labeling_job_data_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataAttributes,
) {
    if let Some(var_2016) = &input.content_classifiers {
        let mut array_2017 = object.key("ContentClassifiers").start_array();
        for item_2018 in var_2016 {
            {
                array_2017.value().string(item_2018.as_str());
            }
        }
        array_2017.finish();
    }
}

pub fn serialize_structure_labeling_job_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobResourceConfig,
) {
    if let Some(var_2019) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2019);
    }
}

pub fn serialize_structure_ui_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiConfig,
) {
    if let Some(var_2020) = &input.ui_template_s3_uri {
        object.key("UiTemplateS3Uri").string(var_2020);
    }
    if let Some(var_2021) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_2021);
    }
}

pub fn serialize_structure_annotation_consolidation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnnotationConsolidationConfig,
) {
    if let Some(var_2022) = &input.annotation_consolidation_lambda_arn {
        object
            .key("AnnotationConsolidationLambdaArn")
            .string(var_2022);
    }
}

pub fn serialize_structure_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) {
    if let Some(var_2023) = &input.repository_access_mode {
        object.key("RepositoryAccessMode").string(var_2023.as_str());
    }
    if let Some(var_2024) = &input.repository_auth_config {
        let mut object_2025 = object.key("RepositoryAuthConfig").start_object();
        crate::json_ser::serialize_structure_repository_auth_config(&mut object_2025, var_2024);
        object_2025.finish();
    }
}

pub fn serialize_structure_multi_model_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiModelConfig,
) {
    if let Some(var_2026) = &input.model_cache_setting {
        object.key("ModelCacheSetting").string(var_2026.as_str());
    }
}

pub fn serialize_structure_monitoring_ground_truth_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringGroundTruthS3Input,
) {
    if let Some(var_2027) = &input.s3_uri {
        object.key("S3Uri").string(var_2027);
    }
}

pub fn serialize_structure_model_package_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationProfile,
) {
    if let Some(var_2028) = &input.profile_name {
        object.key("ProfileName").string(var_2028);
    }
    if let Some(var_2029) = &input.transform_job_definition {
        let mut object_2030 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_transform_job_definition(&mut object_2030, var_2029);
        object_2030.finish();
    }
}

pub fn serialize_structure_source_algorithm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithm,
) {
    if let Some(var_2031) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2031);
    }
    if let Some(var_2032) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2032);
    }
}

pub fn serialize_structure_model_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQuality,
) {
    if let Some(var_2033) = &input.statistics {
        let mut object_2034 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2034, var_2033);
        object_2034.finish();
    }
    if let Some(var_2035) = &input.constraints {
        let mut object_2036 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2036, var_2035);
        object_2036.finish();
    }
}

pub fn serialize_structure_model_data_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDataQuality,
) {
    if let Some(var_2037) = &input.statistics {
        let mut object_2038 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2038, var_2037);
        object_2038.finish();
    }
    if let Some(var_2039) = &input.constraints {
        let mut object_2040 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2040, var_2039);
        object_2040.finish();
    }
}

pub fn serialize_structure_bias(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bias,
) {
    if let Some(var_2041) = &input.report {
        let mut object_2042 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2042, var_2041);
        object_2042.finish();
    }
}

pub fn serialize_structure_explainability(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Explainability,
) {
    if let Some(var_2043) = &input.report {
        let mut object_2044 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2044, var_2043);
        object_2044.finish();
    }
}

pub fn serialize_structure_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleConfig,
) {
    if let Some(var_2045) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_2045);
    }
}

pub fn serialize_structure_monitoring_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringJobDefinition,
) {
    if let Some(var_2046) = &input.baseline_config {
        let mut object_2047 = object.key("BaselineConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_baseline_config(&mut object_2047, var_2046);
        object_2047.finish();
    }
    if let Some(var_2048) = &input.monitoring_inputs {
        let mut array_2049 = object.key("MonitoringInputs").start_array();
        for item_2050 in var_2048 {
            {
                let mut object_2051 = array_2049.value().start_object();
                crate::json_ser::serialize_structure_monitoring_input(&mut object_2051, item_2050);
                object_2051.finish();
            }
        }
        array_2049.finish();
    }
    if let Some(var_2052) = &input.monitoring_output_config {
        let mut object_2053 = object.key("MonitoringOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_2053, var_2052);
        object_2053.finish();
    }
    if let Some(var_2054) = &input.monitoring_resources {
        let mut object_2055 = object.key("MonitoringResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_2055, var_2054);
        object_2055.finish();
    }
    if let Some(var_2056) = &input.monitoring_app_specification {
        let mut object_2057 = object.key("MonitoringAppSpecification").start_object();
        crate::json_ser::serialize_structure_monitoring_app_specification(
            &mut object_2057,
            var_2056,
        );
        object_2057.finish();
    }
    if let Some(var_2058) = &input.stopping_condition {
        let mut object_2059 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_2059,
            var_2058,
        );
        object_2059.finish();
    }
    if let Some(var_2060) = &input.environment {
        let mut object_2061 = object.key("Environment").start_object();
        for (key_2062, value_2063) in var_2060 {
            {
                object_2061.key(key_2062).string(value_2063);
            }
        }
        object_2061.finish();
    }
    if let Some(var_2064) = &input.network_config {
        let mut object_2065 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_network_config(&mut object_2065, var_2064);
        object_2065.finish();
    }
    if let Some(var_2066) = &input.role_arn {
        object.key("RoleArn").string(var_2066);
    }
}

pub fn serialize_structure_processing_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Input,
) {
    if let Some(var_2067) = &input.s3_uri {
        object.key("S3Uri").string(var_2067);
    }
    if let Some(var_2068) = &input.local_path {
        object.key("LocalPath").string(var_2068);
    }
    if let Some(var_2069) = &input.s3_data_type {
        object.key("S3DataType").string(var_2069.as_str());
    }
    if let Some(var_2070) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2070.as_str());
    }
    if let Some(var_2071) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2071.as_str());
    }
    if let Some(var_2072) = &input.s3_compression_type {
        object.key("S3CompressionType").string(var_2072.as_str());
    }
}

pub fn serialize_structure_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetDefinition,
) {
    if let Some(var_2073) = &input.athena_dataset_definition {
        let mut object_2074 = object.key("AthenaDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_athena_dataset_definition(&mut object_2074, var_2073);
        object_2074.finish();
    }
    if let Some(var_2075) = &input.redshift_dataset_definition {
        let mut object_2076 = object.key("RedshiftDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_redshift_dataset_definition(
            &mut object_2076,
            var_2075,
        );
        object_2076.finish();
    }
    if let Some(var_2077) = &input.local_path {
        object.key("LocalPath").string(var_2077);
    }
    if let Some(var_2078) = &input.data_distribution_type {
        object.key("DataDistributionType").string(var_2078.as_str());
    }
    if let Some(var_2079) = &input.input_mode {
        object.key("InputMode").string(var_2079.as_str());
    }
}

pub fn serialize_structure_processing_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutput,
) {
    if let Some(var_2080) = &input.output_name {
        object.key("OutputName").string(var_2080);
    }
    if let Some(var_2081) = &input.s3_output {
        let mut object_2082 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_processing_s3_output(&mut object_2082, var_2081);
        object_2082.finish();
    }
    if let Some(var_2083) = &input.feature_store_output {
        let mut object_2084 = object.key("FeatureStoreOutput").start_object();
        crate::json_ser::serialize_structure_processing_feature_store_output(
            &mut object_2084,
            var_2083,
        );
        object_2084.finish();
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
}

pub fn serialize_structure_processing_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingClusterConfig,
) {
    if let Some(var_2085) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2085).into()),
        );
    }
    if let Some(var_2086) = &input.instance_type {
        object.key("InstanceType").string(var_2086.as_str());
    }
    if let Some(var_2087) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2087).into()),
        );
    }
    if let Some(var_2088) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2088);
    }
}

pub fn serialize_structure_provisioning_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningParameter,
) {
    if let Some(var_2089) = &input.key {
        object.key("Key").string(var_2089);
    }
    if let Some(var_2090) = &input.value {
        object.key("Value").string(var_2090);
    }
}

pub fn serialize_structure_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) {
    if let Some(var_2091) = &input.s3_data_source {
        let mut object_2092 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_s3_data_source(&mut object_2092, var_2091);
        object_2092.finish();
    }
    if let Some(var_2093) = &input.file_system_data_source {
        let mut object_2094 = object.key("FileSystemDataSource").start_object();
        crate::json_ser::serialize_structure_file_system_data_source(&mut object_2094, var_2093);
        object_2094.finish();
    }
}

pub fn serialize_structure_shuffle_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShuffleConfig,
) {
    {
        object.key("Seed").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.seed).into()),
        );
    }
}

pub fn serialize_structure_collection_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CollectionConfiguration,
) {
    if let Some(var_2095) = &input.collection_name {
        object.key("CollectionName").string(var_2095);
    }
    if let Some(var_2096) = &input.collection_parameters {
        let mut object_2097 = object.key("CollectionParameters").start_object();
        for (key_2098, value_2099) in var_2096 {
            {
                object_2097.key(key_2098).string(value_2099);
            }
        }
        object_2097.finish();
    }
}

pub fn serialize_structure_transform_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformDataSource,
) {
    if let Some(var_2100) = &input.s3_data_source {
        let mut object_2101 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_transform_s3_data_source(&mut object_2101, var_2100);
        object_2101.finish();
    }
}

pub fn serialize_structure_cognito_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoMemberDefinition,
) {
    if let Some(var_2102) = &input.user_pool {
        object.key("UserPool").string(var_2102);
    }
    if let Some(var_2103) = &input.user_group {
        object.key("UserGroup").string(var_2103);
    }
    if let Some(var_2104) = &input.client_id {
        object.key("ClientId").string(var_2104);
    }
}

pub fn serialize_structure_oidc_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcMemberDefinition,
) {
    if let Some(var_2105) = &input.groups {
        let mut array_2106 = object.key("Groups").start_array();
        for item_2107 in var_2105 {
            {
                array_2106.value().string(item_2107);
            }
        }
        array_2106.finish();
    }
}

pub fn serialize_structure_property_name_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyNameQuery,
) {
    if let Some(var_2108) = &input.property_name_hint {
        object.key("PropertyNameHint").string(var_2108);
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_2109) = &input.name {
        object.key("Name").string(var_2109);
    }
    if let Some(var_2110) = &input.operator {
        object.key("Operator").string(var_2110.as_str());
    }
    if let Some(var_2111) = &input.value {
        object.key("Value").string(var_2111);
    }
}

pub fn serialize_structure_nested_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NestedFilters,
) {
    if let Some(var_2112) = &input.nested_property_name {
        object.key("NestedPropertyName").string(var_2112);
    }
    if let Some(var_2113) = &input.filters {
        let mut array_2114 = object.key("Filters").start_array();
        for item_2115 in var_2113 {
            {
                let mut object_2116 = array_2114.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_2116, item_2115);
                object_2116.finish();
            }
        }
        array_2114.finish();
    }
}

pub fn serialize_structure_blue_green_update_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlueGreenUpdatePolicy,
) {
    if let Some(var_2117) = &input.traffic_routing_configuration {
        let mut object_2118 = object.key("TrafficRoutingConfiguration").start_object();
        crate::json_ser::serialize_structure_traffic_routing_config(&mut object_2118, var_2117);
        object_2118.finish();
    }
    if let Some(var_2119) = &input.termination_wait_in_seconds {
        object.key("TerminationWaitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2119).into()),
        );
    }
    if let Some(var_2120) = &input.maximum_execution_timeout_in_seconds {
        object.key("MaximumExecutionTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2120).into()),
        );
    }
}

pub fn serialize_structure_auto_rollback_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoRollbackConfig,
) {
    if let Some(var_2121) = &input.alarms {
        let mut array_2122 = object.key("Alarms").start_array();
        for item_2123 in var_2121 {
            {
                let mut object_2124 = array_2122.value().start_object();
                crate::json_ser::serialize_structure_alarm(&mut object_2124, item_2123);
                object_2124.finish();
            }
        }
        array_2122.finish();
    }
}

pub fn serialize_structure_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRange,
) {
    if let Some(var_2125) = &input.integer_parameter_range_specification {
        let mut object_2126 = object
            .key("IntegerParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_integer_parameter_range_specification(
            &mut object_2126,
            var_2125,
        );
        object_2126.finish();
    }
    if let Some(var_2127) = &input.continuous_parameter_range_specification {
        let mut object_2128 = object
            .key("ContinuousParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_continuous_parameter_range_specification(
            &mut object_2128,
            var_2127,
        );
        object_2128.finish();
    }
    if let Some(var_2129) = &input.categorical_parameter_range_specification {
        let mut object_2130 = object
            .key("CategoricalParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_categorical_parameter_range_specification(
            &mut object_2130,
            var_2129,
        );
        object_2130.finish();
    }
}

pub fn serialize_structure_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingJobDefinition,
) {
    if let Some(var_2131) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2131.as_str());
    }
    if let Some(var_2132) = &input.hyper_parameters {
        let mut object_2133 = object.key("HyperParameters").start_object();
        for (key_2134, value_2135) in var_2132 {
            {
                object_2133.key(key_2134).string(value_2135);
            }
        }
        object_2133.finish();
    }
    if let Some(var_2136) = &input.input_data_config {
        let mut array_2137 = object.key("InputDataConfig").start_array();
        for item_2138 in var_2136 {
            {
                let mut object_2139 = array_2137.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_2139, item_2138);
                object_2139.finish();
            }
        }
        array_2137.finish();
    }
    if let Some(var_2140) = &input.output_data_config {
        let mut object_2141 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_2141, var_2140);
        object_2141.finish();
    }
    if let Some(var_2142) = &input.resource_config {
        let mut object_2143 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_2143, var_2142);
        object_2143.finish();
    }
    if let Some(var_2144) = &input.stopping_condition {
        let mut object_2145 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_2145, var_2144);
        object_2145.finish();
    }
}

pub fn serialize_structure_transform_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformJobDefinition,
) {
    if let Some(var_2146) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2146).into()),
        );
    }
    if let Some(var_2147) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2147).into()),
        );
    }
    if let Some(var_2148) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_2148.as_str());
    }
    if let Some(var_2149) = &input.environment {
        let mut object_2150 = object.key("Environment").start_object();
        for (key_2151, value_2152) in var_2149 {
            {
                object_2150.key(key_2151).string(value_2152);
            }
        }
        object_2150.finish();
    }
    if let Some(var_2153) = &input.transform_input {
        let mut object_2154 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_transform_input(&mut object_2154, var_2153);
        object_2154.finish();
    }
    if let Some(var_2155) = &input.transform_output {
        let mut object_2156 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_transform_output(&mut object_2156, var_2155);
        object_2156.finish();
    }
    if let Some(var_2157) = &input.transform_resources {
        let mut object_2158 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_transform_resources(&mut object_2158, var_2157);
        object_2158.finish();
    }
}

pub fn serialize_structure_auto_mls3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMls3DataSource,
) {
    if let Some(var_2159) = &input.s3_data_type {
        object.key("S3DataType").string(var_2159.as_str());
    }
    if let Some(var_2160) = &input.s3_uri {
        object.key("S3Uri").string(var_2160);
    }
}

pub fn serialize_structure_monitoring_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringS3Output,
) {
    if let Some(var_2161) = &input.s3_uri {
        object.key("S3Uri").string(var_2161);
    }
    if let Some(var_2162) = &input.local_path {
        object.key("LocalPath").string(var_2162);
    }
    if let Some(var_2163) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2163.as_str());
    }
}

pub fn serialize_structure_custom_image(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomImage,
) {
    if let Some(var_2164) = &input.image_name {
        object.key("ImageName").string(var_2164);
    }
    if let Some(var_2165) = &input.image_version_number {
        object.key("ImageVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2165).into()),
        );
    }
    if let Some(var_2166) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_2166);
    }
}

pub fn serialize_structure_usd(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Usd,
) {
    if input.dollars != 0 {
        object.key("Dollars").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.dollars).into()),
        );
    }
    if input.cents != 0 {
        object.key("Cents").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cents).into()),
        );
    }
    if input.tenth_fractions_of_a_cent != 0 {
        object.key("TenthFractionsOfACent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.tenth_fractions_of_a_cent).into()),
        );
    }
}

pub fn serialize_structure_integer_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) {
    if let Some(var_2167) = &input.name {
        object.key("Name").string(var_2167);
    }
    if let Some(var_2168) = &input.min_value {
        object.key("MinValue").string(var_2168);
    }
    if let Some(var_2169) = &input.max_value {
        object.key("MaxValue").string(var_2169);
    }
    if let Some(var_2170) = &input.scaling_type {
        object.key("ScalingType").string(var_2170.as_str());
    }
}

pub fn serialize_structure_continuous_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) {
    if let Some(var_2171) = &input.name {
        object.key("Name").string(var_2171);
    }
    if let Some(var_2172) = &input.min_value {
        object.key("MinValue").string(var_2172);
    }
    if let Some(var_2173) = &input.max_value {
        object.key("MaxValue").string(var_2173);
    }
    if let Some(var_2174) = &input.scaling_type {
        object.key("ScalingType").string(var_2174.as_str());
    }
}

pub fn serialize_structure_categorical_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) {
    if let Some(var_2175) = &input.name {
        object.key("Name").string(var_2175);
    }
    if let Some(var_2176) = &input.values {
        let mut array_2177 = object.key("Values").start_array();
        for item_2178 in var_2176 {
            {
                array_2177.value().string(item_2178);
            }
        }
        array_2177.finish();
    }
}

pub fn serialize_structure_labeling_job_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobS3DataSource,
) {
    if let Some(var_2179) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_2179);
    }
}

pub fn serialize_structure_labeling_job_sns_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobSnsDataSource,
) {
    if let Some(var_2180) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2180);
    }
}

pub fn serialize_structure_repository_auth_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAuthConfig,
) {
    if let Some(var_2181) = &input.repository_credentials_provider_arn {
        object
            .key("RepositoryCredentialsProviderArn")
            .string(var_2181);
    }
}

pub fn serialize_structure_metrics_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricsSource,
) {
    if let Some(var_2182) = &input.content_type {
        object.key("ContentType").string(var_2182);
    }
    if let Some(var_2183) = &input.content_digest {
        object.key("ContentDigest").string(var_2183);
    }
    if let Some(var_2184) = &input.s3_uri {
        object.key("S3Uri").string(var_2184);
    }
}

pub fn serialize_structure_monitoring_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringBaselineConfig,
) {
    if let Some(var_2185) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2185);
    }
    if let Some(var_2186) = &input.constraints_resource {
        let mut object_2187 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_2187,
            var_2186,
        );
        object_2187.finish();
    }
    if let Some(var_2188) = &input.statistics_resource {
        let mut object_2189 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_statistics_resource(
            &mut object_2189,
            var_2188,
        );
        object_2189.finish();
    }
}

pub fn serialize_structure_monitoring_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringInput,
) {
    if let Some(var_2190) = &input.endpoint_input {
        let mut object_2191 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_2191, var_2190);
        object_2191.finish();
    }
}

pub fn serialize_structure_monitoring_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringAppSpecification,
) {
    if let Some(var_2192) = &input.image_uri {
        object.key("ImageUri").string(var_2192);
    }
    if let Some(var_2193) = &input.container_entrypoint {
        let mut array_2194 = object.key("ContainerEntrypoint").start_array();
        for item_2195 in var_2193 {
            {
                array_2194.value().string(item_2195);
            }
        }
        array_2194.finish();
    }
    if let Some(var_2196) = &input.container_arguments {
        let mut array_2197 = object.key("ContainerArguments").start_array();
        for item_2198 in var_2196 {
            {
                array_2197.value().string(item_2198);
            }
        }
        array_2197.finish();
    }
    if let Some(var_2199) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_2199);
    }
    if let Some(var_2200) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_2200);
    }
}

pub fn serialize_structure_athena_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaDatasetDefinition,
) {
    if let Some(var_2201) = &input.catalog {
        object.key("Catalog").string(var_2201);
    }
    if let Some(var_2202) = &input.database {
        object.key("Database").string(var_2202);
    }
    if let Some(var_2203) = &input.query_string {
        object.key("QueryString").string(var_2203);
    }
    if let Some(var_2204) = &input.work_group {
        object.key("WorkGroup").string(var_2204);
    }
    if let Some(var_2205) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2205);
    }
    if let Some(var_2206) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2206);
    }
    if let Some(var_2207) = &input.output_format {
        object.key("OutputFormat").string(var_2207.as_str());
    }
    if let Some(var_2208) = &input.output_compression {
        object.key("OutputCompression").string(var_2208.as_str());
    }
}

pub fn serialize_structure_redshift_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDatasetDefinition,
) {
    if let Some(var_2209) = &input.cluster_id {
        object.key("ClusterId").string(var_2209);
    }
    if let Some(var_2210) = &input.database {
        object.key("Database").string(var_2210);
    }
    if let Some(var_2211) = &input.db_user {
        object.key("DbUser").string(var_2211);
    }
    if let Some(var_2212) = &input.query_string {
        object.key("QueryString").string(var_2212);
    }
    if let Some(var_2213) = &input.cluster_role_arn {
        object.key("ClusterRoleArn").string(var_2213);
    }
    if let Some(var_2214) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2214);
    }
    if let Some(var_2215) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2215);
    }
    if let Some(var_2216) = &input.output_format {
        object.key("OutputFormat").string(var_2216.as_str());
    }
    if let Some(var_2217) = &input.output_compression {
        object.key("OutputCompression").string(var_2217.as_str());
    }
}

pub fn serialize_structure_processing_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Output,
) {
    if let Some(var_2218) = &input.s3_uri {
        object.key("S3Uri").string(var_2218);
    }
    if let Some(var_2219) = &input.local_path {
        object.key("LocalPath").string(var_2219);
    }
    if let Some(var_2220) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2220.as_str());
    }
}

pub fn serialize_structure_processing_feature_store_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingFeatureStoreOutput,
) {
    if let Some(var_2221) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_2221);
    }
}

pub fn serialize_structure_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSource,
) {
    if let Some(var_2222) = &input.s3_data_type {
        object.key("S3DataType").string(var_2222.as_str());
    }
    if let Some(var_2223) = &input.s3_uri {
        object.key("S3Uri").string(var_2223);
    }
    if let Some(var_2224) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2224.as_str());
    }
    if let Some(var_2225) = &input.attribute_names {
        let mut array_2226 = object.key("AttributeNames").start_array();
        for item_2227 in var_2225 {
            {
                array_2226.value().string(item_2227);
            }
        }
        array_2226.finish();
    }
}

pub fn serialize_structure_file_system_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemDataSource,
) {
    if let Some(var_2228) = &input.file_system_id {
        object.key("FileSystemId").string(var_2228);
    }
    if let Some(var_2229) = &input.file_system_access_mode {
        object.key("FileSystemAccessMode").string(var_2229.as_str());
    }
    if let Some(var_2230) = &input.file_system_type {
        object.key("FileSystemType").string(var_2230.as_str());
    }
    if let Some(var_2231) = &input.directory_path {
        object.key("DirectoryPath").string(var_2231);
    }
}

pub fn serialize_structure_transform_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformS3DataSource,
) {
    if let Some(var_2232) = &input.s3_data_type {
        object.key("S3DataType").string(var_2232.as_str());
    }
    if let Some(var_2233) = &input.s3_uri {
        object.key("S3Uri").string(var_2233);
    }
}

pub fn serialize_structure_traffic_routing_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficRoutingConfig,
) {
    if let Some(var_2234) = &input.r#type {
        object.key("Type").string(var_2234.as_str());
    }
    if let Some(var_2235) = &input.wait_interval_in_seconds {
        object.key("WaitIntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2235).into()),
        );
    }
    if let Some(var_2236) = &input.canary_size {
        let mut object_2237 = object.key("CanarySize").start_object();
        crate::json_ser::serialize_structure_capacity_size(&mut object_2237, var_2236);
        object_2237.finish();
    }
}

pub fn serialize_structure_alarm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Alarm,
) {
    if let Some(var_2238) = &input.alarm_name {
        object.key("AlarmName").string(var_2238);
    }
}

pub fn serialize_structure_integer_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRangeSpecification,
) {
    if let Some(var_2239) = &input.min_value {
        object.key("MinValue").string(var_2239);
    }
    if let Some(var_2240) = &input.max_value {
        object.key("MaxValue").string(var_2240);
    }
}

pub fn serialize_structure_continuous_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRangeSpecification,
) {
    if let Some(var_2241) = &input.min_value {
        object.key("MinValue").string(var_2241);
    }
    if let Some(var_2242) = &input.max_value {
        object.key("MaxValue").string(var_2242);
    }
}

pub fn serialize_structure_categorical_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRangeSpecification,
) {
    if let Some(var_2243) = &input.values {
        let mut array_2244 = object.key("Values").start_array();
        for item_2245 in var_2243 {
            {
                array_2244.value().string(item_2245);
            }
        }
        array_2244.finish();
    }
}

pub fn serialize_structure_capacity_size(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacitySize,
) {
    if let Some(var_2246) = &input.r#type {
        object.key("Type").string(var_2246.as_str());
    }
    if let Some(var_2247) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2247).into()),
        );
    }
}
