// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_algorithm_output_correct_errors(
    mut builder: crate::operation::create_algorithm::builders::CreateAlgorithmOutputBuilder,
) -> crate::operation::create_algorithm::builders::CreateAlgorithmOutputBuilder {
    if builder.algorithm_arn.is_none() {
        builder.algorithm_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_auto_ml_job_output_correct_errors(
    mut builder: crate::operation::create_auto_ml_job::builders::CreateAutoMlJobOutputBuilder,
) -> crate::operation::create_auto_ml_job::builders::CreateAutoMlJobOutputBuilder {
    if builder.auto_ml_job_arn.is_none() {
        builder.auto_ml_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_auto_ml_job_v2_output_correct_errors(
    mut builder: crate::operation::create_auto_ml_job_v2::builders::CreateAutoMlJobV2OutputBuilder,
) -> crate::operation::create_auto_ml_job_v2::builders::CreateAutoMlJobV2OutputBuilder {
    if builder.auto_ml_job_arn.is_none() {
        builder.auto_ml_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_code_repository_output_correct_errors(
    mut builder: crate::operation::create_code_repository::builders::CreateCodeRepositoryOutputBuilder,
) -> crate::operation::create_code_repository::builders::CreateCodeRepositoryOutputBuilder {
    if builder.code_repository_arn.is_none() {
        builder.code_repository_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_compilation_job_output_correct_errors(
    mut builder: crate::operation::create_compilation_job::builders::CreateCompilationJobOutputBuilder,
) -> crate::operation::create_compilation_job::builders::CreateCompilationJobOutputBuilder {
    if builder.compilation_job_arn.is_none() {
        builder.compilation_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_data_quality_job_definition_output_correct_errors(
    mut builder: crate::operation::create_data_quality_job_definition::builders::CreateDataQualityJobDefinitionOutputBuilder,
) -> crate::operation::create_data_quality_job_definition::builders::CreateDataQualityJobDefinitionOutputBuilder {
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_edge_deployment_plan_output_correct_errors(
    mut builder: crate::operation::create_edge_deployment_plan::builders::CreateEdgeDeploymentPlanOutputBuilder,
) -> crate::operation::create_edge_deployment_plan::builders::CreateEdgeDeploymentPlanOutputBuilder {
    if builder.edge_deployment_plan_arn.is_none() {
        builder.edge_deployment_plan_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_endpoint_output_correct_errors(
    mut builder: crate::operation::create_endpoint::builders::CreateEndpointOutputBuilder,
) -> crate::operation::create_endpoint::builders::CreateEndpointOutputBuilder {
    if builder.endpoint_arn.is_none() {
        builder.endpoint_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_endpoint_config_output_correct_errors(
    mut builder: crate::operation::create_endpoint_config::builders::CreateEndpointConfigOutputBuilder,
) -> crate::operation::create_endpoint_config::builders::CreateEndpointConfigOutputBuilder {
    if builder.endpoint_config_arn.is_none() {
        builder.endpoint_config_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_feature_group_output_correct_errors(
    mut builder: crate::operation::create_feature_group::builders::CreateFeatureGroupOutputBuilder,
) -> crate::operation::create_feature_group::builders::CreateFeatureGroupOutputBuilder {
    if builder.feature_group_arn.is_none() {
        builder.feature_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_flow_definition_output_correct_errors(
    mut builder: crate::operation::create_flow_definition::builders::CreateFlowDefinitionOutputBuilder,
) -> crate::operation::create_flow_definition::builders::CreateFlowDefinitionOutputBuilder {
    if builder.flow_definition_arn.is_none() {
        builder.flow_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_hub_output_correct_errors(
    mut builder: crate::operation::create_hub::builders::CreateHubOutputBuilder,
) -> crate::operation::create_hub::builders::CreateHubOutputBuilder {
    if builder.hub_arn.is_none() {
        builder.hub_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_human_task_ui_output_correct_errors(
    mut builder: crate::operation::create_human_task_ui::builders::CreateHumanTaskUiOutputBuilder,
) -> crate::operation::create_human_task_ui::builders::CreateHumanTaskUiOutputBuilder {
    if builder.human_task_ui_arn.is_none() {
        builder.human_task_ui_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_hyper_parameter_tuning_job_output_correct_errors(
    mut builder: crate::operation::create_hyper_parameter_tuning_job::builders::CreateHyperParameterTuningJobOutputBuilder,
) -> crate::operation::create_hyper_parameter_tuning_job::builders::CreateHyperParameterTuningJobOutputBuilder {
    if builder.hyper_parameter_tuning_job_arn.is_none() {
        builder.hyper_parameter_tuning_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_inference_experiment_output_correct_errors(
    mut builder: crate::operation::create_inference_experiment::builders::CreateInferenceExperimentOutputBuilder,
) -> crate::operation::create_inference_experiment::builders::CreateInferenceExperimentOutputBuilder {
    if builder.inference_experiment_arn.is_none() {
        builder.inference_experiment_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_inference_recommendations_job_output_correct_errors(
    mut builder: crate::operation::create_inference_recommendations_job::builders::CreateInferenceRecommendationsJobOutputBuilder,
) -> crate::operation::create_inference_recommendations_job::builders::CreateInferenceRecommendationsJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_labeling_job_output_correct_errors(
    mut builder: crate::operation::create_labeling_job::builders::CreateLabelingJobOutputBuilder,
) -> crate::operation::create_labeling_job::builders::CreateLabelingJobOutputBuilder {
    if builder.labeling_job_arn.is_none() {
        builder.labeling_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_output_correct_errors(
    mut builder: crate::operation::create_model::builders::CreateModelOutputBuilder,
) -> crate::operation::create_model::builders::CreateModelOutputBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_bias_job_definition_output_correct_errors(
    mut builder: crate::operation::create_model_bias_job_definition::builders::CreateModelBiasJobDefinitionOutputBuilder,
) -> crate::operation::create_model_bias_job_definition::builders::CreateModelBiasJobDefinitionOutputBuilder {
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_card_output_correct_errors(
    mut builder: crate::operation::create_model_card::builders::CreateModelCardOutputBuilder,
) -> crate::operation::create_model_card::builders::CreateModelCardOutputBuilder {
    if builder.model_card_arn.is_none() {
        builder.model_card_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_card_export_job_output_correct_errors(
    mut builder: crate::operation::create_model_card_export_job::builders::CreateModelCardExportJobOutputBuilder,
) -> crate::operation::create_model_card_export_job::builders::CreateModelCardExportJobOutputBuilder {
    if builder.model_card_export_job_arn.is_none() {
        builder.model_card_export_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_explainability_job_definition_output_correct_errors(
    mut builder: crate::operation::create_model_explainability_job_definition::builders::CreateModelExplainabilityJobDefinitionOutputBuilder,
) -> crate::operation::create_model_explainability_job_definition::builders::CreateModelExplainabilityJobDefinitionOutputBuilder {
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_package_output_correct_errors(
    mut builder: crate::operation::create_model_package::builders::CreateModelPackageOutputBuilder,
) -> crate::operation::create_model_package::builders::CreateModelPackageOutputBuilder {
    if builder.model_package_arn.is_none() {
        builder.model_package_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_package_group_output_correct_errors(
    mut builder: crate::operation::create_model_package_group::builders::CreateModelPackageGroupOutputBuilder,
) -> crate::operation::create_model_package_group::builders::CreateModelPackageGroupOutputBuilder {
    if builder.model_package_group_arn.is_none() {
        builder.model_package_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_quality_job_definition_output_correct_errors(
    mut builder: crate::operation::create_model_quality_job_definition::builders::CreateModelQualityJobDefinitionOutputBuilder,
) -> crate::operation::create_model_quality_job_definition::builders::CreateModelQualityJobDefinitionOutputBuilder {
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_monitoring_schedule_output_correct_errors(
    mut builder: crate::operation::create_monitoring_schedule::builders::CreateMonitoringScheduleOutputBuilder,
) -> crate::operation::create_monitoring_schedule::builders::CreateMonitoringScheduleOutputBuilder {
    if builder.monitoring_schedule_arn.is_none() {
        builder.monitoring_schedule_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_processing_job_output_correct_errors(
    mut builder: crate::operation::create_processing_job::builders::CreateProcessingJobOutputBuilder,
) -> crate::operation::create_processing_job::builders::CreateProcessingJobOutputBuilder {
    if builder.processing_job_arn.is_none() {
        builder.processing_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_project_output_correct_errors(
    mut builder: crate::operation::create_project::builders::CreateProjectOutputBuilder,
) -> crate::operation::create_project::builders::CreateProjectOutputBuilder {
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_training_job_output_correct_errors(
    mut builder: crate::operation::create_training_job::builders::CreateTrainingJobOutputBuilder,
) -> crate::operation::create_training_job::builders::CreateTrainingJobOutputBuilder {
    if builder.training_job_arn.is_none() {
        builder.training_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_transform_job_output_correct_errors(
    mut builder: crate::operation::create_transform_job::builders::CreateTransformJobOutputBuilder,
) -> crate::operation::create_transform_job::builders::CreateTransformJobOutputBuilder {
    if builder.transform_job_arn.is_none() {
        builder.transform_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_workforce_output_correct_errors(
    mut builder: crate::operation::create_workforce::builders::CreateWorkforceOutputBuilder,
) -> crate::operation::create_workforce::builders::CreateWorkforceOutputBuilder {
    if builder.workforce_arn.is_none() {
        builder.workforce_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_inference_experiment_output_correct_errors(
    mut builder: crate::operation::delete_inference_experiment::builders::DeleteInferenceExperimentOutputBuilder,
) -> crate::operation::delete_inference_experiment::builders::DeleteInferenceExperimentOutputBuilder {
    if builder.inference_experiment_arn.is_none() {
        builder.inference_experiment_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_workteam_output_correct_errors(
    mut builder: crate::operation::delete_workteam::builders::DeleteWorkteamOutputBuilder,
) -> crate::operation::delete_workteam::builders::DeleteWorkteamOutputBuilder {
    if builder.success.is_none() {
        builder.success = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_algorithm_output_correct_errors(
    mut builder: crate::operation::describe_algorithm::builders::DescribeAlgorithmOutputBuilder,
) -> crate::operation::describe_algorithm::builders::DescribeAlgorithmOutputBuilder {
    if builder.algorithm_name.is_none() {
        builder.algorithm_name = Some(Default::default())
    }
    if builder.algorithm_arn.is_none() {
        builder.algorithm_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.training_specification.is_none() {
        builder.training_specification = {
            let builder = crate::types::builders::TrainingSpecificationBuilder::default();
            Some(crate::serde_util::training_specification_correct_errors(builder).build())
        }
    }
    if builder.algorithm_status.is_none() {
        builder.algorithm_status = "no value was set".parse::<crate::types::AlgorithmStatus>().ok()
    }
    if builder.algorithm_status_details.is_none() {
        builder.algorithm_status_details = {
            let builder = crate::types::builders::AlgorithmStatusDetailsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_auto_ml_job_output_correct_errors(
    mut builder: crate::operation::describe_auto_ml_job::builders::DescribeAutoMlJobOutputBuilder,
) -> crate::operation::describe_auto_ml_job::builders::DescribeAutoMlJobOutputBuilder {
    if builder.auto_ml_job_name.is_none() {
        builder.auto_ml_job_name = Some(Default::default())
    }
    if builder.auto_ml_job_arn.is_none() {
        builder.auto_ml_job_arn = Some(Default::default())
    }
    if builder.input_data_config.is_none() {
        builder.input_data_config = Some(Default::default())
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::AutoMlOutputDataConfigBuilder::default();
            Some(crate::serde_util::auto_ml_output_data_config_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.auto_ml_job_status.is_none() {
        builder.auto_ml_job_status = "no value was set".parse::<crate::types::AutoMlJobStatus>().ok()
    }
    if builder.auto_ml_job_secondary_status.is_none() {
        builder.auto_ml_job_secondary_status = "no value was set".parse::<crate::types::AutoMlJobSecondaryStatus>().ok()
    }
    builder
}

pub(crate) fn describe_auto_ml_job_v2_output_correct_errors(
    mut builder: crate::operation::describe_auto_ml_job_v2::builders::DescribeAutoMlJobV2OutputBuilder,
) -> crate::operation::describe_auto_ml_job_v2::builders::DescribeAutoMlJobV2OutputBuilder {
    if builder.auto_ml_job_name.is_none() {
        builder.auto_ml_job_name = Some(Default::default())
    }
    if builder.auto_ml_job_arn.is_none() {
        builder.auto_ml_job_arn = Some(Default::default())
    }
    if builder.auto_ml_job_input_data_config.is_none() {
        builder.auto_ml_job_input_data_config = Some(Default::default())
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::AutoMlOutputDataConfigBuilder::default();
            Some(crate::serde_util::auto_ml_output_data_config_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.auto_ml_job_status.is_none() {
        builder.auto_ml_job_status = "no value was set".parse::<crate::types::AutoMlJobStatus>().ok()
    }
    if builder.auto_ml_job_secondary_status.is_none() {
        builder.auto_ml_job_secondary_status = "no value was set".parse::<crate::types::AutoMlJobSecondaryStatus>().ok()
    }
    builder
}

pub(crate) fn describe_code_repository_output_correct_errors(
    mut builder: crate::operation::describe_code_repository::builders::DescribeCodeRepositoryOutputBuilder,
) -> crate::operation::describe_code_repository::builders::DescribeCodeRepositoryOutputBuilder {
    if builder.code_repository_name.is_none() {
        builder.code_repository_name = Some(Default::default())
    }
    if builder.code_repository_arn.is_none() {
        builder.code_repository_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_compilation_job_output_correct_errors(
    mut builder: crate::operation::describe_compilation_job::builders::DescribeCompilationJobOutputBuilder,
) -> crate::operation::describe_compilation_job::builders::DescribeCompilationJobOutputBuilder {
    if builder.compilation_job_name.is_none() {
        builder.compilation_job_name = Some(Default::default())
    }
    if builder.compilation_job_arn.is_none() {
        builder.compilation_job_arn = Some(Default::default())
    }
    if builder.compilation_job_status.is_none() {
        builder.compilation_job_status = "no value was set".parse::<crate::types::CompilationJobStatus>().ok()
    }
    if builder.stopping_condition.is_none() {
        builder.stopping_condition = {
            let builder = crate::types::builders::StoppingConditionBuilder::default();
            Some(builder.build())
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.failure_reason.is_none() {
        builder.failure_reason = Some(Default::default())
    }
    if builder.model_artifacts.is_none() {
        builder.model_artifacts = {
            let builder = crate::types::builders::ModelArtifactsBuilder::default();
            Some(crate::serde_util::model_artifacts_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.input_config.is_none() {
        builder.input_config = {
            let builder = crate::types::builders::InputConfigBuilder::default();
            Some(crate::serde_util::input_config_correct_errors(builder).build())
        }
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::OutputConfigBuilder::default();
            Some(crate::serde_util::output_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn describe_data_quality_job_definition_output_correct_errors(
    mut builder: crate::operation::describe_data_quality_job_definition::builders::DescribeDataQualityJobDefinitionOutputBuilder,
) -> crate::operation::describe_data_quality_job_definition::builders::DescribeDataQualityJobDefinitionOutputBuilder {
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    if builder.job_definition_name.is_none() {
        builder.job_definition_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.data_quality_app_specification.is_none() {
        builder.data_quality_app_specification = {
            let builder = crate::types::builders::DataQualityAppSpecificationBuilder::default();
            Some(crate::serde_util::data_quality_app_specification_correct_errors(builder).build())
        }
    }
    if builder.data_quality_job_input.is_none() {
        builder.data_quality_job_input = {
            let builder = crate::types::builders::DataQualityJobInputBuilder::default();
            Some(builder.build())
        }
    }
    if builder.data_quality_job_output_config.is_none() {
        builder.data_quality_job_output_config = {
            let builder = crate::types::builders::MonitoringOutputConfigBuilder::default();
            Some(crate::serde_util::monitoring_output_config_correct_errors(builder).build())
        }
    }
    if builder.job_resources.is_none() {
        builder.job_resources = {
            let builder = crate::types::builders::MonitoringResourcesBuilder::default();
            Some(crate::serde_util::monitoring_resources_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_device_output_correct_errors(
    mut builder: crate::operation::describe_device::builders::DescribeDeviceOutputBuilder,
) -> crate::operation::describe_device::builders::DescribeDeviceOutputBuilder {
    if builder.device_name.is_none() {
        builder.device_name = Some(Default::default())
    }
    if builder.device_fleet_name.is_none() {
        builder.device_fleet_name = Some(Default::default())
    }
    if builder.registration_time.is_none() {
        builder.registration_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_device_fleet_output_correct_errors(
    mut builder: crate::operation::describe_device_fleet::builders::DescribeDeviceFleetOutputBuilder,
) -> crate::operation::describe_device_fleet::builders::DescribeDeviceFleetOutputBuilder {
    if builder.device_fleet_name.is_none() {
        builder.device_fleet_name = Some(Default::default())
    }
    if builder.device_fleet_arn.is_none() {
        builder.device_fleet_arn = Some(Default::default())
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::EdgeOutputConfigBuilder::default();
            Some(crate::serde_util::edge_output_config_correct_errors(builder).build())
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_edge_deployment_plan_output_correct_errors(
    mut builder: crate::operation::describe_edge_deployment_plan::builders::DescribeEdgeDeploymentPlanOutputBuilder,
) -> crate::operation::describe_edge_deployment_plan::builders::DescribeEdgeDeploymentPlanOutputBuilder {
    if builder.edge_deployment_plan_arn.is_none() {
        builder.edge_deployment_plan_arn = Some(Default::default())
    }
    if builder.edge_deployment_plan_name.is_none() {
        builder.edge_deployment_plan_name = Some(Default::default())
    }
    if builder.model_configs.is_none() {
        builder.model_configs = Some(Default::default())
    }
    if builder.device_fleet_name.is_none() {
        builder.device_fleet_name = Some(Default::default())
    }
    if builder.stages.is_none() {
        builder.stages = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_edge_packaging_job_output_correct_errors(
    mut builder: crate::operation::describe_edge_packaging_job::builders::DescribeEdgePackagingJobOutputBuilder,
) -> crate::operation::describe_edge_packaging_job::builders::DescribeEdgePackagingJobOutputBuilder {
    if builder.edge_packaging_job_arn.is_none() {
        builder.edge_packaging_job_arn = Some(Default::default())
    }
    if builder.edge_packaging_job_name.is_none() {
        builder.edge_packaging_job_name = Some(Default::default())
    }
    if builder.edge_packaging_job_status.is_none() {
        builder.edge_packaging_job_status = "no value was set".parse::<crate::types::EdgePackagingJobStatus>().ok()
    }
    builder
}

pub(crate) fn describe_endpoint_output_correct_errors(
    mut builder: crate::operation::describe_endpoint::builders::DescribeEndpointOutputBuilder,
) -> crate::operation::describe_endpoint::builders::DescribeEndpointOutputBuilder {
    if builder.endpoint_name.is_none() {
        builder.endpoint_name = Some(Default::default())
    }
    if builder.endpoint_arn.is_none() {
        builder.endpoint_arn = Some(Default::default())
    }
    if builder.endpoint_config_name.is_none() {
        builder.endpoint_config_name = Some(Default::default())
    }
    if builder.endpoint_status.is_none() {
        builder.endpoint_status = "no value was set".parse::<crate::types::EndpointStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_endpoint_config_output_correct_errors(
    mut builder: crate::operation::describe_endpoint_config::builders::DescribeEndpointConfigOutputBuilder,
) -> crate::operation::describe_endpoint_config::builders::DescribeEndpointConfigOutputBuilder {
    if builder.endpoint_config_name.is_none() {
        builder.endpoint_config_name = Some(Default::default())
    }
    if builder.endpoint_config_arn.is_none() {
        builder.endpoint_config_arn = Some(Default::default())
    }
    if builder.production_variants.is_none() {
        builder.production_variants = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_feature_group_output_correct_errors(
    mut builder: crate::operation::describe_feature_group::builders::DescribeFeatureGroupOutputBuilder,
) -> crate::operation::describe_feature_group::builders::DescribeFeatureGroupOutputBuilder {
    if builder.feature_group_arn.is_none() {
        builder.feature_group_arn = Some(Default::default())
    }
    if builder.feature_group_name.is_none() {
        builder.feature_group_name = Some(Default::default())
    }
    if builder.record_identifier_feature_name.is_none() {
        builder.record_identifier_feature_name = Some(Default::default())
    }
    if builder.event_time_feature_name.is_none() {
        builder.event_time_feature_name = Some(Default::default())
    }
    if builder.feature_definitions.is_none() {
        builder.feature_definitions = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.next_token.is_none() {
        builder.next_token = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_feature_metadata_output_correct_errors(
    mut builder: crate::operation::describe_feature_metadata::builders::DescribeFeatureMetadataOutputBuilder,
) -> crate::operation::describe_feature_metadata::builders::DescribeFeatureMetadataOutputBuilder {
    if builder.feature_group_arn.is_none() {
        builder.feature_group_arn = Some(Default::default())
    }
    if builder.feature_group_name.is_none() {
        builder.feature_group_name = Some(Default::default())
    }
    if builder.feature_name.is_none() {
        builder.feature_name = Some(Default::default())
    }
    if builder.feature_type.is_none() {
        builder.feature_type = "no value was set".parse::<crate::types::FeatureType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_flow_definition_output_correct_errors(
    mut builder: crate::operation::describe_flow_definition::builders::DescribeFlowDefinitionOutputBuilder,
) -> crate::operation::describe_flow_definition::builders::DescribeFlowDefinitionOutputBuilder {
    if builder.flow_definition_arn.is_none() {
        builder.flow_definition_arn = Some(Default::default())
    }
    if builder.flow_definition_name.is_none() {
        builder.flow_definition_name = Some(Default::default())
    }
    if builder.flow_definition_status.is_none() {
        builder.flow_definition_status = "no value was set".parse::<crate::types::FlowDefinitionStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.human_loop_config.is_none() {
        builder.human_loop_config = {
            let builder = crate::types::builders::HumanLoopConfigBuilder::default();
            Some(crate::serde_util::human_loop_config_correct_errors(builder).build())
        }
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::FlowDefinitionOutputConfigBuilder::default();
            Some(crate::serde_util::flow_definition_output_config_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_hub_output_correct_errors(
    mut builder: crate::operation::describe_hub::builders::DescribeHubOutputBuilder,
) -> crate::operation::describe_hub::builders::DescribeHubOutputBuilder {
    if builder.hub_name.is_none() {
        builder.hub_name = Some(Default::default())
    }
    if builder.hub_arn.is_none() {
        builder.hub_arn = Some(Default::default())
    }
    if builder.hub_status.is_none() {
        builder.hub_status = "no value was set".parse::<crate::types::HubStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_hub_content_output_correct_errors(
    mut builder: crate::operation::describe_hub_content::builders::DescribeHubContentOutputBuilder,
) -> crate::operation::describe_hub_content::builders::DescribeHubContentOutputBuilder {
    if builder.hub_content_name.is_none() {
        builder.hub_content_name = Some(Default::default())
    }
    if builder.hub_content_arn.is_none() {
        builder.hub_content_arn = Some(Default::default())
    }
    if builder.hub_content_version.is_none() {
        builder.hub_content_version = Some(Default::default())
    }
    if builder.hub_content_type.is_none() {
        builder.hub_content_type = "no value was set".parse::<crate::types::HubContentType>().ok()
    }
    if builder.document_schema_version.is_none() {
        builder.document_schema_version = Some(Default::default())
    }
    if builder.hub_name.is_none() {
        builder.hub_name = Some(Default::default())
    }
    if builder.hub_arn.is_none() {
        builder.hub_arn = Some(Default::default())
    }
    if builder.hub_content_document.is_none() {
        builder.hub_content_document = Some(Default::default())
    }
    if builder.hub_content_status.is_none() {
        builder.hub_content_status = "no value was set".parse::<crate::types::HubContentStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_human_task_ui_output_correct_errors(
    mut builder: crate::operation::describe_human_task_ui::builders::DescribeHumanTaskUiOutputBuilder,
) -> crate::operation::describe_human_task_ui::builders::DescribeHumanTaskUiOutputBuilder {
    if builder.human_task_ui_arn.is_none() {
        builder.human_task_ui_arn = Some(Default::default())
    }
    if builder.human_task_ui_name.is_none() {
        builder.human_task_ui_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.ui_template.is_none() {
        builder.ui_template = {
            let builder = crate::types::builders::UiTemplateInfoBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_hyper_parameter_tuning_job_output_correct_errors(
    mut builder: crate::operation::describe_hyper_parameter_tuning_job::builders::DescribeHyperParameterTuningJobOutputBuilder,
) -> crate::operation::describe_hyper_parameter_tuning_job::builders::DescribeHyperParameterTuningJobOutputBuilder {
    if builder.hyper_parameter_tuning_job_name.is_none() {
        builder.hyper_parameter_tuning_job_name = Some(Default::default())
    }
    if builder.hyper_parameter_tuning_job_arn.is_none() {
        builder.hyper_parameter_tuning_job_arn = Some(Default::default())
    }
    if builder.hyper_parameter_tuning_job_config.is_none() {
        builder.hyper_parameter_tuning_job_config = {
            let builder = crate::types::builders::HyperParameterTuningJobConfigBuilder::default();
            Some(crate::serde_util::hyper_parameter_tuning_job_config_correct_errors(builder).build())
        }
    }
    if builder.hyper_parameter_tuning_job_status.is_none() {
        builder.hyper_parameter_tuning_job_status = "no value was set".parse::<crate::types::HyperParameterTuningJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.training_job_status_counters.is_none() {
        builder.training_job_status_counters = {
            let builder = crate::types::builders::TrainingJobStatusCountersBuilder::default();
            Some(builder.build())
        }
    }
    if builder.objective_status_counters.is_none() {
        builder.objective_status_counters = {
            let builder = crate::types::builders::ObjectiveStatusCountersBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_inference_experiment_output_correct_errors(
    mut builder: crate::operation::describe_inference_experiment::builders::DescribeInferenceExperimentOutputBuilder,
) -> crate::operation::describe_inference_experiment::builders::DescribeInferenceExperimentOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::InferenceExperimentType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::InferenceExperimentStatus>().ok()
    }
    if builder.endpoint_metadata.is_none() {
        builder.endpoint_metadata = {
            let builder = crate::types::builders::EndpointMetadataBuilder::default();
            Some(crate::serde_util::endpoint_metadata_correct_errors(builder).build())
        }
    }
    if builder.model_variants.is_none() {
        builder.model_variants = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_inference_recommendations_job_output_correct_errors(
    mut builder: crate::operation::describe_inference_recommendations_job::builders::DescribeInferenceRecommendationsJobOutputBuilder,
) -> crate::operation::describe_inference_recommendations_job::builders::DescribeInferenceRecommendationsJobOutputBuilder {
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.job_type.is_none() {
        builder.job_type = "no value was set".parse::<crate::types::RecommendationJobType>().ok()
    }
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RecommendationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.input_config.is_none() {
        builder.input_config = {
            let builder = crate::types::builders::RecommendationJobInputConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_labeling_job_output_correct_errors(
    mut builder: crate::operation::describe_labeling_job::builders::DescribeLabelingJobOutputBuilder,
) -> crate::operation::describe_labeling_job::builders::DescribeLabelingJobOutputBuilder {
    if builder.labeling_job_status.is_none() {
        builder.labeling_job_status = "no value was set".parse::<crate::types::LabelingJobStatus>().ok()
    }
    if builder.label_counters.is_none() {
        builder.label_counters = {
            let builder = crate::types::builders::LabelCountersBuilder::default();
            Some(builder.build())
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.job_reference_code.is_none() {
        builder.job_reference_code = Some(Default::default())
    }
    if builder.labeling_job_name.is_none() {
        builder.labeling_job_name = Some(Default::default())
    }
    if builder.labeling_job_arn.is_none() {
        builder.labeling_job_arn = Some(Default::default())
    }
    if builder.input_config.is_none() {
        builder.input_config = {
            let builder = crate::types::builders::LabelingJobInputConfigBuilder::default();
            Some(crate::serde_util::labeling_job_input_config_correct_errors(builder).build())
        }
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::LabelingJobOutputConfigBuilder::default();
            Some(crate::serde_util::labeling_job_output_config_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.human_task_config.is_none() {
        builder.human_task_config = {
            let builder = crate::types::builders::HumanTaskConfigBuilder::default();
            Some(crate::serde_util::human_task_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn describe_model_output_correct_errors(
    mut builder: crate::operation::describe_model::builders::DescribeModelOutputBuilder,
) -> crate::operation::describe_model::builders::DescribeModelOutputBuilder {
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_model_bias_job_definition_output_correct_errors(
    mut builder: crate::operation::describe_model_bias_job_definition::builders::DescribeModelBiasJobDefinitionOutputBuilder,
) -> crate::operation::describe_model_bias_job_definition::builders::DescribeModelBiasJobDefinitionOutputBuilder {
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    if builder.job_definition_name.is_none() {
        builder.job_definition_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.model_bias_app_specification.is_none() {
        builder.model_bias_app_specification = {
            let builder = crate::types::builders::ModelBiasAppSpecificationBuilder::default();
            Some(crate::serde_util::model_bias_app_specification_correct_errors(builder).build())
        }
    }
    if builder.model_bias_job_input.is_none() {
        builder.model_bias_job_input = {
            let builder = crate::types::builders::ModelBiasJobInputBuilder::default();
            Some(crate::serde_util::model_bias_job_input_correct_errors(builder).build())
        }
    }
    if builder.model_bias_job_output_config.is_none() {
        builder.model_bias_job_output_config = {
            let builder = crate::types::builders::MonitoringOutputConfigBuilder::default();
            Some(crate::serde_util::monitoring_output_config_correct_errors(builder).build())
        }
    }
    if builder.job_resources.is_none() {
        builder.job_resources = {
            let builder = crate::types::builders::MonitoringResourcesBuilder::default();
            Some(crate::serde_util::monitoring_resources_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_model_card_output_correct_errors(
    mut builder: crate::operation::describe_model_card::builders::DescribeModelCardOutputBuilder,
) -> crate::operation::describe_model_card::builders::DescribeModelCardOutputBuilder {
    if builder.model_card_arn.is_none() {
        builder.model_card_arn = Some(Default::default())
    }
    if builder.model_card_name.is_none() {
        builder.model_card_name = Some(Default::default())
    }
    if builder.model_card_version.is_none() {
        builder.model_card_version = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    if builder.model_card_status.is_none() {
        builder.model_card_status = "no value was set".parse::<crate::types::ModelCardStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = {
            let builder = crate::types::builders::UserContextBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_model_card_export_job_output_correct_errors(
    mut builder: crate::operation::describe_model_card_export_job::builders::DescribeModelCardExportJobOutputBuilder,
) -> crate::operation::describe_model_card_export_job::builders::DescribeModelCardExportJobOutputBuilder {
    if builder.model_card_export_job_name.is_none() {
        builder.model_card_export_job_name = Some(Default::default())
    }
    if builder.model_card_export_job_arn.is_none() {
        builder.model_card_export_job_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ModelCardExportJobStatus>().ok()
    }
    if builder.model_card_name.is_none() {
        builder.model_card_name = Some(Default::default())
    }
    if builder.model_card_version.is_none() {
        builder.model_card_version = Some(Default::default())
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::ModelCardExportOutputConfigBuilder::default();
            Some(crate::serde_util::model_card_export_output_config_correct_errors(builder).build())
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_model_explainability_job_definition_output_correct_errors(
    mut builder: crate::operation::describe_model_explainability_job_definition::builders::DescribeModelExplainabilityJobDefinitionOutputBuilder,
) -> crate::operation::describe_model_explainability_job_definition::builders::DescribeModelExplainabilityJobDefinitionOutputBuilder {
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    if builder.job_definition_name.is_none() {
        builder.job_definition_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.model_explainability_app_specification.is_none() {
        builder.model_explainability_app_specification = {
            let builder = crate::types::builders::ModelExplainabilityAppSpecificationBuilder::default();
            Some(crate::serde_util::model_explainability_app_specification_correct_errors(builder).build())
        }
    }
    if builder.model_explainability_job_input.is_none() {
        builder.model_explainability_job_input = {
            let builder = crate::types::builders::ModelExplainabilityJobInputBuilder::default();
            Some(builder.build())
        }
    }
    if builder.model_explainability_job_output_config.is_none() {
        builder.model_explainability_job_output_config = {
            let builder = crate::types::builders::MonitoringOutputConfigBuilder::default();
            Some(crate::serde_util::monitoring_output_config_correct_errors(builder).build())
        }
    }
    if builder.job_resources.is_none() {
        builder.job_resources = {
            let builder = crate::types::builders::MonitoringResourcesBuilder::default();
            Some(crate::serde_util::monitoring_resources_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_model_package_output_correct_errors(
    mut builder: crate::operation::describe_model_package::builders::DescribeModelPackageOutputBuilder,
) -> crate::operation::describe_model_package::builders::DescribeModelPackageOutputBuilder {
    if builder.model_package_name.is_none() {
        builder.model_package_name = Some(Default::default())
    }
    if builder.model_package_arn.is_none() {
        builder.model_package_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.model_package_status.is_none() {
        builder.model_package_status = "no value was set".parse::<crate::types::ModelPackageStatus>().ok()
    }
    if builder.model_package_status_details.is_none() {
        builder.model_package_status_details = {
            let builder = crate::types::builders::ModelPackageStatusDetailsBuilder::default();
            Some(crate::serde_util::model_package_status_details_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn describe_model_package_group_output_correct_errors(
    mut builder: crate::operation::describe_model_package_group::builders::DescribeModelPackageGroupOutputBuilder,
) -> crate::operation::describe_model_package_group::builders::DescribeModelPackageGroupOutputBuilder {
    if builder.model_package_group_name.is_none() {
        builder.model_package_group_name = Some(Default::default())
    }
    if builder.model_package_group_arn.is_none() {
        builder.model_package_group_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = {
            let builder = crate::types::builders::UserContextBuilder::default();
            Some(builder.build())
        }
    }
    if builder.model_package_group_status.is_none() {
        builder.model_package_group_status = "no value was set".parse::<crate::types::ModelPackageGroupStatus>().ok()
    }
    builder
}

pub(crate) fn describe_model_quality_job_definition_output_correct_errors(
    mut builder: crate::operation::describe_model_quality_job_definition::builders::DescribeModelQualityJobDefinitionOutputBuilder,
) -> crate::operation::describe_model_quality_job_definition::builders::DescribeModelQualityJobDefinitionOutputBuilder {
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    if builder.job_definition_name.is_none() {
        builder.job_definition_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.model_quality_app_specification.is_none() {
        builder.model_quality_app_specification = {
            let builder = crate::types::builders::ModelQualityAppSpecificationBuilder::default();
            Some(crate::serde_util::model_quality_app_specification_correct_errors(builder).build())
        }
    }
    if builder.model_quality_job_input.is_none() {
        builder.model_quality_job_input = {
            let builder = crate::types::builders::ModelQualityJobInputBuilder::default();
            Some(crate::serde_util::model_quality_job_input_correct_errors(builder).build())
        }
    }
    if builder.model_quality_job_output_config.is_none() {
        builder.model_quality_job_output_config = {
            let builder = crate::types::builders::MonitoringOutputConfigBuilder::default();
            Some(crate::serde_util::monitoring_output_config_correct_errors(builder).build())
        }
    }
    if builder.job_resources.is_none() {
        builder.job_resources = {
            let builder = crate::types::builders::MonitoringResourcesBuilder::default();
            Some(crate::serde_util::monitoring_resources_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_monitoring_schedule_output_correct_errors(
    mut builder: crate::operation::describe_monitoring_schedule::builders::DescribeMonitoringScheduleOutputBuilder,
) -> crate::operation::describe_monitoring_schedule::builders::DescribeMonitoringScheduleOutputBuilder {
    if builder.monitoring_schedule_arn.is_none() {
        builder.monitoring_schedule_arn = Some(Default::default())
    }
    if builder.monitoring_schedule_name.is_none() {
        builder.monitoring_schedule_name = Some(Default::default())
    }
    if builder.monitoring_schedule_status.is_none() {
        builder.monitoring_schedule_status = "no value was set".parse::<crate::types::ScheduleStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.monitoring_schedule_config.is_none() {
        builder.monitoring_schedule_config = {
            let builder = crate::types::builders::MonitoringScheduleConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_processing_job_output_correct_errors(
    mut builder: crate::operation::describe_processing_job::builders::DescribeProcessingJobOutputBuilder,
) -> crate::operation::describe_processing_job::builders::DescribeProcessingJobOutputBuilder {
    if builder.processing_job_name.is_none() {
        builder.processing_job_name = Some(Default::default())
    }
    if builder.processing_resources.is_none() {
        builder.processing_resources = {
            let builder = crate::types::builders::ProcessingResourcesBuilder::default();
            Some(crate::serde_util::processing_resources_correct_errors(builder).build())
        }
    }
    if builder.app_specification.is_none() {
        builder.app_specification = {
            let builder = crate::types::builders::AppSpecificationBuilder::default();
            Some(crate::serde_util::app_specification_correct_errors(builder).build())
        }
    }
    if builder.processing_job_arn.is_none() {
        builder.processing_job_arn = Some(Default::default())
    }
    if builder.processing_job_status.is_none() {
        builder.processing_job_status = "no value was set".parse::<crate::types::ProcessingJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_project_output_correct_errors(
    mut builder: crate::operation::describe_project::builders::DescribeProjectOutputBuilder,
) -> crate::operation::describe_project::builders::DescribeProjectOutputBuilder {
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.service_catalog_provisioning_details.is_none() {
        builder.service_catalog_provisioning_details = {
            let builder = crate::types::builders::ServiceCatalogProvisioningDetailsBuilder::default();
            Some(crate::serde_util::service_catalog_provisioning_details_correct_errors(builder).build())
        }
    }
    if builder.project_status.is_none() {
        builder.project_status = "no value was set".parse::<crate::types::ProjectStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_subscribed_workteam_output_correct_errors(
    mut builder: crate::operation::describe_subscribed_workteam::builders::DescribeSubscribedWorkteamOutputBuilder,
) -> crate::operation::describe_subscribed_workteam::builders::DescribeSubscribedWorkteamOutputBuilder {
    if builder.subscribed_workteam.is_none() {
        builder.subscribed_workteam = {
            let builder = crate::types::builders::SubscribedWorkteamBuilder::default();
            Some(crate::serde_util::subscribed_workteam_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn describe_training_job_output_correct_errors(
    mut builder: crate::operation::describe_training_job::builders::DescribeTrainingJobOutputBuilder,
) -> crate::operation::describe_training_job::builders::DescribeTrainingJobOutputBuilder {
    if builder.training_job_name.is_none() {
        builder.training_job_name = Some(Default::default())
    }
    if builder.training_job_arn.is_none() {
        builder.training_job_arn = Some(Default::default())
    }
    if builder.model_artifacts.is_none() {
        builder.model_artifacts = {
            let builder = crate::types::builders::ModelArtifactsBuilder::default();
            Some(crate::serde_util::model_artifacts_correct_errors(builder).build())
        }
    }
    if builder.training_job_status.is_none() {
        builder.training_job_status = "no value was set".parse::<crate::types::TrainingJobStatus>().ok()
    }
    if builder.secondary_status.is_none() {
        builder.secondary_status = "no value was set".parse::<crate::types::SecondaryStatus>().ok()
    }
    if builder.algorithm_specification.is_none() {
        builder.algorithm_specification = {
            let builder = crate::types::builders::AlgorithmSpecificationBuilder::default();
            Some(crate::serde_util::algorithm_specification_correct_errors(builder).build())
        }
    }
    if builder.resource_config.is_none() {
        builder.resource_config = {
            let builder = crate::types::builders::ResourceConfigBuilder::default();
            Some(crate::serde_util::resource_config_correct_errors(builder).build())
        }
    }
    if builder.stopping_condition.is_none() {
        builder.stopping_condition = {
            let builder = crate::types::builders::StoppingConditionBuilder::default();
            Some(builder.build())
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_transform_job_output_correct_errors(
    mut builder: crate::operation::describe_transform_job::builders::DescribeTransformJobOutputBuilder,
) -> crate::operation::describe_transform_job::builders::DescribeTransformJobOutputBuilder {
    if builder.transform_job_name.is_none() {
        builder.transform_job_name = Some(Default::default())
    }
    if builder.transform_job_arn.is_none() {
        builder.transform_job_arn = Some(Default::default())
    }
    if builder.transform_job_status.is_none() {
        builder.transform_job_status = "no value was set".parse::<crate::types::TransformJobStatus>().ok()
    }
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.transform_input.is_none() {
        builder.transform_input = {
            let builder = crate::types::builders::TransformInputBuilder::default();
            Some(crate::serde_util::transform_input_correct_errors(builder).build())
        }
    }
    if builder.transform_resources.is_none() {
        builder.transform_resources = {
            let builder = crate::types::builders::TransformResourcesBuilder::default();
            Some(crate::serde_util::transform_resources_correct_errors(builder).build())
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_workforce_output_correct_errors(
    mut builder: crate::operation::describe_workforce::builders::DescribeWorkforceOutputBuilder,
) -> crate::operation::describe_workforce::builders::DescribeWorkforceOutputBuilder {
    if builder.workforce.is_none() {
        builder.workforce = {
            let builder = crate::types::builders::WorkforceBuilder::default();
            Some(crate::serde_util::workforce_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn describe_workteam_output_correct_errors(
    mut builder: crate::operation::describe_workteam::builders::DescribeWorkteamOutputBuilder,
) -> crate::operation::describe_workteam::builders::DescribeWorkteamOutputBuilder {
    if builder.workteam.is_none() {
        builder.workteam = {
            let builder = crate::types::builders::WorkteamBuilder::default();
            Some(crate::serde_util::workteam_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_device_fleet_report_output_correct_errors(
    mut builder: crate::operation::get_device_fleet_report::builders::GetDeviceFleetReportOutputBuilder,
) -> crate::operation::get_device_fleet_report::builders::GetDeviceFleetReportOutputBuilder {
    if builder.device_fleet_arn.is_none() {
        builder.device_fleet_arn = Some(Default::default())
    }
    if builder.device_fleet_name.is_none() {
        builder.device_fleet_name = Some(Default::default())
    }
    builder
}

pub(crate) fn get_model_package_group_policy_output_correct_errors(
    mut builder: crate::operation::get_model_package_group_policy::builders::GetModelPackageGroupPolicyOutputBuilder,
) -> crate::operation::get_model_package_group_policy::builders::GetModelPackageGroupPolicyOutputBuilder {
    if builder.resource_policy.is_none() {
        builder.resource_policy = Some(Default::default())
    }
    builder
}

pub(crate) fn import_hub_content_output_correct_errors(
    mut builder: crate::operation::import_hub_content::builders::ImportHubContentOutputBuilder,
) -> crate::operation::import_hub_content::builders::ImportHubContentOutputBuilder {
    if builder.hub_arn.is_none() {
        builder.hub_arn = Some(Default::default())
    }
    if builder.hub_content_arn.is_none() {
        builder.hub_content_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_algorithms_output_correct_errors(
    mut builder: crate::operation::list_algorithms::builders::ListAlgorithmsOutputBuilder,
) -> crate::operation::list_algorithms::builders::ListAlgorithmsOutputBuilder {
    if builder.algorithm_summary_list.is_none() {
        builder.algorithm_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_auto_ml_jobs_output_correct_errors(
    mut builder: crate::operation::list_auto_ml_jobs::builders::ListAutoMlJobsOutputBuilder,
) -> crate::operation::list_auto_ml_jobs::builders::ListAutoMlJobsOutputBuilder {
    if builder.auto_ml_job_summaries.is_none() {
        builder.auto_ml_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_candidates_for_auto_ml_job_output_correct_errors(
    mut builder: crate::operation::list_candidates_for_auto_ml_job::builders::ListCandidatesForAutoMlJobOutputBuilder,
) -> crate::operation::list_candidates_for_auto_ml_job::builders::ListCandidatesForAutoMlJobOutputBuilder {
    if builder.candidates.is_none() {
        builder.candidates = Some(Default::default())
    }
    builder
}

pub(crate) fn list_code_repositories_output_correct_errors(
    mut builder: crate::operation::list_code_repositories::builders::ListCodeRepositoriesOutputBuilder,
) -> crate::operation::list_code_repositories::builders::ListCodeRepositoriesOutputBuilder {
    if builder.code_repository_summary_list.is_none() {
        builder.code_repository_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_compilation_jobs_output_correct_errors(
    mut builder: crate::operation::list_compilation_jobs::builders::ListCompilationJobsOutputBuilder,
) -> crate::operation::list_compilation_jobs::builders::ListCompilationJobsOutputBuilder {
    if builder.compilation_job_summaries.is_none() {
        builder.compilation_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_quality_job_definitions_output_correct_errors(
    mut builder: crate::operation::list_data_quality_job_definitions::builders::ListDataQualityJobDefinitionsOutputBuilder,
) -> crate::operation::list_data_quality_job_definitions::builders::ListDataQualityJobDefinitionsOutputBuilder {
    if builder.job_definition_summaries.is_none() {
        builder.job_definition_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_device_fleets_output_correct_errors(
    mut builder: crate::operation::list_device_fleets::builders::ListDeviceFleetsOutputBuilder,
) -> crate::operation::list_device_fleets::builders::ListDeviceFleetsOutputBuilder {
    if builder.device_fleet_summaries.is_none() {
        builder.device_fleet_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_devices_output_correct_errors(
    mut builder: crate::operation::list_devices::builders::ListDevicesOutputBuilder,
) -> crate::operation::list_devices::builders::ListDevicesOutputBuilder {
    if builder.device_summaries.is_none() {
        builder.device_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_edge_deployment_plans_output_correct_errors(
    mut builder: crate::operation::list_edge_deployment_plans::builders::ListEdgeDeploymentPlansOutputBuilder,
) -> crate::operation::list_edge_deployment_plans::builders::ListEdgeDeploymentPlansOutputBuilder {
    if builder.edge_deployment_plan_summaries.is_none() {
        builder.edge_deployment_plan_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_edge_packaging_jobs_output_correct_errors(
    mut builder: crate::operation::list_edge_packaging_jobs::builders::ListEdgePackagingJobsOutputBuilder,
) -> crate::operation::list_edge_packaging_jobs::builders::ListEdgePackagingJobsOutputBuilder {
    if builder.edge_packaging_job_summaries.is_none() {
        builder.edge_packaging_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_endpoint_configs_output_correct_errors(
    mut builder: crate::operation::list_endpoint_configs::builders::ListEndpointConfigsOutputBuilder,
) -> crate::operation::list_endpoint_configs::builders::ListEndpointConfigsOutputBuilder {
    if builder.endpoint_configs.is_none() {
        builder.endpoint_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_endpoints_output_correct_errors(
    mut builder: crate::operation::list_endpoints::builders::ListEndpointsOutputBuilder,
) -> crate::operation::list_endpoints::builders::ListEndpointsOutputBuilder {
    if builder.endpoints.is_none() {
        builder.endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn list_feature_groups_output_correct_errors(
    mut builder: crate::operation::list_feature_groups::builders::ListFeatureGroupsOutputBuilder,
) -> crate::operation::list_feature_groups::builders::ListFeatureGroupsOutputBuilder {
    if builder.feature_group_summaries.is_none() {
        builder.feature_group_summaries = Some(Default::default())
    }
    if builder.next_token.is_none() {
        builder.next_token = Some(Default::default())
    }
    builder
}

pub(crate) fn list_flow_definitions_output_correct_errors(
    mut builder: crate::operation::list_flow_definitions::builders::ListFlowDefinitionsOutputBuilder,
) -> crate::operation::list_flow_definitions::builders::ListFlowDefinitionsOutputBuilder {
    if builder.flow_definition_summaries.is_none() {
        builder.flow_definition_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_hub_content_versions_output_correct_errors(
    mut builder: crate::operation::list_hub_content_versions::builders::ListHubContentVersionsOutputBuilder,
) -> crate::operation::list_hub_content_versions::builders::ListHubContentVersionsOutputBuilder {
    if builder.hub_content_summaries.is_none() {
        builder.hub_content_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_hub_contents_output_correct_errors(
    mut builder: crate::operation::list_hub_contents::builders::ListHubContentsOutputBuilder,
) -> crate::operation::list_hub_contents::builders::ListHubContentsOutputBuilder {
    if builder.hub_content_summaries.is_none() {
        builder.hub_content_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_hubs_output_correct_errors(
    mut builder: crate::operation::list_hubs::builders::ListHubsOutputBuilder,
) -> crate::operation::list_hubs::builders::ListHubsOutputBuilder {
    if builder.hub_summaries.is_none() {
        builder.hub_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_human_task_uis_output_correct_errors(
    mut builder: crate::operation::list_human_task_uis::builders::ListHumanTaskUisOutputBuilder,
) -> crate::operation::list_human_task_uis::builders::ListHumanTaskUisOutputBuilder {
    if builder.human_task_ui_summaries.is_none() {
        builder.human_task_ui_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_hyper_parameter_tuning_jobs_output_correct_errors(
    mut builder: crate::operation::list_hyper_parameter_tuning_jobs::builders::ListHyperParameterTuningJobsOutputBuilder,
) -> crate::operation::list_hyper_parameter_tuning_jobs::builders::ListHyperParameterTuningJobsOutputBuilder {
    if builder.hyper_parameter_tuning_job_summaries.is_none() {
        builder.hyper_parameter_tuning_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_inference_recommendations_jobs_output_correct_errors(
    mut builder: crate::operation::list_inference_recommendations_jobs::builders::ListInferenceRecommendationsJobsOutputBuilder,
) -> crate::operation::list_inference_recommendations_jobs::builders::ListInferenceRecommendationsJobsOutputBuilder {
    if builder.inference_recommendations_jobs.is_none() {
        builder.inference_recommendations_jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_labeling_jobs_for_workteam_output_correct_errors(
    mut builder: crate::operation::list_labeling_jobs_for_workteam::builders::ListLabelingJobsForWorkteamOutputBuilder,
) -> crate::operation::list_labeling_jobs_for_workteam::builders::ListLabelingJobsForWorkteamOutputBuilder {
    if builder.labeling_job_summary_list.is_none() {
        builder.labeling_job_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_model_bias_job_definitions_output_correct_errors(
    mut builder: crate::operation::list_model_bias_job_definitions::builders::ListModelBiasJobDefinitionsOutputBuilder,
) -> crate::operation::list_model_bias_job_definitions::builders::ListModelBiasJobDefinitionsOutputBuilder {
    if builder.job_definition_summaries.is_none() {
        builder.job_definition_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_model_card_export_jobs_output_correct_errors(
    mut builder: crate::operation::list_model_card_export_jobs::builders::ListModelCardExportJobsOutputBuilder,
) -> crate::operation::list_model_card_export_jobs::builders::ListModelCardExportJobsOutputBuilder {
    if builder.model_card_export_job_summaries.is_none() {
        builder.model_card_export_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_model_card_versions_output_correct_errors(
    mut builder: crate::operation::list_model_card_versions::builders::ListModelCardVersionsOutputBuilder,
) -> crate::operation::list_model_card_versions::builders::ListModelCardVersionsOutputBuilder {
    if builder.model_card_version_summary_list.is_none() {
        builder.model_card_version_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_model_cards_output_correct_errors(
    mut builder: crate::operation::list_model_cards::builders::ListModelCardsOutputBuilder,
) -> crate::operation::list_model_cards::builders::ListModelCardsOutputBuilder {
    if builder.model_card_summaries.is_none() {
        builder.model_card_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_model_explainability_job_definitions_output_correct_errors(
    mut builder: crate::operation::list_model_explainability_job_definitions::builders::ListModelExplainabilityJobDefinitionsOutputBuilder,
) -> crate::operation::list_model_explainability_job_definitions::builders::ListModelExplainabilityJobDefinitionsOutputBuilder {
    if builder.job_definition_summaries.is_none() {
        builder.job_definition_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_model_metadata_output_correct_errors(
    mut builder: crate::operation::list_model_metadata::builders::ListModelMetadataOutputBuilder,
) -> crate::operation::list_model_metadata::builders::ListModelMetadataOutputBuilder {
    if builder.model_metadata_summaries.is_none() {
        builder.model_metadata_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_model_package_groups_output_correct_errors(
    mut builder: crate::operation::list_model_package_groups::builders::ListModelPackageGroupsOutputBuilder,
) -> crate::operation::list_model_package_groups::builders::ListModelPackageGroupsOutputBuilder {
    if builder.model_package_group_summary_list.is_none() {
        builder.model_package_group_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_model_packages_output_correct_errors(
    mut builder: crate::operation::list_model_packages::builders::ListModelPackagesOutputBuilder,
) -> crate::operation::list_model_packages::builders::ListModelPackagesOutputBuilder {
    if builder.model_package_summary_list.is_none() {
        builder.model_package_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_model_quality_job_definitions_output_correct_errors(
    mut builder: crate::operation::list_model_quality_job_definitions::builders::ListModelQualityJobDefinitionsOutputBuilder,
) -> crate::operation::list_model_quality_job_definitions::builders::ListModelQualityJobDefinitionsOutputBuilder {
    if builder.job_definition_summaries.is_none() {
        builder.job_definition_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_models_output_correct_errors(
    mut builder: crate::operation::list_models::builders::ListModelsOutputBuilder,
) -> crate::operation::list_models::builders::ListModelsOutputBuilder {
    if builder.models.is_none() {
        builder.models = Some(Default::default())
    }
    builder
}

pub(crate) fn list_monitoring_executions_output_correct_errors(
    mut builder: crate::operation::list_monitoring_executions::builders::ListMonitoringExecutionsOutputBuilder,
) -> crate::operation::list_monitoring_executions::builders::ListMonitoringExecutionsOutputBuilder {
    if builder.monitoring_execution_summaries.is_none() {
        builder.monitoring_execution_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_monitoring_schedules_output_correct_errors(
    mut builder: crate::operation::list_monitoring_schedules::builders::ListMonitoringSchedulesOutputBuilder,
) -> crate::operation::list_monitoring_schedules::builders::ListMonitoringSchedulesOutputBuilder {
    if builder.monitoring_schedule_summaries.is_none() {
        builder.monitoring_schedule_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_processing_jobs_output_correct_errors(
    mut builder: crate::operation::list_processing_jobs::builders::ListProcessingJobsOutputBuilder,
) -> crate::operation::list_processing_jobs::builders::ListProcessingJobsOutputBuilder {
    if builder.processing_job_summaries.is_none() {
        builder.processing_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_projects_output_correct_errors(
    mut builder: crate::operation::list_projects::builders::ListProjectsOutputBuilder,
) -> crate::operation::list_projects::builders::ListProjectsOutputBuilder {
    if builder.project_summary_list.is_none() {
        builder.project_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_stage_devices_output_correct_errors(
    mut builder: crate::operation::list_stage_devices::builders::ListStageDevicesOutputBuilder,
) -> crate::operation::list_stage_devices::builders::ListStageDevicesOutputBuilder {
    if builder.device_deployment_summaries.is_none() {
        builder.device_deployment_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_subscribed_workteams_output_correct_errors(
    mut builder: crate::operation::list_subscribed_workteams::builders::ListSubscribedWorkteamsOutputBuilder,
) -> crate::operation::list_subscribed_workteams::builders::ListSubscribedWorkteamsOutputBuilder {
    if builder.subscribed_workteams.is_none() {
        builder.subscribed_workteams = Some(Default::default())
    }
    builder
}

pub(crate) fn list_training_jobs_output_correct_errors(
    mut builder: crate::operation::list_training_jobs::builders::ListTrainingJobsOutputBuilder,
) -> crate::operation::list_training_jobs::builders::ListTrainingJobsOutputBuilder {
    if builder.training_job_summaries.is_none() {
        builder.training_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_training_jobs_for_hyper_parameter_tuning_job_output_correct_errors(
    mut builder: crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::builders::ListTrainingJobsForHyperParameterTuningJobOutputBuilder,
) -> crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::builders::ListTrainingJobsForHyperParameterTuningJobOutputBuilder {
    if builder.training_job_summaries.is_none() {
        builder.training_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_transform_jobs_output_correct_errors(
    mut builder: crate::operation::list_transform_jobs::builders::ListTransformJobsOutputBuilder,
) -> crate::operation::list_transform_jobs::builders::ListTransformJobsOutputBuilder {
    if builder.transform_job_summaries.is_none() {
        builder.transform_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workforces_output_correct_errors(
    mut builder: crate::operation::list_workforces::builders::ListWorkforcesOutputBuilder,
) -> crate::operation::list_workforces::builders::ListWorkforcesOutputBuilder {
    if builder.workforces.is_none() {
        builder.workforces = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workteams_output_correct_errors(
    mut builder: crate::operation::list_workteams::builders::ListWorkteamsOutputBuilder,
) -> crate::operation::list_workteams::builders::ListWorkteamsOutputBuilder {
    if builder.workteams.is_none() {
        builder.workteams = Some(Default::default())
    }
    builder
}

pub(crate) fn put_model_package_group_policy_output_correct_errors(
    mut builder: crate::operation::put_model_package_group_policy::builders::PutModelPackageGroupPolicyOutputBuilder,
) -> crate::operation::put_model_package_group_policy::builders::PutModelPackageGroupPolicyOutputBuilder {
    if builder.model_package_group_arn.is_none() {
        builder.model_package_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn render_ui_template_output_correct_errors(
    mut builder: crate::operation::render_ui_template::builders::RenderUiTemplateOutputBuilder,
) -> crate::operation::render_ui_template::builders::RenderUiTemplateOutputBuilder {
    if builder.rendered_content.is_none() {
        builder.rendered_content = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn start_inference_experiment_output_correct_errors(
    mut builder: crate::operation::start_inference_experiment::builders::StartInferenceExperimentOutputBuilder,
) -> crate::operation::start_inference_experiment::builders::StartInferenceExperimentOutputBuilder {
    if builder.inference_experiment_arn.is_none() {
        builder.inference_experiment_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn stop_inference_experiment_output_correct_errors(
    mut builder: crate::operation::stop_inference_experiment::builders::StopInferenceExperimentOutputBuilder,
) -> crate::operation::stop_inference_experiment::builders::StopInferenceExperimentOutputBuilder {
    if builder.inference_experiment_arn.is_none() {
        builder.inference_experiment_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_code_repository_output_correct_errors(
    mut builder: crate::operation::update_code_repository::builders::UpdateCodeRepositoryOutputBuilder,
) -> crate::operation::update_code_repository::builders::UpdateCodeRepositoryOutputBuilder {
    if builder.code_repository_arn.is_none() {
        builder.code_repository_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_endpoint_output_correct_errors(
    mut builder: crate::operation::update_endpoint::builders::UpdateEndpointOutputBuilder,
) -> crate::operation::update_endpoint::builders::UpdateEndpointOutputBuilder {
    if builder.endpoint_arn.is_none() {
        builder.endpoint_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_endpoint_weights_and_capacities_output_correct_errors(
    mut builder: crate::operation::update_endpoint_weights_and_capacities::builders::UpdateEndpointWeightsAndCapacitiesOutputBuilder,
) -> crate::operation::update_endpoint_weights_and_capacities::builders::UpdateEndpointWeightsAndCapacitiesOutputBuilder {
    if builder.endpoint_arn.is_none() {
        builder.endpoint_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_feature_group_output_correct_errors(
    mut builder: crate::operation::update_feature_group::builders::UpdateFeatureGroupOutputBuilder,
) -> crate::operation::update_feature_group::builders::UpdateFeatureGroupOutputBuilder {
    if builder.feature_group_arn.is_none() {
        builder.feature_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_hub_output_correct_errors(
    mut builder: crate::operation::update_hub::builders::UpdateHubOutputBuilder,
) -> crate::operation::update_hub::builders::UpdateHubOutputBuilder {
    if builder.hub_arn.is_none() {
        builder.hub_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_inference_experiment_output_correct_errors(
    mut builder: crate::operation::update_inference_experiment::builders::UpdateInferenceExperimentOutputBuilder,
) -> crate::operation::update_inference_experiment::builders::UpdateInferenceExperimentOutputBuilder {
    if builder.inference_experiment_arn.is_none() {
        builder.inference_experiment_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_model_card_output_correct_errors(
    mut builder: crate::operation::update_model_card::builders::UpdateModelCardOutputBuilder,
) -> crate::operation::update_model_card::builders::UpdateModelCardOutputBuilder {
    if builder.model_card_arn.is_none() {
        builder.model_card_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_model_package_output_correct_errors(
    mut builder: crate::operation::update_model_package::builders::UpdateModelPackageOutputBuilder,
) -> crate::operation::update_model_package::builders::UpdateModelPackageOutputBuilder {
    if builder.model_package_arn.is_none() {
        builder.model_package_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_monitoring_alert_output_correct_errors(
    mut builder: crate::operation::update_monitoring_alert::builders::UpdateMonitoringAlertOutputBuilder,
) -> crate::operation::update_monitoring_alert::builders::UpdateMonitoringAlertOutputBuilder {
    if builder.monitoring_schedule_arn.is_none() {
        builder.monitoring_schedule_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_monitoring_schedule_output_correct_errors(
    mut builder: crate::operation::update_monitoring_schedule::builders::UpdateMonitoringScheduleOutputBuilder,
) -> crate::operation::update_monitoring_schedule::builders::UpdateMonitoringScheduleOutputBuilder {
    if builder.monitoring_schedule_arn.is_none() {
        builder.monitoring_schedule_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_project_output_correct_errors(
    mut builder: crate::operation::update_project::builders::UpdateProjectOutputBuilder,
) -> crate::operation::update_project::builders::UpdateProjectOutputBuilder {
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_training_job_output_correct_errors(
    mut builder: crate::operation::update_training_job::builders::UpdateTrainingJobOutputBuilder,
) -> crate::operation::update_training_job::builders::UpdateTrainingJobOutputBuilder {
    if builder.training_job_arn.is_none() {
        builder.training_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_workforce_output_correct_errors(
    mut builder: crate::operation::update_workforce::builders::UpdateWorkforceOutputBuilder,
) -> crate::operation::update_workforce::builders::UpdateWorkforceOutputBuilder {
    if builder.workforce.is_none() {
        builder.workforce = {
            let builder = crate::types::builders::WorkforceBuilder::default();
            Some(crate::serde_util::workforce_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_workteam_output_correct_errors(
    mut builder: crate::operation::update_workteam::builders::UpdateWorkteamOutputBuilder,
) -> crate::operation::update_workteam::builders::UpdateWorkteamOutputBuilder {
    if builder.workteam.is_none() {
        builder.workteam = {
            let builder = crate::types::builders::WorkteamBuilder::default();
            Some(crate::serde_util::workteam_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn training_specification_correct_errors(
    mut builder: crate::types::builders::TrainingSpecificationBuilder,
) -> crate::types::builders::TrainingSpecificationBuilder {
    if builder.training_image.is_none() {
        builder.training_image = Some(Default::default())
    }
    if builder.supported_training_instance_types.is_none() {
        builder.supported_training_instance_types = Some(Default::default())
    }
    if builder.training_channels.is_none() {
        builder.training_channels = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_ml_output_data_config_correct_errors(
    mut builder: crate::types::builders::AutoMlOutputDataConfigBuilder,
) -> crate::types::builders::AutoMlOutputDataConfigBuilder {
    if builder.s3_output_path.is_none() {
        builder.s3_output_path = Some(Default::default())
    }
    builder
}

pub(crate) fn model_artifacts_correct_errors(
    mut builder: crate::types::builders::ModelArtifactsBuilder,
) -> crate::types::builders::ModelArtifactsBuilder {
    if builder.s3_model_artifacts.is_none() {
        builder.s3_model_artifacts = Some(Default::default())
    }
    builder
}

pub(crate) fn input_config_correct_errors(mut builder: crate::types::builders::InputConfigBuilder) -> crate::types::builders::InputConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    if builder.framework.is_none() {
        builder.framework = "no value was set".parse::<crate::types::Framework>().ok()
    }
    builder
}

pub(crate) fn output_config_correct_errors(mut builder: crate::types::builders::OutputConfigBuilder) -> crate::types::builders::OutputConfigBuilder {
    if builder.s3_output_location.is_none() {
        builder.s3_output_location = Some(Default::default())
    }
    builder
}

pub(crate) fn data_quality_app_specification_correct_errors(
    mut builder: crate::types::builders::DataQualityAppSpecificationBuilder,
) -> crate::types::builders::DataQualityAppSpecificationBuilder {
    if builder.image_uri.is_none() {
        builder.image_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn monitoring_output_config_correct_errors(
    mut builder: crate::types::builders::MonitoringOutputConfigBuilder,
) -> crate::types::builders::MonitoringOutputConfigBuilder {
    if builder.monitoring_outputs.is_none() {
        builder.monitoring_outputs = Some(Default::default())
    }
    builder
}

pub(crate) fn monitoring_resources_correct_errors(
    mut builder: crate::types::builders::MonitoringResourcesBuilder,
) -> crate::types::builders::MonitoringResourcesBuilder {
    if builder.cluster_config.is_none() {
        builder.cluster_config = {
            let builder = crate::types::builders::MonitoringClusterConfigBuilder::default();
            Some(crate::serde_util::monitoring_cluster_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn edge_output_config_correct_errors(
    mut builder: crate::types::builders::EdgeOutputConfigBuilder,
) -> crate::types::builders::EdgeOutputConfigBuilder {
    if builder.s3_output_location.is_none() {
        builder.s3_output_location = Some(Default::default())
    }
    builder
}

pub(crate) fn human_loop_config_correct_errors(
    mut builder: crate::types::builders::HumanLoopConfigBuilder,
) -> crate::types::builders::HumanLoopConfigBuilder {
    if builder.workteam_arn.is_none() {
        builder.workteam_arn = Some(Default::default())
    }
    if builder.human_task_ui_arn.is_none() {
        builder.human_task_ui_arn = Some(Default::default())
    }
    if builder.task_title.is_none() {
        builder.task_title = Some(Default::default())
    }
    if builder.task_description.is_none() {
        builder.task_description = Some(Default::default())
    }
    if builder.task_count.is_none() {
        builder.task_count = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_definition_output_config_correct_errors(
    mut builder: crate::types::builders::FlowDefinitionOutputConfigBuilder,
) -> crate::types::builders::FlowDefinitionOutputConfigBuilder {
    if builder.s3_output_path.is_none() {
        builder.s3_output_path = Some(Default::default())
    }
    builder
}

pub(crate) fn hyper_parameter_tuning_job_config_correct_errors(
    mut builder: crate::types::builders::HyperParameterTuningJobConfigBuilder,
) -> crate::types::builders::HyperParameterTuningJobConfigBuilder {
    if builder.strategy.is_none() {
        builder.strategy = "no value was set".parse::<crate::types::HyperParameterTuningJobStrategyType>().ok()
    }
    if builder.resource_limits.is_none() {
        builder.resource_limits = {
            let builder = crate::types::builders::ResourceLimitsBuilder::default();
            Some(crate::serde_util::resource_limits_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn endpoint_metadata_correct_errors(
    mut builder: crate::types::builders::EndpointMetadataBuilder,
) -> crate::types::builders::EndpointMetadataBuilder {
    if builder.endpoint_name.is_none() {
        builder.endpoint_name = Some(Default::default())
    }
    builder
}

pub(crate) fn labeling_job_input_config_correct_errors(
    mut builder: crate::types::builders::LabelingJobInputConfigBuilder,
) -> crate::types::builders::LabelingJobInputConfigBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::LabelingJobDataSourceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn labeling_job_output_config_correct_errors(
    mut builder: crate::types::builders::LabelingJobOutputConfigBuilder,
) -> crate::types::builders::LabelingJobOutputConfigBuilder {
    if builder.s3_output_path.is_none() {
        builder.s3_output_path = Some(Default::default())
    }
    builder
}

pub(crate) fn human_task_config_correct_errors(
    mut builder: crate::types::builders::HumanTaskConfigBuilder,
) -> crate::types::builders::HumanTaskConfigBuilder {
    if builder.workteam_arn.is_none() {
        builder.workteam_arn = Some(Default::default())
    }
    if builder.ui_config.is_none() {
        builder.ui_config = {
            let builder = crate::types::builders::UiConfigBuilder::default();
            Some(builder.build())
        }
    }
    if builder.pre_human_task_lambda_arn.is_none() {
        builder.pre_human_task_lambda_arn = Some(Default::default())
    }
    if builder.task_title.is_none() {
        builder.task_title = Some(Default::default())
    }
    if builder.task_description.is_none() {
        builder.task_description = Some(Default::default())
    }
    if builder.number_of_human_workers_per_data_object.is_none() {
        builder.number_of_human_workers_per_data_object = Some(Default::default())
    }
    if builder.task_time_limit_in_seconds.is_none() {
        builder.task_time_limit_in_seconds = Some(Default::default())
    }
    if builder.annotation_consolidation_config.is_none() {
        builder.annotation_consolidation_config = {
            let builder = crate::types::builders::AnnotationConsolidationConfigBuilder::default();
            Some(crate::serde_util::annotation_consolidation_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn model_bias_app_specification_correct_errors(
    mut builder: crate::types::builders::ModelBiasAppSpecificationBuilder,
) -> crate::types::builders::ModelBiasAppSpecificationBuilder {
    if builder.image_uri.is_none() {
        builder.image_uri = Some(Default::default())
    }
    if builder.config_uri.is_none() {
        builder.config_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn model_bias_job_input_correct_errors(
    mut builder: crate::types::builders::ModelBiasJobInputBuilder,
) -> crate::types::builders::ModelBiasJobInputBuilder {
    if builder.ground_truth_s3_input.is_none() {
        builder.ground_truth_s3_input = {
            let builder = crate::types::builders::MonitoringGroundTruthS3InputBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn model_card_export_output_config_correct_errors(
    mut builder: crate::types::builders::ModelCardExportOutputConfigBuilder,
) -> crate::types::builders::ModelCardExportOutputConfigBuilder {
    if builder.s3_output_path.is_none() {
        builder.s3_output_path = Some(Default::default())
    }
    builder
}

pub(crate) fn model_explainability_app_specification_correct_errors(
    mut builder: crate::types::builders::ModelExplainabilityAppSpecificationBuilder,
) -> crate::types::builders::ModelExplainabilityAppSpecificationBuilder {
    if builder.image_uri.is_none() {
        builder.image_uri = Some(Default::default())
    }
    if builder.config_uri.is_none() {
        builder.config_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn model_package_status_details_correct_errors(
    mut builder: crate::types::builders::ModelPackageStatusDetailsBuilder,
) -> crate::types::builders::ModelPackageStatusDetailsBuilder {
    if builder.validation_statuses.is_none() {
        builder.validation_statuses = Some(Default::default())
    }
    builder
}

pub(crate) fn model_quality_app_specification_correct_errors(
    mut builder: crate::types::builders::ModelQualityAppSpecificationBuilder,
) -> crate::types::builders::ModelQualityAppSpecificationBuilder {
    if builder.image_uri.is_none() {
        builder.image_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn model_quality_job_input_correct_errors(
    mut builder: crate::types::builders::ModelQualityJobInputBuilder,
) -> crate::types::builders::ModelQualityJobInputBuilder {
    if builder.ground_truth_s3_input.is_none() {
        builder.ground_truth_s3_input = {
            let builder = crate::types::builders::MonitoringGroundTruthS3InputBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn processing_resources_correct_errors(
    mut builder: crate::types::builders::ProcessingResourcesBuilder,
) -> crate::types::builders::ProcessingResourcesBuilder {
    if builder.cluster_config.is_none() {
        builder.cluster_config = {
            let builder = crate::types::builders::ProcessingClusterConfigBuilder::default();
            Some(crate::serde_util::processing_cluster_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn app_specification_correct_errors(
    mut builder: crate::types::builders::AppSpecificationBuilder,
) -> crate::types::builders::AppSpecificationBuilder {
    if builder.image_uri.is_none() {
        builder.image_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn service_catalog_provisioning_details_correct_errors(
    mut builder: crate::types::builders::ServiceCatalogProvisioningDetailsBuilder,
) -> crate::types::builders::ServiceCatalogProvisioningDetailsBuilder {
    if builder.product_id.is_none() {
        builder.product_id = Some(Default::default())
    }
    builder
}

pub(crate) fn subscribed_workteam_correct_errors(
    mut builder: crate::types::builders::SubscribedWorkteamBuilder,
) -> crate::types::builders::SubscribedWorkteamBuilder {
    if builder.workteam_arn.is_none() {
        builder.workteam_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn algorithm_specification_correct_errors(
    mut builder: crate::types::builders::AlgorithmSpecificationBuilder,
) -> crate::types::builders::AlgorithmSpecificationBuilder {
    if builder.training_input_mode.is_none() {
        builder.training_input_mode = "no value was set".parse::<crate::types::TrainingInputMode>().ok()
    }
    builder
}

pub(crate) fn resource_config_correct_errors(
    mut builder: crate::types::builders::ResourceConfigBuilder,
) -> crate::types::builders::ResourceConfigBuilder {
    if builder.volume_size_in_gb.is_none() {
        builder.volume_size_in_gb = Some(Default::default())
    }
    builder
}

pub(crate) fn transform_input_correct_errors(
    mut builder: crate::types::builders::TransformInputBuilder,
) -> crate::types::builders::TransformInputBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::TransformDataSourceBuilder::default();
            Some(crate::serde_util::transform_data_source_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn transform_resources_correct_errors(
    mut builder: crate::types::builders::TransformResourcesBuilder,
) -> crate::types::builders::TransformResourcesBuilder {
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::TransformInstanceType>().ok()
    }
    if builder.instance_count.is_none() {
        builder.instance_count = Some(Default::default())
    }
    builder
}

pub(crate) fn workforce_correct_errors(mut builder: crate::types::builders::WorkforceBuilder) -> crate::types::builders::WorkforceBuilder {
    if builder.workforce_name.is_none() {
        builder.workforce_name = Some(Default::default())
    }
    if builder.workforce_arn.is_none() {
        builder.workforce_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn workteam_correct_errors(mut builder: crate::types::builders::WorkteamBuilder) -> crate::types::builders::WorkteamBuilder {
    if builder.workteam_name.is_none() {
        builder.workteam_name = Some(Default::default())
    }
    if builder.member_definitions.is_none() {
        builder.member_definitions = Some(Default::default())
    }
    if builder.workteam_arn.is_none() {
        builder.workteam_arn = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    builder
}

pub(crate) fn action_source_correct_errors(mut builder: crate::types::builders::ActionSourceBuilder) -> crate::types::builders::ActionSourceBuilder {
    if builder.source_uri.is_none() {
        builder.source_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn algorithm_validation_specification_correct_errors(
    mut builder: crate::types::builders::AlgorithmValidationSpecificationBuilder,
) -> crate::types::builders::AlgorithmValidationSpecificationBuilder {
    if builder.validation_role.is_none() {
        builder.validation_role = Some(Default::default())
    }
    if builder.validation_profiles.is_none() {
        builder.validation_profiles = Some(Default::default())
    }
    builder
}

pub(crate) fn artifact_source_correct_errors(
    mut builder: crate::types::builders::ArtifactSourceBuilder,
) -> crate::types::builders::ArtifactSourceBuilder {
    if builder.source_uri.is_none() {
        builder.source_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn async_inference_config_correct_errors(
    mut builder: crate::types::builders::AsyncInferenceConfigBuilder,
) -> crate::types::builders::AsyncInferenceConfigBuilder {
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::AsyncInferenceOutputConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn auto_ml_candidate_correct_errors(
    mut builder: crate::types::builders::AutoMlCandidateBuilder,
) -> crate::types::builders::AutoMlCandidateBuilder {
    if builder.candidate_name.is_none() {
        builder.candidate_name = Some(Default::default())
    }
    if builder.objective_status.is_none() {
        builder.objective_status = "no value was set".parse::<crate::types::ObjectiveStatus>().ok()
    }
    if builder.candidate_steps.is_none() {
        builder.candidate_steps = Some(Default::default())
    }
    if builder.candidate_status.is_none() {
        builder.candidate_status = "no value was set".parse::<crate::types::CandidateStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn auto_ml_job_objective_correct_errors(
    mut builder: crate::types::builders::AutoMlJobObjectiveBuilder,
) -> crate::types::builders::AutoMlJobObjectiveBuilder {
    if builder.metric_name.is_none() {
        builder.metric_name = "no value was set".parse::<crate::types::AutoMlMetricEnum>().ok()
    }
    builder
}

pub(crate) fn autotune_correct_errors(mut builder: crate::types::builders::AutotuneBuilder) -> crate::types::builders::AutotuneBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::AutotuneMode>().ok()
    }
    builder
}

pub(crate) fn batch_data_capture_config_correct_errors(
    mut builder: crate::types::builders::BatchDataCaptureConfigBuilder,
) -> crate::types::builders::BatchDataCaptureConfigBuilder {
    if builder.destination_s3_uri.is_none() {
        builder.destination_s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn checkpoint_config_correct_errors(
    mut builder: crate::types::builders::CheckpointConfigBuilder,
) -> crate::types::builders::CheckpointConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn context_source_correct_errors(
    mut builder: crate::types::builders::ContextSourceBuilder,
) -> crate::types::builders::ContextSourceBuilder {
    if builder.source_uri.is_none() {
        builder.source_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn data_capture_config_correct_errors(
    mut builder: crate::types::builders::DataCaptureConfigBuilder,
) -> crate::types::builders::DataCaptureConfigBuilder {
    if builder.initial_sampling_percentage.is_none() {
        builder.initial_sampling_percentage = Some(Default::default())
    }
    if builder.destination_s3_uri.is_none() {
        builder.destination_s3_uri = Some(Default::default())
    }
    if builder.capture_options.is_none() {
        builder.capture_options = Some(Default::default())
    }
    builder
}

pub(crate) fn data_capture_config_summary_correct_errors(
    mut builder: crate::types::builders::DataCaptureConfigSummaryBuilder,
) -> crate::types::builders::DataCaptureConfigSummaryBuilder {
    if builder.enable_capture.is_none() {
        builder.enable_capture = Some(Default::default())
    }
    if builder.capture_status.is_none() {
        builder.capture_status = "no value was set".parse::<crate::types::CaptureStatus>().ok()
    }
    if builder.current_sampling_percentage.is_none() {
        builder.current_sampling_percentage = Some(Default::default())
    }
    if builder.destination_s3_uri.is_none() {
        builder.destination_s3_uri = Some(Default::default())
    }
    if builder.kms_key_id.is_none() {
        builder.kms_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn debug_hook_config_correct_errors(
    mut builder: crate::types::builders::DebugHookConfigBuilder,
) -> crate::types::builders::DebugHookConfigBuilder {
    if builder.s3_output_path.is_none() {
        builder.s3_output_path = Some(Default::default())
    }
    builder
}

pub(crate) fn deployment_recommendation_correct_errors(
    mut builder: crate::types::builders::DeploymentRecommendationBuilder,
) -> crate::types::builders::DeploymentRecommendationBuilder {
    if builder.recommendation_status.is_none() {
        builder.recommendation_status = "no value was set".parse::<crate::types::RecommendationStatus>().ok()
    }
    builder
}

pub(crate) fn device_stats_correct_errors(mut builder: crate::types::builders::DeviceStatsBuilder) -> crate::types::builders::DeviceStatsBuilder {
    if builder.connected_device_count.is_none() {
        builder.connected_device_count = Some(Default::default())
    }
    if builder.registered_device_count.is_none() {
        builder.registered_device_count = Some(Default::default())
    }
    builder
}

pub(crate) fn edge_preset_deployment_output_correct_errors(
    mut builder: crate::types::builders::EdgePresetDeploymentOutputBuilder,
) -> crate::types::builders::EdgePresetDeploymentOutputBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EdgePresetDeploymentType>().ok()
    }
    builder
}

pub(crate) fn experiment_source_correct_errors(
    mut builder: crate::types::builders::ExperimentSourceBuilder,
) -> crate::types::builders::ExperimentSourceBuilder {
    if builder.source_arn.is_none() {
        builder.source_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn git_config_correct_errors(mut builder: crate::types::builders::GitConfigBuilder) -> crate::types::builders::GitConfigBuilder {
    if builder.repository_url.is_none() {
        builder.repository_url = Some(Default::default())
    }
    builder
}

pub(crate) fn human_loop_activation_config_correct_errors(
    mut builder: crate::types::builders::HumanLoopActivationConfigBuilder,
) -> crate::types::builders::HumanLoopActivationConfigBuilder {
    if builder.human_loop_activation_conditions_config.is_none() {
        builder.human_loop_activation_conditions_config = {
            let builder = crate::types::builders::HumanLoopActivationConditionsConfigBuilder::default();
            Some(crate::serde_util::human_loop_activation_conditions_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn human_loop_request_source_correct_errors(
    mut builder: crate::types::builders::HumanLoopRequestSourceBuilder,
) -> crate::types::builders::HumanLoopRequestSourceBuilder {
    if builder.aws_managed_human_loop_request_source.is_none() {
        builder.aws_managed_human_loop_request_source = "no value was set".parse::<crate::types::AwsManagedHumanLoopRequestSource>().ok()
    }
    builder
}

pub(crate) fn hyper_parameter_training_job_definition_correct_errors(
    mut builder: crate::types::builders::HyperParameterTrainingJobDefinitionBuilder,
) -> crate::types::builders::HyperParameterTrainingJobDefinitionBuilder {
    if builder.algorithm_specification.is_none() {
        builder.algorithm_specification = {
            let builder = crate::types::builders::HyperParameterAlgorithmSpecificationBuilder::default();
            Some(crate::serde_util::hyper_parameter_algorithm_specification_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::OutputDataConfigBuilder::default();
            Some(crate::serde_util::output_data_config_correct_errors(builder).build())
        }
    }
    if builder.stopping_condition.is_none() {
        builder.stopping_condition = {
            let builder = crate::types::builders::StoppingConditionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn hyper_parameter_training_job_summary_correct_errors(
    mut builder: crate::types::builders::HyperParameterTrainingJobSummaryBuilder,
) -> crate::types::builders::HyperParameterTrainingJobSummaryBuilder {
    if builder.training_job_name.is_none() {
        builder.training_job_name = Some(Default::default())
    }
    if builder.training_job_arn.is_none() {
        builder.training_job_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.training_job_status.is_none() {
        builder.training_job_status = "no value was set".parse::<crate::types::TrainingJobStatus>().ok()
    }
    if builder.tuned_hyper_parameters.is_none() {
        builder.tuned_hyper_parameters = Some(Default::default())
    }
    builder
}

pub(crate) fn hyper_parameter_tuning_job_warm_start_config_correct_errors(
    mut builder: crate::types::builders::HyperParameterTuningJobWarmStartConfigBuilder,
) -> crate::types::builders::HyperParameterTuningJobWarmStartConfigBuilder {
    if builder.parent_hyper_parameter_tuning_jobs.is_none() {
        builder.parent_hyper_parameter_tuning_jobs = Some(Default::default())
    }
    if builder.warm_start_type.is_none() {
        builder.warm_start_type = "no value was set".parse::<crate::types::HyperParameterTuningJobWarmStartType>().ok()
    }
    builder
}

pub(crate) fn inference_execution_config_correct_errors(
    mut builder: crate::types::builders::InferenceExecutionConfigBuilder,
) -> crate::types::builders::InferenceExecutionConfigBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::InferenceExecutionMode>().ok()
    }
    builder
}

pub(crate) fn inference_experiment_data_storage_config_correct_errors(
    mut builder: crate::types::builders::InferenceExperimentDataStorageConfigBuilder,
) -> crate::types::builders::InferenceExperimentDataStorageConfigBuilder {
    if builder.destination.is_none() {
        builder.destination = Some(Default::default())
    }
    builder
}

pub(crate) fn inference_specification_correct_errors(
    mut builder: crate::types::builders::InferenceSpecificationBuilder,
) -> crate::types::builders::InferenceSpecificationBuilder {
    if builder.containers.is_none() {
        builder.containers = Some(Default::default())
    }
    if builder.supported_content_types.is_none() {
        builder.supported_content_types = Some(Default::default())
    }
    if builder.supported_response_mime_types.is_none() {
        builder.supported_response_mime_types = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_metadata_service_configuration_correct_errors(
    mut builder: crate::types::builders::InstanceMetadataServiceConfigurationBuilder,
) -> crate::types::builders::InstanceMetadataServiceConfigurationBuilder {
    if builder.minimum_instance_metadata_service_version.is_none() {
        builder.minimum_instance_metadata_service_version = Some(Default::default())
    }
    builder
}

pub(crate) fn kernel_gateway_image_config_correct_errors(
    mut builder: crate::types::builders::KernelGatewayImageConfigBuilder,
) -> crate::types::builders::KernelGatewayImageConfigBuilder {
    if builder.kernel_specs.is_none() {
        builder.kernel_specs = Some(Default::default())
    }
    builder
}

pub(crate) fn labeling_job_algorithms_config_correct_errors(
    mut builder: crate::types::builders::LabelingJobAlgorithmsConfigBuilder,
) -> crate::types::builders::LabelingJobAlgorithmsConfigBuilder {
    if builder.labeling_job_algorithm_specification_arn.is_none() {
        builder.labeling_job_algorithm_specification_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn labeling_job_output_correct_errors(
    mut builder: crate::types::builders::LabelingJobOutputBuilder,
) -> crate::types::builders::LabelingJobOutputBuilder {
    if builder.output_dataset_s3_uri.is_none() {
        builder.output_dataset_s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn last_update_status_correct_errors(
    mut builder: crate::types::builders::LastUpdateStatusBuilder,
) -> crate::types::builders::LastUpdateStatusBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LastUpdateStatusValue>().ok()
    }
    builder
}

pub(crate) fn model_card_export_artifacts_correct_errors(
    mut builder: crate::types::builders::ModelCardExportArtifactsBuilder,
) -> crate::types::builders::ModelCardExportArtifactsBuilder {
    if builder.s3_export_artifacts.is_none() {
        builder.s3_export_artifacts = Some(Default::default())
    }
    builder
}

pub(crate) fn model_package_validation_specification_correct_errors(
    mut builder: crate::types::builders::ModelPackageValidationSpecificationBuilder,
) -> crate::types::builders::ModelPackageValidationSpecificationBuilder {
    if builder.validation_role.is_none() {
        builder.validation_role = Some(Default::default())
    }
    if builder.validation_profiles.is_none() {
        builder.validation_profiles = Some(Default::default())
    }
    builder
}

pub(crate) fn monitoring_execution_summary_correct_errors(
    mut builder: crate::types::builders::MonitoringExecutionSummaryBuilder,
) -> crate::types::builders::MonitoringExecutionSummaryBuilder {
    if builder.monitoring_schedule_name.is_none() {
        builder.monitoring_schedule_name = Some(Default::default())
    }
    if builder.scheduled_time.is_none() {
        builder.scheduled_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.monitoring_execution_status.is_none() {
        builder.monitoring_execution_status = "no value was set".parse::<crate::types::ExecutionStatus>().ok()
    }
    builder
}

pub(crate) fn monitoring_stopping_condition_correct_errors(
    mut builder: crate::types::builders::MonitoringStoppingConditionBuilder,
) -> crate::types::builders::MonitoringStoppingConditionBuilder {
    if builder.max_runtime_in_seconds.is_none() {
        builder.max_runtime_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn neo_vpc_config_correct_errors(mut builder: crate::types::builders::NeoVpcConfigBuilder) -> crate::types::builders::NeoVpcConfigBuilder {
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn offline_store_config_correct_errors(
    mut builder: crate::types::builders::OfflineStoreConfigBuilder,
) -> crate::types::builders::OfflineStoreConfigBuilder {
    if builder.s3_storage_config.is_none() {
        builder.s3_storage_config = {
            let builder = crate::types::builders::S3StorageConfigBuilder::default();
            Some(crate::serde_util::s3_storage_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn offline_store_status_correct_errors(
    mut builder: crate::types::builders::OfflineStoreStatusBuilder,
) -> crate::types::builders::OfflineStoreStatusBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::OfflineStoreStatusValue>().ok()
    }
    builder
}

pub(crate) fn output_data_config_correct_errors(
    mut builder: crate::types::builders::OutputDataConfigBuilder,
) -> crate::types::builders::OutputDataConfigBuilder {
    if builder.s3_output_path.is_none() {
        builder.s3_output_path = Some(Default::default())
    }
    builder
}

pub(crate) fn parallelism_configuration_correct_errors(
    mut builder: crate::types::builders::ParallelismConfigurationBuilder,
) -> crate::types::builders::ParallelismConfigurationBuilder {
    if builder.max_parallel_execution_steps.is_none() {
        builder.max_parallel_execution_steps = Some(Default::default())
    }
    builder
}

pub(crate) fn pending_deployment_summary_correct_errors(
    mut builder: crate::types::builders::PendingDeploymentSummaryBuilder,
) -> crate::types::builders::PendingDeploymentSummaryBuilder {
    if builder.endpoint_config_name.is_none() {
        builder.endpoint_config_name = Some(Default::default())
    }
    builder
}

pub(crate) fn processing_output_config_correct_errors(
    mut builder: crate::types::builders::ProcessingOutputConfigBuilder,
) -> crate::types::builders::ProcessingOutputConfigBuilder {
    if builder.outputs.is_none() {
        builder.outputs = Some(Default::default())
    }
    builder
}

pub(crate) fn processing_stopping_condition_correct_errors(
    mut builder: crate::types::builders::ProcessingStoppingConditionBuilder,
) -> crate::types::builders::ProcessingStoppingConditionBuilder {
    if builder.max_runtime_in_seconds.is_none() {
        builder.max_runtime_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn retry_strategy_correct_errors(
    mut builder: crate::types::builders::RetryStrategyBuilder,
) -> crate::types::builders::RetryStrategyBuilder {
    if builder.maximum_retry_attempts.is_none() {
        builder.maximum_retry_attempts = Some(Default::default())
    }
    builder
}

pub(crate) fn selective_execution_config_correct_errors(
    mut builder: crate::types::builders::SelectiveExecutionConfigBuilder,
) -> crate::types::builders::SelectiveExecutionConfigBuilder {
    if builder.selected_steps.is_none() {
        builder.selected_steps = Some(Default::default())
    }
    builder
}

pub(crate) fn shadow_mode_config_correct_errors(
    mut builder: crate::types::builders::ShadowModeConfigBuilder,
) -> crate::types::builders::ShadowModeConfigBuilder {
    if builder.source_model_variant_name.is_none() {
        builder.source_model_variant_name = Some(Default::default())
    }
    if builder.shadow_model_variants.is_none() {
        builder.shadow_model_variants = Some(Default::default())
    }
    builder
}

pub(crate) fn source_algorithm_specification_correct_errors(
    mut builder: crate::types::builders::SourceAlgorithmSpecificationBuilder,
) -> crate::types::builders::SourceAlgorithmSpecificationBuilder {
    if builder.source_algorithms.is_none() {
        builder.source_algorithms = Some(Default::default())
    }
    builder
}

pub(crate) fn tensor_board_output_config_correct_errors(
    mut builder: crate::types::builders::TensorBoardOutputConfigBuilder,
) -> crate::types::builders::TensorBoardOutputConfigBuilder {
    if builder.s3_output_path.is_none() {
        builder.s3_output_path = Some(Default::default())
    }
    builder
}

pub(crate) fn transform_output_correct_errors(
    mut builder: crate::types::builders::TransformOutputBuilder,
) -> crate::types::builders::TransformOutputBuilder {
    if builder.s3_output_path.is_none() {
        builder.s3_output_path = Some(Default::default())
    }
    builder
}

pub(crate) fn trial_component_source_correct_errors(
    mut builder: crate::types::builders::TrialComponentSourceBuilder,
) -> crate::types::builders::TrialComponentSourceBuilder {
    if builder.source_arn.is_none() {
        builder.source_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn trial_source_correct_errors(mut builder: crate::types::builders::TrialSourceBuilder) -> crate::types::builders::TrialSourceBuilder {
    if builder.source_arn.is_none() {
        builder.source_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_config_correct_errors(mut builder: crate::types::builders::VpcConfigBuilder) -> crate::types::builders::VpcConfigBuilder {
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn warm_pool_status_correct_errors(
    mut builder: crate::types::builders::WarmPoolStatusBuilder,
) -> crate::types::builders::WarmPoolStatusBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::WarmPoolResourceStatus>().ok()
    }
    builder
}

pub(crate) fn monitoring_cluster_config_correct_errors(
    mut builder: crate::types::builders::MonitoringClusterConfigBuilder,
) -> crate::types::builders::MonitoringClusterConfigBuilder {
    if builder.instance_count.is_none() {
        builder.instance_count = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::ProcessingInstanceType>().ok()
    }
    if builder.volume_size_in_gb.is_none() {
        builder.volume_size_in_gb = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_limits_correct_errors(
    mut builder: crate::types::builders::ResourceLimitsBuilder,
) -> crate::types::builders::ResourceLimitsBuilder {
    if builder.max_parallel_training_jobs.is_none() {
        builder.max_parallel_training_jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn annotation_consolidation_config_correct_errors(
    mut builder: crate::types::builders::AnnotationConsolidationConfigBuilder,
) -> crate::types::builders::AnnotationConsolidationConfigBuilder {
    if builder.annotation_consolidation_lambda_arn.is_none() {
        builder.annotation_consolidation_lambda_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn processing_cluster_config_correct_errors(
    mut builder: crate::types::builders::ProcessingClusterConfigBuilder,
) -> crate::types::builders::ProcessingClusterConfigBuilder {
    if builder.instance_count.is_none() {
        builder.instance_count = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::ProcessingInstanceType>().ok()
    }
    if builder.volume_size_in_gb.is_none() {
        builder.volume_size_in_gb = Some(Default::default())
    }
    builder
}

pub(crate) fn transform_data_source_correct_errors(
    mut builder: crate::types::builders::TransformDataSourceBuilder,
) -> crate::types::builders::TransformDataSourceBuilder {
    if builder.s3_data_source.is_none() {
        builder.s3_data_source = {
            let builder = crate::types::builders::TransformS3DataSourceBuilder::default();
            Some(crate::serde_util::transform_s3_data_source_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn additional_inference_specification_definition_correct_errors(
    mut builder: crate::types::builders::AdditionalInferenceSpecificationDefinitionBuilder,
) -> crate::types::builders::AdditionalInferenceSpecificationDefinitionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.containers.is_none() {
        builder.containers = Some(Default::default())
    }
    builder
}

pub(crate) fn additional_s3_data_source_correct_errors(
    mut builder: crate::types::builders::AdditionalS3DataSourceBuilder,
) -> crate::types::builders::AdditionalS3DataSourceBuilder {
    if builder.s3_data_type.is_none() {
        builder.s3_data_type = "no value was set".parse::<crate::types::AdditionalS3DataSourceDataType>().ok()
    }
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn agent_version_correct_errors(mut builder: crate::types::builders::AgentVersionBuilder) -> crate::types::builders::AgentVersionBuilder {
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.agent_count.is_none() {
        builder.agent_count = Some(Default::default())
    }
    builder
}

pub(crate) fn algorithm_summary_correct_errors(
    mut builder: crate::types::builders::AlgorithmSummaryBuilder,
) -> crate::types::builders::AlgorithmSummaryBuilder {
    if builder.algorithm_name.is_none() {
        builder.algorithm_name = Some(Default::default())
    }
    if builder.algorithm_arn.is_none() {
        builder.algorithm_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.algorithm_status.is_none() {
        builder.algorithm_status = "no value was set".parse::<crate::types::AlgorithmStatus>().ok()
    }
    builder
}

pub(crate) fn auto_ml_channel_correct_errors(
    mut builder: crate::types::builders::AutoMlChannelBuilder,
) -> crate::types::builders::AutoMlChannelBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::AutoMlDataSourceBuilder::default();
            Some(crate::serde_util::auto_ml_data_source_correct_errors(builder).build())
        }
    }
    if builder.target_attribute_name.is_none() {
        builder.target_attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_ml_job_summary_correct_errors(
    mut builder: crate::types::builders::AutoMlJobSummaryBuilder,
) -> crate::types::builders::AutoMlJobSummaryBuilder {
    if builder.auto_ml_job_name.is_none() {
        builder.auto_ml_job_name = Some(Default::default())
    }
    if builder.auto_ml_job_arn.is_none() {
        builder.auto_ml_job_arn = Some(Default::default())
    }
    if builder.auto_ml_job_status.is_none() {
        builder.auto_ml_job_status = "no value was set".parse::<crate::types::AutoMlJobStatus>().ok()
    }
    if builder.auto_ml_job_secondary_status.is_none() {
        builder.auto_ml_job_secondary_status = "no value was set".parse::<crate::types::AutoMlJobSecondaryStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn batch_describe_model_package_error_correct_errors(
    mut builder: crate::types::builders::BatchDescribeModelPackageErrorBuilder,
) -> crate::types::builders::BatchDescribeModelPackageErrorBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_response.is_none() {
        builder.error_response = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_describe_model_package_summary_correct_errors(
    mut builder: crate::types::builders::BatchDescribeModelPackageSummaryBuilder,
) -> crate::types::builders::BatchDescribeModelPackageSummaryBuilder {
    if builder.model_package_group_name.is_none() {
        builder.model_package_group_name = Some(Default::default())
    }
    if builder.model_package_arn.is_none() {
        builder.model_package_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.inference_specification.is_none() {
        builder.inference_specification = {
            let builder = crate::types::builders::InferenceSpecificationBuilder::default();
            Some(crate::serde_util::inference_specification_correct_errors(builder).build())
        }
    }
    if builder.model_package_status.is_none() {
        builder.model_package_status = "no value was set".parse::<crate::types::ModelPackageStatus>().ok()
    }
    builder
}

pub(crate) fn batch_transform_input_correct_errors(
    mut builder: crate::types::builders::BatchTransformInputBuilder,
) -> crate::types::builders::BatchTransformInputBuilder {
    if builder.data_captured_destination_s3_uri.is_none() {
        builder.data_captured_destination_s3_uri = Some(Default::default())
    }
    if builder.dataset_format.is_none() {
        builder.dataset_format = {
            let builder = crate::types::builders::MonitoringDatasetFormatBuilder::default();
            Some(builder.build())
        }
    }
    if builder.local_path.is_none() {
        builder.local_path = Some(Default::default())
    }
    builder
}

pub(crate) fn blue_green_update_policy_correct_errors(
    mut builder: crate::types::builders::BlueGreenUpdatePolicyBuilder,
) -> crate::types::builders::BlueGreenUpdatePolicyBuilder {
    if builder.traffic_routing_configuration.is_none() {
        builder.traffic_routing_configuration = {
            let builder = crate::types::builders::TrafficRoutingConfigBuilder::default();
            Some(crate::serde_util::traffic_routing_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn channel_correct_errors(mut builder: crate::types::builders::ChannelBuilder) -> crate::types::builders::ChannelBuilder {
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::DataSourceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn clarify_explainer_config_correct_errors(
    mut builder: crate::types::builders::ClarifyExplainerConfigBuilder,
) -> crate::types::builders::ClarifyExplainerConfigBuilder {
    if builder.shap_config.is_none() {
        builder.shap_config = {
            let builder = crate::types::builders::ClarifyShapConfigBuilder::default();
            Some(crate::serde_util::clarify_shap_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn code_repository_summary_correct_errors(
    mut builder: crate::types::builders::CodeRepositorySummaryBuilder,
) -> crate::types::builders::CodeRepositorySummaryBuilder {
    if builder.code_repository_name.is_none() {
        builder.code_repository_name = Some(Default::default())
    }
    if builder.code_repository_arn.is_none() {
        builder.code_repository_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn cognito_config_correct_errors(
    mut builder: crate::types::builders::CognitoConfigBuilder,
) -> crate::types::builders::CognitoConfigBuilder {
    if builder.user_pool.is_none() {
        builder.user_pool = Some(Default::default())
    }
    if builder.client_id.is_none() {
        builder.client_id = Some(Default::default())
    }
    builder
}

pub(crate) fn compilation_job_summary_correct_errors(
    mut builder: crate::types::builders::CompilationJobSummaryBuilder,
) -> crate::types::builders::CompilationJobSummaryBuilder {
    if builder.compilation_job_name.is_none() {
        builder.compilation_job_name = Some(Default::default())
    }
    if builder.compilation_job_arn.is_none() {
        builder.compilation_job_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.compilation_job_status.is_none() {
        builder.compilation_job_status = "no value was set".parse::<crate::types::CompilationJobStatus>().ok()
    }
    builder
}

pub(crate) fn data_catalog_config_correct_errors(
    mut builder: crate::types::builders::DataCatalogConfigBuilder,
) -> crate::types::builders::DataCatalogConfigBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn debug_rule_configuration_correct_errors(
    mut builder: crate::types::builders::DebugRuleConfigurationBuilder,
) -> crate::types::builders::DebugRuleConfigurationBuilder {
    if builder.rule_configuration_name.is_none() {
        builder.rule_configuration_name = Some(Default::default())
    }
    if builder.rule_evaluator_image.is_none() {
        builder.rule_evaluator_image = Some(Default::default())
    }
    builder
}

pub(crate) fn deployment_stage_status_summary_correct_errors(
    mut builder: crate::types::builders::DeploymentStageStatusSummaryBuilder,
) -> crate::types::builders::DeploymentStageStatusSummaryBuilder {
    if builder.stage_name.is_none() {
        builder.stage_name = Some(Default::default())
    }
    if builder.device_selection_config.is_none() {
        builder.device_selection_config = {
            let builder = crate::types::builders::DeviceSelectionConfigBuilder::default();
            Some(crate::serde_util::device_selection_config_correct_errors(builder).build())
        }
    }
    if builder.deployment_config.is_none() {
        builder.deployment_config = {
            let builder = crate::types::builders::EdgeDeploymentConfigBuilder::default();
            Some(crate::serde_util::edge_deployment_config_correct_errors(builder).build())
        }
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = {
            let builder = crate::types::builders::EdgeDeploymentStatusBuilder::default();
            Some(crate::serde_util::edge_deployment_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn device_deployment_summary_correct_errors(
    mut builder: crate::types::builders::DeviceDeploymentSummaryBuilder,
) -> crate::types::builders::DeviceDeploymentSummaryBuilder {
    if builder.edge_deployment_plan_arn.is_none() {
        builder.edge_deployment_plan_arn = Some(Default::default())
    }
    if builder.edge_deployment_plan_name.is_none() {
        builder.edge_deployment_plan_name = Some(Default::default())
    }
    if builder.stage_name.is_none() {
        builder.stage_name = Some(Default::default())
    }
    if builder.device_name.is_none() {
        builder.device_name = Some(Default::default())
    }
    if builder.device_arn.is_none() {
        builder.device_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn device_fleet_summary_correct_errors(
    mut builder: crate::types::builders::DeviceFleetSummaryBuilder,
) -> crate::types::builders::DeviceFleetSummaryBuilder {
    if builder.device_fleet_arn.is_none() {
        builder.device_fleet_arn = Some(Default::default())
    }
    if builder.device_fleet_name.is_none() {
        builder.device_fleet_name = Some(Default::default())
    }
    builder
}

pub(crate) fn device_summary_correct_errors(
    mut builder: crate::types::builders::DeviceSummaryBuilder,
) -> crate::types::builders::DeviceSummaryBuilder {
    if builder.device_name.is_none() {
        builder.device_name = Some(Default::default())
    }
    if builder.device_arn.is_none() {
        builder.device_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn edge_deployment_model_config_correct_errors(
    mut builder: crate::types::builders::EdgeDeploymentModelConfigBuilder,
) -> crate::types::builders::EdgeDeploymentModelConfigBuilder {
    if builder.model_handle.is_none() {
        builder.model_handle = Some(Default::default())
    }
    if builder.edge_packaging_job_name.is_none() {
        builder.edge_packaging_job_name = Some(Default::default())
    }
    builder
}

pub(crate) fn edge_deployment_plan_summary_correct_errors(
    mut builder: crate::types::builders::EdgeDeploymentPlanSummaryBuilder,
) -> crate::types::builders::EdgeDeploymentPlanSummaryBuilder {
    if builder.edge_deployment_plan_arn.is_none() {
        builder.edge_deployment_plan_arn = Some(Default::default())
    }
    if builder.edge_deployment_plan_name.is_none() {
        builder.edge_deployment_plan_name = Some(Default::default())
    }
    if builder.device_fleet_name.is_none() {
        builder.device_fleet_name = Some(Default::default())
    }
    if builder.edge_deployment_success.is_none() {
        builder.edge_deployment_success = Some(Default::default())
    }
    if builder.edge_deployment_pending.is_none() {
        builder.edge_deployment_pending = Some(Default::default())
    }
    if builder.edge_deployment_failed.is_none() {
        builder.edge_deployment_failed = Some(Default::default())
    }
    builder
}

pub(crate) fn edge_model_correct_errors(mut builder: crate::types::builders::EdgeModelBuilder) -> crate::types::builders::EdgeModelBuilder {
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.model_version.is_none() {
        builder.model_version = Some(Default::default())
    }
    builder
}

pub(crate) fn edge_model_stat_correct_errors(
    mut builder: crate::types::builders::EdgeModelStatBuilder,
) -> crate::types::builders::EdgeModelStatBuilder {
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.model_version.is_none() {
        builder.model_version = Some(Default::default())
    }
    if builder.offline_device_count.is_none() {
        builder.offline_device_count = Some(Default::default())
    }
    if builder.connected_device_count.is_none() {
        builder.connected_device_count = Some(Default::default())
    }
    if builder.active_device_count.is_none() {
        builder.active_device_count = Some(Default::default())
    }
    if builder.sampling_device_count.is_none() {
        builder.sampling_device_count = Some(Default::default())
    }
    builder
}

pub(crate) fn edge_packaging_job_summary_correct_errors(
    mut builder: crate::types::builders::EdgePackagingJobSummaryBuilder,
) -> crate::types::builders::EdgePackagingJobSummaryBuilder {
    if builder.edge_packaging_job_arn.is_none() {
        builder.edge_packaging_job_arn = Some(Default::default())
    }
    if builder.edge_packaging_job_name.is_none() {
        builder.edge_packaging_job_name = Some(Default::default())
    }
    if builder.edge_packaging_job_status.is_none() {
        builder.edge_packaging_job_status = "no value was set".parse::<crate::types::EdgePackagingJobStatus>().ok()
    }
    builder
}

pub(crate) fn endpoint_config_summary_correct_errors(
    mut builder: crate::types::builders::EndpointConfigSummaryBuilder,
) -> crate::types::builders::EndpointConfigSummaryBuilder {
    if builder.endpoint_config_name.is_none() {
        builder.endpoint_config_name = Some(Default::default())
    }
    if builder.endpoint_config_arn.is_none() {
        builder.endpoint_config_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn endpoint_input_correct_errors(
    mut builder: crate::types::builders::EndpointInputBuilder,
) -> crate::types::builders::EndpointInputBuilder {
    if builder.endpoint_name.is_none() {
        builder.endpoint_name = Some(Default::default())
    }
    if builder.local_path.is_none() {
        builder.local_path = Some(Default::default())
    }
    builder
}

pub(crate) fn endpoint_performance_correct_errors(
    mut builder: crate::types::builders::EndpointPerformanceBuilder,
) -> crate::types::builders::EndpointPerformanceBuilder {
    if builder.metrics.is_none() {
        builder.metrics = {
            let builder = crate::types::builders::InferenceMetricsBuilder::default();
            Some(crate::serde_util::inference_metrics_correct_errors(builder).build())
        }
    }
    if builder.endpoint_info.is_none() {
        builder.endpoint_info = {
            let builder = crate::types::builders::EndpointInfoBuilder::default();
            Some(crate::serde_util::endpoint_info_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn endpoint_summary_correct_errors(
    mut builder: crate::types::builders::EndpointSummaryBuilder,
) -> crate::types::builders::EndpointSummaryBuilder {
    if builder.endpoint_name.is_none() {
        builder.endpoint_name = Some(Default::default())
    }
    if builder.endpoint_arn.is_none() {
        builder.endpoint_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.endpoint_status.is_none() {
        builder.endpoint_status = "no value was set".parse::<crate::types::EndpointStatus>().ok()
    }
    builder
}

pub(crate) fn feature_group_summary_correct_errors(
    mut builder: crate::types::builders::FeatureGroupSummaryBuilder,
) -> crate::types::builders::FeatureGroupSummaryBuilder {
    if builder.feature_group_name.is_none() {
        builder.feature_group_name = Some(Default::default())
    }
    if builder.feature_group_arn.is_none() {
        builder.feature_group_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn final_auto_ml_job_objective_metric_correct_errors(
    mut builder: crate::types::builders::FinalAutoMlJobObjectiveMetricBuilder,
) -> crate::types::builders::FinalAutoMlJobObjectiveMetricBuilder {
    if builder.metric_name.is_none() {
        builder.metric_name = "no value was set".parse::<crate::types::AutoMlMetricEnum>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn final_hyper_parameter_tuning_job_objective_metric_correct_errors(
    mut builder: crate::types::builders::FinalHyperParameterTuningJobObjectiveMetricBuilder,
) -> crate::types::builders::FinalHyperParameterTuningJobObjectiveMetricBuilder {
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_definition_summary_correct_errors(
    mut builder: crate::types::builders::FlowDefinitionSummaryBuilder,
) -> crate::types::builders::FlowDefinitionSummaryBuilder {
    if builder.flow_definition_name.is_none() {
        builder.flow_definition_name = Some(Default::default())
    }
    if builder.flow_definition_arn.is_none() {
        builder.flow_definition_arn = Some(Default::default())
    }
    if builder.flow_definition_status.is_none() {
        builder.flow_definition_status = "no value was set".parse::<crate::types::FlowDefinitionStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn hub_content_info_correct_errors(
    mut builder: crate::types::builders::HubContentInfoBuilder,
) -> crate::types::builders::HubContentInfoBuilder {
    if builder.hub_content_name.is_none() {
        builder.hub_content_name = Some(Default::default())
    }
    if builder.hub_content_arn.is_none() {
        builder.hub_content_arn = Some(Default::default())
    }
    if builder.hub_content_version.is_none() {
        builder.hub_content_version = Some(Default::default())
    }
    if builder.hub_content_type.is_none() {
        builder.hub_content_type = "no value was set".parse::<crate::types::HubContentType>().ok()
    }
    if builder.document_schema_version.is_none() {
        builder.document_schema_version = Some(Default::default())
    }
    if builder.hub_content_status.is_none() {
        builder.hub_content_status = "no value was set".parse::<crate::types::HubContentStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn hub_info_correct_errors(mut builder: crate::types::builders::HubInfoBuilder) -> crate::types::builders::HubInfoBuilder {
    if builder.hub_name.is_none() {
        builder.hub_name = Some(Default::default())
    }
    if builder.hub_arn.is_none() {
        builder.hub_arn = Some(Default::default())
    }
    if builder.hub_status.is_none() {
        builder.hub_status = "no value was set".parse::<crate::types::HubStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn human_loop_activation_conditions_config_correct_errors(
    mut builder: crate::types::builders::HumanLoopActivationConditionsConfigBuilder,
) -> crate::types::builders::HumanLoopActivationConditionsConfigBuilder {
    if builder.human_loop_activation_conditions.is_none() {
        builder.human_loop_activation_conditions = Some(Default::default())
    }
    builder
}

pub(crate) fn human_task_ui_summary_correct_errors(
    mut builder: crate::types::builders::HumanTaskUiSummaryBuilder,
) -> crate::types::builders::HumanTaskUiSummaryBuilder {
    if builder.human_task_ui_name.is_none() {
        builder.human_task_ui_name = Some(Default::default())
    }
    if builder.human_task_ui_arn.is_none() {
        builder.human_task_ui_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn hyper_parameter_algorithm_specification_correct_errors(
    mut builder: crate::types::builders::HyperParameterAlgorithmSpecificationBuilder,
) -> crate::types::builders::HyperParameterAlgorithmSpecificationBuilder {
    if builder.training_input_mode.is_none() {
        builder.training_input_mode = "no value was set".parse::<crate::types::TrainingInputMode>().ok()
    }
    builder
}

pub(crate) fn hyper_parameter_tuning_job_objective_correct_errors(
    mut builder: crate::types::builders::HyperParameterTuningJobObjectiveBuilder,
) -> crate::types::builders::HyperParameterTuningJobObjectiveBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::HyperParameterTuningJobObjectiveType>().ok()
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    builder
}

pub(crate) fn hyper_parameter_tuning_job_summary_correct_errors(
    mut builder: crate::types::builders::HyperParameterTuningJobSummaryBuilder,
) -> crate::types::builders::HyperParameterTuningJobSummaryBuilder {
    if builder.hyper_parameter_tuning_job_name.is_none() {
        builder.hyper_parameter_tuning_job_name = Some(Default::default())
    }
    if builder.hyper_parameter_tuning_job_arn.is_none() {
        builder.hyper_parameter_tuning_job_arn = Some(Default::default())
    }
    if builder.hyper_parameter_tuning_job_status.is_none() {
        builder.hyper_parameter_tuning_job_status = "no value was set".parse::<crate::types::HyperParameterTuningJobStatus>().ok()
    }
    if builder.strategy.is_none() {
        builder.strategy = "no value was set".parse::<crate::types::HyperParameterTuningJobStrategyType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.training_job_status_counters.is_none() {
        builder.training_job_status_counters = {
            let builder = crate::types::builders::TrainingJobStatusCountersBuilder::default();
            Some(builder.build())
        }
    }
    if builder.objective_status_counters.is_none() {
        builder.objective_status_counters = {
            let builder = crate::types::builders::ObjectiveStatusCountersBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn image_correct_errors(mut builder: crate::types::builders::ImageBuilder) -> crate::types::builders::ImageBuilder {
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.image_arn.is_none() {
        builder.image_arn = Some(Default::default())
    }
    if builder.image_name.is_none() {
        builder.image_name = Some(Default::default())
    }
    if builder.image_status.is_none() {
        builder.image_status = "no value was set".parse::<crate::types::ImageStatus>().ok()
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn image_config_correct_errors(mut builder: crate::types::builders::ImageConfigBuilder) -> crate::types::builders::ImageConfigBuilder {
    if builder.repository_access_mode.is_none() {
        builder.repository_access_mode = "no value was set".parse::<crate::types::RepositoryAccessMode>().ok()
    }
    builder
}

pub(crate) fn image_version_correct_errors(mut builder: crate::types::builders::ImageVersionBuilder) -> crate::types::builders::ImageVersionBuilder {
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.image_arn.is_none() {
        builder.image_arn = Some(Default::default())
    }
    if builder.image_version_arn.is_none() {
        builder.image_version_arn = Some(Default::default())
    }
    if builder.image_version_status.is_none() {
        builder.image_version_status = "no value was set".parse::<crate::types::ImageVersionStatus>().ok()
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn inference_experiment_summary_correct_errors(
    mut builder: crate::types::builders::InferenceExperimentSummaryBuilder,
) -> crate::types::builders::InferenceExperimentSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::InferenceExperimentType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::InferenceExperimentStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn inference_recommendation_correct_errors(
    mut builder: crate::types::builders::InferenceRecommendationBuilder,
) -> crate::types::builders::InferenceRecommendationBuilder {
    if builder.metrics.is_none() {
        builder.metrics = {
            let builder = crate::types::builders::RecommendationMetricsBuilder::default();
            Some(crate::serde_util::recommendation_metrics_correct_errors(builder).build())
        }
    }
    if builder.endpoint_configuration.is_none() {
        builder.endpoint_configuration = {
            let builder = crate::types::builders::EndpointOutputConfigurationBuilder::default();
            Some(crate::serde_util::endpoint_output_configuration_correct_errors(builder).build())
        }
    }
    if builder.model_configuration.is_none() {
        builder.model_configuration = {
            let builder = crate::types::builders::ModelConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn inference_recommendations_job_correct_errors(
    mut builder: crate::types::builders::InferenceRecommendationsJobBuilder,
) -> crate::types::builders::InferenceRecommendationsJobBuilder {
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.job_description.is_none() {
        builder.job_description = Some(Default::default())
    }
    if builder.job_type.is_none() {
        builder.job_type = "no value was set".parse::<crate::types::RecommendationJobType>().ok()
    }
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RecommendationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn inference_recommendations_job_step_correct_errors(
    mut builder: crate::types::builders::InferenceRecommendationsJobStepBuilder,
) -> crate::types::builders::InferenceRecommendationsJobStepBuilder {
    if builder.step_type.is_none() {
        builder.step_type = "no value was set".parse::<crate::types::RecommendationStepType>().ok()
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RecommendationJobStatus>().ok()
    }
    builder
}

pub(crate) fn labeling_job_for_workteam_summary_correct_errors(
    mut builder: crate::types::builders::LabelingJobForWorkteamSummaryBuilder,
) -> crate::types::builders::LabelingJobForWorkteamSummaryBuilder {
    if builder.job_reference_code.is_none() {
        builder.job_reference_code = Some(Default::default())
    }
    if builder.work_requester_account_id.is_none() {
        builder.work_requester_account_id = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn labeling_job_summary_correct_errors(
    mut builder: crate::types::builders::LabelingJobSummaryBuilder,
) -> crate::types::builders::LabelingJobSummaryBuilder {
    if builder.labeling_job_name.is_none() {
        builder.labeling_job_name = Some(Default::default())
    }
    if builder.labeling_job_arn.is_none() {
        builder.labeling_job_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.labeling_job_status.is_none() {
        builder.labeling_job_status = "no value was set".parse::<crate::types::LabelingJobStatus>().ok()
    }
    if builder.label_counters.is_none() {
        builder.label_counters = {
            let builder = crate::types::builders::LabelCountersBuilder::default();
            Some(builder.build())
        }
    }
    if builder.workteam_arn.is_none() {
        builder.workteam_arn = Some(Default::default())
    }
    if builder.pre_human_task_lambda_arn.is_none() {
        builder.pre_human_task_lambda_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn model_card_export_job_summary_correct_errors(
    mut builder: crate::types::builders::ModelCardExportJobSummaryBuilder,
) -> crate::types::builders::ModelCardExportJobSummaryBuilder {
    if builder.model_card_export_job_name.is_none() {
        builder.model_card_export_job_name = Some(Default::default())
    }
    if builder.model_card_export_job_arn.is_none() {
        builder.model_card_export_job_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ModelCardExportJobStatus>().ok()
    }
    if builder.model_card_name.is_none() {
        builder.model_card_name = Some(Default::default())
    }
    if builder.model_card_version.is_none() {
        builder.model_card_version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn model_card_summary_correct_errors(
    mut builder: crate::types::builders::ModelCardSummaryBuilder,
) -> crate::types::builders::ModelCardSummaryBuilder {
    if builder.model_card_name.is_none() {
        builder.model_card_name = Some(Default::default())
    }
    if builder.model_card_arn.is_none() {
        builder.model_card_arn = Some(Default::default())
    }
    if builder.model_card_status.is_none() {
        builder.model_card_status = "no value was set".parse::<crate::types::ModelCardStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn model_card_version_summary_correct_errors(
    mut builder: crate::types::builders::ModelCardVersionSummaryBuilder,
) -> crate::types::builders::ModelCardVersionSummaryBuilder {
    if builder.model_card_name.is_none() {
        builder.model_card_name = Some(Default::default())
    }
    if builder.model_card_arn.is_none() {
        builder.model_card_arn = Some(Default::default())
    }
    if builder.model_card_status.is_none() {
        builder.model_card_status = "no value was set".parse::<crate::types::ModelCardStatus>().ok()
    }
    if builder.model_card_version.is_none() {
        builder.model_card_version = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn model_data_source_correct_errors(
    mut builder: crate::types::builders::ModelDataSourceBuilder,
) -> crate::types::builders::ModelDataSourceBuilder {
    if builder.s3_data_source.is_none() {
        builder.s3_data_source = {
            let builder = crate::types::builders::S3ModelDataSourceBuilder::default();
            Some(crate::serde_util::s3_model_data_source_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn model_metadata_summary_correct_errors(
    mut builder: crate::types::builders::ModelMetadataSummaryBuilder,
) -> crate::types::builders::ModelMetadataSummaryBuilder {
    if builder.domain.is_none() {
        builder.domain = Some(Default::default())
    }
    if builder.framework.is_none() {
        builder.framework = Some(Default::default())
    }
    if builder.task.is_none() {
        builder.task = Some(Default::default())
    }
    if builder.model.is_none() {
        builder.model = Some(Default::default())
    }
    if builder.framework_version.is_none() {
        builder.framework_version = Some(Default::default())
    }
    builder
}

pub(crate) fn model_package_group_summary_correct_errors(
    mut builder: crate::types::builders::ModelPackageGroupSummaryBuilder,
) -> crate::types::builders::ModelPackageGroupSummaryBuilder {
    if builder.model_package_group_name.is_none() {
        builder.model_package_group_name = Some(Default::default())
    }
    if builder.model_package_group_arn.is_none() {
        builder.model_package_group_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.model_package_group_status.is_none() {
        builder.model_package_group_status = "no value was set".parse::<crate::types::ModelPackageGroupStatus>().ok()
    }
    builder
}

pub(crate) fn model_package_summary_correct_errors(
    mut builder: crate::types::builders::ModelPackageSummaryBuilder,
) -> crate::types::builders::ModelPackageSummaryBuilder {
    if builder.model_package_name.is_none() {
        builder.model_package_name = Some(Default::default())
    }
    if builder.model_package_arn.is_none() {
        builder.model_package_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.model_package_status.is_none() {
        builder.model_package_status = "no value was set".parse::<crate::types::ModelPackageStatus>().ok()
    }
    builder
}

pub(crate) fn model_summary_correct_errors(mut builder: crate::types::builders::ModelSummaryBuilder) -> crate::types::builders::ModelSummaryBuilder {
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn model_variant_config_summary_correct_errors(
    mut builder: crate::types::builders::ModelVariantConfigSummaryBuilder,
) -> crate::types::builders::ModelVariantConfigSummaryBuilder {
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.variant_name.is_none() {
        builder.variant_name = Some(Default::default())
    }
    if builder.infrastructure_config.is_none() {
        builder.infrastructure_config = {
            let builder = crate::types::builders::ModelInfrastructureConfigBuilder::default();
            Some(crate::serde_util::model_infrastructure_config_correct_errors(builder).build())
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ModelVariantStatus>().ok()
    }
    builder
}

pub(crate) fn monitoring_alert_history_summary_correct_errors(
    mut builder: crate::types::builders::MonitoringAlertHistorySummaryBuilder,
) -> crate::types::builders::MonitoringAlertHistorySummaryBuilder {
    if builder.monitoring_schedule_name.is_none() {
        builder.monitoring_schedule_name = Some(Default::default())
    }
    if builder.monitoring_alert_name.is_none() {
        builder.monitoring_alert_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.alert_status.is_none() {
        builder.alert_status = "no value was set".parse::<crate::types::MonitoringAlertStatus>().ok()
    }
    builder
}

pub(crate) fn monitoring_alert_summary_correct_errors(
    mut builder: crate::types::builders::MonitoringAlertSummaryBuilder,
) -> crate::types::builders::MonitoringAlertSummaryBuilder {
    if builder.monitoring_alert_name.is_none() {
        builder.monitoring_alert_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.alert_status.is_none() {
        builder.alert_status = "no value was set".parse::<crate::types::MonitoringAlertStatus>().ok()
    }
    if builder.datapoints_to_alert.is_none() {
        builder.datapoints_to_alert = Some(Default::default())
    }
    if builder.evaluation_period.is_none() {
        builder.evaluation_period = Some(Default::default())
    }
    if builder.actions.is_none() {
        builder.actions = {
            let builder = crate::types::builders::MonitoringAlertActionsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn monitoring_job_definition_correct_errors(
    mut builder: crate::types::builders::MonitoringJobDefinitionBuilder,
) -> crate::types::builders::MonitoringJobDefinitionBuilder {
    if builder.monitoring_inputs.is_none() {
        builder.monitoring_inputs = Some(Default::default())
    }
    if builder.monitoring_output_config.is_none() {
        builder.monitoring_output_config = {
            let builder = crate::types::builders::MonitoringOutputConfigBuilder::default();
            Some(crate::serde_util::monitoring_output_config_correct_errors(builder).build())
        }
    }
    if builder.monitoring_resources.is_none() {
        builder.monitoring_resources = {
            let builder = crate::types::builders::MonitoringResourcesBuilder::default();
            Some(crate::serde_util::monitoring_resources_correct_errors(builder).build())
        }
    }
    if builder.monitoring_app_specification.is_none() {
        builder.monitoring_app_specification = {
            let builder = crate::types::builders::MonitoringAppSpecificationBuilder::default();
            Some(crate::serde_util::monitoring_app_specification_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn monitoring_job_definition_summary_correct_errors(
    mut builder: crate::types::builders::MonitoringJobDefinitionSummaryBuilder,
) -> crate::types::builders::MonitoringJobDefinitionSummaryBuilder {
    if builder.monitoring_job_definition_name.is_none() {
        builder.monitoring_job_definition_name = Some(Default::default())
    }
    if builder.monitoring_job_definition_arn.is_none() {
        builder.monitoring_job_definition_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.endpoint_name.is_none() {
        builder.endpoint_name = Some(Default::default())
    }
    builder
}

pub(crate) fn monitoring_schedule_summary_correct_errors(
    mut builder: crate::types::builders::MonitoringScheduleSummaryBuilder,
) -> crate::types::builders::MonitoringScheduleSummaryBuilder {
    if builder.monitoring_schedule_name.is_none() {
        builder.monitoring_schedule_name = Some(Default::default())
    }
    if builder.monitoring_schedule_arn.is_none() {
        builder.monitoring_schedule_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.monitoring_schedule_status.is_none() {
        builder.monitoring_schedule_status = "no value was set".parse::<crate::types::ScheduleStatus>().ok()
    }
    builder
}

pub(crate) fn notebook_instance_lifecycle_config_summary_correct_errors(
    mut builder: crate::types::builders::NotebookInstanceLifecycleConfigSummaryBuilder,
) -> crate::types::builders::NotebookInstanceLifecycleConfigSummaryBuilder {
    if builder.notebook_instance_lifecycle_config_name.is_none() {
        builder.notebook_instance_lifecycle_config_name = Some(Default::default())
    }
    if builder.notebook_instance_lifecycle_config_arn.is_none() {
        builder.notebook_instance_lifecycle_config_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn notebook_instance_summary_correct_errors(
    mut builder: crate::types::builders::NotebookInstanceSummaryBuilder,
) -> crate::types::builders::NotebookInstanceSummaryBuilder {
    if builder.notebook_instance_name.is_none() {
        builder.notebook_instance_name = Some(Default::default())
    }
    if builder.notebook_instance_arn.is_none() {
        builder.notebook_instance_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_correct_errors(mut builder: crate::types::builders::ParameterBuilder) -> crate::types::builders::ParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn processing_input_correct_errors(
    mut builder: crate::types::builders::ProcessingInputBuilder,
) -> crate::types::builders::ProcessingInputBuilder {
    if builder.input_name.is_none() {
        builder.input_name = Some(Default::default())
    }
    builder
}

pub(crate) fn processing_job_summary_correct_errors(
    mut builder: crate::types::builders::ProcessingJobSummaryBuilder,
) -> crate::types::builders::ProcessingJobSummaryBuilder {
    if builder.processing_job_name.is_none() {
        builder.processing_job_name = Some(Default::default())
    }
    if builder.processing_job_arn.is_none() {
        builder.processing_job_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.processing_job_status.is_none() {
        builder.processing_job_status = "no value was set".parse::<crate::types::ProcessingJobStatus>().ok()
    }
    builder
}

pub(crate) fn production_variant_correct_errors(
    mut builder: crate::types::builders::ProductionVariantBuilder,
) -> crate::types::builders::ProductionVariantBuilder {
    if builder.variant_name.is_none() {
        builder.variant_name = Some(Default::default())
    }
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    builder
}

pub(crate) fn production_variant_summary_correct_errors(
    mut builder: crate::types::builders::ProductionVariantSummaryBuilder,
) -> crate::types::builders::ProductionVariantSummaryBuilder {
    if builder.variant_name.is_none() {
        builder.variant_name = Some(Default::default())
    }
    builder
}

pub(crate) fn profiler_rule_configuration_correct_errors(
    mut builder: crate::types::builders::ProfilerRuleConfigurationBuilder,
) -> crate::types::builders::ProfilerRuleConfigurationBuilder {
    if builder.rule_configuration_name.is_none() {
        builder.rule_configuration_name = Some(Default::default())
    }
    if builder.rule_evaluator_image.is_none() {
        builder.rule_evaluator_image = Some(Default::default())
    }
    builder
}

pub(crate) fn project_summary_correct_errors(
    mut builder: crate::types::builders::ProjectSummaryBuilder,
) -> crate::types::builders::ProjectSummaryBuilder {
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.project_status.is_none() {
        builder.project_status = "no value was set".parse::<crate::types::ProjectStatus>().ok()
    }
    builder
}

pub(crate) fn r_studio_server_pro_domain_settings_correct_errors(
    mut builder: crate::types::builders::RStudioServerProDomainSettingsBuilder,
) -> crate::types::builders::RStudioServerProDomainSettingsBuilder {
    if builder.domain_execution_role_arn.is_none() {
        builder.domain_execution_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_job_vpc_config_correct_errors(
    mut builder: crate::types::builders::RecommendationJobVpcConfigBuilder,
) -> crate::types::builders::RecommendationJobVpcConfigBuilder {
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn rendering_error_correct_errors(
    mut builder: crate::types::builders::RenderingErrorBuilder,
) -> crate::types::builders::RenderingErrorBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_catalog_correct_errors(
    mut builder: crate::types::builders::ResourceCatalogBuilder,
) -> crate::types::builders::ResourceCatalogBuilder {
    if builder.resource_catalog_arn.is_none() {
        builder.resource_catalog_arn = Some(Default::default())
    }
    if builder.resource_catalog_name.is_none() {
        builder.resource_catalog_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn rolling_update_policy_correct_errors(
    mut builder: crate::types::builders::RollingUpdatePolicyBuilder,
) -> crate::types::builders::RollingUpdatePolicyBuilder {
    if builder.maximum_batch_size.is_none() {
        builder.maximum_batch_size = {
            let builder = crate::types::builders::CapacitySizeBuilder::default();
            Some(crate::serde_util::capacity_size_correct_errors(builder).build())
        }
    }
    if builder.wait_interval_in_seconds.is_none() {
        builder.wait_interval_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_storage_config_correct_errors(
    mut builder: crate::types::builders::S3StorageConfigBuilder,
) -> crate::types::builders::S3StorageConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn schedule_config_correct_errors(
    mut builder: crate::types::builders::ScheduleConfigBuilder,
) -> crate::types::builders::ScheduleConfigBuilder {
    if builder.schedule_expression.is_none() {
        builder.schedule_expression = Some(Default::default())
    }
    builder
}

pub(crate) fn secondary_status_transition_correct_errors(
    mut builder: crate::types::builders::SecondaryStatusTransitionBuilder,
) -> crate::types::builders::SecondaryStatusTransitionBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SecondaryStatus>().ok()
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn source_ip_config_correct_errors(
    mut builder: crate::types::builders::SourceIpConfigBuilder,
) -> crate::types::builders::SourceIpConfigBuilder {
    if builder.cidrs.is_none() {
        builder.cidrs = Some(Default::default())
    }
    builder
}

pub(crate) fn tabular_job_config_correct_errors(
    mut builder: crate::types::builders::TabularJobConfigBuilder,
) -> crate::types::builders::TabularJobConfigBuilder {
    if builder.target_attribute_name.is_none() {
        builder.target_attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn target_platform_correct_errors(
    mut builder: crate::types::builders::TargetPlatformBuilder,
) -> crate::types::builders::TargetPlatformBuilder {
    if builder.os.is_none() {
        builder.os = "no value was set".parse::<crate::types::TargetPlatformOs>().ok()
    }
    if builder.arch.is_none() {
        builder.arch = "no value was set".parse::<crate::types::TargetPlatformArch>().ok()
    }
    builder
}

pub(crate) fn text_classification_job_config_correct_errors(
    mut builder: crate::types::builders::TextClassificationJobConfigBuilder,
) -> crate::types::builders::TextClassificationJobConfigBuilder {
    if builder.content_column.is_none() {
        builder.content_column = Some(Default::default())
    }
    if builder.target_label_column.is_none() {
        builder.target_label_column = Some(Default::default())
    }
    builder
}

pub(crate) fn time_series_forecasting_job_config_correct_errors(
    mut builder: crate::types::builders::TimeSeriesForecastingJobConfigBuilder,
) -> crate::types::builders::TimeSeriesForecastingJobConfigBuilder {
    if builder.forecast_frequency.is_none() {
        builder.forecast_frequency = Some(Default::default())
    }
    if builder.forecast_horizon.is_none() {
        builder.forecast_horizon = Some(Default::default())
    }
    if builder.time_series_config.is_none() {
        builder.time_series_config = {
            let builder = crate::types::builders::TimeSeriesConfigBuilder::default();
            Some(crate::serde_util::time_series_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn training_image_config_correct_errors(
    mut builder: crate::types::builders::TrainingImageConfigBuilder,
) -> crate::types::builders::TrainingImageConfigBuilder {
    if builder.training_repository_access_mode.is_none() {
        builder.training_repository_access_mode = "no value was set".parse::<crate::types::TrainingRepositoryAccessMode>().ok()
    }
    builder
}

pub(crate) fn training_job_summary_correct_errors(
    mut builder: crate::types::builders::TrainingJobSummaryBuilder,
) -> crate::types::builders::TrainingJobSummaryBuilder {
    if builder.training_job_name.is_none() {
        builder.training_job_name = Some(Default::default())
    }
    if builder.training_job_arn.is_none() {
        builder.training_job_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.training_job_status.is_none() {
        builder.training_job_status = "no value was set".parse::<crate::types::TrainingJobStatus>().ok()
    }
    builder
}

pub(crate) fn transform_job_summary_correct_errors(
    mut builder: crate::types::builders::TransformJobSummaryBuilder,
) -> crate::types::builders::TransformJobSummaryBuilder {
    if builder.transform_job_name.is_none() {
        builder.transform_job_name = Some(Default::default())
    }
    if builder.transform_job_arn.is_none() {
        builder.transform_job_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.transform_job_status.is_none() {
        builder.transform_job_status = "no value was set".parse::<crate::types::TransformJobStatus>().ok()
    }
    builder
}

pub(crate) fn trial_component_artifact_correct_errors(
    mut builder: crate::types::builders::TrialComponentArtifactBuilder,
) -> crate::types::builders::TrialComponentArtifactBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn workforce_vpc_config_response_correct_errors(
    mut builder: crate::types::builders::WorkforceVpcConfigResponseBuilder,
) -> crate::types::builders::WorkforceVpcConfigResponseBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn transform_s3_data_source_correct_errors(
    mut builder: crate::types::builders::TransformS3DataSourceBuilder,
) -> crate::types::builders::TransformS3DataSourceBuilder {
    if builder.s3_data_type.is_none() {
        builder.s3_data_type = "no value was set".parse::<crate::types::S3DataType>().ok()
    }
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn algorithm_status_item_correct_errors(
    mut builder: crate::types::builders::AlgorithmStatusItemBuilder,
) -> crate::types::builders::AlgorithmStatusItemBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DetailedAlgorithmStatus>().ok()
    }
    builder
}

pub(crate) fn algorithm_validation_profile_correct_errors(
    mut builder: crate::types::builders::AlgorithmValidationProfileBuilder,
) -> crate::types::builders::AlgorithmValidationProfileBuilder {
    if builder.profile_name.is_none() {
        builder.profile_name = Some(Default::default())
    }
    if builder.training_job_definition.is_none() {
        builder.training_job_definition = {
            let builder = crate::types::builders::TrainingJobDefinitionBuilder::default();
            Some(crate::serde_util::training_job_definition_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn artifact_source_type_correct_errors(
    mut builder: crate::types::builders::ArtifactSourceTypeBuilder,
) -> crate::types::builders::ArtifactSourceTypeBuilder {
    if builder.source_id_type.is_none() {
        builder.source_id_type = "no value was set".parse::<crate::types::ArtifactSourceIdType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_ml_candidate_step_correct_errors(
    mut builder: crate::types::builders::AutoMlCandidateStepBuilder,
) -> crate::types::builders::AutoMlCandidateStepBuilder {
    if builder.candidate_step_type.is_none() {
        builder.candidate_step_type = "no value was set".parse::<crate::types::CandidateStepType>().ok()
    }
    if builder.candidate_step_arn.is_none() {
        builder.candidate_step_arn = Some(Default::default())
    }
    if builder.candidate_step_name.is_none() {
        builder.candidate_step_name = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_ml_container_definition_correct_errors(
    mut builder: crate::types::builders::AutoMlContainerDefinitionBuilder,
) -> crate::types::builders::AutoMlContainerDefinitionBuilder {
    if builder.image.is_none() {
        builder.image = Some(Default::default())
    }
    if builder.model_data_url.is_none() {
        builder.model_data_url = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_ml_data_source_correct_errors(
    mut builder: crate::types::builders::AutoMlDataSourceBuilder,
) -> crate::types::builders::AutoMlDataSourceBuilder {
    if builder.s3_data_source.is_none() {
        builder.s3_data_source = {
            let builder = crate::types::builders::AutoMls3DataSourceBuilder::default();
            Some(crate::serde_util::auto_mls3_data_source_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn candidate_artifact_locations_correct_errors(
    mut builder: crate::types::builders::CandidateArtifactLocationsBuilder,
) -> crate::types::builders::CandidateArtifactLocationsBuilder {
    if builder.explainability.is_none() {
        builder.explainability = Some(Default::default())
    }
    builder
}

pub(crate) fn capacity_size_correct_errors(mut builder: crate::types::builders::CapacitySizeBuilder) -> crate::types::builders::CapacitySizeBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CapacitySizeType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn capture_option_correct_errors(
    mut builder: crate::types::builders::CaptureOptionBuilder,
) -> crate::types::builders::CaptureOptionBuilder {
    if builder.capture_mode.is_none() {
        builder.capture_mode = "no value was set".parse::<crate::types::CaptureMode>().ok()
    }
    builder
}

pub(crate) fn channel_specification_correct_errors(
    mut builder: crate::types::builders::ChannelSpecificationBuilder,
) -> crate::types::builders::ChannelSpecificationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.supported_content_types.is_none() {
        builder.supported_content_types = Some(Default::default())
    }
    if builder.supported_input_modes.is_none() {
        builder.supported_input_modes = Some(Default::default())
    }
    builder
}

pub(crate) fn clarify_shap_config_correct_errors(
    mut builder: crate::types::builders::ClarifyShapConfigBuilder,
) -> crate::types::builders::ClarifyShapConfigBuilder {
    if builder.shap_baseline_config.is_none() {
        builder.shap_baseline_config = {
            let builder = crate::types::builders::ClarifyShapBaselineConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn device_selection_config_correct_errors(
    mut builder: crate::types::builders::DeviceSelectionConfigBuilder,
) -> crate::types::builders::DeviceSelectionConfigBuilder {
    if builder.device_subset_type.is_none() {
        builder.device_subset_type = "no value was set".parse::<crate::types::DeviceSubsetType>().ok()
    }
    builder
}

pub(crate) fn edge_deployment_config_correct_errors(
    mut builder: crate::types::builders::EdgeDeploymentConfigBuilder,
) -> crate::types::builders::EdgeDeploymentConfigBuilder {
    if builder.failure_handling_policy.is_none() {
        builder.failure_handling_policy = "no value was set".parse::<crate::types::FailureHandlingPolicy>().ok()
    }
    builder
}

pub(crate) fn edge_deployment_status_correct_errors(
    mut builder: crate::types::builders::EdgeDeploymentStatusBuilder,
) -> crate::types::builders::EdgeDeploymentStatusBuilder {
    if builder.stage_status.is_none() {
        builder.stage_status = "no value was set".parse::<crate::types::StageStatus>().ok()
    }
    if builder.edge_deployment_success_in_stage.is_none() {
        builder.edge_deployment_success_in_stage = Some(Default::default())
    }
    if builder.edge_deployment_pending_in_stage.is_none() {
        builder.edge_deployment_pending_in_stage = Some(Default::default())
    }
    if builder.edge_deployment_failed_in_stage.is_none() {
        builder.edge_deployment_failed_in_stage = Some(Default::default())
    }
    builder
}

pub(crate) fn endpoint_correct_errors(mut builder: crate::types::builders::EndpointBuilder) -> crate::types::builders::EndpointBuilder {
    if builder.endpoint_name.is_none() {
        builder.endpoint_name = Some(Default::default())
    }
    if builder.endpoint_arn.is_none() {
        builder.endpoint_arn = Some(Default::default())
    }
    if builder.endpoint_config_name.is_none() {
        builder.endpoint_config_name = Some(Default::default())
    }
    if builder.endpoint_status.is_none() {
        builder.endpoint_status = "no value was set".parse::<crate::types::EndpointStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn endpoint_info_correct_errors(mut builder: crate::types::builders::EndpointInfoBuilder) -> crate::types::builders::EndpointInfoBuilder {
    if builder.endpoint_name.is_none() {
        builder.endpoint_name = Some(Default::default())
    }
    builder
}

pub(crate) fn endpoint_output_configuration_correct_errors(
    mut builder: crate::types::builders::EndpointOutputConfigurationBuilder,
) -> crate::types::builders::EndpointOutputConfigurationBuilder {
    if builder.endpoint_name.is_none() {
        builder.endpoint_name = Some(Default::default())
    }
    if builder.variant_name.is_none() {
        builder.variant_name = Some(Default::default())
    }
    builder
}

pub(crate) fn file_source_correct_errors(mut builder: crate::types::builders::FileSourceBuilder) -> crate::types::builders::FileSourceBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn hyper_parameter_specification_correct_errors(
    mut builder: crate::types::builders::HyperParameterSpecificationBuilder,
) -> crate::types::builders::HyperParameterSpecificationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ParameterType>().ok()
    }
    builder
}

pub(crate) fn inference_metrics_correct_errors(
    mut builder: crate::types::builders::InferenceMetricsBuilder,
) -> crate::types::builders::InferenceMetricsBuilder {
    if builder.max_invocations.is_none() {
        builder.max_invocations = Some(Default::default())
    }
    if builder.model_latency.is_none() {
        builder.model_latency = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_group_correct_errors(
    mut builder: crate::types::builders::InstanceGroupBuilder,
) -> crate::types::builders::InstanceGroupBuilder {
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::TrainingInstanceType>().ok()
    }
    if builder.instance_count.is_none() {
        builder.instance_count = Some(Default::default())
    }
    if builder.instance_group_name.is_none() {
        builder.instance_group_name = Some(Default::default())
    }
    builder
}

pub(crate) fn kernel_spec_correct_errors(mut builder: crate::types::builders::KernelSpecBuilder) -> crate::types::builders::KernelSpecBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn labeling_job_s3_data_source_correct_errors(
    mut builder: crate::types::builders::LabelingJobS3DataSourceBuilder,
) -> crate::types::builders::LabelingJobS3DataSourceBuilder {
    if builder.manifest_s3_uri.is_none() {
        builder.manifest_s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn labeling_job_sns_data_source_correct_errors(
    mut builder: crate::types::builders::LabelingJobSnsDataSourceBuilder,
) -> crate::types::builders::LabelingJobSnsDataSourceBuilder {
    if builder.sns_topic_arn.is_none() {
        builder.sns_topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_definition_correct_errors(
    mut builder: crate::types::builders::MetricDefinitionBuilder,
) -> crate::types::builders::MetricDefinitionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.regex.is_none() {
        builder.regex = Some(Default::default())
    }
    builder
}

pub(crate) fn metrics_source_correct_errors(
    mut builder: crate::types::builders::MetricsSourceBuilder,
) -> crate::types::builders::MetricsSourceBuilder {
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn model_infrastructure_config_correct_errors(
    mut builder: crate::types::builders::ModelInfrastructureConfigBuilder,
) -> crate::types::builders::ModelInfrastructureConfigBuilder {
    if builder.infrastructure_type.is_none() {
        builder.infrastructure_type = "no value was set".parse::<crate::types::ModelInfrastructureType>().ok()
    }
    if builder.real_time_inference_config.is_none() {
        builder.real_time_inference_config = {
            let builder = crate::types::builders::RealTimeInferenceConfigBuilder::default();
            Some(crate::serde_util::real_time_inference_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn model_package_container_definition_correct_errors(
    mut builder: crate::types::builders::ModelPackageContainerDefinitionBuilder,
) -> crate::types::builders::ModelPackageContainerDefinitionBuilder {
    if builder.image.is_none() {
        builder.image = Some(Default::default())
    }
    builder
}

pub(crate) fn model_package_status_item_correct_errors(
    mut builder: crate::types::builders::ModelPackageStatusItemBuilder,
) -> crate::types::builders::ModelPackageStatusItemBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DetailedModelPackageStatus>().ok()
    }
    builder
}

pub(crate) fn model_package_validation_profile_correct_errors(
    mut builder: crate::types::builders::ModelPackageValidationProfileBuilder,
) -> crate::types::builders::ModelPackageValidationProfileBuilder {
    if builder.profile_name.is_none() {
        builder.profile_name = Some(Default::default())
    }
    if builder.transform_job_definition.is_none() {
        builder.transform_job_definition = {
            let builder = crate::types::builders::TransformJobDefinitionBuilder::default();
            Some(crate::serde_util::transform_job_definition_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn monitoring_app_specification_correct_errors(
    mut builder: crate::types::builders::MonitoringAppSpecificationBuilder,
) -> crate::types::builders::MonitoringAppSpecificationBuilder {
    if builder.image_uri.is_none() {
        builder.image_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn monitoring_output_correct_errors(
    mut builder: crate::types::builders::MonitoringOutputBuilder,
) -> crate::types::builders::MonitoringOutputBuilder {
    if builder.s3_output.is_none() {
        builder.s3_output = {
            let builder = crate::types::builders::MonitoringS3OutputBuilder::default();
            Some(crate::serde_util::monitoring_s3_output_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn pending_production_variant_summary_correct_errors(
    mut builder: crate::types::builders::PendingProductionVariantSummaryBuilder,
) -> crate::types::builders::PendingProductionVariantSummaryBuilder {
    if builder.variant_name.is_none() {
        builder.variant_name = Some(Default::default())
    }
    builder
}

pub(crate) fn processing_output_correct_errors(
    mut builder: crate::types::builders::ProcessingOutputBuilder,
) -> crate::types::builders::ProcessingOutputBuilder {
    if builder.output_name.is_none() {
        builder.output_name = Some(Default::default())
    }
    builder
}

pub(crate) fn processing_s3_input_correct_errors(
    mut builder: crate::types::builders::ProcessingS3InputBuilder,
) -> crate::types::builders::ProcessingS3InputBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    if builder.s3_data_type.is_none() {
        builder.s3_data_type = "no value was set".parse::<crate::types::ProcessingS3DataType>().ok()
    }
    builder
}

pub(crate) fn production_variant_core_dump_config_correct_errors(
    mut builder: crate::types::builders::ProductionVariantCoreDumpConfigBuilder,
) -> crate::types::builders::ProductionVariantCoreDumpConfigBuilder {
    if builder.destination_s3_uri.is_none() {
        builder.destination_s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn production_variant_serverless_config_correct_errors(
    mut builder: crate::types::builders::ProductionVariantServerlessConfigBuilder,
) -> crate::types::builders::ProductionVariantServerlessConfigBuilder {
    if builder.memory_size_in_mb.is_none() {
        builder.memory_size_in_mb = Some(Default::default())
    }
    if builder.max_concurrency.is_none() {
        builder.max_concurrency = Some(Default::default())
    }
    builder
}

pub(crate) fn real_time_inference_recommendation_correct_errors(
    mut builder: crate::types::builders::RealTimeInferenceRecommendationBuilder,
) -> crate::types::builders::RealTimeInferenceRecommendationBuilder {
    if builder.recommendation_id.is_none() {
        builder.recommendation_id = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::ProductionVariantInstanceType>().ok()
    }
    builder
}

pub(crate) fn recommendation_job_inference_benchmark_correct_errors(
    mut builder: crate::types::builders::RecommendationJobInferenceBenchmarkBuilder,
) -> crate::types::builders::RecommendationJobInferenceBenchmarkBuilder {
    if builder.model_configuration.is_none() {
        builder.model_configuration = {
            let builder = crate::types::builders::ModelConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn recommendation_metrics_correct_errors(
    mut builder: crate::types::builders::RecommendationMetricsBuilder,
) -> crate::types::builders::RecommendationMetricsBuilder {
    if builder.cost_per_hour.is_none() {
        builder.cost_per_hour = Some(Default::default())
    }
    if builder.cost_per_inference.is_none() {
        builder.cost_per_inference = Some(Default::default())
    }
    if builder.max_invocations.is_none() {
        builder.max_invocations = Some(Default::default())
    }
    if builder.model_latency.is_none() {
        builder.model_latency = Some(Default::default())
    }
    builder
}

pub(crate) fn repository_auth_config_correct_errors(
    mut builder: crate::types::builders::RepositoryAuthConfigBuilder,
) -> crate::types::builders::RepositoryAuthConfigBuilder {
    if builder.repository_credentials_provider_arn.is_none() {
        builder.repository_credentials_provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_model_data_source_correct_errors(
    mut builder: crate::types::builders::S3ModelDataSourceBuilder,
) -> crate::types::builders::S3ModelDataSourceBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    if builder.s3_data_type.is_none() {
        builder.s3_data_type = "no value was set".parse::<crate::types::S3ModelDataType>().ok()
    }
    if builder.compression_type.is_none() {
        builder.compression_type = "no value was set".parse::<crate::types::ModelCompressionType>().ok()
    }
    builder
}

pub(crate) fn selected_step_correct_errors(mut builder: crate::types::builders::SelectedStepBuilder) -> crate::types::builders::SelectedStepBuilder {
    if builder.step_name.is_none() {
        builder.step_name = Some(Default::default())
    }
    builder
}

pub(crate) fn shadow_model_variant_config_correct_errors(
    mut builder: crate::types::builders::ShadowModelVariantConfigBuilder,
) -> crate::types::builders::ShadowModelVariantConfigBuilder {
    if builder.shadow_model_variant_name.is_none() {
        builder.shadow_model_variant_name = Some(Default::default())
    }
    if builder.sampling_percentage.is_none() {
        builder.sampling_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn shuffle_config_correct_errors(
    mut builder: crate::types::builders::ShuffleConfigBuilder,
) -> crate::types::builders::ShuffleConfigBuilder {
    if builder.seed.is_none() {
        builder.seed = Some(Default::default())
    }
    builder
}

pub(crate) fn source_algorithm_correct_errors(
    mut builder: crate::types::builders::SourceAlgorithmBuilder,
) -> crate::types::builders::SourceAlgorithmBuilder {
    if builder.algorithm_name.is_none() {
        builder.algorithm_name = Some(Default::default())
    }
    builder
}

pub(crate) fn time_series_config_correct_errors(
    mut builder: crate::types::builders::TimeSeriesConfigBuilder,
) -> crate::types::builders::TimeSeriesConfigBuilder {
    if builder.target_attribute_name.is_none() {
        builder.target_attribute_name = Some(Default::default())
    }
    if builder.timestamp_attribute_name.is_none() {
        builder.timestamp_attribute_name = Some(Default::default())
    }
    if builder.item_identifier_attribute_name.is_none() {
        builder.item_identifier_attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn traffic_routing_config_correct_errors(
    mut builder: crate::types::builders::TrafficRoutingConfigBuilder,
) -> crate::types::builders::TrafficRoutingConfigBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::TrafficRoutingConfigType>().ok()
    }
    if builder.wait_interval_in_seconds.is_none() {
        builder.wait_interval_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn training_repository_auth_config_correct_errors(
    mut builder: crate::types::builders::TrainingRepositoryAuthConfigBuilder,
) -> crate::types::builders::TrainingRepositoryAuthConfigBuilder {
    if builder.training_repository_credentials_provider_arn.is_none() {
        builder.training_repository_credentials_provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn athena_dataset_definition_correct_errors(
    mut builder: crate::types::builders::AthenaDatasetDefinitionBuilder,
) -> crate::types::builders::AthenaDatasetDefinitionBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.query_string.is_none() {
        builder.query_string = Some(Default::default())
    }
    if builder.output_s3_uri.is_none() {
        builder.output_s3_uri = Some(Default::default())
    }
    if builder.output_format.is_none() {
        builder.output_format = "no value was set".parse::<crate::types::AthenaResultFormat>().ok()
    }
    builder
}

pub(crate) fn auto_ml_algorithm_config_correct_errors(
    mut builder: crate::types::builders::AutoMlAlgorithmConfigBuilder,
) -> crate::types::builders::AutoMlAlgorithmConfigBuilder {
    if builder.auto_ml_algorithms.is_none() {
        builder.auto_ml_algorithms = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_mls3_data_source_correct_errors(
    mut builder: crate::types::builders::AutoMls3DataSourceBuilder,
) -> crate::types::builders::AutoMls3DataSourceBuilder {
    if builder.s3_data_type.is_none() {
        builder.s3_data_type = "no value was set".parse::<crate::types::AutoMls3DataType>().ok()
    }
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_parameter_correct_errors(
    mut builder: crate::types::builders::AutoParameterBuilder,
) -> crate::types::builders::AutoParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value_hint.is_none() {
        builder.value_hint = Some(Default::default())
    }
    builder
}

pub(crate) fn categorical_parameter_range_correct_errors(
    mut builder: crate::types::builders::CategoricalParameterRangeBuilder,
) -> crate::types::builders::CategoricalParameterRangeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn clarify_text_config_correct_errors(
    mut builder: crate::types::builders::ClarifyTextConfigBuilder,
) -> crate::types::builders::ClarifyTextConfigBuilder {
    if builder.language.is_none() {
        builder.language = "no value was set".parse::<crate::types::ClarifyTextLanguage>().ok()
    }
    if builder.granularity.is_none() {
        builder.granularity = "no value was set".parse::<crate::types::ClarifyTextGranularity>().ok()
    }
    builder
}

pub(crate) fn code_repository_correct_errors(
    mut builder: crate::types::builders::CodeRepositoryBuilder,
) -> crate::types::builders::CodeRepositoryBuilder {
    if builder.repository_url.is_none() {
        builder.repository_url = Some(Default::default())
    }
    builder
}

pub(crate) fn cognito_member_definition_correct_errors(
    mut builder: crate::types::builders::CognitoMemberDefinitionBuilder,
) -> crate::types::builders::CognitoMemberDefinitionBuilder {
    if builder.user_pool.is_none() {
        builder.user_pool = Some(Default::default())
    }
    if builder.user_group.is_none() {
        builder.user_group = Some(Default::default())
    }
    if builder.client_id.is_none() {
        builder.client_id = Some(Default::default())
    }
    builder
}

pub(crate) fn continuous_parameter_range_correct_errors(
    mut builder: crate::types::builders::ContinuousParameterRangeBuilder,
) -> crate::types::builders::ContinuousParameterRangeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.min_value.is_none() {
        builder.min_value = Some(Default::default())
    }
    if builder.max_value.is_none() {
        builder.max_value = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_image_correct_errors(mut builder: crate::types::builders::CustomImageBuilder) -> crate::types::builders::CustomImageBuilder {
    if builder.image_name.is_none() {
        builder.image_name = Some(Default::default())
    }
    if builder.app_image_config_name.is_none() {
        builder.app_image_config_name = Some(Default::default())
    }
    builder
}

pub(crate) fn edge_model_summary_correct_errors(
    mut builder: crate::types::builders::EdgeModelSummaryBuilder,
) -> crate::types::builders::EdgeModelSummaryBuilder {
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.model_version.is_none() {
        builder.model_version = Some(Default::default())
    }
    builder
}

pub(crate) fn file_system_data_source_correct_errors(
    mut builder: crate::types::builders::FileSystemDataSourceBuilder,
) -> crate::types::builders::FileSystemDataSourceBuilder {
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.file_system_access_mode.is_none() {
        builder.file_system_access_mode = "no value was set".parse::<crate::types::FileSystemAccessMode>().ok()
    }
    if builder.file_system_type.is_none() {
        builder.file_system_type = "no value was set".parse::<crate::types::FileSystemType>().ok()
    }
    if builder.directory_path.is_none() {
        builder.directory_path = Some(Default::default())
    }
    builder
}

pub(crate) fn hyper_parameter_tuning_instance_config_correct_errors(
    mut builder: crate::types::builders::HyperParameterTuningInstanceConfigBuilder,
) -> crate::types::builders::HyperParameterTuningInstanceConfigBuilder {
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::TrainingInstanceType>().ok()
    }
    if builder.instance_count.is_none() {
        builder.instance_count = Some(Default::default())
    }
    if builder.volume_size_in_gb.is_none() {
        builder.volume_size_in_gb = Some(Default::default())
    }
    builder
}

pub(crate) fn integer_parameter_range_correct_errors(
    mut builder: crate::types::builders::IntegerParameterRangeBuilder,
) -> crate::types::builders::IntegerParameterRangeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.min_value.is_none() {
        builder.min_value = Some(Default::default())
    }
    if builder.max_value.is_none() {
        builder.max_value = Some(Default::default())
    }
    builder
}

pub(crate) fn model_input_correct_errors(mut builder: crate::types::builders::ModelInputBuilder) -> crate::types::builders::ModelInputBuilder {
    if builder.data_input_config.is_none() {
        builder.data_input_config = Some(Default::default())
    }
    builder
}

pub(crate) fn monitoring_s3_output_correct_errors(
    mut builder: crate::types::builders::MonitoringS3OutputBuilder,
) -> crate::types::builders::MonitoringS3OutputBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    if builder.local_path.is_none() {
        builder.local_path = Some(Default::default())
    }
    builder
}

pub(crate) fn oidc_member_definition_correct_errors(
    mut builder: crate::types::builders::OidcMemberDefinitionBuilder,
) -> crate::types::builders::OidcMemberDefinitionBuilder {
    if builder.groups.is_none() {
        builder.groups = Some(Default::default())
    }
    builder
}

pub(crate) fn processing_feature_store_output_correct_errors(
    mut builder: crate::types::builders::ProcessingFeatureStoreOutputBuilder,
) -> crate::types::builders::ProcessingFeatureStoreOutputBuilder {
    if builder.feature_group_name.is_none() {
        builder.feature_group_name = Some(Default::default())
    }
    builder
}

pub(crate) fn processing_s3_output_correct_errors(
    mut builder: crate::types::builders::ProcessingS3OutputBuilder,
) -> crate::types::builders::ProcessingS3OutputBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    if builder.local_path.is_none() {
        builder.local_path = Some(Default::default())
    }
    if builder.s3_upload_mode.is_none() {
        builder.s3_upload_mode = "no value was set".parse::<crate::types::ProcessingS3UploadMode>().ok()
    }
    builder
}

pub(crate) fn production_variant_status_correct_errors(
    mut builder: crate::types::builders::ProductionVariantStatusBuilder,
) -> crate::types::builders::ProductionVariantStatusBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VariantStatus>().ok()
    }
    builder
}

pub(crate) fn real_time_inference_config_correct_errors(
    mut builder: crate::types::builders::RealTimeInferenceConfigBuilder,
) -> crate::types::builders::RealTimeInferenceConfigBuilder {
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::InstanceType>().ok()
    }
    if builder.instance_count.is_none() {
        builder.instance_count = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_dataset_definition_correct_errors(
    mut builder: crate::types::builders::RedshiftDatasetDefinitionBuilder,
) -> crate::types::builders::RedshiftDatasetDefinitionBuilder {
    if builder.cluster_id.is_none() {
        builder.cluster_id = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.db_user.is_none() {
        builder.db_user = Some(Default::default())
    }
    if builder.query_string.is_none() {
        builder.query_string = Some(Default::default())
    }
    if builder.cluster_role_arn.is_none() {
        builder.cluster_role_arn = Some(Default::default())
    }
    if builder.output_s3_uri.is_none() {
        builder.output_s3_uri = Some(Default::default())
    }
    if builder.output_format.is_none() {
        builder.output_format = "no value was set".parse::<crate::types::RedshiftResultFormat>().ok()
    }
    builder
}

pub(crate) fn s3_data_source_correct_errors(mut builder: crate::types::builders::S3DataSourceBuilder) -> crate::types::builders::S3DataSourceBuilder {
    if builder.s3_data_type.is_none() {
        builder.s3_data_type = "no value was set".parse::<crate::types::S3DataType>().ok()
    }
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn training_job_definition_correct_errors(
    mut builder: crate::types::builders::TrainingJobDefinitionBuilder,
) -> crate::types::builders::TrainingJobDefinitionBuilder {
    if builder.training_input_mode.is_none() {
        builder.training_input_mode = "no value was set".parse::<crate::types::TrainingInputMode>().ok()
    }
    if builder.input_data_config.is_none() {
        builder.input_data_config = Some(Default::default())
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::OutputDataConfigBuilder::default();
            Some(crate::serde_util::output_data_config_correct_errors(builder).build())
        }
    }
    if builder.resource_config.is_none() {
        builder.resource_config = {
            let builder = crate::types::builders::ResourceConfigBuilder::default();
            Some(crate::serde_util::resource_config_correct_errors(builder).build())
        }
    }
    if builder.stopping_condition.is_none() {
        builder.stopping_condition = {
            let builder = crate::types::builders::StoppingConditionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn transform_job_definition_correct_errors(
    mut builder: crate::types::builders::TransformJobDefinitionBuilder,
) -> crate::types::builders::TransformJobDefinitionBuilder {
    if builder.transform_input.is_none() {
        builder.transform_input = {
            let builder = crate::types::builders::TransformInputBuilder::default();
            Some(crate::serde_util::transform_input_correct_errors(builder).build())
        }
    }
    if builder.transform_output.is_none() {
        builder.transform_output = {
            let builder = crate::types::builders::TransformOutputBuilder::default();
            Some(crate::serde_util::transform_output_correct_errors(builder).build())
        }
    }
    if builder.transform_resources.is_none() {
        builder.transform_resources = {
            let builder = crate::types::builders::TransformResourcesBuilder::default();
            Some(crate::serde_util::transform_resources_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn vector_config_correct_errors(mut builder: crate::types::builders::VectorConfigBuilder) -> crate::types::builders::VectorConfigBuilder {
    if builder.dimension.is_none() {
        builder.dimension = Some(Default::default())
    }
    builder
}

pub(crate) fn categorical_parameter_range_specification_correct_errors(
    mut builder: crate::types::builders::CategoricalParameterRangeSpecificationBuilder,
) -> crate::types::builders::CategoricalParameterRangeSpecificationBuilder {
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn continuous_parameter_range_specification_correct_errors(
    mut builder: crate::types::builders::ContinuousParameterRangeSpecificationBuilder,
) -> crate::types::builders::ContinuousParameterRangeSpecificationBuilder {
    if builder.min_value.is_none() {
        builder.min_value = Some(Default::default())
    }
    if builder.max_value.is_none() {
        builder.max_value = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_parameter_correct_errors(
    mut builder: crate::types::builders::EnvironmentParameterBuilder,
) -> crate::types::builders::EnvironmentParameterBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value_type.is_none() {
        builder.value_type = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn integer_parameter_range_specification_correct_errors(
    mut builder: crate::types::builders::IntegerParameterRangeSpecificationBuilder,
) -> crate::types::builders::IntegerParameterRangeSpecificationBuilder {
    if builder.min_value.is_none() {
        builder.min_value = Some(Default::default())
    }
    if builder.max_value.is_none() {
        builder.max_value = Some(Default::default())
    }
    builder
}

pub(crate) fn model_dashboard_endpoint_correct_errors(
    mut builder: crate::types::builders::ModelDashboardEndpointBuilder,
) -> crate::types::builders::ModelDashboardEndpointBuilder {
    if builder.endpoint_name.is_none() {
        builder.endpoint_name = Some(Default::default())
    }
    if builder.endpoint_arn.is_none() {
        builder.endpoint_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.endpoint_status.is_none() {
        builder.endpoint_status = "no value was set".parse::<crate::types::EndpointStatus>().ok()
    }
    builder
}

pub(crate) fn categorical_parameter_correct_errors(
    mut builder: crate::types::builders::CategoricalParameterBuilder,
) -> crate::types::builders::CategoricalParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn output_parameter_correct_errors(
    mut builder: crate::types::builders::OutputParameterBuilder,
) -> crate::types::builders::OutputParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
