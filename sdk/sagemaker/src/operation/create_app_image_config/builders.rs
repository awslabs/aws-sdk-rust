// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_app_image_config::_create_app_image_config_output::CreateAppImageConfigOutputBuilder;

pub use crate::operation::create_app_image_config::_create_app_image_config_input::CreateAppImageConfigInputBuilder;

/// Fluent builder constructing a request to `CreateAppImageConfig`.
///
/// <p>Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAppImageConfigFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_app_image_config::builders::CreateAppImageConfigInputBuilder,
}
impl CreateAppImageConfigFluentBuilder {
    /// Creates a new `CreateAppImageConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_app_image_config::CreateAppImageConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_app_image_config::CreateAppImageConfigError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_app_image_config::CreateAppImageConfigOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_app_image_config::CreateAppImageConfigError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the AppImageConfig. Must be unique to your account.</p>
    pub fn app_image_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_image_config_name(input.into());
        self
    }
    /// <p>The name of the AppImageConfig. Must be unique to your account.</p>
    pub fn set_app_image_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_app_image_config_name(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the AppImageConfig.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to apply to the AppImageConfig.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.</p>
    pub fn kernel_gateway_image_config(
        mut self,
        input: crate::types::KernelGatewayImageConfig,
    ) -> Self {
        self.inner = self.inner.kernel_gateway_image_config(input);
        self
    }
    /// <p>The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.</p>
    pub fn set_kernel_gateway_image_config(
        mut self,
        input: std::option::Option<crate::types::KernelGatewayImageConfig>,
    ) -> Self {
        self.inner = self.inner.set_kernel_gateway_image_config(input);
        self
    }
}
