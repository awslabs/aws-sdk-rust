// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAppImageConfigInput {
    /// <p>The name of the AppImageConfig. Must be unique to your account.</p>
    #[doc(hidden)]
    pub app_image_config_name: std::option::Option<std::string::String>,
    /// <p>A list of tags to apply to the AppImageConfig.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.</p>
    #[doc(hidden)]
    pub kernel_gateway_image_config: std::option::Option<crate::types::KernelGatewayImageConfig>,
}
impl CreateAppImageConfigInput {
    /// <p>The name of the AppImageConfig. Must be unique to your account.</p>
    pub fn app_image_config_name(&self) -> std::option::Option<&str> {
        self.app_image_config_name.as_deref()
    }
    /// <p>A list of tags to apply to the AppImageConfig.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.</p>
    pub fn kernel_gateway_image_config(
        &self,
    ) -> std::option::Option<&crate::types::KernelGatewayImageConfig> {
        self.kernel_gateway_image_config.as_ref()
    }
}
impl CreateAppImageConfigInput {
    /// Creates a new builder-style object to manufacture [`CreateAppImageConfigInput`](crate::operation::create_app_image_config::CreateAppImageConfigInput).
    pub fn builder(
    ) -> crate::operation::create_app_image_config::builders::CreateAppImageConfigInputBuilder {
        crate::operation::create_app_image_config::builders::CreateAppImageConfigInputBuilder::default()
    }
}

/// A builder for [`CreateAppImageConfigInput`](crate::operation::create_app_image_config::CreateAppImageConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAppImageConfigInputBuilder {
    pub(crate) app_image_config_name: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) kernel_gateway_image_config:
        std::option::Option<crate::types::KernelGatewayImageConfig>,
}
impl CreateAppImageConfigInputBuilder {
    /// <p>The name of the AppImageConfig. Must be unique to your account.</p>
    pub fn app_image_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_image_config_name = Some(input.into());
        self
    }
    /// <p>The name of the AppImageConfig. Must be unique to your account.</p>
    pub fn set_app_image_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.app_image_config_name = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the AppImageConfig.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tags to apply to the AppImageConfig.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.</p>
    pub fn kernel_gateway_image_config(
        mut self,
        input: crate::types::KernelGatewayImageConfig,
    ) -> Self {
        self.kernel_gateway_image_config = Some(input);
        self
    }
    /// <p>The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.</p>
    pub fn set_kernel_gateway_image_config(
        mut self,
        input: std::option::Option<crate::types::KernelGatewayImageConfig>,
    ) -> Self {
        self.kernel_gateway_image_config = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAppImageConfigInput`](crate::operation::create_app_image_config::CreateAppImageConfigInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_app_image_config::CreateAppImageConfigInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_app_image_config::CreateAppImageConfigInput {
                app_image_config_name: self.app_image_config_name,
                tags: self.tags,
                kernel_gateway_image_config: self.kernel_gateway_image_config,
            },
        )
    }
}
