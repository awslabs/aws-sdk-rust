// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAlgorithmOutput {
    /// <p>The name of the algorithm being described.</p>
    #[doc(hidden)]
    pub algorithm_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the algorithm.</p>
    #[doc(hidden)]
    pub algorithm_arn: std::option::Option<std::string::String>,
    /// <p>A brief summary about the algorithm.</p>
    #[doc(hidden)]
    pub algorithm_description: std::option::Option<std::string::String>,
    /// <p>A timestamp specifying when the algorithm was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Details about training jobs run by this algorithm.</p>
    #[doc(hidden)]
    pub training_specification: std::option::Option<crate::types::TrainingSpecification>,
    /// <p>Details about inference jobs that the algorithm runs.</p>
    #[doc(hidden)]
    pub inference_specification: std::option::Option<crate::types::InferenceSpecification>,
    /// <p>Details about configurations for one or more training jobs that SageMaker runs to test the algorithm.</p>
    #[doc(hidden)]
    pub validation_specification:
        std::option::Option<crate::types::AlgorithmValidationSpecification>,
    /// <p>The current status of the algorithm.</p>
    #[doc(hidden)]
    pub algorithm_status: std::option::Option<crate::types::AlgorithmStatus>,
    /// <p>Details about the current status of the algorithm.</p>
    #[doc(hidden)]
    pub algorithm_status_details: std::option::Option<crate::types::AlgorithmStatusDetails>,
    /// <p>The product identifier of the algorithm.</p>
    #[doc(hidden)]
    pub product_id: std::option::Option<std::string::String>,
    /// <p>Whether the algorithm is certified to be listed in Amazon Web Services Marketplace.</p>
    #[doc(hidden)]
    pub certify_for_marketplace: bool,
    _request_id: Option<String>,
}
impl DescribeAlgorithmOutput {
    /// <p>The name of the algorithm being described.</p>
    pub fn algorithm_name(&self) -> std::option::Option<&str> {
        self.algorithm_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the algorithm.</p>
    pub fn algorithm_arn(&self) -> std::option::Option<&str> {
        self.algorithm_arn.as_deref()
    }
    /// <p>A brief summary about the algorithm.</p>
    pub fn algorithm_description(&self) -> std::option::Option<&str> {
        self.algorithm_description.as_deref()
    }
    /// <p>A timestamp specifying when the algorithm was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Details about training jobs run by this algorithm.</p>
    pub fn training_specification(
        &self,
    ) -> std::option::Option<&crate::types::TrainingSpecification> {
        self.training_specification.as_ref()
    }
    /// <p>Details about inference jobs that the algorithm runs.</p>
    pub fn inference_specification(
        &self,
    ) -> std::option::Option<&crate::types::InferenceSpecification> {
        self.inference_specification.as_ref()
    }
    /// <p>Details about configurations for one or more training jobs that SageMaker runs to test the algorithm.</p>
    pub fn validation_specification(
        &self,
    ) -> std::option::Option<&crate::types::AlgorithmValidationSpecification> {
        self.validation_specification.as_ref()
    }
    /// <p>The current status of the algorithm.</p>
    pub fn algorithm_status(&self) -> std::option::Option<&crate::types::AlgorithmStatus> {
        self.algorithm_status.as_ref()
    }
    /// <p>Details about the current status of the algorithm.</p>
    pub fn algorithm_status_details(
        &self,
    ) -> std::option::Option<&crate::types::AlgorithmStatusDetails> {
        self.algorithm_status_details.as_ref()
    }
    /// <p>The product identifier of the algorithm.</p>
    pub fn product_id(&self) -> std::option::Option<&str> {
        self.product_id.as_deref()
    }
    /// <p>Whether the algorithm is certified to be listed in Amazon Web Services Marketplace.</p>
    pub fn certify_for_marketplace(&self) -> bool {
        self.certify_for_marketplace
    }
}
impl aws_http::request_id::RequestId for DescribeAlgorithmOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAlgorithmOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAlgorithmOutput`](crate::operation::describe_algorithm::DescribeAlgorithmOutput).
    pub fn builder(
    ) -> crate::operation::describe_algorithm::builders::DescribeAlgorithmOutputBuilder {
        crate::operation::describe_algorithm::builders::DescribeAlgorithmOutputBuilder::default()
    }
}

/// A builder for [`DescribeAlgorithmOutput`](crate::operation::describe_algorithm::DescribeAlgorithmOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAlgorithmOutputBuilder {
    pub(crate) algorithm_name: std::option::Option<std::string::String>,
    pub(crate) algorithm_arn: std::option::Option<std::string::String>,
    pub(crate) algorithm_description: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) training_specification: std::option::Option<crate::types::TrainingSpecification>,
    pub(crate) inference_specification: std::option::Option<crate::types::InferenceSpecification>,
    pub(crate) validation_specification:
        std::option::Option<crate::types::AlgorithmValidationSpecification>,
    pub(crate) algorithm_status: std::option::Option<crate::types::AlgorithmStatus>,
    pub(crate) algorithm_status_details: std::option::Option<crate::types::AlgorithmStatusDetails>,
    pub(crate) product_id: std::option::Option<std::string::String>,
    pub(crate) certify_for_marketplace: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DescribeAlgorithmOutputBuilder {
    /// <p>The name of the algorithm being described.</p>
    pub fn algorithm_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.algorithm_name = Some(input.into());
        self
    }
    /// <p>The name of the algorithm being described.</p>
    pub fn set_algorithm_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.algorithm_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the algorithm.</p>
    pub fn algorithm_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.algorithm_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the algorithm.</p>
    pub fn set_algorithm_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.algorithm_arn = input;
        self
    }
    /// <p>A brief summary about the algorithm.</p>
    pub fn algorithm_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.algorithm_description = Some(input.into());
        self
    }
    /// <p>A brief summary about the algorithm.</p>
    pub fn set_algorithm_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.algorithm_description = input;
        self
    }
    /// <p>A timestamp specifying when the algorithm was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>A timestamp specifying when the algorithm was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Details about training jobs run by this algorithm.</p>
    pub fn training_specification(mut self, input: crate::types::TrainingSpecification) -> Self {
        self.training_specification = Some(input);
        self
    }
    /// <p>Details about training jobs run by this algorithm.</p>
    pub fn set_training_specification(
        mut self,
        input: std::option::Option<crate::types::TrainingSpecification>,
    ) -> Self {
        self.training_specification = input;
        self
    }
    /// <p>Details about inference jobs that the algorithm runs.</p>
    pub fn inference_specification(mut self, input: crate::types::InferenceSpecification) -> Self {
        self.inference_specification = Some(input);
        self
    }
    /// <p>Details about inference jobs that the algorithm runs.</p>
    pub fn set_inference_specification(
        mut self,
        input: std::option::Option<crate::types::InferenceSpecification>,
    ) -> Self {
        self.inference_specification = input;
        self
    }
    /// <p>Details about configurations for one or more training jobs that SageMaker runs to test the algorithm.</p>
    pub fn validation_specification(
        mut self,
        input: crate::types::AlgorithmValidationSpecification,
    ) -> Self {
        self.validation_specification = Some(input);
        self
    }
    /// <p>Details about configurations for one or more training jobs that SageMaker runs to test the algorithm.</p>
    pub fn set_validation_specification(
        mut self,
        input: std::option::Option<crate::types::AlgorithmValidationSpecification>,
    ) -> Self {
        self.validation_specification = input;
        self
    }
    /// <p>The current status of the algorithm.</p>
    pub fn algorithm_status(mut self, input: crate::types::AlgorithmStatus) -> Self {
        self.algorithm_status = Some(input);
        self
    }
    /// <p>The current status of the algorithm.</p>
    pub fn set_algorithm_status(
        mut self,
        input: std::option::Option<crate::types::AlgorithmStatus>,
    ) -> Self {
        self.algorithm_status = input;
        self
    }
    /// <p>Details about the current status of the algorithm.</p>
    pub fn algorithm_status_details(mut self, input: crate::types::AlgorithmStatusDetails) -> Self {
        self.algorithm_status_details = Some(input);
        self
    }
    /// <p>Details about the current status of the algorithm.</p>
    pub fn set_algorithm_status_details(
        mut self,
        input: std::option::Option<crate::types::AlgorithmStatusDetails>,
    ) -> Self {
        self.algorithm_status_details = input;
        self
    }
    /// <p>The product identifier of the algorithm.</p>
    pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_id = Some(input.into());
        self
    }
    /// <p>The product identifier of the algorithm.</p>
    pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>Whether the algorithm is certified to be listed in Amazon Web Services Marketplace.</p>
    pub fn certify_for_marketplace(mut self, input: bool) -> Self {
        self.certify_for_marketplace = Some(input);
        self
    }
    /// <p>Whether the algorithm is certified to be listed in Amazon Web Services Marketplace.</p>
    pub fn set_certify_for_marketplace(mut self, input: std::option::Option<bool>) -> Self {
        self.certify_for_marketplace = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAlgorithmOutput`](crate::operation::describe_algorithm::DescribeAlgorithmOutput).
    pub fn build(self) -> crate::operation::describe_algorithm::DescribeAlgorithmOutput {
        crate::operation::describe_algorithm::DescribeAlgorithmOutput {
            algorithm_name: self.algorithm_name,
            algorithm_arn: self.algorithm_arn,
            algorithm_description: self.algorithm_description,
            creation_time: self.creation_time,
            training_specification: self.training_specification,
            inference_specification: self.inference_specification,
            validation_specification: self.validation_specification,
            algorithm_status: self.algorithm_status,
            algorithm_status_details: self.algorithm_status_details,
            product_id: self.product_id,
            certify_for_marketplace: self.certify_for_marketplace.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
