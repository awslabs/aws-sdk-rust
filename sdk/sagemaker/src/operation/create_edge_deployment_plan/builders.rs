// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_edge_deployment_plan::_create_edge_deployment_plan_output::CreateEdgeDeploymentPlanOutputBuilder;

pub use crate::operation::create_edge_deployment_plan::_create_edge_deployment_plan_input::CreateEdgeDeploymentPlanInputBuilder;

/// Fluent builder constructing a request to `CreateEdgeDeploymentPlan`.
///
/// <p>Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateEdgeDeploymentPlanFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_edge_deployment_plan::builders::CreateEdgeDeploymentPlanInputBuilder
            }
impl CreateEdgeDeploymentPlanFluentBuilder {
    /// Creates a new `CreateEdgeDeploymentPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlanError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlanOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_edge_deployment_plan::CreateEdgeDeploymentPlanError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_deployment_plan_name(input.into());
        self
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_deployment_plan_name(input);
        self
    }
    /// Appends an item to `ModelConfigs`.
    ///
    /// To override the contents of this collection use [`set_model_configs`](Self::set_model_configs).
    ///
    /// <p>List of models associated with the edge deployment plan.</p>
    pub fn model_configs(mut self, input: crate::types::EdgeDeploymentModelConfig) -> Self {
        self.inner = self.inner.model_configs(input);
        self
    }
    /// <p>List of models associated with the edge deployment plan.</p>
    pub fn set_model_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EdgeDeploymentModelConfig>>,
    ) -> Self {
        self.inner = self.inner.set_model_configs(input);
        self
    }
    /// <p>The device fleet used for this edge deployment plan.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The device fleet used for this edge deployment plan.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
    /// Appends an item to `Stages`.
    ///
    /// To override the contents of this collection use [`set_stages`](Self::set_stages).
    ///
    /// <p>List of stages of the edge deployment plan. The number of stages is limited to 10 per deployment.</p>
    pub fn stages(mut self, input: crate::types::DeploymentStage) -> Self {
        self.inner = self.inner.stages(input);
        self
    }
    /// <p>List of stages of the edge deployment plan. The number of stages is limited to 10 per deployment.</p>
    pub fn set_stages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeploymentStage>>,
    ) -> Self {
        self.inner = self.inner.set_stages(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>List of tags with which to tag the edge deployment plan.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>List of tags with which to tag the edge deployment plan.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
