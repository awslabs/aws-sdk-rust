// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListHubContentVersionsInput {
    /// <p>The name of the hub to list the content versions of.</p>
    #[doc(hidden)]
    pub hub_name: std::option::Option<std::string::String>,
    /// <p>The type of hub content to list versions of.</p>
    #[doc(hidden)]
    pub hub_content_type: std::option::Option<crate::types::HubContentType>,
    /// <p>The name of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_name: std::option::Option<std::string::String>,
    /// <p>The lower bound of the hub content versions to list.</p>
    #[doc(hidden)]
    pub min_version: std::option::Option<std::string::String>,
    /// <p>The upper bound of the hub content schema version.</p>
    #[doc(hidden)]
    pub max_schema_version: std::option::Option<std::string::String>,
    /// <p>Only list hub content versions that were created before the time specified.</p>
    #[doc(hidden)]
    pub creation_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Only list hub content versions that were created after the time specified.</p>
    #[doc(hidden)]
    pub creation_time_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Sort hub content versions by either name or creation time.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::HubContentSortBy>,
    /// <p>Sort hub content versions by ascending or descending order.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p>The maximum number of hub content versions to list.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>If the response to a previous <code>ListHubContentVersions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hub content versions, use the token in the next request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListHubContentVersionsInput {
    /// <p>The name of the hub to list the content versions of.</p>
    pub fn hub_name(&self) -> std::option::Option<&str> {
        self.hub_name.as_deref()
    }
    /// <p>The type of hub content to list versions of.</p>
    pub fn hub_content_type(&self) -> std::option::Option<&crate::types::HubContentType> {
        self.hub_content_type.as_ref()
    }
    /// <p>The name of the hub content.</p>
    pub fn hub_content_name(&self) -> std::option::Option<&str> {
        self.hub_content_name.as_deref()
    }
    /// <p>The lower bound of the hub content versions to list.</p>
    pub fn min_version(&self) -> std::option::Option<&str> {
        self.min_version.as_deref()
    }
    /// <p>The upper bound of the hub content schema version.</p>
    pub fn max_schema_version(&self) -> std::option::Option<&str> {
        self.max_schema_version.as_deref()
    }
    /// <p>Only list hub content versions that were created before the time specified.</p>
    pub fn creation_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time_before.as_ref()
    }
    /// <p>Only list hub content versions that were created after the time specified.</p>
    pub fn creation_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time_after.as_ref()
    }
    /// <p>Sort hub content versions by either name or creation time.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::HubContentSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>Sort hub content versions by ascending or descending order.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The maximum number of hub content versions to list.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>If the response to a previous <code>ListHubContentVersions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hub content versions, use the token in the next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListHubContentVersionsInput {
    /// Creates a new builder-style object to manufacture [`ListHubContentVersionsInput`](crate::operation::list_hub_content_versions::ListHubContentVersionsInput).
    pub fn builder(
    ) -> crate::operation::list_hub_content_versions::builders::ListHubContentVersionsInputBuilder
    {
        crate::operation::list_hub_content_versions::builders::ListHubContentVersionsInputBuilder::default()
    }
}

/// A builder for [`ListHubContentVersionsInput`](crate::operation::list_hub_content_versions::ListHubContentVersionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListHubContentVersionsInputBuilder {
    pub(crate) hub_name: std::option::Option<std::string::String>,
    pub(crate) hub_content_type: std::option::Option<crate::types::HubContentType>,
    pub(crate) hub_content_name: std::option::Option<std::string::String>,
    pub(crate) min_version: std::option::Option<std::string::String>,
    pub(crate) max_schema_version: std::option::Option<std::string::String>,
    pub(crate) creation_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_time_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) sort_by: std::option::Option<crate::types::HubContentSortBy>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListHubContentVersionsInputBuilder {
    /// <p>The name of the hub to list the content versions of.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_name = Some(input.into());
        self
    }
    /// <p>The name of the hub to list the content versions of.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_name = input;
        self
    }
    /// <p>The type of hub content to list versions of.</p>
    pub fn hub_content_type(mut self, input: crate::types::HubContentType) -> Self {
        self.hub_content_type = Some(input);
        self
    }
    /// <p>The type of hub content to list versions of.</p>
    pub fn set_hub_content_type(
        mut self,
        input: std::option::Option<crate::types::HubContentType>,
    ) -> Self {
        self.hub_content_type = input;
        self
    }
    /// <p>The name of the hub content.</p>
    pub fn hub_content_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_name = Some(input.into());
        self
    }
    /// <p>The name of the hub content.</p>
    pub fn set_hub_content_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_content_name = input;
        self
    }
    /// <p>The lower bound of the hub content versions to list.</p>
    pub fn min_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.min_version = Some(input.into());
        self
    }
    /// <p>The lower bound of the hub content versions to list.</p>
    pub fn set_min_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.min_version = input;
        self
    }
    /// <p>The upper bound of the hub content schema version.</p>
    pub fn max_schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_schema_version = Some(input.into());
        self
    }
    /// <p>The upper bound of the hub content schema version.</p>
    pub fn set_max_schema_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.max_schema_version = input;
        self
    }
    /// <p>Only list hub content versions that were created before the time specified.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time_before = Some(input);
        self
    }
    /// <p>Only list hub content versions that were created before the time specified.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time_before = input;
        self
    }
    /// <p>Only list hub content versions that were created after the time specified.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time_after = Some(input);
        self
    }
    /// <p>Only list hub content versions that were created after the time specified.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time_after = input;
        self
    }
    /// <p>Sort hub content versions by either name or creation time.</p>
    pub fn sort_by(mut self, input: crate::types::HubContentSortBy) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>Sort hub content versions by either name or creation time.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::HubContentSortBy>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>Sort hub content versions by ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>Sort hub content versions by ascending or descending order.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The maximum number of hub content versions to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of hub content versions to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>If the response to a previous <code>ListHubContentVersions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hub content versions, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListHubContentVersions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hub content versions, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListHubContentVersionsInput`](crate::operation::list_hub_content_versions::ListHubContentVersionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_hub_content_versions::ListHubContentVersionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_hub_content_versions::ListHubContentVersionsInput {
                hub_name: self.hub_name,
                hub_content_type: self.hub_content_type,
                hub_content_name: self.hub_content_name,
                min_version: self.min_version,
                max_schema_version: self.max_schema_version,
                creation_time_before: self.creation_time_before,
                creation_time_after: self.creation_time_after,
                sort_by: self.sort_by,
                sort_order: self.sort_order,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
