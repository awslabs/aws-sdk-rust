// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkforcesInput {
    /// <p>Sort workforces using the workforce name or creation date.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::ListWorkforcesSortByOptions>,
    /// <p>Sort workforces in ascending or descending order.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p>A filter you can use to search for workforces using part of the workforce name.</p>
    #[doc(hidden)]
    pub name_contains: std::option::Option<std::string::String>,
    /// <p>A token to resume pagination.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of workforces returned in the response.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListWorkforcesInput {
    /// <p>Sort workforces using the workforce name or creation date.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::ListWorkforcesSortByOptions> {
        self.sort_by.as_ref()
    }
    /// <p>Sort workforces in ascending or descending order.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>A filter you can use to search for workforces using part of the workforce name.</p>
    pub fn name_contains(&self) -> std::option::Option<&str> {
        self.name_contains.as_deref()
    }
    /// <p>A token to resume pagination.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of workforces returned in the response.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListWorkforcesInput {
    /// Creates a new builder-style object to manufacture [`ListWorkforcesInput`](crate::operation::list_workforces::ListWorkforcesInput).
    pub fn builder() -> crate::operation::list_workforces::builders::ListWorkforcesInputBuilder {
        crate::operation::list_workforces::builders::ListWorkforcesInputBuilder::default()
    }
}

/// A builder for [`ListWorkforcesInput`](crate::operation::list_workforces::ListWorkforcesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListWorkforcesInputBuilder {
    pub(crate) sort_by: std::option::Option<crate::types::ListWorkforcesSortByOptions>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) name_contains: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListWorkforcesInputBuilder {
    /// <p>Sort workforces using the workforce name or creation date.</p>
    pub fn sort_by(mut self, input: crate::types::ListWorkforcesSortByOptions) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>Sort workforces using the workforce name or creation date.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::ListWorkforcesSortByOptions>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>Sort workforces in ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>Sort workforces in ascending or descending order.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>A filter you can use to search for workforces using part of the workforce name.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.name_contains = Some(input.into());
        self
    }
    /// <p>A filter you can use to search for workforces using part of the workforce name.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name_contains = input;
        self
    }
    /// <p>A token to resume pagination.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token to resume pagination.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of workforces returned in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of workforces returned in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListWorkforcesInput`](crate::operation::list_workforces::ListWorkforcesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_workforces::ListWorkforcesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_workforces::ListWorkforcesInput {
            sort_by: self.sort_by,
            sort_order: self.sort_order,
            name_contains: self.name_contains,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
