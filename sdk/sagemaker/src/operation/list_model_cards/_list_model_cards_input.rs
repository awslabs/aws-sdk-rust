// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListModelCardsInput {
    /// <p>Only list model cards that were created after the time specified.</p>
    pub creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Only list model cards that were created before the time specified.</p>
    pub creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The maximum number of model cards to list.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Only list model cards with names that contain the specified string.</p>
    pub name_contains: ::std::option::Option<::std::string::String>,
    /// <p>Only list model cards with the specified approval status.</p>
    pub model_card_status: ::std::option::Option<crate::types::ModelCardStatus>,
    /// <p>If the response to a previous <code>ListModelCards</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model cards, use the token in the next request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Sort model cards by either name or creation time. Sorts by creation time by default.</p>
    pub sort_by: ::std::option::Option<crate::types::ModelCardSortBy>,
    /// <p>Sort model cards by ascending or descending order.</p>
    pub sort_order: ::std::option::Option<crate::types::ModelCardSortOrder>,
}
impl ListModelCardsInput {
    /// <p>Only list model cards that were created after the time specified.</p>
    pub fn creation_time_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_after.as_ref()
    }
    /// <p>Only list model cards that were created before the time specified.</p>
    pub fn creation_time_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_before.as_ref()
    }
    /// <p>The maximum number of model cards to list.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Only list model cards with names that contain the specified string.</p>
    pub fn name_contains(&self) -> ::std::option::Option<&str> {
        self.name_contains.as_deref()
    }
    /// <p>Only list model cards with the specified approval status.</p>
    pub fn model_card_status(&self) -> ::std::option::Option<&crate::types::ModelCardStatus> {
        self.model_card_status.as_ref()
    }
    /// <p>If the response to a previous <code>ListModelCards</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model cards, use the token in the next request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Sort model cards by either name or creation time. Sorts by creation time by default.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::ModelCardSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>Sort model cards by ascending or descending order.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::ModelCardSortOrder> {
        self.sort_order.as_ref()
    }
}
impl ListModelCardsInput {
    /// Creates a new builder-style object to manufacture [`ListModelCardsInput`](crate::operation::list_model_cards::ListModelCardsInput).
    pub fn builder() -> crate::operation::list_model_cards::builders::ListModelCardsInputBuilder {
        crate::operation::list_model_cards::builders::ListModelCardsInputBuilder::default()
    }
}

/// A builder for [`ListModelCardsInput`](crate::operation::list_model_cards::ListModelCardsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListModelCardsInputBuilder {
    pub(crate) creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) name_contains: ::std::option::Option<::std::string::String>,
    pub(crate) model_card_status: ::std::option::Option<crate::types::ModelCardStatus>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) sort_by: ::std::option::Option<crate::types::ModelCardSortBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::ModelCardSortOrder>,
}
impl ListModelCardsInputBuilder {
    /// <p>Only list model cards that were created after the time specified.</p>
    pub fn creation_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>Only list model cards that were created after the time specified.</p>
    pub fn set_creation_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_after = input;
        self
    }
    /// <p>Only list model cards that were created after the time specified.</p>
    pub fn get_creation_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_after
    }
    /// <p>Only list model cards that were created before the time specified.</p>
    pub fn creation_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>Only list model cards that were created before the time specified.</p>
    pub fn set_creation_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_before = input;
        self
    }
    /// <p>Only list model cards that were created before the time specified.</p>
    pub fn get_creation_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_before
    }
    /// <p>The maximum number of model cards to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of model cards to list.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of model cards to list.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Only list model cards with names that contain the specified string.</p>
    pub fn name_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_contains = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Only list model cards with names that contain the specified string.</p>
    pub fn set_name_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_contains = input;
        self
    }
    /// <p>Only list model cards with names that contain the specified string.</p>
    pub fn get_name_contains(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_contains
    }
    /// <p>Only list model cards with the specified approval status.</p>
    pub fn model_card_status(mut self, input: crate::types::ModelCardStatus) -> Self {
        self.model_card_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Only list model cards with the specified approval status.</p>
    pub fn set_model_card_status(mut self, input: ::std::option::Option<crate::types::ModelCardStatus>) -> Self {
        self.model_card_status = input;
        self
    }
    /// <p>Only list model cards with the specified approval status.</p>
    pub fn get_model_card_status(&self) -> &::std::option::Option<crate::types::ModelCardStatus> {
        &self.model_card_status
    }
    /// <p>If the response to a previous <code>ListModelCards</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model cards, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListModelCards</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model cards, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the response to a previous <code>ListModelCards</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model cards, use the token in the next request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Sort model cards by either name or creation time. Sorts by creation time by default.</p>
    pub fn sort_by(mut self, input: crate::types::ModelCardSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sort model cards by either name or creation time. Sorts by creation time by default.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::ModelCardSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>Sort model cards by either name or creation time. Sorts by creation time by default.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::ModelCardSortBy> {
        &self.sort_by
    }
    /// <p>Sort model cards by ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::types::ModelCardSortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sort model cards by ascending or descending order.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::ModelCardSortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>Sort model cards by ascending or descending order.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::ModelCardSortOrder> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`ListModelCardsInput`](crate::operation::list_model_cards::ListModelCardsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_model_cards::ListModelCardsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_model_cards::ListModelCardsInput {
            creation_time_after: self.creation_time_after,
            creation_time_before: self.creation_time_before,
            max_results: self.max_results,
            name_contains: self.name_contains,
            model_card_status: self.model_card_status,
            next_token: self.next_token,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
        })
    }
}
