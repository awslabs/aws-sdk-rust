// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartPipelineExecutionInput {
    /// <p>The name of the pipeline.</p>
    #[doc(hidden)]
    pub pipeline_name: std::option::Option<std::string::String>,
    /// <p>The display name of the pipeline execution.</p>
    #[doc(hidden)]
    pub pipeline_execution_display_name: std::option::Option<std::string::String>,
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    #[doc(hidden)]
    pub pipeline_parameters: std::option::Option<std::vec::Vec<crate::types::Parameter>>,
    /// <p>The description of the pipeline execution.</p>
    #[doc(hidden)]
    pub pipeline_execution_description: std::option::Option<std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.</p>
    #[doc(hidden)]
    pub parallelism_configuration: std::option::Option<crate::types::ParallelismConfiguration>,
}
impl StartPipelineExecutionInput {
    /// <p>The name of the pipeline.</p>
    pub fn pipeline_name(&self) -> std::option::Option<&str> {
        self.pipeline_name.as_deref()
    }
    /// <p>The display name of the pipeline execution.</p>
    pub fn pipeline_execution_display_name(&self) -> std::option::Option<&str> {
        self.pipeline_execution_display_name.as_deref()
    }
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    pub fn pipeline_parameters(&self) -> std::option::Option<&[crate::types::Parameter]> {
        self.pipeline_parameters.as_deref()
    }
    /// <p>The description of the pipeline execution.</p>
    pub fn pipeline_execution_description(&self) -> std::option::Option<&str> {
        self.pipeline_execution_description.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.</p>
    pub fn parallelism_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ParallelismConfiguration> {
        self.parallelism_configuration.as_ref()
    }
}
impl StartPipelineExecutionInput {
    /// Creates a new builder-style object to manufacture [`StartPipelineExecutionInput`](crate::operation::start_pipeline_execution::StartPipelineExecutionInput).
    pub fn builder(
    ) -> crate::operation::start_pipeline_execution::builders::StartPipelineExecutionInputBuilder
    {
        crate::operation::start_pipeline_execution::builders::StartPipelineExecutionInputBuilder::default()
    }
}

/// A builder for [`StartPipelineExecutionInput`](crate::operation::start_pipeline_execution::StartPipelineExecutionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartPipelineExecutionInputBuilder {
    pub(crate) pipeline_name: std::option::Option<std::string::String>,
    pub(crate) pipeline_execution_display_name: std::option::Option<std::string::String>,
    pub(crate) pipeline_parameters: std::option::Option<std::vec::Vec<crate::types::Parameter>>,
    pub(crate) pipeline_execution_description: std::option::Option<std::string::String>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) parallelism_configuration:
        std::option::Option<crate::types::ParallelismConfiguration>,
}
impl StartPipelineExecutionInputBuilder {
    /// <p>The name of the pipeline.</p>
    pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.pipeline_name = Some(input.into());
        self
    }
    /// <p>The name of the pipeline.</p>
    pub fn set_pipeline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pipeline_name = input;
        self
    }
    /// <p>The display name of the pipeline execution.</p>
    pub fn pipeline_execution_display_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.pipeline_execution_display_name = Some(input.into());
        self
    }
    /// <p>The display name of the pipeline execution.</p>
    pub fn set_pipeline_execution_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.pipeline_execution_display_name = input;
        self
    }
    /// Appends an item to `pipeline_parameters`.
    ///
    /// To override the contents of this collection use [`set_pipeline_parameters`](Self::set_pipeline_parameters).
    ///
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    pub fn pipeline_parameters(mut self, input: crate::types::Parameter) -> Self {
        let mut v = self.pipeline_parameters.unwrap_or_default();
        v.push(input);
        self.pipeline_parameters = Some(v);
        self
    }
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    pub fn set_pipeline_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Parameter>>,
    ) -> Self {
        self.pipeline_parameters = input;
        self
    }
    /// <p>The description of the pipeline execution.</p>
    pub fn pipeline_execution_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.pipeline_execution_description = Some(input.into());
        self
    }
    /// <p>The description of the pipeline execution.</p>
    pub fn set_pipeline_execution_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.pipeline_execution_description = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.</p>
    pub fn parallelism_configuration(
        mut self,
        input: crate::types::ParallelismConfiguration,
    ) -> Self {
        self.parallelism_configuration = Some(input);
        self
    }
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.</p>
    pub fn set_parallelism_configuration(
        mut self,
        input: std::option::Option<crate::types::ParallelismConfiguration>,
    ) -> Self {
        self.parallelism_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`StartPipelineExecutionInput`](crate::operation::start_pipeline_execution::StartPipelineExecutionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_pipeline_execution::StartPipelineExecutionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_pipeline_execution::StartPipelineExecutionInput {
                pipeline_name: self.pipeline_name,
                pipeline_execution_display_name: self.pipeline_execution_display_name,
                pipeline_parameters: self.pipeline_parameters,
                pipeline_execution_description: self.pipeline_execution_description,
                client_request_token: self.client_request_token,
                parallelism_configuration: self.parallelism_configuration,
            },
        )
    }
}
