// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLabelingJobsForWorkteamInput {
    /// <p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.</p>
    pub workteam_arn: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of labeling jobs to return in each page of the response.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A filter that returns only labeling jobs created after the specified time (timestamp).</p>
    pub creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A filter that returns only labeling jobs created before the specified time (timestamp).</p>
    pub creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A filter the limits jobs to only the ones whose job reference code contains the specified string.</p>
    pub job_reference_code_contains: ::std::option::Option<::std::string::String>,
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub sort_by: ::std::option::Option<crate::types::ListLabelingJobsForWorkteamSortByOptions>,
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl ListLabelingJobsForWorkteamInput {
    /// <p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.</p>
    pub fn workteam_arn(&self) -> ::std::option::Option<&str> {
        self.workteam_arn.as_deref()
    }
    /// <p>The maximum number of labeling jobs to return in each page of the response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A filter that returns only labeling jobs created after the specified time (timestamp).</p>
    pub fn creation_time_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_after.as_ref()
    }
    /// <p>A filter that returns only labeling jobs created before the specified time (timestamp).</p>
    pub fn creation_time_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_before.as_ref()
    }
    /// <p>A filter the limits jobs to only the ones whose job reference code contains the specified string.</p>
    pub fn job_reference_code_contains(&self) -> ::std::option::Option<&str> {
        self.job_reference_code_contains.as_deref()
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::ListLabelingJobsForWorkteamSortByOptions> {
        self.sort_by.as_ref()
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
}
impl ListLabelingJobsForWorkteamInput {
    /// Creates a new builder-style object to manufacture [`ListLabelingJobsForWorkteamInput`](crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamInput).
    pub fn builder() -> crate::operation::list_labeling_jobs_for_workteam::builders::ListLabelingJobsForWorkteamInputBuilder {
        crate::operation::list_labeling_jobs_for_workteam::builders::ListLabelingJobsForWorkteamInputBuilder::default()
    }
}

/// A builder for [`ListLabelingJobsForWorkteamInput`](crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListLabelingJobsForWorkteamInputBuilder {
    pub(crate) workteam_arn: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) job_reference_code_contains: ::std::option::Option<::std::string::String>,
    pub(crate) sort_by: ::std::option::Option<crate::types::ListLabelingJobsForWorkteamSortByOptions>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl ListLabelingJobsForWorkteamInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.</p>
    /// This field is required.
    pub fn workteam_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workteam_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.</p>
    pub fn set_workteam_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workteam_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.</p>
    pub fn get_workteam_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.workteam_arn
    }
    /// <p>The maximum number of labeling jobs to return in each page of the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of labeling jobs to return in each page of the response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of labeling jobs to return in each page of the response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>A filter that returns only labeling jobs created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter that returns only labeling jobs created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_after = input;
        self
    }
    /// <p>A filter that returns only labeling jobs created after the specified time (timestamp).</p>
    pub fn get_creation_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_after
    }
    /// <p>A filter that returns only labeling jobs created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter that returns only labeling jobs created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_before = input;
        self
    }
    /// <p>A filter that returns only labeling jobs created before the specified time (timestamp).</p>
    pub fn get_creation_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_before
    }
    /// <p>A filter the limits jobs to only the ones whose job reference code contains the specified string.</p>
    pub fn job_reference_code_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_reference_code_contains = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter the limits jobs to only the ones whose job reference code contains the specified string.</p>
    pub fn set_job_reference_code_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_reference_code_contains = input;
        self
    }
    /// <p>A filter the limits jobs to only the ones whose job reference code contains the specified string.</p>
    pub fn get_job_reference_code_contains(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_reference_code_contains
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::types::ListLabelingJobsForWorkteamSortByOptions) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::ListLabelingJobsForWorkteamSortByOptions>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::ListLabelingJobsForWorkteamSortByOptions> {
        &self.sort_by
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`ListLabelingJobsForWorkteamInput`](crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_labeling_jobs_for_workteam::ListLabelingJobsForWorkteamInput {
            workteam_arn: self.workteam_arn,
            max_results: self.max_results,
            next_token: self.next_token,
            creation_time_after: self.creation_time_after,
            creation_time_before: self.creation_time_before,
            job_reference_code_contains: self.job_reference_code_contains,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
        })
    }
}
