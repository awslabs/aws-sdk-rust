// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDescribeModelPackageOutput {
    /// <p>The summaries for the model package versions</p>
    #[doc(hidden)]
    pub model_package_summaries: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::BatchDescribeModelPackageSummary,
        >,
    >,
    /// <p>A map of the resource and BatchDescribeModelPackageError objects reporting the error associated with describing the model package.</p>
    #[doc(hidden)]
    pub batch_describe_model_package_error_map: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::BatchDescribeModelPackageError,
        >,
    >,
    _request_id: Option<String>,
}
impl BatchDescribeModelPackageOutput {
    /// <p>The summaries for the model package versions</p>
    pub fn model_package_summaries(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            crate::types::BatchDescribeModelPackageSummary,
        >,
    > {
        self.model_package_summaries.as_ref()
    }
    /// <p>A map of the resource and BatchDescribeModelPackageError objects reporting the error associated with describing the model package.</p>
    pub fn batch_describe_model_package_error_map(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            crate::types::BatchDescribeModelPackageError,
        >,
    > {
        self.batch_describe_model_package_error_map.as_ref()
    }
}
impl aws_http::request_id::RequestId for BatchDescribeModelPackageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDescribeModelPackageOutput {
    /// Creates a new builder-style object to manufacture [`BatchDescribeModelPackageOutput`](crate::operation::batch_describe_model_package::BatchDescribeModelPackageOutput).
    pub fn builder() -> crate::operation::batch_describe_model_package::builders::BatchDescribeModelPackageOutputBuilder{
        crate::operation::batch_describe_model_package::builders::BatchDescribeModelPackageOutputBuilder::default()
    }
}

/// A builder for [`BatchDescribeModelPackageOutput`](crate::operation::batch_describe_model_package::BatchDescribeModelPackageOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDescribeModelPackageOutputBuilder {
    pub(crate) model_package_summaries: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::BatchDescribeModelPackageSummary,
        >,
    >,
    pub(crate) batch_describe_model_package_error_map: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::BatchDescribeModelPackageError,
        >,
    >,
    _request_id: Option<String>,
}
impl BatchDescribeModelPackageOutputBuilder {
    /// Adds a key-value pair to `model_package_summaries`.
    ///
    /// To override the contents of this collection use [`set_model_package_summaries`](Self::set_model_package_summaries).
    ///
    /// <p>The summaries for the model package versions</p>
    pub fn model_package_summaries(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::BatchDescribeModelPackageSummary,
    ) -> Self {
        let mut hash_map = self.model_package_summaries.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.model_package_summaries = Some(hash_map);
        self
    }
    /// <p>The summaries for the model package versions</p>
    pub fn set_model_package_summaries(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::BatchDescribeModelPackageSummary,
            >,
        >,
    ) -> Self {
        self.model_package_summaries = input;
        self
    }
    /// Adds a key-value pair to `batch_describe_model_package_error_map`.
    ///
    /// To override the contents of this collection use [`set_batch_describe_model_package_error_map`](Self::set_batch_describe_model_package_error_map).
    ///
    /// <p>A map of the resource and BatchDescribeModelPackageError objects reporting the error associated with describing the model package.</p>
    pub fn batch_describe_model_package_error_map(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::BatchDescribeModelPackageError,
    ) -> Self {
        let mut hash_map = self
            .batch_describe_model_package_error_map
            .unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.batch_describe_model_package_error_map = Some(hash_map);
        self
    }
    /// <p>A map of the resource and BatchDescribeModelPackageError objects reporting the error associated with describing the model package.</p>
    pub fn set_batch_describe_model_package_error_map(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::BatchDescribeModelPackageError,
            >,
        >,
    ) -> Self {
        self.batch_describe_model_package_error_map = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchDescribeModelPackageOutput`](crate::operation::batch_describe_model_package::BatchDescribeModelPackageOutput).
    pub fn build(
        self,
    ) -> crate::operation::batch_describe_model_package::BatchDescribeModelPackageOutput {
        crate::operation::batch_describe_model_package::BatchDescribeModelPackageOutput {
            model_package_summaries: self.model_package_summaries,
            batch_describe_model_package_error_map: self.batch_describe_model_package_error_map,
            _request_id: self._request_id,
        }
    }
}
