// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMonitoringAlertInput {
    /// <p>The name of a monitoring schedule.</p>
    pub monitoring_schedule_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of a monitoring alert.</p>
    pub monitoring_alert_name: ::std::option::Option<::std::string::String>,
    /// <p>Within <code>EvaluationPeriod</code>, how many execution failures will raise an alert.</p>
    pub datapoints_to_alert: ::std::option::Option<i32>,
    /// <p>The number of most recent monitoring executions to consider when evaluating alert status.</p>
    pub evaluation_period: ::std::option::Option<i32>,
}
impl UpdateMonitoringAlertInput {
    /// <p>The name of a monitoring schedule.</p>
    pub fn monitoring_schedule_name(&self) -> ::std::option::Option<&str> {
        self.monitoring_schedule_name.as_deref()
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn monitoring_alert_name(&self) -> ::std::option::Option<&str> {
        self.monitoring_alert_name.as_deref()
    }
    /// <p>Within <code>EvaluationPeriod</code>, how many execution failures will raise an alert.</p>
    pub fn datapoints_to_alert(&self) -> ::std::option::Option<i32> {
        self.datapoints_to_alert
    }
    /// <p>The number of most recent monitoring executions to consider when evaluating alert status.</p>
    pub fn evaluation_period(&self) -> ::std::option::Option<i32> {
        self.evaluation_period
    }
}
impl UpdateMonitoringAlertInput {
    /// Creates a new builder-style object to manufacture [`UpdateMonitoringAlertInput`](crate::operation::update_monitoring_alert::UpdateMonitoringAlertInput).
    pub fn builder() -> crate::operation::update_monitoring_alert::builders::UpdateMonitoringAlertInputBuilder {
        crate::operation::update_monitoring_alert::builders::UpdateMonitoringAlertInputBuilder::default()
    }
}

/// A builder for [`UpdateMonitoringAlertInput`](crate::operation::update_monitoring_alert::UpdateMonitoringAlertInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateMonitoringAlertInputBuilder {
    pub(crate) monitoring_schedule_name: ::std::option::Option<::std::string::String>,
    pub(crate) monitoring_alert_name: ::std::option::Option<::std::string::String>,
    pub(crate) datapoints_to_alert: ::std::option::Option<i32>,
    pub(crate) evaluation_period: ::std::option::Option<i32>,
}
impl UpdateMonitoringAlertInputBuilder {
    /// <p>The name of a monitoring schedule.</p>
    /// This field is required.
    pub fn monitoring_schedule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitoring_schedule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitoring_schedule_name = input;
        self
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn get_monitoring_schedule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitoring_schedule_name
    }
    /// <p>The name of a monitoring alert.</p>
    /// This field is required.
    pub fn monitoring_alert_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitoring_alert_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn set_monitoring_alert_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitoring_alert_name = input;
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn get_monitoring_alert_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitoring_alert_name
    }
    /// <p>Within <code>EvaluationPeriod</code>, how many execution failures will raise an alert.</p>
    /// This field is required.
    pub fn datapoints_to_alert(mut self, input: i32) -> Self {
        self.datapoints_to_alert = ::std::option::Option::Some(input);
        self
    }
    /// <p>Within <code>EvaluationPeriod</code>, how many execution failures will raise an alert.</p>
    pub fn set_datapoints_to_alert(mut self, input: ::std::option::Option<i32>) -> Self {
        self.datapoints_to_alert = input;
        self
    }
    /// <p>Within <code>EvaluationPeriod</code>, how many execution failures will raise an alert.</p>
    pub fn get_datapoints_to_alert(&self) -> &::std::option::Option<i32> {
        &self.datapoints_to_alert
    }
    /// <p>The number of most recent monitoring executions to consider when evaluating alert status.</p>
    /// This field is required.
    pub fn evaluation_period(mut self, input: i32) -> Self {
        self.evaluation_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of most recent monitoring executions to consider when evaluating alert status.</p>
    pub fn set_evaluation_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evaluation_period = input;
        self
    }
    /// <p>The number of most recent monitoring executions to consider when evaluating alert status.</p>
    pub fn get_evaluation_period(&self) -> &::std::option::Option<i32> {
        &self.evaluation_period
    }
    /// Consumes the builder and constructs a [`UpdateMonitoringAlertInput`](crate::operation::update_monitoring_alert::UpdateMonitoringAlertInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_monitoring_alert::UpdateMonitoringAlertInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_monitoring_alert::UpdateMonitoringAlertInput {
            monitoring_schedule_name: self.monitoring_schedule_name,
            monitoring_alert_name: self.monitoring_alert_name,
            datapoints_to_alert: self.datapoints_to_alert,
            evaluation_period: self.evaluation_period,
        })
    }
}
