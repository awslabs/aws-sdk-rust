// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterDevicesInput {
    /// <p>The name of the fleet.</p>
    #[doc(hidden)]
    pub device_fleet_name: std::option::Option<std::string::String>,
    /// <p>A list of devices to register with SageMaker Edge Manager.</p>
    #[doc(hidden)]
    pub devices: std::option::Option<std::vec::Vec<crate::types::Device>>,
    /// <p>The tags associated with devices.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl RegisterDevicesInput {
    /// <p>The name of the fleet.</p>
    pub fn device_fleet_name(&self) -> std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
    /// <p>A list of devices to register with SageMaker Edge Manager.</p>
    pub fn devices(&self) -> std::option::Option<&[crate::types::Device]> {
        self.devices.as_deref()
    }
    /// <p>The tags associated with devices.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl RegisterDevicesInput {
    /// Creates a new builder-style object to manufacture [`RegisterDevicesInput`](crate::operation::register_devices::RegisterDevicesInput).
    pub fn builder() -> crate::operation::register_devices::builders::RegisterDevicesInputBuilder {
        crate::operation::register_devices::builders::RegisterDevicesInputBuilder::default()
    }
}

/// A builder for [`RegisterDevicesInput`](crate::operation::register_devices::RegisterDevicesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterDevicesInputBuilder {
    pub(crate) device_fleet_name: std::option::Option<std::string::String>,
    pub(crate) devices: std::option::Option<std::vec::Vec<crate::types::Device>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl RegisterDevicesInputBuilder {
    /// <p>The name of the fleet.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_fleet_name = Some(input.into());
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// Appends an item to `devices`.
    ///
    /// To override the contents of this collection use [`set_devices`](Self::set_devices).
    ///
    /// <p>A list of devices to register with SageMaker Edge Manager.</p>
    pub fn devices(mut self, input: crate::types::Device) -> Self {
        let mut v = self.devices.unwrap_or_default();
        v.push(input);
        self.devices = Some(v);
        self
    }
    /// <p>A list of devices to register with SageMaker Edge Manager.</p>
    pub fn set_devices(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Device>>,
    ) -> Self {
        self.devices = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with devices.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags associated with devices.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`RegisterDevicesInput`](crate::operation::register_devices::RegisterDevicesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::register_devices::RegisterDevicesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::register_devices::RegisterDevicesInput {
            device_fleet_name: self.device_fleet_name,
            devices: self.devices,
            tags: self.tags,
        })
    }
}
