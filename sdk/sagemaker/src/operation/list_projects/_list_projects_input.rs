// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListProjectsInput {
    /// <p>A filter that returns the projects that were created after a specified time.</p>
    pub creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A filter that returns the projects that were created before a specified time.</p>
    pub creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The maximum number of projects to return in the response.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A filter that returns the projects whose name contains a specified string.</p>
    pub name_contains: ::std::option::Option<::std::string::String>,
    /// <p>If the result of the previous <code>ListProjects</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    pub sort_by: ::std::option::Option<crate::types::ProjectSortBy>,
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub sort_order: ::std::option::Option<crate::types::ProjectSortOrder>,
}
impl ListProjectsInput {
    /// <p>A filter that returns the projects that were created after a specified time.</p>
    pub fn creation_time_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_after.as_ref()
    }
    /// <p>A filter that returns the projects that were created before a specified time.</p>
    pub fn creation_time_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_before.as_ref()
    }
    /// <p>The maximum number of projects to return in the response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A filter that returns the projects whose name contains a specified string.</p>
    pub fn name_contains(&self) -> ::std::option::Option<&str> {
        self.name_contains.as_deref()
    }
    /// <p>If the result of the previous <code>ListProjects</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::ProjectSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::ProjectSortOrder> {
        self.sort_order.as_ref()
    }
}
impl ListProjectsInput {
    /// Creates a new builder-style object to manufacture [`ListProjectsInput`](crate::operation::list_projects::ListProjectsInput).
    pub fn builder() -> crate::operation::list_projects::builders::ListProjectsInputBuilder {
        crate::operation::list_projects::builders::ListProjectsInputBuilder::default()
    }
}

/// A builder for [`ListProjectsInput`](crate::operation::list_projects::ListProjectsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListProjectsInputBuilder {
    pub(crate) creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) name_contains: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) sort_by: ::std::option::Option<crate::types::ProjectSortBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::ProjectSortOrder>,
}
impl ListProjectsInputBuilder {
    /// <p>A filter that returns the projects that were created after a specified time.</p>
    pub fn creation_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter that returns the projects that were created after a specified time.</p>
    pub fn set_creation_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_after = input;
        self
    }
    /// <p>A filter that returns the projects that were created after a specified time.</p>
    pub fn get_creation_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_after
    }
    /// <p>A filter that returns the projects that were created before a specified time.</p>
    pub fn creation_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter that returns the projects that were created before a specified time.</p>
    pub fn set_creation_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_before = input;
        self
    }
    /// <p>A filter that returns the projects that were created before a specified time.</p>
    pub fn get_creation_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_before
    }
    /// <p>The maximum number of projects to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of projects to return in the response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of projects to return in the response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A filter that returns the projects whose name contains a specified string.</p>
    pub fn name_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_contains = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter that returns the projects whose name contains a specified string.</p>
    pub fn set_name_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_contains = input;
        self
    }
    /// <p>A filter that returns the projects whose name contains a specified string.</p>
    pub fn get_name_contains(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_contains
    }
    /// <p>If the result of the previous <code>ListProjects</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListProjects</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the result of the previous <code>ListProjects</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::types::ProjectSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::ProjectSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::ProjectSortBy> {
        &self.sort_by
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::types::ProjectSortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::ProjectSortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::ProjectSortOrder> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`ListProjectsInput`](crate::operation::list_projects::ListProjectsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_projects::ListProjectsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_projects::ListProjectsInput {
            creation_time_after: self.creation_time_after,
            creation_time_before: self.creation_time_before,
            max_results: self.max_results,
            name_contains: self.name_contains,
            next_token: self.next_token,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
        })
    }
}
