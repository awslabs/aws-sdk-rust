// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeLabelingJobOutput {
    /// <p>The processing status of the labeling job. </p>
    pub labeling_job_status: ::std::option::Option<crate::types::LabelingJobStatus>,
    /// <p>Provides a breakdown of the number of data objects labeled by humans, the number of objects labeled by machine, the number of objects than couldn't be labeled, and the total number of objects labeled. </p>
    pub label_counters: ::std::option::Option<crate::types::LabelCounters>,
    /// <p>If the job failed, the reason that it failed. </p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the labeling job was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the labeling job was last updated.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A unique identifier for work done as part of a labeling job.</p>
    pub job_reference_code: ::std::option::Option<::std::string::String>,
    /// <p>The name assigned to the labeling job when it was created.</p>
    pub labeling_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the labeling job.</p>
    pub labeling_job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The attribute used as the label in the output manifest file.</p>
    pub label_attribute_name: ::std::option::Option<::std::string::String>,
    /// <p>Input configuration information for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.</p>
    pub input_config: ::std::option::Option<crate::types::LabelingJobInputConfig>,
    /// <p>The location of the job's output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.</p>
    pub output_config: ::std::option::Option<crate::types::LabelingJobOutputConfig>,
    /// <p>The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during data labeling.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The S3 location of the JSON file that defines the categories used to label data objects. Please note the following label-category limits:</p>
    /// <ul>
    /// <li> <p>Semantic segmentation labeling jobs using automated labeling: 20 labels</p> </li>
    /// <li> <p>Box bounding labeling jobs (all): 10 labels</p> </li>
    /// </ul>
    /// <p>The file is a JSON structure in the following format:</p>
    /// <p> <code>{</code> </p>
    /// <p> <code> "document-version": "2018-11-28"</code> </p>
    /// <p> <code> "labels": [</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 1</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 2</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> ...</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label n</i>"</code> </p>
    /// <p> <code> }</code> </p>
    /// <p> <code> ]</code> </p>
    /// <p> <code>}</code> </p>
    pub label_category_config_s3_uri: ::std::option::Option<::std::string::String>,
    /// <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped.</p>
    pub stopping_conditions: ::std::option::Option<crate::types::LabelingJobStoppingConditions>,
    /// <p>Configuration information for automated data labeling.</p>
    pub labeling_job_algorithms_config: ::std::option::Option<crate::types::LabelingJobAlgorithmsConfig>,
    /// <p>Configuration information required for human workers to complete a labeling task.</p>
    pub human_task_config: ::std::option::Option<crate::types::HumanTaskConfig>,
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The location of the output produced by the labeling job.</p>
    pub labeling_job_output: ::std::option::Option<crate::types::LabelingJobOutput>,
    _request_id: Option<String>,
}
impl DescribeLabelingJobOutput {
    /// <p>The processing status of the labeling job. </p>
    pub fn labeling_job_status(&self) -> ::std::option::Option<&crate::types::LabelingJobStatus> {
        self.labeling_job_status.as_ref()
    }
    /// <p>Provides a breakdown of the number of data objects labeled by humans, the number of objects labeled by machine, the number of objects than couldn't be labeled, and the total number of objects labeled. </p>
    pub fn label_counters(&self) -> ::std::option::Option<&crate::types::LabelCounters> {
        self.label_counters.as_ref()
    }
    /// <p>If the job failed, the reason that it failed. </p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The date and time that the labeling job was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time that the labeling job was last updated.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>A unique identifier for work done as part of a labeling job.</p>
    pub fn job_reference_code(&self) -> ::std::option::Option<&str> {
        self.job_reference_code.as_deref()
    }
    /// <p>The name assigned to the labeling job when it was created.</p>
    pub fn labeling_job_name(&self) -> ::std::option::Option<&str> {
        self.labeling_job_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the labeling job.</p>
    pub fn labeling_job_arn(&self) -> ::std::option::Option<&str> {
        self.labeling_job_arn.as_deref()
    }
    /// <p>The attribute used as the label in the output manifest file.</p>
    pub fn label_attribute_name(&self) -> ::std::option::Option<&str> {
        self.label_attribute_name.as_deref()
    }
    /// <p>Input configuration information for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.</p>
    pub fn input_config(&self) -> ::std::option::Option<&crate::types::LabelingJobInputConfig> {
        self.input_config.as_ref()
    }
    /// <p>The location of the job's output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.</p>
    pub fn output_config(&self) -> ::std::option::Option<&crate::types::LabelingJobOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during data labeling.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The S3 location of the JSON file that defines the categories used to label data objects. Please note the following label-category limits:</p>
    /// <ul>
    /// <li> <p>Semantic segmentation labeling jobs using automated labeling: 20 labels</p> </li>
    /// <li> <p>Box bounding labeling jobs (all): 10 labels</p> </li>
    /// </ul>
    /// <p>The file is a JSON structure in the following format:</p>
    /// <p> <code>{</code> </p>
    /// <p> <code> "document-version": "2018-11-28"</code> </p>
    /// <p> <code> "labels": [</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 1</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 2</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> ...</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label n</i>"</code> </p>
    /// <p> <code> }</code> </p>
    /// <p> <code> ]</code> </p>
    /// <p> <code>}</code> </p>
    pub fn label_category_config_s3_uri(&self) -> ::std::option::Option<&str> {
        self.label_category_config_s3_uri.as_deref()
    }
    /// <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped.</p>
    pub fn stopping_conditions(&self) -> ::std::option::Option<&crate::types::LabelingJobStoppingConditions> {
        self.stopping_conditions.as_ref()
    }
    /// <p>Configuration information for automated data labeling.</p>
    pub fn labeling_job_algorithms_config(&self) -> ::std::option::Option<&crate::types::LabelingJobAlgorithmsConfig> {
        self.labeling_job_algorithms_config.as_ref()
    }
    /// <p>Configuration information required for human workers to complete a labeling task.</p>
    pub fn human_task_config(&self) -> ::std::option::Option<&crate::types::HumanTaskConfig> {
        self.human_task_config.as_ref()
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The location of the output produced by the labeling job.</p>
    pub fn labeling_job_output(&self) -> ::std::option::Option<&crate::types::LabelingJobOutput> {
        self.labeling_job_output.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeLabelingJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeLabelingJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLabelingJobOutput`](crate::operation::describe_labeling_job::DescribeLabelingJobOutput).
    pub fn builder() -> crate::operation::describe_labeling_job::builders::DescribeLabelingJobOutputBuilder {
        crate::operation::describe_labeling_job::builders::DescribeLabelingJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeLabelingJobOutput`](crate::operation::describe_labeling_job::DescribeLabelingJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeLabelingJobOutputBuilder {
    pub(crate) labeling_job_status: ::std::option::Option<crate::types::LabelingJobStatus>,
    pub(crate) label_counters: ::std::option::Option<crate::types::LabelCounters>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) job_reference_code: ::std::option::Option<::std::string::String>,
    pub(crate) labeling_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) labeling_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) label_attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) input_config: ::std::option::Option<crate::types::LabelingJobInputConfig>,
    pub(crate) output_config: ::std::option::Option<crate::types::LabelingJobOutputConfig>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) label_category_config_s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) stopping_conditions: ::std::option::Option<crate::types::LabelingJobStoppingConditions>,
    pub(crate) labeling_job_algorithms_config: ::std::option::Option<crate::types::LabelingJobAlgorithmsConfig>,
    pub(crate) human_task_config: ::std::option::Option<crate::types::HumanTaskConfig>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) labeling_job_output: ::std::option::Option<crate::types::LabelingJobOutput>,
    _request_id: Option<String>,
}
impl DescribeLabelingJobOutputBuilder {
    /// <p>The processing status of the labeling job. </p>
    /// This field is required.
    pub fn labeling_job_status(mut self, input: crate::types::LabelingJobStatus) -> Self {
        self.labeling_job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The processing status of the labeling job. </p>
    pub fn set_labeling_job_status(mut self, input: ::std::option::Option<crate::types::LabelingJobStatus>) -> Self {
        self.labeling_job_status = input;
        self
    }
    /// <p>The processing status of the labeling job. </p>
    pub fn get_labeling_job_status(&self) -> &::std::option::Option<crate::types::LabelingJobStatus> {
        &self.labeling_job_status
    }
    /// <p>Provides a breakdown of the number of data objects labeled by humans, the number of objects labeled by machine, the number of objects than couldn't be labeled, and the total number of objects labeled. </p>
    /// This field is required.
    pub fn label_counters(mut self, input: crate::types::LabelCounters) -> Self {
        self.label_counters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides a breakdown of the number of data objects labeled by humans, the number of objects labeled by machine, the number of objects than couldn't be labeled, and the total number of objects labeled. </p>
    pub fn set_label_counters(mut self, input: ::std::option::Option<crate::types::LabelCounters>) -> Self {
        self.label_counters = input;
        self
    }
    /// <p>Provides a breakdown of the number of data objects labeled by humans, the number of objects labeled by machine, the number of objects than couldn't be labeled, and the total number of objects labeled. </p>
    pub fn get_label_counters(&self) -> &::std::option::Option<crate::types::LabelCounters> {
        &self.label_counters
    }
    /// <p>If the job failed, the reason that it failed. </p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the job failed, the reason that it failed. </p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>If the job failed, the reason that it failed. </p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The date and time that the labeling job was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the labeling job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the labeling job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The date and time that the labeling job was last updated.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the labeling job was last updated.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The date and time that the labeling job was last updated.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>A unique identifier for work done as part of a labeling job.</p>
    /// This field is required.
    pub fn job_reference_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_reference_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for work done as part of a labeling job.</p>
    pub fn set_job_reference_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_reference_code = input;
        self
    }
    /// <p>A unique identifier for work done as part of a labeling job.</p>
    pub fn get_job_reference_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_reference_code
    }
    /// <p>The name assigned to the labeling job when it was created.</p>
    /// This field is required.
    pub fn labeling_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.labeling_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name assigned to the labeling job when it was created.</p>
    pub fn set_labeling_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.labeling_job_name = input;
        self
    }
    /// <p>The name assigned to the labeling job when it was created.</p>
    pub fn get_labeling_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.labeling_job_name
    }
    /// <p>The Amazon Resource Name (ARN) of the labeling job.</p>
    /// This field is required.
    pub fn labeling_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.labeling_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the labeling job.</p>
    pub fn set_labeling_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.labeling_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the labeling job.</p>
    pub fn get_labeling_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.labeling_job_arn
    }
    /// <p>The attribute used as the label in the output manifest file.</p>
    pub fn label_attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.label_attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The attribute used as the label in the output manifest file.</p>
    pub fn set_label_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.label_attribute_name = input;
        self
    }
    /// <p>The attribute used as the label in the output manifest file.</p>
    pub fn get_label_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.label_attribute_name
    }
    /// <p>Input configuration information for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.</p>
    /// This field is required.
    pub fn input_config(mut self, input: crate::types::LabelingJobInputConfig) -> Self {
        self.input_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Input configuration information for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.</p>
    pub fn set_input_config(mut self, input: ::std::option::Option<crate::types::LabelingJobInputConfig>) -> Self {
        self.input_config = input;
        self
    }
    /// <p>Input configuration information for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.</p>
    pub fn get_input_config(&self) -> &::std::option::Option<crate::types::LabelingJobInputConfig> {
        &self.input_config
    }
    /// <p>The location of the job's output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.</p>
    /// This field is required.
    pub fn output_config(mut self, input: crate::types::LabelingJobOutputConfig) -> Self {
        self.output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location of the job's output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::LabelingJobOutputConfig>) -> Self {
        self.output_config = input;
        self
    }
    /// <p>The location of the job's output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::LabelingJobOutputConfig> {
        &self.output_config
    }
    /// <p>The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during data labeling.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during data labeling.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during data labeling.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The S3 location of the JSON file that defines the categories used to label data objects. Please note the following label-category limits:</p>
    /// <ul>
    /// <li> <p>Semantic segmentation labeling jobs using automated labeling: 20 labels</p> </li>
    /// <li> <p>Box bounding labeling jobs (all): 10 labels</p> </li>
    /// </ul>
    /// <p>The file is a JSON structure in the following format:</p>
    /// <p> <code>{</code> </p>
    /// <p> <code> "document-version": "2018-11-28"</code> </p>
    /// <p> <code> "labels": [</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 1</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 2</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> ...</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label n</i>"</code> </p>
    /// <p> <code> }</code> </p>
    /// <p> <code> ]</code> </p>
    /// <p> <code>}</code> </p>
    pub fn label_category_config_s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.label_category_config_s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 location of the JSON file that defines the categories used to label data objects. Please note the following label-category limits:</p>
    /// <ul>
    /// <li> <p>Semantic segmentation labeling jobs using automated labeling: 20 labels</p> </li>
    /// <li> <p>Box bounding labeling jobs (all): 10 labels</p> </li>
    /// </ul>
    /// <p>The file is a JSON structure in the following format:</p>
    /// <p> <code>{</code> </p>
    /// <p> <code> "document-version": "2018-11-28"</code> </p>
    /// <p> <code> "labels": [</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 1</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 2</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> ...</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label n</i>"</code> </p>
    /// <p> <code> }</code> </p>
    /// <p> <code> ]</code> </p>
    /// <p> <code>}</code> </p>
    pub fn set_label_category_config_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.label_category_config_s3_uri = input;
        self
    }
    /// <p>The S3 location of the JSON file that defines the categories used to label data objects. Please note the following label-category limits:</p>
    /// <ul>
    /// <li> <p>Semantic segmentation labeling jobs using automated labeling: 20 labels</p> </li>
    /// <li> <p>Box bounding labeling jobs (all): 10 labels</p> </li>
    /// </ul>
    /// <p>The file is a JSON structure in the following format:</p>
    /// <p> <code>{</code> </p>
    /// <p> <code> "document-version": "2018-11-28"</code> </p>
    /// <p> <code> "labels": [</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 1</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label 2</i>"</code> </p>
    /// <p> <code> },</code> </p>
    /// <p> <code> ...</code> </p>
    /// <p> <code> {</code> </p>
    /// <p> <code> "label": "<i>label n</i>"</code> </p>
    /// <p> <code> }</code> </p>
    /// <p> <code> ]</code> </p>
    /// <p> <code>}</code> </p>
    pub fn get_label_category_config_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.label_category_config_s3_uri
    }
    /// <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped.</p>
    pub fn stopping_conditions(mut self, input: crate::types::LabelingJobStoppingConditions) -> Self {
        self.stopping_conditions = ::std::option::Option::Some(input);
        self
    }
    /// <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped.</p>
    pub fn set_stopping_conditions(mut self, input: ::std::option::Option<crate::types::LabelingJobStoppingConditions>) -> Self {
        self.stopping_conditions = input;
        self
    }
    /// <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped.</p>
    pub fn get_stopping_conditions(&self) -> &::std::option::Option<crate::types::LabelingJobStoppingConditions> {
        &self.stopping_conditions
    }
    /// <p>Configuration information for automated data labeling.</p>
    pub fn labeling_job_algorithms_config(mut self, input: crate::types::LabelingJobAlgorithmsConfig) -> Self {
        self.labeling_job_algorithms_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information for automated data labeling.</p>
    pub fn set_labeling_job_algorithms_config(mut self, input: ::std::option::Option<crate::types::LabelingJobAlgorithmsConfig>) -> Self {
        self.labeling_job_algorithms_config = input;
        self
    }
    /// <p>Configuration information for automated data labeling.</p>
    pub fn get_labeling_job_algorithms_config(&self) -> &::std::option::Option<crate::types::LabelingJobAlgorithmsConfig> {
        &self.labeling_job_algorithms_config
    }
    /// <p>Configuration information required for human workers to complete a labeling task.</p>
    /// This field is required.
    pub fn human_task_config(mut self, input: crate::types::HumanTaskConfig) -> Self {
        self.human_task_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information required for human workers to complete a labeling task.</p>
    pub fn set_human_task_config(mut self, input: ::std::option::Option<crate::types::HumanTaskConfig>) -> Self {
        self.human_task_config = input;
        self
    }
    /// <p>Configuration information required for human workers to complete a labeling task.</p>
    pub fn get_human_task_config(&self) -> &::std::option::Option<crate::types::HumanTaskConfig> {
        &self.human_task_config
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The location of the output produced by the labeling job.</p>
    pub fn labeling_job_output(mut self, input: crate::types::LabelingJobOutput) -> Self {
        self.labeling_job_output = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location of the output produced by the labeling job.</p>
    pub fn set_labeling_job_output(mut self, input: ::std::option::Option<crate::types::LabelingJobOutput>) -> Self {
        self.labeling_job_output = input;
        self
    }
    /// <p>The location of the output produced by the labeling job.</p>
    pub fn get_labeling_job_output(&self) -> &::std::option::Option<crate::types::LabelingJobOutput> {
        &self.labeling_job_output
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeLabelingJobOutput`](crate::operation::describe_labeling_job::DescribeLabelingJobOutput).
    pub fn build(self) -> crate::operation::describe_labeling_job::DescribeLabelingJobOutput {
        crate::operation::describe_labeling_job::DescribeLabelingJobOutput {
            labeling_job_status: self.labeling_job_status,
            label_counters: self.label_counters,
            failure_reason: self.failure_reason,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            job_reference_code: self.job_reference_code,
            labeling_job_name: self.labeling_job_name,
            labeling_job_arn: self.labeling_job_arn,
            label_attribute_name: self.label_attribute_name,
            input_config: self.input_config,
            output_config: self.output_config,
            role_arn: self.role_arn,
            label_category_config_s3_uri: self.label_category_config_s3_uri,
            stopping_conditions: self.stopping_conditions,
            labeling_job_algorithms_config: self.labeling_job_algorithms_config,
            human_task_config: self.human_task_config,
            tags: self.tags,
            labeling_job_output: self.labeling_job_output,
            _request_id: self._request_id,
        }
    }
}
