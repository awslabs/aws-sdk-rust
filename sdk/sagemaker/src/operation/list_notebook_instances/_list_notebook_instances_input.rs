// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNotebookInstancesInput {
    /// <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the response includes a <code>NextToken</code>. You can use this token in your subsequent <code>ListNotebookInstances</code> request to fetch the next set of notebook instances. </p> <note>
    /// <p>You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request. </p>
    /// </note>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of notebook instances to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::NotebookInstanceSortKey>,
    /// <p>The sort order for results. </p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::NotebookInstanceSortOrder>,
    /// <p>A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.</p>
    #[doc(hidden)]
    pub name_contains: std::option::Option<std::string::String>,
    /// <p>A filter that returns only notebook instances that were created before the specified time (timestamp). </p>
    #[doc(hidden)]
    pub creation_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that returns only notebook instances that were created after the specified time (timestamp).</p>
    #[doc(hidden)]
    pub creation_time_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that returns only notebook instances that were modified before the specified time (timestamp).</p>
    #[doc(hidden)]
    pub last_modified_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that returns only notebook instances that were modified after the specified time (timestamp).</p>
    #[doc(hidden)]
    pub last_modified_time_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that returns only notebook instances with the specified status.</p>
    #[doc(hidden)]
    pub status_equals: std::option::Option<crate::types::NotebookInstanceStatus>,
    /// <p>A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.</p>
    #[doc(hidden)]
    pub notebook_instance_lifecycle_config_name_contains: std::option::Option<std::string::String>,
    /// <p>A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.</p>
    #[doc(hidden)]
    pub default_code_repository_contains: std::option::Option<std::string::String>,
    /// <p>A filter that returns only notebook instances with associated with the specified git repository.</p>
    #[doc(hidden)]
    pub additional_code_repository_equals: std::option::Option<std::string::String>,
}
impl ListNotebookInstancesInput {
    /// <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the response includes a <code>NextToken</code>. You can use this token in your subsequent <code>ListNotebookInstances</code> request to fetch the next set of notebook instances. </p> <note>
    /// <p>You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request. </p>
    /// </note>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of notebook instances to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::NotebookInstanceSortKey> {
        self.sort_by.as_ref()
    }
    /// <p>The sort order for results. </p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::NotebookInstanceSortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.</p>
    pub fn name_contains(&self) -> std::option::Option<&str> {
        self.name_contains.as_deref()
    }
    /// <p>A filter that returns only notebook instances that were created before the specified time (timestamp). </p>
    pub fn creation_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time_before.as_ref()
    }
    /// <p>A filter that returns only notebook instances that were created after the specified time (timestamp).</p>
    pub fn creation_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time_after.as_ref()
    }
    /// <p>A filter that returns only notebook instances that were modified before the specified time (timestamp).</p>
    pub fn last_modified_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time_before.as_ref()
    }
    /// <p>A filter that returns only notebook instances that were modified after the specified time (timestamp).</p>
    pub fn last_modified_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time_after.as_ref()
    }
    /// <p>A filter that returns only notebook instances with the specified status.</p>
    pub fn status_equals(&self) -> std::option::Option<&crate::types::NotebookInstanceStatus> {
        self.status_equals.as_ref()
    }
    /// <p>A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.</p>
    pub fn notebook_instance_lifecycle_config_name_contains(&self) -> std::option::Option<&str> {
        self.notebook_instance_lifecycle_config_name_contains
            .as_deref()
    }
    /// <p>A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.</p>
    pub fn default_code_repository_contains(&self) -> std::option::Option<&str> {
        self.default_code_repository_contains.as_deref()
    }
    /// <p>A filter that returns only notebook instances with associated with the specified git repository.</p>
    pub fn additional_code_repository_equals(&self) -> std::option::Option<&str> {
        self.additional_code_repository_equals.as_deref()
    }
}
impl ListNotebookInstancesInput {
    /// Creates a new builder-style object to manufacture [`ListNotebookInstancesInput`](crate::operation::list_notebook_instances::ListNotebookInstancesInput).
    pub fn builder(
    ) -> crate::operation::list_notebook_instances::builders::ListNotebookInstancesInputBuilder
    {
        crate::operation::list_notebook_instances::builders::ListNotebookInstancesInputBuilder::default()
    }
}

/// A builder for [`ListNotebookInstancesInput`](crate::operation::list_notebook_instances::ListNotebookInstancesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListNotebookInstancesInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) sort_by: std::option::Option<crate::types::NotebookInstanceSortKey>,
    pub(crate) sort_order: std::option::Option<crate::types::NotebookInstanceSortOrder>,
    pub(crate) name_contains: std::option::Option<std::string::String>,
    pub(crate) creation_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_time_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status_equals: std::option::Option<crate::types::NotebookInstanceStatus>,
    pub(crate) notebook_instance_lifecycle_config_name_contains:
        std::option::Option<std::string::String>,
    pub(crate) default_code_repository_contains: std::option::Option<std::string::String>,
    pub(crate) additional_code_repository_equals: std::option::Option<std::string::String>,
}
impl ListNotebookInstancesInputBuilder {
    /// <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the response includes a <code>NextToken</code>. You can use this token in your subsequent <code>ListNotebookInstances</code> request to fetch the next set of notebook instances. </p> <note>
    /// <p>You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request. </p>
    /// </note>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the response includes a <code>NextToken</code>. You can use this token in your subsequent <code>ListNotebookInstances</code> request to fetch the next set of notebook instances. </p> <note>
    /// <p>You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request. </p>
    /// </note>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of notebook instances to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of notebook instances to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn sort_by(mut self, input: crate::types::NotebookInstanceSortKey) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::NotebookInstanceSortKey>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The sort order for results. </p>
    pub fn sort_order(mut self, input: crate::types::NotebookInstanceSortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The sort order for results. </p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::types::NotebookInstanceSortOrder>,
    ) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.name_contains = Some(input.into());
        self
    }
    /// <p>A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name_contains = input;
        self
    }
    /// <p>A filter that returns only notebook instances that were created before the specified time (timestamp). </p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time_before = Some(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created before the specified time (timestamp). </p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time_before = input;
        self
    }
    /// <p>A filter that returns only notebook instances that were created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time_after = Some(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time_after = input;
        self
    }
    /// <p>A filter that returns only notebook instances that were modified before the specified time (timestamp).</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time_before = Some(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified before the specified time (timestamp).</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time_before = input;
        self
    }
    /// <p>A filter that returns only notebook instances that were modified after the specified time (timestamp).</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time_after = Some(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified after the specified time (timestamp).</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time_after = input;
        self
    }
    /// <p>A filter that returns only notebook instances with the specified status.</p>
    pub fn status_equals(mut self, input: crate::types::NotebookInstanceStatus) -> Self {
        self.status_equals = Some(input);
        self
    }
    /// <p>A filter that returns only notebook instances with the specified status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::types::NotebookInstanceStatus>,
    ) -> Self {
        self.status_equals = input;
        self
    }
    /// <p>A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.</p>
    pub fn notebook_instance_lifecycle_config_name_contains(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.notebook_instance_lifecycle_config_name_contains = Some(input.into());
        self
    }
    /// <p>A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.</p>
    pub fn set_notebook_instance_lifecycle_config_name_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notebook_instance_lifecycle_config_name_contains = input;
        self
    }
    /// <p>A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.</p>
    pub fn default_code_repository_contains(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.default_code_repository_contains = Some(input.into());
        self
    }
    /// <p>A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.</p>
    pub fn set_default_code_repository_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_code_repository_contains = input;
        self
    }
    /// <p>A filter that returns only notebook instances with associated with the specified git repository.</p>
    pub fn additional_code_repository_equals(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.additional_code_repository_equals = Some(input.into());
        self
    }
    /// <p>A filter that returns only notebook instances with associated with the specified git repository.</p>
    pub fn set_additional_code_repository_equals(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.additional_code_repository_equals = input;
        self
    }
    /// Consumes the builder and constructs a [`ListNotebookInstancesInput`](crate::operation::list_notebook_instances::ListNotebookInstancesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_notebook_instances::ListNotebookInstancesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_notebook_instances::ListNotebookInstancesInput {
                next_token: self.next_token,
                max_results: self.max_results,
                sort_by: self.sort_by,
                sort_order: self.sort_order,
                name_contains: self.name_contains,
                creation_time_before: self.creation_time_before,
                creation_time_after: self.creation_time_after,
                last_modified_time_before: self.last_modified_time_before,
                last_modified_time_after: self.last_modified_time_after,
                status_equals: self.status_equals,
                notebook_instance_lifecycle_config_name_contains: self
                    .notebook_instance_lifecycle_config_name_contains,
                default_code_repository_contains: self.default_code_repository_contains,
                additional_code_repository_equals: self.additional_code_repository_equals,
            },
        )
    }
}
