// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_notebook_instances::_list_notebook_instances_output::ListNotebookInstancesOutputBuilder;

pub use crate::operation::list_notebook_instances::_list_notebook_instances_input::ListNotebookInstancesInputBuilder;

/// Fluent builder constructing a request to `ListNotebookInstances`.
///
/// <p>Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services Region. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListNotebookInstancesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_notebook_instances::builders::ListNotebookInstancesInputBuilder,
}
impl ListNotebookInstancesFluentBuilder {
    /// Creates a new `ListNotebookInstances`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_notebook_instances::ListNotebookInstances,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_notebook_instances::ListNotebookInstancesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_notebook_instances::ListNotebookInstancesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_notebook_instances::ListNotebookInstancesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_notebook_instances::paginator::ListNotebookInstancesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_notebook_instances::paginator::ListNotebookInstancesPaginator {
        crate::operation::list_notebook_instances::paginator::ListNotebookInstancesPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the response includes a <code>NextToken</code>. You can use this token in your subsequent <code>ListNotebookInstances</code> request to fetch the next set of notebook instances. </p> <note>
    /// <p>You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request. </p>
    /// </note>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the response includes a <code>NextToken</code>. You can use this token in your subsequent <code>ListNotebookInstances</code> request to fetch the next set of notebook instances. </p> <note>
    /// <p>You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request. </p>
    /// </note>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of notebook instances to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of notebook instances to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn sort_by(mut self, input: crate::types::NotebookInstanceSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::NotebookInstanceSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. </p>
    pub fn sort_order(mut self, input: crate::types::NotebookInstanceSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. </p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::types::NotebookInstanceSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created before the specified time (timestamp). </p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created before the specified time (timestamp). </p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified before the specified time (timestamp).</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified before the specified time (timestamp).</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified after the specified time (timestamp).</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified after the specified time (timestamp).</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only notebook instances with the specified status.</p>
    pub fn status_equals(mut self, input: crate::types::NotebookInstanceStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that returns only notebook instances with the specified status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::types::NotebookInstanceStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.</p>
    pub fn notebook_instance_lifecycle_config_name_contains(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .notebook_instance_lifecycle_config_name_contains(input.into());
        self
    }
    /// <p>A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.</p>
    pub fn set_notebook_instance_lifecycle_config_name_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .set_notebook_instance_lifecycle_config_name_contains(input);
        self
    }
    /// <p>A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.</p>
    pub fn default_code_repository_contains(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.default_code_repository_contains(input.into());
        self
    }
    /// <p>A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.</p>
    pub fn set_default_code_repository_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_default_code_repository_contains(input);
        self
    }
    /// <p>A filter that returns only notebook instances with associated with the specified git repository.</p>
    pub fn additional_code_repository_equals(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.additional_code_repository_equals(input.into());
        self
    }
    /// <p>A filter that returns only notebook instances with associated with the specified git repository.</p>
    pub fn set_additional_code_repository_equals(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_additional_code_repository_equals(input);
        self
    }
}
