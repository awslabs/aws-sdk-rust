// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::_list_training_jobs_for_hyper_parameter_tuning_job_output::ListTrainingJobsForHyperParameterTuningJobOutputBuilder;

pub use crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::_list_training_jobs_for_hyper_parameter_tuning_job_input::ListTrainingJobsForHyperParameterTuningJobInputBuilder;

/// Fluent builder constructing a request to `ListTrainingJobsForHyperParameterTuningJob`.
///
/// <p>Gets a list of <code>TrainingJobSummary</code> objects that describe the training jobs that a hyperparameter tuning job launched.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTrainingJobsForHyperParameterTuningJobFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::builders::ListTrainingJobsForHyperParameterTuningJobInputBuilder
            }
impl ListTrainingJobsForHyperParameterTuningJobFluentBuilder {
    /// Creates a new `ListTrainingJobsForHyperParameterTuningJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJob, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJobError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJobOutput, aws_smithy_http::result::SdkError<crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::ListTrainingJobsForHyperParameterTuningJobError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::paginator::ListTrainingJobsForHyperParameterTuningJobPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::paginator::ListTrainingJobsForHyperParameterTuningJobPaginator{
        crate::operation::list_training_jobs_for_hyper_parameter_tuning_job::paginator::ListTrainingJobsForHyperParameterTuningJobPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the tuning job whose training jobs you want to list.</p>
    pub fn hyper_parameter_tuning_job_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.hyper_parameter_tuning_job_name(input.into());
        self
    }
    /// <p>The name of the tuning job whose training jobs you want to list.</p>
    pub fn set_hyper_parameter_tuning_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hyper_parameter_tuning_job_name(input);
        self
    }
    /// <p>If the result of the previous <code>ListTrainingJobsForHyperParameterTuningJob</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of training jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListTrainingJobsForHyperParameterTuningJob</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of training jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of training jobs to return. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of training jobs to return. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A filter that returns only training jobs with the specified status.</p>
    pub fn status_equals(mut self, input: crate::types::TrainingJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that returns only training jobs with the specified status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::types::TrainingJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    /// <p>If the value of this field is <code>FinalObjectiveMetricValue</code>, any training jobs that did not return an objective metric are not listed.</p>
    pub fn sort_by(mut self, input: crate::types::TrainingJobSortByOptions) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    /// <p>If the value of this field is <code>FinalObjectiveMetricValue</code>, any training jobs that did not return an objective metric are not listed.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::TrainingJobSortByOptions>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}
