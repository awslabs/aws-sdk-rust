// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeImageVersionOutput {
    /// <p>The registry path of the container image on which this image version is based.</p>
    #[doc(hidden)]
    pub base_image: std::option::Option<std::string::String>,
    /// <p>The registry path of the container image that contains this image version.</p>
    #[doc(hidden)]
    pub container_image: std::option::Option<std::string::String>,
    /// <p>When the version was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When a create or delete operation fails, the reason for the failure.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The ARN of the image the version is based on.</p>
    #[doc(hidden)]
    pub image_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the version.</p>
    #[doc(hidden)]
    pub image_version_arn: std::option::Option<std::string::String>,
    /// <p>The status of the version.</p>
    #[doc(hidden)]
    pub image_version_status: std::option::Option<crate::types::ImageVersionStatus>,
    /// <p>When the version was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The version number.</p>
    #[doc(hidden)]
    pub version: std::option::Option<i32>,
    /// <p>The stability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub vendor_guidance: std::option::Option<crate::types::VendorGuidance>,
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub job_type: std::option::Option<crate::types::JobType>,
    /// <p>The machine learning framework vended in the image version.</p>
    #[doc(hidden)]
    pub ml_framework: std::option::Option<std::string::String>,
    /// <p>The supported programming language and its version.</p>
    #[doc(hidden)]
    pub programming_lang: std::option::Option<std::string::String>,
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub processor: std::option::Option<crate::types::Processor>,
    /// <p>Indicates Horovod compatibility.</p>
    #[doc(hidden)]
    pub horovod: bool,
    /// <p>The maintainer description of the image version.</p>
    #[doc(hidden)]
    pub release_notes: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeImageVersionOutput {
    /// <p>The registry path of the container image on which this image version is based.</p>
    pub fn base_image(&self) -> std::option::Option<&str> {
        self.base_image.as_deref()
    }
    /// <p>The registry path of the container image that contains this image version.</p>
    pub fn container_image(&self) -> std::option::Option<&str> {
        self.container_image.as_deref()
    }
    /// <p>When the version was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When a create or delete operation fails, the reason for the failure.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The ARN of the image the version is based on.</p>
    pub fn image_arn(&self) -> std::option::Option<&str> {
        self.image_arn.as_deref()
    }
    /// <p>The ARN of the version.</p>
    pub fn image_version_arn(&self) -> std::option::Option<&str> {
        self.image_version_arn.as_deref()
    }
    /// <p>The status of the version.</p>
    pub fn image_version_status(&self) -> std::option::Option<&crate::types::ImageVersionStatus> {
        self.image_version_status.as_ref()
    }
    /// <p>When the version was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The version number.</p>
    pub fn version(&self) -> std::option::Option<i32> {
        self.version
    }
    /// <p>The stability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn vendor_guidance(&self) -> std::option::Option<&crate::types::VendorGuidance> {
        self.vendor_guidance.as_ref()
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn job_type(&self) -> std::option::Option<&crate::types::JobType> {
        self.job_type.as_ref()
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn ml_framework(&self) -> std::option::Option<&str> {
        self.ml_framework.as_deref()
    }
    /// <p>The supported programming language and its version.</p>
    pub fn programming_lang(&self) -> std::option::Option<&str> {
        self.programming_lang.as_deref()
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn processor(&self) -> std::option::Option<&crate::types::Processor> {
        self.processor.as_ref()
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn horovod(&self) -> bool {
        self.horovod
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn release_notes(&self) -> std::option::Option<&str> {
        self.release_notes.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeImageVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeImageVersionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImageVersionOutput`](crate::operation::describe_image_version::DescribeImageVersionOutput).
    pub fn builder(
    ) -> crate::operation::describe_image_version::builders::DescribeImageVersionOutputBuilder {
        crate::operation::describe_image_version::builders::DescribeImageVersionOutputBuilder::default()
    }
}

/// A builder for [`DescribeImageVersionOutput`](crate::operation::describe_image_version::DescribeImageVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeImageVersionOutputBuilder {
    pub(crate) base_image: std::option::Option<std::string::String>,
    pub(crate) container_image: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) image_arn: std::option::Option<std::string::String>,
    pub(crate) image_version_arn: std::option::Option<std::string::String>,
    pub(crate) image_version_status: std::option::Option<crate::types::ImageVersionStatus>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) version: std::option::Option<i32>,
    pub(crate) vendor_guidance: std::option::Option<crate::types::VendorGuidance>,
    pub(crate) job_type: std::option::Option<crate::types::JobType>,
    pub(crate) ml_framework: std::option::Option<std::string::String>,
    pub(crate) programming_lang: std::option::Option<std::string::String>,
    pub(crate) processor: std::option::Option<crate::types::Processor>,
    pub(crate) horovod: std::option::Option<bool>,
    pub(crate) release_notes: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeImageVersionOutputBuilder {
    /// <p>The registry path of the container image on which this image version is based.</p>
    pub fn base_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_image = Some(input.into());
        self
    }
    /// <p>The registry path of the container image on which this image version is based.</p>
    pub fn set_base_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.base_image = input;
        self
    }
    /// <p>The registry path of the container image that contains this image version.</p>
    pub fn container_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_image = Some(input.into());
        self
    }
    /// <p>The registry path of the container image that contains this image version.</p>
    pub fn set_container_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_image = input;
        self
    }
    /// <p>When the version was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the version was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When a create or delete operation fails, the reason for the failure.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>When a create or delete operation fails, the reason for the failure.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The ARN of the image the version is based on.</p>
    pub fn image_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the image the version is based on.</p>
    pub fn set_image_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_arn = input;
        self
    }
    /// <p>The ARN of the version.</p>
    pub fn image_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_version_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the version.</p>
    pub fn set_image_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.image_version_arn = input;
        self
    }
    /// <p>The status of the version.</p>
    pub fn image_version_status(mut self, input: crate::types::ImageVersionStatus) -> Self {
        self.image_version_status = Some(input);
        self
    }
    /// <p>The status of the version.</p>
    pub fn set_image_version_status(
        mut self,
        input: std::option::Option<crate::types::ImageVersionStatus>,
    ) -> Self {
        self.image_version_status = input;
        self
    }
    /// <p>When the version was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>When the version was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The version number.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The version number.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// <p>The stability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn vendor_guidance(mut self, input: crate::types::VendorGuidance) -> Self {
        self.vendor_guidance = Some(input);
        self
    }
    /// <p>The stability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn set_vendor_guidance(
        mut self,
        input: std::option::Option<crate::types::VendorGuidance>,
    ) -> Self {
        self.vendor_guidance = input;
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.job_type = Some(input);
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn set_job_type(mut self, input: std::option::Option<crate::types::JobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn ml_framework(mut self, input: impl Into<std::string::String>) -> Self {
        self.ml_framework = Some(input.into());
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn set_ml_framework(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ml_framework = input;
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn programming_lang(mut self, input: impl Into<std::string::String>) -> Self {
        self.programming_lang = Some(input.into());
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn set_programming_lang(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.programming_lang = input;
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn processor(mut self, input: crate::types::Processor) -> Self {
        self.processor = Some(input);
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn set_processor(mut self, input: std::option::Option<crate::types::Processor>) -> Self {
        self.processor = input;
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn horovod(mut self, input: bool) -> Self {
        self.horovod = Some(input);
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn set_horovod(mut self, input: std::option::Option<bool>) -> Self {
        self.horovod = input;
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn release_notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.release_notes = Some(input.into());
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn set_release_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.release_notes = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeImageVersionOutput`](crate::operation::describe_image_version::DescribeImageVersionOutput).
    pub fn build(self) -> crate::operation::describe_image_version::DescribeImageVersionOutput {
        crate::operation::describe_image_version::DescribeImageVersionOutput {
            base_image: self.base_image,
            container_image: self.container_image,
            creation_time: self.creation_time,
            failure_reason: self.failure_reason,
            image_arn: self.image_arn,
            image_version_arn: self.image_version_arn,
            image_version_status: self.image_version_status,
            last_modified_time: self.last_modified_time,
            version: self.version,
            vendor_guidance: self.vendor_guidance,
            job_type: self.job_type,
            ml_framework: self.ml_framework,
            programming_lang: self.programming_lang,
            processor: self.processor,
            horovod: self.horovod.unwrap_or_default(),
            release_notes: self.release_notes,
            _request_id: self._request_id,
        }
    }
}
