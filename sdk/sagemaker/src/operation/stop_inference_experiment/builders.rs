// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::stop_inference_experiment::_stop_inference_experiment_output::StopInferenceExperimentOutputBuilder;

pub use crate::operation::stop_inference_experiment::_stop_inference_experiment_input::StopInferenceExperimentInputBuilder;

/// Fluent builder constructing a request to `StopInferenceExperiment`.
///
/// <p>Stops an inference experiment.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopInferenceExperimentFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::stop_inference_experiment::builders::StopInferenceExperimentInputBuilder,
}
impl StopInferenceExperimentFluentBuilder {
    /// Creates a new `StopInferenceExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::stop_inference_experiment::StopInferenceExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::stop_inference_experiment::StopInferenceExperimentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::stop_inference_experiment::StopInferenceExperimentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::stop_inference_experiment::StopInferenceExperimentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the inference experiment to stop.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the inference experiment to stop.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Adds a key-value pair to `ModelVariantActions`.
    ///
    /// To override the contents of this collection use [`set_model_variant_actions`](Self::set_model_variant_actions).
    ///
    /// <p> Array of key-value pairs, with names of variants mapped to actions. The possible actions are the following: </p>
    /// <ul>
    /// <li> <p> <code>Promote</code> - Promote the shadow variant to a production variant</p> </li>
    /// <li> <p> <code>Remove</code> - Delete the variant</p> </li>
    /// <li> <p> <code>Retain</code> - Keep the variant as it is</p> </li>
    /// </ul>
    pub fn model_variant_actions(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ModelVariantAction,
    ) -> Self {
        self.inner = self.inner.model_variant_actions(k.into(), v);
        self
    }
    /// <p> Array of key-value pairs, with names of variants mapped to actions. The possible actions are the following: </p>
    /// <ul>
    /// <li> <p> <code>Promote</code> - Promote the shadow variant to a production variant</p> </li>
    /// <li> <p> <code>Remove</code> - Delete the variant</p> </li>
    /// <li> <p> <code>Retain</code> - Keep the variant as it is</p> </li>
    /// </ul>
    pub fn set_model_variant_actions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ModelVariantAction>,
        >,
    ) -> Self {
        self.inner = self.inner.set_model_variant_actions(input);
        self
    }
    /// Appends an item to `DesiredModelVariants`.
    ///
    /// To override the contents of this collection use [`set_desired_model_variants`](Self::set_desired_model_variants).
    ///
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant that you want to deploy after the inference experiment stops. Each <code>ModelVariantConfig</code> describes the infrastructure configuration for deploying the corresponding variant. </p>
    pub fn desired_model_variants(mut self, input: crate::types::ModelVariantConfig) -> Self {
        self.inner = self.inner.desired_model_variants(input);
        self
    }
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant that you want to deploy after the inference experiment stops. Each <code>ModelVariantConfig</code> describes the infrastructure configuration for deploying the corresponding variant. </p>
    pub fn set_desired_model_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ModelVariantConfig>>,
    ) -> Self {
        self.inner = self.inner.set_desired_model_variants(input);
        self
    }
    /// <p> The desired state of the experiment after stopping. The possible states are the following: </p>
    /// <ul>
    /// <li> <p> <code>Completed</code>: The experiment completed successfully</p> </li>
    /// <li> <p> <code>Cancelled</code>: The experiment was canceled</p> </li>
    /// </ul>
    pub fn desired_state(
        mut self,
        input: crate::types::InferenceExperimentStopDesiredState,
    ) -> Self {
        self.inner = self.inner.desired_state(input);
        self
    }
    /// <p> The desired state of the experiment after stopping. The possible states are the following: </p>
    /// <ul>
    /// <li> <p> <code>Completed</code>: The experiment completed successfully</p> </li>
    /// <li> <p> <code>Cancelled</code>: The experiment was canceled</p> </li>
    /// </ul>
    pub fn set_desired_state(
        mut self,
        input: std::option::Option<crate::types::InferenceExperimentStopDesiredState>,
    ) -> Self {
        self.inner = self.inner.set_desired_state(input);
        self
    }
    /// <p>The reason for stopping the experiment.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reason(input.into());
        self
    }
    /// <p>The reason for stopping the experiment.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
}
