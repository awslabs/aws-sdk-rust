// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateImageVersionInput {
    /// <p>The name of the image.</p>
    pub image_name: ::std::option::Option<::std::string::String>,
    /// <p>The alias of the image version.</p>
    pub alias: ::std::option::Option<::std::string::String>,
    /// <p>The version of the image.</p>
    pub version: ::std::option::Option<i32>,
    /// <p>A list of aliases to add.</p>
    pub aliases_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of aliases to delete.</p>
    pub aliases_to_delete: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The availability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub vendor_guidance: ::std::option::Option<crate::types::VendorGuidance>,
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub job_type: ::std::option::Option<crate::types::JobType>,
    /// <p>The machine learning framework vended in the image version.</p>
    pub ml_framework: ::std::option::Option<::std::string::String>,
    /// <p>The supported programming language and its version.</p>
    pub programming_lang: ::std::option::Option<::std::string::String>,
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub processor: ::std::option::Option<crate::types::Processor>,
    /// <p>Indicates Horovod compatibility.</p>
    pub horovod: ::std::option::Option<bool>,
    /// <p>The maintainer description of the image version.</p>
    pub release_notes: ::std::option::Option<::std::string::String>,
}
impl UpdateImageVersionInput {
    /// <p>The name of the image.</p>
    pub fn image_name(&self) -> ::std::option::Option<&str> {
        self.image_name.as_deref()
    }
    /// <p>The alias of the image version.</p>
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>The version of the image.</p>
    pub fn version(&self) -> ::std::option::Option<i32> {
        self.version
    }
    /// <p>A list of aliases to add.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aliases_to_add.is_none()`.
    pub fn aliases_to_add(&self) -> &[::std::string::String] {
        self.aliases_to_add.as_deref().unwrap_or_default()
    }
    /// <p>A list of aliases to delete.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aliases_to_delete.is_none()`.
    pub fn aliases_to_delete(&self) -> &[::std::string::String] {
        self.aliases_to_delete.as_deref().unwrap_or_default()
    }
    /// <p>The availability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn vendor_guidance(&self) -> ::std::option::Option<&crate::types::VendorGuidance> {
        self.vendor_guidance.as_ref()
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn job_type(&self) -> ::std::option::Option<&crate::types::JobType> {
        self.job_type.as_ref()
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn ml_framework(&self) -> ::std::option::Option<&str> {
        self.ml_framework.as_deref()
    }
    /// <p>The supported programming language and its version.</p>
    pub fn programming_lang(&self) -> ::std::option::Option<&str> {
        self.programming_lang.as_deref()
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn processor(&self) -> ::std::option::Option<&crate::types::Processor> {
        self.processor.as_ref()
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn horovod(&self) -> ::std::option::Option<bool> {
        self.horovod
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn release_notes(&self) -> ::std::option::Option<&str> {
        self.release_notes.as_deref()
    }
}
impl UpdateImageVersionInput {
    /// Creates a new builder-style object to manufacture [`UpdateImageVersionInput`](crate::operation::update_image_version::UpdateImageVersionInput).
    pub fn builder() -> crate::operation::update_image_version::builders::UpdateImageVersionInputBuilder {
        crate::operation::update_image_version::builders::UpdateImageVersionInputBuilder::default()
    }
}

/// A builder for [`UpdateImageVersionInput`](crate::operation::update_image_version::UpdateImageVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateImageVersionInputBuilder {
    pub(crate) image_name: ::std::option::Option<::std::string::String>,
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<i32>,
    pub(crate) aliases_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) aliases_to_delete: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) vendor_guidance: ::std::option::Option<crate::types::VendorGuidance>,
    pub(crate) job_type: ::std::option::Option<crate::types::JobType>,
    pub(crate) ml_framework: ::std::option::Option<::std::string::String>,
    pub(crate) programming_lang: ::std::option::Option<::std::string::String>,
    pub(crate) processor: ::std::option::Option<crate::types::Processor>,
    pub(crate) horovod: ::std::option::Option<bool>,
    pub(crate) release_notes: ::std::option::Option<::std::string::String>,
}
impl UpdateImageVersionInputBuilder {
    /// <p>The name of the image.</p>
    /// This field is required.
    pub fn image_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the image.</p>
    pub fn set_image_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_name = input;
        self
    }
    /// <p>The name of the image.</p>
    pub fn get_image_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_name
    }
    /// <p>The alias of the image version.</p>
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// <p>The version of the image.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the image.</p>
    pub fn set_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the image.</p>
    pub fn get_version(&self) -> &::std::option::Option<i32> {
        &self.version
    }
    /// Appends an item to `aliases_to_add`.
    ///
    /// To override the contents of this collection use [`set_aliases_to_add`](Self::set_aliases_to_add).
    ///
    /// <p>A list of aliases to add.</p>
    pub fn aliases_to_add(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.aliases_to_add.unwrap_or_default();
        v.push(input.into());
        self.aliases_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of aliases to add.</p>
    pub fn set_aliases_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.aliases_to_add = input;
        self
    }
    /// <p>A list of aliases to add.</p>
    pub fn get_aliases_to_add(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.aliases_to_add
    }
    /// Appends an item to `aliases_to_delete`.
    ///
    /// To override the contents of this collection use [`set_aliases_to_delete`](Self::set_aliases_to_delete).
    ///
    /// <p>A list of aliases to delete.</p>
    pub fn aliases_to_delete(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.aliases_to_delete.unwrap_or_default();
        v.push(input.into());
        self.aliases_to_delete = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of aliases to delete.</p>
    pub fn set_aliases_to_delete(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.aliases_to_delete = input;
        self
    }
    /// <p>A list of aliases to delete.</p>
    pub fn get_aliases_to_delete(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.aliases_to_delete
    }
    /// <p>The availability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn vendor_guidance(mut self, input: crate::types::VendorGuidance) -> Self {
        self.vendor_guidance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The availability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn set_vendor_guidance(mut self, input: ::std::option::Option<crate::types::VendorGuidance>) -> Self {
        self.vendor_guidance = input;
        self
    }
    /// <p>The availability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn get_vendor_guidance(&self) -> &::std::option::Option<crate::types::VendorGuidance> {
        &self.vendor_guidance
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn set_job_type(mut self, input: ::std::option::Option<crate::types::JobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn get_job_type(&self) -> &::std::option::Option<crate::types::JobType> {
        &self.job_type
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn ml_framework(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ml_framework = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn set_ml_framework(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ml_framework = input;
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn get_ml_framework(&self) -> &::std::option::Option<::std::string::String> {
        &self.ml_framework
    }
    /// <p>The supported programming language and its version.</p>
    pub fn programming_lang(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.programming_lang = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn set_programming_lang(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.programming_lang = input;
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn get_programming_lang(&self) -> &::std::option::Option<::std::string::String> {
        &self.programming_lang
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn processor(mut self, input: crate::types::Processor) -> Self {
        self.processor = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn set_processor(mut self, input: ::std::option::Option<crate::types::Processor>) -> Self {
        self.processor = input;
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn get_processor(&self) -> &::std::option::Option<crate::types::Processor> {
        &self.processor
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn horovod(mut self, input: bool) -> Self {
        self.horovod = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn set_horovod(mut self, input: ::std::option::Option<bool>) -> Self {
        self.horovod = input;
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn get_horovod(&self) -> &::std::option::Option<bool> {
        &self.horovod
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn release_notes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.release_notes = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn set_release_notes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.release_notes = input;
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn get_release_notes(&self) -> &::std::option::Option<::std::string::String> {
        &self.release_notes
    }
    /// Consumes the builder and constructs a [`UpdateImageVersionInput`](crate::operation::update_image_version::UpdateImageVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_image_version::UpdateImageVersionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_image_version::UpdateImageVersionInput {
            image_name: self.image_name,
            alias: self.alias,
            version: self.version,
            aliases_to_add: self.aliases_to_add,
            aliases_to_delete: self.aliases_to_delete,
            vendor_guidance: self.vendor_guidance,
            job_type: self.job_type,
            ml_framework: self.ml_framework,
            programming_lang: self.programming_lang,
            processor: self.processor,
            horovod: self.horovod,
            release_notes: self.release_notes,
        })
    }
}
