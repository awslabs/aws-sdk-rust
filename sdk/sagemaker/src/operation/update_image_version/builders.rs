// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_image_version::_update_image_version_output::UpdateImageVersionOutputBuilder;

pub use crate::operation::update_image_version::_update_image_version_input::UpdateImageVersionInputBuilder;

/// Fluent builder constructing a request to `UpdateImageVersion`.
///
/// <p>Updates the properties of a SageMaker image version.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateImageVersionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_image_version::builders::UpdateImageVersionInputBuilder,
}
impl UpdateImageVersionFluentBuilder {
    /// Creates a new `UpdateImageVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_image_version::UpdateImageVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_image_version::UpdateImageVersionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_image_version::UpdateImageVersionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_image_version::UpdateImageVersionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the image.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
    /// <p>The version of the image.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.inner = self.inner.version(input);
        self
    }
    /// <p>The version of the image.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_version(input);
        self
    }
    /// Appends an item to `AliasesToAdd`.
    ///
    /// To override the contents of this collection use [`set_aliases_to_add`](Self::set_aliases_to_add).
    ///
    /// <p>A list of aliases to add.</p>
    pub fn aliases_to_add(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aliases_to_add(input.into());
        self
    }
    /// <p>A list of aliases to add.</p>
    pub fn set_aliases_to_add(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_aliases_to_add(input);
        self
    }
    /// Appends an item to `AliasesToDelete`.
    ///
    /// To override the contents of this collection use [`set_aliases_to_delete`](Self::set_aliases_to_delete).
    ///
    /// <p>A list of aliases to delete.</p>
    pub fn aliases_to_delete(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aliases_to_delete(input.into());
        self
    }
    /// <p>A list of aliases to delete.</p>
    pub fn set_aliases_to_delete(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_aliases_to_delete(input);
        self
    }
    /// <p>The availability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn vendor_guidance(mut self, input: crate::types::VendorGuidance) -> Self {
        self.inner = self.inner.vendor_guidance(input);
        self
    }
    /// <p>The availability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn set_vendor_guidance(
        mut self,
        input: std::option::Option<crate::types::VendorGuidance>,
    ) -> Self {
        self.inner = self.inner.set_vendor_guidance(input);
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.inner = self.inner.job_type(input);
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn set_job_type(mut self, input: std::option::Option<crate::types::JobType>) -> Self {
        self.inner = self.inner.set_job_type(input);
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn ml_framework(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ml_framework(input.into());
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn set_ml_framework(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ml_framework(input);
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn programming_lang(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.programming_lang(input.into());
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn set_programming_lang(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_programming_lang(input);
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn processor(mut self, input: crate::types::Processor) -> Self {
        self.inner = self.inner.processor(input);
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn set_processor(mut self, input: std::option::Option<crate::types::Processor>) -> Self {
        self.inner = self.inner.set_processor(input);
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn horovod(mut self, input: bool) -> Self {
        self.inner = self.inner.horovod(input);
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn set_horovod(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_horovod(input);
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn release_notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.release_notes(input.into());
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn set_release_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_release_notes(input);
        self
    }
}
