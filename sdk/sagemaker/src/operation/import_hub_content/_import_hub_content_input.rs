// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportHubContentInput {
    /// <p>The name of the hub content to import.</p>
    pub hub_content_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the hub content to import.</p>
    pub hub_content_version: ::std::option::Option<::std::string::String>,
    /// <p>The type of hub content to import.</p>
    pub hub_content_type: ::std::option::Option<crate::types::HubContentType>,
    /// <p>The version of the hub content schema to import.</p>
    pub document_schema_version: ::std::option::Option<::std::string::String>,
    /// <p>The name of the hub to import content into.</p>
    pub hub_name: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the hub content to import.</p>
    pub hub_content_display_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the hub content to import.</p>
    pub hub_content_description: ::std::option::Option<::std::string::String>,
    /// <p>A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.</p>
    pub hub_content_markdown: ::std::option::Option<::std::string::String>,
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub hub_content_document: ::std::option::Option<::std::string::String>,
    /// <p>The searchable keywords of the hub content.</p>
    pub hub_content_search_keywords: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Any tags associated with the hub content.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ImportHubContentInput {
    /// <p>The name of the hub content to import.</p>
    pub fn hub_content_name(&self) -> ::std::option::Option<&str> {
        self.hub_content_name.as_deref()
    }
    /// <p>The version of the hub content to import.</p>
    pub fn hub_content_version(&self) -> ::std::option::Option<&str> {
        self.hub_content_version.as_deref()
    }
    /// <p>The type of hub content to import.</p>
    pub fn hub_content_type(&self) -> ::std::option::Option<&crate::types::HubContentType> {
        self.hub_content_type.as_ref()
    }
    /// <p>The version of the hub content schema to import.</p>
    pub fn document_schema_version(&self) -> ::std::option::Option<&str> {
        self.document_schema_version.as_deref()
    }
    /// <p>The name of the hub to import content into.</p>
    pub fn hub_name(&self) -> ::std::option::Option<&str> {
        self.hub_name.as_deref()
    }
    /// <p>The display name of the hub content to import.</p>
    pub fn hub_content_display_name(&self) -> ::std::option::Option<&str> {
        self.hub_content_display_name.as_deref()
    }
    /// <p>A description of the hub content to import.</p>
    pub fn hub_content_description(&self) -> ::std::option::Option<&str> {
        self.hub_content_description.as_deref()
    }
    /// <p>A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.</p>
    pub fn hub_content_markdown(&self) -> ::std::option::Option<&str> {
        self.hub_content_markdown.as_deref()
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn hub_content_document(&self) -> ::std::option::Option<&str> {
        self.hub_content_document.as_deref()
    }
    /// <p>The searchable keywords of the hub content.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hub_content_search_keywords.is_none()`.
    pub fn hub_content_search_keywords(&self) -> &[::std::string::String] {
        self.hub_content_search_keywords.as_deref().unwrap_or_default()
    }
    /// <p>Any tags associated with the hub content.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ImportHubContentInput {
    /// Creates a new builder-style object to manufacture [`ImportHubContentInput`](crate::operation::import_hub_content::ImportHubContentInput).
    pub fn builder() -> crate::operation::import_hub_content::builders::ImportHubContentInputBuilder {
        crate::operation::import_hub_content::builders::ImportHubContentInputBuilder::default()
    }
}

/// A builder for [`ImportHubContentInput`](crate::operation::import_hub_content::ImportHubContentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportHubContentInputBuilder {
    pub(crate) hub_content_name: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_version: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_type: ::std::option::Option<crate::types::HubContentType>,
    pub(crate) document_schema_version: ::std::option::Option<::std::string::String>,
    pub(crate) hub_name: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_display_name: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_description: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_markdown: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_document: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_search_keywords: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ImportHubContentInputBuilder {
    /// <p>The name of the hub content to import.</p>
    /// This field is required.
    pub fn hub_content_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hub content to import.</p>
    pub fn set_hub_content_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_name = input;
        self
    }
    /// <p>The name of the hub content to import.</p>
    pub fn get_hub_content_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_name
    }
    /// <p>The version of the hub content to import.</p>
    pub fn hub_content_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the hub content to import.</p>
    pub fn set_hub_content_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_version = input;
        self
    }
    /// <p>The version of the hub content to import.</p>
    pub fn get_hub_content_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_version
    }
    /// <p>The type of hub content to import.</p>
    /// This field is required.
    pub fn hub_content_type(mut self, input: crate::types::HubContentType) -> Self {
        self.hub_content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of hub content to import.</p>
    pub fn set_hub_content_type(mut self, input: ::std::option::Option<crate::types::HubContentType>) -> Self {
        self.hub_content_type = input;
        self
    }
    /// <p>The type of hub content to import.</p>
    pub fn get_hub_content_type(&self) -> &::std::option::Option<crate::types::HubContentType> {
        &self.hub_content_type
    }
    /// <p>The version of the hub content schema to import.</p>
    /// This field is required.
    pub fn document_schema_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_schema_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the hub content schema to import.</p>
    pub fn set_document_schema_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_schema_version = input;
        self
    }
    /// <p>The version of the hub content schema to import.</p>
    pub fn get_document_schema_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_schema_version
    }
    /// <p>The name of the hub to import content into.</p>
    /// This field is required.
    pub fn hub_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hub to import content into.</p>
    pub fn set_hub_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_name = input;
        self
    }
    /// <p>The name of the hub to import content into.</p>
    pub fn get_hub_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_name
    }
    /// <p>The display name of the hub content to import.</p>
    pub fn hub_content_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the hub content to import.</p>
    pub fn set_hub_content_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_display_name = input;
        self
    }
    /// <p>The display name of the hub content to import.</p>
    pub fn get_hub_content_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_display_name
    }
    /// <p>A description of the hub content to import.</p>
    pub fn hub_content_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the hub content to import.</p>
    pub fn set_hub_content_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_description = input;
        self
    }
    /// <p>A description of the hub content to import.</p>
    pub fn get_hub_content_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_description
    }
    /// <p>A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.</p>
    pub fn hub_content_markdown(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_markdown = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.</p>
    pub fn set_hub_content_markdown(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_markdown = input;
        self
    }
    /// <p>A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.</p>
    pub fn get_hub_content_markdown(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_markdown
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    /// This field is required.
    pub fn hub_content_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn set_hub_content_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_document = input;
        self
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn get_hub_content_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_document
    }
    /// Appends an item to `hub_content_search_keywords`.
    ///
    /// To override the contents of this collection use [`set_hub_content_search_keywords`](Self::set_hub_content_search_keywords).
    ///
    /// <p>The searchable keywords of the hub content.</p>
    pub fn hub_content_search_keywords(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.hub_content_search_keywords.unwrap_or_default();
        v.push(input.into());
        self.hub_content_search_keywords = ::std::option::Option::Some(v);
        self
    }
    /// <p>The searchable keywords of the hub content.</p>
    pub fn set_hub_content_search_keywords(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.hub_content_search_keywords = input;
        self
    }
    /// <p>The searchable keywords of the hub content.</p>
    pub fn get_hub_content_search_keywords(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.hub_content_search_keywords
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags associated with the hub content.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags associated with the hub content.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags associated with the hub content.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ImportHubContentInput`](crate::operation::import_hub_content::ImportHubContentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::import_hub_content::ImportHubContentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::import_hub_content::ImportHubContentInput {
            hub_content_name: self.hub_content_name,
            hub_content_version: self.hub_content_version,
            hub_content_type: self.hub_content_type,
            document_schema_version: self.document_schema_version,
            hub_name: self.hub_name,
            hub_content_display_name: self.hub_content_display_name,
            hub_content_description: self.hub_content_description,
            hub_content_markdown: self.hub_content_markdown,
            hub_content_document: self.hub_content_document,
            hub_content_search_keywords: self.hub_content_search_keywords,
            tags: self.tags,
        })
    }
}
