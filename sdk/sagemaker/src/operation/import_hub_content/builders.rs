// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_hub_content::_import_hub_content_output::ImportHubContentOutputBuilder;

pub use crate::operation::import_hub_content::_import_hub_content_input::ImportHubContentInputBuilder;

impl ImportHubContentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::import_hub_content::ImportHubContentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_hub_content::ImportHubContentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.import_hub_content();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ImportHubContent`.
///
/// <p>Import hub content.</p> <note>
/// <p>Hub APIs are only callable through SageMaker Studio.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ImportHubContentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_hub_content::builders::ImportHubContentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::import_hub_content::ImportHubContentOutput,
        crate::operation::import_hub_content::ImportHubContentError,
    > for ImportHubContentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::import_hub_content::ImportHubContentOutput,
            crate::operation::import_hub_content::ImportHubContentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ImportHubContentFluentBuilder {
    /// Creates a new `ImportHubContent`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ImportHubContent as a reference.
    pub fn as_input(&self) -> &crate::operation::import_hub_content::builders::ImportHubContentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::import_hub_content::ImportHubContentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_hub_content::ImportHubContentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::import_hub_content::ImportHubContent::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::import_hub_content::ImportHubContent::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::import_hub_content::ImportHubContentOutput,
        crate::operation::import_hub_content::ImportHubContentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the hub content to import.</p>
    pub fn hub_content_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hub_content_name(input.into());
        self
    }
    /// <p>The name of the hub content to import.</p>
    pub fn set_hub_content_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_name(input);
        self
    }
    /// <p>The name of the hub content to import.</p>
    pub fn get_hub_content_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hub_content_name()
    }
    /// <p>The version of the hub content to import.</p>
    pub fn hub_content_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hub_content_version(input.into());
        self
    }
    /// <p>The version of the hub content to import.</p>
    pub fn set_hub_content_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_version(input);
        self
    }
    /// <p>The version of the hub content to import.</p>
    pub fn get_hub_content_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hub_content_version()
    }
    /// <p>The type of hub content to import.</p>
    pub fn hub_content_type(mut self, input: crate::types::HubContentType) -> Self {
        self.inner = self.inner.hub_content_type(input);
        self
    }
    /// <p>The type of hub content to import.</p>
    pub fn set_hub_content_type(mut self, input: ::std::option::Option<crate::types::HubContentType>) -> Self {
        self.inner = self.inner.set_hub_content_type(input);
        self
    }
    /// <p>The type of hub content to import.</p>
    pub fn get_hub_content_type(&self) -> &::std::option::Option<crate::types::HubContentType> {
        self.inner.get_hub_content_type()
    }
    /// <p>The version of the hub content schema to import.</p>
    pub fn document_schema_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.document_schema_version(input.into());
        self
    }
    /// <p>The version of the hub content schema to import.</p>
    pub fn set_document_schema_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_document_schema_version(input);
        self
    }
    /// <p>The version of the hub content schema to import.</p>
    pub fn get_document_schema_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_document_schema_version()
    }
    /// <p>The name of the hub to import content into.</p>
    pub fn hub_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub to import content into.</p>
    pub fn set_hub_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
    /// <p>The name of the hub to import content into.</p>
    pub fn get_hub_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hub_name()
    }
    /// <p>The display name of the hub content to import.</p>
    pub fn hub_content_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hub_content_display_name(input.into());
        self
    }
    /// <p>The display name of the hub content to import.</p>
    pub fn set_hub_content_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_display_name(input);
        self
    }
    /// <p>The display name of the hub content to import.</p>
    pub fn get_hub_content_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hub_content_display_name()
    }
    /// <p>A description of the hub content to import.</p>
    pub fn hub_content_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hub_content_description(input.into());
        self
    }
    /// <p>A description of the hub content to import.</p>
    pub fn set_hub_content_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_description(input);
        self
    }
    /// <p>A description of the hub content to import.</p>
    pub fn get_hub_content_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hub_content_description()
    }
    /// <p>A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.</p>
    pub fn hub_content_markdown(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hub_content_markdown(input.into());
        self
    }
    /// <p>A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.</p>
    pub fn set_hub_content_markdown(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_markdown(input);
        self
    }
    /// <p>A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.</p>
    pub fn get_hub_content_markdown(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hub_content_markdown()
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn hub_content_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hub_content_document(input.into());
        self
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn set_hub_content_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_document(input);
        self
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn get_hub_content_document(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hub_content_document()
    }
    /// Appends an item to `HubContentSearchKeywords`.
    ///
    /// To override the contents of this collection use [`set_hub_content_search_keywords`](Self::set_hub_content_search_keywords).
    ///
    /// <p>The searchable keywords of the hub content.</p>
    pub fn hub_content_search_keywords(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hub_content_search_keywords(input.into());
        self
    }
    /// <p>The searchable keywords of the hub content.</p>
    pub fn set_hub_content_search_keywords(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_hub_content_search_keywords(input);
        self
    }
    /// <p>The searchable keywords of the hub content.</p>
    pub fn get_hub_content_search_keywords(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_hub_content_search_keywords()
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags associated with the hub content.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Any tags associated with the hub content.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Any tags associated with the hub content.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
