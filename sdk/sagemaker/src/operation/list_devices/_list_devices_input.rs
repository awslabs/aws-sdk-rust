// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDevicesInput {
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Maximum number of results to select.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Select fleets where the job was updated after X</p>
    pub latest_heartbeat_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A filter that searches devices that contains this name in any of their models.</p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>Filter for fleets containing this name in their device fleet name.</p>
    pub device_fleet_name: ::std::option::Option<::std::string::String>,
}
impl ListDevicesInput {
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Maximum number of results to select.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Select fleets where the job was updated after X</p>
    pub fn latest_heartbeat_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.latest_heartbeat_after.as_ref()
    }
    /// <p>A filter that searches devices that contains this name in any of their models.</p>
    pub fn model_name(&self) -> ::std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>Filter for fleets containing this name in their device fleet name.</p>
    pub fn device_fleet_name(&self) -> ::std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
}
impl ListDevicesInput {
    /// Creates a new builder-style object to manufacture [`ListDevicesInput`](crate::operation::list_devices::ListDevicesInput).
    pub fn builder() -> crate::operation::list_devices::builders::ListDevicesInputBuilder {
        crate::operation::list_devices::builders::ListDevicesInputBuilder::default()
    }
}

/// A builder for [`ListDevicesInput`](crate::operation::list_devices::ListDevicesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDevicesInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) latest_heartbeat_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_fleet_name: ::std::option::Option<::std::string::String>,
}
impl ListDevicesInputBuilder {
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Maximum number of results to select.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of results to select.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Maximum number of results to select.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Select fleets where the job was updated after X</p>
    pub fn latest_heartbeat_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.latest_heartbeat_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>Select fleets where the job was updated after X</p>
    pub fn set_latest_heartbeat_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.latest_heartbeat_after = input;
        self
    }
    /// <p>Select fleets where the job was updated after X</p>
    pub fn get_latest_heartbeat_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.latest_heartbeat_after
    }
    /// <p>A filter that searches devices that contains this name in any of their models.</p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter that searches devices that contains this name in any of their models.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>A filter that searches devices that contains this name in any of their models.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>Filter for fleets containing this name in their device fleet name.</p>
    pub fn device_fleet_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_fleet_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter for fleets containing this name in their device fleet name.</p>
    pub fn set_device_fleet_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// <p>Filter for fleets containing this name in their device fleet name.</p>
    pub fn get_device_fleet_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_fleet_name
    }
    /// Consumes the builder and constructs a [`ListDevicesInput`](crate::operation::list_devices::ListDevicesInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_devices::ListDevicesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_devices::ListDevicesInput {
            next_token: self.next_token,
            max_results: self.max_results,
            latest_heartbeat_after: self.latest_heartbeat_after,
            model_name: self.model_name,
            device_fleet_name: self.device_fleet_name,
        })
    }
}
