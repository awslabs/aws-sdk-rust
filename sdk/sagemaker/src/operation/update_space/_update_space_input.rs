// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSpaceInput {
    /// <p>The ID of the associated Domain.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the space.</p>
    pub space_name: ::std::option::Option<::std::string::String>,
    /// <p>A collection of space settings.</p>
    pub space_settings: ::std::option::Option<crate::types::SpaceSettings>,
}
impl UpdateSpaceInput {
    /// <p>The ID of the associated Domain.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> ::std::option::Option<&str> {
        self.space_name.as_deref()
    }
    /// <p>A collection of space settings.</p>
    pub fn space_settings(&self) -> ::std::option::Option<&crate::types::SpaceSettings> {
        self.space_settings.as_ref()
    }
}
impl UpdateSpaceInput {
    /// Creates a new builder-style object to manufacture [`UpdateSpaceInput`](crate::operation::update_space::UpdateSpaceInput).
    pub fn builder() -> crate::operation::update_space::builders::UpdateSpaceInputBuilder {
        crate::operation::update_space::builders::UpdateSpaceInputBuilder::default()
    }
}

/// A builder for [`UpdateSpaceInput`](crate::operation::update_space::UpdateSpaceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSpaceInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) space_settings: ::std::option::Option<crate::types::SpaceSettings>,
}
impl UpdateSpaceInputBuilder {
    /// <p>The ID of the associated Domain.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The name of the space.</p>
    /// This field is required.
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>A collection of space settings.</p>
    pub fn space_settings(mut self, input: crate::types::SpaceSettings) -> Self {
        self.space_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of space settings.</p>
    pub fn set_space_settings(mut self, input: ::std::option::Option<crate::types::SpaceSettings>) -> Self {
        self.space_settings = input;
        self
    }
    /// <p>A collection of space settings.</p>
    pub fn get_space_settings(&self) -> &::std::option::Option<crate::types::SpaceSettings> {
        &self.space_settings
    }
    /// Consumes the builder and constructs a [`UpdateSpaceInput`](crate::operation::update_space::UpdateSpaceInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_space::UpdateSpaceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_space::UpdateSpaceInput {
            domain_id: self.domain_id,
            space_name: self.space_name,
            space_settings: self.space_settings,
        })
    }
}
