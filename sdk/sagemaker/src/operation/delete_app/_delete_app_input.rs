// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAppInput {
    /// <p>The domain ID.</p>
    #[doc(hidden)]
    pub domain_id: std::option::Option<std::string::String>,
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    #[doc(hidden)]
    pub user_profile_name: std::option::Option<std::string::String>,
    /// <p>The type of app.</p>
    #[doc(hidden)]
    pub app_type: std::option::Option<crate::types::AppType>,
    /// <p>The name of the app.</p>
    #[doc(hidden)]
    pub app_name: std::option::Option<std::string::String>,
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    #[doc(hidden)]
    pub space_name: std::option::Option<std::string::String>,
}
impl DeleteAppInput {
    /// <p>The domain ID.</p>
    pub fn domain_id(&self) -> std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    pub fn user_profile_name(&self) -> std::option::Option<&str> {
        self.user_profile_name.as_deref()
    }
    /// <p>The type of app.</p>
    pub fn app_type(&self) -> std::option::Option<&crate::types::AppType> {
        self.app_type.as_ref()
    }
    /// <p>The name of the app.</p>
    pub fn app_name(&self) -> std::option::Option<&str> {
        self.app_name.as_deref()
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn space_name(&self) -> std::option::Option<&str> {
        self.space_name.as_deref()
    }
}
impl DeleteAppInput {
    /// Creates a new builder-style object to manufacture [`DeleteAppInput`](crate::operation::delete_app::DeleteAppInput).
    pub fn builder() -> crate::operation::delete_app::builders::DeleteAppInputBuilder {
        crate::operation::delete_app::builders::DeleteAppInputBuilder::default()
    }
}

/// A builder for [`DeleteAppInput`](crate::operation::delete_app::DeleteAppInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteAppInputBuilder {
    pub(crate) domain_id: std::option::Option<std::string::String>,
    pub(crate) user_profile_name: std::option::Option<std::string::String>,
    pub(crate) app_type: std::option::Option<crate::types::AppType>,
    pub(crate) app_name: std::option::Option<std::string::String>,
    pub(crate) space_name: std::option::Option<std::string::String>,
}
impl DeleteAppInputBuilder {
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_id = Some(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_profile_name = Some(input.into());
        self
    }
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_profile_name = input;
        self
    }
    /// <p>The type of app.</p>
    pub fn app_type(mut self, input: crate::types::AppType) -> Self {
        self.app_type = Some(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn set_app_type(mut self, input: std::option::Option<crate::types::AppType>) -> Self {
        self.app_type = input;
        self
    }
    /// <p>The name of the app.</p>
    pub fn app_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_name = Some(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_app_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_name = input;
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.space_name = Some(input.into());
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteAppInput`](crate::operation::delete_app::DeleteAppInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_app::DeleteAppInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_app::DeleteAppInput {
            domain_id: self.domain_id,
            user_profile_name: self.user_profile_name,
            app_type: self.app_type,
            app_name: self.app_name,
            space_name: self.space_name,
        })
    }
}
