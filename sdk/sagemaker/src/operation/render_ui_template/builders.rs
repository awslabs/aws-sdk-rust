// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::render_ui_template::_render_ui_template_output::RenderUiTemplateOutputBuilder;

pub use crate::operation::render_ui_template::_render_ui_template_input::RenderUiTemplateInputBuilder;

/// Fluent builder constructing a request to `RenderUiTemplate`.
///
/// <p>Renders the UI template so that you can preview the worker's experience. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RenderUiTemplateFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::render_ui_template::builders::RenderUiTemplateInputBuilder,
}
impl RenderUiTemplateFluentBuilder {
    /// Creates a new `RenderUiTemplate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::render_ui_template::RenderUiTemplate,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::render_ui_template::RenderUiTemplateError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::render_ui_template::RenderUiTemplateOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::render_ui_template::RenderUiTemplateError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A <code>Template</code> object containing the worker UI template to render.</p>
    pub fn ui_template(mut self, input: crate::types::UiTemplate) -> Self {
        self.inner = self.inner.ui_template(input);
        self
    }
    /// <p>A <code>Template</code> object containing the worker UI template to render.</p>
    pub fn set_ui_template(mut self, input: std::option::Option<crate::types::UiTemplate>) -> Self {
        self.inner = self.inner.set_ui_template(input);
        self
    }
    /// <p>A <code>RenderableTask</code> object containing a representative task to render.</p>
    pub fn task(mut self, input: crate::types::RenderableTask) -> Self {
        self.inner = self.inner.task(input);
        self
    }
    /// <p>A <code>RenderableTask</code> object containing a representative task to render.</p>
    pub fn set_task(mut self, input: std::option::Option<crate::types::RenderableTask>) -> Self {
        self.inner = self.inner.set_task(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code> parameter.</p>
    /// <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <code>UiConfig</code>.</p>
    pub fn human_task_ui_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.human_task_ui_arn(input.into());
        self
    }
    /// <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code> parameter.</p>
    /// <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <code>UiConfig</code>.</p>
    pub fn set_human_task_ui_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_human_task_ui_arn(input);
        self
    }
}
