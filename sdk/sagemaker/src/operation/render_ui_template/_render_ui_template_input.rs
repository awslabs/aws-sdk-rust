// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RenderUiTemplateInput {
    /// <p>A <code>Template</code> object containing the worker UI template to render.</p>
    #[doc(hidden)]
    pub ui_template: std::option::Option<crate::types::UiTemplate>,
    /// <p>A <code>RenderableTask</code> object containing a representative task to render.</p>
    #[doc(hidden)]
    pub task: std::option::Option<crate::types::RenderableTask>,
    /// <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code> parameter.</p>
    /// <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <code>UiConfig</code>.</p>
    #[doc(hidden)]
    pub human_task_ui_arn: std::option::Option<std::string::String>,
}
impl RenderUiTemplateInput {
    /// <p>A <code>Template</code> object containing the worker UI template to render.</p>
    pub fn ui_template(&self) -> std::option::Option<&crate::types::UiTemplate> {
        self.ui_template.as_ref()
    }
    /// <p>A <code>RenderableTask</code> object containing a representative task to render.</p>
    pub fn task(&self) -> std::option::Option<&crate::types::RenderableTask> {
        self.task.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code> parameter.</p>
    /// <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <code>UiConfig</code>.</p>
    pub fn human_task_ui_arn(&self) -> std::option::Option<&str> {
        self.human_task_ui_arn.as_deref()
    }
}
impl RenderUiTemplateInput {
    /// Creates a new builder-style object to manufacture [`RenderUiTemplateInput`](crate::operation::render_ui_template::RenderUiTemplateInput).
    pub fn builder() -> crate::operation::render_ui_template::builders::RenderUiTemplateInputBuilder
    {
        crate::operation::render_ui_template::builders::RenderUiTemplateInputBuilder::default()
    }
}

/// A builder for [`RenderUiTemplateInput`](crate::operation::render_ui_template::RenderUiTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RenderUiTemplateInputBuilder {
    pub(crate) ui_template: std::option::Option<crate::types::UiTemplate>,
    pub(crate) task: std::option::Option<crate::types::RenderableTask>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) human_task_ui_arn: std::option::Option<std::string::String>,
}
impl RenderUiTemplateInputBuilder {
    /// <p>A <code>Template</code> object containing the worker UI template to render.</p>
    pub fn ui_template(mut self, input: crate::types::UiTemplate) -> Self {
        self.ui_template = Some(input);
        self
    }
    /// <p>A <code>Template</code> object containing the worker UI template to render.</p>
    pub fn set_ui_template(mut self, input: std::option::Option<crate::types::UiTemplate>) -> Self {
        self.ui_template = input;
        self
    }
    /// <p>A <code>RenderableTask</code> object containing a representative task to render.</p>
    pub fn task(mut self, input: crate::types::RenderableTask) -> Self {
        self.task = Some(input);
        self
    }
    /// <p>A <code>RenderableTask</code> object containing a representative task to render.</p>
    pub fn set_task(mut self, input: std::option::Option<crate::types::RenderableTask>) -> Self {
        self.task = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code> parameter.</p>
    /// <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <code>UiConfig</code>.</p>
    pub fn human_task_ui_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.human_task_ui_arn = Some(input.into());
        self
    }
    /// <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code> parameter.</p>
    /// <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <code>UiConfig</code>.</p>
    pub fn set_human_task_ui_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.human_task_ui_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`RenderUiTemplateInput`](crate::operation::render_ui_template::RenderUiTemplateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::render_ui_template::RenderUiTemplateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::render_ui_template::RenderUiTemplateInput {
                ui_template: self.ui_template,
                task: self.task,
                role_arn: self.role_arn,
                human_task_ui_arn: self.human_task_ui_arn,
            },
        )
    }
}
