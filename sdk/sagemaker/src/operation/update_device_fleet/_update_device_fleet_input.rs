// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDeviceFleetInput {
    /// <p>The name of the fleet.</p>
    pub device_fleet_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Description of the fleet.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Output configuration for storing sample data collected by the fleet.</p>
    pub output_config: ::std::option::Option<crate::types::EdgeOutputConfig>,
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub enable_iot_role_alias: ::std::option::Option<bool>,
}
impl UpdateDeviceFleetInput {
    /// <p>The name of the fleet.</p>
    pub fn device_fleet_name(&self) -> ::std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Description of the fleet.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Output configuration for storing sample data collected by the fleet.</p>
    pub fn output_config(&self) -> ::std::option::Option<&crate::types::EdgeOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn enable_iot_role_alias(&self) -> ::std::option::Option<bool> {
        self.enable_iot_role_alias
    }
}
impl UpdateDeviceFleetInput {
    /// Creates a new builder-style object to manufacture [`UpdateDeviceFleetInput`](crate::operation::update_device_fleet::UpdateDeviceFleetInput).
    pub fn builder() -> crate::operation::update_device_fleet::builders::UpdateDeviceFleetInputBuilder {
        crate::operation::update_device_fleet::builders::UpdateDeviceFleetInputBuilder::default()
    }
}

/// A builder for [`UpdateDeviceFleetInput`](crate::operation::update_device_fleet::UpdateDeviceFleetInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDeviceFleetInputBuilder {
    pub(crate) device_fleet_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) output_config: ::std::option::Option<crate::types::EdgeOutputConfig>,
    pub(crate) enable_iot_role_alias: ::std::option::Option<bool>,
}
impl UpdateDeviceFleetInputBuilder {
    /// <p>The name of the fleet.</p>
    /// This field is required.
    pub fn device_fleet_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_fleet_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn set_device_fleet_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn get_device_fleet_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_fleet_name
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Description of the fleet.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the fleet.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the fleet.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Output configuration for storing sample data collected by the fleet.</p>
    /// This field is required.
    pub fn output_config(mut self, input: crate::types::EdgeOutputConfig) -> Self {
        self.output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Output configuration for storing sample data collected by the fleet.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::EdgeOutputConfig>) -> Self {
        self.output_config = input;
        self
    }
    /// <p>Output configuration for storing sample data collected by the fleet.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::EdgeOutputConfig> {
        &self.output_config
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn enable_iot_role_alias(mut self, input: bool) -> Self {
        self.enable_iot_role_alias = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn set_enable_iot_role_alias(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_iot_role_alias = input;
        self
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn get_enable_iot_role_alias(&self) -> &::std::option::Option<bool> {
        &self.enable_iot_role_alias
    }
    /// Consumes the builder and constructs a [`UpdateDeviceFleetInput`](crate::operation::update_device_fleet::UpdateDeviceFleetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_device_fleet::UpdateDeviceFleetInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_device_fleet::UpdateDeviceFleetInput {
            device_fleet_name: self.device_fleet_name,
            role_arn: self.role_arn,
            description: self.description,
            output_config: self.output_config,
            enable_iot_role_alias: self.enable_iot_role_alias,
        })
    }
}
