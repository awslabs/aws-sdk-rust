// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_trial_component::_update_trial_component_output::UpdateTrialComponentOutputBuilder;

pub use crate::operation::update_trial_component::_update_trial_component_input::UpdateTrialComponentInputBuilder;

/// Fluent builder constructing a request to `UpdateTrialComponent`.
///
/// <p>Updates one or more properties of a trial component.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTrialComponentFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_trial_component::builders::UpdateTrialComponentInputBuilder,
}
impl UpdateTrialComponentFluentBuilder {
    /// Creates a new `UpdateTrialComponent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_trial_component::UpdateTrialComponent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_trial_component::UpdateTrialComponentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_trial_component::UpdateTrialComponentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_trial_component::UpdateTrialComponentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the component to update.</p>
    pub fn trial_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_component_name(input.into());
        self
    }
    /// <p>The name of the component to update.</p>
    pub fn set_trial_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_trial_component_name(input);
        self
    }
    /// <p>The name of the component as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is displayed.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The name of the component as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is displayed.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The new status of the component.</p>
    pub fn status(mut self, input: crate::types::TrialComponentStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The new status of the component.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::TrialComponentStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>When the component started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>When the component started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>When the component ended.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>When the component ended.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// Adds a key-value pair to `Parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Replaces all of the component's hyperparameters with the specified hyperparameters.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::TrialComponentParameterValue,
    ) -> Self {
        self.inner = self.inner.parameters(k.into(), v);
        self
    }
    /// <p>Replaces all of the component's hyperparameters with the specified hyperparameters.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::TrialComponentParameterValue,
            >,
        >,
    ) -> Self {
        self.inner = self.inner.set_parameters(input);
        self
    }
    /// Appends an item to `ParametersToRemove`.
    ///
    /// To override the contents of this collection use [`set_parameters_to_remove`](Self::set_parameters_to_remove).
    ///
    /// <p>The hyperparameters to remove from the component.</p>
    pub fn parameters_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.parameters_to_remove(input.into());
        self
    }
    /// <p>The hyperparameters to remove from the component.</p>
    pub fn set_parameters_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_parameters_to_remove(input);
        self
    }
    /// Adds a key-value pair to `InputArtifacts`.
    ///
    /// To override the contents of this collection use [`set_input_artifacts`](Self::set_input_artifacts).
    ///
    /// <p>Replaces all of the component's input artifacts with the specified artifacts.</p>
    pub fn input_artifacts(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::TrialComponentArtifact,
    ) -> Self {
        self.inner = self.inner.input_artifacts(k.into(), v);
        self
    }
    /// <p>Replaces all of the component's input artifacts with the specified artifacts.</p>
    pub fn set_input_artifacts(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::TrialComponentArtifact>,
        >,
    ) -> Self {
        self.inner = self.inner.set_input_artifacts(input);
        self
    }
    /// Appends an item to `InputArtifactsToRemove`.
    ///
    /// To override the contents of this collection use [`set_input_artifacts_to_remove`](Self::set_input_artifacts_to_remove).
    ///
    /// <p>The input artifacts to remove from the component.</p>
    pub fn input_artifacts_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.input_artifacts_to_remove(input.into());
        self
    }
    /// <p>The input artifacts to remove from the component.</p>
    pub fn set_input_artifacts_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_input_artifacts_to_remove(input);
        self
    }
    /// Adds a key-value pair to `OutputArtifacts`.
    ///
    /// To override the contents of this collection use [`set_output_artifacts`](Self::set_output_artifacts).
    ///
    /// <p>Replaces all of the component's output artifacts with the specified artifacts.</p>
    pub fn output_artifacts(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::TrialComponentArtifact,
    ) -> Self {
        self.inner = self.inner.output_artifacts(k.into(), v);
        self
    }
    /// <p>Replaces all of the component's output artifacts with the specified artifacts.</p>
    pub fn set_output_artifacts(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::TrialComponentArtifact>,
        >,
    ) -> Self {
        self.inner = self.inner.set_output_artifacts(input);
        self
    }
    /// Appends an item to `OutputArtifactsToRemove`.
    ///
    /// To override the contents of this collection use [`set_output_artifacts_to_remove`](Self::set_output_artifacts_to_remove).
    ///
    /// <p>The output artifacts to remove from the component.</p>
    pub fn output_artifacts_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.output_artifacts_to_remove(input.into());
        self
    }
    /// <p>The output artifacts to remove from the component.</p>
    pub fn set_output_artifacts_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_output_artifacts_to_remove(input);
        self
    }
}
