// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateImageInput {
    /// <p>A list of properties to delete. Only the <code>Description</code> and <code>DisplayName</code> properties can be deleted.</p>
    #[doc(hidden)]
    pub delete_properties: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The new description for the image.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The new display name for the image.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The name of the image to update.</p>
    #[doc(hidden)]
    pub image_name: std::option::Option<std::string::String>,
    /// <p>The new ARN for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
}
impl UpdateImageInput {
    /// <p>A list of properties to delete. Only the <code>Description</code> and <code>DisplayName</code> properties can be deleted.</p>
    pub fn delete_properties(&self) -> std::option::Option<&[std::string::String]> {
        self.delete_properties.as_deref()
    }
    /// <p>The new description for the image.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The new display name for the image.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The name of the image to update.</p>
    pub fn image_name(&self) -> std::option::Option<&str> {
        self.image_name.as_deref()
    }
    /// <p>The new ARN for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl UpdateImageInput {
    /// Creates a new builder-style object to manufacture [`UpdateImageInput`](crate::operation::update_image::UpdateImageInput).
    pub fn builder() -> crate::operation::update_image::builders::UpdateImageInputBuilder {
        crate::operation::update_image::builders::UpdateImageInputBuilder::default()
    }
}

/// A builder for [`UpdateImageInput`](crate::operation::update_image::UpdateImageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateImageInputBuilder {
    pub(crate) delete_properties: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) image_name: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
}
impl UpdateImageInputBuilder {
    /// Appends an item to `delete_properties`.
    ///
    /// To override the contents of this collection use [`set_delete_properties`](Self::set_delete_properties).
    ///
    /// <p>A list of properties to delete. Only the <code>Description</code> and <code>DisplayName</code> properties can be deleted.</p>
    pub fn delete_properties(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.delete_properties.unwrap_or_default();
        v.push(input.into());
        self.delete_properties = Some(v);
        self
    }
    /// <p>A list of properties to delete. Only the <code>Description</code> and <code>DisplayName</code> properties can be deleted.</p>
    pub fn set_delete_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.delete_properties = input;
        self
    }
    /// <p>The new description for the image.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The new description for the image.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The new display name for the image.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The new display name for the image.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of the image to update.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_name = Some(input.into());
        self
    }
    /// <p>The name of the image to update.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_name = input;
        self
    }
    /// <p>The new ARN for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The new ARN for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateImageInput`](crate::operation::update_image::UpdateImageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_image::UpdateImageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_image::UpdateImageInput {
            delete_properties: self.delete_properties,
            description: self.description,
            display_name: self.display_name,
            image_name: self.image_name,
            role_arn: self.role_arn,
        })
    }
}
