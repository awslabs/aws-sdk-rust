// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_presigned_domain_url::_create_presigned_domain_url_output::CreatePresignedDomainUrlOutputBuilder;

pub use crate::operation::create_presigned_domain_url::_create_presigned_domain_url_input::CreatePresignedDomainUrlInputBuilder;

/// Fluent builder constructing a request to `CreatePresignedDomainUrl`.
///
/// <p>Creates a URL for a specified UserProfile in a Domain. When accessed in a web browser, the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume. This operation can only be called when the authentication mode equals IAM. </p>
/// <p>The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app.</p>
/// <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect to SageMaker Studio Through an Interface VPC Endpoint</a> .</p> <note>
/// <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePresignedDomainUrlFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_presigned_domain_url::builders::CreatePresignedDomainUrlInputBuilder
            }
impl CreatePresignedDomainUrlFluentBuilder {
    /// Creates a new `CreatePresignedDomainUrl`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_presigned_domain_url::CreatePresignedDomainUrl,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The name of the UserProfile to sign-in as.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>The name of the UserProfile to sign-in as.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
    /// <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    pub fn session_expiration_duration_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.session_expiration_duration_in_seconds(input);
        self
    }
    /// <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    pub fn set_session_expiration_duration_in_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_session_expiration_duration_in_seconds(input);
        self
    }
    /// <p>The number of seconds until the pre-signed URL expires. This value defaults to 300.</p>
    pub fn expires_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.expires_in_seconds(input);
        self
    }
    /// <p>The number of seconds until the pre-signed URL expires. This value defaults to 300.</p>
    pub fn set_expires_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_expires_in_seconds(input);
        self
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_space_name(input);
        self
    }
}
