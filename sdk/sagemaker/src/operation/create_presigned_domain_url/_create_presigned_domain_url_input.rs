// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePresignedDomainUrlInput {
    /// <p>The domain ID.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the UserProfile to sign-in as.</p>
    pub user_profile_name: ::std::option::Option<::std::string::String>,
    /// <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    pub session_expiration_duration_in_seconds: ::std::option::Option<i32>,
    /// <p>The number of seconds until the pre-signed URL expires. This value defaults to 300.</p>
    pub expires_in_seconds: ::std::option::Option<i32>,
    /// <p>The name of the space.</p>
    pub space_name: ::std::option::Option<::std::string::String>,
}
impl CreatePresignedDomainUrlInput {
    /// <p>The domain ID.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The name of the UserProfile to sign-in as.</p>
    pub fn user_profile_name(&self) -> ::std::option::Option<&str> {
        self.user_profile_name.as_deref()
    }
    /// <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    pub fn session_expiration_duration_in_seconds(&self) -> ::std::option::Option<i32> {
        self.session_expiration_duration_in_seconds
    }
    /// <p>The number of seconds until the pre-signed URL expires. This value defaults to 300.</p>
    pub fn expires_in_seconds(&self) -> ::std::option::Option<i32> {
        self.expires_in_seconds
    }
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> ::std::option::Option<&str> {
        self.space_name.as_deref()
    }
}
impl CreatePresignedDomainUrlInput {
    /// Creates a new builder-style object to manufacture [`CreatePresignedDomainUrlInput`](crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlInput).
    pub fn builder() -> crate::operation::create_presigned_domain_url::builders::CreatePresignedDomainUrlInputBuilder {
        crate::operation::create_presigned_domain_url::builders::CreatePresignedDomainUrlInputBuilder::default()
    }
}

/// A builder for [`CreatePresignedDomainUrlInput`](crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreatePresignedDomainUrlInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) session_expiration_duration_in_seconds: ::std::option::Option<i32>,
    pub(crate) expires_in_seconds: ::std::option::Option<i32>,
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
}
impl CreatePresignedDomainUrlInputBuilder {
    /// <p>The domain ID.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The domain ID.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The name of the UserProfile to sign-in as.</p>
    /// This field is required.
    pub fn user_profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the UserProfile to sign-in as.</p>
    pub fn set_user_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_profile_name = input;
        self
    }
    /// <p>The name of the UserProfile to sign-in as.</p>
    pub fn get_user_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_profile_name
    }
    /// <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    pub fn session_expiration_duration_in_seconds(mut self, input: i32) -> Self {
        self.session_expiration_duration_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    pub fn set_session_expiration_duration_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.session_expiration_duration_in_seconds = input;
        self
    }
    /// <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    pub fn get_session_expiration_duration_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.session_expiration_duration_in_seconds
    }
    /// <p>The number of seconds until the pre-signed URL expires. This value defaults to 300.</p>
    pub fn expires_in_seconds(mut self, input: i32) -> Self {
        self.expires_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of seconds until the pre-signed URL expires. This value defaults to 300.</p>
    pub fn set_expires_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.expires_in_seconds = input;
        self
    }
    /// <p>The number of seconds until the pre-signed URL expires. This value defaults to 300.</p>
    pub fn get_expires_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.expires_in_seconds
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// Consumes the builder and constructs a [`CreatePresignedDomainUrlInput`](crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_presigned_domain_url::CreatePresignedDomainUrlInput {
            domain_id: self.domain_id,
            user_profile_name: self.user_profile_name,
            session_expiration_duration_in_seconds: self.session_expiration_duration_in_seconds,
            expires_in_seconds: self.expires_in_seconds,
            space_name: self.space_name,
        })
    }
}
