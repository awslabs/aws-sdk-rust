// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeModelExplainabilityJobDefinitionOutput {
    /// <p>The Amazon Resource Name (ARN) of the model explainability job.</p>
    #[doc(hidden)]
    pub job_definition_arn: std::option::Option<std::string::String>,
    /// <p>The name of the explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    #[doc(hidden)]
    pub job_definition_name: std::option::Option<std::string::String>,
    /// <p>The time at which the model explainability job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The baseline configuration for a model explainability job.</p>
    #[doc(hidden)]
    pub model_explainability_baseline_config:
        std::option::Option<crate::types::ModelExplainabilityBaselineConfig>,
    /// <p>Configures the model explainability job to run a specified Docker container image.</p>
    #[doc(hidden)]
    pub model_explainability_app_specification:
        std::option::Option<crate::types::ModelExplainabilityAppSpecification>,
    /// <p>Inputs for the model explainability job.</p>
    #[doc(hidden)]
    pub model_explainability_job_input:
        std::option::Option<crate::types::ModelExplainabilityJobInput>,
    /// <p>The output configuration for monitoring jobs.</p>
    #[doc(hidden)]
    pub model_explainability_job_output_config:
        std::option::Option<crate::types::MonitoringOutputConfig>,
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    #[doc(hidden)]
    pub job_resources: std::option::Option<crate::types::MonitoringResources>,
    /// <p>Networking options for a model explainability job.</p>
    #[doc(hidden)]
    pub network_config: std::option::Option<crate::types::MonitoringNetworkConfig>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that has read permission to the input data location and write permission to the output data location in Amazon S3.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    #[doc(hidden)]
    pub stopping_condition: std::option::Option<crate::types::MonitoringStoppingCondition>,
    _request_id: Option<String>,
}
impl DescribeModelExplainabilityJobDefinitionOutput {
    /// <p>The Amazon Resource Name (ARN) of the model explainability job.</p>
    pub fn job_definition_arn(&self) -> std::option::Option<&str> {
        self.job_definition_arn.as_deref()
    }
    /// <p>The name of the explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn job_definition_name(&self) -> std::option::Option<&str> {
        self.job_definition_name.as_deref()
    }
    /// <p>The time at which the model explainability job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The baseline configuration for a model explainability job.</p>
    pub fn model_explainability_baseline_config(
        &self,
    ) -> std::option::Option<&crate::types::ModelExplainabilityBaselineConfig> {
        self.model_explainability_baseline_config.as_ref()
    }
    /// <p>Configures the model explainability job to run a specified Docker container image.</p>
    pub fn model_explainability_app_specification(
        &self,
    ) -> std::option::Option<&crate::types::ModelExplainabilityAppSpecification> {
        self.model_explainability_app_specification.as_ref()
    }
    /// <p>Inputs for the model explainability job.</p>
    pub fn model_explainability_job_input(
        &self,
    ) -> std::option::Option<&crate::types::ModelExplainabilityJobInput> {
        self.model_explainability_job_input.as_ref()
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn model_explainability_job_output_config(
        &self,
    ) -> std::option::Option<&crate::types::MonitoringOutputConfig> {
        self.model_explainability_job_output_config.as_ref()
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn job_resources(&self) -> std::option::Option<&crate::types::MonitoringResources> {
        self.job_resources.as_ref()
    }
    /// <p>Networking options for a model explainability job.</p>
    pub fn network_config(&self) -> std::option::Option<&crate::types::MonitoringNetworkConfig> {
        self.network_config.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that has read permission to the input data location and write permission to the output data location in Amazon S3.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn stopping_condition(
        &self,
    ) -> std::option::Option<&crate::types::MonitoringStoppingCondition> {
        self.stopping_condition.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeModelExplainabilityJobDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeModelExplainabilityJobDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeModelExplainabilityJobDefinitionOutput`](crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionOutput).
    pub fn builder() -> crate::operation::describe_model_explainability_job_definition::builders::DescribeModelExplainabilityJobDefinitionOutputBuilder{
        crate::operation::describe_model_explainability_job_definition::builders::DescribeModelExplainabilityJobDefinitionOutputBuilder::default()
    }
}

/// A builder for [`DescribeModelExplainabilityJobDefinitionOutput`](crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeModelExplainabilityJobDefinitionOutputBuilder {
    pub(crate) job_definition_arn: std::option::Option<std::string::String>,
    pub(crate) job_definition_name: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) model_explainability_baseline_config:
        std::option::Option<crate::types::ModelExplainabilityBaselineConfig>,
    pub(crate) model_explainability_app_specification:
        std::option::Option<crate::types::ModelExplainabilityAppSpecification>,
    pub(crate) model_explainability_job_input:
        std::option::Option<crate::types::ModelExplainabilityJobInput>,
    pub(crate) model_explainability_job_output_config:
        std::option::Option<crate::types::MonitoringOutputConfig>,
    pub(crate) job_resources: std::option::Option<crate::types::MonitoringResources>,
    pub(crate) network_config: std::option::Option<crate::types::MonitoringNetworkConfig>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) stopping_condition: std::option::Option<crate::types::MonitoringStoppingCondition>,
    _request_id: Option<String>,
}
impl DescribeModelExplainabilityJobDefinitionOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the model explainability job.</p>
    pub fn job_definition_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_definition_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model explainability job.</p>
    pub fn set_job_definition_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.job_definition_arn = input;
        self
    }
    /// <p>The name of the explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_definition_name = Some(input.into());
        self
    }
    /// <p>The name of the explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.job_definition_name = input;
        self
    }
    /// <p>The time at which the model explainability job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time at which the model explainability job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The baseline configuration for a model explainability job.</p>
    pub fn model_explainability_baseline_config(
        mut self,
        input: crate::types::ModelExplainabilityBaselineConfig,
    ) -> Self {
        self.model_explainability_baseline_config = Some(input);
        self
    }
    /// <p>The baseline configuration for a model explainability job.</p>
    pub fn set_model_explainability_baseline_config(
        mut self,
        input: std::option::Option<crate::types::ModelExplainabilityBaselineConfig>,
    ) -> Self {
        self.model_explainability_baseline_config = input;
        self
    }
    /// <p>Configures the model explainability job to run a specified Docker container image.</p>
    pub fn model_explainability_app_specification(
        mut self,
        input: crate::types::ModelExplainabilityAppSpecification,
    ) -> Self {
        self.model_explainability_app_specification = Some(input);
        self
    }
    /// <p>Configures the model explainability job to run a specified Docker container image.</p>
    pub fn set_model_explainability_app_specification(
        mut self,
        input: std::option::Option<crate::types::ModelExplainabilityAppSpecification>,
    ) -> Self {
        self.model_explainability_app_specification = input;
        self
    }
    /// <p>Inputs for the model explainability job.</p>
    pub fn model_explainability_job_input(
        mut self,
        input: crate::types::ModelExplainabilityJobInput,
    ) -> Self {
        self.model_explainability_job_input = Some(input);
        self
    }
    /// <p>Inputs for the model explainability job.</p>
    pub fn set_model_explainability_job_input(
        mut self,
        input: std::option::Option<crate::types::ModelExplainabilityJobInput>,
    ) -> Self {
        self.model_explainability_job_input = input;
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn model_explainability_job_output_config(
        mut self,
        input: crate::types::MonitoringOutputConfig,
    ) -> Self {
        self.model_explainability_job_output_config = Some(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn set_model_explainability_job_output_config(
        mut self,
        input: std::option::Option<crate::types::MonitoringOutputConfig>,
    ) -> Self {
        self.model_explainability_job_output_config = input;
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn job_resources(mut self, input: crate::types::MonitoringResources) -> Self {
        self.job_resources = Some(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn set_job_resources(
        mut self,
        input: std::option::Option<crate::types::MonitoringResources>,
    ) -> Self {
        self.job_resources = input;
        self
    }
    /// <p>Networking options for a model explainability job.</p>
    pub fn network_config(mut self, input: crate::types::MonitoringNetworkConfig) -> Self {
        self.network_config = Some(input);
        self
    }
    /// <p>Networking options for a model explainability job.</p>
    pub fn set_network_config(
        mut self,
        input: std::option::Option<crate::types::MonitoringNetworkConfig>,
    ) -> Self {
        self.network_config = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that has read permission to the input data location and write permission to the output data location in Amazon S3.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that has read permission to the input data location and write permission to the output data location in Amazon S3.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn stopping_condition(mut self, input: crate::types::MonitoringStoppingCondition) -> Self {
        self.stopping_condition = Some(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::types::MonitoringStoppingCondition>,
    ) -> Self {
        self.stopping_condition = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeModelExplainabilityJobDefinitionOutput`](crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionOutput).
    pub fn build(self) -> crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionOutput{
        crate::operation::describe_model_explainability_job_definition::DescribeModelExplainabilityJobDefinitionOutput {
            job_definition_arn: self.job_definition_arn
            ,
            job_definition_name: self.job_definition_name
            ,
            creation_time: self.creation_time
            ,
            model_explainability_baseline_config: self.model_explainability_baseline_config
            ,
            model_explainability_app_specification: self.model_explainability_app_specification
            ,
            model_explainability_job_input: self.model_explainability_job_input
            ,
            model_explainability_job_output_config: self.model_explainability_job_output_config
            ,
            job_resources: self.job_resources
            ,
            network_config: self.network_config
            ,
            role_arn: self.role_arn
            ,
            stopping_condition: self.stopping_condition
            ,
            _request_id: self._request_id,
        }
    }
}
