// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSpaceInput {
    /// <p>The ID of the associated Domain.</p>
    #[doc(hidden)]
    pub domain_id: std::option::Option<std::string::String>,
    /// <p>The name of the space.</p>
    #[doc(hidden)]
    pub space_name: std::option::Option<std::string::String>,
    /// <p>Tags to associated with the space. Each tag consists of a key and an optional value. Tag keys must be unique for each resource. Tags are searchable using the <code>Search</code> API.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>A collection of space settings.</p>
    #[doc(hidden)]
    pub space_settings: std::option::Option<crate::types::SpaceSettings>,
}
impl CreateSpaceInput {
    /// <p>The ID of the associated Domain.</p>
    pub fn domain_id(&self) -> std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> std::option::Option<&str> {
        self.space_name.as_deref()
    }
    /// <p>Tags to associated with the space. Each tag consists of a key and an optional value. Tag keys must be unique for each resource. Tags are searchable using the <code>Search</code> API.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>A collection of space settings.</p>
    pub fn space_settings(&self) -> std::option::Option<&crate::types::SpaceSettings> {
        self.space_settings.as_ref()
    }
}
impl CreateSpaceInput {
    /// Creates a new builder-style object to manufacture [`CreateSpaceInput`](crate::operation::create_space::CreateSpaceInput).
    pub fn builder() -> crate::operation::create_space::builders::CreateSpaceInputBuilder {
        crate::operation::create_space::builders::CreateSpaceInputBuilder::default()
    }
}

/// A builder for [`CreateSpaceInput`](crate::operation::create_space::CreateSpaceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateSpaceInputBuilder {
    pub(crate) domain_id: std::option::Option<std::string::String>,
    pub(crate) space_name: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) space_settings: std::option::Option<crate::types::SpaceSettings>,
}
impl CreateSpaceInputBuilder {
    /// <p>The ID of the associated Domain.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_id = Some(input.into());
        self
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.space_name = Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to associated with the space. Each tag consists of a key and an optional value. Tag keys must be unique for each resource. Tags are searchable using the <code>Search</code> API.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Tags to associated with the space. Each tag consists of a key and an optional value. Tag keys must be unique for each resource. Tags are searchable using the <code>Search</code> API.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>A collection of space settings.</p>
    pub fn space_settings(mut self, input: crate::types::SpaceSettings) -> Self {
        self.space_settings = Some(input);
        self
    }
    /// <p>A collection of space settings.</p>
    pub fn set_space_settings(
        mut self,
        input: std::option::Option<crate::types::SpaceSettings>,
    ) -> Self {
        self.space_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateSpaceInput`](crate::operation::create_space::CreateSpaceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_space::CreateSpaceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_space::CreateSpaceInput {
            domain_id: self.domain_id,
            space_name: self.space_name,
            tags: self.tags,
            space_settings: self.space_settings,
        })
    }
}
