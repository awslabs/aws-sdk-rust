// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFeatureMetadataInput {
    /// <p>The name or Amazon Resource Name (ARN) of the feature group containing the feature that you're updating.</p>
    pub feature_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the feature that you're updating.</p>
    pub feature_name: ::std::option::Option<::std::string::String>,
    /// <p>A description that you can write to better describe the feature.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of key-value pairs that you can add to better describe the feature.</p>
    pub parameter_additions: ::std::option::Option<::std::vec::Vec<crate::types::FeatureParameter>>,
    /// <p>A list of parameter keys that you can specify to remove parameters that describe your feature.</p>
    pub parameter_removals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateFeatureMetadataInput {
    /// <p>The name or Amazon Resource Name (ARN) of the feature group containing the feature that you're updating.</p>
    pub fn feature_group_name(&self) -> ::std::option::Option<&str> {
        self.feature_group_name.as_deref()
    }
    /// <p>The name of the feature that you're updating.</p>
    pub fn feature_name(&self) -> ::std::option::Option<&str> {
        self.feature_name.as_deref()
    }
    /// <p>A description that you can write to better describe the feature.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of key-value pairs that you can add to better describe the feature.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameter_additions.is_none()`.
    pub fn parameter_additions(&self) -> &[crate::types::FeatureParameter] {
        self.parameter_additions.as_deref().unwrap_or_default()
    }
    /// <p>A list of parameter keys that you can specify to remove parameters that describe your feature.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameter_removals.is_none()`.
    pub fn parameter_removals(&self) -> &[::std::string::String] {
        self.parameter_removals.as_deref().unwrap_or_default()
    }
}
impl UpdateFeatureMetadataInput {
    /// Creates a new builder-style object to manufacture [`UpdateFeatureMetadataInput`](crate::operation::update_feature_metadata::UpdateFeatureMetadataInput).
    pub fn builder() -> crate::operation::update_feature_metadata::builders::UpdateFeatureMetadataInputBuilder {
        crate::operation::update_feature_metadata::builders::UpdateFeatureMetadataInputBuilder::default()
    }
}

/// A builder for [`UpdateFeatureMetadataInput`](crate::operation::update_feature_metadata::UpdateFeatureMetadataInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateFeatureMetadataInputBuilder {
    pub(crate) feature_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) feature_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) parameter_additions: ::std::option::Option<::std::vec::Vec<crate::types::FeatureParameter>>,
    pub(crate) parameter_removals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateFeatureMetadataInputBuilder {
    /// <p>The name or Amazon Resource Name (ARN) of the feature group containing the feature that you're updating.</p>
    /// This field is required.
    pub fn feature_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feature_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the feature group containing the feature that you're updating.</p>
    pub fn set_feature_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feature_group_name = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the feature group containing the feature that you're updating.</p>
    pub fn get_feature_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.feature_group_name
    }
    /// <p>The name of the feature that you're updating.</p>
    /// This field is required.
    pub fn feature_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feature_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the feature that you're updating.</p>
    pub fn set_feature_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feature_name = input;
        self
    }
    /// <p>The name of the feature that you're updating.</p>
    pub fn get_feature_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.feature_name
    }
    /// <p>A description that you can write to better describe the feature.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description that you can write to better describe the feature.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description that you can write to better describe the feature.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `parameter_additions`.
    ///
    /// To override the contents of this collection use [`set_parameter_additions`](Self::set_parameter_additions).
    ///
    /// <p>A list of key-value pairs that you can add to better describe the feature.</p>
    pub fn parameter_additions(mut self, input: crate::types::FeatureParameter) -> Self {
        let mut v = self.parameter_additions.unwrap_or_default();
        v.push(input);
        self.parameter_additions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of key-value pairs that you can add to better describe the feature.</p>
    pub fn set_parameter_additions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FeatureParameter>>) -> Self {
        self.parameter_additions = input;
        self
    }
    /// <p>A list of key-value pairs that you can add to better describe the feature.</p>
    pub fn get_parameter_additions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FeatureParameter>> {
        &self.parameter_additions
    }
    /// Appends an item to `parameter_removals`.
    ///
    /// To override the contents of this collection use [`set_parameter_removals`](Self::set_parameter_removals).
    ///
    /// <p>A list of parameter keys that you can specify to remove parameters that describe your feature.</p>
    pub fn parameter_removals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.parameter_removals.unwrap_or_default();
        v.push(input.into());
        self.parameter_removals = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of parameter keys that you can specify to remove parameters that describe your feature.</p>
    pub fn set_parameter_removals(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.parameter_removals = input;
        self
    }
    /// <p>A list of parameter keys that you can specify to remove parameters that describe your feature.</p>
    pub fn get_parameter_removals(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.parameter_removals
    }
    /// Consumes the builder and constructs a [`UpdateFeatureMetadataInput`](crate::operation::update_feature_metadata::UpdateFeatureMetadataInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_feature_metadata::UpdateFeatureMetadataInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_feature_metadata::UpdateFeatureMetadataInput {
            feature_group_name: self.feature_group_name,
            feature_name: self.feature_name,
            description: self.description,
            parameter_additions: self.parameter_additions,
            parameter_removals: self.parameter_removals,
        })
    }
}
