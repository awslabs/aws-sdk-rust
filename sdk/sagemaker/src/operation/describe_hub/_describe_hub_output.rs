// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeHubOutput {
    /// <p>The name of the hub.</p>
    pub hub_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the hub.</p>
    pub hub_arn: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the hub.</p>
    pub hub_display_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the hub.</p>
    pub hub_description: ::std::option::Option<::std::string::String>,
    /// <p>The searchable keywords for the hub.</p>
    pub hub_search_keywords: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub s3_storage_config: ::std::option::Option<crate::types::HubS3StorageConfig>,
    /// <p>The status of the hub.</p>
    pub hub_status: ::std::option::Option<crate::types::HubStatus>,
    /// <p>The failure reason if importing hub content failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the hub was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the hub was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeHubOutput {
    /// <p>The name of the hub.</p>
    pub fn hub_name(&self) -> ::std::option::Option<&str> {
        self.hub_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the hub.</p>
    pub fn hub_arn(&self) -> ::std::option::Option<&str> {
        self.hub_arn.as_deref()
    }
    /// <p>The display name of the hub.</p>
    pub fn hub_display_name(&self) -> ::std::option::Option<&str> {
        self.hub_display_name.as_deref()
    }
    /// <p>A description of the hub.</p>
    pub fn hub_description(&self) -> ::std::option::Option<&str> {
        self.hub_description.as_deref()
    }
    /// <p>The searchable keywords for the hub.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hub_search_keywords.is_none()`.
    pub fn hub_search_keywords(&self) -> &[::std::string::String] {
        self.hub_search_keywords.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub fn s3_storage_config(&self) -> ::std::option::Option<&crate::types::HubS3StorageConfig> {
        self.s3_storage_config.as_ref()
    }
    /// <p>The status of the hub.</p>
    pub fn hub_status(&self) -> ::std::option::Option<&crate::types::HubStatus> {
        self.hub_status.as_ref()
    }
    /// <p>The failure reason if importing hub content failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The date and time that the hub was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time that the hub was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeHubOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeHubOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHubOutput`](crate::operation::describe_hub::DescribeHubOutput).
    pub fn builder() -> crate::operation::describe_hub::builders::DescribeHubOutputBuilder {
        crate::operation::describe_hub::builders::DescribeHubOutputBuilder::default()
    }
}

/// A builder for [`DescribeHubOutput`](crate::operation::describe_hub::DescribeHubOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeHubOutputBuilder {
    pub(crate) hub_name: ::std::option::Option<::std::string::String>,
    pub(crate) hub_arn: ::std::option::Option<::std::string::String>,
    pub(crate) hub_display_name: ::std::option::Option<::std::string::String>,
    pub(crate) hub_description: ::std::option::Option<::std::string::String>,
    pub(crate) hub_search_keywords: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) s3_storage_config: ::std::option::Option<crate::types::HubS3StorageConfig>,
    pub(crate) hub_status: ::std::option::Option<crate::types::HubStatus>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeHubOutputBuilder {
    /// <p>The name of the hub.</p>
    /// This field is required.
    pub fn hub_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hub.</p>
    pub fn set_hub_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_name = input;
        self
    }
    /// <p>The name of the hub.</p>
    pub fn get_hub_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_name
    }
    /// <p>The Amazon Resource Name (ARN) of the hub.</p>
    /// This field is required.
    pub fn hub_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub.</p>
    pub fn set_hub_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub.</p>
    pub fn get_hub_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_arn
    }
    /// <p>The display name of the hub.</p>
    pub fn hub_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn set_hub_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_display_name = input;
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn get_hub_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_display_name
    }
    /// <p>A description of the hub.</p>
    pub fn hub_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the hub.</p>
    pub fn set_hub_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_description = input;
        self
    }
    /// <p>A description of the hub.</p>
    pub fn get_hub_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_description
    }
    /// Appends an item to `hub_search_keywords`.
    ///
    /// To override the contents of this collection use [`set_hub_search_keywords`](Self::set_hub_search_keywords).
    ///
    /// <p>The searchable keywords for the hub.</p>
    pub fn hub_search_keywords(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.hub_search_keywords.unwrap_or_default();
        v.push(input.into());
        self.hub_search_keywords = ::std::option::Option::Some(v);
        self
    }
    /// <p>The searchable keywords for the hub.</p>
    pub fn set_hub_search_keywords(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.hub_search_keywords = input;
        self
    }
    /// <p>The searchable keywords for the hub.</p>
    pub fn get_hub_search_keywords(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.hub_search_keywords
    }
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub fn s3_storage_config(mut self, input: crate::types::HubS3StorageConfig) -> Self {
        self.s3_storage_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub fn set_s3_storage_config(mut self, input: ::std::option::Option<crate::types::HubS3StorageConfig>) -> Self {
        self.s3_storage_config = input;
        self
    }
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub fn get_s3_storage_config(&self) -> &::std::option::Option<crate::types::HubS3StorageConfig> {
        &self.s3_storage_config
    }
    /// <p>The status of the hub.</p>
    /// This field is required.
    pub fn hub_status(mut self, input: crate::types::HubStatus) -> Self {
        self.hub_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the hub.</p>
    pub fn set_hub_status(mut self, input: ::std::option::Option<crate::types::HubStatus>) -> Self {
        self.hub_status = input;
        self
    }
    /// <p>The status of the hub.</p>
    pub fn get_hub_status(&self) -> &::std::option::Option<crate::types::HubStatus> {
        &self.hub_status
    }
    /// <p>The failure reason if importing hub content failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure reason if importing hub content failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The failure reason if importing hub content failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The date and time that the hub was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the hub was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the hub was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The date and time that the hub was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the hub was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The date and time that the hub was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeHubOutput`](crate::operation::describe_hub::DescribeHubOutput).
    pub fn build(self) -> crate::operation::describe_hub::DescribeHubOutput {
        crate::operation::describe_hub::DescribeHubOutput {
            hub_name: self.hub_name,
            hub_arn: self.hub_arn,
            hub_display_name: self.hub_display_name,
            hub_description: self.hub_description,
            hub_search_keywords: self.hub_search_keywords,
            s3_storage_config: self.s3_storage_config,
            hub_status: self.hub_status,
            failure_reason: self.failure_reason,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            _request_id: self._request_id,
        }
    }
}
