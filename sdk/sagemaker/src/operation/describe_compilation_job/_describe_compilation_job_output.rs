// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCompilationJobOutput {
    /// <p>The name of the model compilation job.</p>
    #[doc(hidden)]
    pub compilation_job_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
    #[doc(hidden)]
    pub compilation_job_arn: std::option::Option<std::string::String>,
    /// <p>The status of the model compilation job.</p>
    #[doc(hidden)]
    pub compilation_job_status: std::option::Option<crate::types::CompilationJobStatus>,
    /// <p>The time when the model compilation job started the <code>CompilationJob</code> instances. </p>
    /// <p>You are billed for the time between this timestamp and the timestamp in the <code>DescribeCompilationJobResponse$CompilationEndTime</code> field. In Amazon CloudWatch Logs, the start time might be later than this time. That's because it takes time to download the compilation job, which depends on the size of the compilation job container. </p>
    #[doc(hidden)]
    pub compilation_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the model compilation job on a compilation job instance ended. For a successful or stopped job, this is when the job's model artifacts have finished uploading. For a failed job, this is when Amazon SageMaker detected that the job failed. </p>
    #[doc(hidden)]
    pub compilation_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.</p>
    #[doc(hidden)]
    pub stopping_condition: std::option::Option<crate::types::StoppingCondition>,
    /// <p>The inference image to use when compiling a model. Specify an image only if the target device is a cloud instance.</p>
    #[doc(hidden)]
    pub inference_image: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the versioned model package that was provided to SageMaker Neo when you initiated a compilation job.</p>
    #[doc(hidden)]
    pub model_package_version_arn: std::option::Option<std::string::String>,
    /// <p>The time that the model compilation job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time that the status of the model compilation job was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>If a model compilation job failed, the reason it failed. </p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>Information about the location in Amazon S3 that has been configured for storing the model artifacts used in the compilation job.</p>
    #[doc(hidden)]
    pub model_artifacts: std::option::Option<crate::types::ModelArtifacts>,
    /// <p>Provides a BLAKE2 hash value that identifies the compiled model artifacts in Amazon S3.</p>
    #[doc(hidden)]
    pub model_digests: std::option::Option<crate::types::ModelDigests>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes to perform the model compilation job.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>Information about the location in Amazon S3 of the input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.</p>
    #[doc(hidden)]
    pub input_config: std::option::Option<crate::types::InputConfig>,
    /// <p>Information about the output location for the compiled model and the target device that the model runs on.</p>
    #[doc(hidden)]
    pub output_config: std::option::Option<crate::types::OutputConfig>,
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    #[doc(hidden)]
    pub vpc_config: std::option::Option<crate::types::NeoVpcConfig>,
    _request_id: Option<String>,
}
impl DescribeCompilationJobOutput {
    /// <p>The name of the model compilation job.</p>
    pub fn compilation_job_name(&self) -> std::option::Option<&str> {
        self.compilation_job_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
    pub fn compilation_job_arn(&self) -> std::option::Option<&str> {
        self.compilation_job_arn.as_deref()
    }
    /// <p>The status of the model compilation job.</p>
    pub fn compilation_job_status(
        &self,
    ) -> std::option::Option<&crate::types::CompilationJobStatus> {
        self.compilation_job_status.as_ref()
    }
    /// <p>The time when the model compilation job started the <code>CompilationJob</code> instances. </p>
    /// <p>You are billed for the time between this timestamp and the timestamp in the <code>DescribeCompilationJobResponse$CompilationEndTime</code> field. In Amazon CloudWatch Logs, the start time might be later than this time. That's because it takes time to download the compilation job, which depends on the size of the compilation job container. </p>
    pub fn compilation_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.compilation_start_time.as_ref()
    }
    /// <p>The time when the model compilation job on a compilation job instance ended. For a successful or stopped job, this is when the job's model artifacts have finished uploading. For a failed job, this is when Amazon SageMaker detected that the job failed. </p>
    pub fn compilation_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.compilation_end_time.as_ref()
    }
    /// <p>Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.</p>
    pub fn stopping_condition(&self) -> std::option::Option<&crate::types::StoppingCondition> {
        self.stopping_condition.as_ref()
    }
    /// <p>The inference image to use when compiling a model. Specify an image only if the target device is a cloud instance.</p>
    pub fn inference_image(&self) -> std::option::Option<&str> {
        self.inference_image.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the versioned model package that was provided to SageMaker Neo when you initiated a compilation job.</p>
    pub fn model_package_version_arn(&self) -> std::option::Option<&str> {
        self.model_package_version_arn.as_deref()
    }
    /// <p>The time that the model compilation job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time that the status of the model compilation job was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>If a model compilation job failed, the reason it failed. </p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>Information about the location in Amazon S3 that has been configured for storing the model artifacts used in the compilation job.</p>
    pub fn model_artifacts(&self) -> std::option::Option<&crate::types::ModelArtifacts> {
        self.model_artifacts.as_ref()
    }
    /// <p>Provides a BLAKE2 hash value that identifies the compiled model artifacts in Amazon S3.</p>
    pub fn model_digests(&self) -> std::option::Option<&crate::types::ModelDigests> {
        self.model_digests.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes to perform the model compilation job.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Information about the location in Amazon S3 of the input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.</p>
    pub fn input_config(&self) -> std::option::Option<&crate::types::InputConfig> {
        self.input_config.as_ref()
    }
    /// <p>Information about the output location for the compiled model and the target device that the model runs on.</p>
    pub fn output_config(&self) -> std::option::Option<&crate::types::OutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    pub fn vpc_config(&self) -> std::option::Option<&crate::types::NeoVpcConfig> {
        self.vpc_config.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeCompilationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeCompilationJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCompilationJobOutput`](crate::operation::describe_compilation_job::DescribeCompilationJobOutput).
    pub fn builder(
    ) -> crate::operation::describe_compilation_job::builders::DescribeCompilationJobOutputBuilder
    {
        crate::operation::describe_compilation_job::builders::DescribeCompilationJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeCompilationJobOutput`](crate::operation::describe_compilation_job::DescribeCompilationJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeCompilationJobOutputBuilder {
    pub(crate) compilation_job_name: std::option::Option<std::string::String>,
    pub(crate) compilation_job_arn: std::option::Option<std::string::String>,
    pub(crate) compilation_job_status: std::option::Option<crate::types::CompilationJobStatus>,
    pub(crate) compilation_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) compilation_end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) stopping_condition: std::option::Option<crate::types::StoppingCondition>,
    pub(crate) inference_image: std::option::Option<std::string::String>,
    pub(crate) model_package_version_arn: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) model_artifacts: std::option::Option<crate::types::ModelArtifacts>,
    pub(crate) model_digests: std::option::Option<crate::types::ModelDigests>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) input_config: std::option::Option<crate::types::InputConfig>,
    pub(crate) output_config: std::option::Option<crate::types::OutputConfig>,
    pub(crate) vpc_config: std::option::Option<crate::types::NeoVpcConfig>,
    _request_id: Option<String>,
}
impl DescribeCompilationJobOutputBuilder {
    /// <p>The name of the model compilation job.</p>
    pub fn compilation_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.compilation_job_name = Some(input.into());
        self
    }
    /// <p>The name of the model compilation job.</p>
    pub fn set_compilation_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.compilation_job_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
    pub fn compilation_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.compilation_job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
    pub fn set_compilation_job_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.compilation_job_arn = input;
        self
    }
    /// <p>The status of the model compilation job.</p>
    pub fn compilation_job_status(mut self, input: crate::types::CompilationJobStatus) -> Self {
        self.compilation_job_status = Some(input);
        self
    }
    /// <p>The status of the model compilation job.</p>
    pub fn set_compilation_job_status(
        mut self,
        input: std::option::Option<crate::types::CompilationJobStatus>,
    ) -> Self {
        self.compilation_job_status = input;
        self
    }
    /// <p>The time when the model compilation job started the <code>CompilationJob</code> instances. </p>
    /// <p>You are billed for the time between this timestamp and the timestamp in the <code>DescribeCompilationJobResponse$CompilationEndTime</code> field. In Amazon CloudWatch Logs, the start time might be later than this time. That's because it takes time to download the compilation job, which depends on the size of the compilation job container. </p>
    pub fn compilation_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.compilation_start_time = Some(input);
        self
    }
    /// <p>The time when the model compilation job started the <code>CompilationJob</code> instances. </p>
    /// <p>You are billed for the time between this timestamp and the timestamp in the <code>DescribeCompilationJobResponse$CompilationEndTime</code> field. In Amazon CloudWatch Logs, the start time might be later than this time. That's because it takes time to download the compilation job, which depends on the size of the compilation job container. </p>
    pub fn set_compilation_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.compilation_start_time = input;
        self
    }
    /// <p>The time when the model compilation job on a compilation job instance ended. For a successful or stopped job, this is when the job's model artifacts have finished uploading. For a failed job, this is when Amazon SageMaker detected that the job failed. </p>
    pub fn compilation_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.compilation_end_time = Some(input);
        self
    }
    /// <p>The time when the model compilation job on a compilation job instance ended. For a successful or stopped job, this is when the job's model artifacts have finished uploading. For a failed job, this is when Amazon SageMaker detected that the job failed. </p>
    pub fn set_compilation_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.compilation_end_time = input;
        self
    }
    /// <p>Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.</p>
    pub fn stopping_condition(mut self, input: crate::types::StoppingCondition) -> Self {
        self.stopping_condition = Some(input);
        self
    }
    /// <p>Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::types::StoppingCondition>,
    ) -> Self {
        self.stopping_condition = input;
        self
    }
    /// <p>The inference image to use when compiling a model. Specify an image only if the target device is a cloud instance.</p>
    pub fn inference_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.inference_image = Some(input.into());
        self
    }
    /// <p>The inference image to use when compiling a model. Specify an image only if the target device is a cloud instance.</p>
    pub fn set_inference_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inference_image = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the versioned model package that was provided to SageMaker Neo when you initiated a compilation job.</p>
    pub fn model_package_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_package_version_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the versioned model package that was provided to SageMaker Neo when you initiated a compilation job.</p>
    pub fn set_model_package_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_package_version_arn = input;
        self
    }
    /// <p>The time that the model compilation job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time that the model compilation job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the status of the model compilation job was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The time that the status of the model compilation job was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>If a model compilation job failed, the reason it failed. </p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>If a model compilation job failed, the reason it failed. </p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>Information about the location in Amazon S3 that has been configured for storing the model artifacts used in the compilation job.</p>
    pub fn model_artifacts(mut self, input: crate::types::ModelArtifacts) -> Self {
        self.model_artifacts = Some(input);
        self
    }
    /// <p>Information about the location in Amazon S3 that has been configured for storing the model artifacts used in the compilation job.</p>
    pub fn set_model_artifacts(
        mut self,
        input: std::option::Option<crate::types::ModelArtifacts>,
    ) -> Self {
        self.model_artifacts = input;
        self
    }
    /// <p>Provides a BLAKE2 hash value that identifies the compiled model artifacts in Amazon S3.</p>
    pub fn model_digests(mut self, input: crate::types::ModelDigests) -> Self {
        self.model_digests = Some(input);
        self
    }
    /// <p>Provides a BLAKE2 hash value that identifies the compiled model artifacts in Amazon S3.</p>
    pub fn set_model_digests(
        mut self,
        input: std::option::Option<crate::types::ModelDigests>,
    ) -> Self {
        self.model_digests = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes to perform the model compilation job.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes to perform the model compilation job.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>Information about the location in Amazon S3 of the input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.</p>
    pub fn input_config(mut self, input: crate::types::InputConfig) -> Self {
        self.input_config = Some(input);
        self
    }
    /// <p>Information about the location in Amazon S3 of the input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.</p>
    pub fn set_input_config(
        mut self,
        input: std::option::Option<crate::types::InputConfig>,
    ) -> Self {
        self.input_config = input;
        self
    }
    /// <p>Information about the output location for the compiled model and the target device that the model runs on.</p>
    pub fn output_config(mut self, input: crate::types::OutputConfig) -> Self {
        self.output_config = Some(input);
        self
    }
    /// <p>Information about the output location for the compiled model and the target device that the model runs on.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::types::OutputConfig>,
    ) -> Self {
        self.output_config = input;
        self
    }
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    pub fn vpc_config(mut self, input: crate::types::NeoVpcConfig) -> Self {
        self.vpc_config = Some(input);
        self
    }
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    pub fn set_vpc_config(
        mut self,
        input: std::option::Option<crate::types::NeoVpcConfig>,
    ) -> Self {
        self.vpc_config = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeCompilationJobOutput`](crate::operation::describe_compilation_job::DescribeCompilationJobOutput).
    pub fn build(self) -> crate::operation::describe_compilation_job::DescribeCompilationJobOutput {
        crate::operation::describe_compilation_job::DescribeCompilationJobOutput {
            compilation_job_name: self.compilation_job_name,
            compilation_job_arn: self.compilation_job_arn,
            compilation_job_status: self.compilation_job_status,
            compilation_start_time: self.compilation_start_time,
            compilation_end_time: self.compilation_end_time,
            stopping_condition: self.stopping_condition,
            inference_image: self.inference_image,
            model_package_version_arn: self.model_package_version_arn,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            failure_reason: self.failure_reason,
            model_artifacts: self.model_artifacts,
            model_digests: self.model_digests,
            role_arn: self.role_arn,
            input_config: self.input_config,
            output_config: self.output_config,
            vpc_config: self.vpc_config,
            _request_id: self._request_id,
        }
    }
}
