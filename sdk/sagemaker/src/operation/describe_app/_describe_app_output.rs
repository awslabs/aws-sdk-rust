// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAppOutput {
    /// <p>The Amazon Resource Name (ARN) of the app.</p>
    #[doc(hidden)]
    pub app_arn: std::option::Option<std::string::String>,
    /// <p>The type of app.</p>
    #[doc(hidden)]
    pub app_type: std::option::Option<crate::types::AppType>,
    /// <p>The name of the app.</p>
    #[doc(hidden)]
    pub app_name: std::option::Option<std::string::String>,
    /// <p>The domain ID.</p>
    #[doc(hidden)]
    pub domain_id: std::option::Option<std::string::String>,
    /// <p>The user profile name.</p>
    #[doc(hidden)]
    pub user_profile_name: std::option::Option<std::string::String>,
    /// <p>The status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AppStatus>,
    /// <p>The timestamp of the last health check.</p>
    #[doc(hidden)]
    pub last_health_check_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
    #[doc(hidden)]
    pub last_user_activity_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The creation time.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The failure reason.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>
    #[doc(hidden)]
    pub resource_spec: std::option::Option<crate::types::ResourceSpec>,
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    #[doc(hidden)]
    pub space_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAppOutput {
    /// <p>The Amazon Resource Name (ARN) of the app.</p>
    pub fn app_arn(&self) -> std::option::Option<&str> {
        self.app_arn.as_deref()
    }
    /// <p>The type of app.</p>
    pub fn app_type(&self) -> std::option::Option<&crate::types::AppType> {
        self.app_type.as_ref()
    }
    /// <p>The name of the app.</p>
    pub fn app_name(&self) -> std::option::Option<&str> {
        self.app_name.as_deref()
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(&self) -> std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(&self) -> std::option::Option<&str> {
        self.user_profile_name.as_deref()
    }
    /// <p>The status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::AppStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp of the last health check.</p>
    pub fn last_health_check_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_health_check_timestamp.as_ref()
    }
    /// <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
    pub fn last_user_activity_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_user_activity_timestamp.as_ref()
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The failure reason.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>
    pub fn resource_spec(&self) -> std::option::Option<&crate::types::ResourceSpec> {
        self.resource_spec.as_ref()
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn space_name(&self) -> std::option::Option<&str> {
        self.space_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAppOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAppOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAppOutput`](crate::operation::describe_app::DescribeAppOutput).
    pub fn builder() -> crate::operation::describe_app::builders::DescribeAppOutputBuilder {
        crate::operation::describe_app::builders::DescribeAppOutputBuilder::default()
    }
}

/// A builder for [`DescribeAppOutput`](crate::operation::describe_app::DescribeAppOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAppOutputBuilder {
    pub(crate) app_arn: std::option::Option<std::string::String>,
    pub(crate) app_type: std::option::Option<crate::types::AppType>,
    pub(crate) app_name: std::option::Option<std::string::String>,
    pub(crate) domain_id: std::option::Option<std::string::String>,
    pub(crate) user_profile_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::AppStatus>,
    pub(crate) last_health_check_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_user_activity_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) resource_spec: std::option::Option<crate::types::ResourceSpec>,
    pub(crate) space_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAppOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the app.</p>
    pub fn app_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the app.</p>
    pub fn set_app_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_arn = input;
        self
    }
    /// <p>The type of app.</p>
    pub fn app_type(mut self, input: crate::types::AppType) -> Self {
        self.app_type = Some(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn set_app_type(mut self, input: std::option::Option<crate::types::AppType>) -> Self {
        self.app_type = input;
        self
    }
    /// <p>The name of the app.</p>
    pub fn app_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_name = Some(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_app_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_name = input;
        self
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_id = Some(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_profile_name = Some(input.into());
        self
    }
    /// <p>The user profile name.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_profile_name = input;
        self
    }
    /// <p>The status.</p>
    pub fn status(mut self, input: crate::types::AppStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::AppStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The timestamp of the last health check.</p>
    pub fn last_health_check_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_health_check_timestamp = Some(input);
        self
    }
    /// <p>The timestamp of the last health check.</p>
    pub fn set_last_health_check_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_health_check_timestamp = input;
        self
    }
    /// <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
    pub fn last_user_activity_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_user_activity_timestamp = Some(input);
        self
    }
    /// <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
    pub fn set_last_user_activity_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_user_activity_timestamp = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The failure reason.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The failure reason.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>
    pub fn resource_spec(mut self, input: crate::types::ResourceSpec) -> Self {
        self.resource_spec = Some(input);
        self
    }
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>
    pub fn set_resource_spec(
        mut self,
        input: std::option::Option<crate::types::ResourceSpec>,
    ) -> Self {
        self.resource_spec = input;
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.space_name = Some(input.into());
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAppOutput`](crate::operation::describe_app::DescribeAppOutput).
    pub fn build(self) -> crate::operation::describe_app::DescribeAppOutput {
        crate::operation::describe_app::DescribeAppOutput {
            app_arn: self.app_arn,
            app_type: self.app_type,
            app_name: self.app_name,
            domain_id: self.domain_id,
            user_profile_name: self.user_profile_name,
            status: self.status,
            last_health_check_timestamp: self.last_health_check_timestamp,
            last_user_activity_timestamp: self.last_user_activity_timestamp,
            creation_time: self.creation_time,
            failure_reason: self.failure_reason,
            resource_spec: self.resource_spec,
            space_name: self.space_name,
            _request_id: self._request_id,
        }
    }
}
