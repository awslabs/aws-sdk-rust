// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopTrainingJobInput {
    /// <p>The name of the training job to stop.</p>
    #[doc(hidden)]
    pub training_job_name: std::option::Option<std::string::String>,
}
impl StopTrainingJobInput {
    /// <p>The name of the training job to stop.</p>
    pub fn training_job_name(&self) -> std::option::Option<&str> {
        self.training_job_name.as_deref()
    }
}
impl StopTrainingJobInput {
    /// Creates a new builder-style object to manufacture [`StopTrainingJobInput`](crate::operation::stop_training_job::StopTrainingJobInput).
    pub fn builder() -> crate::operation::stop_training_job::builders::StopTrainingJobInputBuilder {
        crate::operation::stop_training_job::builders::StopTrainingJobInputBuilder::default()
    }
}

/// A builder for [`StopTrainingJobInput`](crate::operation::stop_training_job::StopTrainingJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StopTrainingJobInputBuilder {
    pub(crate) training_job_name: std::option::Option<std::string::String>,
}
impl StopTrainingJobInputBuilder {
    /// <p>The name of the training job to stop.</p>
    pub fn training_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.training_job_name = Some(input.into());
        self
    }
    /// <p>The name of the training job to stop.</p>
    pub fn set_training_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.training_job_name = input;
        self
    }
    /// Consumes the builder and constructs a [`StopTrainingJobInput`](crate::operation::stop_training_job::StopTrainingJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::stop_training_job::StopTrainingJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::stop_training_job::StopTrainingJobInput {
            training_job_name: self.training_job_name,
        })
    }
}
