// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeviceFleetReportOutput {
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    #[doc(hidden)]
    pub device_fleet_arn: std::option::Option<std::string::String>,
    /// <p>The name of the fleet.</p>
    #[doc(hidden)]
    pub device_fleet_name: std::option::Option<std::string::String>,
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    #[doc(hidden)]
    pub output_config: std::option::Option<crate::types::EdgeOutputConfig>,
    /// <p>Description of the fleet.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Timestamp of when the report was generated.</p>
    #[doc(hidden)]
    pub report_generated: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Status of devices.</p>
    #[doc(hidden)]
    pub device_stats: std::option::Option<crate::types::DeviceStats>,
    /// <p>The versions of Edge Manager agent deployed on the fleet.</p>
    #[doc(hidden)]
    pub agent_versions: std::option::Option<std::vec::Vec<crate::types::AgentVersion>>,
    /// <p>Status of model on device.</p>
    #[doc(hidden)]
    pub model_stats: std::option::Option<std::vec::Vec<crate::types::EdgeModelStat>>,
    _request_id: Option<String>,
}
impl GetDeviceFleetReportOutput {
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn device_fleet_arn(&self) -> std::option::Option<&str> {
        self.device_fleet_arn.as_deref()
    }
    /// <p>The name of the fleet.</p>
    pub fn device_fleet_name(&self) -> std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    pub fn output_config(&self) -> std::option::Option<&crate::types::EdgeOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>Description of the fleet.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Timestamp of when the report was generated.</p>
    pub fn report_generated(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.report_generated.as_ref()
    }
    /// <p>Status of devices.</p>
    pub fn device_stats(&self) -> std::option::Option<&crate::types::DeviceStats> {
        self.device_stats.as_ref()
    }
    /// <p>The versions of Edge Manager agent deployed on the fleet.</p>
    pub fn agent_versions(&self) -> std::option::Option<&[crate::types::AgentVersion]> {
        self.agent_versions.as_deref()
    }
    /// <p>Status of model on device.</p>
    pub fn model_stats(&self) -> std::option::Option<&[crate::types::EdgeModelStat]> {
        self.model_stats.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDeviceFleetReportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeviceFleetReportOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceFleetReportOutput`](crate::operation::get_device_fleet_report::GetDeviceFleetReportOutput).
    pub fn builder(
    ) -> crate::operation::get_device_fleet_report::builders::GetDeviceFleetReportOutputBuilder
    {
        crate::operation::get_device_fleet_report::builders::GetDeviceFleetReportOutputBuilder::default()
    }
}

/// A builder for [`GetDeviceFleetReportOutput`](crate::operation::get_device_fleet_report::GetDeviceFleetReportOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDeviceFleetReportOutputBuilder {
    pub(crate) device_fleet_arn: std::option::Option<std::string::String>,
    pub(crate) device_fleet_name: std::option::Option<std::string::String>,
    pub(crate) output_config: std::option::Option<crate::types::EdgeOutputConfig>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) report_generated: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) device_stats: std::option::Option<crate::types::DeviceStats>,
    pub(crate) agent_versions: std::option::Option<std::vec::Vec<crate::types::AgentVersion>>,
    pub(crate) model_stats: std::option::Option<std::vec::Vec<crate::types::EdgeModelStat>>,
    _request_id: Option<String>,
}
impl GetDeviceFleetReportOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn device_fleet_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_fleet_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn set_device_fleet_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_fleet_arn = input;
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_fleet_name = Some(input.into());
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    pub fn output_config(mut self, input: crate::types::EdgeOutputConfig) -> Self {
        self.output_config = Some(input);
        self
    }
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::types::EdgeOutputConfig>,
    ) -> Self {
        self.output_config = input;
        self
    }
    /// <p>Description of the fleet.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Description of the fleet.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Timestamp of when the report was generated.</p>
    pub fn report_generated(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.report_generated = Some(input);
        self
    }
    /// <p>Timestamp of when the report was generated.</p>
    pub fn set_report_generated(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.report_generated = input;
        self
    }
    /// <p>Status of devices.</p>
    pub fn device_stats(mut self, input: crate::types::DeviceStats) -> Self {
        self.device_stats = Some(input);
        self
    }
    /// <p>Status of devices.</p>
    pub fn set_device_stats(
        mut self,
        input: std::option::Option<crate::types::DeviceStats>,
    ) -> Self {
        self.device_stats = input;
        self
    }
    /// Appends an item to `agent_versions`.
    ///
    /// To override the contents of this collection use [`set_agent_versions`](Self::set_agent_versions).
    ///
    /// <p>The versions of Edge Manager agent deployed on the fleet.</p>
    pub fn agent_versions(mut self, input: crate::types::AgentVersion) -> Self {
        let mut v = self.agent_versions.unwrap_or_default();
        v.push(input);
        self.agent_versions = Some(v);
        self
    }
    /// <p>The versions of Edge Manager agent deployed on the fleet.</p>
    pub fn set_agent_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AgentVersion>>,
    ) -> Self {
        self.agent_versions = input;
        self
    }
    /// Appends an item to `model_stats`.
    ///
    /// To override the contents of this collection use [`set_model_stats`](Self::set_model_stats).
    ///
    /// <p>Status of model on device.</p>
    pub fn model_stats(mut self, input: crate::types::EdgeModelStat) -> Self {
        let mut v = self.model_stats.unwrap_or_default();
        v.push(input);
        self.model_stats = Some(v);
        self
    }
    /// <p>Status of model on device.</p>
    pub fn set_model_stats(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EdgeModelStat>>,
    ) -> Self {
        self.model_stats = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDeviceFleetReportOutput`](crate::operation::get_device_fleet_report::GetDeviceFleetReportOutput).
    pub fn build(self) -> crate::operation::get_device_fleet_report::GetDeviceFleetReportOutput {
        crate::operation::get_device_fleet_report::GetDeviceFleetReportOutput {
            device_fleet_arn: self.device_fleet_arn,
            device_fleet_name: self.device_fleet_name,
            output_config: self.output_config,
            description: self.description,
            report_generated: self.report_generated,
            device_stats: self.device_stats,
            agent_versions: self.agent_versions,
            model_stats: self.model_stats,
            _request_id: self._request_id,
        }
    }
}
