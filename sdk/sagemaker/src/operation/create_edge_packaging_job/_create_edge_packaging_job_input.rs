// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEdgePackagingJobInput {
    /// <p>The name of the edge packaging job.</p>
    pub edge_packaging_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>
    pub compilation_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the model.</p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the model.</p>
    pub model_version: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Provides information about the output location for the packaged model.</p>
    pub output_config: ::std::option::Option<crate::types::EdgeOutputConfig>,
    /// <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>
    pub resource_key: ::std::option::Option<::std::string::String>,
    /// <p>Creates tags for the packaging job.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateEdgePackagingJobInput {
    /// <p>The name of the edge packaging job.</p>
    pub fn edge_packaging_job_name(&self) -> ::std::option::Option<&str> {
        self.edge_packaging_job_name.as_deref()
    }
    /// <p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>
    pub fn compilation_job_name(&self) -> ::std::option::Option<&str> {
        self.compilation_job_name.as_deref()
    }
    /// <p>The name of the model.</p>
    pub fn model_name(&self) -> ::std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>The version of the model.</p>
    pub fn model_version(&self) -> ::std::option::Option<&str> {
        self.model_version.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Provides information about the output location for the packaged model.</p>
    pub fn output_config(&self) -> ::std::option::Option<&crate::types::EdgeOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>
    pub fn resource_key(&self) -> ::std::option::Option<&str> {
        self.resource_key.as_deref()
    }
    /// <p>Creates tags for the packaging job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateEdgePackagingJobInput {
    /// Creates a new builder-style object to manufacture [`CreateEdgePackagingJobInput`](crate::operation::create_edge_packaging_job::CreateEdgePackagingJobInput).
    pub fn builder() -> crate::operation::create_edge_packaging_job::builders::CreateEdgePackagingJobInputBuilder {
        crate::operation::create_edge_packaging_job::builders::CreateEdgePackagingJobInputBuilder::default()
    }
}

/// A builder for [`CreateEdgePackagingJobInput`](crate::operation::create_edge_packaging_job::CreateEdgePackagingJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateEdgePackagingJobInputBuilder {
    pub(crate) edge_packaging_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) compilation_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_version: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) output_config: ::std::option::Option<crate::types::EdgeOutputConfig>,
    pub(crate) resource_key: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateEdgePackagingJobInputBuilder {
    /// <p>The name of the edge packaging job.</p>
    /// This field is required.
    pub fn edge_packaging_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.edge_packaging_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the edge packaging job.</p>
    pub fn set_edge_packaging_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.edge_packaging_job_name = input;
        self
    }
    /// <p>The name of the edge packaging job.</p>
    pub fn get_edge_packaging_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.edge_packaging_job_name
    }
    /// <p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>
    /// This field is required.
    pub fn compilation_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compilation_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>
    pub fn set_compilation_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compilation_job_name = input;
        self
    }
    /// <p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>
    pub fn get_compilation_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.compilation_job_name
    }
    /// <p>The name of the model.</p>
    /// This field is required.
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the model.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>The name of the model.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>The version of the model.</p>
    /// This field is required.
    pub fn model_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the model.</p>
    pub fn set_model_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_version = input;
        self
    }
    /// <p>The version of the model.</p>
    pub fn get_model_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_version
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Provides information about the output location for the packaged model.</p>
    /// This field is required.
    pub fn output_config(mut self, input: crate::types::EdgeOutputConfig) -> Self {
        self.output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information about the output location for the packaged model.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::EdgeOutputConfig>) -> Self {
        self.output_config = input;
        self
    }
    /// <p>Provides information about the output location for the packaged model.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::EdgeOutputConfig> {
        &self.output_config
    }
    /// <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>
    pub fn resource_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>
    pub fn set_resource_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_key = input;
        self
    }
    /// <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>
    pub fn get_resource_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_key
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Creates tags for the packaging job.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Creates tags for the packaging job.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Creates tags for the packaging job.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateEdgePackagingJobInput`](crate::operation::create_edge_packaging_job::CreateEdgePackagingJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_edge_packaging_job::CreateEdgePackagingJobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_edge_packaging_job::CreateEdgePackagingJobInput {
            edge_packaging_job_name: self.edge_packaging_job_name,
            compilation_job_name: self.compilation_job_name,
            model_name: self.model_name,
            model_version: self.model_version,
            role_arn: self.role_arn,
            output_config: self.output_config,
            resource_key: self.resource_key,
            tags: self.tags,
        })
    }
}
