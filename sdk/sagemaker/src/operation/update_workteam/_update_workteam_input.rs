// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkteamInput {
    /// <p>The name of the work team to update.</p>
    #[doc(hidden)]
    pub workteam_name: std::option::Option<std::string::String>,
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>. Be aware that user groups that are already in the work team must also be listed in <code>Groups</code> when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update. </p>
    #[doc(hidden)]
    pub member_definitions: std::option::Option<std::vec::Vec<crate::types::MemberDefinition>>,
    /// <p>An updated description for the work team.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Configures SNS topic notifications for available or expiring work items</p>
    #[doc(hidden)]
    pub notification_configuration: std::option::Option<crate::types::NotificationConfiguration>,
}
impl UpdateWorkteamInput {
    /// <p>The name of the work team to update.</p>
    pub fn workteam_name(&self) -> std::option::Option<&str> {
        self.workteam_name.as_deref()
    }
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>. Be aware that user groups that are already in the work team must also be listed in <code>Groups</code> when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update. </p>
    pub fn member_definitions(&self) -> std::option::Option<&[crate::types::MemberDefinition]> {
        self.member_definitions.as_deref()
    }
    /// <p>An updated description for the work team.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Configures SNS topic notifications for available or expiring work items</p>
    pub fn notification_configuration(
        &self,
    ) -> std::option::Option<&crate::types::NotificationConfiguration> {
        self.notification_configuration.as_ref()
    }
}
impl UpdateWorkteamInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkteamInput`](crate::operation::update_workteam::UpdateWorkteamInput).
    pub fn builder() -> crate::operation::update_workteam::builders::UpdateWorkteamInputBuilder {
        crate::operation::update_workteam::builders::UpdateWorkteamInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkteamInput`](crate::operation::update_workteam::UpdateWorkteamInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkteamInputBuilder {
    pub(crate) workteam_name: std::option::Option<std::string::String>,
    pub(crate) member_definitions:
        std::option::Option<std::vec::Vec<crate::types::MemberDefinition>>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) notification_configuration:
        std::option::Option<crate::types::NotificationConfiguration>,
}
impl UpdateWorkteamInputBuilder {
    /// <p>The name of the work team to update.</p>
    pub fn workteam_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.workteam_name = Some(input.into());
        self
    }
    /// <p>The name of the work team to update.</p>
    pub fn set_workteam_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workteam_name = input;
        self
    }
    /// Appends an item to `member_definitions`.
    ///
    /// To override the contents of this collection use [`set_member_definitions`](Self::set_member_definitions).
    ///
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>. Be aware that user groups that are already in the work team must also be listed in <code>Groups</code> when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update. </p>
    pub fn member_definitions(mut self, input: crate::types::MemberDefinition) -> Self {
        let mut v = self.member_definitions.unwrap_or_default();
        v.push(input);
        self.member_definitions = Some(v);
        self
    }
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>. Be aware that user groups that are already in the work team must also be listed in <code>Groups</code> when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update. </p>
    pub fn set_member_definitions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MemberDefinition>>,
    ) -> Self {
        self.member_definitions = input;
        self
    }
    /// <p>An updated description for the work team.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>An updated description for the work team.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Configures SNS topic notifications for available or expiring work items</p>
    pub fn notification_configuration(
        mut self,
        input: crate::types::NotificationConfiguration,
    ) -> Self {
        self.notification_configuration = Some(input);
        self
    }
    /// <p>Configures SNS topic notifications for available or expiring work items</p>
    pub fn set_notification_configuration(
        mut self,
        input: std::option::Option<crate::types::NotificationConfiguration>,
    ) -> Self {
        self.notification_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateWorkteamInput`](crate::operation::update_workteam::UpdateWorkteamInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_workteam::UpdateWorkteamInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_workteam::UpdateWorkteamInput {
            workteam_name: self.workteam_name,
            member_definitions: self.member_definitions,
            description: self.description,
            notification_configuration: self.notification_configuration,
        })
    }
}
