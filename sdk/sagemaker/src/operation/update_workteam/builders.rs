// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_workteam::_update_workteam_output::UpdateWorkteamOutputBuilder;

pub use crate::operation::update_workteam::_update_workteam_input::UpdateWorkteamInputBuilder;

/// Fluent builder constructing a request to `UpdateWorkteam`.
///
/// <p>Updates an existing work team with new member definitions or description.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkteamFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_workteam::builders::UpdateWorkteamInputBuilder,
}
impl UpdateWorkteamFluentBuilder {
    /// Creates a new `UpdateWorkteam`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_workteam::UpdateWorkteam,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_workteam::UpdateWorkteamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_workteam::UpdateWorkteamOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_workteam::UpdateWorkteamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the work team to update.</p>
    pub fn workteam_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workteam_name(input.into());
        self
    }
    /// <p>The name of the work team to update.</p>
    pub fn set_workteam_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workteam_name(input);
        self
    }
    /// Appends an item to `MemberDefinitions`.
    ///
    /// To override the contents of this collection use [`set_member_definitions`](Self::set_member_definitions).
    ///
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>. Be aware that user groups that are already in the work team must also be listed in <code>Groups</code> when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update. </p>
    pub fn member_definitions(mut self, input: crate::types::MemberDefinition) -> Self {
        self.inner = self.inner.member_definitions(input);
        self
    }
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>. Be aware that user groups that are already in the work team must also be listed in <code>Groups</code> when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update. </p>
    pub fn set_member_definitions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MemberDefinition>>,
    ) -> Self {
        self.inner = self.inner.set_member_definitions(input);
        self
    }
    /// <p>An updated description for the work team.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An updated description for the work team.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Configures SNS topic notifications for available or expiring work items</p>
    pub fn notification_configuration(
        mut self,
        input: crate::types::NotificationConfiguration,
    ) -> Self {
        self.inner = self.inner.notification_configuration(input);
        self
    }
    /// <p>Configures SNS topic notifications for available or expiring work items</p>
    pub fn set_notification_configuration(
        mut self,
        input: std::option::Option<crate::types::NotificationConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_notification_configuration(input);
        self
    }
}
