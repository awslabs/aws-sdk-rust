// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateModelPackageInput {
    /// <p>The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    /// <p>This parameter is required for unversioned models. It is not applicable to versioned models.</p>
    #[doc(hidden)]
    pub model_package_name: std::option::Option<std::string::String>,
    /// <p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p>
    /// <p>This parameter is required for versioned models, and does not apply to unversioned models.</p>
    #[doc(hidden)]
    pub model_package_group_name: std::option::Option<std::string::String>,
    /// <p>A description of the model package.</p>
    #[doc(hidden)]
    pub model_package_description: std::option::Option<std::string::String>,
    /// <p>Specifies details about inference jobs that can be run with models based on this model package, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li>
    /// <li> <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p> </li>
    /// <li> <p>The input and output content formats that the model package supports for inference.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub inference_specification: std::option::Option<crate::types::InferenceSpecification>,
    /// <p>Specifies configurations for one or more transform jobs that SageMaker runs to test the model package.</p>
    #[doc(hidden)]
    pub validation_specification:
        std::option::Option<crate::types::ModelPackageValidationSpecification>,
    /// <p>Details about the algorithm that was used to create the model package.</p>
    #[doc(hidden)]
    pub source_algorithm_specification:
        std::option::Option<crate::types::SourceAlgorithmSpecification>,
    /// <p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p>
    /// <p>This parameter is optional for unversioned models, and does not apply to versioned models.</p>
    #[doc(hidden)]
    pub certify_for_marketplace: bool,
    /// <p>A list of key value pairs associated with the model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Whether the model is approved for deployment.</p>
    /// <p>This parameter is optional for versioned models, and does not apply to unversioned models.</p>
    /// <p>For versioned models, the value of this parameter must be set to <code>Approved</code> to deploy the model.</p>
    #[doc(hidden)]
    pub model_approval_status: std::option::Option<crate::types::ModelApprovalStatus>,
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    #[doc(hidden)]
    pub metadata_properties: std::option::Option<crate::types::MetadataProperties>,
    /// <p>A structure that contains model metrics reports.</p>
    #[doc(hidden)]
    pub model_metrics: std::option::Option<crate::types::ModelMetrics>,
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The metadata properties associated with the model package versions.</p>
    #[doc(hidden)]
    pub customer_metadata_properties:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>. </p>
    #[doc(hidden)]
    pub drift_check_baselines: std::option::Option<crate::types::DriftCheckBaselines>,
    /// <p>The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification. The following tasks are supported by Inference Recommender: <code>"IMAGE_CLASSIFICATION"</code> | <code>"OBJECT_DETECTION"</code> | <code>"TEXT_GENERATION"</code> |<code>"IMAGE_SEGMENTATION"</code> | <code>"FILL_MASK"</code> | <code>"CLASSIFICATION"</code> | <code>"REGRESSION"</code> | <code>"OTHER"</code>.</p>
    /// <p>Specify "OTHER" if none of the tasks listed fit your use case.</p>
    #[doc(hidden)]
    pub task: std::option::Option<std::string::String>,
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    #[doc(hidden)]
    pub sample_payload_url: std::option::Option<std::string::String>,
    /// <p>An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts. </p>
    #[doc(hidden)]
    pub additional_inference_specifications: std::option::Option<
        std::vec::Vec<crate::types::AdditionalInferenceSpecificationDefinition>,
    >,
}
impl CreateModelPackageInput {
    /// <p>The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    /// <p>This parameter is required for unversioned models. It is not applicable to versioned models.</p>
    pub fn model_package_name(&self) -> std::option::Option<&str> {
        self.model_package_name.as_deref()
    }
    /// <p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p>
    /// <p>This parameter is required for versioned models, and does not apply to unversioned models.</p>
    pub fn model_package_group_name(&self) -> std::option::Option<&str> {
        self.model_package_group_name.as_deref()
    }
    /// <p>A description of the model package.</p>
    pub fn model_package_description(&self) -> std::option::Option<&str> {
        self.model_package_description.as_deref()
    }
    /// <p>Specifies details about inference jobs that can be run with models based on this model package, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li>
    /// <li> <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p> </li>
    /// <li> <p>The input and output content formats that the model package supports for inference.</p> </li>
    /// </ul>
    pub fn inference_specification(
        &self,
    ) -> std::option::Option<&crate::types::InferenceSpecification> {
        self.inference_specification.as_ref()
    }
    /// <p>Specifies configurations for one or more transform jobs that SageMaker runs to test the model package.</p>
    pub fn validation_specification(
        &self,
    ) -> std::option::Option<&crate::types::ModelPackageValidationSpecification> {
        self.validation_specification.as_ref()
    }
    /// <p>Details about the algorithm that was used to create the model package.</p>
    pub fn source_algorithm_specification(
        &self,
    ) -> std::option::Option<&crate::types::SourceAlgorithmSpecification> {
        self.source_algorithm_specification.as_ref()
    }
    /// <p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p>
    /// <p>This parameter is optional for unversioned models, and does not apply to versioned models.</p>
    pub fn certify_for_marketplace(&self) -> bool {
        self.certify_for_marketplace
    }
    /// <p>A list of key value pairs associated with the model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>Whether the model is approved for deployment.</p>
    /// <p>This parameter is optional for versioned models, and does not apply to unversioned models.</p>
    /// <p>For versioned models, the value of this parameter must be set to <code>Approved</code> to deploy the model.</p>
    pub fn model_approval_status(&self) -> std::option::Option<&crate::types::ModelApprovalStatus> {
        self.model_approval_status.as_ref()
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(&self) -> std::option::Option<&crate::types::MetadataProperties> {
        self.metadata_properties.as_ref()
    }
    /// <p>A structure that contains model metrics reports.</p>
    pub fn model_metrics(&self) -> std::option::Option<&crate::types::ModelMetrics> {
        self.model_metrics.as_ref()
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn customer_metadata_properties(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.customer_metadata_properties.as_ref()
    }
    /// <p>Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>. </p>
    pub fn drift_check_baselines(&self) -> std::option::Option<&crate::types::DriftCheckBaselines> {
        self.drift_check_baselines.as_ref()
    }
    /// <p>The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification. The following tasks are supported by Inference Recommender: <code>"IMAGE_CLASSIFICATION"</code> | <code>"OBJECT_DETECTION"</code> | <code>"TEXT_GENERATION"</code> |<code>"IMAGE_SEGMENTATION"</code> | <code>"FILL_MASK"</code> | <code>"CLASSIFICATION"</code> | <code>"REGRESSION"</code> | <code>"OTHER"</code>.</p>
    /// <p>Specify "OTHER" if none of the tasks listed fit your use case.</p>
    pub fn task(&self) -> std::option::Option<&str> {
        self.task.as_deref()
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn sample_payload_url(&self) -> std::option::Option<&str> {
        self.sample_payload_url.as_deref()
    }
    /// <p>An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts. </p>
    pub fn additional_inference_specifications(
        &self,
    ) -> std::option::Option<&[crate::types::AdditionalInferenceSpecificationDefinition]> {
        self.additional_inference_specifications.as_deref()
    }
}
impl CreateModelPackageInput {
    /// Creates a new builder-style object to manufacture [`CreateModelPackageInput`](crate::operation::create_model_package::CreateModelPackageInput).
    pub fn builder(
    ) -> crate::operation::create_model_package::builders::CreateModelPackageInputBuilder {
        crate::operation::create_model_package::builders::CreateModelPackageInputBuilder::default()
    }
}

/// A builder for [`CreateModelPackageInput`](crate::operation::create_model_package::CreateModelPackageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateModelPackageInputBuilder {
    pub(crate) model_package_name: std::option::Option<std::string::String>,
    pub(crate) model_package_group_name: std::option::Option<std::string::String>,
    pub(crate) model_package_description: std::option::Option<std::string::String>,
    pub(crate) inference_specification: std::option::Option<crate::types::InferenceSpecification>,
    pub(crate) validation_specification:
        std::option::Option<crate::types::ModelPackageValidationSpecification>,
    pub(crate) source_algorithm_specification:
        std::option::Option<crate::types::SourceAlgorithmSpecification>,
    pub(crate) certify_for_marketplace: std::option::Option<bool>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) model_approval_status: std::option::Option<crate::types::ModelApprovalStatus>,
    pub(crate) metadata_properties: std::option::Option<crate::types::MetadataProperties>,
    pub(crate) model_metrics: std::option::Option<crate::types::ModelMetrics>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) customer_metadata_properties:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) drift_check_baselines: std::option::Option<crate::types::DriftCheckBaselines>,
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) task: std::option::Option<std::string::String>,
    pub(crate) sample_payload_url: std::option::Option<std::string::String>,
    pub(crate) additional_inference_specifications: std::option::Option<
        std::vec::Vec<crate::types::AdditionalInferenceSpecificationDefinition>,
    >,
}
impl CreateModelPackageInputBuilder {
    /// <p>The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    /// <p>This parameter is required for unversioned models. It is not applicable to versioned models.</p>
    pub fn model_package_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_package_name = Some(input.into());
        self
    }
    /// <p>The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    /// <p>This parameter is required for unversioned models. It is not applicable to versioned models.</p>
    pub fn set_model_package_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_package_name = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p>
    /// <p>This parameter is required for versioned models, and does not apply to unversioned models.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_package_group_name = Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p>
    /// <p>This parameter is required for versioned models, and does not apply to unversioned models.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_package_group_name = input;
        self
    }
    /// <p>A description of the model package.</p>
    pub fn model_package_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_package_description = Some(input.into());
        self
    }
    /// <p>A description of the model package.</p>
    pub fn set_model_package_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_package_description = input;
        self
    }
    /// <p>Specifies details about inference jobs that can be run with models based on this model package, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li>
    /// <li> <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p> </li>
    /// <li> <p>The input and output content formats that the model package supports for inference.</p> </li>
    /// </ul>
    pub fn inference_specification(mut self, input: crate::types::InferenceSpecification) -> Self {
        self.inference_specification = Some(input);
        self
    }
    /// <p>Specifies details about inference jobs that can be run with models based on this model package, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li>
    /// <li> <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p> </li>
    /// <li> <p>The input and output content formats that the model package supports for inference.</p> </li>
    /// </ul>
    pub fn set_inference_specification(
        mut self,
        input: std::option::Option<crate::types::InferenceSpecification>,
    ) -> Self {
        self.inference_specification = input;
        self
    }
    /// <p>Specifies configurations for one or more transform jobs that SageMaker runs to test the model package.</p>
    pub fn validation_specification(
        mut self,
        input: crate::types::ModelPackageValidationSpecification,
    ) -> Self {
        self.validation_specification = Some(input);
        self
    }
    /// <p>Specifies configurations for one or more transform jobs that SageMaker runs to test the model package.</p>
    pub fn set_validation_specification(
        mut self,
        input: std::option::Option<crate::types::ModelPackageValidationSpecification>,
    ) -> Self {
        self.validation_specification = input;
        self
    }
    /// <p>Details about the algorithm that was used to create the model package.</p>
    pub fn source_algorithm_specification(
        mut self,
        input: crate::types::SourceAlgorithmSpecification,
    ) -> Self {
        self.source_algorithm_specification = Some(input);
        self
    }
    /// <p>Details about the algorithm that was used to create the model package.</p>
    pub fn set_source_algorithm_specification(
        mut self,
        input: std::option::Option<crate::types::SourceAlgorithmSpecification>,
    ) -> Self {
        self.source_algorithm_specification = input;
        self
    }
    /// <p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p>
    /// <p>This parameter is optional for unversioned models, and does not apply to versioned models.</p>
    pub fn certify_for_marketplace(mut self, input: bool) -> Self {
        self.certify_for_marketplace = Some(input);
        self
    }
    /// <p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p>
    /// <p>This parameter is optional for unversioned models, and does not apply to versioned models.</p>
    pub fn set_certify_for_marketplace(mut self, input: std::option::Option<bool>) -> Self {
        self.certify_for_marketplace = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of key value pairs associated with the model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of key value pairs associated with the model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Whether the model is approved for deployment.</p>
    /// <p>This parameter is optional for versioned models, and does not apply to unversioned models.</p>
    /// <p>For versioned models, the value of this parameter must be set to <code>Approved</code> to deploy the model.</p>
    pub fn model_approval_status(mut self, input: crate::types::ModelApprovalStatus) -> Self {
        self.model_approval_status = Some(input);
        self
    }
    /// <p>Whether the model is approved for deployment.</p>
    /// <p>This parameter is optional for versioned models, and does not apply to unversioned models.</p>
    /// <p>For versioned models, the value of this parameter must be set to <code>Approved</code> to deploy the model.</p>
    pub fn set_model_approval_status(
        mut self,
        input: std::option::Option<crate::types::ModelApprovalStatus>,
    ) -> Self {
        self.model_approval_status = input;
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(mut self, input: crate::types::MetadataProperties) -> Self {
        self.metadata_properties = Some(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn set_metadata_properties(
        mut self,
        input: std::option::Option<crate::types::MetadataProperties>,
    ) -> Self {
        self.metadata_properties = input;
        self
    }
    /// <p>A structure that contains model metrics reports.</p>
    pub fn model_metrics(mut self, input: crate::types::ModelMetrics) -> Self {
        self.model_metrics = Some(input);
        self
    }
    /// <p>A structure that contains model metrics reports.</p>
    pub fn set_model_metrics(
        mut self,
        input: std::option::Option<crate::types::ModelMetrics>,
    ) -> Self {
        self.model_metrics = input;
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Adds a key-value pair to `customer_metadata_properties`.
    ///
    /// To override the contents of this collection use [`set_customer_metadata_properties`](Self::set_customer_metadata_properties).
    ///
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn customer_metadata_properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.customer_metadata_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.customer_metadata_properties = Some(hash_map);
        self
    }
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn set_customer_metadata_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.customer_metadata_properties = input;
        self
    }
    /// <p>Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>. </p>
    pub fn drift_check_baselines(mut self, input: crate::types::DriftCheckBaselines) -> Self {
        self.drift_check_baselines = Some(input);
        self
    }
    /// <p>Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>. </p>
    pub fn set_drift_check_baselines(
        mut self,
        input: std::option::Option<crate::types::DriftCheckBaselines>,
    ) -> Self {
        self.drift_check_baselines = input;
        self
    }
    /// <p>The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification. The following tasks are supported by Inference Recommender: <code>"IMAGE_CLASSIFICATION"</code> | <code>"OBJECT_DETECTION"</code> | <code>"TEXT_GENERATION"</code> |<code>"IMAGE_SEGMENTATION"</code> | <code>"FILL_MASK"</code> | <code>"CLASSIFICATION"</code> | <code>"REGRESSION"</code> | <code>"OTHER"</code>.</p>
    /// <p>Specify "OTHER" if none of the tasks listed fit your use case.</p>
    pub fn task(mut self, input: impl Into<std::string::String>) -> Self {
        self.task = Some(input.into());
        self
    }
    /// <p>The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification. The following tasks are supported by Inference Recommender: <code>"IMAGE_CLASSIFICATION"</code> | <code>"OBJECT_DETECTION"</code> | <code>"TEXT_GENERATION"</code> |<code>"IMAGE_SEGMENTATION"</code> | <code>"FILL_MASK"</code> | <code>"CLASSIFICATION"</code> | <code>"REGRESSION"</code> | <code>"OTHER"</code>.</p>
    /// <p>Specify "OTHER" if none of the tasks listed fit your use case.</p>
    pub fn set_task(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task = input;
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn sample_payload_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.sample_payload_url = Some(input.into());
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn set_sample_payload_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sample_payload_url = input;
        self
    }
    /// Appends an item to `additional_inference_specifications`.
    ///
    /// To override the contents of this collection use [`set_additional_inference_specifications`](Self::set_additional_inference_specifications).
    ///
    /// <p>An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts. </p>
    pub fn additional_inference_specifications(
        mut self,
        input: crate::types::AdditionalInferenceSpecificationDefinition,
    ) -> Self {
        let mut v = self.additional_inference_specifications.unwrap_or_default();
        v.push(input);
        self.additional_inference_specifications = Some(v);
        self
    }
    /// <p>An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts. </p>
    pub fn set_additional_inference_specifications(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::AdditionalInferenceSpecificationDefinition>,
        >,
    ) -> Self {
        self.additional_inference_specifications = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateModelPackageInput`](crate::operation::create_model_package::CreateModelPackageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_model_package::CreateModelPackageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_model_package::CreateModelPackageInput {
                model_package_name: self.model_package_name,
                model_package_group_name: self.model_package_group_name,
                model_package_description: self.model_package_description,
                inference_specification: self.inference_specification,
                validation_specification: self.validation_specification,
                source_algorithm_specification: self.source_algorithm_specification,
                certify_for_marketplace: self.certify_for_marketplace.unwrap_or_default(),
                tags: self.tags,
                model_approval_status: self.model_approval_status,
                metadata_properties: self.metadata_properties,
                model_metrics: self.model_metrics,
                client_token: self.client_token,
                customer_metadata_properties: self.customer_metadata_properties,
                drift_check_baselines: self.drift_check_baselines,
                domain: self.domain,
                task: self.task,
                sample_payload_url: self.sample_payload_url,
                additional_inference_specifications: self.additional_inference_specifications,
            },
        )
    }
}
