// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::query_lineage::_query_lineage_output::QueryLineageOutputBuilder;

pub use crate::operation::query_lineage::_query_lineage_input::QueryLineageInputBuilder;

/// Fluent builder constructing a request to `QueryLineage`.
///
/// <p>Use this action to inspect your lineage and discover relationships between entities. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html"> Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct QueryLineageFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::query_lineage::builders::QueryLineageInputBuilder,
}
impl QueryLineageFluentBuilder {
    /// Creates a new `QueryLineage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::query_lineage::QueryLineage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::query_lineage::QueryLineageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::query_lineage::QueryLineageOutput,
        aws_smithy_http::result::SdkError<crate::operation::query_lineage::QueryLineageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::query_lineage::paginator::QueryLineagePaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::query_lineage::paginator::QueryLineagePaginator {
        crate::operation::query_lineage::paginator::QueryLineagePaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// Appends an item to `StartArns`.
    ///
    /// To override the contents of this collection use [`set_start_arns`](Self::set_start_arns).
    ///
    /// <p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>
    pub fn start_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.start_arns(input.into());
        self
    }
    /// <p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>
    pub fn set_start_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_start_arns(input);
        self
    }
    /// <p>Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses.</p>
    pub fn direction(mut self, input: crate::types::Direction) -> Self {
        self.inner = self.inner.direction(input);
        self
    }
    /// <p>Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses.</p>
    pub fn set_direction(mut self, input: std::option::Option<crate::types::Direction>) -> Self {
        self.inner = self.inner.set_direction(input);
        self
    }
    /// <p> Setting this value to <code>True</code> retrieves not only the entities of interest but also the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a> and lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>
    pub fn include_edges(mut self, input: bool) -> Self {
        self.inner = self.inner.include_edges(input);
        self
    }
    /// <p> Setting this value to <code>True</code> retrieves not only the entities of interest but also the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a> and lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>
    pub fn set_include_edges(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_edges(input);
        self
    }
    /// <p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
    /// <ul>
    /// <li> <p>Properties - Key-value pairs to match on the lineage entities' properties.</p> </li>
    /// <li> <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>, <code>Artifact</code>, or <code>Context</code>.</p> </li>
    /// <li> <p>CreatedBefore - Filter entities created before this date.</p> </li>
    /// <li> <p>ModifiedBefore - Filter entities modified before this date.</p> </li>
    /// <li> <p>ModifiedAfter - Filter entities modified after this date.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::QueryFilters) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
    /// <ul>
    /// <li> <p>Properties - Key-value pairs to match on the lineage entities' properties.</p> </li>
    /// <li> <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>, <code>Artifact</code>, or <code>Context</code>.</p> </li>
    /// <li> <p>CreatedBefore - Filter entities created before this date.</p> </li>
    /// <li> <p>ModifiedBefore - Filter entities modified before this date.</p> </li>
    /// <li> <p>ModifiedAfter - Filter entities modified after this date.</p> </li>
    /// </ul>
    pub fn set_filters(mut self, input: std::option::Option<crate::types::QueryFilters>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>
    pub fn max_depth(mut self, input: i32) -> Self {
        self.inner = self.inner.max_depth(input);
        self
    }
    /// <p>The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>
    pub fn set_max_depth(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_depth(input);
        self
    }
    /// <p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
