// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::query_lineage::_query_lineage_output::QueryLineageOutputBuilder;

pub use crate::operation::query_lineage::_query_lineage_input::QueryLineageInputBuilder;

impl crate::operation::query_lineage::builders::QueryLineageInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::query_lineage::QueryLineageOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::query_lineage::QueryLineageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.query_lineage();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `QueryLineage`.
///
/// <p>Use this action to inspect your lineage and discover relationships between entities. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html"> Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct QueryLineageFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::query_lineage::builders::QueryLineageInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::query_lineage::QueryLineageOutput,
        crate::operation::query_lineage::QueryLineageError,
    > for QueryLineageFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::query_lineage::QueryLineageOutput,
            crate::operation::query_lineage::QueryLineageError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl QueryLineageFluentBuilder {
    /// Creates a new `QueryLineage`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the QueryLineage as a reference.
    pub fn as_input(&self) -> &crate::operation::query_lineage::builders::QueryLineageInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::query_lineage::QueryLineageOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::query_lineage::QueryLineageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::query_lineage::QueryLineage::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::query_lineage::QueryLineage::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::query_lineage::QueryLineageOutput,
        crate::operation::query_lineage::QueryLineageError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::query_lineage::paginator::QueryLineagePaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::query_lineage::paginator::QueryLineagePaginator {
        crate::operation::query_lineage::paginator::QueryLineagePaginator::new(self.handle, self.inner)
    }
    ///
    /// Appends an item to `StartArns`.
    ///
    /// To override the contents of this collection use [`set_start_arns`](Self::set_start_arns).
    ///
    /// <p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>
    pub fn start_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.start_arns(input.into());
        self
    }
    /// <p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>
    pub fn set_start_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_start_arns(input);
        self
    }
    /// <p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>
    pub fn get_start_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_start_arns()
    }
    /// <p>Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses.</p>
    pub fn direction(mut self, input: crate::types::Direction) -> Self {
        self.inner = self.inner.direction(input);
        self
    }
    /// <p>Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses.</p>
    pub fn set_direction(mut self, input: ::std::option::Option<crate::types::Direction>) -> Self {
        self.inner = self.inner.set_direction(input);
        self
    }
    /// <p>Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses.</p>
    pub fn get_direction(&self) -> &::std::option::Option<crate::types::Direction> {
        self.inner.get_direction()
    }
    /// <p>Setting this value to <code>True</code> retrieves not only the entities of interest but also the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a> and lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>
    pub fn include_edges(mut self, input: bool) -> Self {
        self.inner = self.inner.include_edges(input);
        self
    }
    /// <p>Setting this value to <code>True</code> retrieves not only the entities of interest but also the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a> and lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>
    pub fn set_include_edges(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_edges(input);
        self
    }
    /// <p>Setting this value to <code>True</code> retrieves not only the entities of interest but also the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a> and lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>
    pub fn get_include_edges(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_edges()
    }
    /// <p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
    /// <ul>
    /// <li>
    /// <p>Properties - Key-value pairs to match on the lineage entities' properties.</p></li>
    /// <li>
    /// <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>, <code>Artifact</code>, or <code>Context</code>.</p></li>
    /// <li>
    /// <p>CreatedBefore - Filter entities created before this date.</p></li>
    /// <li>
    /// <p>ModifiedBefore - Filter entities modified before this date.</p></li>
    /// <li>
    /// <p>ModifiedAfter - Filter entities modified after this date.</p></li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::QueryFilters) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
    /// <ul>
    /// <li>
    /// <p>Properties - Key-value pairs to match on the lineage entities' properties.</p></li>
    /// <li>
    /// <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>, <code>Artifact</code>, or <code>Context</code>.</p></li>
    /// <li>
    /// <p>CreatedBefore - Filter entities created before this date.</p></li>
    /// <li>
    /// <p>ModifiedBefore - Filter entities modified before this date.</p></li>
    /// <li>
    /// <p>ModifiedAfter - Filter entities modified after this date.</p></li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::QueryFilters>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
    /// <ul>
    /// <li>
    /// <p>Properties - Key-value pairs to match on the lineage entities' properties.</p></li>
    /// <li>
    /// <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>, <code>Artifact</code>, or <code>Context</code>.</p></li>
    /// <li>
    /// <p>CreatedBefore - Filter entities created before this date.</p></li>
    /// <li>
    /// <p>ModifiedBefore - Filter entities modified before this date.</p></li>
    /// <li>
    /// <p>ModifiedAfter - Filter entities modified after this date.</p></li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::QueryFilters> {
        self.inner.get_filters()
    }
    /// <p>The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>
    pub fn max_depth(mut self, input: i32) -> Self {
        self.inner = self.inner.max_depth(input);
        self
    }
    /// <p>The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>
    pub fn set_max_depth(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_depth(input);
        self
    }
    /// <p>The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>
    pub fn get_max_depth(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_depth()
    }
    /// <p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
