// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateHubInput {
    /// <p>The name of the hub to create.</p>
    #[doc(hidden)]
    pub hub_name: std::option::Option<std::string::String>,
    /// <p>A description of the hub.</p>
    #[doc(hidden)]
    pub hub_description: std::option::Option<std::string::String>,
    /// <p>The display name of the hub.</p>
    #[doc(hidden)]
    pub hub_display_name: std::option::Option<std::string::String>,
    /// <p>The searchable keywords for the hub.</p>
    #[doc(hidden)]
    pub hub_search_keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    #[doc(hidden)]
    pub s3_storage_config: std::option::Option<crate::types::HubS3StorageConfig>,
    /// <p>Any tags to associate with the hub.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateHubInput {
    /// <p>The name of the hub to create.</p>
    pub fn hub_name(&self) -> std::option::Option<&str> {
        self.hub_name.as_deref()
    }
    /// <p>A description of the hub.</p>
    pub fn hub_description(&self) -> std::option::Option<&str> {
        self.hub_description.as_deref()
    }
    /// <p>The display name of the hub.</p>
    pub fn hub_display_name(&self) -> std::option::Option<&str> {
        self.hub_display_name.as_deref()
    }
    /// <p>The searchable keywords for the hub.</p>
    pub fn hub_search_keywords(&self) -> std::option::Option<&[std::string::String]> {
        self.hub_search_keywords.as_deref()
    }
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub fn s3_storage_config(&self) -> std::option::Option<&crate::types::HubS3StorageConfig> {
        self.s3_storage_config.as_ref()
    }
    /// <p>Any tags to associate with the hub.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateHubInput {
    /// Creates a new builder-style object to manufacture [`CreateHubInput`](crate::operation::create_hub::CreateHubInput).
    pub fn builder() -> crate::operation::create_hub::builders::CreateHubInputBuilder {
        crate::operation::create_hub::builders::CreateHubInputBuilder::default()
    }
}

/// A builder for [`CreateHubInput`](crate::operation::create_hub::CreateHubInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateHubInputBuilder {
    pub(crate) hub_name: std::option::Option<std::string::String>,
    pub(crate) hub_description: std::option::Option<std::string::String>,
    pub(crate) hub_display_name: std::option::Option<std::string::String>,
    pub(crate) hub_search_keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) s3_storage_config: std::option::Option<crate::types::HubS3StorageConfig>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateHubInputBuilder {
    /// <p>The name of the hub to create.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_name = Some(input.into());
        self
    }
    /// <p>The name of the hub to create.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_name = input;
        self
    }
    /// <p>A description of the hub.</p>
    pub fn hub_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_description = Some(input.into());
        self
    }
    /// <p>A description of the hub.</p>
    pub fn set_hub_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_description = input;
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn hub_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_display_name = Some(input.into());
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn set_hub_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_display_name = input;
        self
    }
    /// Appends an item to `hub_search_keywords`.
    ///
    /// To override the contents of this collection use [`set_hub_search_keywords`](Self::set_hub_search_keywords).
    ///
    /// <p>The searchable keywords for the hub.</p>
    pub fn hub_search_keywords(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.hub_search_keywords.unwrap_or_default();
        v.push(input.into());
        self.hub_search_keywords = Some(v);
        self
    }
    /// <p>The searchable keywords for the hub.</p>
    pub fn set_hub_search_keywords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.hub_search_keywords = input;
        self
    }
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub fn s3_storage_config(mut self, input: crate::types::HubS3StorageConfig) -> Self {
        self.s3_storage_config = Some(input);
        self
    }
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub fn set_s3_storage_config(
        mut self,
        input: std::option::Option<crate::types::HubS3StorageConfig>,
    ) -> Self {
        self.s3_storage_config = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags to associate with the hub.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Any tags to associate with the hub.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateHubInput`](crate::operation::create_hub::CreateHubInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_hub::CreateHubInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_hub::CreateHubInput {
            hub_name: self.hub_name,
            hub_description: self.hub_description,
            hub_display_name: self.hub_display_name,
            hub_search_keywords: self.hub_search_keywords,
            s3_storage_config: self.s3_storage_config,
            tags: self.tags,
        })
    }
}
