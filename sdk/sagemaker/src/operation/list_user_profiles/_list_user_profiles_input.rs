// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListUserProfilesInput {
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The total number of items to return in the response. If the total number of items available is more than the value specified, a <code>NextToken</code> is provided in the response. To resume pagination, provide the <code>NextToken</code> value in the as part of a subsequent call. The default value is 10.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub sort_by: ::std::option::Option<crate::types::UserProfileSortKey>,
    /// <p>A parameter by which to filter the results.</p>
    pub domain_id_equals: ::std::option::Option<::std::string::String>,
    /// <p>A parameter by which to filter the results.</p>
    pub user_profile_name_contains: ::std::option::Option<::std::string::String>,
}
impl ListUserProfilesInput {
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The total number of items to return in the response. If the total number of items available is more than the value specified, a <code>NextToken</code> is provided in the response. To resume pagination, provide the <code>NextToken</code> value in the as part of a subsequent call. The default value is 10.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::UserProfileSortKey> {
        self.sort_by.as_ref()
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn domain_id_equals(&self) -> ::std::option::Option<&str> {
        self.domain_id_equals.as_deref()
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn user_profile_name_contains(&self) -> ::std::option::Option<&str> {
        self.user_profile_name_contains.as_deref()
    }
}
impl ListUserProfilesInput {
    /// Creates a new builder-style object to manufacture [`ListUserProfilesInput`](crate::operation::list_user_profiles::ListUserProfilesInput).
    pub fn builder() -> crate::operation::list_user_profiles::builders::ListUserProfilesInputBuilder {
        crate::operation::list_user_profiles::builders::ListUserProfilesInputBuilder::default()
    }
}

/// A builder for [`ListUserProfilesInput`](crate::operation::list_user_profiles::ListUserProfilesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListUserProfilesInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) sort_by: ::std::option::Option<crate::types::UserProfileSortKey>,
    pub(crate) domain_id_equals: ::std::option::Option<::std::string::String>,
    pub(crate) user_profile_name_contains: ::std::option::Option<::std::string::String>,
}
impl ListUserProfilesInputBuilder {
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The total number of items to return in the response. If the total number of items available is more than the value specified, a <code>NextToken</code> is provided in the response. To resume pagination, provide the <code>NextToken</code> value in the as part of a subsequent call. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of items to return in the response. If the total number of items available is more than the value specified, a <code>NextToken</code> is provided in the response. To resume pagination, provide the <code>NextToken</code> value in the as part of a subsequent call. The default value is 10.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The total number of items to return in the response. If the total number of items available is more than the value specified, a <code>NextToken</code> is provided in the response. To resume pagination, provide the <code>NextToken</code> value in the as part of a subsequent call. The default value is 10.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn sort_by(mut self, input: crate::types::UserProfileSortKey) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::UserProfileSortKey>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::UserProfileSortKey> {
        &self.sort_by
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn domain_id_equals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id_equals = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn set_domain_id_equals(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id_equals = input;
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn get_domain_id_equals(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id_equals
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn user_profile_name_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_profile_name_contains = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn set_user_profile_name_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_profile_name_contains = input;
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn get_user_profile_name_contains(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_profile_name_contains
    }
    /// Consumes the builder and constructs a [`ListUserProfilesInput`](crate::operation::list_user_profiles::ListUserProfilesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_user_profiles::ListUserProfilesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_user_profiles::ListUserProfilesInput {
            next_token: self.next_token,
            max_results: self.max_results,
            sort_order: self.sort_order,
            sort_by: self.sort_by,
            domain_id_equals: self.domain_id_equals,
            user_profile_name_contains: self.user_profile_name_contains,
        })
    }
}
