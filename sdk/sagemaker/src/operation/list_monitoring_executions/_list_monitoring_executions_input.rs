// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMonitoringExecutionsInput {
    /// <p>Name of a specific schedule to fetch jobs for.</p>
    #[doc(hidden)]
    pub monitoring_schedule_name: std::option::Option<std::string::String>,
    /// <p>Name of a specific endpoint to fetch jobs for.</p>
    #[doc(hidden)]
    pub endpoint_name: std::option::Option<std::string::String>,
    /// <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>, <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::MonitoringExecutionSortKey>,
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Filter for jobs scheduled before a specified time.</p>
    #[doc(hidden)]
    pub scheduled_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Filter for jobs scheduled after a specified time.</p>
    #[doc(hidden)]
    pub scheduled_time_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that returns only jobs created before a specified time.</p>
    #[doc(hidden)]
    pub creation_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that returns only jobs created after a specified time.</p>
    #[doc(hidden)]
    pub creation_time_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that returns only jobs modified after a specified time.</p>
    #[doc(hidden)]
    pub last_modified_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that returns only jobs modified before a specified time.</p>
    #[doc(hidden)]
    pub last_modified_time_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that retrieves only jobs with a specific status.</p>
    #[doc(hidden)]
    pub status_equals: std::option::Option<crate::types::ExecutionStatus>,
    /// <p>Gets a list of the monitoring job runs of the specified monitoring job definitions.</p>
    #[doc(hidden)]
    pub monitoring_job_definition_name: std::option::Option<std::string::String>,
    /// <p>A filter that returns only the monitoring job runs of the specified monitoring type.</p>
    #[doc(hidden)]
    pub monitoring_type_equals: std::option::Option<crate::types::MonitoringType>,
}
impl ListMonitoringExecutionsInput {
    /// <p>Name of a specific schedule to fetch jobs for.</p>
    pub fn monitoring_schedule_name(&self) -> std::option::Option<&str> {
        self.monitoring_schedule_name.as_deref()
    }
    /// <p>Name of a specific endpoint to fetch jobs for.</p>
    pub fn endpoint_name(&self) -> std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>, <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::MonitoringExecutionSortKey> {
        self.sort_by.as_ref()
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Filter for jobs scheduled before a specified time.</p>
    pub fn scheduled_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.scheduled_time_before.as_ref()
    }
    /// <p>Filter for jobs scheduled after a specified time.</p>
    pub fn scheduled_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.scheduled_time_after.as_ref()
    }
    /// <p>A filter that returns only jobs created before a specified time.</p>
    pub fn creation_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time_before.as_ref()
    }
    /// <p>A filter that returns only jobs created after a specified time.</p>
    pub fn creation_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time_after.as_ref()
    }
    /// <p>A filter that returns only jobs modified after a specified time.</p>
    pub fn last_modified_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time_before.as_ref()
    }
    /// <p>A filter that returns only jobs modified before a specified time.</p>
    pub fn last_modified_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time_after.as_ref()
    }
    /// <p>A filter that retrieves only jobs with a specific status.</p>
    pub fn status_equals(&self) -> std::option::Option<&crate::types::ExecutionStatus> {
        self.status_equals.as_ref()
    }
    /// <p>Gets a list of the monitoring job runs of the specified monitoring job definitions.</p>
    pub fn monitoring_job_definition_name(&self) -> std::option::Option<&str> {
        self.monitoring_job_definition_name.as_deref()
    }
    /// <p>A filter that returns only the monitoring job runs of the specified monitoring type.</p>
    pub fn monitoring_type_equals(&self) -> std::option::Option<&crate::types::MonitoringType> {
        self.monitoring_type_equals.as_ref()
    }
}
impl ListMonitoringExecutionsInput {
    /// Creates a new builder-style object to manufacture [`ListMonitoringExecutionsInput`](crate::operation::list_monitoring_executions::ListMonitoringExecutionsInput).
    pub fn builder(
    ) -> crate::operation::list_monitoring_executions::builders::ListMonitoringExecutionsInputBuilder
    {
        crate::operation::list_monitoring_executions::builders::ListMonitoringExecutionsInputBuilder::default()
    }
}

/// A builder for [`ListMonitoringExecutionsInput`](crate::operation::list_monitoring_executions::ListMonitoringExecutionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListMonitoringExecutionsInputBuilder {
    pub(crate) monitoring_schedule_name: std::option::Option<std::string::String>,
    pub(crate) endpoint_name: std::option::Option<std::string::String>,
    pub(crate) sort_by: std::option::Option<crate::types::MonitoringExecutionSortKey>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) scheduled_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) scheduled_time_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_time_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status_equals: std::option::Option<crate::types::ExecutionStatus>,
    pub(crate) monitoring_job_definition_name: std::option::Option<std::string::String>,
    pub(crate) monitoring_type_equals: std::option::Option<crate::types::MonitoringType>,
}
impl ListMonitoringExecutionsInputBuilder {
    /// <p>Name of a specific schedule to fetch jobs for.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitoring_schedule_name = Some(input.into());
        self
    }
    /// <p>Name of a specific schedule to fetch jobs for.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monitoring_schedule_name = input;
        self
    }
    /// <p>Name of a specific endpoint to fetch jobs for.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_name = Some(input.into());
        self
    }
    /// <p>Name of a specific endpoint to fetch jobs for.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>, <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::types::MonitoringExecutionSortKey) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>, <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::MonitoringExecutionSortKey>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Filter for jobs scheduled before a specified time.</p>
    pub fn scheduled_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.scheduled_time_before = Some(input);
        self
    }
    /// <p>Filter for jobs scheduled before a specified time.</p>
    pub fn set_scheduled_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.scheduled_time_before = input;
        self
    }
    /// <p>Filter for jobs scheduled after a specified time.</p>
    pub fn scheduled_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.scheduled_time_after = Some(input);
        self
    }
    /// <p>Filter for jobs scheduled after a specified time.</p>
    pub fn set_scheduled_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.scheduled_time_after = input;
        self
    }
    /// <p>A filter that returns only jobs created before a specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time_before = Some(input);
        self
    }
    /// <p>A filter that returns only jobs created before a specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time_before = input;
        self
    }
    /// <p>A filter that returns only jobs created after a specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time_after = Some(input);
        self
    }
    /// <p>A filter that returns only jobs created after a specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time_after = input;
        self
    }
    /// <p>A filter that returns only jobs modified after a specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time_before = Some(input);
        self
    }
    /// <p>A filter that returns only jobs modified after a specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time_before = input;
        self
    }
    /// <p>A filter that returns only jobs modified before a specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time_after = Some(input);
        self
    }
    /// <p>A filter that returns only jobs modified before a specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time_after = input;
        self
    }
    /// <p>A filter that retrieves only jobs with a specific status.</p>
    pub fn status_equals(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.status_equals = Some(input);
        self
    }
    /// <p>A filter that retrieves only jobs with a specific status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::types::ExecutionStatus>,
    ) -> Self {
        self.status_equals = input;
        self
    }
    /// <p>Gets a list of the monitoring job runs of the specified monitoring job definitions.</p>
    pub fn monitoring_job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitoring_job_definition_name = Some(input.into());
        self
    }
    /// <p>Gets a list of the monitoring job runs of the specified monitoring job definitions.</p>
    pub fn set_monitoring_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monitoring_job_definition_name = input;
        self
    }
    /// <p>A filter that returns only the monitoring job runs of the specified monitoring type.</p>
    pub fn monitoring_type_equals(mut self, input: crate::types::MonitoringType) -> Self {
        self.monitoring_type_equals = Some(input);
        self
    }
    /// <p>A filter that returns only the monitoring job runs of the specified monitoring type.</p>
    pub fn set_monitoring_type_equals(
        mut self,
        input: std::option::Option<crate::types::MonitoringType>,
    ) -> Self {
        self.monitoring_type_equals = input;
        self
    }
    /// Consumes the builder and constructs a [`ListMonitoringExecutionsInput`](crate::operation::list_monitoring_executions::ListMonitoringExecutionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_monitoring_executions::ListMonitoringExecutionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_monitoring_executions::ListMonitoringExecutionsInput {
                monitoring_schedule_name: self.monitoring_schedule_name,
                endpoint_name: self.endpoint_name,
                sort_by: self.sort_by,
                sort_order: self.sort_order,
                next_token: self.next_token,
                max_results: self.max_results,
                scheduled_time_before: self.scheduled_time_before,
                scheduled_time_after: self.scheduled_time_after,
                creation_time_before: self.creation_time_before,
                creation_time_after: self.creation_time_after,
                last_modified_time_before: self.last_modified_time_before,
                last_modified_time_after: self.last_modified_time_after,
                status_equals: self.status_equals,
                monitoring_job_definition_name: self.monitoring_job_definition_name,
                monitoring_type_equals: self.monitoring_type_equals,
            },
        )
    }
}
