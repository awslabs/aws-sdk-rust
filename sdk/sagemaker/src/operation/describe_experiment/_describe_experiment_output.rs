// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeExperimentOutput {
    /// <p>The name of the experiment.</p>
    #[doc(hidden)]
    pub experiment_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the experiment.</p>
    #[doc(hidden)]
    pub experiment_arn: std::option::Option<std::string::String>,
    /// <p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified, <code>ExperimentName</code> is displayed.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the source and, optionally, the type.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::ExperimentSource>,
    /// <p>The description of the experiment.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>When the experiment was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Who created the experiment.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<crate::types::UserContext>,
    /// <p>When the experiment was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Who last modified the experiment.</p>
    #[doc(hidden)]
    pub last_modified_by: std::option::Option<crate::types::UserContext>,
    _request_id: Option<String>,
}
impl DescribeExperimentOutput {
    /// <p>The name of the experiment.</p>
    pub fn experiment_name(&self) -> std::option::Option<&str> {
        self.experiment_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the experiment.</p>
    pub fn experiment_arn(&self) -> std::option::Option<&str> {
        self.experiment_arn.as_deref()
    }
    /// <p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified, <code>ExperimentName</code> is displayed.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the source and, optionally, the type.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::ExperimentSource> {
        self.source.as_ref()
    }
    /// <p>The description of the experiment.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>When the experiment was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Who created the experiment.</p>
    pub fn created_by(&self) -> std::option::Option<&crate::types::UserContext> {
        self.created_by.as_ref()
    }
    /// <p>When the experiment was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>Who last modified the experiment.</p>
    pub fn last_modified_by(&self) -> std::option::Option<&crate::types::UserContext> {
        self.last_modified_by.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeExperimentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeExperimentOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExperimentOutput`](crate::operation::describe_experiment::DescribeExperimentOutput).
    pub fn builder(
    ) -> crate::operation::describe_experiment::builders::DescribeExperimentOutputBuilder {
        crate::operation::describe_experiment::builders::DescribeExperimentOutputBuilder::default()
    }
}

/// A builder for [`DescribeExperimentOutput`](crate::operation::describe_experiment::DescribeExperimentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeExperimentOutputBuilder {
    pub(crate) experiment_name: std::option::Option<std::string::String>,
    pub(crate) experiment_arn: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<crate::types::ExperimentSource>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_by: std::option::Option<crate::types::UserContext>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_by: std::option::Option<crate::types::UserContext>,
    _request_id: Option<String>,
}
impl DescribeExperimentOutputBuilder {
    /// <p>The name of the experiment.</p>
    pub fn experiment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.experiment_name = Some(input.into());
        self
    }
    /// <p>The name of the experiment.</p>
    pub fn set_experiment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.experiment_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the experiment.</p>
    pub fn experiment_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.experiment_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the experiment.</p>
    pub fn set_experiment_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.experiment_arn = input;
        self
    }
    /// <p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified, <code>ExperimentName</code> is displayed.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified, <code>ExperimentName</code> is displayed.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source and, optionally, the type.</p>
    pub fn source(mut self, input: crate::types::ExperimentSource) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source and, optionally, the type.</p>
    pub fn set_source(
        mut self,
        input: std::option::Option<crate::types::ExperimentSource>,
    ) -> Self {
        self.source = input;
        self
    }
    /// <p>The description of the experiment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the experiment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>When the experiment was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the experiment was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Who created the experiment.</p>
    pub fn created_by(mut self, input: crate::types::UserContext) -> Self {
        self.created_by = Some(input);
        self
    }
    /// <p>Who created the experiment.</p>
    pub fn set_created_by(mut self, input: std::option::Option<crate::types::UserContext>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>When the experiment was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>When the experiment was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Who last modified the experiment.</p>
    pub fn last_modified_by(mut self, input: crate::types::UserContext) -> Self {
        self.last_modified_by = Some(input);
        self
    }
    /// <p>Who last modified the experiment.</p>
    pub fn set_last_modified_by(
        mut self,
        input: std::option::Option<crate::types::UserContext>,
    ) -> Self {
        self.last_modified_by = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeExperimentOutput`](crate::operation::describe_experiment::DescribeExperimentOutput).
    pub fn build(self) -> crate::operation::describe_experiment::DescribeExperimentOutput {
        crate::operation::describe_experiment::DescribeExperimentOutput {
            experiment_name: self.experiment_name,
            experiment_arn: self.experiment_arn,
            display_name: self.display_name,
            source: self.source,
            description: self.description,
            creation_time: self.creation_time,
            created_by: self.created_by,
            last_modified_time: self.last_modified_time,
            last_modified_by: self.last_modified_by,
            _request_id: self._request_id,
        }
    }
}
