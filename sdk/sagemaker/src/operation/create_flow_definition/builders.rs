// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_flow_definition::_create_flow_definition_output::CreateFlowDefinitionOutputBuilder;

pub use crate::operation::create_flow_definition::_create_flow_definition_input::CreateFlowDefinitionInputBuilder;

/// Fluent builder constructing a request to `CreateFlowDefinition`.
///
/// <p>Creates a flow definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateFlowDefinitionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_flow_definition::builders::CreateFlowDefinitionInputBuilder,
}
impl CreateFlowDefinitionFluentBuilder {
    /// Creates a new `CreateFlowDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_flow_definition::CreateFlowDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_flow_definition::CreateFlowDefinitionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_flow_definition::CreateFlowDefinitionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_flow_definition::CreateFlowDefinitionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of your flow definition.</p>
    pub fn flow_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_definition_name(input.into());
        self
    }
    /// <p>The name of your flow definition.</p>
    pub fn set_flow_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_flow_definition_name(input);
        self
    }
    /// <p>Container for configuring the source of human task requests. Use to specify if Amazon Rekognition or Amazon Textract is used as an integration source.</p>
    pub fn human_loop_request_source(
        mut self,
        input: crate::types::HumanLoopRequestSource,
    ) -> Self {
        self.inner = self.inner.human_loop_request_source(input);
        self
    }
    /// <p>Container for configuring the source of human task requests. Use to specify if Amazon Rekognition or Amazon Textract is used as an integration source.</p>
    pub fn set_human_loop_request_source(
        mut self,
        input: std::option::Option<crate::types::HumanLoopRequestSource>,
    ) -> Self {
        self.inner = self.inner.set_human_loop_request_source(input);
        self
    }
    /// <p>An object containing information about the events that trigger a human workflow.</p>
    pub fn human_loop_activation_config(
        mut self,
        input: crate::types::HumanLoopActivationConfig,
    ) -> Self {
        self.inner = self.inner.human_loop_activation_config(input);
        self
    }
    /// <p>An object containing information about the events that trigger a human workflow.</p>
    pub fn set_human_loop_activation_config(
        mut self,
        input: std::option::Option<crate::types::HumanLoopActivationConfig>,
    ) -> Self {
        self.inner = self.inner.set_human_loop_activation_config(input);
        self
    }
    /// <p>An object containing information about the tasks the human reviewers will perform.</p>
    pub fn human_loop_config(mut self, input: crate::types::HumanLoopConfig) -> Self {
        self.inner = self.inner.human_loop_config(input);
        self
    }
    /// <p>An object containing information about the tasks the human reviewers will perform.</p>
    pub fn set_human_loop_config(
        mut self,
        input: std::option::Option<crate::types::HumanLoopConfig>,
    ) -> Self {
        self.inner = self.inner.set_human_loop_config(input);
        self
    }
    /// <p>An object containing information about where the human review results will be uploaded.</p>
    pub fn output_config(mut self, input: crate::types::FlowDefinitionOutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>An object containing information about where the human review results will be uploaded.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::types::FlowDefinitionOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, <code>arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298</code>.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, <code>arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298</code>.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
