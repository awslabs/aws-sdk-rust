// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFeatureGroupInput {
    /// <p>The name of the feature group that you're updating.</p>
    #[doc(hidden)]
    pub feature_group_name: std::option::Option<std::string::String>,
    /// <p>Updates the feature group. Updating a feature group is an asynchronous operation. When you get an HTTP 200 response, you've made a valid request. It takes some time after you've made a valid request for Feature Store to update the feature group.</p>
    #[doc(hidden)]
    pub feature_additions: std::option::Option<std::vec::Vec<crate::types::FeatureDefinition>>,
}
impl UpdateFeatureGroupInput {
    /// <p>The name of the feature group that you're updating.</p>
    pub fn feature_group_name(&self) -> std::option::Option<&str> {
        self.feature_group_name.as_deref()
    }
    /// <p>Updates the feature group. Updating a feature group is an asynchronous operation. When you get an HTTP 200 response, you've made a valid request. It takes some time after you've made a valid request for Feature Store to update the feature group.</p>
    pub fn feature_additions(&self) -> std::option::Option<&[crate::types::FeatureDefinition]> {
        self.feature_additions.as_deref()
    }
}
impl UpdateFeatureGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateFeatureGroupInput`](crate::operation::update_feature_group::UpdateFeatureGroupInput).
    pub fn builder(
    ) -> crate::operation::update_feature_group::builders::UpdateFeatureGroupInputBuilder {
        crate::operation::update_feature_group::builders::UpdateFeatureGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateFeatureGroupInput`](crate::operation::update_feature_group::UpdateFeatureGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateFeatureGroupInputBuilder {
    pub(crate) feature_group_name: std::option::Option<std::string::String>,
    pub(crate) feature_additions:
        std::option::Option<std::vec::Vec<crate::types::FeatureDefinition>>,
}
impl UpdateFeatureGroupInputBuilder {
    /// <p>The name of the feature group that you're updating.</p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.feature_group_name = Some(input.into());
        self
    }
    /// <p>The name of the feature group that you're updating.</p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.feature_group_name = input;
        self
    }
    /// Appends an item to `feature_additions`.
    ///
    /// To override the contents of this collection use [`set_feature_additions`](Self::set_feature_additions).
    ///
    /// <p>Updates the feature group. Updating a feature group is an asynchronous operation. When you get an HTTP 200 response, you've made a valid request. It takes some time after you've made a valid request for Feature Store to update the feature group.</p>
    pub fn feature_additions(mut self, input: crate::types::FeatureDefinition) -> Self {
        let mut v = self.feature_additions.unwrap_or_default();
        v.push(input);
        self.feature_additions = Some(v);
        self
    }
    /// <p>Updates the feature group. Updating a feature group is an asynchronous operation. When you get an HTTP 200 response, you've made a valid request. It takes some time after you've made a valid request for Feature Store to update the feature group.</p>
    pub fn set_feature_additions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FeatureDefinition>>,
    ) -> Self {
        self.feature_additions = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateFeatureGroupInput`](crate::operation::update_feature_group::UpdateFeatureGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_feature_group::UpdateFeatureGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_feature_group::UpdateFeatureGroupInput {
                feature_group_name: self.feature_group_name,
                feature_additions: self.feature_additions,
            },
        )
    }
}
