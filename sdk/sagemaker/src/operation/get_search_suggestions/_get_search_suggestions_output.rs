// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSearchSuggestionsOutput {
    /// <p>A list of property names for a <code>Resource</code> that match a <code>SuggestionQuery</code>.</p>
    #[doc(hidden)]
    pub property_name_suggestions:
        std::option::Option<std::vec::Vec<crate::types::PropertyNameSuggestion>>,
    _request_id: Option<String>,
}
impl GetSearchSuggestionsOutput {
    /// <p>A list of property names for a <code>Resource</code> that match a <code>SuggestionQuery</code>.</p>
    pub fn property_name_suggestions(
        &self,
    ) -> std::option::Option<&[crate::types::PropertyNameSuggestion]> {
        self.property_name_suggestions.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSearchSuggestionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSearchSuggestionsOutput {
    /// Creates a new builder-style object to manufacture [`GetSearchSuggestionsOutput`](crate::operation::get_search_suggestions::GetSearchSuggestionsOutput).
    pub fn builder(
    ) -> crate::operation::get_search_suggestions::builders::GetSearchSuggestionsOutputBuilder {
        crate::operation::get_search_suggestions::builders::GetSearchSuggestionsOutputBuilder::default()
    }
}

/// A builder for [`GetSearchSuggestionsOutput`](crate::operation::get_search_suggestions::GetSearchSuggestionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSearchSuggestionsOutputBuilder {
    pub(crate) property_name_suggestions:
        std::option::Option<std::vec::Vec<crate::types::PropertyNameSuggestion>>,
    _request_id: Option<String>,
}
impl GetSearchSuggestionsOutputBuilder {
    /// Appends an item to `property_name_suggestions`.
    ///
    /// To override the contents of this collection use [`set_property_name_suggestions`](Self::set_property_name_suggestions).
    ///
    /// <p>A list of property names for a <code>Resource</code> that match a <code>SuggestionQuery</code>.</p>
    pub fn property_name_suggestions(
        mut self,
        input: crate::types::PropertyNameSuggestion,
    ) -> Self {
        let mut v = self.property_name_suggestions.unwrap_or_default();
        v.push(input);
        self.property_name_suggestions = Some(v);
        self
    }
    /// <p>A list of property names for a <code>Resource</code> that match a <code>SuggestionQuery</code>.</p>
    pub fn set_property_name_suggestions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PropertyNameSuggestion>>,
    ) -> Self {
        self.property_name_suggestions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSearchSuggestionsOutput`](crate::operation::get_search_suggestions::GetSearchSuggestionsOutput).
    pub fn build(self) -> crate::operation::get_search_suggestions::GetSearchSuggestionsOutput {
        crate::operation::get_search_suggestions::GetSearchSuggestionsOutput {
            property_name_suggestions: self.property_name_suggestions,
            _request_id: self._request_id,
        }
    }
}
