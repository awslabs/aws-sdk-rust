// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateNotebookInstanceLifecycleConfigInput {
    /// <p>The name of the lifecycle configuration.</p>
    #[doc(hidden)]
    pub notebook_instance_lifecycle_config_name: std::option::Option<std::string::String>,
    /// <p>A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.</p>
    #[doc(hidden)]
    pub on_create: std::option::Option<std::vec::Vec<crate::types::NotebookInstanceLifecycleHook>>,
    /// <p>A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.</p>
    #[doc(hidden)]
    pub on_start: std::option::Option<std::vec::Vec<crate::types::NotebookInstanceLifecycleHook>>,
}
impl CreateNotebookInstanceLifecycleConfigInput {
    /// <p>The name of the lifecycle configuration.</p>
    pub fn notebook_instance_lifecycle_config_name(&self) -> std::option::Option<&str> {
        self.notebook_instance_lifecycle_config_name.as_deref()
    }
    /// <p>A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn on_create(&self) -> std::option::Option<&[crate::types::NotebookInstanceLifecycleHook]> {
        self.on_create.as_deref()
    }
    /// <p>A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn on_start(&self) -> std::option::Option<&[crate::types::NotebookInstanceLifecycleHook]> {
        self.on_start.as_deref()
    }
}
impl CreateNotebookInstanceLifecycleConfigInput {
    /// Creates a new builder-style object to manufacture [`CreateNotebookInstanceLifecycleConfigInput`](crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigInput).
    pub fn builder() -> crate::operation::create_notebook_instance_lifecycle_config::builders::CreateNotebookInstanceLifecycleConfigInputBuilder{
        crate::operation::create_notebook_instance_lifecycle_config::builders::CreateNotebookInstanceLifecycleConfigInputBuilder::default()
    }
}

/// A builder for [`CreateNotebookInstanceLifecycleConfigInput`](crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateNotebookInstanceLifecycleConfigInputBuilder {
    pub(crate) notebook_instance_lifecycle_config_name: std::option::Option<std::string::String>,
    pub(crate) on_create:
        std::option::Option<std::vec::Vec<crate::types::NotebookInstanceLifecycleHook>>,
    pub(crate) on_start:
        std::option::Option<std::vec::Vec<crate::types::NotebookInstanceLifecycleHook>>,
}
impl CreateNotebookInstanceLifecycleConfigInputBuilder {
    /// <p>The name of the lifecycle configuration.</p>
    pub fn notebook_instance_lifecycle_config_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.notebook_instance_lifecycle_config_name = Some(input.into());
        self
    }
    /// <p>The name of the lifecycle configuration.</p>
    pub fn set_notebook_instance_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notebook_instance_lifecycle_config_name = input;
        self
    }
    /// Appends an item to `on_create`.
    ///
    /// To override the contents of this collection use [`set_on_create`](Self::set_on_create).
    ///
    /// <p>A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn on_create(mut self, input: crate::types::NotebookInstanceLifecycleHook) -> Self {
        let mut v = self.on_create.unwrap_or_default();
        v.push(input);
        self.on_create = Some(v);
        self
    }
    /// <p>A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn set_on_create(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NotebookInstanceLifecycleHook>>,
    ) -> Self {
        self.on_create = input;
        self
    }
    /// Appends an item to `on_start`.
    ///
    /// To override the contents of this collection use [`set_on_start`](Self::set_on_start).
    ///
    /// <p>A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn on_start(mut self, input: crate::types::NotebookInstanceLifecycleHook) -> Self {
        let mut v = self.on_start.unwrap_or_default();
        v.push(input);
        self.on_start = Some(v);
        self
    }
    /// <p>A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn set_on_start(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NotebookInstanceLifecycleHook>>,
    ) -> Self {
        self.on_start = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateNotebookInstanceLifecycleConfigInput`](crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigInput).
    pub fn build(self) -> Result<crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::create_notebook_instance_lifecycle_config::CreateNotebookInstanceLifecycleConfigInput {
                notebook_instance_lifecycle_config_name: self.notebook_instance_lifecycle_config_name
                ,
                on_create: self.on_create
                ,
                on_start: self.on_start
                ,
            }
        )
    }
}
