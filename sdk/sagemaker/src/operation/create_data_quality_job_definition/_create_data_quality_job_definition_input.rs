// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDataQualityJobDefinitionInput {
    /// <p>The name for the monitoring job definition.</p>
    pub job_definition_name: ::std::option::Option<::std::string::String>,
    /// <p>Configures the constraints and baselines for the monitoring job.</p>
    pub data_quality_baseline_config: ::std::option::Option<crate::types::DataQualityBaselineConfig>,
    /// <p>Specifies the container that runs the monitoring job.</p>
    pub data_quality_app_specification: ::std::option::Option<crate::types::DataQualityAppSpecification>,
    /// <p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.</p>
    pub data_quality_job_input: ::std::option::Option<crate::types::DataQualityJobInput>,
    /// <p>The output configuration for monitoring jobs.</p>
    pub data_quality_job_output_config: ::std::option::Option<crate::types::MonitoringOutputConfig>,
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub job_resources: ::std::option::Option<crate::types::MonitoringResources>,
    /// <p>Specifies networking configuration for the monitoring job.</p>
    pub network_config: ::std::option::Option<crate::types::MonitoringNetworkConfig>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub stopping_condition: ::std::option::Option<crate::types::MonitoringStoppingCondition>,
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL"> Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDataQualityJobDefinitionInput {
    /// <p>The name for the monitoring job definition.</p>
    pub fn job_definition_name(&self) -> ::std::option::Option<&str> {
        self.job_definition_name.as_deref()
    }
    /// <p>Configures the constraints and baselines for the monitoring job.</p>
    pub fn data_quality_baseline_config(&self) -> ::std::option::Option<&crate::types::DataQualityBaselineConfig> {
        self.data_quality_baseline_config.as_ref()
    }
    /// <p>Specifies the container that runs the monitoring job.</p>
    pub fn data_quality_app_specification(&self) -> ::std::option::Option<&crate::types::DataQualityAppSpecification> {
        self.data_quality_app_specification.as_ref()
    }
    /// <p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.</p>
    pub fn data_quality_job_input(&self) -> ::std::option::Option<&crate::types::DataQualityJobInput> {
        self.data_quality_job_input.as_ref()
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn data_quality_job_output_config(&self) -> ::std::option::Option<&crate::types::MonitoringOutputConfig> {
        self.data_quality_job_output_config.as_ref()
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn job_resources(&self) -> ::std::option::Option<&crate::types::MonitoringResources> {
        self.job_resources.as_ref()
    }
    /// <p>Specifies networking configuration for the monitoring job.</p>
    pub fn network_config(&self) -> ::std::option::Option<&crate::types::MonitoringNetworkConfig> {
        self.network_config.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn stopping_condition(&self) -> ::std::option::Option<&crate::types::MonitoringStoppingCondition> {
        self.stopping_condition.as_ref()
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL"> Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateDataQualityJobDefinitionInput {
    /// Creates a new builder-style object to manufacture [`CreateDataQualityJobDefinitionInput`](crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionInput).
    pub fn builder() -> crate::operation::create_data_quality_job_definition::builders::CreateDataQualityJobDefinitionInputBuilder {
        crate::operation::create_data_quality_job_definition::builders::CreateDataQualityJobDefinitionInputBuilder::default()
    }
}

/// A builder for [`CreateDataQualityJobDefinitionInput`](crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDataQualityJobDefinitionInputBuilder {
    pub(crate) job_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_quality_baseline_config: ::std::option::Option<crate::types::DataQualityBaselineConfig>,
    pub(crate) data_quality_app_specification: ::std::option::Option<crate::types::DataQualityAppSpecification>,
    pub(crate) data_quality_job_input: ::std::option::Option<crate::types::DataQualityJobInput>,
    pub(crate) data_quality_job_output_config: ::std::option::Option<crate::types::MonitoringOutputConfig>,
    pub(crate) job_resources: ::std::option::Option<crate::types::MonitoringResources>,
    pub(crate) network_config: ::std::option::Option<crate::types::MonitoringNetworkConfig>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) stopping_condition: ::std::option::Option<crate::types::MonitoringStoppingCondition>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDataQualityJobDefinitionInputBuilder {
    /// <p>The name for the monitoring job definition.</p>
    /// This field is required.
    pub fn job_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the monitoring job definition.</p>
    pub fn set_job_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_definition_name = input;
        self
    }
    /// <p>The name for the monitoring job definition.</p>
    pub fn get_job_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_definition_name
    }
    /// <p>Configures the constraints and baselines for the monitoring job.</p>
    pub fn data_quality_baseline_config(mut self, input: crate::types::DataQualityBaselineConfig) -> Self {
        self.data_quality_baseline_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures the constraints and baselines for the monitoring job.</p>
    pub fn set_data_quality_baseline_config(mut self, input: ::std::option::Option<crate::types::DataQualityBaselineConfig>) -> Self {
        self.data_quality_baseline_config = input;
        self
    }
    /// <p>Configures the constraints and baselines for the monitoring job.</p>
    pub fn get_data_quality_baseline_config(&self) -> &::std::option::Option<crate::types::DataQualityBaselineConfig> {
        &self.data_quality_baseline_config
    }
    /// <p>Specifies the container that runs the monitoring job.</p>
    /// This field is required.
    pub fn data_quality_app_specification(mut self, input: crate::types::DataQualityAppSpecification) -> Self {
        self.data_quality_app_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the container that runs the monitoring job.</p>
    pub fn set_data_quality_app_specification(mut self, input: ::std::option::Option<crate::types::DataQualityAppSpecification>) -> Self {
        self.data_quality_app_specification = input;
        self
    }
    /// <p>Specifies the container that runs the monitoring job.</p>
    pub fn get_data_quality_app_specification(&self) -> &::std::option::Option<crate::types::DataQualityAppSpecification> {
        &self.data_quality_app_specification
    }
    /// <p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.</p>
    /// This field is required.
    pub fn data_quality_job_input(mut self, input: crate::types::DataQualityJobInput) -> Self {
        self.data_quality_job_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.</p>
    pub fn set_data_quality_job_input(mut self, input: ::std::option::Option<crate::types::DataQualityJobInput>) -> Self {
        self.data_quality_job_input = input;
        self
    }
    /// <p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.</p>
    pub fn get_data_quality_job_input(&self) -> &::std::option::Option<crate::types::DataQualityJobInput> {
        &self.data_quality_job_input
    }
    /// <p>The output configuration for monitoring jobs.</p>
    /// This field is required.
    pub fn data_quality_job_output_config(mut self, input: crate::types::MonitoringOutputConfig) -> Self {
        self.data_quality_job_output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn set_data_quality_job_output_config(mut self, input: ::std::option::Option<crate::types::MonitoringOutputConfig>) -> Self {
        self.data_quality_job_output_config = input;
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn get_data_quality_job_output_config(&self) -> &::std::option::Option<crate::types::MonitoringOutputConfig> {
        &self.data_quality_job_output_config
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    /// This field is required.
    pub fn job_resources(mut self, input: crate::types::MonitoringResources) -> Self {
        self.job_resources = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn set_job_resources(mut self, input: ::std::option::Option<crate::types::MonitoringResources>) -> Self {
        self.job_resources = input;
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn get_job_resources(&self) -> &::std::option::Option<crate::types::MonitoringResources> {
        &self.job_resources
    }
    /// <p>Specifies networking configuration for the monitoring job.</p>
    pub fn network_config(mut self, input: crate::types::MonitoringNetworkConfig) -> Self {
        self.network_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies networking configuration for the monitoring job.</p>
    pub fn set_network_config(mut self, input: ::std::option::Option<crate::types::MonitoringNetworkConfig>) -> Self {
        self.network_config = input;
        self
    }
    /// <p>Specifies networking configuration for the monitoring job.</p>
    pub fn get_network_config(&self) -> &::std::option::Option<crate::types::MonitoringNetworkConfig> {
        &self.network_config
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn stopping_condition(mut self, input: crate::types::MonitoringStoppingCondition) -> Self {
        self.stopping_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn set_stopping_condition(mut self, input: ::std::option::Option<crate::types::MonitoringStoppingCondition>) -> Self {
        self.stopping_condition = input;
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn get_stopping_condition(&self) -> &::std::option::Option<crate::types::MonitoringStoppingCondition> {
        &self.stopping_condition
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL"> Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL"> Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL"> Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDataQualityJobDefinitionInput`](crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_data_quality_job_definition::CreateDataQualityJobDefinitionInput {
                job_definition_name: self.job_definition_name,
                data_quality_baseline_config: self.data_quality_baseline_config,
                data_quality_app_specification: self.data_quality_app_specification,
                data_quality_job_input: self.data_quality_job_input,
                data_quality_job_output_config: self.data_quality_job_output_config,
                job_resources: self.job_resources,
                network_config: self.network_config,
                role_arn: self.role_arn,
                stopping_condition: self.stopping_condition,
                tags: self.tags,
            },
        )
    }
}
