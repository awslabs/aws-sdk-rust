// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateInferenceExperimentInput {
    /// <p>The name of the inference experiment to be updated.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The duration for which the inference experiment will run. If the status of the inference experiment is <code>Created</code>, then you can update both the start and end dates. If the status of the inference experiment is <code>Running</code>, then you can update only the end date. </p>
    #[doc(hidden)]
    pub schedule: std::option::Option<crate::types::InferenceExperimentSchedule>,
    /// <p>The description of the inference experiment.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant, whose infrastructure configuration you want to update. </p>
    #[doc(hidden)]
    pub model_variants: std::option::Option<std::vec::Vec<crate::types::ModelVariantConfig>>,
    /// <p>The Amazon S3 location and configuration for storing inference request and response data.</p>
    #[doc(hidden)]
    pub data_storage_config:
        std::option::Option<crate::types::InferenceExperimentDataStorageConfig>,
    /// <p> The configuration of <code>ShadowMode</code> inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates. </p>
    #[doc(hidden)]
    pub shadow_mode_config: std::option::Option<crate::types::ShadowModeConfig>,
}
impl UpdateInferenceExperimentInput {
    /// <p>The name of the inference experiment to be updated.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The duration for which the inference experiment will run. If the status of the inference experiment is <code>Created</code>, then you can update both the start and end dates. If the status of the inference experiment is <code>Running</code>, then you can update only the end date. </p>
    pub fn schedule(&self) -> std::option::Option<&crate::types::InferenceExperimentSchedule> {
        self.schedule.as_ref()
    }
    /// <p>The description of the inference experiment.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant, whose infrastructure configuration you want to update. </p>
    pub fn model_variants(&self) -> std::option::Option<&[crate::types::ModelVariantConfig]> {
        self.model_variants.as_deref()
    }
    /// <p>The Amazon S3 location and configuration for storing inference request and response data.</p>
    pub fn data_storage_config(
        &self,
    ) -> std::option::Option<&crate::types::InferenceExperimentDataStorageConfig> {
        self.data_storage_config.as_ref()
    }
    /// <p> The configuration of <code>ShadowMode</code> inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates. </p>
    pub fn shadow_mode_config(&self) -> std::option::Option<&crate::types::ShadowModeConfig> {
        self.shadow_mode_config.as_ref()
    }
}
impl UpdateInferenceExperimentInput {
    /// Creates a new builder-style object to manufacture [`UpdateInferenceExperimentInput`](crate::operation::update_inference_experiment::UpdateInferenceExperimentInput).
    pub fn builder() -> crate::operation::update_inference_experiment::builders::UpdateInferenceExperimentInputBuilder{
        crate::operation::update_inference_experiment::builders::UpdateInferenceExperimentInputBuilder::default()
    }
}

/// A builder for [`UpdateInferenceExperimentInput`](crate::operation::update_inference_experiment::UpdateInferenceExperimentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateInferenceExperimentInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) schedule: std::option::Option<crate::types::InferenceExperimentSchedule>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) model_variants: std::option::Option<std::vec::Vec<crate::types::ModelVariantConfig>>,
    pub(crate) data_storage_config:
        std::option::Option<crate::types::InferenceExperimentDataStorageConfig>,
    pub(crate) shadow_mode_config: std::option::Option<crate::types::ShadowModeConfig>,
}
impl UpdateInferenceExperimentInputBuilder {
    /// <p>The name of the inference experiment to be updated.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the inference experiment to be updated.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The duration for which the inference experiment will run. If the status of the inference experiment is <code>Created</code>, then you can update both the start and end dates. If the status of the inference experiment is <code>Running</code>, then you can update only the end date. </p>
    pub fn schedule(mut self, input: crate::types::InferenceExperimentSchedule) -> Self {
        self.schedule = Some(input);
        self
    }
    /// <p> The duration for which the inference experiment will run. If the status of the inference experiment is <code>Created</code>, then you can update both the start and end dates. If the status of the inference experiment is <code>Running</code>, then you can update only the end date. </p>
    pub fn set_schedule(
        mut self,
        input: std::option::Option<crate::types::InferenceExperimentSchedule>,
    ) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The description of the inference experiment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the inference experiment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `model_variants`.
    ///
    /// To override the contents of this collection use [`set_model_variants`](Self::set_model_variants).
    ///
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant, whose infrastructure configuration you want to update. </p>
    pub fn model_variants(mut self, input: crate::types::ModelVariantConfig) -> Self {
        let mut v = self.model_variants.unwrap_or_default();
        v.push(input);
        self.model_variants = Some(v);
        self
    }
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant, whose infrastructure configuration you want to update. </p>
    pub fn set_model_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ModelVariantConfig>>,
    ) -> Self {
        self.model_variants = input;
        self
    }
    /// <p>The Amazon S3 location and configuration for storing inference request and response data.</p>
    pub fn data_storage_config(
        mut self,
        input: crate::types::InferenceExperimentDataStorageConfig,
    ) -> Self {
        self.data_storage_config = Some(input);
        self
    }
    /// <p>The Amazon S3 location and configuration for storing inference request and response data.</p>
    pub fn set_data_storage_config(
        mut self,
        input: std::option::Option<crate::types::InferenceExperimentDataStorageConfig>,
    ) -> Self {
        self.data_storage_config = input;
        self
    }
    /// <p> The configuration of <code>ShadowMode</code> inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates. </p>
    pub fn shadow_mode_config(mut self, input: crate::types::ShadowModeConfig) -> Self {
        self.shadow_mode_config = Some(input);
        self
    }
    /// <p> The configuration of <code>ShadowMode</code> inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates. </p>
    pub fn set_shadow_mode_config(
        mut self,
        input: std::option::Option<crate::types::ShadowModeConfig>,
    ) -> Self {
        self.shadow_mode_config = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateInferenceExperimentInput`](crate::operation::update_inference_experiment::UpdateInferenceExperimentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_inference_experiment::UpdateInferenceExperimentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_inference_experiment::UpdateInferenceExperimentInput {
                name: self.name,
                schedule: self.schedule,
                description: self.description,
                model_variants: self.model_variants,
                data_storage_config: self.data_storage_config,
                shadow_mode_config: self.shadow_mode_config,
            },
        )
    }
}
