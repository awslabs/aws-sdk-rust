// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPipelineParametersForExecutionOutput {
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    #[doc(hidden)]
    pub pipeline_parameters: std::option::Option<std::vec::Vec<crate::types::Parameter>>,
    /// <p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPipelineParametersForExecutionOutput {
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    pub fn pipeline_parameters(&self) -> std::option::Option<&[crate::types::Parameter]> {
        self.pipeline_parameters.as_deref()
    }
    /// <p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPipelineParametersForExecutionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPipelineParametersForExecutionOutput {
    /// Creates a new builder-style object to manufacture [`ListPipelineParametersForExecutionOutput`](crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionOutput).
    pub fn builder() -> crate::operation::list_pipeline_parameters_for_execution::builders::ListPipelineParametersForExecutionOutputBuilder{
        crate::operation::list_pipeline_parameters_for_execution::builders::ListPipelineParametersForExecutionOutputBuilder::default()
    }
}

/// A builder for [`ListPipelineParametersForExecutionOutput`](crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListPipelineParametersForExecutionOutputBuilder {
    pub(crate) pipeline_parameters: std::option::Option<std::vec::Vec<crate::types::Parameter>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPipelineParametersForExecutionOutputBuilder {
    /// Appends an item to `pipeline_parameters`.
    ///
    /// To override the contents of this collection use [`set_pipeline_parameters`](Self::set_pipeline_parameters).
    ///
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    pub fn pipeline_parameters(mut self, input: crate::types::Parameter) -> Self {
        let mut v = self.pipeline_parameters.unwrap_or_default();
        v.push(input);
        self.pipeline_parameters = Some(v);
        self
    }
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    pub fn set_pipeline_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Parameter>>,
    ) -> Self {
        self.pipeline_parameters = input;
        self
    }
    /// <p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPipelineParametersForExecutionOutput`](crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionOutput).
    pub fn build(self) -> crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionOutput{
        crate::operation::list_pipeline_parameters_for_execution::ListPipelineParametersForExecutionOutput {
            pipeline_parameters: self.pipeline_parameters
            ,
            next_token: self.next_token
            ,
            _request_id: self._request_id,
        }
    }
}
