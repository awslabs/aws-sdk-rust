// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDeviceFleetInput {
    /// <p>The name of the fleet that the device belongs to.</p>
    #[doc(hidden)]
    pub device_fleet_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>A description of the fleet.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    #[doc(hidden)]
    pub output_config: std::option::Option<crate::types::EdgeOutputConfig>,
    /// <p>Creates tags for the specified fleet.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    #[doc(hidden)]
    pub enable_iot_role_alias: std::option::Option<bool>,
}
impl CreateDeviceFleetInput {
    /// <p>The name of the fleet that the device belongs to.</p>
    pub fn device_fleet_name(&self) -> std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A description of the fleet.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    pub fn output_config(&self) -> std::option::Option<&crate::types::EdgeOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>Creates tags for the specified fleet.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn enable_iot_role_alias(&self) -> std::option::Option<bool> {
        self.enable_iot_role_alias
    }
}
impl CreateDeviceFleetInput {
    /// Creates a new builder-style object to manufacture [`CreateDeviceFleetInput`](crate::operation::create_device_fleet::CreateDeviceFleetInput).
    pub fn builder(
    ) -> crate::operation::create_device_fleet::builders::CreateDeviceFleetInputBuilder {
        crate::operation::create_device_fleet::builders::CreateDeviceFleetInputBuilder::default()
    }
}

/// A builder for [`CreateDeviceFleetInput`](crate::operation::create_device_fleet::CreateDeviceFleetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDeviceFleetInputBuilder {
    pub(crate) device_fleet_name: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) output_config: std::option::Option<crate::types::EdgeOutputConfig>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) enable_iot_role_alias: std::option::Option<bool>,
}
impl CreateDeviceFleetInputBuilder {
    /// <p>The name of the fleet that the device belongs to.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_fleet_name = Some(input.into());
        self
    }
    /// <p>The name of the fleet that the device belongs to.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>A description of the fleet.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the fleet.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    pub fn output_config(mut self, input: crate::types::EdgeOutputConfig) -> Self {
        self.output_config = Some(input);
        self
    }
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::types::EdgeOutputConfig>,
    ) -> Self {
        self.output_config = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Creates tags for the specified fleet.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Creates tags for the specified fleet.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn enable_iot_role_alias(mut self, input: bool) -> Self {
        self.enable_iot_role_alias = Some(input);
        self
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn set_enable_iot_role_alias(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_iot_role_alias = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDeviceFleetInput`](crate::operation::create_device_fleet::CreateDeviceFleetInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_device_fleet::CreateDeviceFleetInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_device_fleet::CreateDeviceFleetInput {
                device_fleet_name: self.device_fleet_name,
                role_arn: self.role_arn,
                description: self.description,
                output_config: self.output_config,
                tags: self.tags,
                enable_iot_role_alias: self.enable_iot_role_alias,
            },
        )
    }
}
