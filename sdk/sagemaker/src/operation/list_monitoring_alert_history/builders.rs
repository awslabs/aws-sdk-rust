// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_monitoring_alert_history::_list_monitoring_alert_history_output::ListMonitoringAlertHistoryOutputBuilder;

pub use crate::operation::list_monitoring_alert_history::_list_monitoring_alert_history_input::ListMonitoringAlertHistoryInputBuilder;

/// Fluent builder constructing a request to `ListMonitoringAlertHistory`.
///
/// <p>Gets a list of past alerts in a model monitoring schedule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListMonitoringAlertHistoryFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_monitoring_alert_history::builders::ListMonitoringAlertHistoryInputBuilder
            }
impl ListMonitoringAlertHistoryFluentBuilder {
    /// Creates a new `ListMonitoringAlertHistory`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistory,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistoryError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistoryOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_monitoring_alert_history::ListMonitoringAlertHistoryError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_monitoring_alert_history::paginator::ListMonitoringAlertHistoryPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_monitoring_alert_history::paginator::ListMonitoringAlertHistoryPaginator{
        crate::operation::list_monitoring_alert_history::paginator::ListMonitoringAlertHistoryPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn monitoring_alert_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_alert_name(input.into());
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn set_monitoring_alert_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_alert_name(input);
        self
    }
    /// <p>The field used to sort results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::types::MonitoringAlertHistorySortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field used to sort results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::MonitoringAlertHistorySortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order, whether <code>Ascending</code> or <code>Descending</code>, of the alert history. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order, whether <code>Ascending</code> or <code>Descending</code>, of the alert history. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of the previous <code>ListMonitoringAlertHistory</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of alerts in the history, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListMonitoringAlertHistory</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of alerts in the history, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to display. The default is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to display. The default is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A filter that returns only alerts created on or before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only alerts created on or before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only alerts created on or after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only alerts created on or after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that retrieves only alerts with a specific status.</p>
    pub fn status_equals(mut self, input: crate::types::MonitoringAlertStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that retrieves only alerts with a specific status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::types::MonitoringAlertStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
}
