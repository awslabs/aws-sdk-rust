// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_pipeline::_create_pipeline_output::CreatePipelineOutputBuilder;

pub use crate::operation::create_pipeline::_create_pipeline_input::CreatePipelineInputBuilder;

/// Fluent builder constructing a request to `CreatePipeline`.
///
/// <p>Creates a pipeline using a JSON pipeline definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePipelineFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_pipeline::builders::CreatePipelineInputBuilder,
}
impl CreatePipelineFluentBuilder {
    /// Creates a new `CreatePipeline`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_pipeline::CreatePipeline,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_pipeline::CreatePipelineError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_pipeline::CreatePipelineOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_pipeline::CreatePipelineError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the pipeline.</p>
    pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p>The name of the pipeline.</p>
    pub fn set_pipeline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
    /// <p>The display name of the pipeline.</p>
    pub fn pipeline_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_display_name(input.into());
        self
    }
    /// <p>The display name of the pipeline.</p>
    pub fn set_pipeline_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_display_name(input);
        self
    }
    /// <p>The JSON pipeline definition of the pipeline.</p>
    pub fn pipeline_definition(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_definition(input.into());
        self
    }
    /// <p>The JSON pipeline definition of the pipeline.</p>
    pub fn set_pipeline_definition(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_definition(input);
        self
    }
    /// <p>The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.</p>
    pub fn pipeline_definition_s3_location(
        mut self,
        input: crate::types::PipelineDefinitionS3Location,
    ) -> Self {
        self.inner = self.inner.pipeline_definition_s3_location(input);
        self
    }
    /// <p>The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.</p>
    pub fn set_pipeline_definition_s3_location(
        mut self,
        input: std::option::Option<crate::types::PipelineDefinitionS3Location>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_definition_s3_location(input);
        self
    }
    /// <p>A description of the pipeline.</p>
    pub fn pipeline_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_description(input.into());
        self
    }
    /// <p>A description of the pipeline.</p>
    pub fn set_pipeline_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_description(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the created pipeline.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to apply to the created pipeline.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default.</p>
    pub fn parallelism_configuration(
        mut self,
        input: crate::types::ParallelismConfiguration,
    ) -> Self {
        self.inner = self.inner.parallelism_configuration(input);
        self
    }
    /// <p>This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default.</p>
    pub fn set_parallelism_configuration(
        mut self,
        input: std::option::Option<crate::types::ParallelismConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_parallelism_configuration(input);
        self
    }
}
