// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteModelCardInput {
    /// <p>The name of the model card to delete.</p>
    #[doc(hidden)]
    pub model_card_name: std::option::Option<std::string::String>,
}
impl DeleteModelCardInput {
    /// <p>The name of the model card to delete.</p>
    pub fn model_card_name(&self) -> std::option::Option<&str> {
        self.model_card_name.as_deref()
    }
}
impl DeleteModelCardInput {
    /// Creates a new builder-style object to manufacture [`DeleteModelCardInput`](crate::operation::delete_model_card::DeleteModelCardInput).
    pub fn builder() -> crate::operation::delete_model_card::builders::DeleteModelCardInputBuilder {
        crate::operation::delete_model_card::builders::DeleteModelCardInputBuilder::default()
    }
}

/// A builder for [`DeleteModelCardInput`](crate::operation::delete_model_card::DeleteModelCardInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteModelCardInputBuilder {
    pub(crate) model_card_name: std::option::Option<std::string::String>,
}
impl DeleteModelCardInputBuilder {
    /// <p>The name of the model card to delete.</p>
    pub fn model_card_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_card_name = Some(input.into());
        self
    }
    /// <p>The name of the model card to delete.</p>
    pub fn set_model_card_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_card_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteModelCardInput`](crate::operation::delete_model_card::DeleteModelCardInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_model_card::DeleteModelCardInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_model_card::DeleteModelCardInput {
            model_card_name: self.model_card_name,
        })
    }
}
