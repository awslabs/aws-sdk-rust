// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEndpointOutput {
    /// <p>Name of the endpoint.</p>
    #[doc(hidden)]
    pub endpoint_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the endpoint.</p>
    #[doc(hidden)]
    pub endpoint_arn: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint configuration associated with this endpoint.</p>
    #[doc(hidden)]
    pub endpoint_config_name: std::option::Option<std::string::String>,
    /// <p>An array of <code>ProductionVariantSummary</code> objects, one for each model hosted behind this endpoint.</p>
    #[doc(hidden)]
    pub production_variants:
        std::option::Option<std::vec::Vec<crate::types::ProductionVariantSummary>>,
    /// <p>The currently active data capture configuration used by your Endpoint.</p>
    #[doc(hidden)]
    pub data_capture_config: std::option::Option<crate::types::DataCaptureConfigSummary>,
    /// <p>The status of the endpoint.</p>
    /// <ul>
    /// <li> <p> <code>OutOfService</code>: Endpoint is not available to take incoming requests.</p> </li>
    /// <li> <p> <code>Creating</code>: <code>CreateEndpoint</code> is executing.</p> </li>
    /// <li> <p> <code>Updating</code>: <code>UpdateEndpoint</code> or <code>UpdateEndpointWeightsAndCapacities</code> is executing.</p> </li>
    /// <li> <p> <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.</p> </li>
    /// <li> <p> <code>RollingBack</code>: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an <code>InService</code> status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an <code>UpdateEndpointWeightsAndCapacities</code> call or when the <code>UpdateEndpointWeightsAndCapacities</code> operation is called explicitly.</p> </li>
    /// <li> <p> <code>InService</code>: Endpoint is available to process incoming requests.</p> </li>
    /// <li> <p> <code>Deleting</code>: <code>DeleteEndpoint</code> is executing.</p> </li>
    /// <li> <p> <code>Failed</code>: Endpoint could not be created, updated, or re-scaled. Use <code>DescribeEndpointOutput$FailureReason</code> for information about the failure. <code>DeleteEndpoint</code> is the only operation that can be performed on a failed endpoint.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub endpoint_status: std::option::Option<crate::types::EndpointStatus>,
    /// <p>If the status of the endpoint is <code>Failed</code>, the reason why it failed. </p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>A timestamp that shows when the endpoint was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A timestamp that shows when the endpoint was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The most recent deployment configuration for the endpoint.</p>
    #[doc(hidden)]
    pub last_deployment_config: std::option::Option<crate::types::DeploymentConfig>,
    /// <p>Returns the description of an endpoint configuration created using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html"> <code>CreateEndpointConfig</code> </a> API.</p>
    #[doc(hidden)]
    pub async_inference_config: std::option::Option<crate::types::AsyncInferenceConfig>,
    /// <p>Returns the summary of an in-progress deployment. This field is only returned when the endpoint is creating or updating with a new endpoint configuration.</p>
    #[doc(hidden)]
    pub pending_deployment_summary: std::option::Option<crate::types::PendingDeploymentSummary>,
    /// <p>The configuration parameters for an explainer.</p>
    #[doc(hidden)]
    pub explainer_config: std::option::Option<crate::types::ExplainerConfig>,
    /// <p>An array of <code>ProductionVariantSummary</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>.</p>
    #[doc(hidden)]
    pub shadow_production_variants:
        std::option::Option<std::vec::Vec<crate::types::ProductionVariantSummary>>,
    _request_id: Option<String>,
}
impl DescribeEndpointOutput {
    /// <p>Name of the endpoint.</p>
    pub fn endpoint_name(&self) -> std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint.</p>
    pub fn endpoint_arn(&self) -> std::option::Option<&str> {
        self.endpoint_arn.as_deref()
    }
    /// <p>The name of the endpoint configuration associated with this endpoint.</p>
    pub fn endpoint_config_name(&self) -> std::option::Option<&str> {
        self.endpoint_config_name.as_deref()
    }
    /// <p>An array of <code>ProductionVariantSummary</code> objects, one for each model hosted behind this endpoint.</p>
    pub fn production_variants(
        &self,
    ) -> std::option::Option<&[crate::types::ProductionVariantSummary]> {
        self.production_variants.as_deref()
    }
    /// <p>The currently active data capture configuration used by your Endpoint.</p>
    pub fn data_capture_config(
        &self,
    ) -> std::option::Option<&crate::types::DataCaptureConfigSummary> {
        self.data_capture_config.as_ref()
    }
    /// <p>The status of the endpoint.</p>
    /// <ul>
    /// <li> <p> <code>OutOfService</code>: Endpoint is not available to take incoming requests.</p> </li>
    /// <li> <p> <code>Creating</code>: <code>CreateEndpoint</code> is executing.</p> </li>
    /// <li> <p> <code>Updating</code>: <code>UpdateEndpoint</code> or <code>UpdateEndpointWeightsAndCapacities</code> is executing.</p> </li>
    /// <li> <p> <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.</p> </li>
    /// <li> <p> <code>RollingBack</code>: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an <code>InService</code> status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an <code>UpdateEndpointWeightsAndCapacities</code> call or when the <code>UpdateEndpointWeightsAndCapacities</code> operation is called explicitly.</p> </li>
    /// <li> <p> <code>InService</code>: Endpoint is available to process incoming requests.</p> </li>
    /// <li> <p> <code>Deleting</code>: <code>DeleteEndpoint</code> is executing.</p> </li>
    /// <li> <p> <code>Failed</code>: Endpoint could not be created, updated, or re-scaled. Use <code>DescribeEndpointOutput$FailureReason</code> for information about the failure. <code>DeleteEndpoint</code> is the only operation that can be performed on a failed endpoint.</p> </li>
    /// </ul>
    pub fn endpoint_status(&self) -> std::option::Option<&crate::types::EndpointStatus> {
        self.endpoint_status.as_ref()
    }
    /// <p>If the status of the endpoint is <code>Failed</code>, the reason why it failed. </p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>A timestamp that shows when the endpoint was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>A timestamp that shows when the endpoint was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The most recent deployment configuration for the endpoint.</p>
    pub fn last_deployment_config(&self) -> std::option::Option<&crate::types::DeploymentConfig> {
        self.last_deployment_config.as_ref()
    }
    /// <p>Returns the description of an endpoint configuration created using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html"> <code>CreateEndpointConfig</code> </a> API.</p>
    pub fn async_inference_config(
        &self,
    ) -> std::option::Option<&crate::types::AsyncInferenceConfig> {
        self.async_inference_config.as_ref()
    }
    /// <p>Returns the summary of an in-progress deployment. This field is only returned when the endpoint is creating or updating with a new endpoint configuration.</p>
    pub fn pending_deployment_summary(
        &self,
    ) -> std::option::Option<&crate::types::PendingDeploymentSummary> {
        self.pending_deployment_summary.as_ref()
    }
    /// <p>The configuration parameters for an explainer.</p>
    pub fn explainer_config(&self) -> std::option::Option<&crate::types::ExplainerConfig> {
        self.explainer_config.as_ref()
    }
    /// <p>An array of <code>ProductionVariantSummary</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>.</p>
    pub fn shadow_production_variants(
        &self,
    ) -> std::option::Option<&[crate::types::ProductionVariantSummary]> {
        self.shadow_production_variants.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointOutput`](crate::operation::describe_endpoint::DescribeEndpointOutput).
    pub fn builder() -> crate::operation::describe_endpoint::builders::DescribeEndpointOutputBuilder
    {
        crate::operation::describe_endpoint::builders::DescribeEndpointOutputBuilder::default()
    }
}

/// A builder for [`DescribeEndpointOutput`](crate::operation::describe_endpoint::DescribeEndpointOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEndpointOutputBuilder {
    pub(crate) endpoint_name: std::option::Option<std::string::String>,
    pub(crate) endpoint_arn: std::option::Option<std::string::String>,
    pub(crate) endpoint_config_name: std::option::Option<std::string::String>,
    pub(crate) production_variants:
        std::option::Option<std::vec::Vec<crate::types::ProductionVariantSummary>>,
    pub(crate) data_capture_config: std::option::Option<crate::types::DataCaptureConfigSummary>,
    pub(crate) endpoint_status: std::option::Option<crate::types::EndpointStatus>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_deployment_config: std::option::Option<crate::types::DeploymentConfig>,
    pub(crate) async_inference_config: std::option::Option<crate::types::AsyncInferenceConfig>,
    pub(crate) pending_deployment_summary:
        std::option::Option<crate::types::PendingDeploymentSummary>,
    pub(crate) explainer_config: std::option::Option<crate::types::ExplainerConfig>,
    pub(crate) shadow_production_variants:
        std::option::Option<std::vec::Vec<crate::types::ProductionVariantSummary>>,
    _request_id: Option<String>,
}
impl DescribeEndpointOutputBuilder {
    /// <p>Name of the endpoint.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_name = Some(input.into());
        self
    }
    /// <p>Name of the endpoint.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint.</p>
    pub fn endpoint_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint.</p>
    pub fn set_endpoint_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_arn = input;
        self
    }
    /// <p>The name of the endpoint configuration associated with this endpoint.</p>
    pub fn endpoint_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_config_name = Some(input.into());
        self
    }
    /// <p>The name of the endpoint configuration associated with this endpoint.</p>
    pub fn set_endpoint_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.endpoint_config_name = input;
        self
    }
    /// Appends an item to `production_variants`.
    ///
    /// To override the contents of this collection use [`set_production_variants`](Self::set_production_variants).
    ///
    /// <p>An array of <code>ProductionVariantSummary</code> objects, one for each model hosted behind this endpoint.</p>
    pub fn production_variants(mut self, input: crate::types::ProductionVariantSummary) -> Self {
        let mut v = self.production_variants.unwrap_or_default();
        v.push(input);
        self.production_variants = Some(v);
        self
    }
    /// <p>An array of <code>ProductionVariantSummary</code> objects, one for each model hosted behind this endpoint.</p>
    pub fn set_production_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProductionVariantSummary>>,
    ) -> Self {
        self.production_variants = input;
        self
    }
    /// <p>The currently active data capture configuration used by your Endpoint.</p>
    pub fn data_capture_config(mut self, input: crate::types::DataCaptureConfigSummary) -> Self {
        self.data_capture_config = Some(input);
        self
    }
    /// <p>The currently active data capture configuration used by your Endpoint.</p>
    pub fn set_data_capture_config(
        mut self,
        input: std::option::Option<crate::types::DataCaptureConfigSummary>,
    ) -> Self {
        self.data_capture_config = input;
        self
    }
    /// <p>The status of the endpoint.</p>
    /// <ul>
    /// <li> <p> <code>OutOfService</code>: Endpoint is not available to take incoming requests.</p> </li>
    /// <li> <p> <code>Creating</code>: <code>CreateEndpoint</code> is executing.</p> </li>
    /// <li> <p> <code>Updating</code>: <code>UpdateEndpoint</code> or <code>UpdateEndpointWeightsAndCapacities</code> is executing.</p> </li>
    /// <li> <p> <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.</p> </li>
    /// <li> <p> <code>RollingBack</code>: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an <code>InService</code> status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an <code>UpdateEndpointWeightsAndCapacities</code> call or when the <code>UpdateEndpointWeightsAndCapacities</code> operation is called explicitly.</p> </li>
    /// <li> <p> <code>InService</code>: Endpoint is available to process incoming requests.</p> </li>
    /// <li> <p> <code>Deleting</code>: <code>DeleteEndpoint</code> is executing.</p> </li>
    /// <li> <p> <code>Failed</code>: Endpoint could not be created, updated, or re-scaled. Use <code>DescribeEndpointOutput$FailureReason</code> for information about the failure. <code>DeleteEndpoint</code> is the only operation that can be performed on a failed endpoint.</p> </li>
    /// </ul>
    pub fn endpoint_status(mut self, input: crate::types::EndpointStatus) -> Self {
        self.endpoint_status = Some(input);
        self
    }
    /// <p>The status of the endpoint.</p>
    /// <ul>
    /// <li> <p> <code>OutOfService</code>: Endpoint is not available to take incoming requests.</p> </li>
    /// <li> <p> <code>Creating</code>: <code>CreateEndpoint</code> is executing.</p> </li>
    /// <li> <p> <code>Updating</code>: <code>UpdateEndpoint</code> or <code>UpdateEndpointWeightsAndCapacities</code> is executing.</p> </li>
    /// <li> <p> <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.</p> </li>
    /// <li> <p> <code>RollingBack</code>: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an <code>InService</code> status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an <code>UpdateEndpointWeightsAndCapacities</code> call or when the <code>UpdateEndpointWeightsAndCapacities</code> operation is called explicitly.</p> </li>
    /// <li> <p> <code>InService</code>: Endpoint is available to process incoming requests.</p> </li>
    /// <li> <p> <code>Deleting</code>: <code>DeleteEndpoint</code> is executing.</p> </li>
    /// <li> <p> <code>Failed</code>: Endpoint could not be created, updated, or re-scaled. Use <code>DescribeEndpointOutput$FailureReason</code> for information about the failure. <code>DeleteEndpoint</code> is the only operation that can be performed on a failed endpoint.</p> </li>
    /// </ul>
    pub fn set_endpoint_status(
        mut self,
        input: std::option::Option<crate::types::EndpointStatus>,
    ) -> Self {
        self.endpoint_status = input;
        self
    }
    /// <p>If the status of the endpoint is <code>Failed</code>, the reason why it failed. </p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>If the status of the endpoint is <code>Failed</code>, the reason why it failed. </p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>A timestamp that shows when the endpoint was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>A timestamp that shows when the endpoint was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A timestamp that shows when the endpoint was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>A timestamp that shows when the endpoint was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The most recent deployment configuration for the endpoint.</p>
    pub fn last_deployment_config(mut self, input: crate::types::DeploymentConfig) -> Self {
        self.last_deployment_config = Some(input);
        self
    }
    /// <p>The most recent deployment configuration for the endpoint.</p>
    pub fn set_last_deployment_config(
        mut self,
        input: std::option::Option<crate::types::DeploymentConfig>,
    ) -> Self {
        self.last_deployment_config = input;
        self
    }
    /// <p>Returns the description of an endpoint configuration created using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html"> <code>CreateEndpointConfig</code> </a> API.</p>
    pub fn async_inference_config(mut self, input: crate::types::AsyncInferenceConfig) -> Self {
        self.async_inference_config = Some(input);
        self
    }
    /// <p>Returns the description of an endpoint configuration created using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html"> <code>CreateEndpointConfig</code> </a> API.</p>
    pub fn set_async_inference_config(
        mut self,
        input: std::option::Option<crate::types::AsyncInferenceConfig>,
    ) -> Self {
        self.async_inference_config = input;
        self
    }
    /// <p>Returns the summary of an in-progress deployment. This field is only returned when the endpoint is creating or updating with a new endpoint configuration.</p>
    pub fn pending_deployment_summary(
        mut self,
        input: crate::types::PendingDeploymentSummary,
    ) -> Self {
        self.pending_deployment_summary = Some(input);
        self
    }
    /// <p>Returns the summary of an in-progress deployment. This field is only returned when the endpoint is creating or updating with a new endpoint configuration.</p>
    pub fn set_pending_deployment_summary(
        mut self,
        input: std::option::Option<crate::types::PendingDeploymentSummary>,
    ) -> Self {
        self.pending_deployment_summary = input;
        self
    }
    /// <p>The configuration parameters for an explainer.</p>
    pub fn explainer_config(mut self, input: crate::types::ExplainerConfig) -> Self {
        self.explainer_config = Some(input);
        self
    }
    /// <p>The configuration parameters for an explainer.</p>
    pub fn set_explainer_config(
        mut self,
        input: std::option::Option<crate::types::ExplainerConfig>,
    ) -> Self {
        self.explainer_config = input;
        self
    }
    /// Appends an item to `shadow_production_variants`.
    ///
    /// To override the contents of this collection use [`set_shadow_production_variants`](Self::set_shadow_production_variants).
    ///
    /// <p>An array of <code>ProductionVariantSummary</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>.</p>
    pub fn shadow_production_variants(
        mut self,
        input: crate::types::ProductionVariantSummary,
    ) -> Self {
        let mut v = self.shadow_production_variants.unwrap_or_default();
        v.push(input);
        self.shadow_production_variants = Some(v);
        self
    }
    /// <p>An array of <code>ProductionVariantSummary</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>.</p>
    pub fn set_shadow_production_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProductionVariantSummary>>,
    ) -> Self {
        self.shadow_production_variants = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEndpointOutput`](crate::operation::describe_endpoint::DescribeEndpointOutput).
    pub fn build(self) -> crate::operation::describe_endpoint::DescribeEndpointOutput {
        crate::operation::describe_endpoint::DescribeEndpointOutput {
            endpoint_name: self.endpoint_name,
            endpoint_arn: self.endpoint_arn,
            endpoint_config_name: self.endpoint_config_name,
            production_variants: self.production_variants,
            data_capture_config: self.data_capture_config,
            endpoint_status: self.endpoint_status,
            failure_reason: self.failure_reason,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            last_deployment_config: self.last_deployment_config,
            async_inference_config: self.async_inference_config,
            pending_deployment_summary: self.pending_deployment_summary,
            explainer_config: self.explainer_config,
            shadow_production_variants: self.shadow_production_variants,
            _request_id: self._request_id,
        }
    }
}
