// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListInferenceRecommendationsJobStepsInput {
    /// <p>The name for the Inference Recommender job.</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>A filter to return benchmarks of a specified status. If this field is left empty, then all benchmarks are returned.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::RecommendationJobStatus>,
    /// <p>A filter to return details about the specified type of subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    #[doc(hidden)]
    pub step_type: std::option::Option<crate::types::RecommendationStepType>,
    /// <p>The maximum number of results to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>A token that you can specify to return more results from the list. Specify this field if you have a token that was returned from a previous request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListInferenceRecommendationsJobStepsInput {
    /// <p>The name for the Inference Recommender job.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>A filter to return benchmarks of a specified status. If this field is left empty, then all benchmarks are returned.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::RecommendationJobStatus> {
        self.status.as_ref()
    }
    /// <p>A filter to return details about the specified type of subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    pub fn step_type(&self) -> std::option::Option<&crate::types::RecommendationStepType> {
        self.step_type.as_ref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token that you can specify to return more results from the list. Specify this field if you have a token that was returned from a previous request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListInferenceRecommendationsJobStepsInput {
    /// Creates a new builder-style object to manufacture [`ListInferenceRecommendationsJobStepsInput`](crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsInput).
    pub fn builder() -> crate::operation::list_inference_recommendations_job_steps::builders::ListInferenceRecommendationsJobStepsInputBuilder{
        crate::operation::list_inference_recommendations_job_steps::builders::ListInferenceRecommendationsJobStepsInputBuilder::default()
    }
}

/// A builder for [`ListInferenceRecommendationsJobStepsInput`](crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListInferenceRecommendationsJobStepsInputBuilder {
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::RecommendationJobStatus>,
    pub(crate) step_type: std::option::Option<crate::types::RecommendationStepType>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListInferenceRecommendationsJobStepsInputBuilder {
    /// <p>The name for the Inference Recommender job.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>The name for the Inference Recommender job.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>A filter to return benchmarks of a specified status. If this field is left empty, then all benchmarks are returned.</p>
    pub fn status(mut self, input: crate::types::RecommendationJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>A filter to return benchmarks of a specified status. If this field is left empty, then all benchmarks are returned.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::RecommendationJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>A filter to return details about the specified type of subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    pub fn step_type(mut self, input: crate::types::RecommendationStepType) -> Self {
        self.step_type = Some(input);
        self
    }
    /// <p>A filter to return details about the specified type of subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    pub fn set_step_type(
        mut self,
        input: std::option::Option<crate::types::RecommendationStepType>,
    ) -> Self {
        self.step_type = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A token that you can specify to return more results from the list. Specify this field if you have a token that was returned from a previous request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token that you can specify to return more results from the list. Specify this field if you have a token that was returned from a previous request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListInferenceRecommendationsJobStepsInput`](crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsInput).
    pub fn build(self) -> Result<crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::list_inference_recommendations_job_steps::ListInferenceRecommendationsJobStepsInput {
                job_name: self.job_name
                ,
                status: self.status
                ,
                step_type: self.step_type
                ,
                max_results: self.max_results
                ,
                next_token: self.next_token
                ,
            }
        )
    }
}
