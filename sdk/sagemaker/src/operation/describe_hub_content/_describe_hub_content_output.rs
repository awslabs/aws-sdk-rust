// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeHubContentOutput {
    /// <p>The name of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_arn: std::option::Option<std::string::String>,
    /// <p>The version of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_version: std::option::Option<std::string::String>,
    /// <p>The type of hub content.</p>
    #[doc(hidden)]
    pub hub_content_type: std::option::Option<crate::types::HubContentType>,
    /// <p>The document schema version for the hub content.</p>
    #[doc(hidden)]
    pub document_schema_version: std::option::Option<std::string::String>,
    /// <p>The name of the hub that contains the content.</p>
    #[doc(hidden)]
    pub hub_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the hub that contains the content. </p>
    #[doc(hidden)]
    pub hub_arn: std::option::Option<std::string::String>,
    /// <p>The display name of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_display_name: std::option::Option<std::string::String>,
    /// <p>A description of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_description: std::option::Option<std::string::String>,
    /// <p>Markdown files associated with the hub content to import.</p>
    #[doc(hidden)]
    pub hub_content_markdown: std::option::Option<std::string::String>,
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    #[doc(hidden)]
    pub hub_content_document: std::option::Option<std::string::String>,
    /// <p>The searchable keywords for the hub content.</p>
    #[doc(hidden)]
    pub hub_content_search_keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The location of any dependencies that the hub content has, such as scripts, model artifacts, datasets, or notebooks.</p>
    #[doc(hidden)]
    pub hub_content_dependencies:
        std::option::Option<std::vec::Vec<crate::types::HubContentDependency>>,
    /// <p>The status of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_status: std::option::Option<crate::types::HubContentStatus>,
    /// <p>The failure reason if importing hub content failed.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The date and time that hub content was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeHubContentOutput {
    /// <p>The name of the hub content.</p>
    pub fn hub_content_name(&self) -> std::option::Option<&str> {
        self.hub_content_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the hub content.</p>
    pub fn hub_content_arn(&self) -> std::option::Option<&str> {
        self.hub_content_arn.as_deref()
    }
    /// <p>The version of the hub content.</p>
    pub fn hub_content_version(&self) -> std::option::Option<&str> {
        self.hub_content_version.as_deref()
    }
    /// <p>The type of hub content.</p>
    pub fn hub_content_type(&self) -> std::option::Option<&crate::types::HubContentType> {
        self.hub_content_type.as_ref()
    }
    /// <p>The document schema version for the hub content.</p>
    pub fn document_schema_version(&self) -> std::option::Option<&str> {
        self.document_schema_version.as_deref()
    }
    /// <p>The name of the hub that contains the content.</p>
    pub fn hub_name(&self) -> std::option::Option<&str> {
        self.hub_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the hub that contains the content. </p>
    pub fn hub_arn(&self) -> std::option::Option<&str> {
        self.hub_arn.as_deref()
    }
    /// <p>The display name of the hub content.</p>
    pub fn hub_content_display_name(&self) -> std::option::Option<&str> {
        self.hub_content_display_name.as_deref()
    }
    /// <p>A description of the hub content.</p>
    pub fn hub_content_description(&self) -> std::option::Option<&str> {
        self.hub_content_description.as_deref()
    }
    /// <p>Markdown files associated with the hub content to import.</p>
    pub fn hub_content_markdown(&self) -> std::option::Option<&str> {
        self.hub_content_markdown.as_deref()
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn hub_content_document(&self) -> std::option::Option<&str> {
        self.hub_content_document.as_deref()
    }
    /// <p>The searchable keywords for the hub content.</p>
    pub fn hub_content_search_keywords(&self) -> std::option::Option<&[std::string::String]> {
        self.hub_content_search_keywords.as_deref()
    }
    /// <p>The location of any dependencies that the hub content has, such as scripts, model artifacts, datasets, or notebooks.</p>
    pub fn hub_content_dependencies(
        &self,
    ) -> std::option::Option<&[crate::types::HubContentDependency]> {
        self.hub_content_dependencies.as_deref()
    }
    /// <p>The status of the hub content.</p>
    pub fn hub_content_status(&self) -> std::option::Option<&crate::types::HubContentStatus> {
        self.hub_content_status.as_ref()
    }
    /// <p>The failure reason if importing hub content failed.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The date and time that hub content was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeHubContentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeHubContentOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHubContentOutput`](crate::operation::describe_hub_content::DescribeHubContentOutput).
    pub fn builder(
    ) -> crate::operation::describe_hub_content::builders::DescribeHubContentOutputBuilder {
        crate::operation::describe_hub_content::builders::DescribeHubContentOutputBuilder::default()
    }
}

/// A builder for [`DescribeHubContentOutput`](crate::operation::describe_hub_content::DescribeHubContentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeHubContentOutputBuilder {
    pub(crate) hub_content_name: std::option::Option<std::string::String>,
    pub(crate) hub_content_arn: std::option::Option<std::string::String>,
    pub(crate) hub_content_version: std::option::Option<std::string::String>,
    pub(crate) hub_content_type: std::option::Option<crate::types::HubContentType>,
    pub(crate) document_schema_version: std::option::Option<std::string::String>,
    pub(crate) hub_name: std::option::Option<std::string::String>,
    pub(crate) hub_arn: std::option::Option<std::string::String>,
    pub(crate) hub_content_display_name: std::option::Option<std::string::String>,
    pub(crate) hub_content_description: std::option::Option<std::string::String>,
    pub(crate) hub_content_markdown: std::option::Option<std::string::String>,
    pub(crate) hub_content_document: std::option::Option<std::string::String>,
    pub(crate) hub_content_search_keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) hub_content_dependencies:
        std::option::Option<std::vec::Vec<crate::types::HubContentDependency>>,
    pub(crate) hub_content_status: std::option::Option<crate::types::HubContentStatus>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeHubContentOutputBuilder {
    /// <p>The name of the hub content.</p>
    pub fn hub_content_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_name = Some(input.into());
        self
    }
    /// <p>The name of the hub content.</p>
    pub fn set_hub_content_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_content_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub content.</p>
    pub fn hub_content_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub content.</p>
    pub fn set_hub_content_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_content_arn = input;
        self
    }
    /// <p>The version of the hub content.</p>
    pub fn hub_content_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_version = Some(input.into());
        self
    }
    /// <p>The version of the hub content.</p>
    pub fn set_hub_content_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.hub_content_version = input;
        self
    }
    /// <p>The type of hub content.</p>
    pub fn hub_content_type(mut self, input: crate::types::HubContentType) -> Self {
        self.hub_content_type = Some(input);
        self
    }
    /// <p>The type of hub content.</p>
    pub fn set_hub_content_type(
        mut self,
        input: std::option::Option<crate::types::HubContentType>,
    ) -> Self {
        self.hub_content_type = input;
        self
    }
    /// <p>The document schema version for the hub content.</p>
    pub fn document_schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_schema_version = Some(input.into());
        self
    }
    /// <p>The document schema version for the hub content.</p>
    pub fn set_document_schema_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.document_schema_version = input;
        self
    }
    /// <p>The name of the hub that contains the content.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_name = Some(input.into());
        self
    }
    /// <p>The name of the hub that contains the content.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub that contains the content. </p>
    pub fn hub_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub that contains the content. </p>
    pub fn set_hub_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_arn = input;
        self
    }
    /// <p>The display name of the hub content.</p>
    pub fn hub_content_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_display_name = Some(input.into());
        self
    }
    /// <p>The display name of the hub content.</p>
    pub fn set_hub_content_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.hub_content_display_name = input;
        self
    }
    /// <p>A description of the hub content.</p>
    pub fn hub_content_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_description = Some(input.into());
        self
    }
    /// <p>A description of the hub content.</p>
    pub fn set_hub_content_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.hub_content_description = input;
        self
    }
    /// <p>Markdown files associated with the hub content to import.</p>
    pub fn hub_content_markdown(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_markdown = Some(input.into());
        self
    }
    /// <p>Markdown files associated with the hub content to import.</p>
    pub fn set_hub_content_markdown(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.hub_content_markdown = input;
        self
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn hub_content_document(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_document = Some(input.into());
        self
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn set_hub_content_document(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.hub_content_document = input;
        self
    }
    /// Appends an item to `hub_content_search_keywords`.
    ///
    /// To override the contents of this collection use [`set_hub_content_search_keywords`](Self::set_hub_content_search_keywords).
    ///
    /// <p>The searchable keywords for the hub content.</p>
    pub fn hub_content_search_keywords(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.hub_content_search_keywords.unwrap_or_default();
        v.push(input.into());
        self.hub_content_search_keywords = Some(v);
        self
    }
    /// <p>The searchable keywords for the hub content.</p>
    pub fn set_hub_content_search_keywords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.hub_content_search_keywords = input;
        self
    }
    /// Appends an item to `hub_content_dependencies`.
    ///
    /// To override the contents of this collection use [`set_hub_content_dependencies`](Self::set_hub_content_dependencies).
    ///
    /// <p>The location of any dependencies that the hub content has, such as scripts, model artifacts, datasets, or notebooks.</p>
    pub fn hub_content_dependencies(mut self, input: crate::types::HubContentDependency) -> Self {
        let mut v = self.hub_content_dependencies.unwrap_or_default();
        v.push(input);
        self.hub_content_dependencies = Some(v);
        self
    }
    /// <p>The location of any dependencies that the hub content has, such as scripts, model artifacts, datasets, or notebooks.</p>
    pub fn set_hub_content_dependencies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HubContentDependency>>,
    ) -> Self {
        self.hub_content_dependencies = input;
        self
    }
    /// <p>The status of the hub content.</p>
    pub fn hub_content_status(mut self, input: crate::types::HubContentStatus) -> Self {
        self.hub_content_status = Some(input);
        self
    }
    /// <p>The status of the hub content.</p>
    pub fn set_hub_content_status(
        mut self,
        input: std::option::Option<crate::types::HubContentStatus>,
    ) -> Self {
        self.hub_content_status = input;
        self
    }
    /// <p>The failure reason if importing hub content failed.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The failure reason if importing hub content failed.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The date and time that hub content was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The date and time that hub content was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeHubContentOutput`](crate::operation::describe_hub_content::DescribeHubContentOutput).
    pub fn build(self) -> crate::operation::describe_hub_content::DescribeHubContentOutput {
        crate::operation::describe_hub_content::DescribeHubContentOutput {
            hub_content_name: self.hub_content_name,
            hub_content_arn: self.hub_content_arn,
            hub_content_version: self.hub_content_version,
            hub_content_type: self.hub_content_type,
            document_schema_version: self.document_schema_version,
            hub_name: self.hub_name,
            hub_arn: self.hub_arn,
            hub_content_display_name: self.hub_content_display_name,
            hub_content_description: self.hub_content_description,
            hub_content_markdown: self.hub_content_markdown,
            hub_content_document: self.hub_content_document,
            hub_content_search_keywords: self.hub_content_search_keywords,
            hub_content_dependencies: self.hub_content_dependencies,
            hub_content_status: self.hub_content_status,
            failure_reason: self.failure_reason,
            creation_time: self.creation_time,
            _request_id: self._request_id,
        }
    }
}
