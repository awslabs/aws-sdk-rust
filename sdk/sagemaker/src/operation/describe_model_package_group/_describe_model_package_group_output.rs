// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeModelPackageGroupOutput {
    /// <p>The name of the model group.</p>
    pub model_package_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the model group.</p>
    pub model_package_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>A description of the model group.</p>
    pub model_package_group_description: ::std::option::Option<::std::string::String>,
    /// <p>The time that the model group was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub created_by: ::std::option::Option<crate::types::UserContext>,
    /// <p>The status of the model group.</p>
    pub model_package_group_status: ::std::option::Option<crate::types::ModelPackageGroupStatus>,
    _request_id: Option<String>,
}
impl DescribeModelPackageGroupOutput {
    /// <p>The name of the model group.</p>
    pub fn model_package_group_name(&self) -> ::std::option::Option<&str> {
        self.model_package_group_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model group.</p>
    pub fn model_package_group_arn(&self) -> ::std::option::Option<&str> {
        self.model_package_group_arn.as_deref()
    }
    /// <p>A description of the model group.</p>
    pub fn model_package_group_description(&self) -> ::std::option::Option<&str> {
        self.model_package_group_description.as_deref()
    }
    /// <p>The time that the model group was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn created_by(&self) -> ::std::option::Option<&crate::types::UserContext> {
        self.created_by.as_ref()
    }
    /// <p>The status of the model group.</p>
    pub fn model_package_group_status(&self) -> ::std::option::Option<&crate::types::ModelPackageGroupStatus> {
        self.model_package_group_status.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeModelPackageGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeModelPackageGroupOutput {
    /// Creates a new builder-style object to manufacture [`DescribeModelPackageGroupOutput`](crate::operation::describe_model_package_group::DescribeModelPackageGroupOutput).
    pub fn builder() -> crate::operation::describe_model_package_group::builders::DescribeModelPackageGroupOutputBuilder {
        crate::operation::describe_model_package_group::builders::DescribeModelPackageGroupOutputBuilder::default()
    }
}

/// A builder for [`DescribeModelPackageGroupOutput`](crate::operation::describe_model_package_group::DescribeModelPackageGroupOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeModelPackageGroupOutputBuilder {
    pub(crate) model_package_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_package_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_package_group_description: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<crate::types::UserContext>,
    pub(crate) model_package_group_status: ::std::option::Option<crate::types::ModelPackageGroupStatus>,
    _request_id: Option<String>,
}
impl DescribeModelPackageGroupOutputBuilder {
    /// <p>The name of the model group.</p>
    /// This field is required.
    pub fn model_package_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_package_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the model group.</p>
    pub fn set_model_package_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_package_group_name = input;
        self
    }
    /// <p>The name of the model group.</p>
    pub fn get_model_package_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_package_group_name
    }
    /// <p>The Amazon Resource Name (ARN) of the model group.</p>
    /// This field is required.
    pub fn model_package_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_package_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model group.</p>
    pub fn set_model_package_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_package_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model group.</p>
    pub fn get_model_package_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_package_group_arn
    }
    /// <p>A description of the model group.</p>
    pub fn model_package_group_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_package_group_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the model group.</p>
    pub fn set_model_package_group_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_package_group_description = input;
        self
    }
    /// <p>A description of the model group.</p>
    pub fn get_model_package_group_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_package_group_description
    }
    /// <p>The time that the model group was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the model group was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the model group was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    /// This field is required.
    pub fn created_by(mut self, input: crate::types::UserContext) -> Self {
        self.created_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<crate::types::UserContext>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<crate::types::UserContext> {
        &self.created_by
    }
    /// <p>The status of the model group.</p>
    /// This field is required.
    pub fn model_package_group_status(mut self, input: crate::types::ModelPackageGroupStatus) -> Self {
        self.model_package_group_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the model group.</p>
    pub fn set_model_package_group_status(mut self, input: ::std::option::Option<crate::types::ModelPackageGroupStatus>) -> Self {
        self.model_package_group_status = input;
        self
    }
    /// <p>The status of the model group.</p>
    pub fn get_model_package_group_status(&self) -> &::std::option::Option<crate::types::ModelPackageGroupStatus> {
        &self.model_package_group_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeModelPackageGroupOutput`](crate::operation::describe_model_package_group::DescribeModelPackageGroupOutput).
    pub fn build(self) -> crate::operation::describe_model_package_group::DescribeModelPackageGroupOutput {
        crate::operation::describe_model_package_group::DescribeModelPackageGroupOutput {
            model_package_group_name: self.model_package_group_name,
            model_package_group_arn: self.model_package_group_arn,
            model_package_group_description: self.model_package_group_description,
            creation_time: self.creation_time,
            created_by: self.created_by,
            model_package_group_status: self.model_package_group_status,
            _request_id: self._request_id,
        }
    }
}
