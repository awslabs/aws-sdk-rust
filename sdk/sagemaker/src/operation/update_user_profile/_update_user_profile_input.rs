// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateUserProfileInput {
    /// <p>The domain ID.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The user profile name.</p>
    pub user_profile_name: ::std::option::Option<::std::string::String>,
    /// <p>A collection of settings.</p>
    pub user_settings: ::std::option::Option<crate::types::UserSettings>,
}
impl UpdateUserProfileInput {
    /// <p>The domain ID.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(&self) -> ::std::option::Option<&str> {
        self.user_profile_name.as_deref()
    }
    /// <p>A collection of settings.</p>
    pub fn user_settings(&self) -> ::std::option::Option<&crate::types::UserSettings> {
        self.user_settings.as_ref()
    }
}
impl UpdateUserProfileInput {
    /// Creates a new builder-style object to manufacture [`UpdateUserProfileInput`](crate::operation::update_user_profile::UpdateUserProfileInput).
    pub fn builder() -> crate::operation::update_user_profile::builders::UpdateUserProfileInputBuilder {
        crate::operation::update_user_profile::builders::UpdateUserProfileInputBuilder::default()
    }
}

/// A builder for [`UpdateUserProfileInput`](crate::operation::update_user_profile::UpdateUserProfileInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateUserProfileInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_settings: ::std::option::Option<crate::types::UserSettings>,
}
impl UpdateUserProfileInputBuilder {
    /// <p>The domain ID.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The domain ID.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The user profile name.</p>
    /// This field is required.
    pub fn user_profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user profile name.</p>
    pub fn set_user_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_profile_name = input;
        self
    }
    /// <p>The user profile name.</p>
    pub fn get_user_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_profile_name
    }
    /// <p>A collection of settings.</p>
    pub fn user_settings(mut self, input: crate::types::UserSettings) -> Self {
        self.user_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn set_user_settings(mut self, input: ::std::option::Option<crate::types::UserSettings>) -> Self {
        self.user_settings = input;
        self
    }
    /// <p>A collection of settings.</p>
    pub fn get_user_settings(&self) -> &::std::option::Option<crate::types::UserSettings> {
        &self.user_settings
    }
    /// Consumes the builder and constructs a [`UpdateUserProfileInput`](crate::operation::update_user_profile::UpdateUserProfileInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_user_profile::UpdateUserProfileInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_user_profile::UpdateUserProfileInput {
            domain_id: self.domain_id,
            user_profile_name: self.user_profile_name,
            user_settings: self.user_settings,
        })
    }
}
