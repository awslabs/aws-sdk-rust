// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeModelCardOutput {
    /// <p>The Amazon Resource Name (ARN) of the model card.</p>
    #[doc(hidden)]
    pub model_card_arn: std::option::Option<std::string::String>,
    /// <p>The name of the model card.</p>
    #[doc(hidden)]
    pub model_card_name: std::option::Option<std::string::String>,
    /// <p>The version of the model card.</p>
    #[doc(hidden)]
    pub model_card_version: i32,
    /// <p>The content of the model card.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
    /// <p>The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.</p>
    /// <ul>
    /// <li> <p> <code>Draft</code>: The model card is a work in progress.</p> </li>
    /// <li> <p> <code>PendingReview</code>: The model card is pending review.</p> </li>
    /// <li> <p> <code>Approved</code>: The model card is approved.</p> </li>
    /// <li> <p> <code>Archived</code>: The model card is archived. No more updates should be made to the model card, but it can still be exported.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub model_card_status: std::option::Option<crate::types::ModelCardStatus>,
    /// <p>The security configuration used to protect model card content.</p>
    #[doc(hidden)]
    pub security_config: std::option::Option<crate::types::ModelCardSecurityConfig>,
    /// <p>The date and time the model card was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<crate::types::UserContext>,
    /// <p>The date and time the model card was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    #[doc(hidden)]
    pub last_modified_by: std::option::Option<crate::types::UserContext>,
    /// <p>The processing status of model card deletion. The <code>ModelCardProcessingStatus</code> updates throughout the different deletion steps.</p>
    /// <ul>
    /// <li> <p> <code>DeletePending</code>: Model card deletion request received.</p> </li>
    /// <li> <p> <code>DeleteInProgress</code>: Model card deletion is in progress.</p> </li>
    /// <li> <p> <code>ContentDeleted</code>: Deleted model card content.</p> </li>
    /// <li> <p> <code>ExportJobsDeleted</code>: Deleted all export jobs associated with the model card.</p> </li>
    /// <li> <p> <code>DeleteCompleted</code>: Successfully deleted the model card.</p> </li>
    /// <li> <p> <code>DeleteFailed</code>: The model card failed to delete.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub model_card_processing_status: std::option::Option<crate::types::ModelCardProcessingStatus>,
    _request_id: Option<String>,
}
impl DescribeModelCardOutput {
    /// <p>The Amazon Resource Name (ARN) of the model card.</p>
    pub fn model_card_arn(&self) -> std::option::Option<&str> {
        self.model_card_arn.as_deref()
    }
    /// <p>The name of the model card.</p>
    pub fn model_card_name(&self) -> std::option::Option<&str> {
        self.model_card_name.as_deref()
    }
    /// <p>The version of the model card.</p>
    pub fn model_card_version(&self) -> i32 {
        self.model_card_version
    }
    /// <p>The content of the model card.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.</p>
    /// <ul>
    /// <li> <p> <code>Draft</code>: The model card is a work in progress.</p> </li>
    /// <li> <p> <code>PendingReview</code>: The model card is pending review.</p> </li>
    /// <li> <p> <code>Approved</code>: The model card is approved.</p> </li>
    /// <li> <p> <code>Archived</code>: The model card is archived. No more updates should be made to the model card, but it can still be exported.</p> </li>
    /// </ul>
    pub fn model_card_status(&self) -> std::option::Option<&crate::types::ModelCardStatus> {
        self.model_card_status.as_ref()
    }
    /// <p>The security configuration used to protect model card content.</p>
    pub fn security_config(&self) -> std::option::Option<&crate::types::ModelCardSecurityConfig> {
        self.security_config.as_ref()
    }
    /// <p>The date and time the model card was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn created_by(&self) -> std::option::Option<&crate::types::UserContext> {
        self.created_by.as_ref()
    }
    /// <p>The date and time the model card was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn last_modified_by(&self) -> std::option::Option<&crate::types::UserContext> {
        self.last_modified_by.as_ref()
    }
    /// <p>The processing status of model card deletion. The <code>ModelCardProcessingStatus</code> updates throughout the different deletion steps.</p>
    /// <ul>
    /// <li> <p> <code>DeletePending</code>: Model card deletion request received.</p> </li>
    /// <li> <p> <code>DeleteInProgress</code>: Model card deletion is in progress.</p> </li>
    /// <li> <p> <code>ContentDeleted</code>: Deleted model card content.</p> </li>
    /// <li> <p> <code>ExportJobsDeleted</code>: Deleted all export jobs associated with the model card.</p> </li>
    /// <li> <p> <code>DeleteCompleted</code>: Successfully deleted the model card.</p> </li>
    /// <li> <p> <code>DeleteFailed</code>: The model card failed to delete.</p> </li>
    /// </ul>
    pub fn model_card_processing_status(
        &self,
    ) -> std::option::Option<&crate::types::ModelCardProcessingStatus> {
        self.model_card_processing_status.as_ref()
    }
}
impl std::fmt::Debug for DescribeModelCardOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeModelCardOutput");
        formatter.field("model_card_arn", &self.model_card_arn);
        formatter.field("model_card_name", &self.model_card_name);
        formatter.field("model_card_version", &self.model_card_version);
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("model_card_status", &self.model_card_status);
        formatter.field("security_config", &self.security_config);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("created_by", &self.created_by);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("last_modified_by", &self.last_modified_by);
        formatter.field(
            "model_card_processing_status",
            &self.model_card_processing_status,
        );
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for DescribeModelCardOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeModelCardOutput {
    /// Creates a new builder-style object to manufacture [`DescribeModelCardOutput`](crate::operation::describe_model_card::DescribeModelCardOutput).
    pub fn builder(
    ) -> crate::operation::describe_model_card::builders::DescribeModelCardOutputBuilder {
        crate::operation::describe_model_card::builders::DescribeModelCardOutputBuilder::default()
    }
}

/// A builder for [`DescribeModelCardOutput`](crate::operation::describe_model_card::DescribeModelCardOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct DescribeModelCardOutputBuilder {
    pub(crate) model_card_arn: std::option::Option<std::string::String>,
    pub(crate) model_card_name: std::option::Option<std::string::String>,
    pub(crate) model_card_version: std::option::Option<i32>,
    pub(crate) content: std::option::Option<std::string::String>,
    pub(crate) model_card_status: std::option::Option<crate::types::ModelCardStatus>,
    pub(crate) security_config: std::option::Option<crate::types::ModelCardSecurityConfig>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_by: std::option::Option<crate::types::UserContext>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_by: std::option::Option<crate::types::UserContext>,
    pub(crate) model_card_processing_status:
        std::option::Option<crate::types::ModelCardProcessingStatus>,
    _request_id: Option<String>,
}
impl DescribeModelCardOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the model card.</p>
    pub fn model_card_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_card_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model card.</p>
    pub fn set_model_card_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_card_arn = input;
        self
    }
    /// <p>The name of the model card.</p>
    pub fn model_card_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_card_name = Some(input.into());
        self
    }
    /// <p>The name of the model card.</p>
    pub fn set_model_card_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_card_name = input;
        self
    }
    /// <p>The version of the model card.</p>
    pub fn model_card_version(mut self, input: i32) -> Self {
        self.model_card_version = Some(input);
        self
    }
    /// <p>The version of the model card.</p>
    pub fn set_model_card_version(mut self, input: std::option::Option<i32>) -> Self {
        self.model_card_version = input;
        self
    }
    /// <p>The content of the model card.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The content of the model card.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.</p>
    /// <ul>
    /// <li> <p> <code>Draft</code>: The model card is a work in progress.</p> </li>
    /// <li> <p> <code>PendingReview</code>: The model card is pending review.</p> </li>
    /// <li> <p> <code>Approved</code>: The model card is approved.</p> </li>
    /// <li> <p> <code>Archived</code>: The model card is archived. No more updates should be made to the model card, but it can still be exported.</p> </li>
    /// </ul>
    pub fn model_card_status(mut self, input: crate::types::ModelCardStatus) -> Self {
        self.model_card_status = Some(input);
        self
    }
    /// <p>The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.</p>
    /// <ul>
    /// <li> <p> <code>Draft</code>: The model card is a work in progress.</p> </li>
    /// <li> <p> <code>PendingReview</code>: The model card is pending review.</p> </li>
    /// <li> <p> <code>Approved</code>: The model card is approved.</p> </li>
    /// <li> <p> <code>Archived</code>: The model card is archived. No more updates should be made to the model card, but it can still be exported.</p> </li>
    /// </ul>
    pub fn set_model_card_status(
        mut self,
        input: std::option::Option<crate::types::ModelCardStatus>,
    ) -> Self {
        self.model_card_status = input;
        self
    }
    /// <p>The security configuration used to protect model card content.</p>
    pub fn security_config(mut self, input: crate::types::ModelCardSecurityConfig) -> Self {
        self.security_config = Some(input);
        self
    }
    /// <p>The security configuration used to protect model card content.</p>
    pub fn set_security_config(
        mut self,
        input: std::option::Option<crate::types::ModelCardSecurityConfig>,
    ) -> Self {
        self.security_config = input;
        self
    }
    /// <p>The date and time the model card was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The date and time the model card was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn created_by(mut self, input: crate::types::UserContext) -> Self {
        self.created_by = Some(input);
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn set_created_by(mut self, input: std::option::Option<crate::types::UserContext>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The date and time the model card was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The date and time the model card was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn last_modified_by(mut self, input: crate::types::UserContext) -> Self {
        self.last_modified_by = Some(input);
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn set_last_modified_by(
        mut self,
        input: std::option::Option<crate::types::UserContext>,
    ) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>The processing status of model card deletion. The <code>ModelCardProcessingStatus</code> updates throughout the different deletion steps.</p>
    /// <ul>
    /// <li> <p> <code>DeletePending</code>: Model card deletion request received.</p> </li>
    /// <li> <p> <code>DeleteInProgress</code>: Model card deletion is in progress.</p> </li>
    /// <li> <p> <code>ContentDeleted</code>: Deleted model card content.</p> </li>
    /// <li> <p> <code>ExportJobsDeleted</code>: Deleted all export jobs associated with the model card.</p> </li>
    /// <li> <p> <code>DeleteCompleted</code>: Successfully deleted the model card.</p> </li>
    /// <li> <p> <code>DeleteFailed</code>: The model card failed to delete.</p> </li>
    /// </ul>
    pub fn model_card_processing_status(
        mut self,
        input: crate::types::ModelCardProcessingStatus,
    ) -> Self {
        self.model_card_processing_status = Some(input);
        self
    }
    /// <p>The processing status of model card deletion. The <code>ModelCardProcessingStatus</code> updates throughout the different deletion steps.</p>
    /// <ul>
    /// <li> <p> <code>DeletePending</code>: Model card deletion request received.</p> </li>
    /// <li> <p> <code>DeleteInProgress</code>: Model card deletion is in progress.</p> </li>
    /// <li> <p> <code>ContentDeleted</code>: Deleted model card content.</p> </li>
    /// <li> <p> <code>ExportJobsDeleted</code>: Deleted all export jobs associated with the model card.</p> </li>
    /// <li> <p> <code>DeleteCompleted</code>: Successfully deleted the model card.</p> </li>
    /// <li> <p> <code>DeleteFailed</code>: The model card failed to delete.</p> </li>
    /// </ul>
    pub fn set_model_card_processing_status(
        mut self,
        input: std::option::Option<crate::types::ModelCardProcessingStatus>,
    ) -> Self {
        self.model_card_processing_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeModelCardOutput`](crate::operation::describe_model_card::DescribeModelCardOutput).
    pub fn build(self) -> crate::operation::describe_model_card::DescribeModelCardOutput {
        crate::operation::describe_model_card::DescribeModelCardOutput {
            model_card_arn: self.model_card_arn,
            model_card_name: self.model_card_name,
            model_card_version: self.model_card_version.unwrap_or_default(),
            content: self.content,
            model_card_status: self.model_card_status,
            security_config: self.security_config,
            creation_time: self.creation_time,
            created_by: self.created_by,
            last_modified_time: self.last_modified_time,
            last_modified_by: self.last_modified_by,
            model_card_processing_status: self.model_card_processing_status,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for DescribeModelCardOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeModelCardOutputBuilder");
        formatter.field("model_card_arn", &self.model_card_arn);
        formatter.field("model_card_name", &self.model_card_name);
        formatter.field("model_card_version", &self.model_card_version);
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("model_card_status", &self.model_card_status);
        formatter.field("security_config", &self.security_config);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("created_by", &self.created_by);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("last_modified_by", &self.last_modified_by);
        formatter.field(
            "model_card_processing_status",
            &self.model_card_processing_status,
        );
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
