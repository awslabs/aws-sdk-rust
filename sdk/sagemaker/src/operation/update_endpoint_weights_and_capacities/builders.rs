// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_endpoint_weights_and_capacities::_update_endpoint_weights_and_capacities_output::UpdateEndpointWeightsAndCapacitiesOutputBuilder;

pub use crate::operation::update_endpoint_weights_and_capacities::_update_endpoint_weights_and_capacities_input::UpdateEndpointWeightsAndCapacitiesInputBuilder;

impl crate::operation::update_endpoint_weights_and_capacities::builders::UpdateEndpointWeightsAndCapacitiesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_endpoint_weights_and_capacities();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateEndpointWeightsAndCapacities`.
///
/// <p>Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateEndpointWeightsAndCapacitiesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_endpoint_weights_and_capacities::builders::UpdateEndpointWeightsAndCapacitiesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesOutput,
        crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError,
    > for UpdateEndpointWeightsAndCapacitiesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesOutput,
            crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateEndpointWeightsAndCapacitiesFluentBuilder {
    /// Creates a new `UpdateEndpointWeightsAndCapacities`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateEndpointWeightsAndCapacities as a reference.
    pub fn as_input(&self) -> &crate::operation::update_endpoint_weights_and_capacities::builders::UpdateEndpointWeightsAndCapacitiesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacities::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacities::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesOutput,
        crate::operation::update_endpoint_weights_and_capacities::UpdateEndpointWeightsAndCapacitiesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of an existing SageMaker endpoint.</p>
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>The name of an existing SageMaker endpoint.</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>The name of an existing SageMaker endpoint.</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_endpoint_name()
    }
    ///
    /// Appends an item to `DesiredWeightsAndCapacities`.
    ///
    /// To override the contents of this collection use [`set_desired_weights_and_capacities`](Self::set_desired_weights_and_capacities).
    ///
    /// <p>An object that provides new capacity and weight values for a variant.</p>
    pub fn desired_weights_and_capacities(mut self, input: crate::types::DesiredWeightAndCapacity) -> Self {
        self.inner = self.inner.desired_weights_and_capacities(input);
        self
    }
    /// <p>An object that provides new capacity and weight values for a variant.</p>
    pub fn set_desired_weights_and_capacities(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DesiredWeightAndCapacity>>,
    ) -> Self {
        self.inner = self.inner.set_desired_weights_and_capacities(input);
        self
    }
    /// <p>An object that provides new capacity and weight values for a variant.</p>
    pub fn get_desired_weights_and_capacities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DesiredWeightAndCapacity>> {
        self.inner.get_desired_weights_and_capacities()
    }
}
