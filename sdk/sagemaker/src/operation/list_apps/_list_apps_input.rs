// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAppsInput {
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Returns a list up to a specified limit.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The sort order for the results. The default is Ascending.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::AppSortKey>,
    /// <p>A parameter to search for the domain ID.</p>
    #[doc(hidden)]
    pub domain_id_equals: std::option::Option<std::string::String>,
    /// <p>A parameter to search by user profile name. If <code>SpaceNameEquals</code> is set, then this value cannot be set.</p>
    #[doc(hidden)]
    pub user_profile_name_equals: std::option::Option<std::string::String>,
    /// <p>A parameter to search by space name. If <code>UserProfileNameEquals</code> is set, then this value cannot be set.</p>
    #[doc(hidden)]
    pub space_name_equals: std::option::Option<std::string::String>,
}
impl ListAppsInput {
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::AppSortKey> {
        self.sort_by.as_ref()
    }
    /// <p>A parameter to search for the domain ID.</p>
    pub fn domain_id_equals(&self) -> std::option::Option<&str> {
        self.domain_id_equals.as_deref()
    }
    /// <p>A parameter to search by user profile name. If <code>SpaceNameEquals</code> is set, then this value cannot be set.</p>
    pub fn user_profile_name_equals(&self) -> std::option::Option<&str> {
        self.user_profile_name_equals.as_deref()
    }
    /// <p>A parameter to search by space name. If <code>UserProfileNameEquals</code> is set, then this value cannot be set.</p>
    pub fn space_name_equals(&self) -> std::option::Option<&str> {
        self.space_name_equals.as_deref()
    }
}
impl ListAppsInput {
    /// Creates a new builder-style object to manufacture [`ListAppsInput`](crate::operation::list_apps::ListAppsInput).
    pub fn builder() -> crate::operation::list_apps::builders::ListAppsInputBuilder {
        crate::operation::list_apps::builders::ListAppsInputBuilder::default()
    }
}

/// A builder for [`ListAppsInput`](crate::operation::list_apps::ListAppsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAppsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) sort_by: std::option::Option<crate::types::AppSortKey>,
    pub(crate) domain_id_equals: std::option::Option<std::string::String>,
    pub(crate) user_profile_name_equals: std::option::Option<std::string::String>,
    pub(crate) space_name_equals: std::option::Option<std::string::String>,
}
impl ListAppsInputBuilder {
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn sort_by(mut self, input: crate::types::AppSortKey) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::types::AppSortKey>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>A parameter to search for the domain ID.</p>
    pub fn domain_id_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_id_equals = Some(input.into());
        self
    }
    /// <p>A parameter to search for the domain ID.</p>
    pub fn set_domain_id_equals(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_id_equals = input;
        self
    }
    /// <p>A parameter to search by user profile name. If <code>SpaceNameEquals</code> is set, then this value cannot be set.</p>
    pub fn user_profile_name_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_profile_name_equals = Some(input.into());
        self
    }
    /// <p>A parameter to search by user profile name. If <code>SpaceNameEquals</code> is set, then this value cannot be set.</p>
    pub fn set_user_profile_name_equals(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_profile_name_equals = input;
        self
    }
    /// <p>A parameter to search by space name. If <code>UserProfileNameEquals</code> is set, then this value cannot be set.</p>
    pub fn space_name_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.space_name_equals = Some(input.into());
        self
    }
    /// <p>A parameter to search by space name. If <code>UserProfileNameEquals</code> is set, then this value cannot be set.</p>
    pub fn set_space_name_equals(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.space_name_equals = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAppsInput`](crate::operation::list_apps::ListAppsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_apps::ListAppsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_apps::ListAppsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            sort_order: self.sort_order,
            sort_by: self.sort_by,
            domain_id_equals: self.domain_id_equals,
            user_profile_name_equals: self.user_profile_name_equals,
            space_name_equals: self.space_name_equals,
        })
    }
}
