// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListInferenceExperimentsInput {
    /// <p>Selects inference experiments whose names contain this name.</p>
    #[doc(hidden)]
    pub name_contains: std::option::Option<std::string::String>,
    /// <p> Selects inference experiments of this type. For the possible types of inference experiments, see <code>CreateInferenceExperimentRequest$Type</code>. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::InferenceExperimentType>,
    /// <p> Selects inference experiments which are in this status. For the possible statuses, see <code>DescribeInferenceExperimentResponse$Status</code>. </p>
    #[doc(hidden)]
    pub status_equals: std::option::Option<crate::types::InferenceExperimentStatus>,
    /// <p>Selects inference experiments which were created after this timestamp.</p>
    #[doc(hidden)]
    pub creation_time_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Selects inference experiments which were created before this timestamp.</p>
    #[doc(hidden)]
    pub creation_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Selects inference experiments which were last modified after this timestamp.</p>
    #[doc(hidden)]
    pub last_modified_time_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Selects inference experiments which were last modified before this timestamp.</p>
    #[doc(hidden)]
    pub last_modified_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The column by which to sort the listed inference experiments.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::SortInferenceExperimentsBy>,
    /// <p>The direction of sorting (ascending or descending).</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p> The response from the last list when returning a list large enough to need tokening. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to select.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListInferenceExperimentsInput {
    /// <p>Selects inference experiments whose names contain this name.</p>
    pub fn name_contains(&self) -> std::option::Option<&str> {
        self.name_contains.as_deref()
    }
    /// <p> Selects inference experiments of this type. For the possible types of inference experiments, see <code>CreateInferenceExperimentRequest$Type</code>. </p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::InferenceExperimentType> {
        self.r#type.as_ref()
    }
    /// <p> Selects inference experiments which are in this status. For the possible statuses, see <code>DescribeInferenceExperimentResponse$Status</code>. </p>
    pub fn status_equals(&self) -> std::option::Option<&crate::types::InferenceExperimentStatus> {
        self.status_equals.as_ref()
    }
    /// <p>Selects inference experiments which were created after this timestamp.</p>
    pub fn creation_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time_after.as_ref()
    }
    /// <p>Selects inference experiments which were created before this timestamp.</p>
    pub fn creation_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time_before.as_ref()
    }
    /// <p>Selects inference experiments which were last modified after this timestamp.</p>
    pub fn last_modified_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time_after.as_ref()
    }
    /// <p>Selects inference experiments which were last modified before this timestamp.</p>
    pub fn last_modified_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time_before.as_ref()
    }
    /// <p>The column by which to sort the listed inference experiments.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::SortInferenceExperimentsBy> {
        self.sort_by.as_ref()
    }
    /// <p>The direction of sorting (ascending or descending).</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p> The response from the last list when returning a list large enough to need tokening. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to select.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListInferenceExperimentsInput {
    /// Creates a new builder-style object to manufacture [`ListInferenceExperimentsInput`](crate::operation::list_inference_experiments::ListInferenceExperimentsInput).
    pub fn builder(
    ) -> crate::operation::list_inference_experiments::builders::ListInferenceExperimentsInputBuilder
    {
        crate::operation::list_inference_experiments::builders::ListInferenceExperimentsInputBuilder::default()
    }
}

/// A builder for [`ListInferenceExperimentsInput`](crate::operation::list_inference_experiments::ListInferenceExperimentsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListInferenceExperimentsInputBuilder {
    pub(crate) name_contains: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::InferenceExperimentType>,
    pub(crate) status_equals: std::option::Option<crate::types::InferenceExperimentStatus>,
    pub(crate) creation_time_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) sort_by: std::option::Option<crate::types::SortInferenceExperimentsBy>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListInferenceExperimentsInputBuilder {
    /// <p>Selects inference experiments whose names contain this name.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.name_contains = Some(input.into());
        self
    }
    /// <p>Selects inference experiments whose names contain this name.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name_contains = input;
        self
    }
    /// <p> Selects inference experiments of this type. For the possible types of inference experiments, see <code>CreateInferenceExperimentRequest$Type</code>. </p>
    pub fn r#type(mut self, input: crate::types::InferenceExperimentType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p> Selects inference experiments of this type. For the possible types of inference experiments, see <code>CreateInferenceExperimentRequest$Type</code>. </p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::InferenceExperimentType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p> Selects inference experiments which are in this status. For the possible statuses, see <code>DescribeInferenceExperimentResponse$Status</code>. </p>
    pub fn status_equals(mut self, input: crate::types::InferenceExperimentStatus) -> Self {
        self.status_equals = Some(input);
        self
    }
    /// <p> Selects inference experiments which are in this status. For the possible statuses, see <code>DescribeInferenceExperimentResponse$Status</code>. </p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::types::InferenceExperimentStatus>,
    ) -> Self {
        self.status_equals = input;
        self
    }
    /// <p>Selects inference experiments which were created after this timestamp.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time_after = Some(input);
        self
    }
    /// <p>Selects inference experiments which were created after this timestamp.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time_after = input;
        self
    }
    /// <p>Selects inference experiments which were created before this timestamp.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time_before = Some(input);
        self
    }
    /// <p>Selects inference experiments which were created before this timestamp.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time_before = input;
        self
    }
    /// <p>Selects inference experiments which were last modified after this timestamp.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time_after = Some(input);
        self
    }
    /// <p>Selects inference experiments which were last modified after this timestamp.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time_after = input;
        self
    }
    /// <p>Selects inference experiments which were last modified before this timestamp.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time_before = Some(input);
        self
    }
    /// <p>Selects inference experiments which were last modified before this timestamp.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time_before = input;
        self
    }
    /// <p>The column by which to sort the listed inference experiments.</p>
    pub fn sort_by(mut self, input: crate::types::SortInferenceExperimentsBy) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>The column by which to sort the listed inference experiments.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::SortInferenceExperimentsBy>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The direction of sorting (ascending or descending).</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The direction of sorting (ascending or descending).</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p> The response from the last list when returning a list large enough to need tokening. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> The response from the last list when returning a list large enough to need tokening. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to select.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to select.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListInferenceExperimentsInput`](crate::operation::list_inference_experiments::ListInferenceExperimentsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_inference_experiments::ListInferenceExperimentsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_inference_experiments::ListInferenceExperimentsInput {
                name_contains: self.name_contains,
                r#type: self.r#type,
                status_equals: self.status_equals,
                creation_time_after: self.creation_time_after,
                creation_time_before: self.creation_time_before,
                last_modified_time_after: self.last_modified_time_after,
                last_modified_time_before: self.last_modified_time_before,
                sort_by: self.sort_by,
                sort_order: self.sort_order,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
