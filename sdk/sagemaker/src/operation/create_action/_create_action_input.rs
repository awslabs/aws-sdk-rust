// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateActionInput {
    /// <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub action_name: std::option::Option<std::string::String>,
    /// <p>The source type, ID, and URI.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::ActionSource>,
    /// <p>The action type.</p>
    #[doc(hidden)]
    pub action_type: std::option::Option<std::string::String>,
    /// <p>The description of the action.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The status of the action.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ActionStatus>,
    /// <p>A list of properties to add to the action.</p>
    #[doc(hidden)]
    pub properties:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    #[doc(hidden)]
    pub metadata_properties: std::option::Option<crate::types::MetadataProperties>,
    /// <p>A list of tags to apply to the action.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateActionInput {
    /// <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn action_name(&self) -> std::option::Option<&str> {
        self.action_name.as_deref()
    }
    /// <p>The source type, ID, and URI.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::ActionSource> {
        self.source.as_ref()
    }
    /// <p>The action type.</p>
    pub fn action_type(&self) -> std::option::Option<&str> {
        self.action_type.as_deref()
    }
    /// <p>The description of the action.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the action.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ActionStatus> {
        self.status.as_ref()
    }
    /// <p>A list of properties to add to the action.</p>
    pub fn properties(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.properties.as_ref()
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(&self) -> std::option::Option<&crate::types::MetadataProperties> {
        self.metadata_properties.as_ref()
    }
    /// <p>A list of tags to apply to the action.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateActionInput {
    /// Creates a new builder-style object to manufacture [`CreateActionInput`](crate::operation::create_action::CreateActionInput).
    pub fn builder() -> crate::operation::create_action::builders::CreateActionInputBuilder {
        crate::operation::create_action::builders::CreateActionInputBuilder::default()
    }
}

/// A builder for [`CreateActionInput`](crate::operation::create_action::CreateActionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateActionInputBuilder {
    pub(crate) action_name: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<crate::types::ActionSource>,
    pub(crate) action_type: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ActionStatus>,
    pub(crate) properties:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) metadata_properties: std::option::Option<crate::types::MetadataProperties>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateActionInputBuilder {
    /// <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_name = Some(input.into());
        self
    }
    /// <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p>The source type, ID, and URI.</p>
    pub fn source(mut self, input: crate::types::ActionSource) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>The source type, ID, and URI.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::ActionSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The action type.</p>
    pub fn action_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_type = Some(input.into());
        self
    }
    /// <p>The action type.</p>
    pub fn set_action_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.action_type = input;
        self
    }
    /// <p>The description of the action.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the action.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The status of the action.</p>
    pub fn status(mut self, input: crate::types::ActionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the action.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// Adds a key-value pair to `properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>A list of properties to add to the action.</p>
    pub fn properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.properties = Some(hash_map);
        self
    }
    /// <p>A list of properties to add to the action.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.properties = input;
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(mut self, input: crate::types::MetadataProperties) -> Self {
        self.metadata_properties = Some(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn set_metadata_properties(
        mut self,
        input: std::option::Option<crate::types::MetadataProperties>,
    ) -> Self {
        self.metadata_properties = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the action.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tags to apply to the action.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateActionInput`](crate::operation::create_action::CreateActionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_action::CreateActionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_action::CreateActionInput {
            action_name: self.action_name,
            source: self.source,
            action_type: self.action_type,
            description: self.description,
            status: self.status,
            properties: self.properties,
            metadata_properties: self.metadata_properties,
            tags: self.tags,
        })
    }
}
