// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_action::_create_action_output::CreateActionOutputBuilder;

pub use crate::operation::create_action::_create_action_input::CreateActionInputBuilder;

/// Fluent builder constructing a request to `CreateAction`.
///
/// <p>Creates an <i>action</i>. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateActionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_action::builders::CreateActionInputBuilder,
}
impl CreateActionFluentBuilder {
    /// Creates a new `CreateAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_action::CreateAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_action::CreateActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_action::CreateActionOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_action::CreateActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_name(input.into());
        self
    }
    /// <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_name(input);
        self
    }
    /// <p>The source type, ID, and URI.</p>
    pub fn source(mut self, input: crate::types::ActionSource) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>The source type, ID, and URI.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::ActionSource>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// <p>The action type.</p>
    pub fn action_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_type(input.into());
        self
    }
    /// <p>The action type.</p>
    pub fn set_action_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_type(input);
        self
    }
    /// <p>The description of the action.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the action.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The status of the action.</p>
    pub fn status(mut self, input: crate::types::ActionStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the action.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ActionStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// Adds a key-value pair to `Properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>A list of properties to add to the action.</p>
    pub fn properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.properties(k.into(), v.into());
        self
    }
    /// <p>A list of properties to add to the action.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_properties(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(mut self, input: crate::types::MetadataProperties) -> Self {
        self.inner = self.inner.metadata_properties(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn set_metadata_properties(
        mut self,
        input: std::option::Option<crate::types::MetadataProperties>,
    ) -> Self {
        self.inner = self.inner.set_metadata_properties(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the action.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to apply to the action.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
