// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEndpointConfigOutput {
    /// <p>Name of the SageMaker endpoint configuration.</p>
    #[doc(hidden)]
    pub endpoint_config_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the endpoint configuration.</p>
    #[doc(hidden)]
    pub endpoint_config_arn: std::option::Option<std::string::String>,
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint.</p>
    #[doc(hidden)]
    pub production_variants: std::option::Option<std::vec::Vec<crate::types::ProductionVariant>>,
    /// <p>Configuration to control how SageMaker captures inference data.</p>
    #[doc(hidden)]
    pub data_capture_config: std::option::Option<crate::types::DataCaptureConfig>,
    /// <p>Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>A timestamp that shows when the endpoint configuration was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Returns the description of an endpoint configuration created using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html"> <code>CreateEndpointConfig</code> </a> API.</p>
    #[doc(hidden)]
    pub async_inference_config: std::option::Option<crate::types::AsyncInferenceConfig>,
    /// <p>The configuration parameters for an explainer.</p>
    #[doc(hidden)]
    pub explainer_config: std::option::Option<crate::types::ExplainerConfig>,
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>.</p>
    #[doc(hidden)]
    pub shadow_production_variants:
        std::option::Option<std::vec::Vec<crate::types::ProductionVariant>>,
    _request_id: Option<String>,
}
impl DescribeEndpointConfigOutput {
    /// <p>Name of the SageMaker endpoint configuration.</p>
    pub fn endpoint_config_name(&self) -> std::option::Option<&str> {
        self.endpoint_config_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint configuration.</p>
    pub fn endpoint_config_arn(&self) -> std::option::Option<&str> {
        self.endpoint_config_arn.as_deref()
    }
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint.</p>
    pub fn production_variants(&self) -> std::option::Option<&[crate::types::ProductionVariant]> {
        self.production_variants.as_deref()
    }
    /// <p>Configuration to control how SageMaker captures inference data.</p>
    pub fn data_capture_config(&self) -> std::option::Option<&crate::types::DataCaptureConfig> {
        self.data_capture_config.as_ref()
    }
    /// <p>Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>A timestamp that shows when the endpoint configuration was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Returns the description of an endpoint configuration created using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html"> <code>CreateEndpointConfig</code> </a> API.</p>
    pub fn async_inference_config(
        &self,
    ) -> std::option::Option<&crate::types::AsyncInferenceConfig> {
        self.async_inference_config.as_ref()
    }
    /// <p>The configuration parameters for an explainer.</p>
    pub fn explainer_config(&self) -> std::option::Option<&crate::types::ExplainerConfig> {
        self.explainer_config.as_ref()
    }
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>.</p>
    pub fn shadow_production_variants(
        &self,
    ) -> std::option::Option<&[crate::types::ProductionVariant]> {
        self.shadow_production_variants.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeEndpointConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEndpointConfigOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointConfigOutput`](crate::operation::describe_endpoint_config::DescribeEndpointConfigOutput).
    pub fn builder(
    ) -> crate::operation::describe_endpoint_config::builders::DescribeEndpointConfigOutputBuilder
    {
        crate::operation::describe_endpoint_config::builders::DescribeEndpointConfigOutputBuilder::default()
    }
}

/// A builder for [`DescribeEndpointConfigOutput`](crate::operation::describe_endpoint_config::DescribeEndpointConfigOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEndpointConfigOutputBuilder {
    pub(crate) endpoint_config_name: std::option::Option<std::string::String>,
    pub(crate) endpoint_config_arn: std::option::Option<std::string::String>,
    pub(crate) production_variants:
        std::option::Option<std::vec::Vec<crate::types::ProductionVariant>>,
    pub(crate) data_capture_config: std::option::Option<crate::types::DataCaptureConfig>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) async_inference_config: std::option::Option<crate::types::AsyncInferenceConfig>,
    pub(crate) explainer_config: std::option::Option<crate::types::ExplainerConfig>,
    pub(crate) shadow_production_variants:
        std::option::Option<std::vec::Vec<crate::types::ProductionVariant>>,
    _request_id: Option<String>,
}
impl DescribeEndpointConfigOutputBuilder {
    /// <p>Name of the SageMaker endpoint configuration.</p>
    pub fn endpoint_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_config_name = Some(input.into());
        self
    }
    /// <p>Name of the SageMaker endpoint configuration.</p>
    pub fn set_endpoint_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.endpoint_config_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint configuration.</p>
    pub fn endpoint_config_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_config_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint configuration.</p>
    pub fn set_endpoint_config_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.endpoint_config_arn = input;
        self
    }
    /// Appends an item to `production_variants`.
    ///
    /// To override the contents of this collection use [`set_production_variants`](Self::set_production_variants).
    ///
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint.</p>
    pub fn production_variants(mut self, input: crate::types::ProductionVariant) -> Self {
        let mut v = self.production_variants.unwrap_or_default();
        v.push(input);
        self.production_variants = Some(v);
        self
    }
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint.</p>
    pub fn set_production_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProductionVariant>>,
    ) -> Self {
        self.production_variants = input;
        self
    }
    /// <p>Configuration to control how SageMaker captures inference data.</p>
    pub fn data_capture_config(mut self, input: crate::types::DataCaptureConfig) -> Self {
        self.data_capture_config = Some(input);
        self
    }
    /// <p>Configuration to control how SageMaker captures inference data.</p>
    pub fn set_data_capture_config(
        mut self,
        input: std::option::Option<crate::types::DataCaptureConfig>,
    ) -> Self {
        self.data_capture_config = input;
        self
    }
    /// <p>Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>A timestamp that shows when the endpoint configuration was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>A timestamp that shows when the endpoint configuration was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Returns the description of an endpoint configuration created using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html"> <code>CreateEndpointConfig</code> </a> API.</p>
    pub fn async_inference_config(mut self, input: crate::types::AsyncInferenceConfig) -> Self {
        self.async_inference_config = Some(input);
        self
    }
    /// <p>Returns the description of an endpoint configuration created using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html"> <code>CreateEndpointConfig</code> </a> API.</p>
    pub fn set_async_inference_config(
        mut self,
        input: std::option::Option<crate::types::AsyncInferenceConfig>,
    ) -> Self {
        self.async_inference_config = input;
        self
    }
    /// <p>The configuration parameters for an explainer.</p>
    pub fn explainer_config(mut self, input: crate::types::ExplainerConfig) -> Self {
        self.explainer_config = Some(input);
        self
    }
    /// <p>The configuration parameters for an explainer.</p>
    pub fn set_explainer_config(
        mut self,
        input: std::option::Option<crate::types::ExplainerConfig>,
    ) -> Self {
        self.explainer_config = input;
        self
    }
    /// Appends an item to `shadow_production_variants`.
    ///
    /// To override the contents of this collection use [`set_shadow_production_variants`](Self::set_shadow_production_variants).
    ///
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>.</p>
    pub fn shadow_production_variants(mut self, input: crate::types::ProductionVariant) -> Self {
        let mut v = self.shadow_production_variants.unwrap_or_default();
        v.push(input);
        self.shadow_production_variants = Some(v);
        self
    }
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>.</p>
    pub fn set_shadow_production_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProductionVariant>>,
    ) -> Self {
        self.shadow_production_variants = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEndpointConfigOutput`](crate::operation::describe_endpoint_config::DescribeEndpointConfigOutput).
    pub fn build(self) -> crate::operation::describe_endpoint_config::DescribeEndpointConfigOutput {
        crate::operation::describe_endpoint_config::DescribeEndpointConfigOutput {
            endpoint_config_name: self.endpoint_config_name,
            endpoint_config_arn: self.endpoint_config_arn,
            production_variants: self.production_variants,
            data_capture_config: self.data_capture_config,
            kms_key_id: self.kms_key_id,
            creation_time: self.creation_time,
            async_inference_config: self.async_inference_config,
            explainer_config: self.explainer_config,
            shadow_production_variants: self.shadow_production_variants,
            _request_id: self._request_id,
        }
    }
}
