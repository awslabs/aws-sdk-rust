// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeMonitoringScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
    pub monitoring_schedule_arn: ::std::option::Option<::std::string::String>,
    /// <p>Name of the monitoring schedule.</p>
    pub monitoring_schedule_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of an monitoring job.</p>
    pub monitoring_schedule_status: ::std::option::Option<crate::types::ScheduleStatus>,
    /// <p>The type of the monitoring job that this schedule runs. This is one of the following values.</p>
    /// <ul>
    /// <li> <p> <code>DATA_QUALITY</code> - The schedule is for a data quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_QUALITY</code> - The schedule is for a model quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_BIAS</code> - The schedule is for a bias monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_EXPLAINABILITY</code> - The schedule is for an explainability monitoring job.</p> </li>
    /// </ul>
    pub monitoring_type: ::std::option::Option<crate::types::MonitoringType>,
    /// <p>A string, up to one KB in size, that contains the reason a monitoring job failed, if it failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the monitoring job was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the monitoring job was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The configuration object that specifies the monitoring schedule and defines the monitoring job.</p>
    pub monitoring_schedule_config: ::std::option::Option<crate::types::MonitoringScheduleConfig>,
    /// <p> The name of the endpoint for the monitoring job.</p>
    pub endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>Describes metadata on the last execution to run, if there was one.</p>
    pub last_monitoring_execution_summary: ::std::option::Option<crate::types::MonitoringExecutionSummary>,
    _request_id: Option<String>,
}
impl DescribeMonitoringScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
    pub fn monitoring_schedule_arn(&self) -> ::std::option::Option<&str> {
        self.monitoring_schedule_arn.as_deref()
    }
    /// <p>Name of the monitoring schedule.</p>
    pub fn monitoring_schedule_name(&self) -> ::std::option::Option<&str> {
        self.monitoring_schedule_name.as_deref()
    }
    /// <p>The status of an monitoring job.</p>
    pub fn monitoring_schedule_status(&self) -> ::std::option::Option<&crate::types::ScheduleStatus> {
        self.monitoring_schedule_status.as_ref()
    }
    /// <p>The type of the monitoring job that this schedule runs. This is one of the following values.</p>
    /// <ul>
    /// <li> <p> <code>DATA_QUALITY</code> - The schedule is for a data quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_QUALITY</code> - The schedule is for a model quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_BIAS</code> - The schedule is for a bias monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_EXPLAINABILITY</code> - The schedule is for an explainability monitoring job.</p> </li>
    /// </ul>
    pub fn monitoring_type(&self) -> ::std::option::Option<&crate::types::MonitoringType> {
        self.monitoring_type.as_ref()
    }
    /// <p>A string, up to one KB in size, that contains the reason a monitoring job failed, if it failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The time at which the monitoring job was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time at which the monitoring job was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The configuration object that specifies the monitoring schedule and defines the monitoring job.</p>
    pub fn monitoring_schedule_config(&self) -> ::std::option::Option<&crate::types::MonitoringScheduleConfig> {
        self.monitoring_schedule_config.as_ref()
    }
    /// <p> The name of the endpoint for the monitoring job.</p>
    pub fn endpoint_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>Describes metadata on the last execution to run, if there was one.</p>
    pub fn last_monitoring_execution_summary(&self) -> ::std::option::Option<&crate::types::MonitoringExecutionSummary> {
        self.last_monitoring_execution_summary.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeMonitoringScheduleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeMonitoringScheduleOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMonitoringScheduleOutput`](crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleOutput).
    pub fn builder() -> crate::operation::describe_monitoring_schedule::builders::DescribeMonitoringScheduleOutputBuilder {
        crate::operation::describe_monitoring_schedule::builders::DescribeMonitoringScheduleOutputBuilder::default()
    }
}

/// A builder for [`DescribeMonitoringScheduleOutput`](crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeMonitoringScheduleOutputBuilder {
    pub(crate) monitoring_schedule_arn: ::std::option::Option<::std::string::String>,
    pub(crate) monitoring_schedule_name: ::std::option::Option<::std::string::String>,
    pub(crate) monitoring_schedule_status: ::std::option::Option<crate::types::ScheduleStatus>,
    pub(crate) monitoring_type: ::std::option::Option<crate::types::MonitoringType>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) monitoring_schedule_config: ::std::option::Option<crate::types::MonitoringScheduleConfig>,
    pub(crate) endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_monitoring_execution_summary: ::std::option::Option<crate::types::MonitoringExecutionSummary>,
    _request_id: Option<String>,
}
impl DescribeMonitoringScheduleOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
    /// This field is required.
    pub fn monitoring_schedule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitoring_schedule_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
    pub fn set_monitoring_schedule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitoring_schedule_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
    pub fn get_monitoring_schedule_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitoring_schedule_arn
    }
    /// <p>Name of the monitoring schedule.</p>
    /// This field is required.
    pub fn monitoring_schedule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitoring_schedule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitoring_schedule_name = input;
        self
    }
    /// <p>Name of the monitoring schedule.</p>
    pub fn get_monitoring_schedule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitoring_schedule_name
    }
    /// <p>The status of an monitoring job.</p>
    /// This field is required.
    pub fn monitoring_schedule_status(mut self, input: crate::types::ScheduleStatus) -> Self {
        self.monitoring_schedule_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of an monitoring job.</p>
    pub fn set_monitoring_schedule_status(mut self, input: ::std::option::Option<crate::types::ScheduleStatus>) -> Self {
        self.monitoring_schedule_status = input;
        self
    }
    /// <p>The status of an monitoring job.</p>
    pub fn get_monitoring_schedule_status(&self) -> &::std::option::Option<crate::types::ScheduleStatus> {
        &self.monitoring_schedule_status
    }
    /// <p>The type of the monitoring job that this schedule runs. This is one of the following values.</p>
    /// <ul>
    /// <li> <p> <code>DATA_QUALITY</code> - The schedule is for a data quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_QUALITY</code> - The schedule is for a model quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_BIAS</code> - The schedule is for a bias monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_EXPLAINABILITY</code> - The schedule is for an explainability monitoring job.</p> </li>
    /// </ul>
    pub fn monitoring_type(mut self, input: crate::types::MonitoringType) -> Self {
        self.monitoring_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the monitoring job that this schedule runs. This is one of the following values.</p>
    /// <ul>
    /// <li> <p> <code>DATA_QUALITY</code> - The schedule is for a data quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_QUALITY</code> - The schedule is for a model quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_BIAS</code> - The schedule is for a bias monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_EXPLAINABILITY</code> - The schedule is for an explainability monitoring job.</p> </li>
    /// </ul>
    pub fn set_monitoring_type(mut self, input: ::std::option::Option<crate::types::MonitoringType>) -> Self {
        self.monitoring_type = input;
        self
    }
    /// <p>The type of the monitoring job that this schedule runs. This is one of the following values.</p>
    /// <ul>
    /// <li> <p> <code>DATA_QUALITY</code> - The schedule is for a data quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_QUALITY</code> - The schedule is for a model quality monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_BIAS</code> - The schedule is for a bias monitoring job.</p> </li>
    /// <li> <p> <code>MODEL_EXPLAINABILITY</code> - The schedule is for an explainability monitoring job.</p> </li>
    /// </ul>
    pub fn get_monitoring_type(&self) -> &::std::option::Option<crate::types::MonitoringType> {
        &self.monitoring_type
    }
    /// <p>A string, up to one KB in size, that contains the reason a monitoring job failed, if it failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string, up to one KB in size, that contains the reason a monitoring job failed, if it failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>A string, up to one KB in size, that contains the reason a monitoring job failed, if it failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The time at which the monitoring job was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the monitoring job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time at which the monitoring job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time at which the monitoring job was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the monitoring job was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The time at which the monitoring job was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The configuration object that specifies the monitoring schedule and defines the monitoring job.</p>
    /// This field is required.
    pub fn monitoring_schedule_config(mut self, input: crate::types::MonitoringScheduleConfig) -> Self {
        self.monitoring_schedule_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration object that specifies the monitoring schedule and defines the monitoring job.</p>
    pub fn set_monitoring_schedule_config(mut self, input: ::std::option::Option<crate::types::MonitoringScheduleConfig>) -> Self {
        self.monitoring_schedule_config = input;
        self
    }
    /// <p>The configuration object that specifies the monitoring schedule and defines the monitoring job.</p>
    pub fn get_monitoring_schedule_config(&self) -> &::std::option::Option<crate::types::MonitoringScheduleConfig> {
        &self.monitoring_schedule_config
    }
    /// <p> The name of the endpoint for the monitoring job.</p>
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the endpoint for the monitoring job.</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p> The name of the endpoint for the monitoring job.</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_name
    }
    /// <p>Describes metadata on the last execution to run, if there was one.</p>
    pub fn last_monitoring_execution_summary(mut self, input: crate::types::MonitoringExecutionSummary) -> Self {
        self.last_monitoring_execution_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes metadata on the last execution to run, if there was one.</p>
    pub fn set_last_monitoring_execution_summary(mut self, input: ::std::option::Option<crate::types::MonitoringExecutionSummary>) -> Self {
        self.last_monitoring_execution_summary = input;
        self
    }
    /// <p>Describes metadata on the last execution to run, if there was one.</p>
    pub fn get_last_monitoring_execution_summary(&self) -> &::std::option::Option<crate::types::MonitoringExecutionSummary> {
        &self.last_monitoring_execution_summary
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeMonitoringScheduleOutput`](crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleOutput).
    pub fn build(self) -> crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleOutput {
        crate::operation::describe_monitoring_schedule::DescribeMonitoringScheduleOutput {
            monitoring_schedule_arn: self.monitoring_schedule_arn,
            monitoring_schedule_name: self.monitoring_schedule_name,
            monitoring_schedule_status: self.monitoring_schedule_status,
            monitoring_type: self.monitoring_type,
            failure_reason: self.failure_reason,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            monitoring_schedule_config: self.monitoring_schedule_config,
            endpoint_name: self.endpoint_name,
            last_monitoring_execution_summary: self.last_monitoring_execution_summary,
            _request_id: self._request_id,
        }
    }
}
