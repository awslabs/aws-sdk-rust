// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_processing_job::_create_processing_job_output::CreateProcessingJobOutputBuilder;

pub use crate::operation::create_processing_job::_create_processing_job_input::CreateProcessingJobInputBuilder;

/// Fluent builder constructing a request to `CreateProcessingJob`.
///
/// <p>Creates a processing job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateProcessingJobFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_processing_job::builders::CreateProcessingJobInputBuilder,
}
impl CreateProcessingJobFluentBuilder {
    /// Creates a new `CreateProcessingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_processing_job::CreateProcessingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_processing_job::CreateProcessingJobError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_processing_job::CreateProcessingJobOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_processing_job::CreateProcessingJobError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `ProcessingInputs`.
    ///
    /// To override the contents of this collection use [`set_processing_inputs`](Self::set_processing_inputs).
    ///
    /// <p>An array of inputs configuring the data to download into the processing container.</p>
    pub fn processing_inputs(mut self, input: crate::types::ProcessingInput) -> Self {
        self.inner = self.inner.processing_inputs(input);
        self
    }
    /// <p>An array of inputs configuring the data to download into the processing container.</p>
    pub fn set_processing_inputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProcessingInput>>,
    ) -> Self {
        self.inner = self.inner.set_processing_inputs(input);
        self
    }
    /// <p>Output configuration for the processing job.</p>
    pub fn processing_output_config(mut self, input: crate::types::ProcessingOutputConfig) -> Self {
        self.inner = self.inner.processing_output_config(input);
        self
    }
    /// <p>Output configuration for the processing job.</p>
    pub fn set_processing_output_config(
        mut self,
        input: std::option::Option<crate::types::ProcessingOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_processing_output_config(input);
        self
    }
    /// <p> The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn processing_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.processing_job_name(input.into());
        self
    }
    /// <p> The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_processing_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_processing_job_name(input);
        self
    }
    /// <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.</p>
    pub fn processing_resources(mut self, input: crate::types::ProcessingResources) -> Self {
        self.inner = self.inner.processing_resources(input);
        self
    }
    /// <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.</p>
    pub fn set_processing_resources(
        mut self,
        input: std::option::Option<crate::types::ProcessingResources>,
    ) -> Self {
        self.inner = self.inner.set_processing_resources(input);
        self
    }
    /// <p>The time limit for how long the processing job is allowed to run.</p>
    pub fn stopping_condition(mut self, input: crate::types::ProcessingStoppingCondition) -> Self {
        self.inner = self.inner.stopping_condition(input);
        self
    }
    /// <p>The time limit for how long the processing job is allowed to run.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::types::ProcessingStoppingCondition>,
    ) -> Self {
        self.inner = self.inner.set_stopping_condition(input);
        self
    }
    /// <p>Configures the processing job to run a specified Docker container image.</p>
    pub fn app_specification(mut self, input: crate::types::AppSpecification) -> Self {
        self.inner = self.inner.app_specification(input);
        self
    }
    /// <p>Configures the processing job to run a specified Docker container image.</p>
    pub fn set_app_specification(
        mut self,
        input: std::option::Option<crate::types::AppSpecification>,
    ) -> Self {
        self.inner = self.inner.set_app_specification(input);
        self
    }
    /// Adds a key-value pair to `Environment`.
    ///
    /// To override the contents of this collection use [`set_environment`](Self::set_environment).
    ///
    /// <p>The environment variables to set in the Docker container. Up to 100 key and values entries in the map are supported.</p>
    pub fn environment(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.environment(k.into(), v.into());
        self
    }
    /// <p>The environment variables to set in the Docker container. Up to 100 key and values entries in the map are supported.</p>
    pub fn set_environment(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_environment(input);
        self
    }
    /// <p>Networking options for a processing job, such as whether to allow inbound and outbound network calls to and from processing containers, and the VPC subnets and security groups to use for VPC-enabled processing jobs.</p>
    pub fn network_config(mut self, input: crate::types::NetworkConfig) -> Self {
        self.inner = self.inner.network_config(input);
        self
    }
    /// <p>Networking options for a processing job, such as whether to allow inbound and outbound network calls to and from processing containers, and the VPC subnets and security groups to use for VPC-enabled processing jobs.</p>
    pub fn set_network_config(
        mut self,
        input: std::option::Option<crate::types::NetworkConfig>,
    ) -> Self {
        self.inner = self.inner.set_network_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn experiment_config(mut self, input: crate::types::ExperimentConfig) -> Self {
        self.inner = self.inner.experiment_config(input);
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn set_experiment_config(
        mut self,
        input: std::option::Option<crate::types::ExperimentConfig>,
    ) -> Self {
        self.inner = self.inner.set_experiment_config(input);
        self
    }
}
