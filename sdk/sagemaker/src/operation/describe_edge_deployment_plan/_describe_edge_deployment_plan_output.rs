// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEdgeDeploymentPlanOutput {
    /// <p>The ARN of edge deployment plan.</p>
    #[doc(hidden)]
    pub edge_deployment_plan_arn: std::option::Option<std::string::String>,
    /// <p>The name of the edge deployment plan.</p>
    #[doc(hidden)]
    pub edge_deployment_plan_name: std::option::Option<std::string::String>,
    /// <p>List of models associated with the edge deployment plan.</p>
    #[doc(hidden)]
    pub model_configs: std::option::Option<std::vec::Vec<crate::types::EdgeDeploymentModelConfig>>,
    /// <p>The device fleet used for this edge deployment plan.</p>
    #[doc(hidden)]
    pub device_fleet_name: std::option::Option<std::string::String>,
    /// <p>The number of edge devices with the successful deployment.</p>
    #[doc(hidden)]
    pub edge_deployment_success: i32,
    /// <p>The number of edge devices yet to pick up deployment, or in progress.</p>
    #[doc(hidden)]
    pub edge_deployment_pending: i32,
    /// <p>The number of edge devices that failed the deployment.</p>
    #[doc(hidden)]
    pub edge_deployment_failed: i32,
    /// <p>List of stages in the edge deployment plan.</p>
    #[doc(hidden)]
    pub stages: std::option::Option<std::vec::Vec<crate::types::DeploymentStageStatusSummary>>,
    /// <p>Token to use when calling the next set of stages in the edge deployment plan.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The time when the edge deployment plan was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the edge deployment plan was last updated.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeEdgeDeploymentPlanOutput {
    /// <p>The ARN of edge deployment plan.</p>
    pub fn edge_deployment_plan_arn(&self) -> std::option::Option<&str> {
        self.edge_deployment_plan_arn.as_deref()
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn edge_deployment_plan_name(&self) -> std::option::Option<&str> {
        self.edge_deployment_plan_name.as_deref()
    }
    /// <p>List of models associated with the edge deployment plan.</p>
    pub fn model_configs(&self) -> std::option::Option<&[crate::types::EdgeDeploymentModelConfig]> {
        self.model_configs.as_deref()
    }
    /// <p>The device fleet used for this edge deployment plan.</p>
    pub fn device_fleet_name(&self) -> std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
    /// <p>The number of edge devices with the successful deployment.</p>
    pub fn edge_deployment_success(&self) -> i32 {
        self.edge_deployment_success
    }
    /// <p>The number of edge devices yet to pick up deployment, or in progress.</p>
    pub fn edge_deployment_pending(&self) -> i32 {
        self.edge_deployment_pending
    }
    /// <p>The number of edge devices that failed the deployment.</p>
    pub fn edge_deployment_failed(&self) -> i32 {
        self.edge_deployment_failed
    }
    /// <p>List of stages in the edge deployment plan.</p>
    pub fn stages(&self) -> std::option::Option<&[crate::types::DeploymentStageStatusSummary]> {
        self.stages.as_deref()
    }
    /// <p>Token to use when calling the next set of stages in the edge deployment plan.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The time when the edge deployment plan was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time when the edge deployment plan was last updated.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeEdgeDeploymentPlanOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEdgeDeploymentPlanOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEdgeDeploymentPlanOutput`](crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanOutput).
    pub fn builder() -> crate::operation::describe_edge_deployment_plan::builders::DescribeEdgeDeploymentPlanOutputBuilder{
        crate::operation::describe_edge_deployment_plan::builders::DescribeEdgeDeploymentPlanOutputBuilder::default()
    }
}

/// A builder for [`DescribeEdgeDeploymentPlanOutput`](crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEdgeDeploymentPlanOutputBuilder {
    pub(crate) edge_deployment_plan_arn: std::option::Option<std::string::String>,
    pub(crate) edge_deployment_plan_name: std::option::Option<std::string::String>,
    pub(crate) model_configs:
        std::option::Option<std::vec::Vec<crate::types::EdgeDeploymentModelConfig>>,
    pub(crate) device_fleet_name: std::option::Option<std::string::String>,
    pub(crate) edge_deployment_success: std::option::Option<i32>,
    pub(crate) edge_deployment_pending: std::option::Option<i32>,
    pub(crate) edge_deployment_failed: std::option::Option<i32>,
    pub(crate) stages:
        std::option::Option<std::vec::Vec<crate::types::DeploymentStageStatusSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeEdgeDeploymentPlanOutputBuilder {
    /// <p>The ARN of edge deployment plan.</p>
    pub fn edge_deployment_plan_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.edge_deployment_plan_arn = Some(input.into());
        self
    }
    /// <p>The ARN of edge deployment plan.</p>
    pub fn set_edge_deployment_plan_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.edge_deployment_plan_arn = input;
        self
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.edge_deployment_plan_name = Some(input.into());
        self
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.edge_deployment_plan_name = input;
        self
    }
    /// Appends an item to `model_configs`.
    ///
    /// To override the contents of this collection use [`set_model_configs`](Self::set_model_configs).
    ///
    /// <p>List of models associated with the edge deployment plan.</p>
    pub fn model_configs(mut self, input: crate::types::EdgeDeploymentModelConfig) -> Self {
        let mut v = self.model_configs.unwrap_or_default();
        v.push(input);
        self.model_configs = Some(v);
        self
    }
    /// <p>List of models associated with the edge deployment plan.</p>
    pub fn set_model_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EdgeDeploymentModelConfig>>,
    ) -> Self {
        self.model_configs = input;
        self
    }
    /// <p>The device fleet used for this edge deployment plan.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_fleet_name = Some(input.into());
        self
    }
    /// <p>The device fleet used for this edge deployment plan.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// <p>The number of edge devices with the successful deployment.</p>
    pub fn edge_deployment_success(mut self, input: i32) -> Self {
        self.edge_deployment_success = Some(input);
        self
    }
    /// <p>The number of edge devices with the successful deployment.</p>
    pub fn set_edge_deployment_success(mut self, input: std::option::Option<i32>) -> Self {
        self.edge_deployment_success = input;
        self
    }
    /// <p>The number of edge devices yet to pick up deployment, or in progress.</p>
    pub fn edge_deployment_pending(mut self, input: i32) -> Self {
        self.edge_deployment_pending = Some(input);
        self
    }
    /// <p>The number of edge devices yet to pick up deployment, or in progress.</p>
    pub fn set_edge_deployment_pending(mut self, input: std::option::Option<i32>) -> Self {
        self.edge_deployment_pending = input;
        self
    }
    /// <p>The number of edge devices that failed the deployment.</p>
    pub fn edge_deployment_failed(mut self, input: i32) -> Self {
        self.edge_deployment_failed = Some(input);
        self
    }
    /// <p>The number of edge devices that failed the deployment.</p>
    pub fn set_edge_deployment_failed(mut self, input: std::option::Option<i32>) -> Self {
        self.edge_deployment_failed = input;
        self
    }
    /// Appends an item to `stages`.
    ///
    /// To override the contents of this collection use [`set_stages`](Self::set_stages).
    ///
    /// <p>List of stages in the edge deployment plan.</p>
    pub fn stages(mut self, input: crate::types::DeploymentStageStatusSummary) -> Self {
        let mut v = self.stages.unwrap_or_default();
        v.push(input);
        self.stages = Some(v);
        self
    }
    /// <p>List of stages in the edge deployment plan.</p>
    pub fn set_stages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeploymentStageStatusSummary>>,
    ) -> Self {
        self.stages = input;
        self
    }
    /// <p>Token to use when calling the next set of stages in the edge deployment plan.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Token to use when calling the next set of stages in the edge deployment plan.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The time when the edge deployment plan was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time when the edge deployment plan was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when the edge deployment plan was last updated.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The time when the edge deployment plan was last updated.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEdgeDeploymentPlanOutput`](crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanOutput {
        crate::operation::describe_edge_deployment_plan::DescribeEdgeDeploymentPlanOutput {
            edge_deployment_plan_arn: self.edge_deployment_plan_arn,
            edge_deployment_plan_name: self.edge_deployment_plan_name,
            model_configs: self.model_configs,
            device_fleet_name: self.device_fleet_name,
            edge_deployment_success: self.edge_deployment_success.unwrap_or_default(),
            edge_deployment_pending: self.edge_deployment_pending.unwrap_or_default(),
            edge_deployment_failed: self.edge_deployment_failed.unwrap_or_default(),
            stages: self.stages,
            next_token: self.next_token,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            _request_id: self._request_id,
        }
    }
}
