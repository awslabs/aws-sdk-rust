// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_candidates_for_auto_ml_job::_list_candidates_for_auto_ml_job_output::ListCandidatesForAutoMlJobOutputBuilder;

pub use crate::operation::list_candidates_for_auto_ml_job::_list_candidates_for_auto_ml_job_input::ListCandidatesForAutoMlJobInputBuilder;

/// Fluent builder constructing a request to `ListCandidatesForAutoMLJob`.
///
/// <p>List the candidates created for the job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCandidatesForAutoMLJobFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_candidates_for_auto_ml_job::builders::ListCandidatesForAutoMlJobInputBuilder
            }
impl ListCandidatesForAutoMLJobFluentBuilder {
    /// Creates a new `ListCandidatesForAutoMLJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMLJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMLJobError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMlJobOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_candidates_for_auto_ml_job::ListCandidatesForAutoMLJobError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_candidates_for_auto_ml_job::paginator::ListCandidatesForAutoMlJobPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_candidates_for_auto_ml_job::paginator::ListCandidatesForAutoMlJobPaginator{
        crate::operation::list_candidates_for_auto_ml_job::paginator::ListCandidatesForAutoMlJobPaginator::new(self.handle, self.inner)
    }
    /// <p>List the candidates created for the job by providing the job's name.</p>
    pub fn auto_ml_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_ml_job_name(input.into());
        self
    }
    /// <p>List the candidates created for the job by providing the job's name.</p>
    pub fn set_auto_ml_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_auto_ml_job_name(input);
        self
    }
    /// <p>List the candidates for the job and filter by status.</p>
    pub fn status_equals(mut self, input: crate::types::CandidateStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>List the candidates for the job and filter by status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::types::CandidateStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>List the candidates for the job and filter by candidate name.</p>
    pub fn candidate_name_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.candidate_name_equals(input.into());
        self
    }
    /// <p>List the candidates for the job and filter by candidate name.</p>
    pub fn set_candidate_name_equals(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_candidate_name_equals(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::types::AutoMlSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::types::AutoMlSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>Descending</code>.</p>
    pub fn sort_by(mut self, input: crate::types::CandidateSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>Descending</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::CandidateSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>List the job's candidates up to a specified limit.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>List the job's candidates up to a specified limit.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
