// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDeviceOutput {
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub device_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the device.</p>
    pub device_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the device.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the fleet the device belongs to.</p>
    pub device_fleet_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device.</p>
    pub iot_thing_name: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the last registration or de-reregistration.</p>
    pub registration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last heartbeat received from the device.</p>
    pub latest_heartbeat: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Models on the device.</p>
    pub models: ::std::option::Option<::std::vec::Vec<crate::types::EdgeModel>>,
    /// <p>The maximum number of models.</p>
    pub max_models: ::std::option::Option<i32>,
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Edge Manager agent version.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDeviceOutput {
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn device_arn(&self) -> ::std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>The unique identifier of the device.</p>
    pub fn device_name(&self) -> ::std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>A description of the device.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the fleet the device belongs to.</p>
    pub fn device_fleet_name(&self) -> ::std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
    /// <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device.</p>
    pub fn iot_thing_name(&self) -> ::std::option::Option<&str> {
        self.iot_thing_name.as_deref()
    }
    /// <p>The timestamp of the last registration or de-reregistration.</p>
    pub fn registration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.registration_time.as_ref()
    }
    /// <p>The last heartbeat received from the device.</p>
    pub fn latest_heartbeat(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.latest_heartbeat.as_ref()
    }
    /// <p>Models on the device.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.models.is_none()`.
    pub fn models(&self) -> &[crate::types::EdgeModel] {
        self.models.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of models.</p>
    pub fn max_models(&self) -> ::std::option::Option<i32> {
        self.max_models
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Edge Manager agent version.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeDeviceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDeviceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDeviceOutput`](crate::operation::describe_device::DescribeDeviceOutput).
    pub fn builder() -> crate::operation::describe_device::builders::DescribeDeviceOutputBuilder {
        crate::operation::describe_device::builders::DescribeDeviceOutputBuilder::default()
    }
}

/// A builder for [`DescribeDeviceOutput`](crate::operation::describe_device::DescribeDeviceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeDeviceOutputBuilder {
    pub(crate) device_arn: ::std::option::Option<::std::string::String>,
    pub(crate) device_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) device_fleet_name: ::std::option::Option<::std::string::String>,
    pub(crate) iot_thing_name: ::std::option::Option<::std::string::String>,
    pub(crate) registration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) latest_heartbeat: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) models: ::std::option::Option<::std::vec::Vec<crate::types::EdgeModel>>,
    pub(crate) max_models: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDeviceOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn device_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn set_device_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn get_device_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_arn
    }
    /// <p>The unique identifier of the device.</p>
    /// This field is required.
    pub fn device_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the device.</p>
    pub fn set_device_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The unique identifier of the device.</p>
    pub fn get_device_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_name
    }
    /// <p>A description of the device.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the device.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the device.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the fleet the device belongs to.</p>
    /// This field is required.
    pub fn device_fleet_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_fleet_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the fleet the device belongs to.</p>
    pub fn set_device_fleet_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// <p>The name of the fleet the device belongs to.</p>
    pub fn get_device_fleet_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_fleet_name
    }
    /// <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device.</p>
    pub fn iot_thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iot_thing_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device.</p>
    pub fn set_iot_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iot_thing_name = input;
        self
    }
    /// <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device.</p>
    pub fn get_iot_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.iot_thing_name
    }
    /// <p>The timestamp of the last registration or de-reregistration.</p>
    /// This field is required.
    pub fn registration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.registration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the last registration or de-reregistration.</p>
    pub fn set_registration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.registration_time = input;
        self
    }
    /// <p>The timestamp of the last registration or de-reregistration.</p>
    pub fn get_registration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.registration_time
    }
    /// <p>The last heartbeat received from the device.</p>
    pub fn latest_heartbeat(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.latest_heartbeat = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last heartbeat received from the device.</p>
    pub fn set_latest_heartbeat(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.latest_heartbeat = input;
        self
    }
    /// <p>The last heartbeat received from the device.</p>
    pub fn get_latest_heartbeat(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.latest_heartbeat
    }
    /// Appends an item to `models`.
    ///
    /// To override the contents of this collection use [`set_models`](Self::set_models).
    ///
    /// <p>Models on the device.</p>
    pub fn models(mut self, input: crate::types::EdgeModel) -> Self {
        let mut v = self.models.unwrap_or_default();
        v.push(input);
        self.models = ::std::option::Option::Some(v);
        self
    }
    /// <p>Models on the device.</p>
    pub fn set_models(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EdgeModel>>) -> Self {
        self.models = input;
        self
    }
    /// <p>Models on the device.</p>
    pub fn get_models(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EdgeModel>> {
        &self.models
    }
    /// <p>The maximum number of models.</p>
    pub fn max_models(mut self, input: i32) -> Self {
        self.max_models = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of models.</p>
    pub fn set_max_models(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_models = input;
        self
    }
    /// <p>The maximum number of models.</p>
    pub fn get_max_models(&self) -> &::std::option::Option<i32> {
        &self.max_models
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Edge Manager agent version.</p>
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Edge Manager agent version.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>Edge Manager agent version.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDeviceOutput`](crate::operation::describe_device::DescribeDeviceOutput).
    pub fn build(self) -> crate::operation::describe_device::DescribeDeviceOutput {
        crate::operation::describe_device::DescribeDeviceOutput {
            device_arn: self.device_arn,
            device_name: self.device_name,
            description: self.description,
            device_fleet_name: self.device_fleet_name,
            iot_thing_name: self.iot_thing_name,
            registration_time: self.registration_time,
            latest_heartbeat: self.latest_heartbeat,
            models: self.models,
            max_models: self.max_models,
            next_token: self.next_token,
            agent_version: self.agent_version,
            _request_id: self._request_id,
        }
    }
}
