// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLineageGroupsInput {
    /// <p>A timestamp to filter against lineage groups created after a certain point in time.</p>
    #[doc(hidden)]
    pub created_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A timestamp to filter against lineage groups created before a certain point in time.</p>
    #[doc(hidden)]
    pub created_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::SortLineageGroupsBy>,
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of endpoints to return in the response. This value defaults to 10.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListLineageGroupsInput {
    /// <p>A timestamp to filter against lineage groups created after a certain point in time.</p>
    pub fn created_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_after.as_ref()
    }
    /// <p>A timestamp to filter against lineage groups created before a certain point in time.</p>
    pub fn created_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_before.as_ref()
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::SortLineageGroupsBy> {
        self.sort_by.as_ref()
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of endpoints to return in the response. This value defaults to 10.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListLineageGroupsInput {
    /// Creates a new builder-style object to manufacture [`ListLineageGroupsInput`](crate::operation::list_lineage_groups::ListLineageGroupsInput).
    pub fn builder(
    ) -> crate::operation::list_lineage_groups::builders::ListLineageGroupsInputBuilder {
        crate::operation::list_lineage_groups::builders::ListLineageGroupsInputBuilder::default()
    }
}

/// A builder for [`ListLineageGroupsInput`](crate::operation::list_lineage_groups::ListLineageGroupsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListLineageGroupsInputBuilder {
    pub(crate) created_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) sort_by: std::option::Option<crate::types::SortLineageGroupsBy>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListLineageGroupsInputBuilder {
    /// <p>A timestamp to filter against lineage groups created after a certain point in time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_after = Some(input);
        self
    }
    /// <p>A timestamp to filter against lineage groups created after a certain point in time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_after = input;
        self
    }
    /// <p>A timestamp to filter against lineage groups created before a certain point in time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_before = Some(input);
        self
    }
    /// <p>A timestamp to filter against lineage groups created before a certain point in time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_before = input;
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::types::SortLineageGroupsBy) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::SortLineageGroupsBy>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of endpoints to return in the response. This value defaults to 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of endpoints to return in the response. This value defaults to 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListLineageGroupsInput`](crate::operation::list_lineage_groups::ListLineageGroupsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_lineage_groups::ListLineageGroupsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_lineage_groups::ListLineageGroupsInput {
                created_after: self.created_after,
                created_before: self.created_before,
                sort_by: self.sort_by,
                sort_order: self.sort_order,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
