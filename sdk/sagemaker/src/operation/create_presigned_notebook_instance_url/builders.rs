// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_presigned_notebook_instance_url::_create_presigned_notebook_instance_url_output::CreatePresignedNotebookInstanceUrlOutputBuilder;

pub use crate::operation::create_presigned_notebook_instance_url::_create_presigned_notebook_instance_url_input::CreatePresignedNotebookInstanceUrlInputBuilder;

/// Fluent builder constructing a request to `CreatePresignedNotebookInstanceUrl`.
///
/// <p>Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose <code>Open</code> next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page.</p>
/// <p> The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance.</p>
/// <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the <code>aws:SourceIP</code> condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit Access to a Notebook Instance by IP Address</a>.</p> <note>
/// <p>The URL that you get from a call to <code>CreatePresignedNotebookInstanceUrl</code> is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePresignedNotebookInstanceUrlFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_presigned_notebook_instance_url::builders::CreatePresignedNotebookInstanceUrlInputBuilder
            }
impl CreatePresignedNotebookInstanceUrlFluentBuilder {
    /// Creates a new `CreatePresignedNotebookInstanceUrl`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::create_presigned_notebook_instance_url::CreatePresignedNotebookInstanceUrl, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::create_presigned_notebook_instance_url::CreatePresignedNotebookInstanceUrlError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::create_presigned_notebook_instance_url::CreatePresignedNotebookInstanceUrlOutput, aws_smithy_http::result::SdkError<crate::operation::create_presigned_notebook_instance_url::CreatePresignedNotebookInstanceUrlError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the notebook instance.</p>
    pub fn notebook_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_name(input.into());
        self
    }
    /// <p>The name of the notebook instance.</p>
    pub fn set_notebook_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_notebook_instance_name(input);
        self
    }
    /// <p>The duration of the session, in seconds. The default is 12 hours.</p>
    pub fn session_expiration_duration_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.session_expiration_duration_in_seconds(input);
        self
    }
    /// <p>The duration of the session, in seconds. The default is 12 hours.</p>
    pub fn set_session_expiration_duration_in_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_session_expiration_duration_in_seconds(input);
        self
    }
}
