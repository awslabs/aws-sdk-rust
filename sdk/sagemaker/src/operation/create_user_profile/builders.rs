// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_user_profile::_create_user_profile_output::CreateUserProfileOutputBuilder;

pub use crate::operation::create_user_profile::_create_user_profile_input::CreateUserProfileInputBuilder;

/// Fluent builder constructing a request to `CreateUserProfile`.
///
/// <p>Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a "person" for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user's private Amazon Elastic File System (EFS) home directory. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateUserProfileFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_user_profile::builders::CreateUserProfileInputBuilder,
}
impl CreateUserProfileFluentBuilder {
    /// Creates a new `CreateUserProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_user_profile::CreateUserProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_user_profile::CreateUserProfileError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_user_profile::CreateUserProfileOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_user_profile::CreateUserProfileError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>A name for the UserProfile. This value is not case sensitive.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>A name for the UserProfile. This value is not case sensitive.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
    /// <p>A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain's AuthMode is IAM Identity Center, this field is required. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified. </p>
    pub fn single_sign_on_user_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.single_sign_on_user_identifier(input.into());
        self
    }
    /// <p>A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain's AuthMode is IAM Identity Center, this field is required. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified. </p>
    pub fn set_single_sign_on_user_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_single_sign_on_user_identifier(input);
        self
    }
    /// <p>The username of the associated Amazon Web Services Single Sign-On User for this UserProfile. If the Domain's AuthMode is IAM Identity Center, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified. </p>
    pub fn single_sign_on_user_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.single_sign_on_user_value(input.into());
        self
    }
    /// <p>The username of the associated Amazon Web Services Single Sign-On User for this UserProfile. If the Domain's AuthMode is IAM Identity Center, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified. </p>
    pub fn set_single_sign_on_user_value(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_single_sign_on_user_value(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    /// <p>Tags that you specify for the User Profile are also added to all Apps that the User Profile launches.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    /// <p>Tags that you specify for the User Profile are also added to all Apps that the User Profile launches.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn user_settings(mut self, input: crate::types::UserSettings) -> Self {
        self.inner = self.inner.user_settings(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn set_user_settings(
        mut self,
        input: std::option::Option<crate::types::UserSettings>,
    ) -> Self {
        self.inner = self.inner.set_user_settings(input);
        self
    }
}
