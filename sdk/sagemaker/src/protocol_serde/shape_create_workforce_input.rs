// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_workforce_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_workforce::CreateWorkforceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cognito_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("CognitoConfig").start_object();
        crate::protocol_serde::shape_cognito_config::ser_cognito_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.oidc_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("OidcConfig").start_object();
        crate::protocol_serde::shape_oidc_config::ser_oidc_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.source_ip_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("SourceIpConfig").start_object();
        crate::protocol_serde::shape_source_ip_config::ser_source_ip_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.workforce_name {
        object.key("WorkforceName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.workforce_vpc_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("WorkforceVpcConfig").start_object();
        crate::protocol_serde::shape_workforce_vpc_config_request::ser_workforce_vpc_config_request(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}
