// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_notebook_instance_input(
    input: &crate::operation::describe_notebook_instance::DescribeNotebookInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_describe_notebook_instance_input::ser_describe_notebook_instance_input(&mut object, input)?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_notebook_instance_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_notebook_instance::DescribeNotebookInstanceOutput,
    crate::operation::describe_notebook_instance::DescribeNotebookInstanceError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(
        crate::operation::describe_notebook_instance::DescribeNotebookInstanceError::unhandled,
    )?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(
        crate::operation::describe_notebook_instance::DescribeNotebookInstanceError::generic(
            generic,
        ),
    )
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_notebook_instance_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_notebook_instance::DescribeNotebookInstanceOutput,
    crate::operation::describe_notebook_instance::DescribeNotebookInstanceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_notebook_instance::builders::DescribeNotebookInstanceOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_describe_notebook_instance::de_describe_notebook_instance(response.body().as_ref(), output).map_err(crate::operation::describe_notebook_instance::DescribeNotebookInstanceError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_describe_notebook_instance(
    value: &[u8],
    mut builder: crate::operation::describe_notebook_instance::builders::DescribeNotebookInstanceOutputBuilder,
) -> Result<
    crate::operation::describe_notebook_instance::builders::DescribeNotebookInstanceOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "NotebookInstanceArn" => {
                        builder = builder.set_notebook_instance_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "NotebookInstanceName" => {
                        builder = builder.set_notebook_instance_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "NotebookInstanceStatus" => {
                        builder = builder.set_notebook_instance_status(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| {
                                s.to_unescaped()
                                    .map(|u| crate::types::NotebookInstanceStatus::from(u.as_ref()))
                            })
                            .transpose()?,
                        );
                    }
                    "FailureReason" => {
                        builder = builder.set_failure_reason(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "Url" => {
                        builder = builder.set_url(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "InstanceType" => {
                        builder = builder.set_instance_type(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| {
                                s.to_unescaped()
                                    .map(|u| crate::types::InstanceType::from(u.as_ref()))
                            })
                            .transpose()?,
                        );
                    }
                    "SubnetId" => {
                        builder = builder.set_subnet_id(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "SecurityGroups" => {
                        builder = builder.set_security_groups(
                            crate::protocol_serde::shape_security_group_ids::de_security_group_ids(
                                tokens,
                            )?,
                        );
                    }
                    "RoleArn" => {
                        builder = builder.set_role_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "KmsKeyId" => {
                        builder = builder.set_kms_key_id(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "NetworkInterfaceId" => {
                        builder = builder.set_network_interface_id(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "LastModifiedTime" => {
                        builder = builder.set_last_modified_time(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "CreationTime" => {
                        builder = builder.set_creation_time(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "NotebookInstanceLifecycleConfigName" => {
                        builder = builder.set_notebook_instance_lifecycle_config_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "DirectInternetAccess" => {
                        builder = builder.set_direct_internet_access(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| {
                                s.to_unescaped()
                                    .map(|u| crate::types::DirectInternetAccess::from(u.as_ref()))
                            })
                            .transpose()?,
                        );
                    }
                    "VolumeSizeInGB" => {
                        builder = builder.set_volume_size_in_gb(
                            aws_smithy_json::deserialize::token::expect_number_or_null(
                                tokens.next(),
                            )?
                            .map(i32::try_from)
                            .transpose()?,
                        );
                    }
                    "AcceleratorTypes" => {
                        builder = builder.set_accelerator_types(
                            crate::protocol_serde::shape_notebook_instance_accelerator_types::de_notebook_instance_accelerator_types(tokens)?
                        );
                    }
                    "DefaultCodeRepository" => {
                        builder = builder.set_default_code_repository(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "AdditionalCodeRepositories" => {
                        builder = builder.set_additional_code_repositories(
                            crate::protocol_serde::shape_additional_code_repository_names_or_urls::de_additional_code_repository_names_or_urls(tokens)?
                        );
                    }
                    "RootAccess" => {
                        builder = builder.set_root_access(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| {
                                s.to_unescaped()
                                    .map(|u| crate::types::RootAccess::from(u.as_ref()))
                            })
                            .transpose()?,
                        );
                    }
                    "PlatformIdentifier" => {
                        builder = builder.set_platform_identifier(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "InstanceMetadataServiceConfiguration" => {
                        builder = builder.set_instance_metadata_service_configuration(
                            crate::protocol_serde::shape_instance_metadata_service_configuration::de_instance_metadata_service_configuration(tokens)?
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
