// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_model_package<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::ModelPackage>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ModelPackageBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ModelPackageName" => {
                                builder = builder.set_model_package_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ModelPackageGroupName" => {
                                builder = builder.set_model_package_group_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ModelPackageVersion" => {
                                builder = builder.set_model_package_version(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "ModelPackageArn" => {
                                builder = builder.set_model_package_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ModelPackageDescription" => {
                                builder = builder.set_model_package_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CreationTime" => {
                                builder = builder.set_creation_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "InferenceSpecification" => {
                                builder = builder.set_inference_specification(
                                    crate::protocol_serde::shape_inference_specification::de_inference_specification(tokens)?
                                );
                            }
                            "SourceAlgorithmSpecification" => {
                                builder = builder.set_source_algorithm_specification(
                                    crate::protocol_serde::shape_source_algorithm_specification::de_source_algorithm_specification(tokens)?
                                );
                            }
                            "ValidationSpecification" => {
                                builder = builder.set_validation_specification(
                                    crate::protocol_serde::shape_model_package_validation_specification::de_model_package_validation_specification(tokens)?
                                );
                            }
                            "ModelPackageStatus" => {
                                builder = builder.set_model_package_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ModelPackageStatus::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ModelPackageStatusDetails" => {
                                builder = builder.set_model_package_status_details(
                                    crate::protocol_serde::shape_model_package_status_details::de_model_package_status_details(tokens)?
                                );
                            }
                            "CertifyForMarketplace" => {
                                builder = builder.set_certify_for_marketplace(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ModelApprovalStatus" => {
                                builder = builder.set_model_approval_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ModelApprovalStatus::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "CreatedBy" => {
                                builder = builder.set_created_by(
                                    crate::protocol_serde::shape_user_context::de_user_context(
                                        tokens,
                                    )?,
                                );
                            }
                            "MetadataProperties" => {
                                builder = builder.set_metadata_properties(
                                    crate::protocol_serde::shape_metadata_properties::de_metadata_properties(tokens)?
                                );
                            }
                            "ModelMetrics" => {
                                builder = builder.set_model_metrics(
                                    crate::protocol_serde::shape_model_metrics::de_model_metrics(
                                        tokens,
                                    )?,
                                );
                            }
                            "LastModifiedTime" => {
                                builder = builder.set_last_modified_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "LastModifiedBy" => {
                                builder = builder.set_last_modified_by(
                                    crate::protocol_serde::shape_user_context::de_user_context(
                                        tokens,
                                    )?,
                                );
                            }
                            "ApprovalDescription" => {
                                builder = builder.set_approval_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Domain" => {
                                builder = builder.set_domain(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Task" => {
                                builder = builder.set_task(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SamplePayloadUrl" => {
                                builder = builder.set_sample_payload_url(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AdditionalInferenceSpecifications" => {
                                builder = builder.set_additional_inference_specifications(
                                    crate::protocol_serde::shape_additional_inference_specifications::de_additional_inference_specifications(tokens)?
                                );
                            }
                            "Tags" => {
                                builder = builder.set_tags(
                                    crate::protocol_serde::shape_tag_list::de_tag_list(tokens)?,
                                );
                            }
                            "CustomerMetadataProperties" => {
                                builder = builder.set_customer_metadata_properties(
                                    crate::protocol_serde::shape_customer_metadata_map::de_customer_metadata_map(tokens)?
                                );
                            }
                            "DriftCheckBaselines" => {
                                builder = builder.set_drift_check_baselines(
                                    crate::protocol_serde::shape_drift_check_baselines::de_drift_check_baselines(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
