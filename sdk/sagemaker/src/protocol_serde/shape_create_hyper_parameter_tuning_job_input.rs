// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_hyper_parameter_tuning_job::CreateHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_1.as_str());
    }
    if let Some(var_2) = &input.hyper_parameter_tuning_job_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::protocol_serde::shape_hyper_parameter_tuning_job_config::ser_hyper_parameter_tuning_job_config(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.training_job_definition {
        #[allow(unused_mut)]
        let mut object_5 = object.key("TrainingJobDefinition").start_object();
        crate::protocol_serde::shape_hyper_parameter_training_job_definition::ser_hyper_parameter_training_job_definition(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.training_job_definitions {
        let mut array_7 = object.key("TrainingJobDefinitions").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_hyper_parameter_training_job_definition::ser_hyper_parameter_training_job_definition(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.warm_start_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("WarmStartConfig").start_object();
        crate::protocol_serde::shape_hyper_parameter_tuning_job_warm_start_config::ser_hyper_parameter_tuning_job_warm_start_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
