// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_query_lineage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::query_lineage::QueryLineageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.start_arns {
        let mut array_2 = object.key("StartArns").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.direction {
        object.key("Direction").string(var_4.as_str());
    }
    if input.include_edges {
        object.key("IncludeEdges").boolean(input.include_edges);
    }
    if let Some(var_5) = &input.filters {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Filters").start_object();
        crate::protocol_serde::shape_query_filters::ser_query_filters(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.max_depth {
        object.key("MaxDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.next_token {
        object.key("NextToken").string(var_9.as_str());
    }
    Ok(())
}
