// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_recommendation_job_container_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RecommendationJobContainerConfig,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.domain {
        object.key("Domain").string(var_1.as_str());
    }
    if let Some(var_2) = &input.task {
        object.key("Task").string(var_2.as_str());
    }
    if let Some(var_3) = &input.framework {
        object.key("Framework").string(var_3.as_str());
    }
    if let Some(var_4) = &input.framework_version {
        object.key("FrameworkVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.payload_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("PayloadConfig").start_object();
        crate::protocol_serde::shape_recommendation_job_payload_config::ser_recommendation_job_payload_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.nearest_model_name {
        object.key("NearestModelName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.supported_instance_types {
        let mut array_9 = object.key("SupportedInstanceTypes").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.data_input_config {
        object.key("DataInputConfig").string(var_11.as_str());
    }
    if let Some(var_12) = &input.supported_endpoint_type {
        object.key("SupportedEndpointType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.supported_response_mime_types {
        let mut array_14 = object.key("SupportedResponseMIMETypes").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    Ok(())
}

pub(crate) fn de_recommendation_job_container_config<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::RecommendationJobContainerConfig>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RecommendationJobContainerConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Domain" => {
                            builder = builder.set_domain(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Task" => {
                            builder = builder.set_task(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Framework" => {
                            builder = builder.set_framework(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "FrameworkVersion" => {
                            builder = builder.set_framework_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PayloadConfig" => {
                            builder = builder.set_payload_config(
                                crate::protocol_serde::shape_recommendation_job_payload_config::de_recommendation_job_payload_config(tokens)?,
                            );
                        }
                        "NearestModelName" => {
                            builder = builder.set_nearest_model_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SupportedInstanceTypes" => {
                            builder = builder.set_supported_instance_types(
                                    crate::protocol_serde::shape_recommendation_job_supported_instance_types::de_recommendation_job_supported_instance_types(tokens)?
                                );
                        }
                        "DataInputConfig" => {
                            builder = builder.set_data_input_config(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SupportedEndpointType" => {
                            builder = builder.set_supported_endpoint_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::RecommendationJobSupportedEndpointType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "SupportedResponseMIMETypes" => {
                            builder = builder.set_supported_response_mime_types(
                                    crate::protocol_serde::shape_recommendation_job_supported_response_mime_types::de_recommendation_job_supported_response_mime_types(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
