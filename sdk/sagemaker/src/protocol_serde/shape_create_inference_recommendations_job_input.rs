// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_inference_recommendations_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_inference_recommendations_job::CreateInferenceRecommendationsJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.job_name {
        object.key("JobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.job_type {
        object.key("JobType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.role_arn {
        object.key("RoleArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.input_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("InputConfig").start_object();
        crate::protocol_serde::shape_recommendation_job_input_config::ser_recommendation_job_input_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.job_description {
        object.key("JobDescription").string(var_6.as_str());
    }
    if let Some(var_7) = &input.stopping_conditions {
        #[allow(unused_mut)]
        let mut object_8 = object.key("StoppingConditions").start_object();
        crate::protocol_serde::shape_recommendation_job_stopping_conditions::ser_recommendation_job_stopping_conditions(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("OutputConfig").start_object();
        crate::protocol_serde::shape_recommendation_job_output_config::ser_recommendation_job_output_config(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
