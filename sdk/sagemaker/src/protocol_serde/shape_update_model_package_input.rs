// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_model_package::UpdateModelPackageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_2.as_str());
    }
    if let Some(var_3) = &input.approval_description {
        object.key("ApprovalDescription").string(var_3.as_str());
    }
    if let Some(var_4) = &input.customer_metadata_properties {
        #[allow(unused_mut)]
        let mut object_5 = object.key("CustomerMetadataProperties").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.customer_metadata_properties_to_remove {
        let mut array_9 = object
            .key("CustomerMetadataPropertiesToRemove")
            .start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.additional_inference_specifications_to_add {
        let mut array_12 = object
            .key("AdditionalInferenceSpecificationsToAdd")
            .start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_additional_inference_specification_definition::ser_additional_inference_specification_definition(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
