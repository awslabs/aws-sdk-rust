// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.training_image {
        object.key("TrainingImage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_3.as_str());
    }
    if let Some(var_4) = &input.metric_definitions {
        let mut array_5 = object.key("MetricDefinitions").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_metric_definition::ser_metric_definition(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object
            .key("EnableSageMakerMetricsTimeSeries")
            .boolean(input.enable_sage_maker_metrics_time_series);
    }
    if let Some(var_8) = &input.container_entrypoint {
        let mut array_9 = object.key("ContainerEntrypoint").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.container_arguments {
        let mut array_12 = object.key("ContainerArguments").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub(crate) fn de_algorithm_specification<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AlgorithmSpecification>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AlgorithmSpecificationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "TrainingImage" => {
                                builder = builder.set_training_image(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AlgorithmName" => {
                                builder = builder.set_algorithm_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TrainingInputMode" => {
                                builder = builder.set_training_input_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::TrainingInputMode::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "MetricDefinitions" => {
                                builder = builder.set_metric_definitions(
                                    crate::protocol_serde::shape_metric_definition_list::de_metric_definition_list(tokens)?
                                );
                            }
                            "EnableSageMakerMetricsTimeSeries" => {
                                builder = builder.set_enable_sage_maker_metrics_time_series(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ContainerEntrypoint" => {
                                builder = builder.set_container_entrypoint(
                                    crate::protocol_serde::shape_training_container_entrypoint::de_training_container_entrypoint(tokens)?
                                );
                            }
                            "ContainerArguments" => {
                                builder = builder.set_container_arguments(
                                    crate::protocol_serde::shape_training_container_arguments::de_training_container_arguments(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
