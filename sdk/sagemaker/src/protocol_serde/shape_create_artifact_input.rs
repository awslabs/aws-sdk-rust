// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_artifact::CreateArtifactInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.artifact_name {
        object.key("ArtifactName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Source").start_object();
        crate::protocol_serde::shape_artifact_source::ser_artifact_source(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.artifact_type {
        object.key("ArtifactType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.properties {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Properties").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.metadata_properties {
        #[allow(unused_mut)]
        let mut object_10 = object.key("MetadataProperties").start_object();
        crate::protocol_serde::shape_metadata_properties::ser_metadata_properties(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
