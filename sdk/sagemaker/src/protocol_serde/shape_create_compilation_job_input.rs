// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_compilation_job::CreateCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.role_arn {
        object.key("RoleArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.model_package_version_arn {
        object.key("ModelPackageVersionArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.input_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("InputConfig").start_object();
        crate::protocol_serde::shape_input_config::ser_input_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("OutputConfig").start_object();
        crate::protocol_serde::shape_output_config::ser_output_config(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("VpcConfig").start_object();
        crate::protocol_serde::shape_neo_vpc_config::ser_neo_vpc_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_11 = object.key("StoppingCondition").start_object();
        crate::protocol_serde::shape_stopping_condition::ser_stopping_condition(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
