// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_stop_edge_deployment_stage_input(
    input: &crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_stop_edge_deployment_stage_input::ser_stop_edge_deployment_stage_input(&mut object, input)?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_stop_edge_deployment_stage_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageOutput,
    crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(
        crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageError::unhandled,
    )?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(
        crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageError::generic(
            generic,
        ),
    )
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_stop_edge_deployment_stage_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageOutput,
    crate::operation::stop_edge_deployment_stage::StopEdgeDeploymentStageError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::stop_edge_deployment_stage::builders::StopEdgeDeploymentStageOutputBuilder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
