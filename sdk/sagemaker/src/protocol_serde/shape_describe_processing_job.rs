// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_processing_job_input(
    input: &crate::operation::describe_processing_job::DescribeProcessingJobInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_describe_processing_job_input::ser_describe_processing_job_input(
        &mut object,
        input,
    )?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_processing_job_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_processing_job::DescribeProcessingJobOutput,
    crate::operation::describe_processing_job::DescribeProcessingJobError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(
        crate::operation::describe_processing_job::DescribeProcessingJobError::unhandled,
    )?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code =
        match generic.code() {
            Some(code) => code,
            None => return Err(
                crate::operation::describe_processing_job::DescribeProcessingJobError::unhandled(
                    generic,
                ),
            ),
        };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ResourceNotFound" => {
            crate::operation::describe_processing_job::DescribeProcessingJobError::ResourceNotFound(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::types::error::builders::ResourceNotFoundBuilder::default();
                        let _ = response;
                        output = crate::protocol_serde::shape_resource_not_found::de_resource_not_found_json_err(response.body().as_ref(), output).map_err(crate::operation::describe_processing_job::DescribeProcessingJobError::unhandled)?;
                        let output = output.meta(generic);
                        output.build()
                    };
                    if tmp.message.is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            )
        }
        _ => {
            crate::operation::describe_processing_job::DescribeProcessingJobError::generic(generic)
        }
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_processing_job_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_processing_job::DescribeProcessingJobOutput,
    crate::operation::describe_processing_job::DescribeProcessingJobError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_processing_job::builders::DescribeProcessingJobOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_describe_processing_job::de_describe_processing_job(
            response.body().as_ref(),
            output,
        )
        .map_err(
            crate::operation::describe_processing_job::DescribeProcessingJobError::unhandled,
        )?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_describe_processing_job(
    value: &[u8],
    mut builder: crate::operation::describe_processing_job::builders::DescribeProcessingJobOutputBuilder,
) -> Result<
    crate::operation::describe_processing_job::builders::DescribeProcessingJobOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "ProcessingInputs" => {
                        builder = builder.set_processing_inputs(
                            crate::protocol_serde::shape_processing_inputs::de_processing_inputs(
                                tokens,
                            )?,
                        );
                    }
                    "ProcessingOutputConfig" => {
                        builder = builder.set_processing_output_config(
                            crate::protocol_serde::shape_processing_output_config::de_processing_output_config(tokens)?
                        );
                    }
                    "ProcessingJobName" => {
                        builder = builder.set_processing_job_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "ProcessingResources" => {
                        builder = builder.set_processing_resources(
                            crate::protocol_serde::shape_processing_resources::de_processing_resources(tokens)?
                        );
                    }
                    "StoppingCondition" => {
                        builder = builder.set_stopping_condition(
                            crate::protocol_serde::shape_processing_stopping_condition::de_processing_stopping_condition(tokens)?
                        );
                    }
                    "AppSpecification" => {
                        builder = builder.set_app_specification(
                            crate::protocol_serde::shape_app_specification::de_app_specification(
                                tokens,
                            )?,
                        );
                    }
                    "Environment" => {
                        builder = builder.set_environment(
                            crate::protocol_serde::shape_processing_environment_map::de_processing_environment_map(tokens)?
                        );
                    }
                    "NetworkConfig" => {
                        builder = builder.set_network_config(
                            crate::protocol_serde::shape_network_config::de_network_config(tokens)?,
                        );
                    }
                    "RoleArn" => {
                        builder = builder.set_role_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "ExperimentConfig" => {
                        builder = builder.set_experiment_config(
                            crate::protocol_serde::shape_experiment_config::de_experiment_config(
                                tokens,
                            )?,
                        );
                    }
                    "ProcessingJobArn" => {
                        builder = builder.set_processing_job_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "ProcessingJobStatus" => {
                        builder = builder.set_processing_job_status(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| {
                                s.to_unescaped()
                                    .map(|u| crate::types::ProcessingJobStatus::from(u.as_ref()))
                            })
                            .transpose()?,
                        );
                    }
                    "ExitMessage" => {
                        builder = builder.set_exit_message(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "FailureReason" => {
                        builder = builder.set_failure_reason(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "ProcessingEndTime" => {
                        builder = builder.set_processing_end_time(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "ProcessingStartTime" => {
                        builder = builder.set_processing_start_time(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "LastModifiedTime" => {
                        builder = builder.set_last_modified_time(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "CreationTime" => {
                        builder = builder.set_creation_time(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "MonitoringScheduleArn" => {
                        builder = builder.set_monitoring_schedule_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "AutoMLJobArn" => {
                        builder = builder.set_auto_ml_job_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "TrainingJobArn" => {
                        builder = builder.set_training_job_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
