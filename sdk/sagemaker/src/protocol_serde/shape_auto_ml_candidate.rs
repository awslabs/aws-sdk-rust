// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_auto_ml_candidate<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AutoMlCandidate>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AutoMlCandidateBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "CandidateName" => {
                            builder = builder.set_candidate_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "FinalAutoMLJobObjectiveMetric" => {
                            builder = builder.set_final_auto_ml_job_objective_metric(
                                crate::protocol_serde::shape_final_auto_ml_job_objective_metric::de_final_auto_ml_job_objective_metric(tokens)?,
                            );
                        }
                        "ObjectiveStatus" => {
                            builder = builder.set_objective_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ObjectiveStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CandidateSteps" => {
                            builder = builder.set_candidate_steps(crate::protocol_serde::shape_candidate_steps::de_candidate_steps(tokens)?);
                        }
                        "CandidateStatus" => {
                            builder = builder.set_candidate_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CandidateStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "InferenceContainers" => {
                            builder = builder.set_inference_containers(
                                crate::protocol_serde::shape_auto_ml_container_definitions::de_auto_ml_container_definitions(tokens)?,
                            );
                        }
                        "CreationTime" => {
                            builder = builder.set_creation_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "EndTime" => {
                            builder = builder.set_end_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "LastModifiedTime" => {
                            builder = builder.set_last_modified_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "FailureReason" => {
                            builder = builder.set_failure_reason(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CandidateProperties" => {
                            builder =
                                builder.set_candidate_properties(crate::protocol_serde::shape_candidate_properties::de_candidate_properties(tokens)?);
                        }
                        "InferenceContainerDefinitions" => {
                            builder = builder.set_inference_container_definitions(
                                crate::protocol_serde::shape_auto_ml_inference_container_definitions::de_auto_ml_inference_container_definitions(
                                    tokens,
                                )?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::auto_ml_candidate_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
