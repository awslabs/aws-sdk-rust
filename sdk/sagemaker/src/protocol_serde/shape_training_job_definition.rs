// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_training_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TrainingJobDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_1.as_str());
    }
    if let Some(var_2) = &input.hyper_parameters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("HyperParameters").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4.as_str()).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.input_data_config {
        let mut array_7 = object.key("InputDataConfig").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_channel::ser_channel(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("OutputDataConfig").start_object();
        crate::protocol_serde::shape_output_data_config::ser_output_data_config(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.resource_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("ResourceConfig").start_object();
        crate::protocol_serde::shape_resource_config::ser_resource_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_15 = object.key("StoppingCondition").start_object();
        crate::protocol_serde::shape_stopping_condition::ser_stopping_condition(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    Ok(())
}

pub(crate) fn de_training_job_definition<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::TrainingJobDefinition>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TrainingJobDefinitionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "TrainingInputMode" => {
                                builder = builder.set_training_input_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::TrainingInputMode::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "HyperParameters" => {
                                builder = builder.set_hyper_parameters(
                                    crate::protocol_serde::shape_hyper_parameters::de_hyper_parameters(tokens)?
                                );
                            }
                            "InputDataConfig" => {
                                builder = builder.set_input_data_config(
                                    crate::protocol_serde::shape_input_data_config::de_input_data_config(tokens)?
                                );
                            }
                            "OutputDataConfig" => {
                                builder = builder.set_output_data_config(
                                    crate::protocol_serde::shape_output_data_config::de_output_data_config(tokens)?
                                );
                            }
                            "ResourceConfig" => {
                                builder = builder.set_resource_config(
                                    crate::protocol_serde::shape_resource_config::de_resource_config(tokens)?
                                );
                            }
                            "StoppingCondition" => {
                                builder = builder.set_stopping_condition(
                                    crate::protocol_serde::shape_stopping_condition::de_stopping_condition(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
