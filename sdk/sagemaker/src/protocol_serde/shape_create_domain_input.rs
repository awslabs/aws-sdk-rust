// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_domain::CreateDomainInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.domain_name {
        object.key("DomainName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auth_mode {
        object.key("AuthMode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.default_user_settings {
        #[allow(unused_mut)]
        let mut object_4 = object.key("DefaultUserSettings").start_object();
        crate::protocol_serde::shape_user_settings::ser_user_settings(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.subnet_ids {
        let mut array_6 = object.key("SubnetIds").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.vpc_id {
        object.key("VpcId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_13.as_str());
    }
    if let Some(var_14) = &input.home_efs_file_system_kms_key_id {
        object
            .key("HomeEfsFileSystemKmsKeyId")
            .string(var_14.as_str());
    }
    if let Some(var_15) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.app_security_group_management {
        object
            .key("AppSecurityGroupManagement")
            .string(var_16.as_str());
    }
    if let Some(var_17) = &input.domain_settings {
        #[allow(unused_mut)]
        let mut object_18 = object.key("DomainSettings").start_object();
        crate::protocol_serde::shape_domain_settings::ser_domain_settings(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.default_space_settings {
        #[allow(unused_mut)]
        let mut object_20 = object.key("DefaultSpaceSettings").start_object();
        crate::protocol_serde::shape_default_space_settings::ser_default_space_settings(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    Ok(())
}
