// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_model_data_source(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::S3ModelDataSource,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.s3_uri {
        object.key("S3Uri").string(var_1.as_str());
    }
    if let Some(var_2) = &input.s3_data_type {
        object.key("S3DataType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.compression_type {
        object.key("CompressionType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.model_access_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ModelAccessConfig").start_object();
        crate::protocol_serde::shape_model_access_config::ser_model_access_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.hub_access_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("HubAccessConfig").start_object();
        crate::protocol_serde::shape_inference_hub_access_config::ser_inference_hub_access_config(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_8.as_str());
    }
    Ok(())
}

pub(crate) fn de_s3_model_data_source<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::S3ModelDataSource>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::S3ModelDataSourceBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "S3Uri" => {
                            builder = builder.set_s3_uri(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "S3DataType" => {
                            builder = builder.set_s3_data_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::S3ModelDataType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CompressionType" => {
                            builder = builder.set_compression_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ModelCompressionType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ModelAccessConfig" => {
                            builder =
                                builder.set_model_access_config(crate::protocol_serde::shape_model_access_config::de_model_access_config(tokens)?);
                        }
                        "HubAccessConfig" => {
                            builder = builder.set_hub_access_config(
                                crate::protocol_serde::shape_inference_hub_access_config::de_inference_hub_access_config(tokens)?,
                            );
                        }
                        "ManifestS3Uri" => {
                            builder = builder.set_manifest_s3_uri(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::s3_model_data_source_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
