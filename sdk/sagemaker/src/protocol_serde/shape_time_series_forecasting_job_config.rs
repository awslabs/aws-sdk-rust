// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_time_series_forecasting_job_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TimeSeriesForecastingJobConfig,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.feature_specification_s3_uri {
        object.key("FeatureSpecificationS3Uri").string(var_1.as_str());
    }
    if let Some(var_2) = &input.completion_criteria {
        #[allow(unused_mut)]
        let mut object_3 = object.key("CompletionCriteria").start_object();
        crate::protocol_serde::shape_auto_ml_job_completion_criteria::ser_auto_ml_job_completion_criteria(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.forecast_frequency {
        object.key("ForecastFrequency").string(var_4.as_str());
    }
    if let Some(var_5) = &input.forecast_horizon {
        object.key("ForecastHorizon").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.forecast_quantiles {
        let mut array_7 = object.key("ForecastQuantiles").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.transformations {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Transformations").start_object();
        crate::protocol_serde::shape_time_series_transformations::ser_time_series_transformations(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.time_series_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("TimeSeriesConfig").start_object();
        crate::protocol_serde::shape_time_series_config::ser_time_series_config(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.holiday_config {
        let mut array_14 = object.key("HolidayConfig").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_holiday_config_attributes::ser_holiday_config_attributes(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    Ok(())
}

pub(crate) fn de_time_series_forecasting_job_config<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::TimeSeriesForecastingJobConfig>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TimeSeriesForecastingJobConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "FeatureSpecificationS3Uri" => {
                            builder = builder.set_feature_specification_s3_uri(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CompletionCriteria" => {
                            builder = builder.set_completion_criteria(
                                crate::protocol_serde::shape_auto_ml_job_completion_criteria::de_auto_ml_job_completion_criteria(tokens)?,
                            );
                        }
                        "ForecastFrequency" => {
                            builder = builder.set_forecast_frequency(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ForecastHorizon" => {
                            builder = builder.set_forecast_horizon(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "ForecastQuantiles" => {
                            builder = builder.set_forecast_quantiles(crate::protocol_serde::shape_forecast_quantiles::de_forecast_quantiles(tokens)?);
                        }
                        "Transformations" => {
                            builder = builder.set_transformations(
                                crate::protocol_serde::shape_time_series_transformations::de_time_series_transformations(tokens)?,
                            );
                        }
                        "TimeSeriesConfig" => {
                            builder = builder.set_time_series_config(crate::protocol_serde::shape_time_series_config::de_time_series_config(tokens)?);
                        }
                        "HolidayConfig" => {
                            builder = builder.set_holiday_config(crate::protocol_serde::shape_holiday_config::de_holiday_config(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::time_series_forecasting_job_config_correct_errors(builder).build(),
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
