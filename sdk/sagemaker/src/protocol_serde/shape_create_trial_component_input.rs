// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_trial_component_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_trial_component::CreateTrialComponentInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.display_name {
        object.key("DisplayName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.status {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Status").start_object();
        crate::protocol_serde::shape_trial_component_status::ser_trial_component_status(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_5, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_6) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_6, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_7) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Parameters").start_object();
        for (key_9, value_10) in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_11 = object_8.key(key_9.as_str()).start_object();
                crate::protocol_serde::shape_trial_component_parameter_value::ser_trial_component_parameter_value(&mut object_11, value_10)?;
                object_11.finish();
            }
        }
        object_8.finish();
    }
    if let Some(var_12) = &input.input_artifacts {
        #[allow(unused_mut)]
        let mut object_13 = object.key("InputArtifacts").start_object();
        for (key_14, value_15) in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_16 = object_13.key(key_14.as_str()).start_object();
                crate::protocol_serde::shape_trial_component_artifact::ser_trial_component_artifact(&mut object_16, value_15)?;
                object_16.finish();
            }
        }
        object_13.finish();
    }
    if let Some(var_17) = &input.output_artifacts {
        #[allow(unused_mut)]
        let mut object_18 = object.key("OutputArtifacts").start_object();
        for (key_19, value_20) in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_21 = object_18.key(key_19.as_str()).start_object();
                crate::protocol_serde::shape_trial_component_artifact::ser_trial_component_artifact(&mut object_21, value_20)?;
                object_21.finish();
            }
        }
        object_18.finish();
    }
    if let Some(var_22) = &input.metadata_properties {
        #[allow(unused_mut)]
        let mut object_23 = object.key("MetadataProperties").start_object();
        crate::protocol_serde::shape_metadata_properties::ser_metadata_properties(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.tags {
        let mut array_25 = object.key("Tags").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    Ok(())
}
