// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_notebook_instance_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_notebook_instance::UpdateNotebookInstanceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.instance_type {
        object.key("InstanceType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.role_arn {
        object.key("RoleArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.disassociate_lifecycle_config {
        object.key("DisassociateLifecycleConfig").boolean(*var_5);
    }
    if let Some(var_6) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_7.as_str());
    }
    if let Some(var_8) = &input.additional_code_repositories {
        let mut array_9 = object.key("AdditionalCodeRepositories").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.accelerator_types {
        let mut array_12 = object.key("AcceleratorTypes").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.disassociate_accelerator_types {
        object.key("DisassociateAcceleratorTypes").boolean(*var_14);
    }
    if let Some(var_15) = &input.disassociate_default_code_repository {
        object.key("DisassociateDefaultCodeRepository").boolean(*var_15);
    }
    if let Some(var_16) = &input.disassociate_additional_code_repositories {
        object.key("DisassociateAdditionalCodeRepositories").boolean(*var_16);
    }
    if let Some(var_17) = &input.root_access {
        object.key("RootAccess").string(var_17.as_str());
    }
    if let Some(var_18) = &input.instance_metadata_service_configuration {
        #[allow(unused_mut)]
        let mut object_19 = object.key("InstanceMetadataServiceConfiguration").start_object();
        crate::protocol_serde::shape_instance_metadata_service_configuration::ser_instance_metadata_service_configuration(&mut object_19, var_18)?;
        object_19.finish();
    }
    Ok(())
}
