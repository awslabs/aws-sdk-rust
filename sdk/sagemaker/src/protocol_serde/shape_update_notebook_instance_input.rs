// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_notebook_instance::UpdateNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.instance_type {
        object.key("InstanceType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.role_arn {
        object.key("RoleArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_4.as_str());
    }
    if input.disassociate_lifecycle_config {
        object
            .key("DisassociateLifecycleConfig")
            .boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_5) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_6.as_str());
    }
    if let Some(var_7) = &input.additional_code_repositories {
        let mut array_8 = object.key("AdditionalCodeRepositories").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.accelerator_types {
        let mut array_11 = object.key("AcceleratorTypes").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if input.disassociate_accelerator_types {
        object
            .key("DisassociateAcceleratorTypes")
            .boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object
            .key("DisassociateDefaultCodeRepository")
            .boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object
            .key("DisassociateAdditionalCodeRepositories")
            .boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_13) = &input.root_access {
        object.key("RootAccess").string(var_13.as_str());
    }
    if let Some(var_14) = &input.instance_metadata_service_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object
            .key("InstanceMetadataServiceConfiguration")
            .start_object();
        crate::protocol_serde::shape_instance_metadata_service_configuration::ser_instance_metadata_service_configuration(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
