// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Channel,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.channel_name {
        object.key("ChannelName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_3 = object.key("DataSource").start_object();
        crate::protocol_serde::shape_data_source::ser_data_source(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.content_type {
        object.key("ContentType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.compression_type {
        object.key("CompressionType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.input_mode {
        object.key("InputMode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.shuffle_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("ShuffleConfig").start_object();
        crate::protocol_serde::shape_shuffle_config::ser_shuffle_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}

pub(crate) fn de_channel<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Channel>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ChannelBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ChannelName" => {
                                builder = builder.set_channel_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DataSource" => {
                                builder = builder.set_data_source(
                                    crate::protocol_serde::shape_data_source::de_data_source(
                                        tokens,
                                    )?,
                                );
                            }
                            "ContentType" => {
                                builder = builder.set_content_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CompressionType" => {
                                builder = builder.set_compression_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::CompressionType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "RecordWrapperType" => {
                                builder = builder.set_record_wrapper_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::RecordWrapper::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "InputMode" => {
                                builder = builder.set_input_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::TrainingInputMode::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ShuffleConfig" => {
                                builder = builder.set_shuffle_config(
                                    crate::protocol_serde::shape_shuffle_config::de_shuffle_config(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
