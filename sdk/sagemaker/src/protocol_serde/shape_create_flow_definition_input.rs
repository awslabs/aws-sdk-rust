// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_flow_definition::CreateFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.human_loop_request_source {
        #[allow(unused_mut)]
        let mut object_3 = object.key("HumanLoopRequestSource").start_object();
        crate::protocol_serde::shape_human_loop_request_source::ser_human_loop_request_source(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.human_loop_activation_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("HumanLoopActivationConfig").start_object();
        crate::protocol_serde::shape_human_loop_activation_config::ser_human_loop_activation_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.human_loop_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("HumanLoopConfig").start_object();
        crate::protocol_serde::shape_human_loop_config::ser_human_loop_config(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("OutputConfig").start_object();
        crate::protocol_serde::shape_flow_definition_output_config::ser_flow_definition_output_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.role_arn {
        object.key("RoleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
