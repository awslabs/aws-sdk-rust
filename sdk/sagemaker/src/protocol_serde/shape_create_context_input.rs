// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_context::CreateContextInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.context_name {
        object.key("ContextName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Source").start_object();
        crate::protocol_serde::shape_context_source::ser_context_source(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.context_type {
        object.key("ContextType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.description {
        object.key("Description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.properties {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Properties").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.tags {
        let mut array_11 = object.key("Tags").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}
