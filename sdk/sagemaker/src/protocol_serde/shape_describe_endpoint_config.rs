// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_endpoint_config_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_endpoint_config::DescribeEndpointConfigOutput,
    crate::operation::describe_endpoint_config::DescribeEndpointConfigError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::describe_endpoint_config::DescribeEndpointConfigError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    Err(crate::operation::describe_endpoint_config::DescribeEndpointConfigError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_endpoint_config_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_endpoint_config::DescribeEndpointConfigOutput,
    crate::operation::describe_endpoint_config::DescribeEndpointConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_endpoint_config::builders::DescribeEndpointConfigOutputBuilder::default();
        output = crate::protocol_serde::shape_describe_endpoint_config::de_describe_endpoint_config(_response_body, output)
            .map_err(crate::operation::describe_endpoint_config::DescribeEndpointConfigError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::describe_endpoint_config_output_correct_errors(output).build()
    })
}

pub fn ser_describe_endpoint_config_input(
    input: &crate::operation::describe_endpoint_config::DescribeEndpointConfigInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_describe_endpoint_config_input::ser_describe_endpoint_config_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_describe_endpoint_config(
    value: &[u8],
    mut builder: crate::operation::describe_endpoint_config::builders::DescribeEndpointConfigOutputBuilder,
) -> Result<
    crate::operation::describe_endpoint_config::builders::DescribeEndpointConfigOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "EndpointConfigName" => {
                    builder = builder.set_endpoint_config_name(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "EndpointConfigArn" => {
                    builder = builder.set_endpoint_config_arn(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "ProductionVariants" => {
                    builder =
                        builder.set_production_variants(crate::protocol_serde::shape_production_variant_list::de_production_variant_list(tokens)?);
                }
                "DataCaptureConfig" => {
                    builder = builder.set_data_capture_config(crate::protocol_serde::shape_data_capture_config::de_data_capture_config(tokens)?);
                }
                "KmsKeyId" => {
                    builder = builder.set_kms_key_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "CreationTime" => {
                    builder = builder.set_creation_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                        tokens.next(),
                        ::aws_smithy_types::date_time::Format::EpochSeconds,
                    )?);
                }
                "AsyncInferenceConfig" => {
                    builder =
                        builder.set_async_inference_config(crate::protocol_serde::shape_async_inference_config::de_async_inference_config(tokens)?);
                }
                "ExplainerConfig" => {
                    builder = builder.set_explainer_config(crate::protocol_serde::shape_explainer_config::de_explainer_config(tokens)?);
                }
                "ShadowProductionVariants" => {
                    builder = builder
                        .set_shadow_production_variants(crate::protocol_serde::shape_production_variant_list::de_production_variant_list(tokens)?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
