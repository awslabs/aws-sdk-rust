// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_training_job<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::TrainingJob>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TrainingJobBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "TrainingJobName" => {
                                builder = builder.set_training_job_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TrainingJobArn" => {
                                builder = builder.set_training_job_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TuningJobArn" => {
                                builder = builder.set_tuning_job_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "LabelingJobArn" => {
                                builder = builder.set_labeling_job_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AutoMLJobArn" => {
                                builder = builder.set_auto_ml_job_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ModelArtifacts" => {
                                builder = builder.set_model_artifacts(
                                    crate::protocol_serde::shape_model_artifacts::de_model_artifacts(tokens)?
                                );
                            }
                            "TrainingJobStatus" => {
                                builder = builder.set_training_job_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::TrainingJobStatus::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "SecondaryStatus" => {
                                builder = builder.set_secondary_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::SecondaryStatus::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "FailureReason" => {
                                builder = builder.set_failure_reason(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "HyperParameters" => {
                                builder = builder.set_hyper_parameters(
                                    crate::protocol_serde::shape_hyper_parameters::de_hyper_parameters(tokens)?
                                );
                            }
                            "AlgorithmSpecification" => {
                                builder = builder.set_algorithm_specification(
                                    crate::protocol_serde::shape_algorithm_specification::de_algorithm_specification(tokens)?
                                );
                            }
                            "RoleArn" => {
                                builder = builder.set_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "InputDataConfig" => {
                                builder = builder.set_input_data_config(
                                    crate::protocol_serde::shape_input_data_config::de_input_data_config(tokens)?
                                );
                            }
                            "OutputDataConfig" => {
                                builder = builder.set_output_data_config(
                                    crate::protocol_serde::shape_output_data_config::de_output_data_config(tokens)?
                                );
                            }
                            "ResourceConfig" => {
                                builder = builder.set_resource_config(
                                    crate::protocol_serde::shape_resource_config::de_resource_config(tokens)?
                                );
                            }
                            "VpcConfig" => {
                                builder = builder.set_vpc_config(
                                    crate::protocol_serde::shape_vpc_config::de_vpc_config(tokens)?,
                                );
                            }
                            "StoppingCondition" => {
                                builder = builder.set_stopping_condition(
                                    crate::protocol_serde::shape_stopping_condition::de_stopping_condition(tokens)?
                                );
                            }
                            "CreationTime" => {
                                builder = builder.set_creation_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "TrainingStartTime" => {
                                builder = builder.set_training_start_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "TrainingEndTime" => {
                                builder = builder.set_training_end_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "LastModifiedTime" => {
                                builder = builder.set_last_modified_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "SecondaryStatusTransitions" => {
                                builder = builder.set_secondary_status_transitions(
                                    crate::protocol_serde::shape_secondary_status_transitions::de_secondary_status_transitions(tokens)?
                                );
                            }
                            "FinalMetricDataList" => {
                                builder = builder.set_final_metric_data_list(
                                    crate::protocol_serde::shape_final_metric_data_list::de_final_metric_data_list(tokens)?
                                );
                            }
                            "EnableNetworkIsolation" => {
                                builder = builder.set_enable_network_isolation(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "EnableInterContainerTrafficEncryption" => {
                                builder = builder.set_enable_inter_container_traffic_encryption(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "EnableManagedSpotTraining" => {
                                builder = builder.set_enable_managed_spot_training(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "CheckpointConfig" => {
                                builder = builder.set_checkpoint_config(
                                    crate::protocol_serde::shape_checkpoint_config::de_checkpoint_config(tokens)?
                                );
                            }
                            "TrainingTimeInSeconds" => {
                                builder = builder.set_training_time_in_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "BillableTimeInSeconds" => {
                                builder = builder.set_billable_time_in_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DebugHookConfig" => {
                                builder = builder.set_debug_hook_config(
                                    crate::protocol_serde::shape_debug_hook_config::de_debug_hook_config(tokens)?
                                );
                            }
                            "ExperimentConfig" => {
                                builder = builder.set_experiment_config(
                                    crate::protocol_serde::shape_experiment_config::de_experiment_config(tokens)?
                                );
                            }
                            "DebugRuleConfigurations" => {
                                builder = builder.set_debug_rule_configurations(
                                    crate::protocol_serde::shape_debug_rule_configurations::de_debug_rule_configurations(tokens)?
                                );
                            }
                            "TensorBoardOutputConfig" => {
                                builder = builder.set_tensor_board_output_config(
                                    crate::protocol_serde::shape_tensor_board_output_config::de_tensor_board_output_config(tokens)?
                                );
                            }
                            "DebugRuleEvaluationStatuses" => {
                                builder = builder.set_debug_rule_evaluation_statuses(
                                    crate::protocol_serde::shape_debug_rule_evaluation_statuses::de_debug_rule_evaluation_statuses(tokens)?
                                );
                            }
                            "Environment" => {
                                builder = builder.set_environment(
                                    crate::protocol_serde::shape_training_environment_map::de_training_environment_map(tokens)?
                                );
                            }
                            "RetryStrategy" => {
                                builder = builder.set_retry_strategy(
                                    crate::protocol_serde::shape_retry_strategy::de_retry_strategy(
                                        tokens,
                                    )?,
                                );
                            }
                            "Tags" => {
                                builder = builder.set_tags(
                                    crate::protocol_serde::shape_tag_list::de_tag_list(tokens)?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
