// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_space_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SpaceSettings,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.jupyter_server_app_settings {
        #[allow(unused_mut)]
        let mut object_2 = object.key("JupyterServerAppSettings").start_object();
        crate::protocol_serde::shape_jupyter_server_app_settings::ser_jupyter_server_app_settings(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.kernel_gateway_app_settings {
        #[allow(unused_mut)]
        let mut object_4 = object.key("KernelGatewayAppSettings").start_object();
        crate::protocol_serde::shape_kernel_gateway_app_settings::ser_kernel_gateway_app_settings(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.code_editor_app_settings {
        #[allow(unused_mut)]
        let mut object_6 = object.key("CodeEditorAppSettings").start_object();
        crate::protocol_serde::shape_space_code_editor_app_settings::ser_space_code_editor_app_settings(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.jupyter_lab_app_settings {
        #[allow(unused_mut)]
        let mut object_8 = object.key("JupyterLabAppSettings").start_object();
        crate::protocol_serde::shape_space_jupyter_lab_app_settings::ser_space_jupyter_lab_app_settings(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.app_type {
        object.key("AppType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.space_storage_settings {
        #[allow(unused_mut)]
        let mut object_11 = object.key("SpaceStorageSettings").start_object();
        crate::protocol_serde::shape_space_storage_settings::ser_space_storage_settings(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.space_managed_resources {
        object.key("SpaceManagedResources").string(var_12.as_str());
    }
    if let Some(var_13) = &input.custom_file_systems {
        let mut array_14 = object.key("CustomFileSystems").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_custom_file_system::ser_custom_file_system(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.remote_access {
        object.key("RemoteAccess").string(var_17.as_str());
    }
    Ok(())
}

pub(crate) fn de_space_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::SpaceSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SpaceSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "JupyterServerAppSettings" => {
                            builder = builder.set_jupyter_server_app_settings(
                                crate::protocol_serde::shape_jupyter_server_app_settings::de_jupyter_server_app_settings(tokens)?,
                            );
                        }
                        "KernelGatewayAppSettings" => {
                            builder = builder.set_kernel_gateway_app_settings(
                                crate::protocol_serde::shape_kernel_gateway_app_settings::de_kernel_gateway_app_settings(tokens)?,
                            );
                        }
                        "CodeEditorAppSettings" => {
                            builder = builder.set_code_editor_app_settings(
                                crate::protocol_serde::shape_space_code_editor_app_settings::de_space_code_editor_app_settings(tokens)?,
                            );
                        }
                        "JupyterLabAppSettings" => {
                            builder = builder.set_jupyter_lab_app_settings(
                                crate::protocol_serde::shape_space_jupyter_lab_app_settings::de_space_jupyter_lab_app_settings(tokens)?,
                            );
                        }
                        "AppType" => {
                            builder = builder.set_app_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AppType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "SpaceStorageSettings" => {
                            builder = builder
                                .set_space_storage_settings(crate::protocol_serde::shape_space_storage_settings::de_space_storage_settings(tokens)?);
                        }
                        "SpaceManagedResources" => {
                            builder = builder.set_space_managed_resources(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::FeatureStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CustomFileSystems" => {
                            builder =
                                builder.set_custom_file_systems(crate::protocol_serde::shape_custom_file_systems::de_custom_file_systems(tokens)?);
                        }
                        "RemoteAccess" => {
                            builder = builder.set_remote_access(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::FeatureStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
