// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_model_package::CreateModelPackageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.model_package_description {
        object.key("ModelPackageDescription").string(var_3.as_str());
    }
    if let Some(var_4) = &input.inference_specification {
        #[allow(unused_mut)]
        let mut object_5 = object.key("InferenceSpecification").start_object();
        crate::protocol_serde::shape_inference_specification::ser_inference_specification(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.validation_specification {
        #[allow(unused_mut)]
        let mut object_7 = object.key("ValidationSpecification").start_object();
        crate::protocol_serde::shape_model_package_validation_specification::ser_model_package_validation_specification(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.source_algorithm_specification {
        #[allow(unused_mut)]
        let mut object_9 = object.key("SourceAlgorithmSpecification").start_object();
        crate::protocol_serde::shape_source_algorithm_specification::ser_source_algorithm_specification(&mut object_9, var_8)?;
        object_9.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_10) = &input.tags {
        let mut array_11 = object.key("Tags").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_14.as_str());
    }
    if let Some(var_15) = &input.metadata_properties {
        #[allow(unused_mut)]
        let mut object_16 = object.key("MetadataProperties").start_object();
        crate::protocol_serde::shape_metadata_properties::ser_metadata_properties(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.model_metrics {
        #[allow(unused_mut)]
        let mut object_18 = object.key("ModelMetrics").start_object();
        crate::protocol_serde::shape_model_metrics::ser_model_metrics(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.client_token {
        object.key("ClientToken").string(var_19.as_str());
    }
    if let Some(var_20) = &input.customer_metadata_properties {
        #[allow(unused_mut)]
        let mut object_21 = object.key("CustomerMetadataProperties").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22.as_str()).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    if let Some(var_24) = &input.drift_check_baselines {
        #[allow(unused_mut)]
        let mut object_25 = object.key("DriftCheckBaselines").start_object();
        crate::protocol_serde::shape_drift_check_baselines::ser_drift_check_baselines(
            &mut object_25,
            var_24,
        )?;
        object_25.finish();
    }
    if let Some(var_26) = &input.domain {
        object.key("Domain").string(var_26.as_str());
    }
    if let Some(var_27) = &input.task {
        object.key("Task").string(var_27.as_str());
    }
    if let Some(var_28) = &input.sample_payload_url {
        object.key("SamplePayloadUrl").string(var_28.as_str());
    }
    if let Some(var_29) = &input.additional_inference_specifications {
        let mut array_30 = object
            .key("AdditionalInferenceSpecifications")
            .start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_additional_inference_specification_definition::ser_additional_inference_specification_definition(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    Ok(())
}
