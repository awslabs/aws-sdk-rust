// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_training_job::CreateTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.hyper_parameters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("HyperParameters").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4.as_str()).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.algorithm_specification {
        #[allow(unused_mut)]
        let mut object_7 = object.key("AlgorithmSpecification").start_object();
        crate::protocol_serde::shape_algorithm_specification::ser_algorithm_specification(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.role_arn {
        object.key("RoleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.input_data_config {
        let mut array_10 = object.key("InputDataConfig").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_channel::ser_channel(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("OutputDataConfig").start_object();
        crate::protocol_serde::shape_output_data_config::ser_output_data_config(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.resource_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("ResourceConfig").start_object();
        crate::protocol_serde::shape_resource_config::ser_resource_config(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_18 = object.key("VpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_20 = object.key("StoppingCondition").start_object();
        crate::protocol_serde::shape_stopping_condition::ser_stopping_condition(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_25) = &input.checkpoint_config {
        #[allow(unused_mut)]
        let mut object_26 = object.key("CheckpointConfig").start_object();
        crate::protocol_serde::shape_checkpoint_config::ser_checkpoint_config(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.debug_hook_config {
        #[allow(unused_mut)]
        let mut object_28 = object.key("DebugHookConfig").start_object();
        crate::protocol_serde::shape_debug_hook_config::ser_debug_hook_config(
            &mut object_28,
            var_27,
        )?;
        object_28.finish();
    }
    if let Some(var_29) = &input.debug_rule_configurations {
        let mut array_30 = object.key("DebugRuleConfigurations").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_debug_rule_configuration::ser_debug_rule_configuration(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.tensor_board_output_config {
        #[allow(unused_mut)]
        let mut object_34 = object.key("TensorBoardOutputConfig").start_object();
        crate::protocol_serde::shape_tensor_board_output_config::ser_tensor_board_output_config(
            &mut object_34,
            var_33,
        )?;
        object_34.finish();
    }
    if let Some(var_35) = &input.experiment_config {
        #[allow(unused_mut)]
        let mut object_36 = object.key("ExperimentConfig").start_object();
        crate::protocol_serde::shape_experiment_config::ser_experiment_config(
            &mut object_36,
            var_35,
        )?;
        object_36.finish();
    }
    if let Some(var_37) = &input.profiler_config {
        #[allow(unused_mut)]
        let mut object_38 = object.key("ProfilerConfig").start_object();
        crate::protocol_serde::shape_profiler_config::ser_profiler_config(&mut object_38, var_37)?;
        object_38.finish();
    }
    if let Some(var_39) = &input.profiler_rule_configurations {
        let mut array_40 = object.key("ProfilerRuleConfigurations").start_array();
        for item_41 in var_39 {
            {
                #[allow(unused_mut)]
                let mut object_42 = array_40.value().start_object();
                crate::protocol_serde::shape_profiler_rule_configuration::ser_profiler_rule_configuration(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if let Some(var_43) = &input.environment {
        #[allow(unused_mut)]
        let mut object_44 = object.key("Environment").start_object();
        for (key_45, value_46) in var_43 {
            {
                object_44.key(key_45.as_str()).string(value_46.as_str());
            }
        }
        object_44.finish();
    }
    if let Some(var_47) = &input.retry_strategy {
        #[allow(unused_mut)]
        let mut object_48 = object.key("RetryStrategy").start_object();
        crate::protocol_serde::shape_retry_strategy::ser_retry_strategy(&mut object_48, var_47)?;
        object_48.finish();
    }
    Ok(())
}
