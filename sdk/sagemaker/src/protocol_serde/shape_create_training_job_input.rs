// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_training_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_training_job::CreateTrainingJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.hyper_parameters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("HyperParameters").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4.as_str()).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.algorithm_specification {
        #[allow(unused_mut)]
        let mut object_7 = object.key("AlgorithmSpecification").start_object();
        crate::protocol_serde::shape_algorithm_specification::ser_algorithm_specification(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.role_arn {
        object.key("RoleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.input_data_config {
        let mut array_10 = object.key("InputDataConfig").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_channel::ser_channel(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("OutputDataConfig").start_object();
        crate::protocol_serde::shape_output_data_config::ser_output_data_config(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.resource_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("ResourceConfig").start_object();
        crate::protocol_serde::shape_resource_config::ser_resource_config(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_18 = object.key("VpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_20 = object.key("StoppingCondition").start_object();
        crate::protocol_serde::shape_stopping_condition::ser_stopping_condition(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.enable_network_isolation {
        object.key("EnableNetworkIsolation").boolean(*var_25);
    }
    if let Some(var_26) = &input.enable_inter_container_traffic_encryption {
        object.key("EnableInterContainerTrafficEncryption").boolean(*var_26);
    }
    if let Some(var_27) = &input.enable_managed_spot_training {
        object.key("EnableManagedSpotTraining").boolean(*var_27);
    }
    if let Some(var_28) = &input.checkpoint_config {
        #[allow(unused_mut)]
        let mut object_29 = object.key("CheckpointConfig").start_object();
        crate::protocol_serde::shape_checkpoint_config::ser_checkpoint_config(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.debug_hook_config {
        #[allow(unused_mut)]
        let mut object_31 = object.key("DebugHookConfig").start_object();
        crate::protocol_serde::shape_debug_hook_config::ser_debug_hook_config(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.debug_rule_configurations {
        let mut array_33 = object.key("DebugRuleConfigurations").start_array();
        for item_34 in var_32 {
            {
                #[allow(unused_mut)]
                let mut object_35 = array_33.value().start_object();
                crate::protocol_serde::shape_debug_rule_configuration::ser_debug_rule_configuration(&mut object_35, item_34)?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.tensor_board_output_config {
        #[allow(unused_mut)]
        let mut object_37 = object.key("TensorBoardOutputConfig").start_object();
        crate::protocol_serde::shape_tensor_board_output_config::ser_tensor_board_output_config(&mut object_37, var_36)?;
        object_37.finish();
    }
    if let Some(var_38) = &input.experiment_config {
        #[allow(unused_mut)]
        let mut object_39 = object.key("ExperimentConfig").start_object();
        crate::protocol_serde::shape_experiment_config::ser_experiment_config(&mut object_39, var_38)?;
        object_39.finish();
    }
    if let Some(var_40) = &input.profiler_config {
        #[allow(unused_mut)]
        let mut object_41 = object.key("ProfilerConfig").start_object();
        crate::protocol_serde::shape_profiler_config::ser_profiler_config(&mut object_41, var_40)?;
        object_41.finish();
    }
    if let Some(var_42) = &input.profiler_rule_configurations {
        let mut array_43 = object.key("ProfilerRuleConfigurations").start_array();
        for item_44 in var_42 {
            {
                #[allow(unused_mut)]
                let mut object_45 = array_43.value().start_object();
                crate::protocol_serde::shape_profiler_rule_configuration::ser_profiler_rule_configuration(&mut object_45, item_44)?;
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.environment {
        #[allow(unused_mut)]
        let mut object_47 = object.key("Environment").start_object();
        for (key_48, value_49) in var_46 {
            {
                object_47.key(key_48.as_str()).string(value_49.as_str());
            }
        }
        object_47.finish();
    }
    if let Some(var_50) = &input.retry_strategy {
        #[allow(unused_mut)]
        let mut object_51 = object.key("RetryStrategy").start_object();
        crate::protocol_serde::shape_retry_strategy::ser_retry_strategy(&mut object_51, var_50)?;
        object_51.finish();
    }
    Ok(())
}
