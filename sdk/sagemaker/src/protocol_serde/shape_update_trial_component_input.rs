// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_trial_component_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_trial_component::UpdateTrialComponentInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.display_name {
        object.key("DisplayName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.status {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Status").start_object();
        crate::protocol_serde::shape_trial_component_status::ser_trial_component_status(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_5, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_6) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_6, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_7) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Parameters").start_object();
        for (key_9, value_10) in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_11 = object_8.key(key_9.as_str()).start_object();
                crate::protocol_serde::shape_trial_component_parameter_value::ser_trial_component_parameter_value(&mut object_11, value_10)?;
                object_11.finish();
            }
        }
        object_8.finish();
    }
    if let Some(var_12) = &input.parameters_to_remove {
        let mut array_13 = object.key("ParametersToRemove").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.input_artifacts {
        #[allow(unused_mut)]
        let mut object_16 = object.key("InputArtifacts").start_object();
        for (key_17, value_18) in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_19 = object_16.key(key_17.as_str()).start_object();
                crate::protocol_serde::shape_trial_component_artifact::ser_trial_component_artifact(&mut object_19, value_18)?;
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.input_artifacts_to_remove {
        let mut array_21 = object.key("InputArtifactsToRemove").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.output_artifacts {
        #[allow(unused_mut)]
        let mut object_24 = object.key("OutputArtifacts").start_object();
        for (key_25, value_26) in var_23 {
            {
                #[allow(unused_mut)]
                let mut object_27 = object_24.key(key_25.as_str()).start_object();
                crate::protocol_serde::shape_trial_component_artifact::ser_trial_component_artifact(&mut object_27, value_26)?;
                object_27.finish();
            }
        }
        object_24.finish();
    }
    if let Some(var_28) = &input.output_artifacts_to_remove {
        let mut array_29 = object.key("OutputArtifactsToRemove").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    Ok(())
}
