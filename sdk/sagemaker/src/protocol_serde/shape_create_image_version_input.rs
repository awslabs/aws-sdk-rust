// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_image_version_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_image_version::CreateImageVersionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.base_image {
        object.key("BaseImage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("ClientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.image_name {
        object.key("ImageName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.aliases {
        let mut array_5 = object.key("Aliases").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.vendor_guidance {
        object.key("VendorGuidance").string(var_7.as_str());
    }
    if let Some(var_8) = &input.job_type {
        object.key("JobType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.ml_framework {
        object.key("MLFramework").string(var_9.as_str());
    }
    if let Some(var_10) = &input.programming_lang {
        object.key("ProgrammingLang").string(var_10.as_str());
    }
    if let Some(var_11) = &input.processor {
        object.key("Processor").string(var_11.as_str());
    }
    if let Some(var_12) = &input.horovod {
        object.key("Horovod").boolean(*var_12);
    }
    if let Some(var_13) = &input.release_notes {
        object.key("ReleaseNotes").string(var_13.as_str());
    }
    Ok(())
}
