// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_feature_group_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_feature_group::CreateFeatureGroupInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.record_identifier_feature_name {
        object.key("RecordIdentifierFeatureName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.feature_definitions {
        let mut array_5 = object.key("FeatureDefinitions").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_feature_definition::ser_feature_definition(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.online_store_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("OnlineStoreConfig").start_object();
        crate::protocol_serde::shape_online_store_config::ser_online_store_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.offline_store_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("OfflineStoreConfig").start_object();
        crate::protocol_serde::shape_offline_store_config::ser_offline_store_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.role_arn {
        object.key("RoleArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.description {
        object.key("Description").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("Tags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
