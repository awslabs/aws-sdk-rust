// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_model_package_container_definition(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ModelPackageContainerDefinition,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1.as_str());
    }
    if let Some(var_2) = &input.image {
        object.key("Image").string(var_2.as_str());
    }
    if let Some(var_3) = &input.image_digest {
        object.key("ImageDigest").string(var_3.as_str());
    }
    if let Some(var_4) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_4.as_str());
    }
    if let Some(var_5) = &input.product_id {
        object.key("ProductId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.environment {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Environment").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.model_input {
        #[allow(unused_mut)]
        let mut object_11 = object.key("ModelInput").start_object();
        crate::protocol_serde::shape_model_input::ser_model_input(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.framework {
        object.key("Framework").string(var_12.as_str());
    }
    if let Some(var_13) = &input.framework_version {
        object.key("FrameworkVersion").string(var_13.as_str());
    }
    if let Some(var_14) = &input.nearest_model_name {
        object.key("NearestModelName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.additional_s3_data_source {
        #[allow(unused_mut)]
        let mut object_16 = object.key("AdditionalS3DataSource").start_object();
        crate::protocol_serde::shape_additional_s3_data_source::ser_additional_s3_data_source(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}

pub(crate) fn de_model_package_container_definition<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ModelPackageContainerDefinition>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ModelPackageContainerDefinitionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ContainerHostname" => {
                            builder = builder.set_container_hostname(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Image" => {
                            builder = builder.set_image(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ImageDigest" => {
                            builder = builder.set_image_digest(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ModelDataUrl" => {
                            builder = builder.set_model_data_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ProductId" => {
                            builder = builder.set_product_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Environment" => {
                            builder = builder.set_environment(crate::protocol_serde::shape_environment_map::de_environment_map(tokens)?);
                        }
                        "ModelInput" => {
                            builder = builder.set_model_input(crate::protocol_serde::shape_model_input::de_model_input(tokens)?);
                        }
                        "Framework" => {
                            builder = builder.set_framework(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "FrameworkVersion" => {
                            builder = builder.set_framework_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "NearestModelName" => {
                            builder = builder.set_nearest_model_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AdditionalS3DataSource" => {
                            builder = builder.set_additional_s3_data_source(
                                crate::protocol_serde::shape_additional_s3_data_source::de_additional_s3_data_source(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::model_package_container_definition_correct_errors(builder).build(),
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
