// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_endpoint_config::CreateEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.production_variants {
        let mut array_3 = object.key("ProductionVariants").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_production_variant::ser_production_variant(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.data_capture_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("DataCaptureConfig").start_object();
        crate::protocol_serde::shape_data_capture_config::ser_data_capture_config(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.async_inference_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("AsyncInferenceConfig").start_object();
        crate::protocol_serde::shape_async_inference_config::ser_async_inference_config(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.explainer_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("ExplainerConfig").start_object();
        crate::protocol_serde::shape_explainer_config::ser_explainer_config(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.shadow_production_variants {
        let mut array_18 = object.key("ShadowProductionVariants").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_production_variant::ser_production_variant(
                    &mut object_20,
                    item_19,
                )?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    Ok(())
}
