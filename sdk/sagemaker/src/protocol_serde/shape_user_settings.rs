// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_user_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::UserSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.execution_role {
        object.key("ExecutionRole").string(var_1.as_str());
    }
    if let Some(var_2) = &input.security_groups {
        let mut array_3 = object.key("SecurityGroups").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.sharing_settings {
        #[allow(unused_mut)]
        let mut object_6 = object.key("SharingSettings").start_object();
        crate::protocol_serde::shape_sharing_settings::ser_sharing_settings(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.jupyter_server_app_settings {
        #[allow(unused_mut)]
        let mut object_8 = object.key("JupyterServerAppSettings").start_object();
        crate::protocol_serde::shape_jupyter_server_app_settings::ser_jupyter_server_app_settings(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.kernel_gateway_app_settings {
        #[allow(unused_mut)]
        let mut object_10 = object.key("KernelGatewayAppSettings").start_object();
        crate::protocol_serde::shape_kernel_gateway_app_settings::ser_kernel_gateway_app_settings(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.tensor_board_app_settings {
        #[allow(unused_mut)]
        let mut object_12 = object.key("TensorBoardAppSettings").start_object();
        crate::protocol_serde::shape_tensor_board_app_settings::ser_tensor_board_app_settings(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.r_studio_server_pro_app_settings {
        #[allow(unused_mut)]
        let mut object_14 = object.key("RStudioServerProAppSettings").start_object();
        crate::protocol_serde::shape_r_studio_server_pro_app_settings::ser_r_studio_server_pro_app_settings(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.r_session_app_settings {
        #[allow(unused_mut)]
        let mut object_16 = object.key("RSessionAppSettings").start_object();
        crate::protocol_serde::shape_r_session_app_settings::ser_r_session_app_settings(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.canvas_app_settings {
        #[allow(unused_mut)]
        let mut object_18 = object.key("CanvasAppSettings").start_object();
        crate::protocol_serde::shape_canvas_app_settings::ser_canvas_app_settings(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    Ok(())
}

pub(crate) fn de_user_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::UserSettings>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::UserSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ExecutionRole" => {
                                builder = builder.set_execution_role(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecurityGroups" => {
                                builder = builder.set_security_groups(
                                    crate::protocol_serde::shape_security_group_ids::de_security_group_ids(tokens)?
                                );
                            }
                            "SharingSettings" => {
                                builder = builder.set_sharing_settings(
                                    crate::protocol_serde::shape_sharing_settings::de_sharing_settings(tokens)?
                                );
                            }
                            "JupyterServerAppSettings" => {
                                builder = builder.set_jupyter_server_app_settings(
                                    crate::protocol_serde::shape_jupyter_server_app_settings::de_jupyter_server_app_settings(tokens)?
                                );
                            }
                            "KernelGatewayAppSettings" => {
                                builder = builder.set_kernel_gateway_app_settings(
                                    crate::protocol_serde::shape_kernel_gateway_app_settings::de_kernel_gateway_app_settings(tokens)?
                                );
                            }
                            "TensorBoardAppSettings" => {
                                builder = builder.set_tensor_board_app_settings(
                                    crate::protocol_serde::shape_tensor_board_app_settings::de_tensor_board_app_settings(tokens)?
                                );
                            }
                            "RStudioServerProAppSettings" => {
                                builder = builder.set_r_studio_server_pro_app_settings(
                                    crate::protocol_serde::shape_r_studio_server_pro_app_settings::de_r_studio_server_pro_app_settings(tokens)?
                                );
                            }
                            "RSessionAppSettings" => {
                                builder = builder.set_r_session_app_settings(
                                    crate::protocol_serde::shape_r_session_app_settings::de_r_session_app_settings(tokens)?
                                );
                            }
                            "CanvasAppSettings" => {
                                builder = builder.set_canvas_app_settings(
                                    crate::protocol_serde::shape_canvas_app_settings::de_canvas_app_settings(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
