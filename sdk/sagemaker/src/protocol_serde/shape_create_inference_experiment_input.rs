// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_inference_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_inference_experiment::CreateInferenceExperimentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.r#type {
        object.key("Type").string(var_2.as_str());
    }
    if let Some(var_3) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Schedule").start_object();
        crate::protocol_serde::shape_inference_experiment_schedule::ser_inference_experiment_schedule(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.description {
        object.key("Description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.role_arn {
        object.key("RoleArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.endpoint_name {
        object.key("EndpointName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.model_variants {
        let mut array_9 = object.key("ModelVariants").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_model_variant_config::ser_model_variant_config(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.data_storage_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("DataStorageConfig").start_object();
        crate::protocol_serde::shape_inference_experiment_data_storage_config::ser_inference_experiment_data_storage_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.shadow_mode_config {
        #[allow(unused_mut)]
        let mut object_15 = object.key("ShadowModeConfig").start_object();
        crate::protocol_serde::shape_shadow_mode_config::ser_shadow_mode_config(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.kms_key {
        object.key("KmsKey").string(var_16.as_str());
    }
    if let Some(var_17) = &input.tags {
        let mut array_18 = object.key("Tags").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    Ok(())
}
