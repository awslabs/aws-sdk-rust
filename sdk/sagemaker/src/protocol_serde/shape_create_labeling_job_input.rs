// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_labeling_job::CreateLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.input_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("InputConfig").start_object();
        crate::protocol_serde::shape_labeling_job_input_config::ser_labeling_job_input_config(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("OutputConfig").start_object();
        crate::protocol_serde::shape_labeling_job_output_config::ser_labeling_job_output_config(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.role_arn {
        object.key("RoleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.label_category_config_s3_uri {
        object
            .key("LabelCategoryConfigS3Uri")
            .string(var_8.as_str());
    }
    if let Some(var_9) = &input.stopping_conditions {
        #[allow(unused_mut)]
        let mut object_10 = object.key("StoppingConditions").start_object();
        crate::protocol_serde::shape_labeling_job_stopping_conditions::ser_labeling_job_stopping_conditions(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.labeling_job_algorithms_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::protocol_serde::shape_labeling_job_algorithms_config::ser_labeling_job_algorithms_config(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.human_task_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("HumanTaskConfig").start_object();
        crate::protocol_serde::shape_human_task_config::ser_human_task_config(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}
