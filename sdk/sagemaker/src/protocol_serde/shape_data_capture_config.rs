// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_data_capture_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DataCaptureConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_2.as_str());
    }
    if let Some(var_3) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.capture_options {
        let mut array_5 = object.key("CaptureOptions").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_capture_option::ser_capture_option(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.capture_content_type_header {
        #[allow(unused_mut)]
        let mut object_9 = object.key("CaptureContentTypeHeader").start_object();
        crate::protocol_serde::shape_capture_content_type_header::ser_capture_content_type_header(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    Ok(())
}

pub(crate) fn de_data_capture_config<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::DataCaptureConfig>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DataCaptureConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "EnableCapture" => {
                                builder = builder.set_enable_capture(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "InitialSamplingPercentage" => {
                                builder = builder.set_initial_sampling_percentage(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DestinationS3Uri" => {
                                builder = builder.set_destination_s3_uri(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "KmsKeyId" => {
                                builder = builder.set_kms_key_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CaptureOptions" => {
                                builder = builder.set_capture_options(
                                    crate::protocol_serde::shape_capture_option_list::de_capture_option_list(tokens)?
                                );
                            }
                            "CaptureContentTypeHeader" => {
                                builder = builder.set_capture_content_type_header(
                                    crate::protocol_serde::shape_capture_content_type_header::de_capture_content_type_header(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
