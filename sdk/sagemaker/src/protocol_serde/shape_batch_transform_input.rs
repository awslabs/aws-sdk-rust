// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_batch_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BatchTransformInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.data_captured_destination_s3_uri {
        object
            .key("DataCapturedDestinationS3Uri")
            .string(var_1.as_str());
    }
    if let Some(var_2) = &input.dataset_format {
        #[allow(unused_mut)]
        let mut object_3 = object.key("DatasetFormat").start_object();
        crate::protocol_serde::shape_monitoring_dataset_format::ser_monitoring_dataset_format(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.local_path {
        object.key("LocalPath").string(var_4.as_str());
    }
    if let Some(var_5) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.s3_data_distribution_type {
        object.key("S3DataDistributionType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_7.as_str());
    }
    if let Some(var_8) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_8.as_str());
    }
    if let Some(var_9) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_9.as_str());
    }
    if let Some(var_10) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_11.as_str());
    }
    if let Some(var_12) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_12.as_str());
    }
    Ok(())
}

pub(crate) fn de_batch_transform_input<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::BatchTransformInput>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::BatchTransformInputBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "DataCapturedDestinationS3Uri" => {
                                builder = builder.set_data_captured_destination_s3_uri(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DatasetFormat" => {
                                builder = builder.set_dataset_format(
                                    crate::protocol_serde::shape_monitoring_dataset_format::de_monitoring_dataset_format(tokens)?
                                );
                            }
                            "LocalPath" => {
                                builder = builder.set_local_path(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "S3InputMode" => {
                                builder = builder.set_s3_input_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ProcessingS3InputMode::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "S3DataDistributionType" => {
                                builder = builder.set_s3_data_distribution_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ProcessingS3DataDistributionType::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "FeaturesAttribute" => {
                                builder = builder.set_features_attribute(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "InferenceAttribute" => {
                                builder = builder.set_inference_attribute(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ProbabilityAttribute" => {
                                builder = builder.set_probability_attribute(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ProbabilityThresholdAttribute" => {
                                builder = builder.set_probability_threshold_attribute(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "StartTimeOffset" => {
                                builder = builder.set_start_time_offset(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EndTimeOffset" => {
                                builder = builder.set_end_time_offset(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
