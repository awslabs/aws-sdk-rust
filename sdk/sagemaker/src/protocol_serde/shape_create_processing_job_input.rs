// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_processing_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_processing_job::CreateProcessingJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.processing_inputs {
        let mut array_2 = object.key("ProcessingInputs").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_processing_input::ser_processing_input(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.processing_output_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ProcessingOutputConfig").start_object();
        crate::protocol_serde::shape_processing_output_config::ser_processing_output_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.processing_resources {
        #[allow(unused_mut)]
        let mut object_9 = object.key("ProcessingResources").start_object();
        crate::protocol_serde::shape_processing_resources::ser_processing_resources(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_11 = object.key("StoppingCondition").start_object();
        crate::protocol_serde::shape_processing_stopping_condition::ser_processing_stopping_condition(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.app_specification {
        #[allow(unused_mut)]
        let mut object_13 = object.key("AppSpecification").start_object();
        crate::protocol_serde::shape_app_specification::ser_app_specification(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.environment {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Environment").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    if let Some(var_18) = &input.network_config {
        #[allow(unused_mut)]
        let mut object_19 = object.key("NetworkConfig").start_object();
        crate::protocol_serde::shape_network_config::ser_network_config(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.role_arn {
        object.key("RoleArn").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.experiment_config {
        #[allow(unused_mut)]
        let mut object_26 = object.key("ExperimentConfig").start_object();
        crate::protocol_serde::shape_experiment_config::ser_experiment_config(&mut object_26, var_25)?;
        object_26.finish();
    }
    Ok(())
}
