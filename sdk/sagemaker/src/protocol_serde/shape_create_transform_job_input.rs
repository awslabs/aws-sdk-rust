// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_transform_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_transform_job::CreateTransformJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.model_name {
        object.key("ModelName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.model_client_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ModelClientConfig").start_object();
        crate::protocol_serde::shape_model_client_config::ser_model_client_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_7.as_str());
    }
    if let Some(var_8) = &input.environment {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Environment").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.transform_input {
        #[allow(unused_mut)]
        let mut object_13 = object.key("TransformInput").start_object();
        crate::protocol_serde::shape_transform_input::ser_transform_input(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.transform_output {
        #[allow(unused_mut)]
        let mut object_15 = object.key("TransformOutput").start_object();
        crate::protocol_serde::shape_transform_output::ser_transform_output(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.data_capture_config {
        #[allow(unused_mut)]
        let mut object_17 = object.key("DataCaptureConfig").start_object();
        crate::protocol_serde::shape_batch_data_capture_config::ser_batch_data_capture_config(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.transform_resources {
        #[allow(unused_mut)]
        let mut object_19 = object.key("TransformResources").start_object();
        crate::protocol_serde::shape_transform_resources::ser_transform_resources(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.data_processing {
        #[allow(unused_mut)]
        let mut object_21 = object.key("DataProcessing").start_object();
        crate::protocol_serde::shape_data_processing::ser_data_processing(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.tags {
        let mut array_23 = object.key("Tags").start_array();
        for item_24 in var_22 {
            {
                #[allow(unused_mut)]
                let mut object_25 = array_23.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.experiment_config {
        #[allow(unused_mut)]
        let mut object_27 = object.key("ExperimentConfig").start_object();
        crate::protocol_serde::shape_experiment_config::ser_experiment_config(&mut object_27, var_26)?;
        object_27.finish();
    }
    Ok(())
}
