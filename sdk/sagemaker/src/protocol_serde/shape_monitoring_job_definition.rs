// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_monitoring_job_definition(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MonitoringJobDefinition,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.baseline_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("BaselineConfig").start_object();
        crate::protocol_serde::shape_monitoring_baseline_config::ser_monitoring_baseline_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.monitoring_inputs {
        let mut array_4 = object.key("MonitoringInputs").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_monitoring_input::ser_monitoring_input(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.monitoring_output_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("MonitoringOutputConfig").start_object();
        crate::protocol_serde::shape_monitoring_output_config::ser_monitoring_output_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.monitoring_resources {
        #[allow(unused_mut)]
        let mut object_10 = object.key("MonitoringResources").start_object();
        crate::protocol_serde::shape_monitoring_resources::ser_monitoring_resources(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.monitoring_app_specification {
        #[allow(unused_mut)]
        let mut object_12 = object.key("MonitoringAppSpecification").start_object();
        crate::protocol_serde::shape_monitoring_app_specification::ser_monitoring_app_specification(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_14 = object.key("StoppingCondition").start_object();
        crate::protocol_serde::shape_monitoring_stopping_condition::ser_monitoring_stopping_condition(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.environment {
        #[allow(unused_mut)]
        let mut object_16 = object.key("Environment").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.network_config {
        #[allow(unused_mut)]
        let mut object_20 = object.key("NetworkConfig").start_object();
        crate::protocol_serde::shape_network_config::ser_network_config(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.role_arn {
        object.key("RoleArn").string(var_21.as_str());
    }
    Ok(())
}

pub(crate) fn de_monitoring_job_definition<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::MonitoringJobDefinition>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MonitoringJobDefinitionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "BaselineConfig" => {
                            builder = builder.set_baseline_config(
                                crate::protocol_serde::shape_monitoring_baseline_config::de_monitoring_baseline_config(tokens)?,
                            );
                        }
                        "MonitoringInputs" => {
                            builder = builder.set_monitoring_inputs(crate::protocol_serde::shape_monitoring_inputs::de_monitoring_inputs(tokens)?);
                        }
                        "MonitoringOutputConfig" => {
                            builder = builder.set_monitoring_output_config(
                                crate::protocol_serde::shape_monitoring_output_config::de_monitoring_output_config(tokens)?,
                            );
                        }
                        "MonitoringResources" => {
                            builder =
                                builder.set_monitoring_resources(crate::protocol_serde::shape_monitoring_resources::de_monitoring_resources(tokens)?);
                        }
                        "MonitoringAppSpecification" => {
                            builder = builder.set_monitoring_app_specification(
                                crate::protocol_serde::shape_monitoring_app_specification::de_monitoring_app_specification(tokens)?,
                            );
                        }
                        "StoppingCondition" => {
                            builder = builder.set_stopping_condition(
                                crate::protocol_serde::shape_monitoring_stopping_condition::de_monitoring_stopping_condition(tokens)?,
                            );
                        }
                        "Environment" => {
                            builder = builder.set_environment(
                                crate::protocol_serde::shape_monitoring_environment_map::de_monitoring_environment_map(tokens)?,
                            );
                        }
                        "NetworkConfig" => {
                            builder = builder.set_network_config(crate::protocol_serde::shape_network_config::de_network_config(tokens)?);
                        }
                        "RoleArn" => {
                            builder = builder.set_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::monitoring_job_definition_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
