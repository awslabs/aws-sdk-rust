// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_processing_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ProcessingInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.input_name {
        object.key("InputName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.app_managed {
        object.key("AppManaged").boolean(*var_2);
    }
    if let Some(var_3) = &input.s3_input {
        #[allow(unused_mut)]
        let mut object_4 = object.key("S3Input").start_object();
        crate::protocol_serde::shape_processing_s3_input::ser_processing_s3_input(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.dataset_definition {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DatasetDefinition").start_object();
        crate::protocol_serde::shape_dataset_definition::ser_dataset_definition(&mut object_6, var_5)?;
        object_6.finish();
    }
    Ok(())
}

pub(crate) fn de_processing_input<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ProcessingInput>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ProcessingInputBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "InputName" => {
                            builder = builder.set_input_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AppManaged" => {
                            builder = builder.set_app_managed(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "S3Input" => {
                            builder = builder.set_s3_input(crate::protocol_serde::shape_processing_s3_input::de_processing_s3_input(tokens)?);
                        }
                        "DatasetDefinition" => {
                            builder = builder.set_dataset_definition(crate::protocol_serde::shape_dataset_definition::de_dataset_definition(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::processing_input_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
