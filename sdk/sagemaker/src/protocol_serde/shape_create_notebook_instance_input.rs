// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_notebook_instance::CreateNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.instance_type {
        object.key("InstanceType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.subnet_id {
        object.key("SubnetId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.security_group_ids {
        let mut array_5 = object.key("SecurityGroupIds").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.role_arn {
        object.key("RoleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_14.as_str());
    }
    if let Some(var_15) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.accelerator_types {
        let mut array_17 = object.key("AcceleratorTypes").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_19.as_str());
    }
    if let Some(var_20) = &input.additional_code_repositories {
        let mut array_21 = object.key("AdditionalCodeRepositories").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.root_access {
        object.key("RootAccess").string(var_23.as_str());
    }
    if let Some(var_24) = &input.platform_identifier {
        object.key("PlatformIdentifier").string(var_24.as_str());
    }
    if let Some(var_25) = &input.instance_metadata_service_configuration {
        #[allow(unused_mut)]
        let mut object_26 = object
            .key("InstanceMetadataServiceConfiguration")
            .start_object();
        crate::protocol_serde::shape_instance_metadata_service_configuration::ser_instance_metadata_service_configuration(&mut object_26, var_25)?;
        object_26.finish();
    }
    Ok(())
}
