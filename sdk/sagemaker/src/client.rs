// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) conf: crate::Config,
    #[allow(dead_code)] // unused when a service does not provide any operations
    pub(crate) runtime_plugins: ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
}

/// Client for Amazon SageMaker Service
///
/// Client for invoking operations on Amazon SageMaker Service. Each operation on Amazon SageMaker Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
/// ## Constructing a `Client`
///
/// A [`Config`] is required to construct a client. For most use cases, the [`aws-config`]
/// crate should be used to automatically resolve this config using
/// [`aws_config::load_from_env()`], since this will resolve an [`SdkConfig`] which can be shared
/// across multiple different AWS SDK clients. This config resolution process can be customized
/// by calling [`aws_config::from_env()`] instead, which returns a [`ConfigLoader`] that uses
/// the [builder pattern] to customize the default config.
///
/// In the simplest case, creating a client looks as follows:
/// ```rust,no_run
/// # async fn wrapper() {
/// let config = aws_config::load_from_env().await;
/// let client = aws_sdk_sagemaker::Client::new(&config);
/// # }
/// ```
///
/// Occasionally, SDKs may have additional service-specific that can be set on the [`Config`] that
/// is absent from [`SdkConfig`], or slightly different settings for a specific client may be desired.
/// The [`Config`] struct implements `From<&SdkConfig>`, so setting these specific settings can be
/// done as follows:
///
/// ```rust,no_run
/// # async fn wrapper() {
/// let sdk_config = ::aws_config::load_from_env().await;
/// let config = aws_sdk_sagemaker::config::Builder::from(&sdk_config)
/// # /*
///     .some_service_specific_setting("value")
/// # */
///     .build();
/// # }
/// ```
///
/// See the [`aws-config` docs] and [`Config`] for more information on customizing configuration.
///
/// _Note:_ Client construction is expensive due to connection thread pool initialization, and should
/// be done once at application start-up.
///
/// [`Config`]: crate::Config
/// [`ConfigLoader`]: https://docs.rs/aws-config/*/aws_config/struct.ConfigLoader.html
/// [`SdkConfig`]: https://docs.rs/aws-config/*/aws_config/struct.SdkConfig.html
/// [`aws-config` docs]: https://docs.rs/aws-config/*
/// [`aws-config`]: https://crates.io/crates/aws-config
/// [`aws_config::from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.from_env.html
/// [`aws_config::load_from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.load_from_env.html
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#builders-enable-construction-of-complex-values-c-builder
/// # Using the `Client`
///
/// A client has a function for every operation that can be performed by the service.
/// For example, the [`AddAssociation`](crate::operation::add_association) operation has
/// a [`Client::add_association`], function which returns a builder for that operation.
/// The fluent builder ultimately has a `send()` function that returns an async future that
/// returns a result, as illustrated below:
///
/// ```rust,ignore
/// let result = client.add_association()
///     .source_arn("example")
///     .send()
///     .await;
/// ```
///
/// The underlying HTTP requests that get made by this can be modified with the `customize_operation`
/// function on the fluent builder. See the [`customize`](crate::client::customize) module for more
/// information.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct Client {
    handle: ::std::sync::Arc<Handle>,
}

impl Client {
    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// This method will panic in the following cases:
    ///
    /// - Retries or timeouts are enabled without a `sleep_impl` configured.
    /// - Identity caching is enabled without a `sleep_impl` and `time_source` configured.
    ///
    /// The panic message for each of these will have instructions on how to resolve them.
    pub fn from_conf(conf: crate::Config) -> Self {
        let handle = Handle {
            conf: conf.clone(),
            runtime_plugins: crate::config::base_client_runtime_plugins(conf),
        };
        if let Err(err) = Self::validate_config(&handle) {
            panic!("Invalid client configuration: {err}");
        }
        Self {
            handle: ::std::sync::Arc::new(handle),
        }
    }

    /// Returns the client's configuration.
    pub fn config(&self) -> &crate::Config {
        &self.handle.conf
    }

    fn validate_config(handle: &Handle) -> Result<(), ::aws_smithy_runtime_api::box_error::BoxError> {
        let mut cfg = ::aws_smithy_types::config_bag::ConfigBag::base();
        handle
            .runtime_plugins
            .apply_client_configuration(&mut cfg)?
            .validate_base_client_config(&cfg)?;
        Ok(())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](::aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &::aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }
}

mod add_association;

mod add_tags;

mod associate_trial_component;

mod batch_describe_model_package;

mod create_action;

mod create_algorithm;

mod create_app;

mod create_app_image_config;

mod create_artifact;

mod create_auto_ml_job;

mod create_auto_ml_job_v2;

mod create_code_repository;

mod create_compilation_job;

mod create_context;

mod create_data_quality_job_definition;

mod create_device_fleet;

mod create_domain;

mod create_edge_deployment_plan;

mod create_edge_deployment_stage;

mod create_edge_packaging_job;

mod create_endpoint;

mod create_endpoint_config;

mod create_experiment;

mod create_feature_group;

mod create_flow_definition;

mod create_hub;

mod create_human_task_ui;

mod create_hyper_parameter_tuning_job;

mod create_image;

mod create_image_version;

mod create_inference_experiment;

mod create_inference_recommendations_job;

mod create_labeling_job;

mod create_model;

mod create_model_bias_job_definition;

mod create_model_card;

mod create_model_card_export_job;

mod create_model_explainability_job_definition;

mod create_model_package;

mod create_model_package_group;

mod create_model_quality_job_definition;

mod create_monitoring_schedule;

mod create_notebook_instance;

mod create_notebook_instance_lifecycle_config;

mod create_pipeline;

mod create_presigned_domain_url;

mod create_presigned_notebook_instance_url;

mod create_processing_job;

mod create_project;

mod create_space;

mod create_studio_lifecycle_config;

mod create_training_job;

mod create_transform_job;

mod create_trial;

mod create_trial_component;

mod create_user_profile;

mod create_workforce;

mod create_workteam;

/// Operation customization and supporting types.
///
/// The underlying HTTP requests made during an operation can be customized
/// by calling the `customize()` method on the builder returned from a client
/// operation call. For example, this can be used to add an additional HTTP header:
///
/// ```ignore
/// # async fn wrapper() -> ::std::result::Result<(), aws_sdk_sagemaker::Error> {
/// # let client: aws_sdk_sagemaker::Client = unimplemented!();
/// use ::http::header::{HeaderName, HeaderValue};
///
/// let result = client.add_association()
///     .customize()
///     .mutate_request(|req| {
///         // Add `x-example-header` with value
///         req.headers_mut()
///             .insert(
///                 HeaderName::from_static("x-example-header"),
///                 HeaderValue::from_static("1"),
///             );
///     })
///     .send()
///     .await;
/// # }
/// ```
pub mod customize;

mod delete_action;

mod delete_algorithm;

mod delete_app;

mod delete_app_image_config;

mod delete_artifact;

mod delete_association;

mod delete_code_repository;

mod delete_context;

mod delete_data_quality_job_definition;

mod delete_device_fleet;

mod delete_domain;

mod delete_edge_deployment_plan;

mod delete_edge_deployment_stage;

mod delete_endpoint;

mod delete_endpoint_config;

mod delete_experiment;

mod delete_feature_group;

mod delete_flow_definition;

mod delete_hub;

mod delete_hub_content;

mod delete_human_task_ui;

mod delete_image;

mod delete_image_version;

mod delete_inference_experiment;

mod delete_model;

mod delete_model_bias_job_definition;

mod delete_model_card;

mod delete_model_explainability_job_definition;

mod delete_model_package;

mod delete_model_package_group;

mod delete_model_package_group_policy;

mod delete_model_quality_job_definition;

mod delete_monitoring_schedule;

mod delete_notebook_instance;

mod delete_notebook_instance_lifecycle_config;

mod delete_pipeline;

mod delete_project;

mod delete_space;

mod delete_studio_lifecycle_config;

mod delete_tags;

mod delete_trial;

mod delete_trial_component;

mod delete_user_profile;

mod delete_workforce;

mod delete_workteam;

mod deregister_devices;

mod describe_action;

mod describe_algorithm;

mod describe_app;

mod describe_app_image_config;

mod describe_artifact;

mod describe_auto_ml_job;

mod describe_auto_ml_job_v2;

mod describe_code_repository;

mod describe_compilation_job;

mod describe_context;

mod describe_data_quality_job_definition;

mod describe_device;

mod describe_device_fleet;

mod describe_domain;

mod describe_edge_deployment_plan;

mod describe_edge_packaging_job;

mod describe_endpoint;

mod describe_endpoint_config;

mod describe_experiment;

mod describe_feature_group;

mod describe_feature_metadata;

mod describe_flow_definition;

mod describe_hub;

mod describe_hub_content;

mod describe_human_task_ui;

mod describe_hyper_parameter_tuning_job;

mod describe_image;

mod describe_image_version;

mod describe_inference_experiment;

mod describe_inference_recommendations_job;

mod describe_labeling_job;

mod describe_lineage_group;

mod describe_model;

mod describe_model_bias_job_definition;

mod describe_model_card;

mod describe_model_card_export_job;

mod describe_model_explainability_job_definition;

mod describe_model_package;

mod describe_model_package_group;

mod describe_model_quality_job_definition;

mod describe_monitoring_schedule;

mod describe_notebook_instance;

mod describe_notebook_instance_lifecycle_config;

mod describe_pipeline;

mod describe_pipeline_definition_for_execution;

mod describe_pipeline_execution;

mod describe_processing_job;

mod describe_project;

mod describe_space;

mod describe_studio_lifecycle_config;

mod describe_subscribed_workteam;

mod describe_training_job;

mod describe_transform_job;

mod describe_trial;

mod describe_trial_component;

mod describe_user_profile;

mod describe_workforce;

mod describe_workteam;

mod disable_sagemaker_servicecatalog_portfolio;

mod disassociate_trial_component;

mod enable_sagemaker_servicecatalog_portfolio;

mod get_device_fleet_report;

mod get_lineage_group_policy;

mod get_model_package_group_policy;

mod get_sagemaker_servicecatalog_portfolio_status;

mod get_scaling_configuration_recommendation;

mod get_search_suggestions;

mod import_hub_content;

mod list_actions;

mod list_algorithms;

mod list_aliases;

mod list_app_image_configs;

mod list_apps;

mod list_artifacts;

mod list_associations;

mod list_auto_ml_jobs;

mod list_candidates_for_auto_ml_job;

mod list_code_repositories;

mod list_compilation_jobs;

mod list_contexts;

mod list_data_quality_job_definitions;

mod list_device_fleets;

mod list_devices;

mod list_domains;

mod list_edge_deployment_plans;

mod list_edge_packaging_jobs;

mod list_endpoint_configs;

mod list_endpoints;

mod list_experiments;

mod list_feature_groups;

mod list_flow_definitions;

mod list_hub_content_versions;

mod list_hub_contents;

mod list_hubs;

mod list_human_task_uis;

mod list_hyper_parameter_tuning_jobs;

mod list_image_versions;

mod list_images;

mod list_inference_experiments;

mod list_inference_recommendations_job_steps;

mod list_inference_recommendations_jobs;

mod list_labeling_jobs;

mod list_labeling_jobs_for_workteam;

mod list_lineage_groups;

mod list_model_bias_job_definitions;

mod list_model_card_export_jobs;

mod list_model_card_versions;

mod list_model_cards;

mod list_model_explainability_job_definitions;

mod list_model_metadata;

mod list_model_package_groups;

mod list_model_packages;

mod list_model_quality_job_definitions;

mod list_models;

mod list_monitoring_alert_history;

mod list_monitoring_alerts;

mod list_monitoring_executions;

mod list_monitoring_schedules;

mod list_notebook_instance_lifecycle_configs;

mod list_notebook_instances;

mod list_pipeline_execution_steps;

mod list_pipeline_executions;

mod list_pipeline_parameters_for_execution;

mod list_pipelines;

mod list_processing_jobs;

mod list_projects;

mod list_resource_catalogs;

mod list_spaces;

mod list_stage_devices;

mod list_studio_lifecycle_configs;

mod list_subscribed_workteams;

mod list_tags;

mod list_training_jobs;

mod list_training_jobs_for_hyper_parameter_tuning_job;

mod list_transform_jobs;

mod list_trial_components;

mod list_trials;

mod list_user_profiles;

mod list_workforces;

mod list_workteams;

mod put_model_package_group_policy;

mod query_lineage;

mod register_devices;

mod render_ui_template;

mod retry_pipeline_execution;

mod search;

mod send_pipeline_execution_step_failure;

mod send_pipeline_execution_step_success;

mod start_edge_deployment_stage;

mod start_inference_experiment;

mod start_monitoring_schedule;

mod start_notebook_instance;

mod start_pipeline_execution;

mod stop_auto_ml_job;

mod stop_compilation_job;

mod stop_edge_deployment_stage;

mod stop_edge_packaging_job;

mod stop_hyper_parameter_tuning_job;

mod stop_inference_experiment;

mod stop_inference_recommendations_job;

mod stop_labeling_job;

mod stop_monitoring_schedule;

mod stop_notebook_instance;

mod stop_pipeline_execution;

mod stop_processing_job;

mod stop_training_job;

mod stop_transform_job;

mod update_action;

mod update_app_image_config;

mod update_artifact;

mod update_code_repository;

mod update_context;

mod update_device_fleet;

mod update_devices;

mod update_domain;

mod update_endpoint;

mod update_endpoint_weights_and_capacities;

mod update_experiment;

mod update_feature_group;

mod update_feature_metadata;

mod update_hub;

mod update_image;

mod update_image_version;

mod update_inference_experiment;

mod update_model_card;

mod update_model_package;

mod update_monitoring_alert;

mod update_monitoring_schedule;

mod update_notebook_instance;

mod update_notebook_instance_lifecycle_config;

mod update_pipeline;

mod update_pipeline_execution;

mod update_project;

mod update_space;

mod update_training_job;

mod update_trial;

mod update_trial_component;

mod update_user_profile;

mod update_workforce;

mod update_workteam;
