// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon SageMaker Service
///
/// Client for invoking operations on Amazon SageMaker Service. Each operation on Amazon SageMaker Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_sagemaker::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_sagemaker::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_sagemaker::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

mod add_association;

mod add_tags;

mod associate_trial_component;

mod batch_describe_model_package;

mod create_action;

mod create_algorithm;

mod create_app;

mod create_app_image_config;

mod create_artifact;

mod create_auto_ml_job;

mod create_code_repository;

mod create_compilation_job;

mod create_context;

mod create_data_quality_job_definition;

mod create_device_fleet;

mod create_domain;

mod create_edge_deployment_plan;

mod create_edge_deployment_stage;

mod create_edge_packaging_job;

mod create_endpoint;

mod create_endpoint_config;

mod create_experiment;

mod create_feature_group;

mod create_flow_definition;

mod create_hub;

mod create_human_task_ui;

mod create_hyper_parameter_tuning_job;

mod create_image;

mod create_image_version;

mod create_inference_experiment;

mod create_inference_recommendations_job;

mod create_labeling_job;

mod create_model;

mod create_model_bias_job_definition;

mod create_model_card;

mod create_model_card_export_job;

mod create_model_explainability_job_definition;

mod create_model_package;

mod create_model_package_group;

mod create_model_quality_job_definition;

mod create_monitoring_schedule;

mod create_notebook_instance;

mod create_notebook_instance_lifecycle_config;

mod create_pipeline;

mod create_presigned_domain_url;

mod create_presigned_notebook_instance_url;

mod create_processing_job;

mod create_project;

mod create_space;

mod create_studio_lifecycle_config;

mod create_training_job;

mod create_transform_job;

mod create_trial;

mod create_trial_component;

mod create_user_profile;

mod create_workforce;

mod create_workteam;

mod delete_action;

mod delete_algorithm;

mod delete_app;

mod delete_app_image_config;

mod delete_artifact;

mod delete_association;

mod delete_code_repository;

mod delete_context;

mod delete_data_quality_job_definition;

mod delete_device_fleet;

mod delete_domain;

mod delete_edge_deployment_plan;

mod delete_edge_deployment_stage;

mod delete_endpoint;

mod delete_endpoint_config;

mod delete_experiment;

mod delete_feature_group;

mod delete_flow_definition;

mod delete_hub;

mod delete_hub_content;

mod delete_human_task_ui;

mod delete_image;

mod delete_image_version;

mod delete_inference_experiment;

mod delete_model;

mod delete_model_bias_job_definition;

mod delete_model_card;

mod delete_model_explainability_job_definition;

mod delete_model_package;

mod delete_model_package_group;

mod delete_model_package_group_policy;

mod delete_model_quality_job_definition;

mod delete_monitoring_schedule;

mod delete_notebook_instance;

mod delete_notebook_instance_lifecycle_config;

mod delete_pipeline;

mod delete_project;

mod delete_space;

mod delete_studio_lifecycle_config;

mod delete_tags;

mod delete_trial;

mod delete_trial_component;

mod delete_user_profile;

mod delete_workforce;

mod delete_workteam;

mod deregister_devices;

mod describe_action;

mod describe_algorithm;

mod describe_app;

mod describe_app_image_config;

mod describe_artifact;

mod describe_auto_ml_job;

mod describe_code_repository;

mod describe_compilation_job;

mod describe_context;

mod describe_data_quality_job_definition;

mod describe_device;

mod describe_device_fleet;

mod describe_domain;

mod describe_edge_deployment_plan;

mod describe_edge_packaging_job;

mod describe_endpoint;

mod describe_endpoint_config;

mod describe_experiment;

mod describe_feature_group;

mod describe_feature_metadata;

mod describe_flow_definition;

mod describe_hub;

mod describe_hub_content;

mod describe_human_task_ui;

mod describe_hyper_parameter_tuning_job;

mod describe_image;

mod describe_image_version;

mod describe_inference_experiment;

mod describe_inference_recommendations_job;

mod describe_labeling_job;

mod describe_lineage_group;

mod describe_model;

mod describe_model_bias_job_definition;

mod describe_model_card;

mod describe_model_card_export_job;

mod describe_model_explainability_job_definition;

mod describe_model_package;

mod describe_model_package_group;

mod describe_model_quality_job_definition;

mod describe_monitoring_schedule;

mod describe_notebook_instance;

mod describe_notebook_instance_lifecycle_config;

mod describe_pipeline;

mod describe_pipeline_definition_for_execution;

mod describe_pipeline_execution;

mod describe_processing_job;

mod describe_project;

mod describe_space;

mod describe_studio_lifecycle_config;

mod describe_subscribed_workteam;

mod describe_training_job;

mod describe_transform_job;

mod describe_trial;

mod describe_trial_component;

mod describe_user_profile;

mod describe_workforce;

mod describe_workteam;

mod disable_sagemaker_servicecatalog_portfolio;

mod disassociate_trial_component;

mod enable_sagemaker_servicecatalog_portfolio;

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;

mod get_device_fleet_report;

mod get_lineage_group_policy;

mod get_model_package_group_policy;

mod get_sagemaker_servicecatalog_portfolio_status;

mod get_search_suggestions;

mod import_hub_content;

mod list_actions;

mod list_algorithms;

mod list_aliases;

mod list_app_image_configs;

mod list_apps;

mod list_artifacts;

mod list_associations;

mod list_auto_ml_jobs;

mod list_candidates_for_auto_ml_job;

mod list_code_repositories;

mod list_compilation_jobs;

mod list_contexts;

mod list_data_quality_job_definitions;

mod list_device_fleets;

mod list_devices;

mod list_domains;

mod list_edge_deployment_plans;

mod list_edge_packaging_jobs;

mod list_endpoint_configs;

mod list_endpoints;

mod list_experiments;

mod list_feature_groups;

mod list_flow_definitions;

mod list_hub_content_versions;

mod list_hub_contents;

mod list_hubs;

mod list_human_task_uis;

mod list_hyper_parameter_tuning_jobs;

mod list_image_versions;

mod list_images;

mod list_inference_experiments;

mod list_inference_recommendations_job_steps;

mod list_inference_recommendations_jobs;

mod list_labeling_jobs;

mod list_labeling_jobs_for_workteam;

mod list_lineage_groups;

mod list_model_bias_job_definitions;

mod list_model_card_export_jobs;

mod list_model_card_versions;

mod list_model_cards;

mod list_model_explainability_job_definitions;

mod list_model_metadata;

mod list_model_package_groups;

mod list_model_packages;

mod list_model_quality_job_definitions;

mod list_models;

mod list_monitoring_alert_history;

mod list_monitoring_alerts;

mod list_monitoring_executions;

mod list_monitoring_schedules;

mod list_notebook_instance_lifecycle_configs;

mod list_notebook_instances;

mod list_pipeline_execution_steps;

mod list_pipeline_executions;

mod list_pipeline_parameters_for_execution;

mod list_pipelines;

mod list_processing_jobs;

mod list_projects;

mod list_spaces;

mod list_stage_devices;

mod list_studio_lifecycle_configs;

mod list_subscribed_workteams;

mod list_tags;

mod list_training_jobs;

mod list_training_jobs_for_hyper_parameter_tuning_job;

mod list_transform_jobs;

mod list_trial_components;

mod list_trials;

mod list_user_profiles;

mod list_workforces;

mod list_workteams;

mod put_model_package_group_policy;

mod query_lineage;

mod register_devices;

mod render_ui_template;

mod retry_pipeline_execution;

mod search;

mod send_pipeline_execution_step_failure;

mod send_pipeline_execution_step_success;

mod start_edge_deployment_stage;

mod start_inference_experiment;

mod start_monitoring_schedule;

mod start_notebook_instance;

mod start_pipeline_execution;

mod stop_auto_ml_job;

mod stop_compilation_job;

mod stop_edge_deployment_stage;

mod stop_edge_packaging_job;

mod stop_hyper_parameter_tuning_job;

mod stop_inference_experiment;

mod stop_inference_recommendations_job;

mod stop_labeling_job;

mod stop_monitoring_schedule;

mod stop_notebook_instance;

mod stop_pipeline_execution;

mod stop_processing_job;

mod stop_training_job;

mod stop_transform_job;

mod update_action;

mod update_app_image_config;

mod update_artifact;

mod update_code_repository;

mod update_context;

mod update_device_fleet;

mod update_devices;

mod update_domain;

mod update_endpoint;

mod update_endpoint_weights_and_capacities;

mod update_experiment;

mod update_feature_group;

mod update_feature_metadata;

mod update_hub;

mod update_image;

mod update_image_version;

mod update_inference_experiment;

mod update_model_card;

mod update_model_package;

mod update_monitoring_alert;

mod update_monitoring_schedule;

mod update_notebook_instance;

mod update_notebook_instance_lifecycle_config;

mod update_pipeline;

mod update_pipeline_execution;

mod update_project;

mod update_space;

mod update_training_job;

mod update_trial;

mod update_trial_component;

mod update_user_profile;

mod update_workforce;

mod update_workteam;
