// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StopInferenceExperiment`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::set_name): <p>The name of the inference experiment to stop.</p>
    ///   - [`model_variant_actions(HashMap<String, ModelVariantAction>)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::model_variant_actions) / [`set_model_variant_actions(Option<HashMap<String, ModelVariantAction>>)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::set_model_variant_actions): <p> Array of key-value pairs, with names of variants mapped to actions. The possible actions are the following: </p>  <ul>   <li> <p> <code>Promote</code> - Promote the shadow variant to a production variant</p> </li>   <li> <p> <code>Remove</code> - Delete the variant</p> </li>   <li> <p> <code>Retain</code> - Keep the variant as it is</p> </li>  </ul>
    ///   - [`desired_model_variants(Vec<ModelVariantConfig>)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::desired_model_variants) / [`set_desired_model_variants(Option<Vec<ModelVariantConfig>>)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::set_desired_model_variants): <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant that you want to deploy after the inference experiment stops. Each <code>ModelVariantConfig</code> describes the infrastructure configuration for deploying the corresponding variant. </p>
    ///   - [`desired_state(InferenceExperimentStopDesiredState)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::desired_state) / [`set_desired_state(Option<InferenceExperimentStopDesiredState>)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::set_desired_state): <p> The desired state of the experiment after stopping. The possible states are the following: </p>  <ul>   <li> <p> <code>Completed</code>: The experiment completed successfully</p> </li>   <li> <p> <code>Cancelled</code>: The experiment was canceled</p> </li>  </ul>
    ///   - [`reason(impl Into<String>)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::reason) / [`set_reason(Option<String>)`](crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::set_reason): <p>The reason for stopping the experiment.</p>
    /// - On success, responds with [`StopInferenceExperimentOutput`](crate::operation::stop_inference_experiment::StopInferenceExperimentOutput) with field(s):
    ///   - [`inference_experiment_arn(Option<String>)`](crate::operation::stop_inference_experiment::StopInferenceExperimentOutput::inference_experiment_arn): <p>The ARN of the stopped inference experiment.</p>
    /// - On failure, responds with [`SdkError<StopInferenceExperimentError>`](crate::operation::stop_inference_experiment::StopInferenceExperimentError)
    pub fn stop_inference_experiment(
        &self,
    ) -> crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder
    {
        crate::operation::stop_inference_experiment::builders::StopInferenceExperimentFluentBuilder::new(self.handle.clone())
    }
}
