// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateTrialComponent`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trial_component_name(impl Into<String>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::trial_component_name) / [`set_trial_component_name(Option<String>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_trial_component_name):<br>required: **true**<br><p>The name of the component to update.</p><br>
    ///   - [`display_name(impl Into<String>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::display_name) / [`set_display_name(Option<String>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_display_name):<br>required: **false**<br><p>The name of the component as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is displayed.</p><br>
    ///   - [`status(TrialComponentStatus)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::status) / [`set_status(Option<TrialComponentStatus>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_status):<br>required: **false**<br><p>The new status of the component.</p><br>
    ///   - [`start_time(DateTime)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_start_time):<br>required: **false**<br><p>When the component started.</p><br>
    ///   - [`end_time(DateTime)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_end_time):<br>required: **false**<br><p>When the component ended.</p><br>
    ///   - [`parameters(impl Into<String>, TrialComponentParameterValue)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::parameters) / [`set_parameters(Option<HashMap::<String, TrialComponentParameterValue>>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_parameters):<br>required: **false**<br><p>Replaces all of the component's hyperparameters with the specified hyperparameters or add new hyperparameters. Existing hyperparameters are replaced if the trial component is updated with an identical hyperparameter key.</p><br>
    ///   - [`parameters_to_remove(impl Into<String>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::parameters_to_remove) / [`set_parameters_to_remove(Option<Vec::<String>>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_parameters_to_remove):<br>required: **false**<br><p>The hyperparameters to remove from the component.</p><br>
    ///   - [`input_artifacts(impl Into<String>, TrialComponentArtifact)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::input_artifacts) / [`set_input_artifacts(Option<HashMap::<String, TrialComponentArtifact>>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_input_artifacts):<br>required: **false**<br><p>Replaces all of the component's input artifacts with the specified artifacts or adds new input artifacts. Existing input artifacts are replaced if the trial component is updated with an identical input artifact key.</p><br>
    ///   - [`input_artifacts_to_remove(impl Into<String>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::input_artifacts_to_remove) / [`set_input_artifacts_to_remove(Option<Vec::<String>>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_input_artifacts_to_remove):<br>required: **false**<br><p>The input artifacts to remove from the component.</p><br>
    ///   - [`output_artifacts(impl Into<String>, TrialComponentArtifact)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::output_artifacts) / [`set_output_artifacts(Option<HashMap::<String, TrialComponentArtifact>>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_output_artifacts):<br>required: **false**<br><p>Replaces all of the component's output artifacts with the specified artifacts or adds new output artifacts. Existing output artifacts are replaced if the trial component is updated with an identical output artifact key.</p><br>
    ///   - [`output_artifacts_to_remove(impl Into<String>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::output_artifacts_to_remove) / [`set_output_artifacts_to_remove(Option<Vec::<String>>)`](crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::set_output_artifacts_to_remove):<br>required: **false**<br><p>The output artifacts to remove from the component.</p><br>
    /// - On success, responds with [`UpdateTrialComponentOutput`](crate::operation::update_trial_component::UpdateTrialComponentOutput) with field(s):
    ///   - [`trial_component_arn(Option<String>)`](crate::operation::update_trial_component::UpdateTrialComponentOutput::trial_component_arn): <p>The Amazon Resource Name (ARN) of the trial component.</p>
    /// - On failure, responds with [`SdkError<UpdateTrialComponentError>`](crate::operation::update_trial_component::UpdateTrialComponentError)
    pub fn update_trial_component(&self) -> crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder {
        crate::operation::update_trial_component::builders::UpdateTrialComponentFluentBuilder::new(self.handle.clone())
    }
}
