// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListNotebookInstances`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_next_token):<br>required: **false**<br><p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the response includes a <code>NextToken</code>. You can use this token in your subsequent <code>ListNotebookInstances</code> request to fetch the next set of notebook instances. </p> <note>   <p>You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request. </p>  </note><br>
    ///   - [`max_results(i32)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of notebook instances to return.</p><br>
    ///   - [`sort_by(NotebookInstanceSortKey)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::sort_by) / [`set_sort_by(Option<NotebookInstanceSortKey>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_sort_by):<br>required: **false**<br><p>The field to sort results by. The default is <code>Name</code>.</p><br>
    ///   - [`sort_order(NotebookInstanceSortOrder)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::sort_order) / [`set_sort_order(Option<NotebookInstanceSortOrder>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_sort_order):<br>required: **false**<br><p>The sort order for results. </p><br>
    ///   - [`name_contains(impl Into<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::name_contains) / [`set_name_contains(Option<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_name_contains):<br>required: **false**<br><p>A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.</p><br>
    ///   - [`creation_time_before(DateTime)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::creation_time_before) / [`set_creation_time_before(Option<DateTime>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_creation_time_before):<br>required: **false**<br><p>A filter that returns only notebook instances that were created before the specified time (timestamp). </p><br>
    ///   - [`creation_time_after(DateTime)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::creation_time_after) / [`set_creation_time_after(Option<DateTime>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_creation_time_after):<br>required: **false**<br><p>A filter that returns only notebook instances that were created after the specified time (timestamp).</p><br>
    ///   - [`last_modified_time_before(DateTime)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::last_modified_time_before) / [`set_last_modified_time_before(Option<DateTime>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_last_modified_time_before):<br>required: **false**<br><p>A filter that returns only notebook instances that were modified before the specified time (timestamp).</p><br>
    ///   - [`last_modified_time_after(DateTime)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::last_modified_time_after) / [`set_last_modified_time_after(Option<DateTime>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_last_modified_time_after):<br>required: **false**<br><p>A filter that returns only notebook instances that were modified after the specified time (timestamp).</p><br>
    ///   - [`status_equals(NotebookInstanceStatus)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::status_equals) / [`set_status_equals(Option<NotebookInstanceStatus>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_status_equals):<br>required: **false**<br><p>A filter that returns only notebook instances with the specified status.</p><br>
    ///   - [`notebook_instance_lifecycle_config_name_contains(impl Into<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::notebook_instance_lifecycle_config_name_contains) / [`set_notebook_instance_lifecycle_config_name_contains(Option<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_notebook_instance_lifecycle_config_name_contains):<br>required: **false**<br><p>A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.</p><br>
    ///   - [`default_code_repository_contains(impl Into<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::default_code_repository_contains) / [`set_default_code_repository_contains(Option<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_default_code_repository_contains):<br>required: **false**<br><p>A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.</p><br>
    ///   - [`additional_code_repository_equals(impl Into<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::additional_code_repository_equals) / [`set_additional_code_repository_equals(Option<String>)`](crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::set_additional_code_repository_equals):<br>required: **false**<br><p>A filter that returns only notebook instances with associated with the specified git repository.</p><br>
    /// - On success, responds with [`ListNotebookInstancesOutput`](crate::operation::list_notebook_instances::ListNotebookInstancesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_notebook_instances::ListNotebookInstancesOutput::next_token): <p>If the response to the previous <code>ListNotebookInstances</code> request was truncated, SageMaker returns this token. To retrieve the next set of notebook instances, use the token in the next request.</p>
    ///   - [`notebook_instances(Option<Vec::<NotebookInstanceSummary>>)`](crate::operation::list_notebook_instances::ListNotebookInstancesOutput::notebook_instances): <p>An array of <code>NotebookInstanceSummary</code> objects, one for each notebook instance.</p>
    /// - On failure, responds with [`SdkError<ListNotebookInstancesError>`](crate::operation::list_notebook_instances::ListNotebookInstancesError)
    pub fn list_notebook_instances(&self) -> crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder {
        crate::operation::list_notebook_instances::builders::ListNotebookInstancesFluentBuilder::new(self.handle.clone())
    }
}
