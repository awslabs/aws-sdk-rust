// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateModelPackageGroup`](crate::client::fluent_builders::CreateModelPackageGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_package_group_name(impl Into<String>)`](crate::client::fluent_builders::CreateModelPackageGroup::model_package_group_name) / [`set_model_package_group_name(Option<String>)`](crate::client::fluent_builders::CreateModelPackageGroup::set_model_package_group_name): <p>The name of the model group.</p>
    ///   - [`model_package_group_description(impl Into<String>)`](crate::client::fluent_builders::CreateModelPackageGroup::model_package_group_description) / [`set_model_package_group_description(Option<String>)`](crate::client::fluent_builders::CreateModelPackageGroup::set_model_package_group_description): <p>A description for the model group.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateModelPackageGroup::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateModelPackageGroup::set_tags): <p>A list of key value pairs associated with the model group. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    /// - On success, responds with [`CreateModelPackageGroupOutput`](crate::output::CreateModelPackageGroupOutput) with field(s):
    ///   - [`model_package_group_arn(Option<String>)`](crate::output::CreateModelPackageGroupOutput::model_package_group_arn): <p>The Amazon Resource Name (ARN) of the model group.</p>
    /// - On failure, responds with [`SdkError<CreateModelPackageGroupError>`](crate::error::CreateModelPackageGroupError)
    pub fn create_model_package_group(
        &self,
    ) -> crate::client::fluent_builders::CreateModelPackageGroup {
        crate::client::fluent_builders::CreateModelPackageGroup::new(self.handle.clone())
    }
}
