// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateImage`](crate::client::fluent_builders::CreateImage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateImage::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateImage::set_description): <p>The description of the image.</p>
    ///   - [`display_name(impl Into<String>)`](crate::client::fluent_builders::CreateImage::display_name) / [`set_display_name(Option<String>)`](crate::client::fluent_builders::CreateImage::set_display_name): <p>The display name of the image. If not provided, <code>ImageName</code> is displayed.</p>
    ///   - [`image_name(impl Into<String>)`](crate::client::fluent_builders::CreateImage::image_name) / [`set_image_name(Option<String>)`](crate::client::fluent_builders::CreateImage::set_image_name): <p>The name of the image. Must be unique to your account.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateImage::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::CreateImage::set_role_arn): <p>The ARN of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateImage::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateImage::set_tags): <p>A list of tags to apply to the image.</p>
    /// - On success, responds with [`CreateImageOutput`](crate::output::CreateImageOutput) with field(s):
    ///   - [`image_arn(Option<String>)`](crate::output::CreateImageOutput::image_arn): <p>The ARN of the image.</p>
    /// - On failure, responds with [`SdkError<CreateImageError>`](crate::error::CreateImageError)
    pub fn create_image(&self) -> crate::client::fluent_builders::CreateImage {
        crate::client::fluent_builders::CreateImage::new(self.handle.clone())
    }
}
