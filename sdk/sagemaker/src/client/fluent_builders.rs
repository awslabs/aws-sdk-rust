// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `AddAssociation`.
///
/// <p>Creates an <i>association</i> between the source and the destination. A source can be associated with multiple destinations, and a destination can be associated with multiple sources. An association is a lineage tracking entity. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AddAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::add_association_input::Builder,
}
impl AddAssociation {
    /// Creates a new `AddAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AddAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AddAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AddAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::AddAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the source.</p>
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_arn(input.into());
        self
    }
    /// <p>The ARN of the source.</p>
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the destination.</p>
    pub fn destination_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the destination.</p>
    pub fn set_destination_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination_arn(input);
        self
    }
    /// <p>The type of association. The following are suggested uses for each type. Amazon SageMaker places no restrictions on their use.</p>
    /// <ul>
    /// <li> <p>ContributedTo - The source contributed to the destination or had a part in enabling the destination. For example, the training data contributed to the training job.</p> </li>
    /// <li> <p>AssociatedWith - The source is connected to the destination. For example, an approval workflow is associated with a model deployment.</p> </li>
    /// <li> <p>DerivedFrom - The destination is a modification of the source. For example, a digest output of a channel input for a processing job is derived from the original inputs.</p> </li>
    /// <li> <p>Produced - The source generated the destination. For example, a training job produced a model artifact.</p> </li>
    /// </ul>
    pub fn association_type(mut self, input: crate::model::AssociationEdgeType) -> Self {
        self.inner = self.inner.association_type(input);
        self
    }
    /// <p>The type of association. The following are suggested uses for each type. Amazon SageMaker places no restrictions on their use.</p>
    /// <ul>
    /// <li> <p>ContributedTo - The source contributed to the destination or had a part in enabling the destination. For example, the training data contributed to the training job.</p> </li>
    /// <li> <p>AssociatedWith - The source is connected to the destination. For example, an approval workflow is associated with a model deployment.</p> </li>
    /// <li> <p>DerivedFrom - The destination is a modification of the source. For example, a digest output of a channel input for a processing job is derived from the original inputs.</p> </li>
    /// <li> <p>Produced - The source generated the destination. For example, a training job produced a model artifact.</p> </li>
    /// </ul>
    pub fn set_association_type(
        mut self,
        input: std::option::Option<crate::model::AssociationEdgeType>,
    ) -> Self {
        self.inner = self.inner.set_association_type(input);
        self
    }
}

/// Fluent builder constructing a request to `AddTags`.
///
/// <p>Adds or overwrites one or more tags for the specified SageMaker resource. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints.</p>
/// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Amazon Web Services Tagging Strategies</a>.</p> <note>
/// <p>Tags that you add to a hyperparameter tuning job by calling this API are also added to any training jobs that the hyperparameter tuning job launches after you call this API, but not to training jobs that the hyperparameter tuning job launched before you called this API. To make sure that the tags associated with a hyperparameter tuning job are also added to all training jobs that the hyperparameter tuning job launches, add the tags when you first create the tuning job by specifying them in the <code>Tags</code> parameter of <code>CreateHyperParameterTuningJob</code> </p>
/// </note> <note>
/// <p>Tags that you add to a SageMaker Studio Domain or User Profile by calling this API are also added to any Apps that the Domain or User Profile launches after you call this API, but not to Apps that the Domain or User Profile launched before you called this API. To make sure that the tags associated with a Domain or User Profile are also added to all Apps that the Domain or User Profile launches, add the tags when you first create the Domain or User Profile by specifying them in the <code>Tags</code> parameter of <code>CreateDomain</code> or <code>CreateUserProfile</code>.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AddTags {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::add_tags_input::Builder,
}
impl AddTags {
    /// Creates a new `AddTags`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AddTags,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AddTagsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AddTagsOutput,
        aws_smithy_http::result::SdkError<crate::error::AddTagsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the resource that you want to tag.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource that you want to tag.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `AssociateTrialComponent`.
///
/// <p>Associates a trial component with a trial. A trial component can be associated with multiple trials. To disassociate a trial component from a trial, call the <code>DisassociateTrialComponent</code> API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociateTrialComponent {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::associate_trial_component_input::Builder,
}
impl AssociateTrialComponent {
    /// Creates a new `AssociateTrialComponent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AssociateTrialComponent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AssociateTrialComponentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AssociateTrialComponentOutput,
        aws_smithy_http::result::SdkError<crate::error::AssociateTrialComponentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the component to associated with the trial.</p>
    pub fn trial_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_component_name(input.into());
        self
    }
    /// <p>The name of the component to associated with the trial.</p>
    pub fn set_trial_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_trial_component_name(input);
        self
    }
    /// <p>The name of the trial to associate with.</p>
    pub fn trial_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_name(input.into());
        self
    }
    /// <p>The name of the trial to associate with.</p>
    pub fn set_trial_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trial_name(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchDescribeModelPackage`.
///
/// <p>This action batch describes a list of versioned model packages</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDescribeModelPackage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_describe_model_package_input::Builder,
}
impl BatchDescribeModelPackage {
    /// Creates a new `BatchDescribeModelPackage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchDescribeModelPackage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchDescribeModelPackageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchDescribeModelPackageOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchDescribeModelPackageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `ModelPackageArnList`.
    ///
    /// To override the contents of this collection use [`set_model_package_arn_list`](Self::set_model_package_arn_list).
    ///
    /// <p>The list of Amazon Resource Name (ARN) of the model package groups.</p>
    pub fn model_package_arn_list(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_arn_list(input.into());
        self
    }
    /// <p>The list of Amazon Resource Name (ARN) of the model package groups.</p>
    pub fn set_model_package_arn_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_model_package_arn_list(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateAction`.
///
/// <p>Creates an <i>action</i>. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAction {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_action_input::Builder,
}
impl CreateAction {
    /// Creates a new `CreateAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateActionOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_name(input.into());
        self
    }
    /// <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_name(input);
        self
    }
    /// <p>The source type, ID, and URI.</p>
    pub fn source(mut self, input: crate::model::ActionSource) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>The source type, ID, and URI.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::model::ActionSource>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// <p>The action type.</p>
    pub fn action_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_type(input.into());
        self
    }
    /// <p>The action type.</p>
    pub fn set_action_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_type(input);
        self
    }
    /// <p>The description of the action.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the action.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The status of the action.</p>
    pub fn status(mut self, input: crate::model::ActionStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the action.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::model::ActionStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// Adds a key-value pair to `Properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>A list of properties to add to the action.</p>
    pub fn properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.properties(k.into(), v.into());
        self
    }
    /// <p>A list of properties to add to the action.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_properties(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(mut self, input: crate::model::MetadataProperties) -> Self {
        self.inner = self.inner.metadata_properties(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn set_metadata_properties(
        mut self,
        input: std::option::Option<crate::model::MetadataProperties>,
    ) -> Self {
        self.inner = self.inner.set_metadata_properties(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the action.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to apply to the action.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateAlgorithm`.
///
/// <p>Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAlgorithm {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_algorithm_input::Builder,
}
impl CreateAlgorithm {
    /// Creates a new `CreateAlgorithm`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateAlgorithm,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateAlgorithmError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateAlgorithmOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateAlgorithmError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the algorithm.</p>
    pub fn algorithm_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.algorithm_name(input.into());
        self
    }
    /// <p>The name of the algorithm.</p>
    pub fn set_algorithm_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_algorithm_name(input);
        self
    }
    /// <p>A description of the algorithm.</p>
    pub fn algorithm_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.algorithm_description(input.into());
        self
    }
    /// <p>A description of the algorithm.</p>
    pub fn set_algorithm_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_algorithm_description(input);
        self
    }
    /// <p>Specifies details about training jobs run by this algorithm, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR path of the container and the version digest of the algorithm.</p> </li>
    /// <li> <p>The hyperparameters that the algorithm supports.</p> </li>
    /// <li> <p>The instance types that the algorithm supports for training.</p> </li>
    /// <li> <p>Whether the algorithm supports distributed training.</p> </li>
    /// <li> <p>The metrics that the algorithm emits to Amazon CloudWatch.</p> </li>
    /// <li> <p>Which metrics that the algorithm emits can be used as the objective metric for hyperparameter tuning jobs.</p> </li>
    /// <li> <p>The input channels that the algorithm supports for training data. For example, an algorithm might support <code>train</code>, <code>validation</code>, and <code>test</code> channels.</p> </li>
    /// </ul>
    pub fn training_specification(mut self, input: crate::model::TrainingSpecification) -> Self {
        self.inner = self.inner.training_specification(input);
        self
    }
    /// <p>Specifies details about training jobs run by this algorithm, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR path of the container and the version digest of the algorithm.</p> </li>
    /// <li> <p>The hyperparameters that the algorithm supports.</p> </li>
    /// <li> <p>The instance types that the algorithm supports for training.</p> </li>
    /// <li> <p>Whether the algorithm supports distributed training.</p> </li>
    /// <li> <p>The metrics that the algorithm emits to Amazon CloudWatch.</p> </li>
    /// <li> <p>Which metrics that the algorithm emits can be used as the objective metric for hyperparameter tuning jobs.</p> </li>
    /// <li> <p>The input channels that the algorithm supports for training data. For example, an algorithm might support <code>train</code>, <code>validation</code>, and <code>test</code> channels.</p> </li>
    /// </ul>
    pub fn set_training_specification(
        mut self,
        input: std::option::Option<crate::model::TrainingSpecification>,
    ) -> Self {
        self.inner = self.inner.set_training_specification(input);
        self
    }
    /// <p>Specifies details about inference jobs that the algorithm runs, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li>
    /// <li> <p>The instance types that the algorithm supports for transform jobs and real-time endpoints used for inference.</p> </li>
    /// <li> <p>The input and output content formats that the algorithm supports for inference.</p> </li>
    /// </ul>
    pub fn inference_specification(mut self, input: crate::model::InferenceSpecification) -> Self {
        self.inner = self.inner.inference_specification(input);
        self
    }
    /// <p>Specifies details about inference jobs that the algorithm runs, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li>
    /// <li> <p>The instance types that the algorithm supports for transform jobs and real-time endpoints used for inference.</p> </li>
    /// <li> <p>The input and output content formats that the algorithm supports for inference.</p> </li>
    /// </ul>
    pub fn set_inference_specification(
        mut self,
        input: std::option::Option<crate::model::InferenceSpecification>,
    ) -> Self {
        self.inner = self.inner.set_inference_specification(input);
        self
    }
    /// <p>Specifies configurations for one or more training jobs and that SageMaker runs to test the algorithm's training code and, optionally, one or more batch transform jobs that SageMaker runs to test the algorithm's inference code.</p>
    pub fn validation_specification(
        mut self,
        input: crate::model::AlgorithmValidationSpecification,
    ) -> Self {
        self.inner = self.inner.validation_specification(input);
        self
    }
    /// <p>Specifies configurations for one or more training jobs and that SageMaker runs to test the algorithm's training code and, optionally, one or more batch transform jobs that SageMaker runs to test the algorithm's inference code.</p>
    pub fn set_validation_specification(
        mut self,
        input: std::option::Option<crate::model::AlgorithmValidationSpecification>,
    ) -> Self {
        self.inner = self.inner.set_validation_specification(input);
        self
    }
    /// <p>Whether to certify the algorithm so that it can be listed in Amazon Web Services Marketplace.</p>
    pub fn certify_for_marketplace(mut self, input: bool) -> Self {
        self.inner = self.inner.certify_for_marketplace(input);
        self
    }
    /// <p>Whether to certify the algorithm so that it can be listed in Amazon Web Services Marketplace.</p>
    pub fn set_certify_for_marketplace(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_certify_for_marketplace(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateApp`.
///
/// <p>Creates a running app for the specified UserProfile. This operation is automatically invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateApp {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_app_input::Builder,
}
impl CreateApp {
    /// Creates a new `CreateApp`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateApp,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateAppError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateAppOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateAppError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn app_type(mut self, input: crate::model::AppType) -> Self {
        self.inner = self.inner.app_type(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn set_app_type(mut self, input: std::option::Option<crate::model::AppType>) -> Self {
        self.inner = self.inner.set_app_type(input);
        self
    }
    /// <p>The name of the app.</p>
    pub fn app_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_name(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_app_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_name(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p> <note>
    /// <p>The value of <code>InstanceType</code> passed as part of the <code>ResourceSpec</code> in the <code>CreateApp</code> call overrides the value passed as part of the <code>ResourceSpec</code> configured for the user profile or the domain. If <code>InstanceType</code> is not specified in any of those three <code>ResourceSpec</code> values for a <code>KernelGateway</code> app, the <code>CreateApp</code> call fails with a request validation error.</p>
    /// </note>
    pub fn resource_spec(mut self, input: crate::model::ResourceSpec) -> Self {
        self.inner = self.inner.resource_spec(input);
        self
    }
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p> <note>
    /// <p>The value of <code>InstanceType</code> passed as part of the <code>ResourceSpec</code> in the <code>CreateApp</code> call overrides the value passed as part of the <code>ResourceSpec</code> configured for the user profile or the domain. If <code>InstanceType</code> is not specified in any of those three <code>ResourceSpec</code> values for a <code>KernelGateway</code> app, the <code>CreateApp</code> call fails with a request validation error.</p>
    /// </note>
    pub fn set_resource_spec(
        mut self,
        input: std::option::Option<crate::model::ResourceSpec>,
    ) -> Self {
        self.inner = self.inner.set_resource_spec(input);
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name(input.into());
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_space_name(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateAppImageConfig`.
///
/// <p>Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAppImageConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_app_image_config_input::Builder,
}
impl CreateAppImageConfig {
    /// Creates a new `CreateAppImageConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateAppImageConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateAppImageConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateAppImageConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateAppImageConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the AppImageConfig. Must be unique to your account.</p>
    pub fn app_image_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_image_config_name(input.into());
        self
    }
    /// <p>The name of the AppImageConfig. Must be unique to your account.</p>
    pub fn set_app_image_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_app_image_config_name(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the AppImageConfig.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to apply to the AppImageConfig.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.</p>
    pub fn kernel_gateway_image_config(
        mut self,
        input: crate::model::KernelGatewayImageConfig,
    ) -> Self {
        self.inner = self.inner.kernel_gateway_image_config(input);
        self
    }
    /// <p>The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.</p>
    pub fn set_kernel_gateway_image_config(
        mut self,
        input: std::option::Option<crate::model::KernelGatewayImageConfig>,
    ) -> Self {
        self.inner = self.inner.set_kernel_gateway_image_config(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateArtifact`.
///
/// <p>Creates an <i>artifact</i>. An artifact is a lineage tracking entity that represents a URI addressable object or data. Some examples are the S3 URI of a dataset and the ECR registry path of an image. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateArtifact {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_artifact_input::Builder,
}
impl CreateArtifact {
    /// Creates a new `CreateArtifact`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateArtifact,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateArtifactError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateArtifactOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateArtifactError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the artifact. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn artifact_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.artifact_name(input.into());
        self
    }
    /// <p>The name of the artifact. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn set_artifact_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_artifact_name(input);
        self
    }
    /// <p>The ID, ID type, and URI of the source.</p>
    pub fn source(mut self, input: crate::model::ArtifactSource) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>The ID, ID type, and URI of the source.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::model::ArtifactSource>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// <p>The artifact type.</p>
    pub fn artifact_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.artifact_type(input.into());
        self
    }
    /// <p>The artifact type.</p>
    pub fn set_artifact_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_artifact_type(input);
        self
    }
    /// Adds a key-value pair to `Properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>A list of properties to add to the artifact.</p>
    pub fn properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.properties(k.into(), v.into());
        self
    }
    /// <p>A list of properties to add to the artifact.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_properties(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(mut self, input: crate::model::MetadataProperties) -> Self {
        self.inner = self.inner.metadata_properties(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn set_metadata_properties(
        mut self,
        input: std::option::Option<crate::model::MetadataProperties>,
    ) -> Self {
        self.inner = self.inner.set_metadata_properties(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the artifact.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to apply to the artifact.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateAutoMLJob`.
///
/// <p>Creates an Autopilot job.</p>
/// <p>Find the best-performing model after you run an Autopilot job by calling .</p>
/// <p>For information about how to use Autopilot, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html">Automate Model Development with Amazon SageMaker Autopilot</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAutoMLJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_auto_ml_job_input::Builder,
}
impl CreateAutoMLJob {
    /// Creates a new `CreateAutoMLJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateAutoMLJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateAutoMLJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateAutoMlJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateAutoMLJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Identifies an Autopilot job. The name must be unique to your account and is case-insensitive.</p>
    pub fn auto_ml_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_ml_job_name(input.into());
        self
    }
    /// <p>Identifies an Autopilot job. The name must be unique to your account and is case-insensitive.</p>
    pub fn set_auto_ml_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_auto_ml_job_name(input);
        self
    }
    /// Appends an item to `InputDataConfig`.
    ///
    /// To override the contents of this collection use [`set_input_data_config`](Self::set_input_data_config).
    ///
    /// <p>An array of channel objects that describes the input data and its location. Each channel is a named input source. Similar to <code>InputDataConfig</code> supported by . Format(s) supported: CSV, Parquet. A minimum of 500 rows is required for the training dataset. There is not a minimum number of rows required for the validation dataset.</p>
    pub fn input_data_config(mut self, input: crate::model::AutoMlChannel) -> Self {
        self.inner = self.inner.input_data_config(input);
        self
    }
    /// <p>An array of channel objects that describes the input data and its location. Each channel is a named input source. Similar to <code>InputDataConfig</code> supported by . Format(s) supported: CSV, Parquet. A minimum of 500 rows is required for the training dataset. There is not a minimum number of rows required for the validation dataset.</p>
    pub fn set_input_data_config(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::AutoMlChannel>>,
    ) -> Self {
        self.inner = self.inner.set_input_data_config(input);
        self
    }
    /// <p>Provides information about encryption and the Amazon S3 output path needed to store artifacts from an AutoML job. Format(s) supported: CSV.</p>
    pub fn output_data_config(mut self, input: crate::model::AutoMlOutputDataConfig) -> Self {
        self.inner = self.inner.output_data_config(input);
        self
    }
    /// <p>Provides information about encryption and the Amazon S3 output path needed to store artifacts from an AutoML job. Format(s) supported: CSV.</p>
    pub fn set_output_data_config(
        mut self,
        input: std::option::Option<crate::model::AutoMlOutputDataConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_data_config(input);
        self
    }
    /// <p>Defines the type of supervised learning available for the candidates. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-problem-types.html"> Amazon SageMaker Autopilot problem types and algorithm support</a>.</p>
    pub fn problem_type(mut self, input: crate::model::ProblemType) -> Self {
        self.inner = self.inner.problem_type(input);
        self
    }
    /// <p>Defines the type of supervised learning available for the candidates. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-problem-types.html"> Amazon SageMaker Autopilot problem types and algorithm support</a>.</p>
    pub fn set_problem_type(
        mut self,
        input: std::option::Option<crate::model::ProblemType>,
    ) -> Self {
        self.inner = self.inner.set_problem_type(input);
        self
    }
    /// <p>Defines the objective metric used to measure the predictive quality of an AutoML job. You provide an <code>AutoMLJobObjective$MetricName</code> and Autopilot infers whether to minimize or maximize it.</p>
    pub fn auto_ml_job_objective(mut self, input: crate::model::AutoMlJobObjective) -> Self {
        self.inner = self.inner.auto_ml_job_objective(input);
        self
    }
    /// <p>Defines the objective metric used to measure the predictive quality of an AutoML job. You provide an <code>AutoMLJobObjective$MetricName</code> and Autopilot infers whether to minimize or maximize it.</p>
    pub fn set_auto_ml_job_objective(
        mut self,
        input: std::option::Option<crate::model::AutoMlJobObjective>,
    ) -> Self {
        self.inner = self.inner.set_auto_ml_job_objective(input);
        self
    }
    /// <p>A collection of settings used to configure an AutoML job.</p>
    pub fn auto_ml_job_config(mut self, input: crate::model::AutoMlJobConfig) -> Self {
        self.inner = self.inner.auto_ml_job_config(input);
        self
    }
    /// <p>A collection of settings used to configure an AutoML job.</p>
    pub fn set_auto_ml_job_config(
        mut self,
        input: std::option::Option<crate::model::AutoMlJobConfig>,
    ) -> Self {
        self.inner = self.inner.set_auto_ml_job_config(input);
        self
    }
    /// <p>The ARN of the role that is used to access the data.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The ARN of the role that is used to access the data.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>Generates possible candidates without training the models. A candidate is a combination of data preprocessors, algorithms, and algorithm parameter settings.</p>
    pub fn generate_candidate_definitions_only(mut self, input: bool) -> Self {
        self.inner = self.inner.generate_candidate_definitions_only(input);
        self
    }
    /// <p>Generates possible candidates without training the models. A candidate is a combination of data preprocessors, algorithms, and algorithm parameter settings.</p>
    pub fn set_generate_candidate_definitions_only(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_generate_candidate_definitions_only(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.</p>
    pub fn model_deploy_config(mut self, input: crate::model::ModelDeployConfig) -> Self {
        self.inner = self.inner.model_deploy_config(input);
        self
    }
    /// <p>Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.</p>
    pub fn set_model_deploy_config(
        mut self,
        input: std::option::Option<crate::model::ModelDeployConfig>,
    ) -> Self {
        self.inner = self.inner.set_model_deploy_config(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateCodeRepository`.
///
/// <p>Creates a Git repository as a resource in your SageMaker account. You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with.</p>
/// <p>The repository can be hosted either in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCodeRepository {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_code_repository_input::Builder,
}
impl CreateCodeRepository {
    /// Creates a new `CreateCodeRepository`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateCodeRepository,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateCodeRepositoryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateCodeRepositoryOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateCodeRepositoryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Git repository. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    pub fn code_repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.code_repository_name(input.into());
        self
    }
    /// <p>The name of the Git repository. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    pub fn set_code_repository_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_code_repository_name(input);
        self
    }
    /// <p>Specifies details about the repository, including the URL where the repository is located, the default branch, and credentials to use to access the repository.</p>
    pub fn git_config(mut self, input: crate::model::GitConfig) -> Self {
        self.inner = self.inner.git_config(input);
        self
    }
    /// <p>Specifies details about the repository, including the URL where the repository is located, the default branch, and credentials to use to access the repository.</p>
    pub fn set_git_config(mut self, input: std::option::Option<crate::model::GitConfig>) -> Self {
        self.inner = self.inner.set_git_config(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateCompilationJob`.
///
/// <p>Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. </p>
/// <p>If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with Amazon Web Services IoT Greengrass. In that case, deploy them as an ML resource.</p>
/// <p>In the request body, you provide the following:</p>
/// <ul>
/// <li> <p>A name for the compilation job</p> </li>
/// <li> <p> Information about the input model artifacts </p> </li>
/// <li> <p>The output location for the compiled model and the device (target) that the model runs on </p> </li>
/// <li> <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job. </p> </li>
/// </ul>
/// <p>You can also provide a <code>Tag</code> to track the model compilation job's resource use and costs. The response body contains the <code>CompilationJobArn</code> for the compiled job.</p>
/// <p>To stop a model compilation job, use <code>StopCompilationJob</code>. To get information about a particular model compilation job, use <code>DescribeCompilationJob</code>. To get information about multiple model compilation jobs, use <code>ListCompilationJobs</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCompilationJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_compilation_job_input::Builder,
}
impl CreateCompilationJob {
    /// Creates a new `CreateCompilationJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateCompilationJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateCompilationJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateCompilationJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateCompilationJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A name for the model compilation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account. </p>
    pub fn compilation_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.compilation_job_name(input.into());
        self
    }
    /// <p>A name for the model compilation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account. </p>
    pub fn set_compilation_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_compilation_job_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf. </p>
    /// <p>During model compilation, Amazon SageMaker needs your permission to:</p>
    /// <ul>
    /// <li> <p>Read input data from an S3 bucket</p> </li>
    /// <li> <p>Write model artifacts to an S3 bucket</p> </li>
    /// <li> <p>Write logs to Amazon CloudWatch Logs</p> </li>
    /// <li> <p>Publish metrics to Amazon CloudWatch</p> </li>
    /// </ul>
    /// <p>You grant permissions for all of these tasks to an IAM role. To pass this role to Amazon SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon SageMaker Roles.</a> </p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf. </p>
    /// <p>During model compilation, Amazon SageMaker needs your permission to:</p>
    /// <ul>
    /// <li> <p>Read input data from an S3 bucket</p> </li>
    /// <li> <p>Write model artifacts to an S3 bucket</p> </li>
    /// <li> <p>Write logs to Amazon CloudWatch Logs</p> </li>
    /// <li> <p>Publish metrics to Amazon CloudWatch</p> </li>
    /// </ul>
    /// <p>You grant permissions for all of these tasks to an IAM role. To pass this role to Amazon SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon SageMaker Roles.</a> </p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a versioned model package. Provide either a <code>ModelPackageVersionArn</code> or an <code>InputConfig</code> object in the request syntax. The presence of both objects in the <code>CreateCompilationJob</code> request will return an exception.</p>
    pub fn model_package_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_version_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a versioned model package. Provide either a <code>ModelPackageVersionArn</code> or an <code>InputConfig</code> object in the request syntax. The presence of both objects in the <code>CreateCompilationJob</code> request will return an exception.</p>
    pub fn set_model_package_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_version_arn(input);
        self
    }
    /// <p>Provides information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.</p>
    pub fn input_config(mut self, input: crate::model::InputConfig) -> Self {
        self.inner = self.inner.input_config(input);
        self
    }
    /// <p>Provides information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.</p>
    pub fn set_input_config(
        mut self,
        input: std::option::Option<crate::model::InputConfig>,
    ) -> Self {
        self.inner = self.inner.set_input_config(input);
        self
    }
    /// <p>Provides information about the output location for the compiled model and the target device the model runs on.</p>
    pub fn output_config(mut self, input: crate::model::OutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>Provides information about the output location for the compiled model and the target device the model runs on.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::model::OutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    pub fn vpc_config(mut self, input: crate::model::NeoVpcConfig) -> Self {
        self.inner = self.inner.vpc_config(input);
        self
    }
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    pub fn set_vpc_config(
        mut self,
        input: std::option::Option<crate::model::NeoVpcConfig>,
    ) -> Self {
        self.inner = self.inner.set_vpc_config(input);
        self
    }
    /// <p>Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.</p>
    pub fn stopping_condition(mut self, input: crate::model::StoppingCondition) -> Self {
        self.inner = self.inner.stopping_condition(input);
        self
    }
    /// <p>Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::model::StoppingCondition>,
    ) -> Self {
        self.inner = self.inner.set_stopping_condition(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateContext`.
///
/// <p>Creates a <i>context</i>. A context is a lineage tracking entity that represents a logical grouping of other tracking or experiment entities. Some examples are an endpoint and a model package. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateContext {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_context_input::Builder,
}
impl CreateContext {
    /// Creates a new `CreateContext`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateContext,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateContextError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateContextOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateContextError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the context. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn context_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.context_name(input.into());
        self
    }
    /// <p>The name of the context. Must be unique to your account in an Amazon Web Services Region.</p>
    pub fn set_context_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_context_name(input);
        self
    }
    /// <p>The source type, ID, and URI.</p>
    pub fn source(mut self, input: crate::model::ContextSource) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>The source type, ID, and URI.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::model::ContextSource>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// <p>The context type.</p>
    pub fn context_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.context_type(input.into());
        self
    }
    /// <p>The context type.</p>
    pub fn set_context_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_context_type(input);
        self
    }
    /// <p>The description of the context.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the context.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Adds a key-value pair to `Properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>A list of properties to add to the context.</p>
    pub fn properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.properties(k.into(), v.into());
        self
    }
    /// <p>A list of properties to add to the context.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_properties(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the context.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to apply to the context.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateDataQualityJobDefinition`.
///
/// <p>Creates a definition for a job that monitors data quality and drift. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDataQualityJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_data_quality_job_definition_input::Builder,
}
impl CreateDataQualityJobDefinition {
    /// Creates a new `CreateDataQualityJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateDataQualityJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateDataQualityJobDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateDataQualityJobDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateDataQualityJobDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name for the monitoring job definition.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name for the monitoring job definition.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
    /// <p>Configures the constraints and baselines for the monitoring job.</p>
    pub fn data_quality_baseline_config(
        mut self,
        input: crate::model::DataQualityBaselineConfig,
    ) -> Self {
        self.inner = self.inner.data_quality_baseline_config(input);
        self
    }
    /// <p>Configures the constraints and baselines for the monitoring job.</p>
    pub fn set_data_quality_baseline_config(
        mut self,
        input: std::option::Option<crate::model::DataQualityBaselineConfig>,
    ) -> Self {
        self.inner = self.inner.set_data_quality_baseline_config(input);
        self
    }
    /// <p>Specifies the container that runs the monitoring job.</p>
    pub fn data_quality_app_specification(
        mut self,
        input: crate::model::DataQualityAppSpecification,
    ) -> Self {
        self.inner = self.inner.data_quality_app_specification(input);
        self
    }
    /// <p>Specifies the container that runs the monitoring job.</p>
    pub fn set_data_quality_app_specification(
        mut self,
        input: std::option::Option<crate::model::DataQualityAppSpecification>,
    ) -> Self {
        self.inner = self.inner.set_data_quality_app_specification(input);
        self
    }
    /// <p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.</p>
    pub fn data_quality_job_input(mut self, input: crate::model::DataQualityJobInput) -> Self {
        self.inner = self.inner.data_quality_job_input(input);
        self
    }
    /// <p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.</p>
    pub fn set_data_quality_job_input(
        mut self,
        input: std::option::Option<crate::model::DataQualityJobInput>,
    ) -> Self {
        self.inner = self.inner.set_data_quality_job_input(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn data_quality_job_output_config(
        mut self,
        input: crate::model::MonitoringOutputConfig,
    ) -> Self {
        self.inner = self.inner.data_quality_job_output_config(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn set_data_quality_job_output_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_data_quality_job_output_config(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn job_resources(mut self, input: crate::model::MonitoringResources) -> Self {
        self.inner = self.inner.job_resources(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn set_job_resources(
        mut self,
        input: std::option::Option<crate::model::MonitoringResources>,
    ) -> Self {
        self.inner = self.inner.set_job_resources(input);
        self
    }
    /// <p>Specifies networking configuration for the monitoring job.</p>
    pub fn network_config(mut self, input: crate::model::MonitoringNetworkConfig) -> Self {
        self.inner = self.inner.network_config(input);
        self
    }
    /// <p>Specifies networking configuration for the monitoring job.</p>
    pub fn set_network_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringNetworkConfig>,
    ) -> Self {
        self.inner = self.inner.set_network_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn stopping_condition(mut self, input: crate::model::MonitoringStoppingCondition) -> Self {
        self.inner = self.inner.stopping_condition(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::model::MonitoringStoppingCondition>,
    ) -> Self {
        self.inner = self.inner.set_stopping_condition(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateDeviceFleet`.
///
/// <p>Creates a device fleet.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeviceFleet {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_device_fleet_input::Builder,
}
impl CreateDeviceFleet {
    /// Creates a new `CreateDeviceFleet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateDeviceFleet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateDeviceFleetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateDeviceFleetOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateDeviceFleetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the fleet that the device belongs to.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The name of the fleet that the device belongs to.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>A description of the fleet.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the fleet.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    pub fn output_config(mut self, input: crate::model::EdgeOutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>The output configuration for storing sample data collected by the fleet.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::model::EdgeOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Creates tags for the specified fleet.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Creates tags for the specified fleet.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn enable_iot_role_alias(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_iot_role_alias(input);
        self
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn set_enable_iot_role_alias(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_iot_role_alias(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateDomain`.
///
/// <p>Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain consists of an associated Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. An Amazon Web Services account is limited to one domain per region. Users within a domain can share notebook files and other artifacts with each other.</p>
/// <p> <b>EFS storage</b> </p>
/// <p>When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files.</p>
/// <p>SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, you can specify a customer managed key. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect Data at Rest Using Encryption</a>.</p>
/// <p> <b>VPC configuration</b> </p>
/// <p>All SageMaker Studio traffic between the domain and the EFS volume is through the specified VPC and subnets. For other Studio traffic, you can specify the <code>AppNetworkAccessType</code> parameter. <code>AppNetworkAccessType</code> corresponds to the network access type that you choose when you onboard to Studio. The following options are available:</p>
/// <ul>
/// <li> <p> <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.</p> </li>
/// <li> <p> <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway.</p> <p>When internet access is disabled, you won't be able to run a Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.</p> </li>
/// </ul> <important>
/// <p>NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a SageMaker Studio app successfully.</p>
/// </important>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect SageMaker Studio Notebooks to Resources in a VPC</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDomain {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_domain_input::Builder,
}
impl CreateDomain {
    /// Creates a new `CreateDomain`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateDomain,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateDomainError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateDomainOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateDomainError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A name for the domain.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>A name for the domain.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The mode of authentication that members use to access the domain.</p>
    pub fn auth_mode(mut self, input: crate::model::AuthMode) -> Self {
        self.inner = self.inner.auth_mode(input);
        self
    }
    /// <p>The mode of authentication that members use to access the domain.</p>
    pub fn set_auth_mode(mut self, input: std::option::Option<crate::model::AuthMode>) -> Self {
        self.inner = self.inner.set_auth_mode(input);
        self
    }
    /// <p>The default settings to use to create a user profile when <code>UserSettings</code> isn't specified in the call to the <code>CreateUserProfile</code> API.</p>
    /// <p> <code>SecurityGroups</code> is aggregated when specified in both calls. For all other settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code> take precedence over those specified in <code>CreateDomain</code>.</p>
    pub fn default_user_settings(mut self, input: crate::model::UserSettings) -> Self {
        self.inner = self.inner.default_user_settings(input);
        self
    }
    /// <p>The default settings to use to create a user profile when <code>UserSettings</code> isn't specified in the call to the <code>CreateUserProfile</code> API.</p>
    /// <p> <code>SecurityGroups</code> is aggregated when specified in both calls. For all other settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code> take precedence over those specified in <code>CreateDomain</code>.</p>
    pub fn set_default_user_settings(
        mut self,
        input: std::option::Option<crate::model::UserSettings>,
    ) -> Self {
        self.inner = self.inner.set_default_user_settings(input);
        self
    }
    /// Appends an item to `SubnetIds`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The VPC subnets that Studio uses for communication.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subnet_ids(input.into());
        self
    }
    /// <p>The VPC subnets that Studio uses for communication.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_subnet_ids(input);
        self
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_id(input.into());
        self
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_vpc_id(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to associated with the Domain. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the <code>Search</code> API.</p>
    /// <p>Tags that you specify for the Domain are also added to all Apps that the Domain launches.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Tags to associated with the Domain. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the <code>Search</code> API.</p>
    /// <p>Tags that you specify for the Domain are also added to all Apps that the Domain launches.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Specifies the VPC used for non-EFS traffic. The default value is <code>PublicInternetOnly</code>.</p>
    /// <ul>
    /// <li> <p> <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed by Amazon SageMaker, which allows direct internet access</p> </li>
    /// <li> <p> <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets</p> </li>
    /// </ul>
    pub fn app_network_access_type(mut self, input: crate::model::AppNetworkAccessType) -> Self {
        self.inner = self.inner.app_network_access_type(input);
        self
    }
    /// <p>Specifies the VPC used for non-EFS traffic. The default value is <code>PublicInternetOnly</code>.</p>
    /// <ul>
    /// <li> <p> <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed by Amazon SageMaker, which allows direct internet access</p> </li>
    /// <li> <p> <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets</p> </li>
    /// </ul>
    pub fn set_app_network_access_type(
        mut self,
        input: std::option::Option<crate::model::AppNetworkAccessType>,
    ) -> Self {
        self.inner = self.inner.set_app_network_access_type(input);
        self
    }
    /// <p>Use <code>KmsKeyId</code>.</p>
    #[deprecated(note = "This property is deprecated, use KmsKeyId instead.")]
    pub fn home_efs_file_system_kms_key_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.home_efs_file_system_kms_key_id(input.into());
        self
    }
    /// <p>Use <code>KmsKeyId</code>.</p>
    #[deprecated(note = "This property is deprecated, use KmsKeyId instead.")]
    pub fn set_home_efs_file_system_kms_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_home_efs_file_system_kms_key_id(input);
        self
    }
    /// <p>SageMaker uses Amazon Web Services KMS to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>SageMaker uses Amazon Web Services KMS to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>The entity that creates and manages the required security groups for inter-app communication in <code>VPCOnly</code> mode. Required when <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code> is provided.</p>
    pub fn app_security_group_management(
        mut self,
        input: crate::model::AppSecurityGroupManagement,
    ) -> Self {
        self.inner = self.inner.app_security_group_management(input);
        self
    }
    /// <p>The entity that creates and manages the required security groups for inter-app communication in <code>VPCOnly</code> mode. Required when <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code> is provided.</p>
    pub fn set_app_security_group_management(
        mut self,
        input: std::option::Option<crate::model::AppSecurityGroupManagement>,
    ) -> Self {
        self.inner = self.inner.set_app_security_group_management(input);
        self
    }
    /// <p>A collection of <code>Domain</code> settings.</p>
    pub fn domain_settings(mut self, input: crate::model::DomainSettings) -> Self {
        self.inner = self.inner.domain_settings(input);
        self
    }
    /// <p>A collection of <code>Domain</code> settings.</p>
    pub fn set_domain_settings(
        mut self,
        input: std::option::Option<crate::model::DomainSettings>,
    ) -> Self {
        self.inner = self.inner.set_domain_settings(input);
        self
    }
    /// <p>The default settings used to create a space.</p>
    pub fn default_space_settings(mut self, input: crate::model::DefaultSpaceSettings) -> Self {
        self.inner = self.inner.default_space_settings(input);
        self
    }
    /// <p>The default settings used to create a space.</p>
    pub fn set_default_space_settings(
        mut self,
        input: std::option::Option<crate::model::DefaultSpaceSettings>,
    ) -> Self {
        self.inner = self.inner.set_default_space_settings(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateEdgeDeploymentPlan`.
///
/// <p>Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateEdgeDeploymentPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_edge_deployment_plan_input::Builder,
}
impl CreateEdgeDeploymentPlan {
    /// Creates a new `CreateEdgeDeploymentPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateEdgeDeploymentPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateEdgeDeploymentPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateEdgeDeploymentPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateEdgeDeploymentPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_deployment_plan_name(input.into());
        self
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_deployment_plan_name(input);
        self
    }
    /// Appends an item to `ModelConfigs`.
    ///
    /// To override the contents of this collection use [`set_model_configs`](Self::set_model_configs).
    ///
    /// <p>List of models associated with the edge deployment plan.</p>
    pub fn model_configs(mut self, input: crate::model::EdgeDeploymentModelConfig) -> Self {
        self.inner = self.inner.model_configs(input);
        self
    }
    /// <p>List of models associated with the edge deployment plan.</p>
    pub fn set_model_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::EdgeDeploymentModelConfig>>,
    ) -> Self {
        self.inner = self.inner.set_model_configs(input);
        self
    }
    /// <p>The device fleet used for this edge deployment plan.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The device fleet used for this edge deployment plan.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
    /// Appends an item to `Stages`.
    ///
    /// To override the contents of this collection use [`set_stages`](Self::set_stages).
    ///
    /// <p>List of stages of the edge deployment plan. The number of stages is limited to 10 per deployment.</p>
    pub fn stages(mut self, input: crate::model::DeploymentStage) -> Self {
        self.inner = self.inner.stages(input);
        self
    }
    /// <p>List of stages of the edge deployment plan. The number of stages is limited to 10 per deployment.</p>
    pub fn set_stages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::DeploymentStage>>,
    ) -> Self {
        self.inner = self.inner.set_stages(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>List of tags with which to tag the edge deployment plan.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>List of tags with which to tag the edge deployment plan.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateEdgeDeploymentStage`.
///
/// <p>Creates a new stage in an existing edge deployment plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateEdgeDeploymentStage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_edge_deployment_stage_input::Builder,
}
impl CreateEdgeDeploymentStage {
    /// Creates a new `CreateEdgeDeploymentStage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateEdgeDeploymentStage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateEdgeDeploymentStageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateEdgeDeploymentStageOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateEdgeDeploymentStageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_deployment_plan_name(input.into());
        self
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_deployment_plan_name(input);
        self
    }
    /// Appends an item to `Stages`.
    ///
    /// To override the contents of this collection use [`set_stages`](Self::set_stages).
    ///
    /// <p>List of stages to be added to the edge deployment plan.</p>
    pub fn stages(mut self, input: crate::model::DeploymentStage) -> Self {
        self.inner = self.inner.stages(input);
        self
    }
    /// <p>List of stages to be added to the edge deployment plan.</p>
    pub fn set_stages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::DeploymentStage>>,
    ) -> Self {
        self.inner = self.inner.set_stages(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateEdgePackagingJob`.
///
/// <p>Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateEdgePackagingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_edge_packaging_job_input::Builder,
}
impl CreateEdgePackagingJob {
    /// Creates a new `CreateEdgePackagingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateEdgePackagingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateEdgePackagingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateEdgePackagingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateEdgePackagingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge packaging job.</p>
    pub fn edge_packaging_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_packaging_job_name(input.into());
        self
    }
    /// <p>The name of the edge packaging job.</p>
    pub fn set_edge_packaging_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_packaging_job_name(input);
        self
    }
    /// <p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>
    pub fn compilation_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.compilation_job_name(input.into());
        self
    }
    /// <p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>
    pub fn set_compilation_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_compilation_job_name(input);
        self
    }
    /// <p>The name of the model.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_name(input.into());
        self
    }
    /// <p>The name of the model.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_name(input);
        self
    }
    /// <p>The version of the model.</p>
    pub fn model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_version(input.into());
        self
    }
    /// <p>The version of the model.</p>
    pub fn set_model_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_version(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>Provides information about the output location for the packaged model.</p>
    pub fn output_config(mut self, input: crate::model::EdgeOutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>Provides information about the output location for the packaged model.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::model::EdgeOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>
    pub fn resource_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_key(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>
    pub fn set_resource_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_key(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Creates tags for the packaging job.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Creates tags for the packaging job.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateEndpoint`.
///
/// <p>Creates an endpoint using the endpoint configuration specified in the request. SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the <code>CreateEndpointConfig</code> API. </p>
/// <p> Use this API to deploy models using SageMaker hosting services. </p>
/// <p>For an example that calls this method when deploying a model to SageMaker hosting services, see the <a href="https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb">Create Endpoint example notebook.</a> </p> <note>
/// <p> You must not delete an <code>EndpointConfig</code> that is in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p>
/// </note>
/// <p>The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. </p>
/// <p>When it receives the request, SageMaker creates the endpoint, launches the resources (ML compute instances), and deploys the model(s) on them. </p> <note>
/// <p>When you call <code>CreateEndpoint</code>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <code>DescribeEndpointConfig</code> before calling <code>CreateEndpoint</code> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
/// </note>
/// <p>When SageMaker receives the request, it sets the endpoint status to <code>Creating</code>. After it creates the endpoint, it sets the status to <code>InService</code>. SageMaker can then process incoming requests for inferences. To check the status of an endpoint, use the <code>DescribeEndpoint</code> API.</p>
/// <p>If any of the models hosted at this endpoint get model data from an Amazon S3 location, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provided. Amazon Web Services STS is activated in your IAM user account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p> <note>
/// <p> To add the IAM role policies for using this API operation, go to the <a href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose Roles in the left navigation pane. Search the IAM role that you want to grant access to use the <code>CreateEndpoint</code> and <code>CreateEndpointConfig</code> API operations, add the following policies to the role. </p>
/// <ul>
/// <li> <p>Option 1: For a full SageMaker access, search and attach the <code>AmazonSageMakerFullAccess</code> policy.</p> </li>
/// <li> <p>Option 2: For granting a limited access to an IAM role, paste the following Action elements manually into the JSON file of the IAM role: </p> <p> <code>"Action": ["sagemaker:CreateEndpoint", "sagemaker:CreateEndpointConfig"]</code> </p> <p> <code>"Resource": [</code> </p> <p> <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code> </p> <p> <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code> </p> <p> <code>]</code> </p> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">SageMaker API Permissions: Actions, Permissions, and Resources Reference</a>.</p> </li>
/// </ul>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateEndpoint {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_endpoint_input::Builder,
}
impl CreateEndpoint {
    /// Creates a new `CreateEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateEndpointError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateEndpointOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateEndpointError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the endpoint.The name must be unique within an Amazon Web Services Region in your Amazon Web Services account. The name is case-insensitive in <code>CreateEndpoint</code>, but the case is preserved and must be matched in .</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>The name of the endpoint.The name must be unique within an Amazon Web Services Region in your Amazon Web Services account. The name is case-insensitive in <code>CreateEndpoint</code>, but the case is preserved and must be matched in .</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>The name of an endpoint configuration. For more information, see <code>CreateEndpointConfig</code>. </p>
    pub fn endpoint_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_config_name(input.into());
        self
    }
    /// <p>The name of an endpoint configuration. For more information, see <code>CreateEndpointConfig</code>. </p>
    pub fn set_endpoint_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_config_name(input);
        self
    }
    /// <p>The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.</p>
    pub fn deployment_config(mut self, input: crate::model::DeploymentConfig) -> Self {
        self.inner = self.inner.deployment_config(input);
        self
    }
    /// <p>The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.</p>
    pub fn set_deployment_config(
        mut self,
        input: std::option::Option<crate::model::DeploymentConfig>,
    ) -> Self {
        self.inner = self.inner.set_deployment_config(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateEndpointConfig`.
///
/// <p>Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In the configuration, you identify one or more models, created using the <code>CreateModel</code> API, to deploy and the resources that you want SageMaker to provision. Then you call the <code>CreateEndpoint</code> API.</p> <note>
/// <p> Use this API if you want to use SageMaker hosting services to deploy models into production. </p>
/// </note>
/// <p>In the request, you define a <code>ProductionVariant</code>, for each model that you want to deploy. Each <code>ProductionVariant</code> parameter also describes the resources that you want SageMaker to provision. This includes the number and type of ML compute instances to deploy. </p>
/// <p>If you are hosting multiple models, you also assign a <code>VariantWeight</code> to specify how much traffic you want to allocate to each model. For example, suppose that you want to host two models, A and B, and you assign traffic weight 2 for model A and 1 for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to model B. </p> <note>
/// <p>When you call <code>CreateEndpoint</code>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <code>DescribeEndpointConfig</code> before calling <code>CreateEndpoint</code> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateEndpointConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_endpoint_config_input::Builder,
}
impl CreateEndpointConfig {
    /// Creates a new `CreateEndpointConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateEndpointConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateEndpointConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateEndpointConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateEndpointConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the endpoint configuration. You specify this name in a <code>CreateEndpoint</code> request. </p>
    pub fn endpoint_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_config_name(input.into());
        self
    }
    /// <p>The name of the endpoint configuration. You specify this name in a <code>CreateEndpoint</code> request. </p>
    pub fn set_endpoint_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_config_name(input);
        self
    }
    /// Appends an item to `ProductionVariants`.
    ///
    /// To override the contents of this collection use [`set_production_variants`](Self::set_production_variants).
    ///
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint.</p>
    pub fn production_variants(mut self, input: crate::model::ProductionVariant) -> Self {
        self.inner = self.inner.production_variants(input);
        self
    }
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint.</p>
    pub fn set_production_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ProductionVariant>>,
    ) -> Self {
        self.inner = self.inner.set_production_variants(input);
        self
    }
    /// <p>Configuration to control how SageMaker captures inference data.</p>
    pub fn data_capture_config(mut self, input: crate::model::DataCaptureConfig) -> Self {
        self.inner = self.inner.data_capture_config(input);
        self
    }
    /// <p>Configuration to control how SageMaker captures inference data.</p>
    pub fn set_data_capture_config(
        mut self,
        input: std::option::Option<crate::model::DataCaptureConfig>,
    ) -> Self {
        self.inner = self.inner.set_data_capture_config(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    /// <p>The KMS key policy must grant permission to the IAM role that you specify in your <code>CreateEndpoint</code>, <code>UpdateEndpoint</code> requests. For more information, refer to the Amazon Web Services Key Management Service section<a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html"> Using Key Policies in Amazon Web Services KMS </a> </p> <note>
    /// <p>Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a <code>KmsKeyId</code> when using an instance type with local storage. If any of the models that you specify in the <code>ProductionVariants</code> parameter use nitro-based instances with local storage, do not specify a value for the <code>KmsKeyId</code> parameter. If you specify a value for <code>KmsKeyId</code> when using any nitro-based instances with local storage, the call to <code>CreateEndpointConfig</code> fails.</p>
    /// <p>For a list of instance types that support local instance storage, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance Store Volumes</a>.</p>
    /// <p>For more information about local instance storage encryption, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD Instance Store Volumes</a>.</p>
    /// </note>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    /// <p>The KMS key policy must grant permission to the IAM role that you specify in your <code>CreateEndpoint</code>, <code>UpdateEndpoint</code> requests. For more information, refer to the Amazon Web Services Key Management Service section<a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html"> Using Key Policies in Amazon Web Services KMS </a> </p> <note>
    /// <p>Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a <code>KmsKeyId</code> when using an instance type with local storage. If any of the models that you specify in the <code>ProductionVariants</code> parameter use nitro-based instances with local storage, do not specify a value for the <code>KmsKeyId</code> parameter. If you specify a value for <code>KmsKeyId</code> when using any nitro-based instances with local storage, the call to <code>CreateEndpointConfig</code> fails.</p>
    /// <p>For a list of instance types that support local instance storage, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance Store Volumes</a>.</p>
    /// <p>For more information about local instance storage encryption, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD Instance Store Volumes</a>.</p>
    /// </note>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>Specifies configuration for how an endpoint performs asynchronous inference. This is a required field in order for your Endpoint to be invoked using <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpointAsync.html">InvokeEndpointAsync</a>.</p>
    pub fn async_inference_config(mut self, input: crate::model::AsyncInferenceConfig) -> Self {
        self.inner = self.inner.async_inference_config(input);
        self
    }
    /// <p>Specifies configuration for how an endpoint performs asynchronous inference. This is a required field in order for your Endpoint to be invoked using <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpointAsync.html">InvokeEndpointAsync</a>.</p>
    pub fn set_async_inference_config(
        mut self,
        input: std::option::Option<crate::model::AsyncInferenceConfig>,
    ) -> Self {
        self.inner = self.inner.set_async_inference_config(input);
        self
    }
    /// <p>A member of <code>CreateEndpointConfig</code> that enables explainers.</p>
    pub fn explainer_config(mut self, input: crate::model::ExplainerConfig) -> Self {
        self.inner = self.inner.explainer_config(input);
        self
    }
    /// <p>A member of <code>CreateEndpointConfig</code> that enables explainers.</p>
    pub fn set_explainer_config(
        mut self,
        input: std::option::Option<crate::model::ExplainerConfig>,
    ) -> Self {
        self.inner = self.inner.set_explainer_config(input);
        self
    }
    /// Appends an item to `ShadowProductionVariants`.
    ///
    /// To override the contents of this collection use [`set_shadow_production_variants`](Self::set_shadow_production_variants).
    ///
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>. If you use this field, you can only specify one variant for <code>ProductionVariants</code> and one variant for <code>ShadowProductionVariants</code>.</p>
    pub fn shadow_production_variants(mut self, input: crate::model::ProductionVariant) -> Self {
        self.inner = self.inner.shadow_production_variants(input);
        self
    }
    /// <p>An array of <code>ProductionVariant</code> objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on <code>ProductionVariants</code>. If you use this field, you can only specify one variant for <code>ProductionVariants</code> and one variant for <code>ShadowProductionVariants</code>.</p>
    pub fn set_shadow_production_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ProductionVariant>>,
    ) -> Self {
        self.inner = self.inner.set_shadow_production_variants(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateExperiment`.
///
/// <p>Creates a SageMaker <i>experiment</i>. An experiment is a collection of <i>trials</i> that are observed, compared and evaluated as a group. A trial is a set of steps, called <i>trial components</i>, that produce a machine learning model.</p> <note>
/// <p>In the Studio UI, trials are referred to as <i>run groups</i> and trial components are referred to as <i>runs</i>.</p>
/// </note>
/// <p>The goal of an experiment is to determine the components that produce the best model. Multiple trials are performed, each one isolating and measuring the impact of a change to one or more inputs, while keeping the remaining inputs constant.</p>
/// <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p>
/// <p>You can add tags to experiments, trials, trial components and then use the <code>Search</code> API to search for the tags.</p>
/// <p>To add a description to an experiment, specify the optional <code>Description</code> parameter. To add a description later, or to change the description, call the <code>UpdateExperiment</code> API.</p>
/// <p>To get a list of all your experiments, call the <code>ListExperiments</code> API. To view an experiment's properties, call the <code>DescribeExperiment</code> API. To get a list of all the trials associated with an experiment, call the <code>ListTrials</code> API. To create a trial call the <code>CreateTrial</code> API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_experiment_input::Builder,
}
impl CreateExperiment {
    /// Creates a new `CreateExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the experiment. The name must be unique in your Amazon Web Services account and is not case-sensitive.</p>
    pub fn experiment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.experiment_name(input.into());
        self
    }
    /// <p>The name of the experiment. The name must be unique in your Amazon Web Services account and is not case-sensitive.</p>
    pub fn set_experiment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_experiment_name(input);
        self
    }
    /// <p>The name of the experiment as displayed. The name doesn't need to be unique. If you don't specify <code>DisplayName</code>, the value in <code>ExperimentName</code> is displayed.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The name of the experiment as displayed. The name doesn't need to be unique. If you don't specify <code>DisplayName</code>, the value in <code>ExperimentName</code> is displayed.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The description of the experiment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the experiment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to associate with the experiment. You can use <code>Search</code> API to search on the tags.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to associate with the experiment. You can use <code>Search</code> API to search on the tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateFeatureGroup`.
///
/// <p>Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a group of <code>Features</code> defined in the <code>FeatureStore</code> to describe a <code>Record</code>. </p>
/// <p>The <code>FeatureGroup</code> defines the schema and features contained in the FeatureGroup. A <code>FeatureGroup</code> definition is composed of a list of <code>Features</code>, a <code>RecordIdentifierFeatureName</code>, an <code>EventTimeFeatureName</code> and configurations for its <code>OnlineStore</code> and <code>OfflineStore</code>. Check <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Web Services service quotas</a> to see the <code>FeatureGroup</code>s quota for your Amazon Web Services account.</p> <important>
/// <p>You must include at least one of <code>OnlineStoreConfig</code> and <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateFeatureGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_feature_group_input::Builder,
}
impl CreateFeatureGroup {
    /// Creates a new `CreateFeatureGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateFeatureGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateFeatureGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateFeatureGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateFeatureGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the <code>FeatureGroup</code>. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. The name:</p>
    /// <ul>
    /// <li> <p>Must start and end with an alphanumeric character.</p> </li>
    /// <li> <p>Can only contain alphanumeric character and hyphens. Spaces are not allowed. </p> </li>
    /// </ul>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.feature_group_name(input.into());
        self
    }
    /// <p>The name of the <code>FeatureGroup</code>. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. The name:</p>
    /// <ul>
    /// <li> <p>Must start and end with an alphanumeric character.</p> </li>
    /// <li> <p>Can only contain alphanumeric character and hyphens. Spaces are not allowed. </p> </li>
    /// </ul>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_feature_group_name(input);
        self
    }
    /// <p>The name of the <code>Feature</code> whose value uniquely identifies a <code>Record</code> defined in the <code>FeatureStore</code>. Only the latest record per identifier value will be stored in the <code>OnlineStore</code>. <code>RecordIdentifierFeatureName</code> must be one of feature definitions' names.</p>
    /// <p>You use the <code>RecordIdentifierFeatureName</code> to access data in a <code>FeatureStore</code>.</p>
    /// <p>This name:</p>
    /// <ul>
    /// <li> <p>Must start and end with an alphanumeric character.</p> </li>
    /// <li> <p>Can only contains alphanumeric characters, hyphens, underscores. Spaces are not allowed. </p> </li>
    /// </ul>
    pub fn record_identifier_feature_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.record_identifier_feature_name(input.into());
        self
    }
    /// <p>The name of the <code>Feature</code> whose value uniquely identifies a <code>Record</code> defined in the <code>FeatureStore</code>. Only the latest record per identifier value will be stored in the <code>OnlineStore</code>. <code>RecordIdentifierFeatureName</code> must be one of feature definitions' names.</p>
    /// <p>You use the <code>RecordIdentifierFeatureName</code> to access data in a <code>FeatureStore</code>.</p>
    /// <p>This name:</p>
    /// <ul>
    /// <li> <p>Must start and end with an alphanumeric character.</p> </li>
    /// <li> <p>Can only contains alphanumeric characters, hyphens, underscores. Spaces are not allowed. </p> </li>
    /// </ul>
    pub fn set_record_identifier_feature_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_record_identifier_feature_name(input);
        self
    }
    /// <p>The name of the feature that stores the <code>EventTime</code> of a <code>Record</code> in a <code>FeatureGroup</code>.</p>
    /// <p>An <code>EventTime</code> is a point in time when a new event occurs that corresponds to the creation or update of a <code>Record</code> in a <code>FeatureGroup</code>. All <code>Records</code> in the <code>FeatureGroup</code> must have a corresponding <code>EventTime</code>.</p>
    /// <p>An <code>EventTime</code> can be a <code>String</code> or <code>Fractional</code>. </p>
    /// <ul>
    /// <li> <p> <code>Fractional</code>: <code>EventTime</code> feature values must be a Unix timestamp in seconds.</p> </li>
    /// <li> <p> <code>String</code>: <code>EventTime</code> feature values must be an ISO-8601 string in the format. The following formats are supported <code>yyyy-MM-dd'T'HH:mm:ssZ</code> and <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code> where <code>yyyy</code>, <code>MM</code>, and <code>dd</code> represent the year, month, and day respectively and <code>HH</code>, <code>mm</code>, <code>ss</code>, and if applicable, <code>SSS</code> represent the hour, month, second and milliseconds respsectively. <code>'T'</code> and <code>Z</code> are constants.</p> </li>
    /// </ul>
    pub fn event_time_feature_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.event_time_feature_name(input.into());
        self
    }
    /// <p>The name of the feature that stores the <code>EventTime</code> of a <code>Record</code> in a <code>FeatureGroup</code>.</p>
    /// <p>An <code>EventTime</code> is a point in time when a new event occurs that corresponds to the creation or update of a <code>Record</code> in a <code>FeatureGroup</code>. All <code>Records</code> in the <code>FeatureGroup</code> must have a corresponding <code>EventTime</code>.</p>
    /// <p>An <code>EventTime</code> can be a <code>String</code> or <code>Fractional</code>. </p>
    /// <ul>
    /// <li> <p> <code>Fractional</code>: <code>EventTime</code> feature values must be a Unix timestamp in seconds.</p> </li>
    /// <li> <p> <code>String</code>: <code>EventTime</code> feature values must be an ISO-8601 string in the format. The following formats are supported <code>yyyy-MM-dd'T'HH:mm:ssZ</code> and <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code> where <code>yyyy</code>, <code>MM</code>, and <code>dd</code> represent the year, month, and day respectively and <code>HH</code>, <code>mm</code>, <code>ss</code>, and if applicable, <code>SSS</code> represent the hour, month, second and milliseconds respsectively. <code>'T'</code> and <code>Z</code> are constants.</p> </li>
    /// </ul>
    pub fn set_event_time_feature_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_event_time_feature_name(input);
        self
    }
    /// Appends an item to `FeatureDefinitions`.
    ///
    /// To override the contents of this collection use [`set_feature_definitions`](Self::set_feature_definitions).
    ///
    /// <p>A list of <code>Feature</code> names and types. <code>Name</code> and <code>Type</code> is compulsory per <code>Feature</code>. </p>
    /// <p>Valid feature <code>FeatureType</code>s are <code>Integral</code>, <code>Fractional</code> and <code>String</code>.</p>
    /// <p> <code>FeatureName</code>s cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code> </p>
    /// <p>You can create up to 2,500 <code>FeatureDefinition</code>s per <code>FeatureGroup</code>.</p>
    pub fn feature_definitions(mut self, input: crate::model::FeatureDefinition) -> Self {
        self.inner = self.inner.feature_definitions(input);
        self
    }
    /// <p>A list of <code>Feature</code> names and types. <code>Name</code> and <code>Type</code> is compulsory per <code>Feature</code>. </p>
    /// <p>Valid feature <code>FeatureType</code>s are <code>Integral</code>, <code>Fractional</code> and <code>String</code>.</p>
    /// <p> <code>FeatureName</code>s cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code> </p>
    /// <p>You can create up to 2,500 <code>FeatureDefinition</code>s per <code>FeatureGroup</code>.</p>
    pub fn set_feature_definitions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::FeatureDefinition>>,
    ) -> Self {
        self.inner = self.inner.set_feature_definitions(input);
        self
    }
    /// <p>You can turn the <code>OnlineStore</code> on or off by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag in <code>OnlineStoreConfig</code>; the default value is <code>False</code>.</p>
    /// <p>You can also include an Amazon Web Services KMS key ID (<code>KMSKeyId</code>) for at-rest encryption of the <code>OnlineStore</code>.</p>
    pub fn online_store_config(mut self, input: crate::model::OnlineStoreConfig) -> Self {
        self.inner = self.inner.online_store_config(input);
        self
    }
    /// <p>You can turn the <code>OnlineStore</code> on or off by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag in <code>OnlineStoreConfig</code>; the default value is <code>False</code>.</p>
    /// <p>You can also include an Amazon Web Services KMS key ID (<code>KMSKeyId</code>) for at-rest encryption of the <code>OnlineStore</code>.</p>
    pub fn set_online_store_config(
        mut self,
        input: std::option::Option<crate::model::OnlineStoreConfig>,
    ) -> Self {
        self.inner = self.inner.set_online_store_config(input);
        self
    }
    /// <p>Use this to configure an <code>OfflineFeatureStore</code>. This parameter allows you to specify:</p>
    /// <ul>
    /// <li> <p>The Amazon Simple Storage Service (Amazon S3) location of an <code>OfflineStore</code>.</p> </li>
    /// <li> <p>A configuration for an Amazon Web Services Glue or Amazon Web Services Hive data catalog. </p> </li>
    /// <li> <p>An KMS encryption key to encrypt the Amazon S3 location used for <code>OfflineStore</code>. If KMS encryption key is not specified, by default we encrypt all data at rest using Amazon Web Services KMS key. By defining your <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-key.html">bucket-level key</a> for SSE, you can reduce Amazon Web Services KMS requests costs by up to 99 percent.</p> </li>
    /// <li> <p>Format for the offline store table. Supported formats are Glue (Default) and <a href="https://iceberg.apache.org/">Apache Iceberg</a>.</p> </li>
    /// </ul>
    /// <p>To learn more about this parameter, see <code>OfflineStoreConfig</code>.</p>
    pub fn offline_store_config(mut self, input: crate::model::OfflineStoreConfig) -> Self {
        self.inner = self.inner.offline_store_config(input);
        self
    }
    /// <p>Use this to configure an <code>OfflineFeatureStore</code>. This parameter allows you to specify:</p>
    /// <ul>
    /// <li> <p>The Amazon Simple Storage Service (Amazon S3) location of an <code>OfflineStore</code>.</p> </li>
    /// <li> <p>A configuration for an Amazon Web Services Glue or Amazon Web Services Hive data catalog. </p> </li>
    /// <li> <p>An KMS encryption key to encrypt the Amazon S3 location used for <code>OfflineStore</code>. If KMS encryption key is not specified, by default we encrypt all data at rest using Amazon Web Services KMS key. By defining your <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-key.html">bucket-level key</a> for SSE, you can reduce Amazon Web Services KMS requests costs by up to 99 percent.</p> </li>
    /// <li> <p>Format for the offline store table. Supported formats are Glue (Default) and <a href="https://iceberg.apache.org/">Apache Iceberg</a>.</p> </li>
    /// </ul>
    /// <p>To learn more about this parameter, see <code>OfflineStoreConfig</code>.</p>
    pub fn set_offline_store_config(
        mut self,
        input: std::option::Option<crate::model::OfflineStoreConfig>,
    ) -> Self {
        self.inner = self.inner.set_offline_store_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the <code>OfflineStore</code> if an <code>OfflineStoreConfig</code> is provided.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the <code>OfflineStore</code> if an <code>OfflineStoreConfig</code> is provided.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>A free-form description of a <code>FeatureGroup</code>.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A free-form description of a <code>FeatureGroup</code>.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags used to identify <code>Features</code> in each <code>FeatureGroup</code>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Tags used to identify <code>Features</code> in each <code>FeatureGroup</code>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateFlowDefinition`.
///
/// <p>Creates a flow definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateFlowDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_flow_definition_input::Builder,
}
impl CreateFlowDefinition {
    /// Creates a new `CreateFlowDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateFlowDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateFlowDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateFlowDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateFlowDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of your flow definition.</p>
    pub fn flow_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_definition_name(input.into());
        self
    }
    /// <p>The name of your flow definition.</p>
    pub fn set_flow_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_flow_definition_name(input);
        self
    }
    /// <p>Container for configuring the source of human task requests. Use to specify if Amazon Rekognition or Amazon Textract is used as an integration source.</p>
    pub fn human_loop_request_source(
        mut self,
        input: crate::model::HumanLoopRequestSource,
    ) -> Self {
        self.inner = self.inner.human_loop_request_source(input);
        self
    }
    /// <p>Container for configuring the source of human task requests. Use to specify if Amazon Rekognition or Amazon Textract is used as an integration source.</p>
    pub fn set_human_loop_request_source(
        mut self,
        input: std::option::Option<crate::model::HumanLoopRequestSource>,
    ) -> Self {
        self.inner = self.inner.set_human_loop_request_source(input);
        self
    }
    /// <p>An object containing information about the events that trigger a human workflow.</p>
    pub fn human_loop_activation_config(
        mut self,
        input: crate::model::HumanLoopActivationConfig,
    ) -> Self {
        self.inner = self.inner.human_loop_activation_config(input);
        self
    }
    /// <p>An object containing information about the events that trigger a human workflow.</p>
    pub fn set_human_loop_activation_config(
        mut self,
        input: std::option::Option<crate::model::HumanLoopActivationConfig>,
    ) -> Self {
        self.inner = self.inner.set_human_loop_activation_config(input);
        self
    }
    /// <p>An object containing information about the tasks the human reviewers will perform.</p>
    pub fn human_loop_config(mut self, input: crate::model::HumanLoopConfig) -> Self {
        self.inner = self.inner.human_loop_config(input);
        self
    }
    /// <p>An object containing information about the tasks the human reviewers will perform.</p>
    pub fn set_human_loop_config(
        mut self,
        input: std::option::Option<crate::model::HumanLoopConfig>,
    ) -> Self {
        self.inner = self.inner.set_human_loop_config(input);
        self
    }
    /// <p>An object containing information about where the human review results will be uploaded.</p>
    pub fn output_config(mut self, input: crate::model::FlowDefinitionOutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>An object containing information about where the human review results will be uploaded.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::model::FlowDefinitionOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, <code>arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298</code>.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, <code>arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298</code>.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateHub`.
///
/// <p>Create a hub.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateHub {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_hub_input::Builder,
}
impl CreateHub {
    /// Creates a new `CreateHub`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateHub,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateHubError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateHubOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateHubError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the hub to create.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub to create.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
    /// <p>A description of the hub.</p>
    pub fn hub_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_description(input.into());
        self
    }
    /// <p>A description of the hub.</p>
    pub fn set_hub_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_description(input);
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn hub_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_display_name(input.into());
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn set_hub_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_display_name(input);
        self
    }
    /// Appends an item to `HubSearchKeywords`.
    ///
    /// To override the contents of this collection use [`set_hub_search_keywords`](Self::set_hub_search_keywords).
    ///
    /// <p>The searchable keywords for the hub.</p>
    pub fn hub_search_keywords(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_search_keywords(input.into());
        self
    }
    /// <p>The searchable keywords for the hub.</p>
    pub fn set_hub_search_keywords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_hub_search_keywords(input);
        self
    }
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub fn s3_storage_config(mut self, input: crate::model::HubS3StorageConfig) -> Self {
        self.inner = self.inner.s3_storage_config(input);
        self
    }
    /// <p>The Amazon S3 storage configuration for the hub.</p>
    pub fn set_s3_storage_config(
        mut self,
        input: std::option::Option<crate::model::HubS3StorageConfig>,
    ) -> Self {
        self.inner = self.inner.set_s3_storage_config(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags to associate with the hub.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Any tags to associate with the hub.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateHumanTaskUi`.
///
/// <p>Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateHumanTaskUi {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_human_task_ui_input::Builder,
}
impl CreateHumanTaskUi {
    /// Creates a new `CreateHumanTaskUi`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateHumanTaskUi,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateHumanTaskUiError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateHumanTaskUiOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateHumanTaskUiError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the user interface you are creating.</p>
    pub fn human_task_ui_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.human_task_ui_name(input.into());
        self
    }
    /// <p>The name of the user interface you are creating.</p>
    pub fn set_human_task_ui_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_human_task_ui_name(input);
        self
    }
    /// <p>The Liquid template for the worker user interface.</p>
    pub fn ui_template(mut self, input: crate::model::UiTemplate) -> Self {
        self.inner = self.inner.ui_template(input);
        self
    }
    /// <p>The Liquid template for the worker user interface.</p>
    pub fn set_ui_template(mut self, input: std::option::Option<crate::model::UiTemplate>) -> Self {
        self.inner = self.inner.set_ui_template(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs that contain metadata to help you categorize and organize a human review workflow user interface. Each tag consists of a key and a value, both of which you define.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs that contain metadata to help you categorize and organize a human review workflow user interface. Each tag consists of a key and a value, both of which you define.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateHyperParameterTuningJob`.
///
/// <p>Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version of a model by running many training jobs on your dataset using the algorithm you choose and values for hyperparameters within ranges that you specify. It then chooses the hyperparameter values that result in a model that performs the best, as measured by an objective metric that you choose.</p>
/// <p>A hyperparameter tuning job automatically creates Amazon SageMaker experiments, trials, and trial components for each training job that it runs. You can view these entities in Amazon SageMaker Studio. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/experiments-view-compare.html#experiments-view">View Experiments, Trials, and Trial Components</a>.</p> <important>
/// <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateHyperParameterTuningJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_hyper_parameter_tuning_job_input::Builder,
}
impl CreateHyperParameterTuningJob {
    /// Creates a new `CreateHyperParameterTuningJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateHyperParameterTuningJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateHyperParameterTuningJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateHyperParameterTuningJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateHyperParameterTuningJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the tuning job. This name is the prefix for the names of all training jobs that this tuning job launches. The name must be unique within the same Amazon Web Services account and Amazon Web Services Region. The name must have 1 to 32 characters. Valid characters are a-z, A-Z, 0-9, and : + = @ _ % - (hyphen). The name is not case sensitive.</p>
    pub fn hyper_parameter_tuning_job_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.hyper_parameter_tuning_job_name(input.into());
        self
    }
    /// <p>The name of the tuning job. This name is the prefix for the names of all training jobs that this tuning job launches. The name must be unique within the same Amazon Web Services account and Amazon Web Services Region. The name must have 1 to 32 characters. Valid characters are a-z, A-Z, 0-9, and : + = @ _ % - (hyphen). The name is not case sensitive.</p>
    pub fn set_hyper_parameter_tuning_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hyper_parameter_tuning_job_name(input);
        self
    }
    /// <p>The <code>HyperParameterTuningJobConfig</code> object that describes the tuning job, including the search strategy, the objective metric used to evaluate training jobs, ranges of parameters to search, and resource limits for the tuning job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How Hyperparameter Tuning Works</a>.</p>
    pub fn hyper_parameter_tuning_job_config(
        mut self,
        input: crate::model::HyperParameterTuningJobConfig,
    ) -> Self {
        self.inner = self.inner.hyper_parameter_tuning_job_config(input);
        self
    }
    /// <p>The <code>HyperParameterTuningJobConfig</code> object that describes the tuning job, including the search strategy, the objective metric used to evaluate training jobs, ranges of parameters to search, and resource limits for the tuning job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How Hyperparameter Tuning Works</a>.</p>
    pub fn set_hyper_parameter_tuning_job_config(
        mut self,
        input: std::option::Option<crate::model::HyperParameterTuningJobConfig>,
    ) -> Self {
        self.inner = self.inner.set_hyper_parameter_tuning_job_config(input);
        self
    }
    /// <p>The <code>HyperParameterTrainingJobDefinition</code> object that describes the training jobs that this tuning job launches, including static hyperparameters, input data configuration, output data configuration, resource configuration, and stopping condition.</p>
    pub fn training_job_definition(
        mut self,
        input: crate::model::HyperParameterTrainingJobDefinition,
    ) -> Self {
        self.inner = self.inner.training_job_definition(input);
        self
    }
    /// <p>The <code>HyperParameterTrainingJobDefinition</code> object that describes the training jobs that this tuning job launches, including static hyperparameters, input data configuration, output data configuration, resource configuration, and stopping condition.</p>
    pub fn set_training_job_definition(
        mut self,
        input: std::option::Option<crate::model::HyperParameterTrainingJobDefinition>,
    ) -> Self {
        self.inner = self.inner.set_training_job_definition(input);
        self
    }
    /// Appends an item to `TrainingJobDefinitions`.
    ///
    /// To override the contents of this collection use [`set_training_job_definitions`](Self::set_training_job_definitions).
    ///
    /// <p>A list of the <code>HyperParameterTrainingJobDefinition</code> objects launched for this tuning job.</p>
    pub fn training_job_definitions(
        mut self,
        input: crate::model::HyperParameterTrainingJobDefinition,
    ) -> Self {
        self.inner = self.inner.training_job_definitions(input);
        self
    }
    /// <p>A list of the <code>HyperParameterTrainingJobDefinition</code> objects launched for this tuning job.</p>
    pub fn set_training_job_definitions(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::model::HyperParameterTrainingJobDefinition>,
        >,
    ) -> Self {
        self.inner = self.inner.set_training_job_definitions(input);
        self
    }
    /// <p>Specifies the configuration for starting the hyperparameter tuning job using one or more previous tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p>
    /// <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric. If you specify <code>IDENTICAL_DATA_AND_ALGORITHM</code> as the <code>WarmStartType</code> value for the warm start configuration, the training job that performs the best in the new tuning job is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note>
    /// <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p>
    /// </note>
    pub fn warm_start_config(
        mut self,
        input: crate::model::HyperParameterTuningJobWarmStartConfig,
    ) -> Self {
        self.inner = self.inner.warm_start_config(input);
        self
    }
    /// <p>Specifies the configuration for starting the hyperparameter tuning job using one or more previous tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p>
    /// <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric. If you specify <code>IDENTICAL_DATA_AND_ALGORITHM</code> as the <code>WarmStartType</code> value for the warm start configuration, the training job that performs the best in the new tuning job is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note>
    /// <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p>
    /// </note>
    pub fn set_warm_start_config(
        mut self,
        input: std::option::Option<crate::model::HyperParameterTuningJobWarmStartConfig>,
    ) -> Self {
        self.inner = self.inner.set_warm_start_config(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    /// <p>Tags that you specify for the tuning job are also added to all training jobs that the tuning job launches.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    /// <p>Tags that you specify for the tuning job are also added to all training jobs that the tuning job launches.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateImage`.
///
/// <p>Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateImage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_image_input::Builder,
}
impl CreateImage {
    /// Creates a new `CreateImage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateImage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateImageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateImageOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateImageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The description of the image.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the image.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The display name of the image. If not provided, <code>ImageName</code> is displayed.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The display name of the image. If not provided, <code>ImageName</code> is displayed.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The name of the image. Must be unique to your account.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image. Must be unique to your account.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>The ARN of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The ARN of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the image.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to apply to the image.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateImageVersion`.
///
/// <p>Creates a version of the SageMaker image specified by <code>ImageName</code>. The version represents the Amazon Elastic Container Registry (ECR) container image specified by <code>BaseImage</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateImageVersion {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_image_version_input::Builder,
}
impl CreateImageVersion {
    /// Creates a new `CreateImageVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateImageVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateImageVersionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateImageVersionOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateImageVersionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The registry path of the container image to use as the starting point for this version. The path is an Amazon Elastic Container Registry (ECR) URI in the following format:</p>
    /// <p> <code>
    /// <acct-id>
    /// .dkr.ecr.
    /// <region>
    /// .amazonaws.com/
    /// <repo-name[:tag] or [@digest]></repo-name[:tag]>
    /// </region>
    /// </acct-id></code> </p>
    pub fn base_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.base_image(input.into());
        self
    }
    /// <p>The registry path of the container image to use as the starting point for this version. The path is an Amazon Elastic Container Registry (ECR) URI in the following format:</p>
    /// <p> <code>
    /// <acct-id>
    /// .dkr.ecr.
    /// <region>
    /// .amazonaws.com/
    /// <repo-name[:tag] or [@digest]></repo-name[:tag]>
    /// </region>
    /// </acct-id></code> </p>
    pub fn set_base_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_base_image(input);
        self
    }
    /// <p>A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web Services SDKs, such as the SDK for Python (Boto3), add a unique value to the call.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web Services SDKs, such as the SDK for Python (Boto3), add a unique value to the call.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The <code>ImageName</code> of the <code>Image</code> to create a version of.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The <code>ImageName</code> of the <code>Image</code> to create a version of.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// Appends an item to `Aliases`.
    ///
    /// To override the contents of this collection use [`set_aliases`](Self::set_aliases).
    ///
    /// <p>A list of aliases created with the image version.</p>
    pub fn aliases(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aliases(input.into());
        self
    }
    /// <p>A list of aliases created with the image version.</p>
    pub fn set_aliases(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_aliases(input);
        self
    }
    /// <p>The stability of the image version, specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn vendor_guidance(mut self, input: crate::model::VendorGuidance) -> Self {
        self.inner = self.inner.vendor_guidance(input);
        self
    }
    /// <p>The stability of the image version, specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn set_vendor_guidance(
        mut self,
        input: std::option::Option<crate::model::VendorGuidance>,
    ) -> Self {
        self.inner = self.inner.set_vendor_guidance(input);
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn job_type(mut self, input: crate::model::JobType) -> Self {
        self.inner = self.inner.job_type(input);
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn set_job_type(mut self, input: std::option::Option<crate::model::JobType>) -> Self {
        self.inner = self.inner.set_job_type(input);
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn ml_framework(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ml_framework(input.into());
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn set_ml_framework(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ml_framework(input);
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn programming_lang(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.programming_lang(input.into());
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn set_programming_lang(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_programming_lang(input);
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn processor(mut self, input: crate::model::Processor) -> Self {
        self.inner = self.inner.processor(input);
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn set_processor(mut self, input: std::option::Option<crate::model::Processor>) -> Self {
        self.inner = self.inner.set_processor(input);
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn horovod(mut self, input: bool) -> Self {
        self.inner = self.inner.horovod(input);
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn set_horovod(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_horovod(input);
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn release_notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.release_notes(input.into());
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn set_release_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_release_notes(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateInferenceExperiment`.
///
/// <p> Creates an inference experiment using the configurations specified in the request. </p>
/// <p> Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html">Shadow tests</a>. </p>
/// <p> Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint's model variants based on your specified configuration. </p>
/// <p> While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html">View, monitor, and edit shadow tests</a>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateInferenceExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_inference_experiment_input::Builder,
}
impl CreateInferenceExperiment {
    /// Creates a new `CreateInferenceExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateInferenceExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateInferenceExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateInferenceExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateInferenceExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name for the inference experiment.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name for the inference experiment.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The type of the inference experiment that you want to run. The following types of experiments are possible: </p>
    /// <ul>
    /// <li> <p> <code>ShadowMode</code>: You can use this type to validate a shadow variant. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html">Shadow tests</a>. </p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::model::InferenceExperimentType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p> The type of the inference experiment that you want to run. The following types of experiments are possible: </p>
    /// <ul>
    /// <li> <p> <code>ShadowMode</code>: You can use this type to validate a shadow variant. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html">Shadow tests</a>. </p> </li>
    /// </ul>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::model::InferenceExperimentType>,
    ) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p> The duration for which you want the inference experiment to run. If you don't specify this field, the experiment automatically starts immediately upon creation and concludes after 7 days. </p>
    pub fn schedule(mut self, input: crate::model::InferenceExperimentSchedule) -> Self {
        self.inner = self.inner.schedule(input);
        self
    }
    /// <p> The duration for which you want the inference experiment to run. If you don't specify this field, the experiment automatically starts immediately upon creation and concludes after 7 days. </p>
    pub fn set_schedule(
        mut self,
        input: std::option::Option<crate::model::InferenceExperimentSchedule>,
    ) -> Self {
        self.inner = self.inner.set_schedule(input);
        self
    }
    /// <p>A description for the inference experiment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the inference experiment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment. </p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p> The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment. </p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p> The name of the Amazon SageMaker endpoint on which you want to run the inference experiment. </p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p> The name of the Amazon SageMaker endpoint on which you want to run the inference experiment. </p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// Appends an item to `ModelVariants`.
    ///
    /// To override the contents of this collection use [`set_model_variants`](Self::set_model_variants).
    ///
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant in the inference experiment. Each <code>ModelVariantConfig</code> object in the array describes the infrastructure configuration for the corresponding variant. </p>
    pub fn model_variants(mut self, input: crate::model::ModelVariantConfig) -> Self {
        self.inner = self.inner.model_variants(input);
        self
    }
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant in the inference experiment. Each <code>ModelVariantConfig</code> object in the array describes the infrastructure configuration for the corresponding variant. </p>
    pub fn set_model_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ModelVariantConfig>>,
    ) -> Self {
        self.inner = self.inner.set_model_variants(input);
        self
    }
    /// <p> The Amazon S3 location and configuration for storing inference request and response data. </p>
    /// <p> This is an optional parameter that you can use for data capture. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html">Capture data</a>. </p>
    pub fn data_storage_config(
        mut self,
        input: crate::model::InferenceExperimentDataStorageConfig,
    ) -> Self {
        self.inner = self.inner.data_storage_config(input);
        self
    }
    /// <p> The Amazon S3 location and configuration for storing inference request and response data. </p>
    /// <p> This is an optional parameter that you can use for data capture. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html">Capture data</a>. </p>
    pub fn set_data_storage_config(
        mut self,
        input: std::option::Option<crate::model::InferenceExperimentDataStorageConfig>,
    ) -> Self {
        self.inner = self.inner.set_data_storage_config(input);
        self
    }
    /// <p> The configuration of <code>ShadowMode</code> inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates. </p>
    pub fn shadow_mode_config(mut self, input: crate::model::ShadowModeConfig) -> Self {
        self.inner = self.inner.shadow_mode_config(input);
        self
    }
    /// <p> The configuration of <code>ShadowMode</code> inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates. </p>
    pub fn set_shadow_mode_config(
        mut self,
        input: std::option::Option<crate::model::ShadowModeConfig>,
    ) -> Self {
        self.inner = self.inner.set_shadow_mode_config(input);
        self
    }
    /// <p> The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. The <code>KmsKey</code> can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>KMS key ID</p> <p> <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code> </p> </li>
    /// <li> <p>Amazon Resource Name (ARN) of a KMS key</p> <p> <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code> </p> </li>
    /// <li> <p>KMS key Alias</p> <p> <code>"alias/ExampleAlias"</code> </p> </li>
    /// <li> <p>Amazon Resource Name (ARN) of a KMS key Alias</p> <p> <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code> </p> </li>
    /// </ul>
    /// <p> If you use a KMS key ID or an alias of your KMS key, the Amazon SageMaker execution role must include permissions to call <code>kms:Encrypt</code>. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. Amazon SageMaker uses server-side encryption with KMS managed keys for <code>OutputDataConfig</code>. If you use a bucket policy with an <code>s3:PutObject</code> permission that only allows objects with server-side encryption, set the condition key of <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS managed Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i> </p>
    /// <p> The KMS key policy must grant permission to the IAM role that you specify in your <code>CreateEndpoint</code> and <code>UpdateEndpoint</code> requests. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>. </p>
    pub fn kms_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_key(input.into());
        self
    }
    /// <p> The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. The <code>KmsKey</code> can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>KMS key ID</p> <p> <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code> </p> </li>
    /// <li> <p>Amazon Resource Name (ARN) of a KMS key</p> <p> <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code> </p> </li>
    /// <li> <p>KMS key Alias</p> <p> <code>"alias/ExampleAlias"</code> </p> </li>
    /// <li> <p>Amazon Resource Name (ARN) of a KMS key Alias</p> <p> <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code> </p> </li>
    /// </ul>
    /// <p> If you use a KMS key ID or an alias of your KMS key, the Amazon SageMaker execution role must include permissions to call <code>kms:Encrypt</code>. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. Amazon SageMaker uses server-side encryption with KMS managed keys for <code>OutputDataConfig</code>. If you use a bucket policy with an <code>s3:PutObject</code> permission that only allows objects with server-side encryption, set the condition key of <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS managed Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i> </p>
    /// <p> The KMS key policy must grant permission to the IAM role that you specify in your <code>CreateEndpoint</code> and <code>UpdateEndpoint</code> requests. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>. </p>
    pub fn set_kms_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> Array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/tagging.html">Tagging your Amazon Web Services Resources</a>. </p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p> Array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/tagging.html">Tagging your Amazon Web Services Resources</a>. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateInferenceRecommendationsJob`.
///
/// <p>Starts a recommendation job. You can create either an instance recommendation or load test job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateInferenceRecommendationsJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_inference_recommendations_job_input::Builder,
}
impl CreateInferenceRecommendationsJob {
    /// Creates a new `CreateInferenceRecommendationsJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateInferenceRecommendationsJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateInferenceRecommendationsJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateInferenceRecommendationsJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateInferenceRecommendationsJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A name for the recommendation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>A name for the recommendation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p>Defines the type of recommendation job. Specify <code>Default</code> to initiate an instance recommendation and <code>Advanced</code> to initiate a load test. If left unspecified, Amazon SageMaker Inference Recommender will run an instance recommendation (<code>DEFAULT</code>) job.</p>
    pub fn job_type(mut self, input: crate::model::RecommendationJobType) -> Self {
        self.inner = self.inner.job_type(input);
        self
    }
    /// <p>Defines the type of recommendation job. Specify <code>Default</code> to initiate an instance recommendation and <code>Advanced</code> to initiate a load test. If left unspecified, Amazon SageMaker Inference Recommender will run an instance recommendation (<code>DEFAULT</code>) job.</p>
    pub fn set_job_type(
        mut self,
        input: std::option::Option<crate::model::RecommendationJobType>,
    ) -> Self {
        self.inner = self.inner.set_job_type(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>Provides information about the versioned model package Amazon Resource Name (ARN), the traffic pattern, and endpoint configurations.</p>
    pub fn input_config(mut self, input: crate::model::RecommendationJobInputConfig) -> Self {
        self.inner = self.inner.input_config(input);
        self
    }
    /// <p>Provides information about the versioned model package Amazon Resource Name (ARN), the traffic pattern, and endpoint configurations.</p>
    pub fn set_input_config(
        mut self,
        input: std::option::Option<crate::model::RecommendationJobInputConfig>,
    ) -> Self {
        self.inner = self.inner.set_input_config(input);
        self
    }
    /// <p>Description of the recommendation job.</p>
    pub fn job_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_description(input.into());
        self
    }
    /// <p>Description of the recommendation job.</p>
    pub fn set_job_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_description(input);
        self
    }
    /// <p>A set of conditions for stopping a recommendation job. If any of the conditions are met, the job is automatically stopped.</p>
    pub fn stopping_conditions(
        mut self,
        input: crate::model::RecommendationJobStoppingConditions,
    ) -> Self {
        self.inner = self.inner.stopping_conditions(input);
        self
    }
    /// <p>A set of conditions for stopping a recommendation job. If any of the conditions are met, the job is automatically stopped.</p>
    pub fn set_stopping_conditions(
        mut self,
        input: std::option::Option<crate::model::RecommendationJobStoppingConditions>,
    ) -> Self {
        self.inner = self.inner.set_stopping_conditions(input);
        self
    }
    /// <p>Provides information about the output artifacts and the KMS key to use for Amazon S3 server-side encryption.</p>
    pub fn output_config(mut self, input: crate::model::RecommendationJobOutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>Provides information about the output artifacts and the KMS key to use for Amazon S3 server-side encryption.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::model::RecommendationJobOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The metadata that you apply to Amazon Web Services resources to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a> in the Amazon Web Services General Reference.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The metadata that you apply to Amazon Web Services resources to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a> in the Amazon Web Services General Reference.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateLabelingJob`.
///
/// <p>Creates a job that uses workers to label the data objects in your input dataset. You can use the labeled data to train machine learning models. </p>
/// <p>You can select your workforce from one of three providers:</p>
/// <ul>
/// <li> <p>A private workforce that you create. It can include employees, contractors, and outside experts. Use a private workforce when want the data to stay within your organization or when a specific set of skills is required.</p> </li>
/// <li> <p>One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide expertise in specific areas. </p> </li>
/// <li> <p>The Amazon Mechanical Turk workforce. This is the largest workforce, but it should only be used for public data or data that has been stripped of any personally identifiable information.</p> </li>
/// </ul>
/// <p>You can also use <i>automated data labeling</i> to reduce the number of data objects that need to be labeled by a human. Automated data labeling uses <i>active learning</i> to determine if a data object can be labeled by machine or if it needs to be sent to a human worker. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using Automated Data Labeling</a>.</p>
/// <p>The data objects to be labeled are contained in an Amazon S3 bucket. You create a <i>manifest file</i> that describes the location of each object. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using Input and Output Data</a>.</p>
/// <p>The output can be used as the manifest file for another labeling job or as training data for your machine learning models.</p>
/// <p>You can use this operation to create a static labeling job or a streaming labeling job. A static labeling job stops if all data objects in the input manifest file identified in <code>ManifestS3Uri</code> have been labeled. A streaming labeling job runs perpetually until it is manually stopped, or remains idle for 10 days. You can send new data objects to an active (<code>InProgress</code>) streaming labeling job in real time. To learn how to create a static labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create a Labeling Job (API) </a> in the Amazon SageMaker Developer Guide. To learn how to create a streaming labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create a Streaming Labeling Job</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateLabelingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_labeling_job_input::Builder,
}
impl CreateLabelingJob {
    /// Creates a new `CreateLabelingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateLabelingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateLabelingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateLabelingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateLabelingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the labeling job. This name is used to identify the job in a list of labeling jobs. Labeling job names must be unique within an Amazon Web Services account and region. <code>LabelingJobName</code> is not case sensitive. For example, Example-job and example-job are considered the same labeling job name by Ground Truth.</p>
    pub fn labeling_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.labeling_job_name(input.into());
        self
    }
    /// <p>The name of the labeling job. This name is used to identify the job in a list of labeling jobs. Labeling job names must be unique within an Amazon Web Services account and region. <code>LabelingJobName</code> is not case sensitive. For example, Example-job and example-job are considered the same labeling job name by Ground Truth.</p>
    pub fn set_labeling_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_labeling_job_name(input);
        self
    }
    /// <p>The attribute name to use for the label in the output manifest file. This is the key for the key/value pair formed with the label that a worker assigns to the object. The <code>LabelAttributeName</code> must meet the following requirements.</p>
    /// <ul>
    /// <li> <p>The name can't end with "-metadata". </p> </li>
    /// <li> <p>If you are using one of the following <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task types</a>, the attribute name <i>must</i> end with "-ref". If the task type you are using is not listed below, the attribute name <i>must not</i> end with "-ref".</p>
    /// <ul>
    /// <li> <p>Image semantic segmentation (<code>SemanticSegmentation)</code>, and adjustment (<code>AdjustmentSemanticSegmentation</code>) and verification (<code>VerificationSemanticSegmentation</code>) labeling jobs for this task type.</p> </li>
    /// <li> <p>Video frame object detection (<code>VideoObjectDetection</code>), and adjustment and verification (<code>AdjustmentVideoObjectDetection</code>) labeling jobs for this task type.</p> </li>
    /// <li> <p>Video frame object tracking (<code>VideoObjectTracking</code>), and adjustment and verification (<code>AdjustmentVideoObjectTracking</code>) labeling jobs for this task type.</p> </li>
    /// <li> <p>3D point cloud semantic segmentation (<code>3DPointCloudSemanticSegmentation</code>), and adjustment and verification (<code>Adjustment3DPointCloudSemanticSegmentation</code>) labeling jobs for this task type. </p> </li>
    /// <li> <p>3D point cloud object tracking (<code>3DPointCloudObjectTracking</code>), and adjustment and verification (<code>Adjustment3DPointCloudObjectTracking</code>) labeling jobs for this task type. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p></p> <important>
    /// <p>If you are creating an adjustment or verification labeling job, you must use a <i>different</i> <code>LabelAttributeName</code> than the one used in the original labeling job. The original labeling job is the Ground Truth labeling job that produced the labels that you want verified or adjusted. To learn more about adjustment and verification labeling jobs, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify and Adjust Labels</a>.</p>
    /// </important>
    pub fn label_attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.label_attribute_name(input.into());
        self
    }
    /// <p>The attribute name to use for the label in the output manifest file. This is the key for the key/value pair formed with the label that a worker assigns to the object. The <code>LabelAttributeName</code> must meet the following requirements.</p>
    /// <ul>
    /// <li> <p>The name can't end with "-metadata". </p> </li>
    /// <li> <p>If you are using one of the following <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task types</a>, the attribute name <i>must</i> end with "-ref". If the task type you are using is not listed below, the attribute name <i>must not</i> end with "-ref".</p>
    /// <ul>
    /// <li> <p>Image semantic segmentation (<code>SemanticSegmentation)</code>, and adjustment (<code>AdjustmentSemanticSegmentation</code>) and verification (<code>VerificationSemanticSegmentation</code>) labeling jobs for this task type.</p> </li>
    /// <li> <p>Video frame object detection (<code>VideoObjectDetection</code>), and adjustment and verification (<code>AdjustmentVideoObjectDetection</code>) labeling jobs for this task type.</p> </li>
    /// <li> <p>Video frame object tracking (<code>VideoObjectTracking</code>), and adjustment and verification (<code>AdjustmentVideoObjectTracking</code>) labeling jobs for this task type.</p> </li>
    /// <li> <p>3D point cloud semantic segmentation (<code>3DPointCloudSemanticSegmentation</code>), and adjustment and verification (<code>Adjustment3DPointCloudSemanticSegmentation</code>) labeling jobs for this task type. </p> </li>
    /// <li> <p>3D point cloud object tracking (<code>3DPointCloudObjectTracking</code>), and adjustment and verification (<code>Adjustment3DPointCloudObjectTracking</code>) labeling jobs for this task type. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p></p> <important>
    /// <p>If you are creating an adjustment or verification labeling job, you must use a <i>different</i> <code>LabelAttributeName</code> than the one used in the original labeling job. The original labeling job is the Ground Truth labeling job that produced the labels that you want verified or adjusted. To learn more about adjustment and verification labeling jobs, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify and Adjust Labels</a>.</p>
    /// </important>
    pub fn set_label_attribute_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_label_attribute_name(input);
        self
    }
    /// <p>Input data for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.</p>
    /// <p>You must specify at least one of the following: <code>S3DataSource</code> or <code>SnsDataSource</code>. </p>
    /// <ul>
    /// <li> <p>Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming labeling job. If you do not specify and SNS input topic ARN, Ground Truth will create a one-time labeling job that stops after all data objects in the input manifest file have been labeled.</p> </li>
    /// <li> <p>Use <code>S3DataSource</code> to specify an input manifest file for both streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is optional if you use <code>SnsDataSource</code> to create a streaming labeling job.</p> </li>
    /// </ul>
    /// <p>If you use the Amazon Mechanical Turk workforce, your input data should not include confidential information, personal information or protected health information. Use <code>ContentClassifiers</code> to specify that your data is free of personally identifiable information and adult content.</p>
    pub fn input_config(mut self, input: crate::model::LabelingJobInputConfig) -> Self {
        self.inner = self.inner.input_config(input);
        self
    }
    /// <p>Input data for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.</p>
    /// <p>You must specify at least one of the following: <code>S3DataSource</code> or <code>SnsDataSource</code>. </p>
    /// <ul>
    /// <li> <p>Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming labeling job. If you do not specify and SNS input topic ARN, Ground Truth will create a one-time labeling job that stops after all data objects in the input manifest file have been labeled.</p> </li>
    /// <li> <p>Use <code>S3DataSource</code> to specify an input manifest file for both streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is optional if you use <code>SnsDataSource</code> to create a streaming labeling job.</p> </li>
    /// </ul>
    /// <p>If you use the Amazon Mechanical Turk workforce, your input data should not include confidential information, personal information or protected health information. Use <code>ContentClassifiers</code> to specify that your data is free of personally identifiable information and adult content.</p>
    pub fn set_input_config(
        mut self,
        input: std::option::Option<crate::model::LabelingJobInputConfig>,
    ) -> Self {
        self.inner = self.inner.set_input_config(input);
        self
    }
    /// <p>The location of the output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.</p>
    pub fn output_config(mut self, input: crate::model::LabelingJobOutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>The location of the output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::model::LabelingJobOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// <p>The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform tasks on your behalf during data labeling. You must grant this role the necessary permissions so that Amazon SageMaker can successfully complete data labeling.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform tasks on your behalf during data labeling. You must grant this role the necessary permissions so that Amazon SageMaker can successfully complete data labeling.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The S3 URI of the file, referred to as a <i>label category configuration file</i>, that defines the categories used to label the data objects.</p>
    /// <p>For 3D point cloud and video frame task types, you can add label category attributes and frame attributes to your label category configuration file. To learn how, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html">Create a Labeling Category Configuration File for 3D Point Cloud Labeling Jobs</a>. </p>
    /// <p>For named entity recognition jobs, in addition to <code>"labels"</code>, you must provide worker instructions in the label category configuration file using the <code>"instructions"</code> parameter: <code>"instructions": {"shortInstruction":"</code></p>
    /// <h1><code>Add header</code></h1>
    /// <p><code>Add Instructions</code></p><code>", "fullInstruction":"<p>Add additional instructions.</p>"}</code>. For details and an example, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-named-entity-recg.html#sms-creating-ner-api">Create a Named Entity Recognition Labeling Job (API) </a>.
    /// <p></p>
    /// <p>For all other <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task types</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html">custom tasks</a>, your label category configuration file must be a JSON file in the following format. Identify the labels you want to use by replacing <code>label_1</code>, <code>label_2</code>,<code>...</code>,<code>label_n</code> with your label categories.</p>
    /// <p> <code>{ </code> </p>
    /// <p> <code>"document-version": "2018-11-28",</code> </p>
    /// <p> <code>"labels": [{"label": "label_1"},{"label": "label_2"},...{"label": "label_n"}]</code> </p>
    /// <p> <code>}</code> </p>
    /// <p>Note the following about the label category configuration file:</p>
    /// <ul>
    /// <li> <p>For image classification and text classification (single and multi-label) you must specify at least two label categories. For all other task types, the minimum number of label categories required is one. </p> </li>
    /// <li> <p>Each label category must be unique, you cannot specify duplicate label categories.</p> </li>
    /// <li> <p>If you create a 3D point cloud or video frame adjustment or verification labeling job, you must include <code>auditLabelAttributeName</code> in the label category configuration. Use this parameter to enter the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName"> <code>LabelAttributeName</code> </a> of the labeling job you want to adjust or verify annotations of.</p> </li>
    /// </ul>
    pub fn label_category_config_s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.label_category_config_s3_uri(input.into());
        self
    }
    /// <p>The S3 URI of the file, referred to as a <i>label category configuration file</i>, that defines the categories used to label the data objects.</p>
    /// <p>For 3D point cloud and video frame task types, you can add label category attributes and frame attributes to your label category configuration file. To learn how, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html">Create a Labeling Category Configuration File for 3D Point Cloud Labeling Jobs</a>. </p>
    /// <p>For named entity recognition jobs, in addition to <code>"labels"</code>, you must provide worker instructions in the label category configuration file using the <code>"instructions"</code> parameter: <code>"instructions": {"shortInstruction":"</code></p>
    /// <h1><code>Add header</code></h1>
    /// <p><code>Add Instructions</code></p><code>", "fullInstruction":"<p>Add additional instructions.</p>"}</code>. For details and an example, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-named-entity-recg.html#sms-creating-ner-api">Create a Named Entity Recognition Labeling Job (API) </a>.
    /// <p></p>
    /// <p>For all other <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task types</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html">custom tasks</a>, your label category configuration file must be a JSON file in the following format. Identify the labels you want to use by replacing <code>label_1</code>, <code>label_2</code>,<code>...</code>,<code>label_n</code> with your label categories.</p>
    /// <p> <code>{ </code> </p>
    /// <p> <code>"document-version": "2018-11-28",</code> </p>
    /// <p> <code>"labels": [{"label": "label_1"},{"label": "label_2"},...{"label": "label_n"}]</code> </p>
    /// <p> <code>}</code> </p>
    /// <p>Note the following about the label category configuration file:</p>
    /// <ul>
    /// <li> <p>For image classification and text classification (single and multi-label) you must specify at least two label categories. For all other task types, the minimum number of label categories required is one. </p> </li>
    /// <li> <p>Each label category must be unique, you cannot specify duplicate label categories.</p> </li>
    /// <li> <p>If you create a 3D point cloud or video frame adjustment or verification labeling job, you must include <code>auditLabelAttributeName</code> in the label category configuration. Use this parameter to enter the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName"> <code>LabelAttributeName</code> </a> of the labeling job you want to adjust or verify annotations of.</p> </li>
    /// </ul>
    pub fn set_label_category_config_s3_uri(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_label_category_config_s3_uri(input);
        self
    }
    /// <p>A set of conditions for stopping the labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling.</p>
    pub fn stopping_conditions(
        mut self,
        input: crate::model::LabelingJobStoppingConditions,
    ) -> Self {
        self.inner = self.inner.stopping_conditions(input);
        self
    }
    /// <p>A set of conditions for stopping the labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling.</p>
    pub fn set_stopping_conditions(
        mut self,
        input: std::option::Option<crate::model::LabelingJobStoppingConditions>,
    ) -> Self {
        self.inner = self.inner.set_stopping_conditions(input);
        self
    }
    /// <p>Configures the information required to perform automated data labeling.</p>
    pub fn labeling_job_algorithms_config(
        mut self,
        input: crate::model::LabelingJobAlgorithmsConfig,
    ) -> Self {
        self.inner = self.inner.labeling_job_algorithms_config(input);
        self
    }
    /// <p>Configures the information required to perform automated data labeling.</p>
    pub fn set_labeling_job_algorithms_config(
        mut self,
        input: std::option::Option<crate::model::LabelingJobAlgorithmsConfig>,
    ) -> Self {
        self.inner = self.inner.set_labeling_job_algorithms_config(input);
        self
    }
    /// <p>Configures the labeling task and how it is presented to workers; including, but not limited to price, keywords, and batch size (task count).</p>
    pub fn human_task_config(mut self, input: crate::model::HumanTaskConfig) -> Self {
        self.inner = self.inner.human_task_config(input);
        self
    }
    /// <p>Configures the labeling task and how it is presented to workers; including, but not limited to price, keywords, and batch size (task count).</p>
    pub fn set_human_task_config(
        mut self,
        input: std::option::Option<crate::model::HumanTaskConfig>,
    ) -> Self {
        self.inner = self.inner.set_human_task_config(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key/value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key/value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateModel`.
///
/// <p>Creates a model in SageMaker. In the request, you name the model and describe a primary container. For the primary container, you specify the Docker image that contains inference code, artifacts (from prior training), and a custom environment map that the inference code uses when you deploy the model for predictions.</p>
/// <p>Use this API to create a model if you want to use SageMaker hosting services or run a batch transform job.</p>
/// <p>To host your model, you create an endpoint configuration with the <code>CreateEndpointConfig</code> API, and then create an endpoint with the <code>CreateEndpoint</code> API. SageMaker then deploys all of the containers that you defined for the model in the hosting environment. </p>
/// <p>For an example that calls this method when deploying a model to SageMaker hosting services, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model">Create a Model (Amazon Web Services SDK for Python (Boto 3)).</a> </p>
/// <p>To run a batch transform using your model, you start a job with the <code>CreateTransformJob</code> API. SageMaker uses your model and your dataset to get inferences which are then saved to a specified S3 location.</p>
/// <p>In the request, you also provide an IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute hosting instances or for batch transform jobs. In addition, you also use the IAM role to manage permissions the inference code needs. For example, if the inference code access any other Amazon Web Services resources, you grant necessary permissions via this role.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateModel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_model_input::Builder,
}
impl CreateModel {
    /// Creates a new `CreateModel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateModel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateModelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateModelOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateModelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the new model.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_name(input.into());
        self
    }
    /// <p>The name of the new model.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_name(input);
        self
    }
    /// <p>The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions. </p>
    pub fn primary_container(mut self, input: crate::model::ContainerDefinition) -> Self {
        self.inner = self.inner.primary_container(input);
        self
    }
    /// <p>The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions. </p>
    pub fn set_primary_container(
        mut self,
        input: std::option::Option<crate::model::ContainerDefinition>,
    ) -> Self {
        self.inner = self.inner.set_primary_container(input);
        self
    }
    /// Appends an item to `Containers`.
    ///
    /// To override the contents of this collection use [`set_containers`](Self::set_containers).
    ///
    /// <p>Specifies the containers in the inference pipeline.</p>
    pub fn containers(mut self, input: crate::model::ContainerDefinition) -> Self {
        self.inner = self.inner.containers(input);
        self
    }
    /// <p>Specifies the containers in the inference pipeline.</p>
    pub fn set_containers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ContainerDefinition>>,
    ) -> Self {
        self.inner = self.inner.set_containers(input);
        self
    }
    /// <p>Specifies details of how containers in a multi-container endpoint are called.</p>
    pub fn inference_execution_config(
        mut self,
        input: crate::model::InferenceExecutionConfig,
    ) -> Self {
        self.inner = self.inner.inference_execution_config(input);
        self
    }
    /// <p>Specifies details of how containers in a multi-container endpoint are called.</p>
    pub fn set_inference_execution_config(
        mut self,
        input: std::option::Option<crate::model::InferenceExecutionConfig>,
    ) -> Self {
        self.inner = self.inner.set_inference_execution_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs. Deploying on ML compute instances is part of model hosting. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p> <note>
    /// <p>To be able to pass this role to SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    /// </note>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.execution_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs. Deploying on ML compute instances is part of model hosting. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p> <note>
    /// <p>To be able to pass this role to SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    /// </note>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_execution_role_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. <code>VpcConfig</code> is used in hosting services and in batch transform. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html">Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    pub fn vpc_config(mut self, input: crate::model::VpcConfig) -> Self {
        self.inner = self.inner.vpc_config(input);
        self
    }
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. <code>VpcConfig</code> is used in hosting services and in batch transform. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html">Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    pub fn set_vpc_config(mut self, input: std::option::Option<crate::model::VpcConfig>) -> Self {
        self.inner = self.inner.set_vpc_config(input);
        self
    }
    /// <p>Isolates the model container. No inbound or outbound network calls can be made to or from the model container.</p>
    pub fn enable_network_isolation(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_network_isolation(input);
        self
    }
    /// <p>Isolates the model container. No inbound or outbound network calls can be made to or from the model container.</p>
    pub fn set_enable_network_isolation(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_network_isolation(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateModelBiasJobDefinition`.
///
/// <p>Creates the definition for a model bias job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelBiasJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_model_bias_job_definition_input::Builder,
}
impl CreateModelBiasJobDefinition {
    /// Creates a new `CreateModelBiasJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateModelBiasJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateModelBiasJobDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateModelBiasJobDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateModelBiasJobDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
    /// <p>The baseline configuration for a model bias job.</p>
    pub fn model_bias_baseline_config(
        mut self,
        input: crate::model::ModelBiasBaselineConfig,
    ) -> Self {
        self.inner = self.inner.model_bias_baseline_config(input);
        self
    }
    /// <p>The baseline configuration for a model bias job.</p>
    pub fn set_model_bias_baseline_config(
        mut self,
        input: std::option::Option<crate::model::ModelBiasBaselineConfig>,
    ) -> Self {
        self.inner = self.inner.set_model_bias_baseline_config(input);
        self
    }
    /// <p>Configures the model bias job to run a specified Docker container image.</p>
    pub fn model_bias_app_specification(
        mut self,
        input: crate::model::ModelBiasAppSpecification,
    ) -> Self {
        self.inner = self.inner.model_bias_app_specification(input);
        self
    }
    /// <p>Configures the model bias job to run a specified Docker container image.</p>
    pub fn set_model_bias_app_specification(
        mut self,
        input: std::option::Option<crate::model::ModelBiasAppSpecification>,
    ) -> Self {
        self.inner = self.inner.set_model_bias_app_specification(input);
        self
    }
    /// <p>Inputs for the model bias job.</p>
    pub fn model_bias_job_input(mut self, input: crate::model::ModelBiasJobInput) -> Self {
        self.inner = self.inner.model_bias_job_input(input);
        self
    }
    /// <p>Inputs for the model bias job.</p>
    pub fn set_model_bias_job_input(
        mut self,
        input: std::option::Option<crate::model::ModelBiasJobInput>,
    ) -> Self {
        self.inner = self.inner.set_model_bias_job_input(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn model_bias_job_output_config(
        mut self,
        input: crate::model::MonitoringOutputConfig,
    ) -> Self {
        self.inner = self.inner.model_bias_job_output_config(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn set_model_bias_job_output_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_model_bias_job_output_config(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn job_resources(mut self, input: crate::model::MonitoringResources) -> Self {
        self.inner = self.inner.job_resources(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn set_job_resources(
        mut self,
        input: std::option::Option<crate::model::MonitoringResources>,
    ) -> Self {
        self.inner = self.inner.set_job_resources(input);
        self
    }
    /// <p>Networking options for a model bias job.</p>
    pub fn network_config(mut self, input: crate::model::MonitoringNetworkConfig) -> Self {
        self.inner = self.inner.network_config(input);
        self
    }
    /// <p>Networking options for a model bias job.</p>
    pub fn set_network_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringNetworkConfig>,
    ) -> Self {
        self.inner = self.inner.set_network_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn stopping_condition(mut self, input: crate::model::MonitoringStoppingCondition) -> Self {
        self.inner = self.inner.stopping_condition(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::model::MonitoringStoppingCondition>,
    ) -> Self {
        self.inner = self.inner.set_stopping_condition(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateModelCard`.
///
/// <p>Creates an Amazon SageMaker Model Card.</p>
/// <p>For information about how to use model cards, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html">Amazon SageMaker Model Card</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelCard {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_model_card_input::Builder,
}
impl CreateModelCard {
    /// Creates a new `CreateModelCard`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateModelCard,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateModelCardError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateModelCardOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateModelCardError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique name of the model card.</p>
    pub fn model_card_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_card_name(input.into());
        self
    }
    /// <p>The unique name of the model card.</p>
    pub fn set_model_card_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_card_name(input);
        self
    }
    /// <p>An optional Key Management Service key to encrypt, decrypt, and re-encrypt model card content for regulated workloads with highly sensitive data.</p>
    pub fn security_config(mut self, input: crate::model::ModelCardSecurityConfig) -> Self {
        self.inner = self.inner.security_config(input);
        self
    }
    /// <p>An optional Key Management Service key to encrypt, decrypt, and re-encrypt model card content for regulated workloads with highly sensitive data.</p>
    pub fn set_security_config(
        mut self,
        input: std::option::Option<crate::model::ModelCardSecurityConfig>,
    ) -> Self {
        self.inner = self.inner.set_security_config(input);
        self
    }
    /// <p>The content of the model card. Content must be in <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards-api-json-schema.html">model card JSON schema</a> and provided as a string.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.content(input.into());
        self
    }
    /// <p>The content of the model card. Content must be in <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards-api-json-schema.html">model card JSON schema</a> and provided as a string.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_content(input);
        self
    }
    /// <p>The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.</p>
    /// <ul>
    /// <li> <p> <code>Draft</code>: The model card is a work in progress.</p> </li>
    /// <li> <p> <code>PendingReview</code>: The model card is pending review.</p> </li>
    /// <li> <p> <code>Approved</code>: The model card is approved.</p> </li>
    /// <li> <p> <code>Archived</code>: The model card is archived. No more updates should be made to the model card, but it can still be exported.</p> </li>
    /// </ul>
    pub fn model_card_status(mut self, input: crate::model::ModelCardStatus) -> Self {
        self.inner = self.inner.model_card_status(input);
        self
    }
    /// <p>The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.</p>
    /// <ul>
    /// <li> <p> <code>Draft</code>: The model card is a work in progress.</p> </li>
    /// <li> <p> <code>PendingReview</code>: The model card is pending review.</p> </li>
    /// <li> <p> <code>Approved</code>: The model card is approved.</p> </li>
    /// <li> <p> <code>Archived</code>: The model card is archived. No more updates should be made to the model card, but it can still be exported.</p> </li>
    /// </ul>
    pub fn set_model_card_status(
        mut self,
        input: std::option::Option<crate::model::ModelCardStatus>,
    ) -> Self {
        self.inner = self.inner.set_model_card_status(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs used to manage metadata for model cards.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Key-value pairs used to manage metadata for model cards.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateModelCardExportJob`.
///
/// <p>Creates an Amazon SageMaker Model Card export job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelCardExportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_model_card_export_job_input::Builder,
}
impl CreateModelCardExportJob {
    /// Creates a new `CreateModelCardExportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateModelCardExportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateModelCardExportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateModelCardExportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateModelCardExportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model card to export.</p>
    pub fn model_card_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_card_name(input.into());
        self
    }
    /// <p>The name of the model card to export.</p>
    pub fn set_model_card_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_card_name(input);
        self
    }
    /// <p>The version of the model card to export. If a version is not provided, then the latest version of the model card is exported.</p>
    pub fn model_card_version(mut self, input: i32) -> Self {
        self.inner = self.inner.model_card_version(input);
        self
    }
    /// <p>The version of the model card to export. If a version is not provided, then the latest version of the model card is exported.</p>
    pub fn set_model_card_version(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_model_card_version(input);
        self
    }
    /// <p>The name of the model card export job.</p>
    pub fn model_card_export_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_card_export_job_name(input.into());
        self
    }
    /// <p>The name of the model card export job.</p>
    pub fn set_model_card_export_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_card_export_job_name(input);
        self
    }
    /// <p>The model card output configuration that specifies the Amazon S3 path for exporting.</p>
    pub fn output_config(mut self, input: crate::model::ModelCardExportOutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>The model card output configuration that specifies the Amazon S3 path for exporting.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::model::ModelCardExportOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateModelExplainabilityJobDefinition`.
///
/// <p>Creates the definition for a model explainability job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelExplainabilityJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_model_explainability_job_definition_input::Builder,
}
impl CreateModelExplainabilityJobDefinition {
    /// Creates a new `CreateModelExplainabilityJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateModelExplainabilityJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::CreateModelExplainabilityJobDefinitionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateModelExplainabilityJobDefinitionOutput,
        aws_smithy_http::result::SdkError<
            crate::error::CreateModelExplainabilityJobDefinitionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p> The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
    /// <p>The baseline configuration for a model explainability job.</p>
    pub fn model_explainability_baseline_config(
        mut self,
        input: crate::model::ModelExplainabilityBaselineConfig,
    ) -> Self {
        self.inner = self.inner.model_explainability_baseline_config(input);
        self
    }
    /// <p>The baseline configuration for a model explainability job.</p>
    pub fn set_model_explainability_baseline_config(
        mut self,
        input: std::option::Option<crate::model::ModelExplainabilityBaselineConfig>,
    ) -> Self {
        self.inner = self.inner.set_model_explainability_baseline_config(input);
        self
    }
    /// <p>Configures the model explainability job to run a specified Docker container image.</p>
    pub fn model_explainability_app_specification(
        mut self,
        input: crate::model::ModelExplainabilityAppSpecification,
    ) -> Self {
        self.inner = self.inner.model_explainability_app_specification(input);
        self
    }
    /// <p>Configures the model explainability job to run a specified Docker container image.</p>
    pub fn set_model_explainability_app_specification(
        mut self,
        input: std::option::Option<crate::model::ModelExplainabilityAppSpecification>,
    ) -> Self {
        self.inner = self.inner.set_model_explainability_app_specification(input);
        self
    }
    /// <p>Inputs for the model explainability job.</p>
    pub fn model_explainability_job_input(
        mut self,
        input: crate::model::ModelExplainabilityJobInput,
    ) -> Self {
        self.inner = self.inner.model_explainability_job_input(input);
        self
    }
    /// <p>Inputs for the model explainability job.</p>
    pub fn set_model_explainability_job_input(
        mut self,
        input: std::option::Option<crate::model::ModelExplainabilityJobInput>,
    ) -> Self {
        self.inner = self.inner.set_model_explainability_job_input(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn model_explainability_job_output_config(
        mut self,
        input: crate::model::MonitoringOutputConfig,
    ) -> Self {
        self.inner = self.inner.model_explainability_job_output_config(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn set_model_explainability_job_output_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_model_explainability_job_output_config(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn job_resources(mut self, input: crate::model::MonitoringResources) -> Self {
        self.inner = self.inner.job_resources(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn set_job_resources(
        mut self,
        input: std::option::Option<crate::model::MonitoringResources>,
    ) -> Self {
        self.inner = self.inner.set_job_resources(input);
        self
    }
    /// <p>Networking options for a model explainability job.</p>
    pub fn network_config(mut self, input: crate::model::MonitoringNetworkConfig) -> Self {
        self.inner = self.inner.network_config(input);
        self
    }
    /// <p>Networking options for a model explainability job.</p>
    pub fn set_network_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringNetworkConfig>,
    ) -> Self {
        self.inner = self.inner.set_network_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn stopping_condition(mut self, input: crate::model::MonitoringStoppingCondition) -> Self {
        self.inner = self.inner.stopping_condition(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::model::MonitoringStoppingCondition>,
    ) -> Self {
        self.inner = self.inner.set_stopping_condition(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateModelPackage`.
///
/// <p>Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
/// <p>To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for <code>InferenceSpecification</code>. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for <code>SourceAlgorithmSpecification</code>.</p> <note>
/// <p>There are two types of model packages:</p>
/// <ul>
/// <li> <p>Versioned - a model that is part of a model group in the model registry.</p> </li>
/// <li> <p>Unversioned - a model package that is not part of a model group.</p> </li>
/// </ul>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelPackage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_model_package_input::Builder,
}
impl CreateModelPackage {
    /// Creates a new `CreateModelPackage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateModelPackage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateModelPackageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateModelPackageOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateModelPackageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    /// <p>This parameter is required for unversioned models. It is not applicable to versioned models.</p>
    pub fn model_package_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_name(input.into());
        self
    }
    /// <p>The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    /// <p>This parameter is required for unversioned models. It is not applicable to versioned models.</p>
    pub fn set_model_package_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_name(input);
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p>
    /// <p>This parameter is required for versioned models, and does not apply to unversioned models.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_group_name(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p>
    /// <p>This parameter is required for versioned models, and does not apply to unversioned models.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_group_name(input);
        self
    }
    /// <p>A description of the model package.</p>
    pub fn model_package_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_description(input.into());
        self
    }
    /// <p>A description of the model package.</p>
    pub fn set_model_package_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_description(input);
        self
    }
    /// <p>Specifies details about inference jobs that can be run with models based on this model package, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li>
    /// <li> <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p> </li>
    /// <li> <p>The input and output content formats that the model package supports for inference.</p> </li>
    /// </ul>
    pub fn inference_specification(mut self, input: crate::model::InferenceSpecification) -> Self {
        self.inner = self.inner.inference_specification(input);
        self
    }
    /// <p>Specifies details about inference jobs that can be run with models based on this model package, including the following:</p>
    /// <ul>
    /// <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li>
    /// <li> <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p> </li>
    /// <li> <p>The input and output content formats that the model package supports for inference.</p> </li>
    /// </ul>
    pub fn set_inference_specification(
        mut self,
        input: std::option::Option<crate::model::InferenceSpecification>,
    ) -> Self {
        self.inner = self.inner.set_inference_specification(input);
        self
    }
    /// <p>Specifies configurations for one or more transform jobs that SageMaker runs to test the model package.</p>
    pub fn validation_specification(
        mut self,
        input: crate::model::ModelPackageValidationSpecification,
    ) -> Self {
        self.inner = self.inner.validation_specification(input);
        self
    }
    /// <p>Specifies configurations for one or more transform jobs that SageMaker runs to test the model package.</p>
    pub fn set_validation_specification(
        mut self,
        input: std::option::Option<crate::model::ModelPackageValidationSpecification>,
    ) -> Self {
        self.inner = self.inner.set_validation_specification(input);
        self
    }
    /// <p>Details about the algorithm that was used to create the model package.</p>
    pub fn source_algorithm_specification(
        mut self,
        input: crate::model::SourceAlgorithmSpecification,
    ) -> Self {
        self.inner = self.inner.source_algorithm_specification(input);
        self
    }
    /// <p>Details about the algorithm that was used to create the model package.</p>
    pub fn set_source_algorithm_specification(
        mut self,
        input: std::option::Option<crate::model::SourceAlgorithmSpecification>,
    ) -> Self {
        self.inner = self.inner.set_source_algorithm_specification(input);
        self
    }
    /// <p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p>
    /// <p>This parameter is optional for unversioned models, and does not apply to versioned models.</p>
    pub fn certify_for_marketplace(mut self, input: bool) -> Self {
        self.inner = self.inner.certify_for_marketplace(input);
        self
    }
    /// <p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p>
    /// <p>This parameter is optional for unversioned models, and does not apply to versioned models.</p>
    pub fn set_certify_for_marketplace(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_certify_for_marketplace(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of key value pairs associated with the model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of key value pairs associated with the model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Whether the model is approved for deployment.</p>
    /// <p>This parameter is optional for versioned models, and does not apply to unversioned models.</p>
    /// <p>For versioned models, the value of this parameter must be set to <code>Approved</code> to deploy the model.</p>
    pub fn model_approval_status(mut self, input: crate::model::ModelApprovalStatus) -> Self {
        self.inner = self.inner.model_approval_status(input);
        self
    }
    /// <p>Whether the model is approved for deployment.</p>
    /// <p>This parameter is optional for versioned models, and does not apply to unversioned models.</p>
    /// <p>For versioned models, the value of this parameter must be set to <code>Approved</code> to deploy the model.</p>
    pub fn set_model_approval_status(
        mut self,
        input: std::option::Option<crate::model::ModelApprovalStatus>,
    ) -> Self {
        self.inner = self.inner.set_model_approval_status(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(mut self, input: crate::model::MetadataProperties) -> Self {
        self.inner = self.inner.metadata_properties(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn set_metadata_properties(
        mut self,
        input: std::option::Option<crate::model::MetadataProperties>,
    ) -> Self {
        self.inner = self.inner.set_metadata_properties(input);
        self
    }
    /// <p>A structure that contains model metrics reports.</p>
    pub fn model_metrics(mut self, input: crate::model::ModelMetrics) -> Self {
        self.inner = self.inner.model_metrics(input);
        self
    }
    /// <p>A structure that contains model metrics reports.</p>
    pub fn set_model_metrics(
        mut self,
        input: std::option::Option<crate::model::ModelMetrics>,
    ) -> Self {
        self.inner = self.inner.set_model_metrics(input);
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Adds a key-value pair to `CustomerMetadataProperties`.
    ///
    /// To override the contents of this collection use [`set_customer_metadata_properties`](Self::set_customer_metadata_properties).
    ///
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn customer_metadata_properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.customer_metadata_properties(k.into(), v.into());
        self
    }
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn set_customer_metadata_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_customer_metadata_properties(input);
        self
    }
    /// <p>Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>. </p>
    pub fn drift_check_baselines(mut self, input: crate::model::DriftCheckBaselines) -> Self {
        self.inner = self.inner.drift_check_baselines(input);
        self
    }
    /// <p>Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>. </p>
    pub fn set_drift_check_baselines(
        mut self,
        input: std::option::Option<crate::model::DriftCheckBaselines>,
    ) -> Self {
        self.inner = self.inner.set_drift_check_baselines(input);
        self
    }
    /// <p>The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification. The following tasks are supported by Inference Recommender: <code>"IMAGE_CLASSIFICATION"</code> | <code>"OBJECT_DETECTION"</code> | <code>"TEXT_GENERATION"</code> |<code>"IMAGE_SEGMENTATION"</code> | <code>"FILL_MASK"</code> | <code>"CLASSIFICATION"</code> | <code>"REGRESSION"</code> | <code>"OTHER"</code>.</p>
    /// <p>Specify "OTHER" if none of the tasks listed fit your use case.</p>
    pub fn task(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.task(input.into());
        self
    }
    /// <p>The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification. The following tasks are supported by Inference Recommender: <code>"IMAGE_CLASSIFICATION"</code> | <code>"OBJECT_DETECTION"</code> | <code>"TEXT_GENERATION"</code> |<code>"IMAGE_SEGMENTATION"</code> | <code>"FILL_MASK"</code> | <code>"CLASSIFICATION"</code> | <code>"REGRESSION"</code> | <code>"OTHER"</code>.</p>
    /// <p>Specify "OTHER" if none of the tasks listed fit your use case.</p>
    pub fn set_task(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_task(input);
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn sample_payload_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sample_payload_url(input.into());
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn set_sample_payload_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sample_payload_url(input);
        self
    }
    /// Appends an item to `AdditionalInferenceSpecifications`.
    ///
    /// To override the contents of this collection use [`set_additional_inference_specifications`](Self::set_additional_inference_specifications).
    ///
    /// <p>An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts. </p>
    pub fn additional_inference_specifications(
        mut self,
        input: crate::model::AdditionalInferenceSpecificationDefinition,
    ) -> Self {
        self.inner = self.inner.additional_inference_specifications(input);
        self
    }
    /// <p>An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts. </p>
    pub fn set_additional_inference_specifications(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::model::AdditionalInferenceSpecificationDefinition>,
        >,
    ) -> Self {
        self.inner = self.inner.set_additional_inference_specifications(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateModelPackageGroup`.
///
/// <p>Creates a model group. A model group contains a group of model versions.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelPackageGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_model_package_group_input::Builder,
}
impl CreateModelPackageGroup {
    /// Creates a new `CreateModelPackageGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateModelPackageGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateModelPackageGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateModelPackageGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateModelPackageGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model group.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_group_name(input.into());
        self
    }
    /// <p>The name of the model group.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_group_name(input);
        self
    }
    /// <p>A description for the model group.</p>
    pub fn model_package_group_description(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.model_package_group_description(input.into());
        self
    }
    /// <p>A description for the model group.</p>
    pub fn set_model_package_group_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_group_description(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of key value pairs associated with the model group. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of key value pairs associated with the model group. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateModelQualityJobDefinition`.
///
/// <p>Creates a definition for a job that monitors model quality and drift. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelQualityJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_model_quality_job_definition_input::Builder,
}
impl CreateModelQualityJobDefinition {
    /// Creates a new `CreateModelQualityJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateModelQualityJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateModelQualityJobDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateModelQualityJobDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateModelQualityJobDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the monitoring job definition.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the monitoring job definition.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
    /// <p>Specifies the constraints and baselines for the monitoring job.</p>
    pub fn model_quality_baseline_config(
        mut self,
        input: crate::model::ModelQualityBaselineConfig,
    ) -> Self {
        self.inner = self.inner.model_quality_baseline_config(input);
        self
    }
    /// <p>Specifies the constraints and baselines for the monitoring job.</p>
    pub fn set_model_quality_baseline_config(
        mut self,
        input: std::option::Option<crate::model::ModelQualityBaselineConfig>,
    ) -> Self {
        self.inner = self.inner.set_model_quality_baseline_config(input);
        self
    }
    /// <p>The container that runs the monitoring job.</p>
    pub fn model_quality_app_specification(
        mut self,
        input: crate::model::ModelQualityAppSpecification,
    ) -> Self {
        self.inner = self.inner.model_quality_app_specification(input);
        self
    }
    /// <p>The container that runs the monitoring job.</p>
    pub fn set_model_quality_app_specification(
        mut self,
        input: std::option::Option<crate::model::ModelQualityAppSpecification>,
    ) -> Self {
        self.inner = self.inner.set_model_quality_app_specification(input);
        self
    }
    /// <p>A list of the inputs that are monitored. Currently endpoints are supported.</p>
    pub fn model_quality_job_input(mut self, input: crate::model::ModelQualityJobInput) -> Self {
        self.inner = self.inner.model_quality_job_input(input);
        self
    }
    /// <p>A list of the inputs that are monitored. Currently endpoints are supported.</p>
    pub fn set_model_quality_job_input(
        mut self,
        input: std::option::Option<crate::model::ModelQualityJobInput>,
    ) -> Self {
        self.inner = self.inner.set_model_quality_job_input(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn model_quality_job_output_config(
        mut self,
        input: crate::model::MonitoringOutputConfig,
    ) -> Self {
        self.inner = self.inner.model_quality_job_output_config(input);
        self
    }
    /// <p>The output configuration for monitoring jobs.</p>
    pub fn set_model_quality_job_output_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_model_quality_job_output_config(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn job_resources(mut self, input: crate::model::MonitoringResources) -> Self {
        self.inner = self.inner.job_resources(input);
        self
    }
    /// <p>Identifies the resources to deploy for a monitoring job.</p>
    pub fn set_job_resources(
        mut self,
        input: std::option::Option<crate::model::MonitoringResources>,
    ) -> Self {
        self.inner = self.inner.set_job_resources(input);
        self
    }
    /// <p>Specifies the network configuration for the monitoring job.</p>
    pub fn network_config(mut self, input: crate::model::MonitoringNetworkConfig) -> Self {
        self.inner = self.inner.network_config(input);
        self
    }
    /// <p>Specifies the network configuration for the monitoring job.</p>
    pub fn set_network_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringNetworkConfig>,
    ) -> Self {
        self.inner = self.inner.set_network_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn stopping_condition(mut self, input: crate::model::MonitoringStoppingCondition) -> Self {
        self.inner = self.inner.stopping_condition(input);
        self
    }
    /// <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::model::MonitoringStoppingCondition>,
    ) -> Self {
        self.inner = self.inner.set_stopping_condition(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateMonitoringSchedule`.
///
/// <p>Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data captured for an Amazon SageMaker Endoint.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateMonitoringSchedule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_monitoring_schedule_input::Builder,
}
impl CreateMonitoringSchedule {
    /// Creates a new `CreateMonitoringSchedule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateMonitoringSchedule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateMonitoringScheduleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateMonitoringScheduleOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateMonitoringScheduleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
    /// <p>The configuration object that specifies the monitoring schedule and defines the monitoring job.</p>
    pub fn monitoring_schedule_config(
        mut self,
        input: crate::model::MonitoringScheduleConfig,
    ) -> Self {
        self.inner = self.inner.monitoring_schedule_config(input);
        self
    }
    /// <p>The configuration object that specifies the monitoring schedule and defines the monitoring job.</p>
    pub fn set_monitoring_schedule_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringScheduleConfig>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_config(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href=" https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href=" https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateNotebookInstance`.
///
/// <p>Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook. </p>
/// <p>In a <code>CreateNotebookInstance</code> request, specify the type of ML compute instance that you want to run. SageMaker launches the instance, installs common libraries that you can use to explore datasets for model training, and attaches an ML storage volume to the notebook instance. </p>
/// <p>SageMaker also provides a set of example notebooks. Each notebook demonstrates how to use SageMaker with a specific algorithm or with a machine learning framework. </p>
/// <p>After receiving the request, SageMaker does the following:</p>
/// <ol>
/// <li> <p>Creates a network interface in the SageMaker VPC.</p> </li>
/// <li> <p>(Option) If you specified <code>SubnetId</code>, SageMaker creates a network interface in your own VPC, which is inferred from the subnet ID that you provide in the input. When creating this network interface, SageMaker attaches the security group that you specified in the request to the network interface that it creates in your VPC.</p> </li>
/// <li> <p>Launches an EC2 instance of the type specified in the request in the SageMaker VPC. If you specified <code>SubnetId</code> of your VPC, SageMaker specifies both network interfaces when launching this instance. This enables inbound traffic from your own VPC to the notebook instance, assuming that the security groups allow it.</p> </li>
/// </ol>
/// <p>After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN). You can't change the name of a notebook instance after you create it.</p>
/// <p>After SageMaker creates the notebook instance, you can connect to the Jupyter server and work in Jupyter notebooks. For example, you can write code to explore a dataset that you can use for model training, train a model, host models by creating SageMaker endpoints, and validate hosted models. </p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateNotebookInstance {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_notebook_instance_input::Builder,
}
impl CreateNotebookInstance {
    /// Creates a new `CreateNotebookInstance`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateNotebookInstance,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateNotebookInstanceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateNotebookInstanceOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateNotebookInstanceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the new notebook instance.</p>
    pub fn notebook_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_name(input.into());
        self
    }
    /// <p>The name of the new notebook instance.</p>
    pub fn set_notebook_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_notebook_instance_name(input);
        self
    }
    /// <p>The type of ML compute instance to launch for the notebook instance.</p>
    pub fn instance_type(mut self, input: crate::model::InstanceType) -> Self {
        self.inner = self.inner.instance_type(input);
        self
    }
    /// <p>The type of ML compute instance to launch for the notebook instance.</p>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::model::InstanceType>,
    ) -> Self {
        self.inner = self.inner.set_instance_type(input);
        self
    }
    /// <p>The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance. </p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subnet_id(input.into());
        self
    }
    /// <p>The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance. </p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_subnet_id(input);
        self
    }
    /// Appends an item to `SecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet. </p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.security_group_ids(input.into());
        self
    }
    /// <p>The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet. </p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_security_group_ids(input);
        self
    }
    /// <p> When you send any requests to Amazon Web Services resources from the notebook instance, SageMaker assumes this role to perform tasks on your behalf. You must grant this role necessary permissions so SageMaker can perform these tasks. The policy must allow the SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p> <note>
    /// <p>To be able to pass this role to SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    /// </note>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p> When you send any requests to Amazon Web Services resources from the notebook instance, SageMaker assumes this role to perform tasks on your behalf. You must grant this role necessary permissions so SageMaker can perform these tasks. The policy must allow the SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p> <note>
    /// <p>To be able to pass this role to SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    /// </note>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to your notebook instance. The KMS key you provide must be enabled. For information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html">Enabling and Disabling Keys</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to your notebook instance. The KMS key you provide must be enabled. For information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html">Enabling and Disabling Keys</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    pub fn lifecycle_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    pub fn set_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_lifecycle_config_name(input);
        self
    }
    /// <p>Sets whether SageMaker provides internet access to the notebook instance. If you set this to <code>Disabled</code> this notebook instance is able to access resources only in your VPC, and is not be able to connect to SageMaker training and endpoint services unless you configure a NAT Gateway in your VPC.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook Instances Are Internet-Enabled by Default</a>. You can set the value of this parameter to <code>Disabled</code> only if you set a value for the <code>SubnetId</code> parameter.</p>
    pub fn direct_internet_access(mut self, input: crate::model::DirectInternetAccess) -> Self {
        self.inner = self.inner.direct_internet_access(input);
        self
    }
    /// <p>Sets whether SageMaker provides internet access to the notebook instance. If you set this to <code>Disabled</code> this notebook instance is able to access resources only in your VPC, and is not be able to connect to SageMaker training and endpoint services unless you configure a NAT Gateway in your VPC.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook Instances Are Internet-Enabled by Default</a>. You can set the value of this parameter to <code>Disabled</code> only if you set a value for the <code>SubnetId</code> parameter.</p>
    pub fn set_direct_internet_access(
        mut self,
        input: std::option::Option<crate::model::DirectInternetAccess>,
    ) -> Self {
        self.inner = self.inner.set_direct_internet_access(input);
        self
    }
    /// <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB.</p>
    pub fn volume_size_in_gb(mut self, input: i32) -> Self {
        self.inner = self.inner.volume_size_in_gb(input);
        self
    }
    /// <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB.</p>
    pub fn set_volume_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_volume_size_in_gb(input);
        self
    }
    /// Appends an item to `AcceleratorTypes`.
    ///
    /// To override the contents of this collection use [`set_accelerator_types`](Self::set_accelerator_types).
    ///
    /// <p>A list of Elastic Inference (EI) instance types to associate with this notebook instance. Currently, only one instance type can be associated with a notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon SageMaker</a>.</p>
    pub fn accelerator_types(
        mut self,
        input: crate::model::NotebookInstanceAcceleratorType,
    ) -> Self {
        self.inner = self.inner.accelerator_types(input);
        self
    }
    /// <p>A list of Elastic Inference (EI) instance types to associate with this notebook instance. Currently, only one instance type can be associated with a notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon SageMaker</a>.</p>
    pub fn set_accelerator_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::NotebookInstanceAcceleratorType>>,
    ) -> Self {
        self.inner = self.inner.set_accelerator_types(input);
        self
    }
    /// <p>A Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn default_code_repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.default_code_repository(input.into());
        self
    }
    /// <p>A Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn set_default_code_repository(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_default_code_repository(input);
        self
    }
    /// Appends an item to `AdditionalCodeRepositories`.
    ///
    /// To override the contents of this collection use [`set_additional_code_repositories`](Self::set_additional_code_repositories).
    ///
    /// <p>An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn additional_code_repositories(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.additional_code_repositories(input.into());
        self
    }
    /// <p>An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn set_additional_code_repositories(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_additional_code_repositories(input);
        self
    }
    /// <p>Whether root access is enabled or disabled for users of the notebook instance. The default value is <code>Enabled</code>.</p> <note>
    /// <p>Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.</p>
    /// </note>
    pub fn root_access(mut self, input: crate::model::RootAccess) -> Self {
        self.inner = self.inner.root_access(input);
        self
    }
    /// <p>Whether root access is enabled or disabled for users of the notebook instance. The default value is <code>Enabled</code>.</p> <note>
    /// <p>Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.</p>
    /// </note>
    pub fn set_root_access(mut self, input: std::option::Option<crate::model::RootAccess>) -> Self {
        self.inner = self.inner.set_root_access(input);
        self
    }
    /// <p>The platform identifier of the notebook instance runtime environment.</p>
    pub fn platform_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_identifier(input.into());
        self
    }
    /// <p>The platform identifier of the notebook instance runtime environment.</p>
    pub fn set_platform_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_platform_identifier(input);
        self
    }
    /// <p>Information on the IMDS configuration of the notebook instance</p>
    pub fn instance_metadata_service_configuration(
        mut self,
        input: crate::model::InstanceMetadataServiceConfiguration,
    ) -> Self {
        self.inner = self.inner.instance_metadata_service_configuration(input);
        self
    }
    /// <p>Information on the IMDS configuration of the notebook instance</p>
    pub fn set_instance_metadata_service_configuration(
        mut self,
        input: std::option::Option<crate::model::InstanceMetadataServiceConfiguration>,
    ) -> Self {
        self.inner = self
            .inner
            .set_instance_metadata_service_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateNotebookInstanceLifecycleConfig`.
///
/// <p>Creates a lifecycle configuration that you can associate with a notebook instance. A <i>lifecycle configuration</i> is a collection of shell scripts that run when you create or start a notebook instance.</p>
/// <p>Each lifecycle configuration script has a limit of 16384 characters.</p>
/// <p>The value of the <code>$PATH</code> environment variable that is available to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p>
/// <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p>
/// <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.</p>
/// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateNotebookInstanceLifecycleConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_notebook_instance_lifecycle_config_input::Builder,
}
impl CreateNotebookInstanceLifecycleConfig {
    /// Creates a new `CreateNotebookInstanceLifecycleConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateNotebookInstanceLifecycleConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateNotebookInstanceLifecycleConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateNotebookInstanceLifecycleConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateNotebookInstanceLifecycleConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the lifecycle configuration.</p>
    pub fn notebook_instance_lifecycle_config_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .notebook_instance_lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of the lifecycle configuration.</p>
    pub fn set_notebook_instance_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .set_notebook_instance_lifecycle_config_name(input);
        self
    }
    /// Appends an item to `OnCreate`.
    ///
    /// To override the contents of this collection use [`set_on_create`](Self::set_on_create).
    ///
    /// <p>A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn on_create(mut self, input: crate::model::NotebookInstanceLifecycleHook) -> Self {
        self.inner = self.inner.on_create(input);
        self
    }
    /// <p>A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn set_on_create(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::NotebookInstanceLifecycleHook>>,
    ) -> Self {
        self.inner = self.inner.set_on_create(input);
        self
    }
    /// Appends an item to `OnStart`.
    ///
    /// To override the contents of this collection use [`set_on_start`](Self::set_on_start).
    ///
    /// <p>A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn on_start(mut self, input: crate::model::NotebookInstanceLifecycleHook) -> Self {
        self.inner = self.inner.on_start(input);
        self
    }
    /// <p>A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn set_on_start(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::NotebookInstanceLifecycleHook>>,
    ) -> Self {
        self.inner = self.inner.set_on_start(input);
        self
    }
}

/// Fluent builder constructing a request to `CreatePipeline`.
///
/// <p>Creates a pipeline using a JSON pipeline definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePipeline {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_pipeline_input::Builder,
}
impl CreatePipeline {
    /// Creates a new `CreatePipeline`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreatePipeline,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreatePipelineError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreatePipelineOutput,
        aws_smithy_http::result::SdkError<crate::error::CreatePipelineError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the pipeline.</p>
    pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p>The name of the pipeline.</p>
    pub fn set_pipeline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
    /// <p>The display name of the pipeline.</p>
    pub fn pipeline_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_display_name(input.into());
        self
    }
    /// <p>The display name of the pipeline.</p>
    pub fn set_pipeline_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_display_name(input);
        self
    }
    /// <p>The JSON pipeline definition of the pipeline.</p>
    pub fn pipeline_definition(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_definition(input.into());
        self
    }
    /// <p>The JSON pipeline definition of the pipeline.</p>
    pub fn set_pipeline_definition(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_definition(input);
        self
    }
    /// <p>The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.</p>
    pub fn pipeline_definition_s3_location(
        mut self,
        input: crate::model::PipelineDefinitionS3Location,
    ) -> Self {
        self.inner = self.inner.pipeline_definition_s3_location(input);
        self
    }
    /// <p>The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.</p>
    pub fn set_pipeline_definition_s3_location(
        mut self,
        input: std::option::Option<crate::model::PipelineDefinitionS3Location>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_definition_s3_location(input);
        self
    }
    /// <p>A description of the pipeline.</p>
    pub fn pipeline_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_description(input.into());
        self
    }
    /// <p>A description of the pipeline.</p>
    pub fn set_pipeline_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_description(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the created pipeline.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to apply to the created pipeline.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default.</p>
    pub fn parallelism_configuration(
        mut self,
        input: crate::model::ParallelismConfiguration,
    ) -> Self {
        self.inner = self.inner.parallelism_configuration(input);
        self
    }
    /// <p>This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default.</p>
    pub fn set_parallelism_configuration(
        mut self,
        input: std::option::Option<crate::model::ParallelismConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_parallelism_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `CreatePresignedDomainUrl`.
///
/// <p>Creates a URL for a specified UserProfile in a Domain. When accessed in a web browser, the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume. This operation can only be called when the authentication mode equals IAM. </p>
/// <p>The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app.</p>
/// <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect to SageMaker Studio Through an Interface VPC Endpoint</a> .</p> <note>
/// <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePresignedDomainUrl {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_presigned_domain_url_input::Builder,
}
impl CreatePresignedDomainUrl {
    /// Creates a new `CreatePresignedDomainUrl`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreatePresignedDomainUrl,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreatePresignedDomainUrlError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreatePresignedDomainUrlOutput,
        aws_smithy_http::result::SdkError<crate::error::CreatePresignedDomainUrlError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The name of the UserProfile to sign-in as.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>The name of the UserProfile to sign-in as.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
    /// <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    pub fn session_expiration_duration_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.session_expiration_duration_in_seconds(input);
        self
    }
    /// <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    pub fn set_session_expiration_duration_in_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_session_expiration_duration_in_seconds(input);
        self
    }
    /// <p>The number of seconds until the pre-signed URL expires. This value defaults to 300.</p>
    pub fn expires_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.expires_in_seconds(input);
        self
    }
    /// <p>The number of seconds until the pre-signed URL expires. This value defaults to 300.</p>
    pub fn set_expires_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_expires_in_seconds(input);
        self
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_space_name(input);
        self
    }
}

/// Fluent builder constructing a request to `CreatePresignedNotebookInstanceUrl`.
///
/// <p>Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose <code>Open</code> next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page.</p>
/// <p> The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance.</p>
/// <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the <code>aws:SourceIP</code> condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit Access to a Notebook Instance by IP Address</a>.</p> <note>
/// <p>The URL that you get from a call to <code>CreatePresignedNotebookInstanceUrl</code> is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePresignedNotebookInstanceUrl {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_presigned_notebook_instance_url_input::Builder,
}
impl CreatePresignedNotebookInstanceUrl {
    /// Creates a new `CreatePresignedNotebookInstanceUrl`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreatePresignedNotebookInstanceUrl,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreatePresignedNotebookInstanceUrlError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreatePresignedNotebookInstanceUrlOutput,
        aws_smithy_http::result::SdkError<crate::error::CreatePresignedNotebookInstanceUrlError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the notebook instance.</p>
    pub fn notebook_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_name(input.into());
        self
    }
    /// <p>The name of the notebook instance.</p>
    pub fn set_notebook_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_notebook_instance_name(input);
        self
    }
    /// <p>The duration of the session, in seconds. The default is 12 hours.</p>
    pub fn session_expiration_duration_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.session_expiration_duration_in_seconds(input);
        self
    }
    /// <p>The duration of the session, in seconds. The default is 12 hours.</p>
    pub fn set_session_expiration_duration_in_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_session_expiration_duration_in_seconds(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateProcessingJob`.
///
/// <p>Creates a processing job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateProcessingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_processing_job_input::Builder,
}
impl CreateProcessingJob {
    /// Creates a new `CreateProcessingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateProcessingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateProcessingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateProcessingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateProcessingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `ProcessingInputs`.
    ///
    /// To override the contents of this collection use [`set_processing_inputs`](Self::set_processing_inputs).
    ///
    /// <p>An array of inputs configuring the data to download into the processing container.</p>
    pub fn processing_inputs(mut self, input: crate::model::ProcessingInput) -> Self {
        self.inner = self.inner.processing_inputs(input);
        self
    }
    /// <p>An array of inputs configuring the data to download into the processing container.</p>
    pub fn set_processing_inputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ProcessingInput>>,
    ) -> Self {
        self.inner = self.inner.set_processing_inputs(input);
        self
    }
    /// <p>Output configuration for the processing job.</p>
    pub fn processing_output_config(mut self, input: crate::model::ProcessingOutputConfig) -> Self {
        self.inner = self.inner.processing_output_config(input);
        self
    }
    /// <p>Output configuration for the processing job.</p>
    pub fn set_processing_output_config(
        mut self,
        input: std::option::Option<crate::model::ProcessingOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_processing_output_config(input);
        self
    }
    /// <p> The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn processing_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.processing_job_name(input.into());
        self
    }
    /// <p> The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_processing_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_processing_job_name(input);
        self
    }
    /// <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.</p>
    pub fn processing_resources(mut self, input: crate::model::ProcessingResources) -> Self {
        self.inner = self.inner.processing_resources(input);
        self
    }
    /// <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.</p>
    pub fn set_processing_resources(
        mut self,
        input: std::option::Option<crate::model::ProcessingResources>,
    ) -> Self {
        self.inner = self.inner.set_processing_resources(input);
        self
    }
    /// <p>The time limit for how long the processing job is allowed to run.</p>
    pub fn stopping_condition(mut self, input: crate::model::ProcessingStoppingCondition) -> Self {
        self.inner = self.inner.stopping_condition(input);
        self
    }
    /// <p>The time limit for how long the processing job is allowed to run.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::model::ProcessingStoppingCondition>,
    ) -> Self {
        self.inner = self.inner.set_stopping_condition(input);
        self
    }
    /// <p>Configures the processing job to run a specified Docker container image.</p>
    pub fn app_specification(mut self, input: crate::model::AppSpecification) -> Self {
        self.inner = self.inner.app_specification(input);
        self
    }
    /// <p>Configures the processing job to run a specified Docker container image.</p>
    pub fn set_app_specification(
        mut self,
        input: std::option::Option<crate::model::AppSpecification>,
    ) -> Self {
        self.inner = self.inner.set_app_specification(input);
        self
    }
    /// Adds a key-value pair to `Environment`.
    ///
    /// To override the contents of this collection use [`set_environment`](Self::set_environment).
    ///
    /// <p>The environment variables to set in the Docker container. Up to 100 key and values entries in the map are supported.</p>
    pub fn environment(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.environment(k.into(), v.into());
        self
    }
    /// <p>The environment variables to set in the Docker container. Up to 100 key and values entries in the map are supported.</p>
    pub fn set_environment(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_environment(input);
        self
    }
    /// <p>Networking options for a processing job, such as whether to allow inbound and outbound network calls to and from processing containers, and the VPC subnets and security groups to use for VPC-enabled processing jobs.</p>
    pub fn network_config(mut self, input: crate::model::NetworkConfig) -> Self {
        self.inner = self.inner.network_config(input);
        self
    }
    /// <p>Networking options for a processing job, such as whether to allow inbound and outbound network calls to and from processing containers, and the VPC subnets and security groups to use for VPC-enabled processing jobs.</p>
    pub fn set_network_config(
        mut self,
        input: std::option::Option<crate::model::NetworkConfig>,
    ) -> Self {
        self.inner = self.inner.set_network_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn experiment_config(mut self, input: crate::model::ExperimentConfig) -> Self {
        self.inner = self.inner.experiment_config(input);
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn set_experiment_config(
        mut self,
        input: std::option::Option<crate::model::ExperimentConfig>,
    ) -> Self {
        self.inner = self.inner.set_experiment_config(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateProject`.
///
/// <p>Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateProject {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_project_input::Builder,
}
impl CreateProject {
    /// Creates a new `CreateProject`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateProject,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateProjectError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateProjectOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateProjectError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the project.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.project_name(input.into());
        self
    }
    /// <p>The name of the project.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_project_name(input);
        self
    }
    /// <p>A description for the project.</p>
    pub fn project_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.project_description(input.into());
        self
    }
    /// <p>A description for the project.</p>
    pub fn set_project_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_project_description(input);
        self
    }
    /// <p>The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.</p>
    pub fn service_catalog_provisioning_details(
        mut self,
        input: crate::model::ServiceCatalogProvisioningDetails,
    ) -> Self {
        self.inner = self.inner.service_catalog_provisioning_details(input);
        self
    }
    /// <p>The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.</p>
    pub fn set_service_catalog_provisioning_details(
        mut self,
        input: std::option::Option<crate::model::ServiceCatalogProvisioningDetails>,
    ) -> Self {
        self.inner = self.inner.set_service_catalog_provisioning_details(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs that you want to use to organize and track your Amazon Web Services resource costs. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs that you want to use to organize and track your Amazon Web Services resource costs. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateSpace`.
///
/// <p>Creates a space used for real time collaboration in a Domain.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSpace {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_space_input::Builder,
}
impl CreateSpace {
    /// Creates a new `CreateSpace`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateSpace,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateSpaceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateSpaceOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateSpaceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_space_name(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to associated with the space. Each tag consists of a key and an optional value. Tag keys must be unique for each resource. Tags are searchable using the <code>Search</code> API.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Tags to associated with the space. Each tag consists of a key and an optional value. Tag keys must be unique for each resource. Tags are searchable using the <code>Search</code> API.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A collection of space settings.</p>
    pub fn space_settings(mut self, input: crate::model::SpaceSettings) -> Self {
        self.inner = self.inner.space_settings(input);
        self
    }
    /// <p>A collection of space settings.</p>
    pub fn set_space_settings(
        mut self,
        input: std::option::Option<crate::model::SpaceSettings>,
    ) -> Self {
        self.inner = self.inner.set_space_settings(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateStudioLifecycleConfig`.
///
/// <p>Creates a new Studio Lifecycle Configuration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateStudioLifecycleConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_studio_lifecycle_config_input::Builder,
}
impl CreateStudioLifecycleConfig {
    /// Creates a new `CreateStudioLifecycleConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateStudioLifecycleConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateStudioLifecycleConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateStudioLifecycleConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateStudioLifecycleConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Studio Lifecycle Configuration to create.</p>
    pub fn studio_lifecycle_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.studio_lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of the Studio Lifecycle Configuration to create.</p>
    pub fn set_studio_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_studio_lifecycle_config_name(input);
        self
    }
    /// <p>The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.</p>
    pub fn studio_lifecycle_config_content(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.studio_lifecycle_config_content(input.into());
        self
    }
    /// <p>The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.</p>
    pub fn set_studio_lifecycle_config_content(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_studio_lifecycle_config_content(input);
        self
    }
    /// <p>The App type that the Lifecycle Configuration is attached to.</p>
    pub fn studio_lifecycle_config_app_type(
        mut self,
        input: crate::model::StudioLifecycleConfigAppType,
    ) -> Self {
        self.inner = self.inner.studio_lifecycle_config_app_type(input);
        self
    }
    /// <p>The App type that the Lifecycle Configuration is attached to.</p>
    pub fn set_studio_lifecycle_config_app_type(
        mut self,
        input: std::option::Option<crate::model::StudioLifecycleConfigAppType>,
    ) -> Self {
        self.inner = self.inner.set_studio_lifecycle_config_app_type(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API. </p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateTrainingJob`.
///
/// <p>Starts a model training job. After training completes, SageMaker saves the resulting model artifacts to an Amazon S3 location that you specify. </p>
/// <p>If you choose to host your model using SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts in a machine learning service other than SageMaker, provided that you know how to use them for inference. </p>
/// <p>In the request body, you provide the following: </p>
/// <ul>
/// <li> <p> <code>AlgorithmSpecification</code> - Identifies the training algorithm to use. </p> </li>
/// <li> <p> <code>HyperParameters</code> - Specify these algorithm-specific parameters to enable the estimation of model parameters during training. Hyperparameters can be tuned to optimize this learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p> <important>
/// <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p>
/// </important> </li>
/// <li> <p> <code>InputDataConfig</code> - Describes the input required by the training job and the Amazon S3, EFS, or FSx location where it is stored.</p> </li>
/// <li> <p> <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you want SageMaker to save the results of model training. </p> </li>
/// <li> <p> <code>ResourceConfig</code> - Identifies the resources, ML compute instances, and ML storage volumes to deploy for model training. In distributed training, you specify more than one instance. </p> </li>
/// <li> <p> <code>EnableManagedSpotTraining</code> - Optimize the cost of training machine learning models by up to 80% by using Amazon EC2 Spot instances. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot Training</a>. </p> </li>
/// <li> <p> <code>RoleArn</code> - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during model training. You must grant this role the necessary permissions so that SageMaker can successfully complete model training. </p> </li>
/// <li> <p> <code>StoppingCondition</code> - To help cap training costs, use <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot training job has to complete. </p> </li>
/// <li> <p> <code>Environment</code> - The environment variables to set in the Docker container.</p> </li>
/// <li> <p> <code>RetryStrategy</code> - The number of times to retry the job when the job fails due to an <code>InternalServerError</code>.</p> </li>
/// </ul>
/// <p> For more information about SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrainingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_training_job_input::Builder,
}
impl CreateTrainingJob {
    /// Creates a new `CreateTrainingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateTrainingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateTrainingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateTrainingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateTrainingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the training job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. </p>
    pub fn training_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.training_job_name(input.into());
        self
    }
    /// <p>The name of the training job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. </p>
    pub fn set_training_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_training_job_name(input);
        self
    }
    /// Adds a key-value pair to `HyperParameters`.
    ///
    /// To override the contents of this collection use [`set_hyper_parameters`](Self::set_hyper_parameters).
    ///
    /// <p>Algorithm-specific parameters that influence the quality of the model. You set hyperparameters before you start the learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p>
    /// <p>You can specify a maximum of 100 hyperparameters. Each hyperparameter is a key-value pair. Each key and value is limited to 256 characters, as specified by the <code>Length Constraint</code>. </p> <important>
    /// <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p>
    /// </important>
    pub fn hyper_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.hyper_parameters(k.into(), v.into());
        self
    }
    /// <p>Algorithm-specific parameters that influence the quality of the model. You set hyperparameters before you start the learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p>
    /// <p>You can specify a maximum of 100 hyperparameters. Each hyperparameter is a key-value pair. Each key and value is limited to 256 characters, as specified by the <code>Length Constraint</code>. </p> <important>
    /// <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p>
    /// </important>
    pub fn set_hyper_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_hyper_parameters(input);
        self
    }
    /// <p>The registry path of the Docker image that contains the training algorithm and algorithm-specific metadata, including the input mode. For more information about algorithms provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. For information about providing your own algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon SageMaker</a>. </p>
    pub fn algorithm_specification(mut self, input: crate::model::AlgorithmSpecification) -> Self {
        self.inner = self.inner.algorithm_specification(input);
        self
    }
    /// <p>The registry path of the Docker image that contains the training algorithm and algorithm-specific metadata, including the input mode. For more information about algorithms provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. For information about providing your own algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon SageMaker</a>. </p>
    pub fn set_algorithm_specification(
        mut self,
        input: std::option::Option<crate::model::AlgorithmSpecification>,
    ) -> Self {
        self.inner = self.inner.set_algorithm_specification(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that SageMaker can assume to perform tasks on your behalf. </p>
    /// <p>During model training, SageMaker needs your permission to read input data from an S3 bucket, download a Docker image that contains training code, write model artifacts to an S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant permissions for all of these tasks to an IAM role. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p> <note>
    /// <p>To be able to pass this role to SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    /// </note>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that SageMaker can assume to perform tasks on your behalf. </p>
    /// <p>During model training, SageMaker needs your permission to read input data from an S3 bucket, download a Docker image that contains training code, write model artifacts to an S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant permissions for all of these tasks to an IAM role. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p> <note>
    /// <p>To be able to pass this role to SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    /// </note>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `InputDataConfig`.
    ///
    /// To override the contents of this collection use [`set_input_data_config`](Self::set_input_data_config).
    ///
    /// <p>An array of <code>Channel</code> objects. Each channel is a named input source. <code>InputDataConfig</code> describes the input data and its location. </p>
    /// <p>Algorithms can accept input data from one or more channels. For example, an algorithm might have two channels of input data, <code>training_data</code> and <code>validation_data</code>. The configuration for each channel provides the S3, EFS, or FSx location where the input data is stored. It also provides information about the stored data: the MIME type, compression method, and whether the data is wrapped in RecordIO format. </p>
    /// <p>Depending on the input mode that the algorithm supports, SageMaker either copies input data files from an S3 bucket to a local directory in the Docker container, or makes it available as input streams. For example, if you specify an EFS location, input data files are available as input streams. They do not need to be downloaded.</p>
    pub fn input_data_config(mut self, input: crate::model::Channel) -> Self {
        self.inner = self.inner.input_data_config(input);
        self
    }
    /// <p>An array of <code>Channel</code> objects. Each channel is a named input source. <code>InputDataConfig</code> describes the input data and its location. </p>
    /// <p>Algorithms can accept input data from one or more channels. For example, an algorithm might have two channels of input data, <code>training_data</code> and <code>validation_data</code>. The configuration for each channel provides the S3, EFS, or FSx location where the input data is stored. It also provides information about the stored data: the MIME type, compression method, and whether the data is wrapped in RecordIO format. </p>
    /// <p>Depending on the input mode that the algorithm supports, SageMaker either copies input data files from an S3 bucket to a local directory in the Docker container, or makes it available as input streams. For example, if you specify an EFS location, input data files are available as input streams. They do not need to be downloaded.</p>
    pub fn set_input_data_config(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Channel>>,
    ) -> Self {
        self.inner = self.inner.set_input_data_config(input);
        self
    }
    /// <p>Specifies the path to the S3 location where you want to store model artifacts. SageMaker creates subfolders for the artifacts. </p>
    pub fn output_data_config(mut self, input: crate::model::OutputDataConfig) -> Self {
        self.inner = self.inner.output_data_config(input);
        self
    }
    /// <p>Specifies the path to the S3 location where you want to store model artifacts. SageMaker creates subfolders for the artifacts. </p>
    pub fn set_output_data_config(
        mut self,
        input: std::option::Option<crate::model::OutputDataConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_data_config(input);
        self
    }
    /// <p>The resources, including the ML compute instances and ML storage volumes, to use for model training. </p>
    /// <p>ML storage volumes store model artifacts and incremental states. Training algorithms might also use ML storage volumes for scratch space. If you want SageMaker to use the ML storage volume to store the training data, choose <code>File</code> as the <code>TrainingInputMode</code> in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.</p>
    pub fn resource_config(mut self, input: crate::model::ResourceConfig) -> Self {
        self.inner = self.inner.resource_config(input);
        self
    }
    /// <p>The resources, including the ML compute instances and ML storage volumes, to use for model training. </p>
    /// <p>ML storage volumes store model artifacts and incremental states. Training algorithms might also use ML storage volumes for scratch space. If you want SageMaker to use the ML storage volume to store the training data, choose <code>File</code> as the <code>TrainingInputMode</code> in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.</p>
    pub fn set_resource_config(
        mut self,
        input: std::option::Option<crate::model::ResourceConfig>,
    ) -> Self {
        self.inner = self.inner.set_resource_config(input);
        self
    }
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your training job to connect to. Control access to and from your training container by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    pub fn vpc_config(mut self, input: crate::model::VpcConfig) -> Self {
        self.inner = self.inner.vpc_config(input);
        self
    }
    /// <p>A <code>VpcConfig</code> object that specifies the VPC that you want your training job to connect to. Control access to and from your training container by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    pub fn set_vpc_config(mut self, input: std::option::Option<crate::model::VpcConfig>) -> Self {
        self.inner = self.inner.set_vpc_config(input);
        self
    }
    /// <p>Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs.</p>
    /// <p>To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. </p>
    pub fn stopping_condition(mut self, input: crate::model::StoppingCondition) -> Self {
        self.inner = self.inner.stopping_condition(input);
        self
    }
    /// <p>Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs.</p>
    /// <p>To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. </p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::model::StoppingCondition>,
    ) -> Self {
        self.inner = self.inner.set_stopping_condition(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If you enable network isolation for training jobs that are configured to use a VPC, SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.</p>
    pub fn enable_network_isolation(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_network_isolation(input);
        self
    }
    /// <p>Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If you enable network isolation for training jobs that are configured to use a VPC, SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.</p>
    pub fn set_enable_network_isolation(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_network_isolation(input);
        self
    }
    /// <p>To encrypt all communications between ML compute instances in distributed training, choose <code>True</code>. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html">Protect Communications Between ML Compute Instances in a Distributed Training Job</a>.</p>
    pub fn enable_inter_container_traffic_encryption(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_inter_container_traffic_encryption(input);
        self
    }
    /// <p>To encrypt all communications between ML compute instances in distributed training, choose <code>True</code>. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html">Protect Communications Between ML Compute Instances in a Distributed Training Job</a>.</p>
    pub fn set_enable_inter_container_traffic_encryption(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self
            .inner
            .set_enable_inter_container_traffic_encryption(input);
        self
    }
    /// <p>To train models using managed spot training, choose <code>True</code>. Managed spot training provides a fully managed and scalable infrastructure for training machine learning models. this option is useful when training jobs can be interrupted and when there is flexibility when the training job is run. </p>
    /// <p>The complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be used as a starting point to train models incrementally. Amazon SageMaker provides metrics and logs in CloudWatch. They can be used to see when managed spot training jobs are running, interrupted, resumed, or completed. </p>
    pub fn enable_managed_spot_training(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_managed_spot_training(input);
        self
    }
    /// <p>To train models using managed spot training, choose <code>True</code>. Managed spot training provides a fully managed and scalable infrastructure for training machine learning models. this option is useful when training jobs can be interrupted and when there is flexibility when the training job is run. </p>
    /// <p>The complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be used as a starting point to train models incrementally. Amazon SageMaker provides metrics and logs in CloudWatch. They can be used to see when managed spot training jobs are running, interrupted, resumed, or completed. </p>
    pub fn set_enable_managed_spot_training(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_managed_spot_training(input);
        self
    }
    /// <p>Contains information about the output location for managed spot training checkpoint data.</p>
    pub fn checkpoint_config(mut self, input: crate::model::CheckpointConfig) -> Self {
        self.inner = self.inner.checkpoint_config(input);
        self
    }
    /// <p>Contains information about the output location for managed spot training checkpoint data.</p>
    pub fn set_checkpoint_config(
        mut self,
        input: std::option::Option<crate::model::CheckpointConfig>,
    ) -> Self {
        self.inner = self.inner.set_checkpoint_config(input);
        self
    }
    /// <p>Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
    pub fn debug_hook_config(mut self, input: crate::model::DebugHookConfig) -> Self {
        self.inner = self.inner.debug_hook_config(input);
        self
    }
    /// <p>Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
    pub fn set_debug_hook_config(
        mut self,
        input: std::option::Option<crate::model::DebugHookConfig>,
    ) -> Self {
        self.inner = self.inner.set_debug_hook_config(input);
        self
    }
    /// Appends an item to `DebugRuleConfigurations`.
    ///
    /// To override the contents of this collection use [`set_debug_rule_configurations`](Self::set_debug_rule_configurations).
    ///
    /// <p>Configuration information for Amazon SageMaker Debugger rules for debugging output tensors.</p>
    pub fn debug_rule_configurations(
        mut self,
        input: crate::model::DebugRuleConfiguration,
    ) -> Self {
        self.inner = self.inner.debug_rule_configurations(input);
        self
    }
    /// <p>Configuration information for Amazon SageMaker Debugger rules for debugging output tensors.</p>
    pub fn set_debug_rule_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::DebugRuleConfiguration>>,
    ) -> Self {
        self.inner = self.inner.set_debug_rule_configurations(input);
        self
    }
    /// <p>Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.</p>
    pub fn tensor_board_output_config(
        mut self,
        input: crate::model::TensorBoardOutputConfig,
    ) -> Self {
        self.inner = self.inner.tensor_board_output_config(input);
        self
    }
    /// <p>Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.</p>
    pub fn set_tensor_board_output_config(
        mut self,
        input: std::option::Option<crate::model::TensorBoardOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_tensor_board_output_config(input);
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn experiment_config(mut self, input: crate::model::ExperimentConfig) -> Self {
        self.inner = self.inner.experiment_config(input);
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn set_experiment_config(
        mut self,
        input: std::option::Option<crate::model::ExperimentConfig>,
    ) -> Self {
        self.inner = self.inner.set_experiment_config(input);
        self
    }
    /// <p>Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.</p>
    pub fn profiler_config(mut self, input: crate::model::ProfilerConfig) -> Self {
        self.inner = self.inner.profiler_config(input);
        self
    }
    /// <p>Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.</p>
    pub fn set_profiler_config(
        mut self,
        input: std::option::Option<crate::model::ProfilerConfig>,
    ) -> Self {
        self.inner = self.inner.set_profiler_config(input);
        self
    }
    /// Appends an item to `ProfilerRuleConfigurations`.
    ///
    /// To override the contents of this collection use [`set_profiler_rule_configurations`](Self::set_profiler_rule_configurations).
    ///
    /// <p>Configuration information for Amazon SageMaker Debugger rules for profiling system and framework metrics.</p>
    pub fn profiler_rule_configurations(
        mut self,
        input: crate::model::ProfilerRuleConfiguration,
    ) -> Self {
        self.inner = self.inner.profiler_rule_configurations(input);
        self
    }
    /// <p>Configuration information for Amazon SageMaker Debugger rules for profiling system and framework metrics.</p>
    pub fn set_profiler_rule_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ProfilerRuleConfiguration>>,
    ) -> Self {
        self.inner = self.inner.set_profiler_rule_configurations(input);
        self
    }
    /// Adds a key-value pair to `Environment`.
    ///
    /// To override the contents of this collection use [`set_environment`](Self::set_environment).
    ///
    /// <p>The environment variables to set in the Docker container.</p>
    pub fn environment(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.environment(k.into(), v.into());
        self
    }
    /// <p>The environment variables to set in the Docker container.</p>
    pub fn set_environment(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_environment(input);
        self
    }
    /// <p>The number of times to retry the job when the job fails due to an <code>InternalServerError</code>.</p>
    pub fn retry_strategy(mut self, input: crate::model::RetryStrategy) -> Self {
        self.inner = self.inner.retry_strategy(input);
        self
    }
    /// <p>The number of times to retry the job when the job fails due to an <code>InternalServerError</code>.</p>
    pub fn set_retry_strategy(
        mut self,
        input: std::option::Option<crate::model::RetryStrategy>,
    ) -> Self {
        self.inner = self.inner.set_retry_strategy(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateTransformJob`.
///
/// <p>Starts a transform job. A transform job uses a trained model to get inferences on a dataset and saves these results to an Amazon S3 location that you specify.</p>
/// <p>To perform batch transformations, you create a transform job and use the data that you have readily available.</p>
/// <p>In the request body, you provide the following:</p>
/// <ul>
/// <li> <p> <code>TransformJobName</code> - Identifies the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.</p> </li>
/// <li> <p> <code>ModelName</code> - Identifies the model to use. <code>ModelName</code> must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services account. For information on creating a model, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>.</p> </li>
/// <li> <p> <code>TransformInput</code> - Describes the dataset to be transformed and the Amazon S3 location where it is stored.</p> </li>
/// <li> <p> <code>TransformOutput</code> - Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.</p> </li>
/// <li> <p> <code>TransformResources</code> - Identifies the ML compute instances for the transform job.</p> </li>
/// </ul>
/// <p>For more information about how batch transformation works, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch Transform</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransformJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_transform_job_input::Builder,
}
impl CreateTransformJob {
    /// Creates a new `CreateTransformJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateTransformJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateTransformJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateTransformJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateTransformJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. </p>
    pub fn transform_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.transform_job_name(input.into());
        self
    }
    /// <p>The name of the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. </p>
    pub fn set_transform_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_transform_job_name(input);
        self
    }
    /// <p>The name of the model that you want to use for the transform job. <code>ModelName</code> must be the name of an existing Amazon SageMaker model within an Amazon Web Services Region in an Amazon Web Services account.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_name(input.into());
        self
    }
    /// <p>The name of the model that you want to use for the transform job. <code>ModelName</code> must be the name of an existing Amazon SageMaker model within an Amazon Web Services Region in an Amazon Web Services account.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_name(input);
        self
    }
    /// <p>The maximum number of parallel requests that can be sent to each instance in a transform job. If <code>MaxConcurrentTransforms</code> is set to <code>0</code> or left unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm. If the execution-parameters endpoint is not enabled, the default value is <code>1</code>. For more information on execution-parameters, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests">How Containers Serve Requests</a>. For built-in algorithms, you don't need to set a value for <code>MaxConcurrentTransforms</code>.</p>
    pub fn max_concurrent_transforms(mut self, input: i32) -> Self {
        self.inner = self.inner.max_concurrent_transforms(input);
        self
    }
    /// <p>The maximum number of parallel requests that can be sent to each instance in a transform job. If <code>MaxConcurrentTransforms</code> is set to <code>0</code> or left unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm. If the execution-parameters endpoint is not enabled, the default value is <code>1</code>. For more information on execution-parameters, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests">How Containers Serve Requests</a>. For built-in algorithms, you don't need to set a value for <code>MaxConcurrentTransforms</code>.</p>
    pub fn set_max_concurrent_transforms(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_concurrent_transforms(input);
        self
    }
    /// <p>Configures the timeout and maximum number of retries for processing a transform job invocation.</p>
    pub fn model_client_config(mut self, input: crate::model::ModelClientConfig) -> Self {
        self.inner = self.inner.model_client_config(input);
        self
    }
    /// <p>Configures the timeout and maximum number of retries for processing a transform job invocation.</p>
    pub fn set_model_client_config(
        mut self,
        input: std::option::Option<crate::model::ModelClientConfig>,
    ) -> Self {
        self.inner = self.inner.set_model_client_config(input);
        self
    }
    /// <p>The maximum allowed size of the payload, in MB. A <i>payload</i> is the data portion of a record (without metadata). The value in <code>MaxPayloadInMB</code> must be greater than, or equal to, the size of a single record. To estimate the size of a record in MB, divide the size of your dataset by the number of records. To ensure that the records fit within the maximum payload size, we recommend using a slightly larger value. The default value is <code>6</code> MB. </p>
    /// <p>The value of <code>MaxPayloadInMB</code> cannot be greater than 100 MB. If you specify the <code>MaxConcurrentTransforms</code> parameter, the value of <code>(MaxConcurrentTransforms * MaxPayloadInMB)</code> also cannot exceed 100 MB.</p>
    /// <p>For cases where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding, set the value to <code>0</code>. This feature works only in supported algorithms. Currently, Amazon SageMaker built-in algorithms do not support HTTP chunked encoding.</p>
    pub fn max_payload_in_mb(mut self, input: i32) -> Self {
        self.inner = self.inner.max_payload_in_mb(input);
        self
    }
    /// <p>The maximum allowed size of the payload, in MB. A <i>payload</i> is the data portion of a record (without metadata). The value in <code>MaxPayloadInMB</code> must be greater than, or equal to, the size of a single record. To estimate the size of a record in MB, divide the size of your dataset by the number of records. To ensure that the records fit within the maximum payload size, we recommend using a slightly larger value. The default value is <code>6</code> MB. </p>
    /// <p>The value of <code>MaxPayloadInMB</code> cannot be greater than 100 MB. If you specify the <code>MaxConcurrentTransforms</code> parameter, the value of <code>(MaxConcurrentTransforms * MaxPayloadInMB)</code> also cannot exceed 100 MB.</p>
    /// <p>For cases where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding, set the value to <code>0</code>. This feature works only in supported algorithms. Currently, Amazon SageMaker built-in algorithms do not support HTTP chunked encoding.</p>
    pub fn set_max_payload_in_mb(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_payload_in_mb(input);
        self
    }
    /// <p>Specifies the number of records to include in a mini-batch for an HTTP inference request. A <i>record</i> <i></i> is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record. </p>
    /// <p>To enable the batch strategy, you must set the <code>SplitType</code> property to <code>Line</code>, <code>RecordIO</code>, or <code>TFRecord</code>.</p>
    /// <p>To use only one record when making an HTTP invocation request to a container, set <code>BatchStrategy</code> to <code>SingleRecord</code> and <code>SplitType</code> to <code>Line</code>.</p>
    /// <p>To fit as many records in a mini-batch as can fit within the <code>MaxPayloadInMB</code> limit, set <code>BatchStrategy</code> to <code>MultiRecord</code> and <code>SplitType</code> to <code>Line</code>.</p>
    pub fn batch_strategy(mut self, input: crate::model::BatchStrategy) -> Self {
        self.inner = self.inner.batch_strategy(input);
        self
    }
    /// <p>Specifies the number of records to include in a mini-batch for an HTTP inference request. A <i>record</i> <i></i> is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record. </p>
    /// <p>To enable the batch strategy, you must set the <code>SplitType</code> property to <code>Line</code>, <code>RecordIO</code>, or <code>TFRecord</code>.</p>
    /// <p>To use only one record when making an HTTP invocation request to a container, set <code>BatchStrategy</code> to <code>SingleRecord</code> and <code>SplitType</code> to <code>Line</code>.</p>
    /// <p>To fit as many records in a mini-batch as can fit within the <code>MaxPayloadInMB</code> limit, set <code>BatchStrategy</code> to <code>MultiRecord</code> and <code>SplitType</code> to <code>Line</code>.</p>
    pub fn set_batch_strategy(
        mut self,
        input: std::option::Option<crate::model::BatchStrategy>,
    ) -> Self {
        self.inner = self.inner.set_batch_strategy(input);
        self
    }
    /// Adds a key-value pair to `Environment`.
    ///
    /// To override the contents of this collection use [`set_environment`](Self::set_environment).
    ///
    /// <p>The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.</p>
    pub fn environment(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.environment(k.into(), v.into());
        self
    }
    /// <p>The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.</p>
    pub fn set_environment(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_environment(input);
        self
    }
    /// <p>Describes the input source and the way the transform job consumes it.</p>
    pub fn transform_input(mut self, input: crate::model::TransformInput) -> Self {
        self.inner = self.inner.transform_input(input);
        self
    }
    /// <p>Describes the input source and the way the transform job consumes it.</p>
    pub fn set_transform_input(
        mut self,
        input: std::option::Option<crate::model::TransformInput>,
    ) -> Self {
        self.inner = self.inner.set_transform_input(input);
        self
    }
    /// <p>Describes the results of the transform job.</p>
    pub fn transform_output(mut self, input: crate::model::TransformOutput) -> Self {
        self.inner = self.inner.transform_output(input);
        self
    }
    /// <p>Describes the results of the transform job.</p>
    pub fn set_transform_output(
        mut self,
        input: std::option::Option<crate::model::TransformOutput>,
    ) -> Self {
        self.inner = self.inner.set_transform_output(input);
        self
    }
    /// <p>Configuration to control how SageMaker captures inference data.</p>
    pub fn data_capture_config(mut self, input: crate::model::BatchDataCaptureConfig) -> Self {
        self.inner = self.inner.data_capture_config(input);
        self
    }
    /// <p>Configuration to control how SageMaker captures inference data.</p>
    pub fn set_data_capture_config(
        mut self,
        input: std::option::Option<crate::model::BatchDataCaptureConfig>,
    ) -> Self {
        self.inner = self.inner.set_data_capture_config(input);
        self
    }
    /// <p>Describes the resources, including ML instance types and ML instance count, to use for the transform job.</p>
    pub fn transform_resources(mut self, input: crate::model::TransformResources) -> Self {
        self.inner = self.inner.transform_resources(input);
        self
    }
    /// <p>Describes the resources, including ML instance types and ML instance count, to use for the transform job.</p>
    pub fn set_transform_resources(
        mut self,
        input: std::option::Option<crate::model::TransformResources>,
    ) -> Self {
        self.inner = self.inner.set_transform_resources(input);
        self
    }
    /// <p>The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction Results with their Corresponding Input Records</a>.</p>
    pub fn data_processing(mut self, input: crate::model::DataProcessing) -> Self {
        self.inner = self.inner.data_processing(input);
        self
    }
    /// <p>The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction Results with their Corresponding Input Records</a>.</p>
    pub fn set_data_processing(
        mut self,
        input: std::option::Option<crate::model::DataProcessing>,
    ) -> Self {
        self.inner = self.inner.set_data_processing(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn experiment_config(mut self, input: crate::model::ExperimentConfig) -> Self {
        self.inner = self.inner.experiment_config(input);
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn set_experiment_config(
        mut self,
        input: std::option::Option<crate::model::ExperimentConfig>,
    ) -> Self {
        self.inner = self.inner.set_experiment_config(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateTrial`.
///
/// <p>Creates an SageMaker <i>trial</i>. A trial is a set of steps called <i>trial components</i> that produce a machine learning model. A trial is part of a single SageMaker <i>experiment</i>.</p>
/// <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p>
/// <p>You can add tags to a trial and then use the <code>Search</code> API to search for the tags.</p>
/// <p>To get a list of all your trials, call the <code>ListTrials</code> API. To view a trial's properties, call the <code>DescribeTrial</code> API. To create a trial component, call the <code>CreateTrialComponent</code> API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrial {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_trial_input::Builder,
}
impl CreateTrial {
    /// Creates a new `CreateTrial`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateTrial,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateTrialError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateTrialOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateTrialError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the trial. The name must be unique in your Amazon Web Services account and is not case-sensitive.</p>
    pub fn trial_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_name(input.into());
        self
    }
    /// <p>The name of the trial. The name must be unique in your Amazon Web Services account and is not case-sensitive.</p>
    pub fn set_trial_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trial_name(input);
        self
    }
    /// <p>The name of the trial as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The name of the trial as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The name of the experiment to associate the trial with.</p>
    pub fn experiment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.experiment_name(input.into());
        self
    }
    /// <p>The name of the experiment to associate the trial with.</p>
    pub fn set_experiment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_experiment_name(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(mut self, input: crate::model::MetadataProperties) -> Self {
        self.inner = self.inner.metadata_properties(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn set_metadata_properties(
        mut self,
        input: std::option::Option<crate::model::MetadataProperties>,
    ) -> Self {
        self.inner = self.inner.set_metadata_properties(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to associate with the trial. You can use <code>Search</code> API to search on the tags.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to associate with the trial. You can use <code>Search</code> API to search on the tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateTrialComponent`.
///
/// <p>Creates a <i>trial component</i>, which is a stage of a machine learning <i>trial</i>. A trial is composed of one or more trial components. A trial component can be used in multiple trials.</p>
/// <p>Trial components include pre-processing jobs, training jobs, and batch transform jobs.</p>
/// <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p>
/// <p>You can add tags to a trial component and then use the <code>Search</code> API to search for the tags.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrialComponent {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_trial_component_input::Builder,
}
impl CreateTrialComponent {
    /// Creates a new `CreateTrialComponent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateTrialComponent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateTrialComponentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateTrialComponentOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateTrialComponentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the component. The name must be unique in your Amazon Web Services account and is not case-sensitive.</p>
    pub fn trial_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_component_name(input.into());
        self
    }
    /// <p>The name of the component. The name must be unique in your Amazon Web Services account and is not case-sensitive.</p>
    pub fn set_trial_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_trial_component_name(input);
        self
    }
    /// <p>The name of the component as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is displayed.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The name of the component as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is displayed.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The status of the component. States include:</p>
    /// <ul>
    /// <li> <p>InProgress</p> </li>
    /// <li> <p>Completed</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::model::TrialComponentStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the component. States include:</p>
    /// <ul>
    /// <li> <p>InProgress</p> </li>
    /// <li> <p>Completed</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::model::TrialComponentStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>When the component started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>When the component started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>When the component ended.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>When the component ended.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// Adds a key-value pair to `Parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The hyperparameters for the component.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::model::TrialComponentParameterValue,
    ) -> Self {
        self.inner = self.inner.parameters(k.into(), v);
        self
    }
    /// <p>The hyperparameters for the component.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::model::TrialComponentParameterValue,
            >,
        >,
    ) -> Self {
        self.inner = self.inner.set_parameters(input);
        self
    }
    /// Adds a key-value pair to `InputArtifacts`.
    ///
    /// To override the contents of this collection use [`set_input_artifacts`](Self::set_input_artifacts).
    ///
    /// <p>The input artifacts for the component. Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types.</p>
    pub fn input_artifacts(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::model::TrialComponentArtifact,
    ) -> Self {
        self.inner = self.inner.input_artifacts(k.into(), v);
        self
    }
    /// <p>The input artifacts for the component. Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types.</p>
    pub fn set_input_artifacts(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::TrialComponentArtifact>,
        >,
    ) -> Self {
        self.inner = self.inner.set_input_artifacts(input);
        self
    }
    /// Adds a key-value pair to `OutputArtifacts`.
    ///
    /// To override the contents of this collection use [`set_output_artifacts`](Self::set_output_artifacts).
    ///
    /// <p>The output artifacts for the component. Examples of output artifacts are metrics, snapshots, logs, and images.</p>
    pub fn output_artifacts(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::model::TrialComponentArtifact,
    ) -> Self {
        self.inner = self.inner.output_artifacts(k.into(), v);
        self
    }
    /// <p>The output artifacts for the component. Examples of output artifacts are metrics, snapshots, logs, and images.</p>
    pub fn set_output_artifacts(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::TrialComponentArtifact>,
        >,
    ) -> Self {
        self.inner = self.inner.set_output_artifacts(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn metadata_properties(mut self, input: crate::model::MetadataProperties) -> Self {
        self.inner = self.inner.metadata_properties(input);
        self
    }
    /// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    pub fn set_metadata_properties(
        mut self,
        input: std::option::Option<crate::model::MetadataProperties>,
    ) -> Self {
        self.inner = self.inner.set_metadata_properties(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to associate with the component. You can use <code>Search</code> API to search on the tags.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to associate with the component. You can use <code>Search</code> API to search on the tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateUserProfile`.
///
/// <p>Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a "person" for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user's private Amazon Elastic File System (EFS) home directory. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateUserProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_user_profile_input::Builder,
}
impl CreateUserProfile {
    /// Creates a new `CreateUserProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateUserProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateUserProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateUserProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateUserProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>A name for the UserProfile. This value is not case sensitive.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>A name for the UserProfile. This value is not case sensitive.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
    /// <p>A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain's AuthMode is IAM Identity Center, this field is required. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified. </p>
    pub fn single_sign_on_user_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.single_sign_on_user_identifier(input.into());
        self
    }
    /// <p>A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain's AuthMode is IAM Identity Center, this field is required. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified. </p>
    pub fn set_single_sign_on_user_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_single_sign_on_user_identifier(input);
        self
    }
    /// <p>The username of the associated Amazon Web Services Single Sign-On User for this UserProfile. If the Domain's AuthMode is IAM Identity Center, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified. </p>
    pub fn single_sign_on_user_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.single_sign_on_user_value(input.into());
        self
    }
    /// <p>The username of the associated Amazon Web Services Single Sign-On User for this UserProfile. If the Domain's AuthMode is IAM Identity Center, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified. </p>
    pub fn set_single_sign_on_user_value(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_single_sign_on_user_value(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    /// <p>Tags that you specify for the User Profile are also added to all Apps that the User Profile launches.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    /// <p>Tags that you specify for the User Profile are also added to all Apps that the User Profile launches.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn user_settings(mut self, input: crate::model::UserSettings) -> Self {
        self.inner = self.inner.user_settings(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn set_user_settings(
        mut self,
        input: std::option::Option<crate::model::UserSettings>,
    ) -> Self {
        self.inner = self.inner.set_user_settings(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateWorkforce`.
///
/// <p>Use this operation to create a workforce. This operation will return an error if a workforce already exists in the Amazon Web Services Region that you specify. You can only create one workforce in each Amazon Web Services Region per Amazon Web Services account.</p>
/// <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use the API operation to delete the existing workforce and then use <code>CreateWorkforce</code> to create a new workforce.</p>
/// <p>To create a private workforce using Amazon Cognito, you must specify a Cognito user pool in <code>CognitoConfig</code>. You can also create an Amazon Cognito workforce using the Amazon SageMaker console. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html"> Create a Private Workforce (Amazon Cognito)</a>.</p>
/// <p>To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP configuration in <code>OidcConfig</code>. Your OIDC IdP must support <i>groups</i> because groups are used by Ground Truth and Amazon A2I to create work teams. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html"> Create a Private Workforce (OIDC IdP)</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkforce {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_workforce_input::Builder,
}
impl CreateWorkforce {
    /// Creates a new `CreateWorkforce`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateWorkforce,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkforceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateWorkforceOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkforceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> Amazon Cognito user pool</a>.</p>
    /// <p>Do not use <code>OidcConfig</code> if you specify values for <code>CognitoConfig</code>.</p>
    pub fn cognito_config(mut self, input: crate::model::CognitoConfig) -> Self {
        self.inner = self.inner.cognito_config(input);
        self
    }
    /// <p>Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> Amazon Cognito user pool</a>.</p>
    /// <p>Do not use <code>OidcConfig</code> if you specify values for <code>CognitoConfig</code>.</p>
    pub fn set_cognito_config(
        mut self,
        input: std::option::Option<crate::model::CognitoConfig>,
    ) -> Self {
        self.inner = self.inner.set_cognito_config(input);
        self
    }
    /// <p>Use this parameter to configure a private workforce using your own OIDC Identity Provider.</p>
    /// <p>Do not use <code>CognitoConfig</code> if you specify values for <code>OidcConfig</code>.</p>
    pub fn oidc_config(mut self, input: crate::model::OidcConfig) -> Self {
        self.inner = self.inner.oidc_config(input);
        self
    }
    /// <p>Use this parameter to configure a private workforce using your own OIDC Identity Provider.</p>
    /// <p>Do not use <code>CognitoConfig</code> if you specify values for <code>OidcConfig</code>.</p>
    pub fn set_oidc_config(mut self, input: std::option::Option<crate::model::OidcConfig>) -> Self {
        self.inner = self.inner.set_oidc_config(input);
        self
    }
    /// <p>A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses.</p>
    pub fn source_ip_config(mut self, input: crate::model::SourceIpConfig) -> Self {
        self.inner = self.inner.source_ip_config(input);
        self
    }
    /// <p>A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses.</p>
    pub fn set_source_ip_config(
        mut self,
        input: std::option::Option<crate::model::SourceIpConfig>,
    ) -> Self {
        self.inner = self.inner.set_source_ip_config(input);
        self
    }
    /// <p>The name of the private workforce.</p>
    pub fn workforce_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workforce_name(input.into());
        self
    }
    /// <p>The name of the private workforce.</p>
    pub fn set_workforce_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workforce_name(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs that contain metadata to help you categorize and organize our workforce. Each tag consists of a key and a value, both of which you define.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs that contain metadata to help you categorize and organize our workforce. Each tag consists of a key and a value, both of which you define.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Use this parameter to configure a workforce using VPC.</p>
    pub fn workforce_vpc_config(mut self, input: crate::model::WorkforceVpcConfigRequest) -> Self {
        self.inner = self.inner.workforce_vpc_config(input);
        self
    }
    /// <p>Use this parameter to configure a workforce using VPC.</p>
    pub fn set_workforce_vpc_config(
        mut self,
        input: std::option::Option<crate::model::WorkforceVpcConfigRequest>,
    ) -> Self {
        self.inner = self.inner.set_workforce_vpc_config(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateWorkteam`.
///
/// <p>Creates a new work team for labeling your data. A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team.</p>
/// <p>You cannot create more than 25 work teams in an account and region.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkteam {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_workteam_input::Builder,
}
impl CreateWorkteam {
    /// Creates a new `CreateWorkteam`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateWorkteam,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkteamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateWorkteamOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkteamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the work team. Use this name to identify the work team.</p>
    pub fn workteam_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workteam_name(input.into());
        self
    }
    /// <p>The name of the work team. Use this name to identify the work team.</p>
    pub fn set_workteam_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workteam_name(input);
        self
    }
    /// <p>The name of the workforce.</p>
    pub fn workforce_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workforce_name(input.into());
        self
    }
    /// <p>The name of the workforce.</p>
    pub fn set_workforce_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workforce_name(input);
        self
    }
    /// Appends an item to `MemberDefinitions`.
    ///
    /// To override the contents of this collection use [`set_member_definitions`](Self::set_member_definitions).
    ///
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. Do not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>.</p>
    pub fn member_definitions(mut self, input: crate::model::MemberDefinition) -> Self {
        self.inner = self.inner.member_definitions(input);
        self
    }
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. Do not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>.</p>
    pub fn set_member_definitions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::MemberDefinition>>,
    ) -> Self {
        self.inner = self.inner.set_member_definitions(input);
        self
    }
    /// <p>A description of the work team.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the work team.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Configures notification of workers regarding available or expiring work items.</p>
    pub fn notification_configuration(
        mut self,
        input: crate::model::NotificationConfiguration,
    ) -> Self {
        self.inner = self.inner.notification_configuration(input);
        self
    }
    /// <p>Configures notification of workers regarding available or expiring work items.</p>
    pub fn set_notification_configuration(
        mut self,
        input: std::option::Option<crate::model::NotificationConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_notification_configuration(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html">Resource Tag</a> and <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using Cost Allocation Tags</a> in the <i> Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html">Resource Tag</a> and <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using Cost Allocation Tags</a> in the <i> Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteAction`.
///
/// <p>Deletes an action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAction {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_action_input::Builder,
}
impl DeleteAction {
    /// Creates a new `DeleteAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteActionOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the action to delete.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_name(input.into());
        self
    }
    /// <p>The name of the action to delete.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteAlgorithm`.
///
/// <p>Removes the specified algorithm from your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAlgorithm {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_algorithm_input::Builder,
}
impl DeleteAlgorithm {
    /// Creates a new `DeleteAlgorithm`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteAlgorithm,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteAlgorithmError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteAlgorithmOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteAlgorithmError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the algorithm to delete.</p>
    pub fn algorithm_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.algorithm_name(input.into());
        self
    }
    /// <p>The name of the algorithm to delete.</p>
    pub fn set_algorithm_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_algorithm_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteApp`.
///
/// <p>Used to stop and delete an app.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteApp {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_app_input::Builder,
}
impl DeleteApp {
    /// Creates a new `DeleteApp`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteApp,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteAppError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteAppOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteAppError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn app_type(mut self, input: crate::model::AppType) -> Self {
        self.inner = self.inner.app_type(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn set_app_type(mut self, input: std::option::Option<crate::model::AppType>) -> Self {
        self.inner = self.inner.set_app_type(input);
        self
    }
    /// <p>The name of the app.</p>
    pub fn app_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_name(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_app_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_name(input);
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name(input.into());
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_space_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteAppImageConfig`.
///
/// <p>Deletes an AppImageConfig.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAppImageConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_app_image_config_input::Builder,
}
impl DeleteAppImageConfig {
    /// Creates a new `DeleteAppImageConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteAppImageConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteAppImageConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteAppImageConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteAppImageConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the AppImageConfig to delete.</p>
    pub fn app_image_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_image_config_name(input.into());
        self
    }
    /// <p>The name of the AppImageConfig to delete.</p>
    pub fn set_app_image_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_app_image_config_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteArtifact`.
///
/// <p>Deletes an artifact. Either <code>ArtifactArn</code> or <code>Source</code> must be specified.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteArtifact {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_artifact_input::Builder,
}
impl DeleteArtifact {
    /// Creates a new `DeleteArtifact`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteArtifact,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteArtifactError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteArtifactOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteArtifactError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the artifact to delete.</p>
    pub fn artifact_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.artifact_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the artifact to delete.</p>
    pub fn set_artifact_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_artifact_arn(input);
        self
    }
    /// <p>The URI of the source.</p>
    pub fn source(mut self, input: crate::model::ArtifactSource) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>The URI of the source.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::model::ArtifactSource>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteAssociation`.
///
/// <p>Deletes an association.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_association_input::Builder,
}
impl DeleteAssociation {
    /// Creates a new `DeleteAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the source.</p>
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_arn(input.into());
        self
    }
    /// <p>The ARN of the source.</p>
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the destination.</p>
    pub fn destination_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the destination.</p>
    pub fn set_destination_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteCodeRepository`.
///
/// <p>Deletes the specified Git repository from your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCodeRepository {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_code_repository_input::Builder,
}
impl DeleteCodeRepository {
    /// Creates a new `DeleteCodeRepository`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteCodeRepository,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteCodeRepositoryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteCodeRepositoryOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteCodeRepositoryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Git repository to delete.</p>
    pub fn code_repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.code_repository_name(input.into());
        self
    }
    /// <p>The name of the Git repository to delete.</p>
    pub fn set_code_repository_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_code_repository_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteContext`.
///
/// <p>Deletes an context.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteContext {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_context_input::Builder,
}
impl DeleteContext {
    /// Creates a new `DeleteContext`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteContext,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteContextError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteContextOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteContextError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the context to delete.</p>
    pub fn context_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.context_name(input.into());
        self
    }
    /// <p>The name of the context to delete.</p>
    pub fn set_context_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_context_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteDataQualityJobDefinition`.
///
/// <p>Deletes a data quality monitoring job definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDataQualityJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_data_quality_job_definition_input::Builder,
}
impl DeleteDataQualityJobDefinition {
    /// Creates a new `DeleteDataQualityJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteDataQualityJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteDataQualityJobDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteDataQualityJobDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteDataQualityJobDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the data quality monitoring job definition to delete.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the data quality monitoring job definition to delete.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteDeviceFleet`.
///
/// <p>Deletes a fleet.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDeviceFleet {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_device_fleet_input::Builder,
}
impl DeleteDeviceFleet {
    /// Creates a new `DeleteDeviceFleet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteDeviceFleet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteDeviceFleetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteDeviceFleetOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteDeviceFleetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the fleet to delete.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The name of the fleet to delete.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteDomain`.
///
/// <p>Used to delete a domain. If you onboarded with IAM mode, you will need to delete your domain to onboard again using IAM Identity Center. Use with caution. All of the members of the domain will lose access to their EFS volume, including data, notebooks, and other artifacts. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDomain {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_domain_input::Builder,
}
impl DeleteDomain {
    /// Creates a new `DeleteDomain`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteDomain,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteDomainError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteDomainOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteDomainError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained (not automatically deleted). </p>
    pub fn retention_policy(mut self, input: crate::model::RetentionPolicy) -> Self {
        self.inner = self.inner.retention_policy(input);
        self
    }
    /// <p>The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained (not automatically deleted). </p>
    pub fn set_retention_policy(
        mut self,
        input: std::option::Option<crate::model::RetentionPolicy>,
    ) -> Self {
        self.inner = self.inner.set_retention_policy(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteEdgeDeploymentPlan`.
///
/// <p>Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEdgeDeploymentPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_edge_deployment_plan_input::Builder,
}
impl DeleteEdgeDeploymentPlan {
    /// Creates a new `DeleteEdgeDeploymentPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteEdgeDeploymentPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteEdgeDeploymentPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteEdgeDeploymentPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteEdgeDeploymentPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge deployment plan to delete.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_deployment_plan_name(input.into());
        self
    }
    /// <p>The name of the edge deployment plan to delete.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_deployment_plan_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteEdgeDeploymentStage`.
///
/// <p>Delete a stage in an edge deployment plan if (and only if) the stage is inactive.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEdgeDeploymentStage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_edge_deployment_stage_input::Builder,
}
impl DeleteEdgeDeploymentStage {
    /// Creates a new `DeleteEdgeDeploymentStage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteEdgeDeploymentStage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteEdgeDeploymentStageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteEdgeDeploymentStageOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteEdgeDeploymentStageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge deployment plan from which the stage will be deleted.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_deployment_plan_name(input.into());
        self
    }
    /// <p>The name of the edge deployment plan from which the stage will be deleted.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_deployment_plan_name(input);
        self
    }
    /// <p>The name of the stage.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stage_name(input.into());
        self
    }
    /// <p>The name of the stage.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stage_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteEndpoint`.
///
/// <p>Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the endpoint was created. </p>
/// <p>SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't need to use the <a href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a> API call.</p>
/// <p>When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants. You might still see these resources in your account for a few minutes after deleting your endpoint. Do not delete or revoke the permissions for your <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn">ExecutionRoleArn</a> </code>, otherwise SageMaker cannot delete these resources.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEndpoint {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_endpoint_input::Builder,
}
impl DeleteEndpoint {
    /// Creates a new `DeleteEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteEndpointError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteEndpointOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteEndpointError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the endpoint that you want to delete.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>The name of the endpoint that you want to delete.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteEndpointConfig`.
///
/// <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API deletes only the specified configuration. It does not delete endpoints created using the configuration. </p>
/// <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEndpointConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_endpoint_config_input::Builder,
}
impl DeleteEndpointConfig {
    /// Creates a new `DeleteEndpointConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteEndpointConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteEndpointConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteEndpointConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteEndpointConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the endpoint configuration that you want to delete.</p>
    pub fn endpoint_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_config_name(input.into());
        self
    }
    /// <p>The name of the endpoint configuration that you want to delete.</p>
    pub fn set_endpoint_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_config_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteExperiment`.
///
/// <p>Deletes an SageMaker experiment. All trials associated with the experiment must be deleted first. Use the <code>ListTrials</code> API to get a list of the trials associated with the experiment.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_experiment_input::Builder,
}
impl DeleteExperiment {
    /// Creates a new `DeleteExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the experiment to delete.</p>
    pub fn experiment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.experiment_name(input.into());
        self
    }
    /// <p>The name of the experiment to delete.</p>
    pub fn set_experiment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_experiment_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteFeatureGroup`.
///
/// <p>Delete the <code>FeatureGroup</code> and any data that was written to the <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be accessed from the <code>OnlineStore</code> immediately after <code>DeleteFeatureGroup</code> is called. </p>
/// <p>Data written into the <code>OfflineStore</code> will not be deleted. The Amazon Web Services Glue database and tables that are automatically created for your <code>OfflineStore</code> are not deleted. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFeatureGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_feature_group_input::Builder,
}
impl DeleteFeatureGroup {
    /// Creates a new `DeleteFeatureGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteFeatureGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteFeatureGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteFeatureGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteFeatureGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the <code>FeatureGroup</code> you want to delete. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. </p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.feature_group_name(input.into());
        self
    }
    /// <p>The name of the <code>FeatureGroup</code> you want to delete. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. </p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_feature_group_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteFlowDefinition`.
///
/// <p>Deletes the specified flow definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFlowDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_flow_definition_input::Builder,
}
impl DeleteFlowDefinition {
    /// Creates a new `DeleteFlowDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteFlowDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteFlowDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteFlowDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteFlowDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the flow definition you are deleting.</p>
    pub fn flow_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_definition_name(input.into());
        self
    }
    /// <p>The name of the flow definition you are deleting.</p>
    pub fn set_flow_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_flow_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteHub`.
///
/// <p>Delete a hub.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteHub {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_hub_input::Builder,
}
impl DeleteHub {
    /// Creates a new `DeleteHub`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteHub,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteHubError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteHubOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteHubError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the hub to delete.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub to delete.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteHubContent`.
///
/// <p>Delete the contents of a hub.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteHubContent {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_hub_content_input::Builder,
}
impl DeleteHubContent {
    /// Creates a new `DeleteHubContent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteHubContent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteHubContentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteHubContentOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteHubContentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the hub that you want to delete content in.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub that you want to delete content in.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
    /// <p>The type of content that you want to delete from a hub.</p>
    pub fn hub_content_type(mut self, input: crate::model::HubContentType) -> Self {
        self.inner = self.inner.hub_content_type(input);
        self
    }
    /// <p>The type of content that you want to delete from a hub.</p>
    pub fn set_hub_content_type(
        mut self,
        input: std::option::Option<crate::model::HubContentType>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_type(input);
        self
    }
    /// <p>The name of the content that you want to delete from a hub.</p>
    pub fn hub_content_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_name(input.into());
        self
    }
    /// <p>The name of the content that you want to delete from a hub.</p>
    pub fn set_hub_content_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_name(input);
        self
    }
    /// <p>The version of the content that you want to delete from a hub.</p>
    pub fn hub_content_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_version(input.into());
        self
    }
    /// <p>The version of the content that you want to delete from a hub.</p>
    pub fn set_hub_content_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_version(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteHumanTaskUi`.
///
/// <p>Use this operation to delete a human task user interface (worker task template).</p>
/// <p> To see a list of human task user interfaces (work task templates) in your account, use . When you delete a worker task template, it no longer appears when you call <code>ListHumanTaskUis</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteHumanTaskUi {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_human_task_ui_input::Builder,
}
impl DeleteHumanTaskUi {
    /// Creates a new `DeleteHumanTaskUi`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteHumanTaskUi,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteHumanTaskUiError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteHumanTaskUiOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteHumanTaskUiError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the human task user interface (work task template) you want to delete.</p>
    pub fn human_task_ui_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.human_task_ui_name(input.into());
        self
    }
    /// <p>The name of the human task user interface (work task template) you want to delete.</p>
    pub fn set_human_task_ui_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_human_task_ui_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteImage`.
///
/// <p>Deletes a SageMaker image and all versions of the image. The container images aren't deleted.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteImage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_image_input::Builder,
}
impl DeleteImage {
    /// Creates a new `DeleteImage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteImage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteImageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteImageOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteImageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the image to delete.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image to delete.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteImageVersion`.
///
/// <p>Deletes a version of a SageMaker image. The container image the version represents isn't deleted.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteImageVersion {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_image_version_input::Builder,
}
impl DeleteImageVersion {
    /// Creates a new `DeleteImageVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteImageVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteImageVersionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteImageVersionOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteImageVersionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the image to delete.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image to delete.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>The version to delete.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.inner = self.inner.version(input);
        self
    }
    /// <p>The version to delete.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_version(input);
        self
    }
    /// <p>The alias of the image to delete.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>The alias of the image to delete.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteInferenceExperiment`.
///
/// <p>Deletes an inference experiment.</p> <note>
/// <p> This operation does not delete your endpoint, variants, or any underlying resources. This operation only deletes the metadata of your experiment. </p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInferenceExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_inference_experiment_input::Builder,
}
impl DeleteInferenceExperiment {
    /// Creates a new `DeleteInferenceExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteInferenceExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteInferenceExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteInferenceExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteInferenceExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the inference experiment you want to delete.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the inference experiment you want to delete.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteModel`.
///
/// <p>Deletes a model. The <code>DeleteModel</code> API deletes only the model entry that was created in SageMaker when you called the <code>CreateModel</code> API. It does not delete model artifacts, inference code, or the IAM role that you specified when creating the model. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_model_input::Builder,
}
impl DeleteModel {
    /// Creates a new `DeleteModel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteModel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteModelOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model to delete.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_name(input.into());
        self
    }
    /// <p>The name of the model to delete.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteModelBiasJobDefinition`.
///
/// <p>Deletes an Amazon SageMaker model bias job definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelBiasJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_model_bias_job_definition_input::Builder,
}
impl DeleteModelBiasJobDefinition {
    /// Creates a new `DeleteModelBiasJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteModelBiasJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelBiasJobDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteModelBiasJobDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelBiasJobDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model bias job definition to delete.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the model bias job definition to delete.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteModelCard`.
///
/// <p>Deletes an Amazon SageMaker Model Card.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelCard {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_model_card_input::Builder,
}
impl DeleteModelCard {
    /// Creates a new `DeleteModelCard`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteModelCard,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelCardError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteModelCardOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelCardError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model card to delete.</p>
    pub fn model_card_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_card_name(input.into());
        self
    }
    /// <p>The name of the model card to delete.</p>
    pub fn set_model_card_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_card_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteModelExplainabilityJobDefinition`.
///
/// <p>Deletes an Amazon SageMaker model explainability job definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelExplainabilityJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_model_explainability_job_definition_input::Builder,
}
impl DeleteModelExplainabilityJobDefinition {
    /// Creates a new `DeleteModelExplainabilityJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteModelExplainabilityJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DeleteModelExplainabilityJobDefinitionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteModelExplainabilityJobDefinitionOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DeleteModelExplainabilityJobDefinitionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model explainability job definition to delete.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the model explainability job definition to delete.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteModelPackage`.
///
/// <p>Deletes a model package.</p>
/// <p>A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelPackage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_model_package_input::Builder,
}
impl DeleteModelPackage {
    /// Creates a new `DeleteModelPackage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteModelPackage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelPackageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteModelPackageOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelPackageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name or Amazon Resource Name (ARN) of the model package to delete.</p>
    /// <p>When you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    pub fn model_package_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_name(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the model package to delete.</p>
    /// <p>When you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    pub fn set_model_package_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteModelPackageGroup`.
///
/// <p>Deletes the specified model group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelPackageGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_model_package_group_input::Builder,
}
impl DeleteModelPackageGroup {
    /// Creates a new `DeleteModelPackageGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteModelPackageGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelPackageGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteModelPackageGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelPackageGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model group to delete.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_group_name(input.into());
        self
    }
    /// <p>The name of the model group to delete.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_group_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteModelPackageGroupPolicy`.
///
/// <p>Deletes a model group resource policy.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelPackageGroupPolicy {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_model_package_group_policy_input::Builder,
}
impl DeleteModelPackageGroupPolicy {
    /// Creates a new `DeleteModelPackageGroupPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteModelPackageGroupPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelPackageGroupPolicyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteModelPackageGroupPolicyOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelPackageGroupPolicyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model group for which to delete the policy.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_group_name(input.into());
        self
    }
    /// <p>The name of the model group for which to delete the policy.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_group_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteModelQualityJobDefinition`.
///
/// <p>Deletes the secified model quality monitoring job definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelQualityJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_model_quality_job_definition_input::Builder,
}
impl DeleteModelQualityJobDefinition {
    /// Creates a new `DeleteModelQualityJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteModelQualityJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelQualityJobDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteModelQualityJobDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteModelQualityJobDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model quality monitoring job definition to delete.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the model quality monitoring job definition to delete.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteMonitoringSchedule`.
///
/// <p>Deletes a monitoring schedule. Also stops the schedule had not already been stopped. This does not delete the job execution history of the monitoring schedule. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMonitoringSchedule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_monitoring_schedule_input::Builder,
}
impl DeleteMonitoringSchedule {
    /// Creates a new `DeleteMonitoringSchedule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteMonitoringSchedule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteMonitoringScheduleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteMonitoringScheduleOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteMonitoringScheduleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the monitoring schedule to delete.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>The name of the monitoring schedule to delete.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteNotebookInstance`.
///
/// <p> Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you must call the <code>StopNotebookInstance</code> API. </p> <important>
/// <p>When you delete a notebook instance, you lose all of your data. SageMaker removes the ML compute instance, and deletes the ML storage volume and the network interface associated with the notebook instance. </p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNotebookInstance {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_notebook_instance_input::Builder,
}
impl DeleteNotebookInstance {
    /// Creates a new `DeleteNotebookInstance`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteNotebookInstance,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteNotebookInstanceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteNotebookInstanceOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteNotebookInstanceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the SageMaker notebook instance to delete.</p>
    pub fn notebook_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_name(input.into());
        self
    }
    /// <p>The name of the SageMaker notebook instance to delete.</p>
    pub fn set_notebook_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_notebook_instance_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteNotebookInstanceLifecycleConfig`.
///
/// <p>Deletes a notebook instance lifecycle configuration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNotebookInstanceLifecycleConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_notebook_instance_lifecycle_config_input::Builder,
}
impl DeleteNotebookInstanceLifecycleConfig {
    /// Creates a new `DeleteNotebookInstanceLifecycleConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteNotebookInstanceLifecycleConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteNotebookInstanceLifecycleConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteNotebookInstanceLifecycleConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteNotebookInstanceLifecycleConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the lifecycle configuration to delete.</p>
    pub fn notebook_instance_lifecycle_config_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .notebook_instance_lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of the lifecycle configuration to delete.</p>
    pub fn set_notebook_instance_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .set_notebook_instance_lifecycle_config_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeletePipeline`.
///
/// <p>Deletes a pipeline if there are no running instances of the pipeline. To delete a pipeline, you must stop all running instances of the pipeline using the <code>StopPipelineExecution</code> API. When you delete a pipeline, all instances of the pipeline are deleted.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeletePipeline {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_pipeline_input::Builder,
}
impl DeletePipeline {
    /// Creates a new `DeletePipeline`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeletePipeline,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeletePipelineError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeletePipelineOutput,
        aws_smithy_http::result::SdkError<crate::error::DeletePipelineError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the pipeline to delete.</p>
    pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p>The name of the pipeline to delete.</p>
    pub fn set_pipeline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteProject`.
///
/// <p>Delete the specified project.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProject {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_project_input::Builder,
}
impl DeleteProject {
    /// Creates a new `DeleteProject`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteProject,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteProjectError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteProjectOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteProjectError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the project to delete.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.project_name(input.into());
        self
    }
    /// <p>The name of the project to delete.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_project_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteSpace`.
///
/// <p>Used to delete a space.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSpace {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_space_input::Builder,
}
impl DeleteSpace {
    /// Creates a new `DeleteSpace`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteSpace,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteSpaceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteSpaceOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteSpaceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_space_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteStudioLifecycleConfig`.
///
/// <p>Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteStudioLifecycleConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_studio_lifecycle_config_input::Builder,
}
impl DeleteStudioLifecycleConfig {
    /// Creates a new `DeleteStudioLifecycleConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteStudioLifecycleConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteStudioLifecycleConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteStudioLifecycleConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteStudioLifecycleConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Studio Lifecycle Configuration to delete.</p>
    pub fn studio_lifecycle_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.studio_lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of the Studio Lifecycle Configuration to delete.</p>
    pub fn set_studio_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_studio_lifecycle_config_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteTags`.
///
/// <p>Deletes the specified tags from an SageMaker resource.</p>
/// <p>To list a resource's tags, use the <code>ListTags</code> API. </p> <note>
/// <p>When you call this API to delete tags from a hyperparameter tuning job, the deleted tags are not removed from training jobs that the hyperparameter tuning job launched before you called this API.</p>
/// </note> <note>
/// <p>When you call this API to delete tags from a SageMaker Studio Domain or User Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain or User Profile launched before you called this API.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTags {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_tags_input::Builder,
}
impl DeleteTags {
    /// Creates a new `DeleteTags`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteTags,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteTagsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteTagsOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteTagsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the resource whose tags you want to delete.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource whose tags you want to delete.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `TagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>An array or one or more tag keys to delete.</p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p>An array or one or more tag keys to delete.</p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteTrial`.
///
/// <p>Deletes the specified trial. All trial components that make up the trial must be deleted first. Use the <code>DescribeTrialComponent</code> API to get the list of trial components.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTrial {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_trial_input::Builder,
}
impl DeleteTrial {
    /// Creates a new `DeleteTrial`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteTrial,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteTrialError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteTrialOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteTrialError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the trial to delete.</p>
    pub fn trial_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_name(input.into());
        self
    }
    /// <p>The name of the trial to delete.</p>
    pub fn set_trial_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trial_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteTrialComponent`.
///
/// <p>Deletes the specified trial component. A trial component must be disassociated from all trials before the trial component can be deleted. To disassociate a trial component from a trial, call the <code>DisassociateTrialComponent</code> API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTrialComponent {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_trial_component_input::Builder,
}
impl DeleteTrialComponent {
    /// Creates a new `DeleteTrialComponent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteTrialComponent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteTrialComponentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteTrialComponentOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteTrialComponentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the component to delete.</p>
    pub fn trial_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_component_name(input.into());
        self
    }
    /// <p>The name of the component to delete.</p>
    pub fn set_trial_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_trial_component_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteUserProfile`.
///
/// <p>Deletes a user profile. When a user profile is deleted, the user loses access to their EFS volume, including data, notebooks, and other artifacts.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteUserProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_user_profile_input::Builder,
}
impl DeleteUserProfile {
    /// Creates a new `DeleteUserProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteUserProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteUserProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteUserProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteUserProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>The user profile name.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteWorkforce`.
///
/// <p>Use this operation to delete a workforce.</p>
/// <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use this operation to delete the existing workforce and then use to create a new workforce.</p> <important>
/// <p>If a private workforce contains one or more work teams, you must use the operation to delete all work teams before you delete the workforce. If you try to delete a workforce that contains one or more work teams, you will recieve a <code>ResourceInUse</code> error.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWorkforce {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_workforce_input::Builder,
}
impl DeleteWorkforce {
    /// Creates a new `DeleteWorkforce`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteWorkforce,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkforceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteWorkforceOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkforceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the workforce.</p>
    pub fn workforce_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workforce_name(input.into());
        self
    }
    /// <p>The name of the workforce.</p>
    pub fn set_workforce_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workforce_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteWorkteam`.
///
/// <p>Deletes an existing work team. This operation can't be undone.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWorkteam {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_workteam_input::Builder,
}
impl DeleteWorkteam {
    /// Creates a new `DeleteWorkteam`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteWorkteam,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkteamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteWorkteamOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkteamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the work team to delete.</p>
    pub fn workteam_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workteam_name(input.into());
        self
    }
    /// <p>The name of the work team to delete.</p>
    pub fn set_workteam_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workteam_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeregisterDevices`.
///
/// <p>Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterDevices {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::deregister_devices_input::Builder,
}
impl DeregisterDevices {
    /// Creates a new `DeregisterDevices`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeregisterDevices,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeregisterDevicesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeregisterDevicesOutput,
        aws_smithy_http::result::SdkError<crate::error::DeregisterDevicesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the fleet the devices belong to.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The name of the fleet the devices belong to.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
    /// Appends an item to `DeviceNames`.
    ///
    /// To override the contents of this collection use [`set_device_names`](Self::set_device_names).
    ///
    /// <p>The unique IDs of the devices.</p>
    pub fn device_names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_names(input.into());
        self
    }
    /// <p>The unique IDs of the devices.</p>
    pub fn set_device_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_device_names(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeAction`.
///
/// <p>Describes an action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAction {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_action_input::Builder,
}
impl DescribeAction {
    /// Creates a new `DescribeAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeActionOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the action to describe.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_name(input.into());
        self
    }
    /// <p>The name of the action to describe.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeAlgorithm`.
///
/// <p>Returns a description of the specified algorithm that is in your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAlgorithm {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_algorithm_input::Builder,
}
impl DescribeAlgorithm {
    /// Creates a new `DescribeAlgorithm`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeAlgorithm,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeAlgorithmError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeAlgorithmOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeAlgorithmError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the algorithm to describe.</p>
    pub fn algorithm_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.algorithm_name(input.into());
        self
    }
    /// <p>The name of the algorithm to describe.</p>
    pub fn set_algorithm_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_algorithm_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeApp`.
///
/// <p>Describes the app.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeApp {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_app_input::Builder,
}
impl DescribeApp {
    /// Creates a new `DescribeApp`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeApp,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeAppError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeAppOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeAppError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>The user profile name. If this value is not set, then <code>SpaceName</code> must be set.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn app_type(mut self, input: crate::model::AppType) -> Self {
        self.inner = self.inner.app_type(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn set_app_type(mut self, input: std::option::Option<crate::model::AppType>) -> Self {
        self.inner = self.inner.set_app_type(input);
        self
    }
    /// <p>The name of the app.</p>
    pub fn app_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_name(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_app_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_name(input);
        self
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_space_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeAppImageConfig`.
///
/// <p>Describes an AppImageConfig.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAppImageConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_app_image_config_input::Builder,
}
impl DescribeAppImageConfig {
    /// Creates a new `DescribeAppImageConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeAppImageConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeAppImageConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeAppImageConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeAppImageConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the AppImageConfig to describe.</p>
    pub fn app_image_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_image_config_name(input.into());
        self
    }
    /// <p>The name of the AppImageConfig to describe.</p>
    pub fn set_app_image_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_app_image_config_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeArtifact`.
///
/// <p>Describes an artifact.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeArtifact {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_artifact_input::Builder,
}
impl DescribeArtifact {
    /// Creates a new `DescribeArtifact`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeArtifact,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeArtifactError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeArtifactOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeArtifactError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the artifact to describe.</p>
    pub fn artifact_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.artifact_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the artifact to describe.</p>
    pub fn set_artifact_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_artifact_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeAutoMLJob`.
///
/// <p>Returns information about an Amazon SageMaker AutoML job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAutoMLJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_auto_ml_job_input::Builder,
}
impl DescribeAutoMLJob {
    /// Creates a new `DescribeAutoMLJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeAutoMLJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeAutoMLJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeAutoMlJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeAutoMLJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Requests information about an AutoML job using its unique name.</p>
    pub fn auto_ml_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_ml_job_name(input.into());
        self
    }
    /// <p>Requests information about an AutoML job using its unique name.</p>
    pub fn set_auto_ml_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_auto_ml_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeCodeRepository`.
///
/// <p>Gets details about the specified Git repository.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCodeRepository {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_code_repository_input::Builder,
}
impl DescribeCodeRepository {
    /// Creates a new `DescribeCodeRepository`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeCodeRepository,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeCodeRepositoryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeCodeRepositoryOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeCodeRepositoryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Git repository to describe.</p>
    pub fn code_repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.code_repository_name(input.into());
        self
    }
    /// <p>The name of the Git repository to describe.</p>
    pub fn set_code_repository_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_code_repository_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeCompilationJob`.
///
/// <p>Returns information about a model compilation job.</p>
/// <p>To create a model compilation job, use <code>CreateCompilationJob</code>. To get information about multiple model compilation jobs, use <code>ListCompilationJobs</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCompilationJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_compilation_job_input::Builder,
}
impl DescribeCompilationJob {
    /// Creates a new `DescribeCompilationJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeCompilationJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeCompilationJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeCompilationJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeCompilationJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model compilation job that you want information about.</p>
    pub fn compilation_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.compilation_job_name(input.into());
        self
    }
    /// <p>The name of the model compilation job that you want information about.</p>
    pub fn set_compilation_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_compilation_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeContext`.
///
/// <p>Describes a context.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeContext {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_context_input::Builder,
}
impl DescribeContext {
    /// Creates a new `DescribeContext`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeContext,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeContextError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeContextOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeContextError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the context to describe.</p>
    pub fn context_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.context_name(input.into());
        self
    }
    /// <p>The name of the context to describe.</p>
    pub fn set_context_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_context_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeDataQualityJobDefinition`.
///
/// <p>Gets the details of a data quality monitoring job definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDataQualityJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_data_quality_job_definition_input::Builder,
}
impl DescribeDataQualityJobDefinition {
    /// Creates a new `DescribeDataQualityJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeDataQualityJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeDataQualityJobDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeDataQualityJobDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeDataQualityJobDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the data quality monitoring job definition to describe.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the data quality monitoring job definition to describe.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeDevice`.
///
/// <p>Describes the device.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDevice {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_device_input::Builder,
}
impl DescribeDevice {
    /// Creates a new `DescribeDevice`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeDevice,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeDeviceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeDeviceOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeDeviceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Next token of device description.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Next token of device description.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The unique ID of the device.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_name(input.into());
        self
    }
    /// <p>The unique ID of the device.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_device_name(input);
        self
    }
    /// <p>The name of the fleet the devices belong to.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The name of the fleet the devices belong to.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeDeviceFleet`.
///
/// <p>A description of the fleet the device belongs to.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDeviceFleet {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_device_fleet_input::Builder,
}
impl DescribeDeviceFleet {
    /// Creates a new `DescribeDeviceFleet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeDeviceFleet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeDeviceFleetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeDeviceFleetOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeDeviceFleetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the fleet.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeDomain`.
///
/// <p>The description of the domain.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDomain {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_domain_input::Builder,
}
impl DescribeDomain {
    /// Creates a new `DescribeDomain`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeDomain,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeDomainError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeDomainOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeDomainError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeEdgeDeploymentPlan`.
///
/// <p>Describes an edge deployment plan with deployment status per stage.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEdgeDeploymentPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_edge_deployment_plan_input::Builder,
}
impl DescribeEdgeDeploymentPlan {
    /// Creates a new `DescribeEdgeDeploymentPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeEdgeDeploymentPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeEdgeDeploymentPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeEdgeDeploymentPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeEdgeDeploymentPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the deployment plan to describe.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_deployment_plan_name(input.into());
        self
    }
    /// <p>The name of the deployment plan to describe.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_deployment_plan_name(input);
        self
    }
    /// <p>If the edge deployment plan has enough stages to require tokening, then this is the response from the last list of stages returned.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the edge deployment plan has enough stages to require tokening, then this is the response from the last list of stages returned.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to select (50 by default).</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to select (50 by default).</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeEdgePackagingJob`.
///
/// <p>A description of edge packaging jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEdgePackagingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_edge_packaging_job_input::Builder,
}
impl DescribeEdgePackagingJob {
    /// Creates a new `DescribeEdgePackagingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeEdgePackagingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeEdgePackagingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeEdgePackagingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeEdgePackagingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge packaging job.</p>
    pub fn edge_packaging_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_packaging_job_name(input.into());
        self
    }
    /// <p>The name of the edge packaging job.</p>
    pub fn set_edge_packaging_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_packaging_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeEndpoint`.
///
/// <p>Returns the description of an endpoint.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEndpoint {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_endpoint_input::Builder,
}
impl DescribeEndpoint {
    /// Creates a new `DescribeEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeEndpointError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeEndpointOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeEndpointError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the endpoint.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>The name of the endpoint.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeEndpointConfig`.
///
/// <p>Returns the description of an endpoint configuration created using the <code>CreateEndpointConfig</code> API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEndpointConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_endpoint_config_input::Builder,
}
impl DescribeEndpointConfig {
    /// Creates a new `DescribeEndpointConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeEndpointConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeEndpointConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeEndpointConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeEndpointConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the endpoint configuration.</p>
    pub fn endpoint_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_config_name(input.into());
        self
    }
    /// <p>The name of the endpoint configuration.</p>
    pub fn set_endpoint_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_config_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeExperiment`.
///
/// <p>Provides a list of an experiment's properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_experiment_input::Builder,
}
impl DescribeExperiment {
    /// Creates a new `DescribeExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the experiment to describe.</p>
    pub fn experiment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.experiment_name(input.into());
        self
    }
    /// <p>The name of the experiment to describe.</p>
    pub fn set_experiment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_experiment_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeFeatureGroup`.
///
/// <p>Use this operation to describe a <code>FeatureGroup</code>. The response includes information on the creation time, <code>FeatureGroup</code> name, the unique identifier for each <code>FeatureGroup</code>, and more.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFeatureGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_feature_group_input::Builder,
}
impl DescribeFeatureGroup {
    /// Creates a new `DescribeFeatureGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeFeatureGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeFeatureGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeFeatureGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeFeatureGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the <code>FeatureGroup</code> you want described. </p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.feature_group_name(input.into());
        self
    }
    /// <p>The name of the <code>FeatureGroup</code> you want described. </p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_feature_group_name(input);
        self
    }
    /// <p>A token to resume pagination of the list of <code>Features</code> (<code>FeatureDefinitions</code>). 2,500 <code>Features</code> are returned by default.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to resume pagination of the list of <code>Features</code> (<code>FeatureDefinitions</code>). 2,500 <code>Features</code> are returned by default.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeFeatureMetadata`.
///
/// <p>Shows the metadata for a feature within a feature group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFeatureMetadata {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_feature_metadata_input::Builder,
}
impl DescribeFeatureMetadata {
    /// Creates a new `DescribeFeatureMetadata`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeFeatureMetadata,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeFeatureMetadataError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeFeatureMetadataOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeFeatureMetadataError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the feature group containing the feature.</p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.feature_group_name(input.into());
        self
    }
    /// <p>The name of the feature group containing the feature.</p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_feature_group_name(input);
        self
    }
    /// <p>The name of the feature.</p>
    pub fn feature_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.feature_name(input.into());
        self
    }
    /// <p>The name of the feature.</p>
    pub fn set_feature_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_feature_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeFlowDefinition`.
///
/// <p>Returns information about the specified flow definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFlowDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_flow_definition_input::Builder,
}
impl DescribeFlowDefinition {
    /// Creates a new `DescribeFlowDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeFlowDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeFlowDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeFlowDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeFlowDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the flow definition.</p>
    pub fn flow_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_definition_name(input.into());
        self
    }
    /// <p>The name of the flow definition.</p>
    pub fn set_flow_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_flow_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeHub`.
///
/// <p>Describe a hub.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHub {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_hub_input::Builder,
}
impl DescribeHub {
    /// Creates a new `DescribeHub`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeHub,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeHubError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeHubOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeHubError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the hub to describe.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub to describe.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeHubContent`.
///
/// <p>Describe the content of a hub.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHubContent {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_hub_content_input::Builder,
}
impl DescribeHubContent {
    /// Creates a new `DescribeHubContent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeHubContent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeHubContentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeHubContentOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeHubContentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the hub that contains the content to describe.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub that contains the content to describe.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
    /// <p>The type of content in the hub.</p>
    pub fn hub_content_type(mut self, input: crate::model::HubContentType) -> Self {
        self.inner = self.inner.hub_content_type(input);
        self
    }
    /// <p>The type of content in the hub.</p>
    pub fn set_hub_content_type(
        mut self,
        input: std::option::Option<crate::model::HubContentType>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_type(input);
        self
    }
    /// <p>The name of the content to describe.</p>
    pub fn hub_content_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_name(input.into());
        self
    }
    /// <p>The name of the content to describe.</p>
    pub fn set_hub_content_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_name(input);
        self
    }
    /// <p>The version of the content to describe.</p>
    pub fn hub_content_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_version(input.into());
        self
    }
    /// <p>The version of the content to describe.</p>
    pub fn set_hub_content_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_version(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeHumanTaskUi`.
///
/// <p>Returns information about the requested human task user interface (worker task template).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHumanTaskUi {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_human_task_ui_input::Builder,
}
impl DescribeHumanTaskUi {
    /// Creates a new `DescribeHumanTaskUi`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeHumanTaskUi,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeHumanTaskUiError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeHumanTaskUiOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeHumanTaskUiError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the human task user interface (worker task template) you want information about.</p>
    pub fn human_task_ui_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.human_task_ui_name(input.into());
        self
    }
    /// <p>The name of the human task user interface (worker task template) you want information about.</p>
    pub fn set_human_task_ui_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_human_task_ui_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeHyperParameterTuningJob`.
///
/// <p>Gets a description of a hyperparameter tuning job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHyperParameterTuningJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_hyper_parameter_tuning_job_input::Builder,
}
impl DescribeHyperParameterTuningJob {
    /// Creates a new `DescribeHyperParameterTuningJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeHyperParameterTuningJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeHyperParameterTuningJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeHyperParameterTuningJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeHyperParameterTuningJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the tuning job.</p>
    pub fn hyper_parameter_tuning_job_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.hyper_parameter_tuning_job_name(input.into());
        self
    }
    /// <p>The name of the tuning job.</p>
    pub fn set_hyper_parameter_tuning_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hyper_parameter_tuning_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeImage`.
///
/// <p>Describes a SageMaker image.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeImage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_image_input::Builder,
}
impl DescribeImage {
    /// Creates a new `DescribeImage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeImage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeImageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeImageOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeImageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the image to describe.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image to describe.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeImageVersion`.
///
/// <p>Describes a version of a SageMaker image.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeImageVersion {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_image_version_input::Builder,
}
impl DescribeImageVersion {
    /// Creates a new `DescribeImageVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeImageVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeImageVersionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeImageVersionOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeImageVersionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the image.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>The version of the image. If not specified, the latest version is described.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.inner = self.inner.version(input);
        self
    }
    /// <p>The version of the image. If not specified, the latest version is described.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_version(input);
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeInferenceExperiment`.
///
/// <p>Returns details about an inference experiment.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInferenceExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_inference_experiment_input::Builder,
}
impl DescribeInferenceExperiment {
    /// Creates a new `DescribeInferenceExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeInferenceExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeInferenceExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeInferenceExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeInferenceExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the inference experiment to describe.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the inference experiment to describe.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeInferenceRecommendationsJob`.
///
/// <p>Provides the results of the Inference Recommender job. One or more recommendation jobs are returned.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInferenceRecommendationsJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_inference_recommendations_job_input::Builder,
}
impl DescribeInferenceRecommendationsJob {
    /// Creates a new `DescribeInferenceRecommendationsJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeInferenceRecommendationsJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeInferenceRecommendationsJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeInferenceRecommendationsJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeInferenceRecommendationsJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>The name of the job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeLabelingJob`.
///
/// <p>Gets information about a labeling job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLabelingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_labeling_job_input::Builder,
}
impl DescribeLabelingJob {
    /// Creates a new `DescribeLabelingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeLabelingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeLabelingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeLabelingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeLabelingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the labeling job to return information for.</p>
    pub fn labeling_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.labeling_job_name(input.into());
        self
    }
    /// <p>The name of the labeling job to return information for.</p>
    pub fn set_labeling_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_labeling_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeLineageGroup`.
///
/// <p>Provides a list of properties for the requested lineage group. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLineageGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_lineage_group_input::Builder,
}
impl DescribeLineageGroup {
    /// Creates a new `DescribeLineageGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeLineageGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeLineageGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeLineageGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeLineageGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the lineage group.</p>
    pub fn lineage_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lineage_group_name(input.into());
        self
    }
    /// <p>The name of the lineage group.</p>
    pub fn set_lineage_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_lineage_group_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeModel`.
///
/// <p>Describes a model that you created using the <code>CreateModel</code> API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_model_input::Builder,
}
impl DescribeModel {
    /// Creates a new `DescribeModel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeModel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeModelOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_name(input.into());
        self
    }
    /// <p>The name of the model.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeModelBiasJobDefinition`.
///
/// <p>Returns a description of a model bias job definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelBiasJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_model_bias_job_definition_input::Builder,
}
impl DescribeModelBiasJobDefinition {
    /// Creates a new `DescribeModelBiasJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeModelBiasJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelBiasJobDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeModelBiasJobDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelBiasJobDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the model bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeModelCard`.
///
/// <p>Describes the content, creation time, and security configuration of an Amazon SageMaker Model Card.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelCard {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_model_card_input::Builder,
}
impl DescribeModelCard {
    /// Creates a new `DescribeModelCard`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeModelCard,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelCardError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeModelCardOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelCardError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model card to describe.</p>
    pub fn model_card_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_card_name(input.into());
        self
    }
    /// <p>The name of the model card to describe.</p>
    pub fn set_model_card_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_card_name(input);
        self
    }
    /// <p>The version of the model card to describe. If a version is not provided, then the latest version of the model card is described.</p>
    pub fn model_card_version(mut self, input: i32) -> Self {
        self.inner = self.inner.model_card_version(input);
        self
    }
    /// <p>The version of the model card to describe. If a version is not provided, then the latest version of the model card is described.</p>
    pub fn set_model_card_version(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_model_card_version(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeModelCardExportJob`.
///
/// <p>Describes an Amazon SageMaker Model Card export job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelCardExportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_model_card_export_job_input::Builder,
}
impl DescribeModelCardExportJob {
    /// Creates a new `DescribeModelCardExportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeModelCardExportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelCardExportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeModelCardExportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelCardExportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the model card export job to describe.</p>
    pub fn model_card_export_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_card_export_job_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model card export job to describe.</p>
    pub fn set_model_card_export_job_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_card_export_job_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeModelExplainabilityJobDefinition`.
///
/// <p>Returns a description of a model explainability job definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelExplainabilityJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_model_explainability_job_definition_input::Builder,
}
impl DescribeModelExplainabilityJobDefinition {
    /// Creates a new `DescribeModelExplainabilityJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeModelExplainabilityJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DescribeModelExplainabilityJobDefinitionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeModelExplainabilityJobDefinitionOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DescribeModelExplainabilityJobDefinitionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeModelPackage`.
///
/// <p>Returns a description of the specified model package, which is used to create SageMaker models or list them on Amazon Web Services Marketplace.</p>
/// <p>To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services Marketplace.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelPackage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_model_package_input::Builder,
}
impl DescribeModelPackage {
    /// Creates a new `DescribeModelPackage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeModelPackage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelPackageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeModelPackageOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelPackageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name or Amazon Resource Name (ARN) of the model package to describe.</p>
    /// <p>When you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    pub fn model_package_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_name(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the model package to describe.</p>
    /// <p>When you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    pub fn set_model_package_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeModelPackageGroup`.
///
/// <p>Gets a description for the specified model group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelPackageGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_model_package_group_input::Builder,
}
impl DescribeModelPackageGroup {
    /// Creates a new `DescribeModelPackageGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeModelPackageGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelPackageGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeModelPackageGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelPackageGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of gthe model group to describe.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_group_name(input.into());
        self
    }
    /// <p>The name of gthe model group to describe.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_group_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeModelQualityJobDefinition`.
///
/// <p>Returns a description of a model quality job definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelQualityJobDefinition {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_model_quality_job_definition_input::Builder,
}
impl DescribeModelQualityJobDefinition {
    /// Creates a new `DescribeModelQualityJobDefinition`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeModelQualityJobDefinition,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelQualityJobDefinitionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeModelQualityJobDefinitionOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeModelQualityJobDefinitionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model quality job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_definition_name(input.into());
        self
    }
    /// <p>The name of the model quality job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_definition_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeMonitoringSchedule`.
///
/// <p>Describes the schedule for a monitoring job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMonitoringSchedule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_monitoring_schedule_input::Builder,
}
impl DescribeMonitoringSchedule {
    /// Creates a new `DescribeMonitoringSchedule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeMonitoringSchedule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeMonitoringScheduleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeMonitoringScheduleOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeMonitoringScheduleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Name of a previously created monitoring schedule.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>Name of a previously created monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeNotebookInstance`.
///
/// <p>Returns information about a notebook instance.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNotebookInstance {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_notebook_instance_input::Builder,
}
impl DescribeNotebookInstance {
    /// Creates a new `DescribeNotebookInstance`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeNotebookInstance,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeNotebookInstanceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeNotebookInstanceOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeNotebookInstanceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the notebook instance that you want information about.</p>
    pub fn notebook_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_name(input.into());
        self
    }
    /// <p>The name of the notebook instance that you want information about.</p>
    pub fn set_notebook_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_notebook_instance_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeNotebookInstanceLifecycleConfig`.
///
/// <p>Returns a description of a notebook instance lifecycle configuration.</p>
/// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNotebookInstanceLifecycleConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_notebook_instance_lifecycle_config_input::Builder,
}
impl DescribeNotebookInstanceLifecycleConfig {
    /// Creates a new `DescribeNotebookInstanceLifecycleConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeNotebookInstanceLifecycleConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DescribeNotebookInstanceLifecycleConfigError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeNotebookInstanceLifecycleConfigOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DescribeNotebookInstanceLifecycleConfigError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the lifecycle configuration to describe.</p>
    pub fn notebook_instance_lifecycle_config_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .notebook_instance_lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of the lifecycle configuration to describe.</p>
    pub fn set_notebook_instance_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .set_notebook_instance_lifecycle_config_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribePipeline`.
///
/// <p>Describes the details of a pipeline.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribePipeline {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_pipeline_input::Builder,
}
impl DescribePipeline {
    /// Creates a new `DescribePipeline`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribePipeline,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribePipelineError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribePipelineOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribePipelineError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the pipeline to describe.</p>
    pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p>The name of the pipeline to describe.</p>
    pub fn set_pipeline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribePipelineDefinitionForExecution`.
///
/// <p>Describes the details of an execution's pipeline definition.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribePipelineDefinitionForExecution {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_pipeline_definition_for_execution_input::Builder,
}
impl DescribePipelineDefinitionForExecution {
    /// Creates a new `DescribePipelineDefinitionForExecution`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribePipelineDefinitionForExecution,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DescribePipelineDefinitionForExecutionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribePipelineDefinitionForExecutionOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DescribePipelineDefinitionForExecutionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn pipeline_execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn set_pipeline_execution_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribePipelineExecution`.
///
/// <p>Describes the details of a pipeline execution.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribePipelineExecution {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_pipeline_execution_input::Builder,
}
impl DescribePipelineExecution {
    /// Creates a new `DescribePipelineExecution`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribePipelineExecution,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribePipelineExecutionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribePipelineExecutionOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribePipelineExecutionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn pipeline_execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn set_pipeline_execution_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeProcessingJob`.
///
/// <p>Returns a description of a processing job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProcessingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_processing_job_input::Builder,
}
impl DescribeProcessingJob {
    /// Creates a new `DescribeProcessingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeProcessingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeProcessingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeProcessingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeProcessingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn processing_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.processing_job_name(input.into());
        self
    }
    /// <p>The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    pub fn set_processing_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_processing_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeProject`.
///
/// <p>Describes the details of a project.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProject {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_project_input::Builder,
}
impl DescribeProject {
    /// Creates a new `DescribeProject`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeProject,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeProjectError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeProjectOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeProjectError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the project to describe.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.project_name(input.into());
        self
    }
    /// <p>The name of the project to describe.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_project_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeSpace`.
///
/// <p>Describes the space.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSpace {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_space_input::Builder,
}
impl DescribeSpace {
    /// Creates a new `DescribeSpace`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeSpace,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeSpaceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeSpaceOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeSpaceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_space_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeStudioLifecycleConfig`.
///
/// <p>Describes the Studio Lifecycle Configuration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStudioLifecycleConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_studio_lifecycle_config_input::Builder,
}
impl DescribeStudioLifecycleConfig {
    /// Creates a new `DescribeStudioLifecycleConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeStudioLifecycleConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeStudioLifecycleConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeStudioLifecycleConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeStudioLifecycleConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Studio Lifecycle Configuration to describe.</p>
    pub fn studio_lifecycle_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.studio_lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of the Studio Lifecycle Configuration to describe.</p>
    pub fn set_studio_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_studio_lifecycle_config_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeSubscribedWorkteam`.
///
/// <p>Gets information about a work team provided by a vendor. It returns details about the subscription with a vendor in the Amazon Web Services Marketplace.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSubscribedWorkteam {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_subscribed_workteam_input::Builder,
}
impl DescribeSubscribedWorkteam {
    /// Creates a new `DescribeSubscribedWorkteam`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeSubscribedWorkteam,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeSubscribedWorkteamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeSubscribedWorkteamOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeSubscribedWorkteamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the subscribed work team to describe.</p>
    pub fn workteam_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workteam_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the subscribed work team to describe.</p>
    pub fn set_workteam_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workteam_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeTrainingJob`.
///
/// <p>Returns information about a training job. </p>
/// <p>Some of the attributes below only appear if the training job successfully starts. If the training job fails, <code>TrainingJobStatus</code> is <code>Failed</code> and, depending on the <code>FailureReason</code>, attributes like <code>TrainingStartTime</code>, <code>TrainingTimeInSeconds</code>, <code>TrainingEndTime</code>, and <code>BillableTimeInSeconds</code> may not be present in the response.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrainingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_training_job_input::Builder,
}
impl DescribeTrainingJob {
    /// Creates a new `DescribeTrainingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeTrainingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeTrainingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeTrainingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeTrainingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the training job.</p>
    pub fn training_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.training_job_name(input.into());
        self
    }
    /// <p>The name of the training job.</p>
    pub fn set_training_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_training_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeTransformJob`.
///
/// <p>Returns information about a transform job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransformJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_transform_job_input::Builder,
}
impl DescribeTransformJob {
    /// Creates a new `DescribeTransformJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeTransformJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeTransformJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeTransformJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeTransformJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the transform job that you want to view details of.</p>
    pub fn transform_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.transform_job_name(input.into());
        self
    }
    /// <p>The name of the transform job that you want to view details of.</p>
    pub fn set_transform_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_transform_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeTrial`.
///
/// <p>Provides a list of a trial's properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrial {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_trial_input::Builder,
}
impl DescribeTrial {
    /// Creates a new `DescribeTrial`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeTrial,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeTrialError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeTrialOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeTrialError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the trial to describe.</p>
    pub fn trial_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_name(input.into());
        self
    }
    /// <p>The name of the trial to describe.</p>
    pub fn set_trial_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trial_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeTrialComponent`.
///
/// <p>Provides a list of a trials component's properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrialComponent {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_trial_component_input::Builder,
}
impl DescribeTrialComponent {
    /// Creates a new `DescribeTrialComponent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeTrialComponent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeTrialComponentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeTrialComponentOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeTrialComponentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the trial component to describe.</p>
    pub fn trial_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_component_name(input.into());
        self
    }
    /// <p>The name of the trial component to describe.</p>
    pub fn set_trial_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_trial_component_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeUserProfile`.
///
/// <p>Describes a user profile. For more information, see <code>CreateUserProfile</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeUserProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_user_profile_input::Builder,
}
impl DescribeUserProfile {
    /// Creates a new `DescribeUserProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeUserProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeUserProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeUserProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeUserProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The user profile name. This value is not case sensitive.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>The user profile name. This value is not case sensitive.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeWorkforce`.
///
/// <p>Lists private workforce information, including workforce name, Amazon Resource Name (ARN), and, if applicable, allowed IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Allowable IP address ranges are the IP addresses that workers can use to access tasks. </p> <important>
/// <p>This operation applies only to private workforces.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeWorkforce {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_workforce_input::Builder,
}
impl DescribeWorkforce {
    /// Creates a new `DescribeWorkforce`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeWorkforce,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeWorkforceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeWorkforceOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeWorkforceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the private workforce whose access you want to restrict. <code>WorkforceName</code> is automatically set to <code>default</code> when a workforce is created and cannot be modified. </p>
    pub fn workforce_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workforce_name(input.into());
        self
    }
    /// <p>The name of the private workforce whose access you want to restrict. <code>WorkforceName</code> is automatically set to <code>default</code> when a workforce is created and cannot be modified. </p>
    pub fn set_workforce_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workforce_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeWorkteam`.
///
/// <p>Gets information about a specific work team. You can see information such as the create date, the last updated date, membership information, and the work team's Amazon Resource Name (ARN).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeWorkteam {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_workteam_input::Builder,
}
impl DescribeWorkteam {
    /// Creates a new `DescribeWorkteam`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeWorkteam,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeWorkteamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeWorkteamOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeWorkteamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the work team to return a description of.</p>
    pub fn workteam_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workteam_name(input.into());
        self
    }
    /// <p>The name of the work team to return a description of.</p>
    pub fn set_workteam_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workteam_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DisableSagemakerServicecatalogPortfolio`.
///
/// <p>Disables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisableSagemakerServicecatalogPortfolio {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::disable_sagemaker_servicecatalog_portfolio_input::Builder,
}
impl DisableSagemakerServicecatalogPortfolio {
    /// Creates a new `DisableSagemakerServicecatalogPortfolio`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DisableSagemakerServicecatalogPortfolio,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DisableSagemakerServicecatalogPortfolioError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DisableSagemakerServicecatalogPortfolioOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DisableSagemakerServicecatalogPortfolioError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}

/// Fluent builder constructing a request to `DisassociateTrialComponent`.
///
/// <p>Disassociates a trial component from a trial. This doesn't effect other trials the component is associated with. Before you can delete a component, you must disassociate the component from all trials it is associated with. To associate a trial component with a trial, call the <code>AssociateTrialComponent</code> API.</p>
/// <p>To get a list of the trials a component is associated with, use the <code>Search</code> API. Specify <code>ExperimentTrialComponent</code> for the <code>Resource</code> parameter. The list appears in the response under <code>Results.TrialComponent.Parents</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateTrialComponent {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::disassociate_trial_component_input::Builder,
}
impl DisassociateTrialComponent {
    /// Creates a new `DisassociateTrialComponent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DisassociateTrialComponent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DisassociateTrialComponentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DisassociateTrialComponentOutput,
        aws_smithy_http::result::SdkError<crate::error::DisassociateTrialComponentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the component to disassociate from the trial.</p>
    pub fn trial_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_component_name(input.into());
        self
    }
    /// <p>The name of the component to disassociate from the trial.</p>
    pub fn set_trial_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_trial_component_name(input);
        self
    }
    /// <p>The name of the trial to disassociate from.</p>
    pub fn trial_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_name(input.into());
        self
    }
    /// <p>The name of the trial to disassociate from.</p>
    pub fn set_trial_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trial_name(input);
        self
    }
}

/// Fluent builder constructing a request to `EnableSagemakerServicecatalogPortfolio`.
///
/// <p>Enables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct EnableSagemakerServicecatalogPortfolio {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::enable_sagemaker_servicecatalog_portfolio_input::Builder,
}
impl EnableSagemakerServicecatalogPortfolio {
    /// Creates a new `EnableSagemakerServicecatalogPortfolio`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::EnableSagemakerServicecatalogPortfolio,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::EnableSagemakerServicecatalogPortfolioError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::EnableSagemakerServicecatalogPortfolioOutput,
        aws_smithy_http::result::SdkError<
            crate::error::EnableSagemakerServicecatalogPortfolioError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}

/// Fluent builder constructing a request to `GetDeviceFleetReport`.
///
/// <p>Describes a fleet.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetDeviceFleetReport {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_device_fleet_report_input::Builder,
}
impl GetDeviceFleetReport {
    /// Creates a new `GetDeviceFleetReport`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetDeviceFleetReport,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetDeviceFleetReportError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetDeviceFleetReportOutput,
        aws_smithy_http::result::SdkError<crate::error::GetDeviceFleetReportError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the fleet.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetLineageGroupPolicy`.
///
/// <p>The resource policy for the lineage group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetLineageGroupPolicy {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_lineage_group_policy_input::Builder,
}
impl GetLineageGroupPolicy {
    /// Creates a new `GetLineageGroupPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetLineageGroupPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetLineageGroupPolicyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetLineageGroupPolicyOutput,
        aws_smithy_http::result::SdkError<crate::error::GetLineageGroupPolicyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name or Amazon Resource Name (ARN) of the lineage group.</p>
    pub fn lineage_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lineage_group_name(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the lineage group.</p>
    pub fn set_lineage_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_lineage_group_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetModelPackageGroupPolicy`.
///
/// <p>Gets a resource policy that manages access for a model group. For information about resource policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetModelPackageGroupPolicy {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_model_package_group_policy_input::Builder,
}
impl GetModelPackageGroupPolicy {
    /// Creates a new `GetModelPackageGroupPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetModelPackageGroupPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetModelPackageGroupPolicyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetModelPackageGroupPolicyOutput,
        aws_smithy_http::result::SdkError<crate::error::GetModelPackageGroupPolicyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model group for which to get the resource policy.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_group_name(input.into());
        self
    }
    /// <p>The name of the model group for which to get the resource policy.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_group_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSagemakerServicecatalogPortfolioStatus`.
///
/// <p>Gets the status of Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSagemakerServicecatalogPortfolioStatus {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_sagemaker_servicecatalog_portfolio_status_input::Builder,
}
impl GetSagemakerServicecatalogPortfolioStatus {
    /// Creates a new `GetSagemakerServicecatalogPortfolioStatus`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSagemakerServicecatalogPortfolioStatus,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::GetSagemakerServicecatalogPortfolioStatusError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSagemakerServicecatalogPortfolioStatusOutput,
        aws_smithy_http::result::SdkError<
            crate::error::GetSagemakerServicecatalogPortfolioStatusError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}

/// Fluent builder constructing a request to `GetSearchSuggestions`.
///
/// <p>An auto-complete API for the search functionality in the Amazon SageMaker console. It returns suggestions of possible matches for the property name to use in <code>Search</code> queries. Provides suggestions for <code>HyperParameters</code>, <code>Tags</code>, and <code>Metrics</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSearchSuggestions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_search_suggestions_input::Builder,
}
impl GetSearchSuggestions {
    /// Creates a new `GetSearchSuggestions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSearchSuggestions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetSearchSuggestionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSearchSuggestionsOutput,
        aws_smithy_http::result::SdkError<crate::error::GetSearchSuggestionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Amazon SageMaker resource to search for.</p>
    pub fn resource(mut self, input: crate::model::ResourceType) -> Self {
        self.inner = self.inner.resource(input);
        self
    }
    /// <p>The name of the Amazon SageMaker resource to search for.</p>
    pub fn set_resource(mut self, input: std::option::Option<crate::model::ResourceType>) -> Self {
        self.inner = self.inner.set_resource(input);
        self
    }
    /// <p>Limits the property names that are included in the response.</p>
    pub fn suggestion_query(mut self, input: crate::model::SuggestionQuery) -> Self {
        self.inner = self.inner.suggestion_query(input);
        self
    }
    /// <p>Limits the property names that are included in the response.</p>
    pub fn set_suggestion_query(
        mut self,
        input: std::option::Option<crate::model::SuggestionQuery>,
    ) -> Self {
        self.inner = self.inner.set_suggestion_query(input);
        self
    }
}

/// Fluent builder constructing a request to `ImportHubContent`.
///
/// <p>Import hub content.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ImportHubContent {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::import_hub_content_input::Builder,
}
impl ImportHubContent {
    /// Creates a new `ImportHubContent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ImportHubContent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ImportHubContentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ImportHubContentOutput,
        aws_smithy_http::result::SdkError<crate::error::ImportHubContentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the hub content to import.</p>
    pub fn hub_content_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_name(input.into());
        self
    }
    /// <p>The name of the hub content to import.</p>
    pub fn set_hub_content_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_name(input);
        self
    }
    /// <p>The version of the hub content to import.</p>
    pub fn hub_content_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_version(input.into());
        self
    }
    /// <p>The version of the hub content to import.</p>
    pub fn set_hub_content_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_version(input);
        self
    }
    /// <p>The type of hub content to import.</p>
    pub fn hub_content_type(mut self, input: crate::model::HubContentType) -> Self {
        self.inner = self.inner.hub_content_type(input);
        self
    }
    /// <p>The type of hub content to import.</p>
    pub fn set_hub_content_type(
        mut self,
        input: std::option::Option<crate::model::HubContentType>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_type(input);
        self
    }
    /// <p>The version of the hub content schema to import.</p>
    pub fn document_schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.document_schema_version(input.into());
        self
    }
    /// <p>The version of the hub content schema to import.</p>
    pub fn set_document_schema_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_document_schema_version(input);
        self
    }
    /// <p>The name of the hub to import content into.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub to import content into.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
    /// <p>The display name of the hub content to import.</p>
    pub fn hub_content_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_display_name(input.into());
        self
    }
    /// <p>The display name of the hub content to import.</p>
    pub fn set_hub_content_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_display_name(input);
        self
    }
    /// <p>A description of the hub content to import.</p>
    pub fn hub_content_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_description(input.into());
        self
    }
    /// <p>A description of the hub content to import.</p>
    pub fn set_hub_content_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_description(input);
        self
    }
    /// <p>Markdown files associated with the hub content to import.</p>
    pub fn hub_content_markdown(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_markdown(input.into());
        self
    }
    /// <p>Markdown files associated with the hub content to import.</p>
    pub fn set_hub_content_markdown(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_markdown(input);
        self
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn hub_content_document(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_document(input.into());
        self
    }
    /// <p>The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.</p>
    pub fn set_hub_content_document(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_document(input);
        self
    }
    /// Appends an item to `HubContentSearchKeywords`.
    ///
    /// To override the contents of this collection use [`set_hub_content_search_keywords`](Self::set_hub_content_search_keywords).
    ///
    /// <p>The searchable keywords of the hub content.</p>
    pub fn hub_content_search_keywords(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_search_keywords(input.into());
        self
    }
    /// <p>The searchable keywords of the hub content.</p>
    pub fn set_hub_content_search_keywords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_search_keywords(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags associated with the hub content.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Any tags associated with the hub content.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `ListActions`.
///
/// <p>Lists the actions in your account and their properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListActions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_actions_input::Builder,
}
impl ListActions {
    /// Creates a new `ListActions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListActions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListActionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListActionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListActionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListActionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListActionsPaginator {
        crate::paginator::ListActionsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only actions with the specified source URI.</p>
    pub fn source_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_uri(input.into());
        self
    }
    /// <p>A filter that returns only actions with the specified source URI.</p>
    pub fn set_source_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_uri(input);
        self
    }
    /// <p>A filter that returns only actions of the specified type.</p>
    pub fn action_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_type(input.into());
        self
    }
    /// <p>A filter that returns only actions of the specified type.</p>
    pub fn set_action_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_type(input);
        self
    }
    /// <p>A filter that returns only actions created on or after the specified time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A filter that returns only actions created on or after the specified time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A filter that returns only actions created on or before the specified time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A filter that returns only actions created on or before the specified time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortActionsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::SortActionsBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the previous call to <code>ListActions</code> didn't return the full set of actions, the call returns a token for getting the next set of actions.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListActions</code> didn't return the full set of actions, the call returns a token for getting the next set of actions.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of actions to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of actions to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAlgorithms`.
///
/// <p>Lists the machine learning algorithms that have been created.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAlgorithms {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_algorithms_input::Builder,
}
impl ListAlgorithms {
    /// Creates a new `ListAlgorithms`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAlgorithms,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAlgorithmsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAlgorithmsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAlgorithmsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAlgorithmsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAlgorithmsPaginator {
        crate::paginator::ListAlgorithmsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only algorithms created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only algorithms created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only algorithms created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only algorithms created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>The maximum number of algorithms to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of algorithms to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A string in the algorithm name. This filter returns only algorithms whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the algorithm name. This filter returns only algorithms whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>If the response to a previous <code>ListAlgorithms</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of algorithms, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListAlgorithms</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of algorithms, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::AlgorithmSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::AlgorithmSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAliases`.
///
/// <p>Lists the aliases of a specified image or image version.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAliases {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_aliases_input::Builder,
}
impl ListAliases {
    /// Creates a new `ListAliases`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAliases,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAliasesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAliasesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAliasesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAliasesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAliasesPaginator {
        crate::paginator::ListAliasesPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the image.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
    /// <p>The version of the image. If image version is not specified, the aliases of all versions of the image are listed.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.inner = self.inner.version(input);
        self
    }
    /// <p>The version of the image. If image version is not specified, the aliases of all versions of the image are listed.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_version(input);
        self
    }
    /// <p>The maximum number of aliases to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of aliases to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous call to <code>ListAliases</code> didn't return the full set of aliases, the call returns a token for retrieving the next set of aliases.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListAliases</code> didn't return the full set of aliases, the call returns a token for retrieving the next set of aliases.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAppImageConfigs`.
///
/// <p>Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAppImageConfigs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_app_image_configs_input::Builder,
}
impl ListAppImageConfigs {
    /// Creates a new `ListAppImageConfigs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAppImageConfigs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAppImageConfigsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAppImageConfigsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAppImageConfigsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAppImageConfigsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAppImageConfigsPaginator {
        crate::paginator::ListAppImageConfigsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of AppImageConfigs to return in the response. The default value is 10. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of AppImageConfigs to return in the response. The default value is 10. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous call to <code>ListImages</code> didn't return the full set of AppImageConfigs, the call returns a token for getting the next set of AppImageConfigs.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListImages</code> didn't return the full set of AppImageConfigs, the call returns a token for getting the next set of AppImageConfigs.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter that returns only AppImageConfigs whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A filter that returns only AppImageConfigs whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only AppImageConfigs created on or before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only AppImageConfigs created on or before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only AppImageConfigs created on or after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only AppImageConfigs created on or after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only AppImageConfigs modified on or before the specified time.</p>
    pub fn modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.modified_time_before(input);
        self
    }
    /// <p>A filter that returns only AppImageConfigs modified on or before the specified time.</p>
    pub fn set_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only AppImageConfigs modified on or after the specified time.</p>
    pub fn modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.modified_time_after(input);
        self
    }
    /// <p>A filter that returns only AppImageConfigs modified on or after the specified time.</p>
    pub fn set_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_modified_time_after(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::AppImageConfigSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::AppImageConfigSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListApps`.
///
/// <p>Lists apps.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListApps {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_apps_input::Builder,
}
impl ListApps {
    /// Creates a new `ListApps`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListApps,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAppsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAppsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAppsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAppsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAppsPaginator {
        crate::paginator::ListAppsPaginator::new(self.handle, self.inner)
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn sort_by(mut self, input: crate::model::AppSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::AppSortKey>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>A parameter to search for the domain ID.</p>
    pub fn domain_id_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id_equals(input.into());
        self
    }
    /// <p>A parameter to search for the domain ID.</p>
    pub fn set_domain_id_equals(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id_equals(input);
        self
    }
    /// <p>A parameter to search by user profile name. If <code>SpaceNameEquals</code> is set, then this value cannot be set.</p>
    pub fn user_profile_name_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name_equals(input.into());
        self
    }
    /// <p>A parameter to search by user profile name. If <code>SpaceNameEquals</code> is set, then this value cannot be set.</p>
    pub fn set_user_profile_name_equals(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name_equals(input);
        self
    }
    /// <p>A parameter to search by space name. If <code>UserProfileNameEquals</code> is set, then this value cannot be set.</p>
    pub fn space_name_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name_equals(input.into());
        self
    }
    /// <p>A parameter to search by space name. If <code>UserProfileNameEquals</code> is set, then this value cannot be set.</p>
    pub fn set_space_name_equals(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_space_name_equals(input);
        self
    }
}

/// Fluent builder constructing a request to `ListArtifacts`.
///
/// <p>Lists the artifacts in your account and their properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListArtifacts {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_artifacts_input::Builder,
}
impl ListArtifacts {
    /// Creates a new `ListArtifacts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListArtifacts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListArtifactsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListArtifactsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListArtifactsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListArtifactsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListArtifactsPaginator {
        crate::paginator::ListArtifactsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only artifacts with the specified source URI.</p>
    pub fn source_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_uri(input.into());
        self
    }
    /// <p>A filter that returns only artifacts with the specified source URI.</p>
    pub fn set_source_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_uri(input);
        self
    }
    /// <p>A filter that returns only artifacts of the specified type.</p>
    pub fn artifact_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.artifact_type(input.into());
        self
    }
    /// <p>A filter that returns only artifacts of the specified type.</p>
    pub fn set_artifact_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_artifact_type(input);
        self
    }
    /// <p>A filter that returns only artifacts created on or after the specified time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A filter that returns only artifacts created on or after the specified time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A filter that returns only artifacts created on or before the specified time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A filter that returns only artifacts created on or before the specified time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortArtifactsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::SortArtifactsBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the previous call to <code>ListArtifacts</code> didn't return the full set of artifacts, the call returns a token for getting the next set of artifacts.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListArtifacts</code> didn't return the full set of artifacts, the call returns a token for getting the next set of artifacts.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of artifacts to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of artifacts to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAssociations`.
///
/// <p>Lists the associations in your account and their properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAssociations {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_associations_input::Builder,
}
impl ListAssociations {
    /// Creates a new `ListAssociations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAssociations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAssociationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAssociationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAssociationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAssociationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAssociationsPaginator {
        crate::paginator::ListAssociationsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only associations with the specified source ARN.</p>
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_arn(input.into());
        self
    }
    /// <p>A filter that returns only associations with the specified source ARN.</p>
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_arn(input);
        self
    }
    /// <p>A filter that returns only associations with the specified destination Amazon Resource Name (ARN).</p>
    pub fn destination_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_arn(input.into());
        self
    }
    /// <p>A filter that returns only associations with the specified destination Amazon Resource Name (ARN).</p>
    pub fn set_destination_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination_arn(input);
        self
    }
    /// <p>A filter that returns only associations with the specified source type.</p>
    pub fn source_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_type(input.into());
        self
    }
    /// <p>A filter that returns only associations with the specified source type.</p>
    pub fn set_source_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_type(input);
        self
    }
    /// <p>A filter that returns only associations with the specified destination type.</p>
    pub fn destination_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_type(input.into());
        self
    }
    /// <p>A filter that returns only associations with the specified destination type.</p>
    pub fn set_destination_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination_type(input);
        self
    }
    /// <p>A filter that returns only associations of the specified type.</p>
    pub fn association_type(mut self, input: crate::model::AssociationEdgeType) -> Self {
        self.inner = self.inner.association_type(input);
        self
    }
    /// <p>A filter that returns only associations of the specified type.</p>
    pub fn set_association_type(
        mut self,
        input: std::option::Option<crate::model::AssociationEdgeType>,
    ) -> Self {
        self.inner = self.inner.set_association_type(input);
        self
    }
    /// <p>A filter that returns only associations created on or after the specified time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A filter that returns only associations created on or after the specified time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A filter that returns only associations created on or before the specified time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A filter that returns only associations created on or before the specified time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortAssociationsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::SortAssociationsBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the previous call to <code>ListAssociations</code> didn't return the full set of associations, the call returns a token for getting the next set of associations.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListAssociations</code> didn't return the full set of associations, the call returns a token for getting the next set of associations.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of associations to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of associations to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAutoMLJobs`.
///
/// <p>Request a list of jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAutoMLJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_auto_ml_jobs_input::Builder,
}
impl ListAutoMLJobs {
    /// Creates a new `ListAutoMLJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAutoMLJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAutoMLJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAutoMlJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAutoMLJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAutoMlJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAutoMlJobsPaginator {
        crate::paginator::ListAutoMlJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>Request a list of jobs, using a filter for time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Request a list of jobs, using a filter for time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Request a list of jobs, using a filter for time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Request a list of jobs, using a filter for time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Request a list of jobs, using a filter for time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>Request a list of jobs, using a filter for time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>Request a list of jobs, using a filter for time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>Request a list of jobs, using a filter for time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>Request a list of jobs, using a search filter for name.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Request a list of jobs, using a search filter for name.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>Request a list of jobs, using a filter for status.</p>
    pub fn status_equals(mut self, input: crate::model::AutoMlJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>Request a list of jobs, using a filter for status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::AutoMlJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::AutoMlSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::AutoMlSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>Name</code>.</p>
    pub fn sort_by(mut self, input: crate::model::AutoMlSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>Name</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::AutoMlSortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Request a list of jobs up to a specified limit.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Request a list of jobs up to a specified limit.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCandidatesForAutoMLJob`.
///
/// <p>List the candidates created for the job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCandidatesForAutoMLJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_candidates_for_auto_ml_job_input::Builder,
}
impl ListCandidatesForAutoMLJob {
    /// Creates a new `ListCandidatesForAutoMLJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCandidatesForAutoMLJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCandidatesForAutoMLJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCandidatesForAutoMlJobOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCandidatesForAutoMLJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCandidatesForAutoMlJobPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCandidatesForAutoMlJobPaginator {
        crate::paginator::ListCandidatesForAutoMlJobPaginator::new(self.handle, self.inner)
    }
    /// <p>List the candidates created for the job by providing the job's name.</p>
    pub fn auto_ml_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_ml_job_name(input.into());
        self
    }
    /// <p>List the candidates created for the job by providing the job's name.</p>
    pub fn set_auto_ml_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_auto_ml_job_name(input);
        self
    }
    /// <p>List the candidates for the job and filter by status.</p>
    pub fn status_equals(mut self, input: crate::model::CandidateStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>List the candidates for the job and filter by status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::CandidateStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>List the candidates for the job and filter by candidate name.</p>
    pub fn candidate_name_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.candidate_name_equals(input.into());
        self
    }
    /// <p>List the candidates for the job and filter by candidate name.</p>
    pub fn set_candidate_name_equals(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_candidate_name_equals(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::AutoMlSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::AutoMlSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>Descending</code>.</p>
    pub fn sort_by(mut self, input: crate::model::CandidateSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>Descending</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::CandidateSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>List the job's candidates up to a specified limit.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>List the job's candidates up to a specified limit.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCodeRepositories`.
///
/// <p>Gets a list of the Git repositories in your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCodeRepositories {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_code_repositories_input::Builder,
}
impl ListCodeRepositories {
    /// Creates a new `ListCodeRepositories`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCodeRepositories,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCodeRepositoriesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCodeRepositoriesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCodeRepositoriesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCodeRepositoriesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCodeRepositoriesPaginator {
        crate::paginator::ListCodeRepositoriesPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only Git repositories that were created after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only Git repositories that were created after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only Git repositories that were created before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only Git repositories that were created before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only Git repositories that were last modified after the specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only Git repositories that were last modified after the specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only Git repositories that were last modified before the specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only Git repositories that were last modified before the specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>The maximum number of Git repositories to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of Git repositories to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A string in the Git repositories name. This filter returns only repositories whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the Git repositories name. This filter returns only repositories whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>If the result of a <code>ListCodeRepositoriesOutput</code> request was truncated, the response includes a <code>NextToken</code>. To get the next set of Git repositories, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of a <code>ListCodeRepositoriesOutput</code> request was truncated, the response includes a <code>NextToken</code>. To get the next set of Git repositories, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn sort_by(mut self, input: crate::model::CodeRepositorySortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::CodeRepositorySortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::CodeRepositorySortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::CodeRepositorySortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCompilationJobs`.
///
/// <p>Lists model compilation jobs that satisfy various filters.</p>
/// <p>To create a model compilation job, use <code>CreateCompilationJob</code>. To get information about a particular model compilation job you have created, use <code>DescribeCompilationJob</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCompilationJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_compilation_jobs_input::Builder,
}
impl ListCompilationJobs {
    /// Creates a new `ListCompilationJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCompilationJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCompilationJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCompilationJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCompilationJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCompilationJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCompilationJobsPaginator {
        crate::paginator::ListCompilationJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>If the result of the previous <code>ListCompilationJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model compilation jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListCompilationJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model compilation jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of model compilation jobs to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of model compilation jobs to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A filter that returns the model compilation jobs that were created after a specified time. </p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns the model compilation jobs that were created after a specified time. </p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns the model compilation jobs that were created before a specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns the model compilation jobs that were created before a specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns the model compilation jobs that were modified after a specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns the model compilation jobs that were modified after a specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns the model compilation jobs that were modified before a specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns the model compilation jobs that were modified before a specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns the model compilation jobs whose name contains a specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A filter that returns the model compilation jobs whose name contains a specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that retrieves model compilation jobs with a specific <code>DescribeCompilationJobResponse$CompilationJobStatus</code> status.</p>
    pub fn status_equals(mut self, input: crate::model::CompilationJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that retrieves model compilation jobs with a specific <code>DescribeCompilationJobResponse$CompilationJobStatus</code> status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::CompilationJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::ListCompilationJobsSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ListCompilationJobsSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListContexts`.
///
/// <p>Lists the contexts in your account and their properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListContexts {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_contexts_input::Builder,
}
impl ListContexts {
    /// Creates a new `ListContexts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListContexts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListContextsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListContextsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListContextsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListContextsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListContextsPaginator {
        crate::paginator::ListContextsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only contexts with the specified source URI.</p>
    pub fn source_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_uri(input.into());
        self
    }
    /// <p>A filter that returns only contexts with the specified source URI.</p>
    pub fn set_source_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_uri(input);
        self
    }
    /// <p>A filter that returns only contexts of the specified type.</p>
    pub fn context_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.context_type(input.into());
        self
    }
    /// <p>A filter that returns only contexts of the specified type.</p>
    pub fn set_context_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_context_type(input);
        self
    }
    /// <p>A filter that returns only contexts created on or after the specified time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A filter that returns only contexts created on or after the specified time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A filter that returns only contexts created on or before the specified time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A filter that returns only contexts created on or before the specified time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortContextsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::SortContextsBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the previous call to <code>ListContexts</code> didn't return the full set of contexts, the call returns a token for getting the next set of contexts.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListContexts</code> didn't return the full set of contexts, the call returns a token for getting the next set of contexts.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of contexts to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of contexts to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListDataQualityJobDefinitions`.
///
/// <p>Lists the data quality job definitions in your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListDataQualityJobDefinitions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_data_quality_job_definitions_input::Builder,
}
impl ListDataQualityJobDefinitions {
    /// Creates a new `ListDataQualityJobDefinitions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListDataQualityJobDefinitions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListDataQualityJobDefinitionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListDataQualityJobDefinitionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListDataQualityJobDefinitionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListDataQualityJobDefinitionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListDataQualityJobDefinitionsPaginator {
        crate::paginator::ListDataQualityJobDefinitionsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that lists the data quality job definitions associated with the specified endpoint.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>A filter that lists the data quality job definitions associated with the specified endpoint.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::MonitoringJobDefinitionSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::MonitoringJobDefinitionSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of the previous <code>ListDataQualityJobDefinitions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of transform jobs, use the token in the next request.&gt;</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListDataQualityJobDefinitions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of transform jobs, use the token in the next request.&gt;</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of data quality monitoring job definitions to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of data quality monitoring job definitions to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A string in the data quality monitoring job definition name. This filter returns only data quality monitoring job definitions whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the data quality monitoring job definition name. This filter returns only data quality monitoring job definitions whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only data quality monitoring job definitions created before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only data quality monitoring job definitions created before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only data quality monitoring job definitions created after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only data quality monitoring job definitions created after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
}

/// Fluent builder constructing a request to `ListDeviceFleets`.
///
/// <p>Returns a list of devices in the fleet.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListDeviceFleets {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_device_fleets_input::Builder,
}
impl ListDeviceFleets {
    /// Creates a new `ListDeviceFleets`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListDeviceFleets,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListDeviceFleetsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListDeviceFleetsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListDeviceFleetsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListDeviceFleetsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListDeviceFleetsPaginator {
        crate::paginator::ListDeviceFleetsPaginator::new(self.handle, self.inner)
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to select.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to select.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Filter fleets where packaging job was created after specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Filter fleets where packaging job was created after specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Filter fleets where the edge packaging job was created before specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Filter fleets where the edge packaging job was created before specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Select fleets where the job was updated after X</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>Select fleets where the job was updated after X</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>Select fleets where the job was updated before X</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>Select fleets where the job was updated before X</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>Filter for fleets containing this name in their fleet device name.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Filter for fleets containing this name in their fleet device name.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>The column to sort by.</p>
    pub fn sort_by(mut self, input: crate::model::ListDeviceFleetsSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The column to sort by.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ListDeviceFleetsSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>What direction to sort in.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>What direction to sort in.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListDevices`.
///
/// <p>A list of devices.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListDevices {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_devices_input::Builder,
}
impl ListDevices {
    /// Creates a new `ListDevices`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListDevices,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListDevicesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListDevicesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListDevicesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListDevicesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListDevicesPaginator {
        crate::paginator::ListDevicesPaginator::new(self.handle, self.inner)
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Maximum number of results to select.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Maximum number of results to select.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Select fleets where the job was updated after X</p>
    pub fn latest_heartbeat_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.latest_heartbeat_after(input);
        self
    }
    /// <p>Select fleets where the job was updated after X</p>
    pub fn set_latest_heartbeat_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_latest_heartbeat_after(input);
        self
    }
    /// <p>A filter that searches devices that contains this name in any of their models.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_name(input.into());
        self
    }
    /// <p>A filter that searches devices that contains this name in any of their models.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_name(input);
        self
    }
    /// <p>Filter for fleets containing this name in their device fleet name.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>Filter for fleets containing this name in their device fleet name.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
}

/// Fluent builder constructing a request to `ListDomains`.
///
/// <p>Lists the domains.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListDomains {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_domains_input::Builder,
}
impl ListDomains {
    /// Creates a new `ListDomains`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListDomains,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListDomainsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListDomainsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListDomainsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListDomainsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListDomainsPaginator {
        crate::paginator::ListDomainsPaginator::new(self.handle, self.inner)
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListEdgeDeploymentPlans`.
///
/// <p>Lists all edge deployment plans.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListEdgeDeploymentPlans {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_edge_deployment_plans_input::Builder,
}
impl ListEdgeDeploymentPlans {
    /// Creates a new `ListEdgeDeploymentPlans`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListEdgeDeploymentPlans,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListEdgeDeploymentPlansError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListEdgeDeploymentPlansOutput,
        aws_smithy_http::result::SdkError<crate::error::ListEdgeDeploymentPlansError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListEdgeDeploymentPlansPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListEdgeDeploymentPlansPaginator {
        crate::paginator::ListEdgeDeploymentPlansPaginator::new(self.handle, self.inner)
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to select (50 by default).</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to select (50 by default).</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Selects edge deployment plans created after this time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Selects edge deployment plans created after this time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Selects edge deployment plans created before this time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Selects edge deployment plans created before this time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Selects edge deployment plans that were last updated after this time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>Selects edge deployment plans that were last updated after this time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>Selects edge deployment plans that were last updated before this time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>Selects edge deployment plans that were last updated before this time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>Selects edge deployment plans with names containing this name.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Selects edge deployment plans with names containing this name.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>Selects edge deployment plans with a device fleet name containing this name.</p>
    pub fn device_fleet_name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name_contains(input.into());
        self
    }
    /// <p>Selects edge deployment plans with a device fleet name containing this name.</p>
    pub fn set_device_fleet_name_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name_contains(input);
        self
    }
    /// <p>The column by which to sort the edge deployment plans. Can be one of <code>NAME</code>, <code>DEVICEFLEETNAME</code>, <code>CREATIONTIME</code>, <code>LASTMODIFIEDTIME</code>.</p>
    pub fn sort_by(mut self, input: crate::model::ListEdgeDeploymentPlansSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The column by which to sort the edge deployment plans. Can be one of <code>NAME</code>, <code>DEVICEFLEETNAME</code>, <code>CREATIONTIME</code>, <code>LASTMODIFIEDTIME</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ListEdgeDeploymentPlansSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The direction of the sorting (ascending or descending).</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The direction of the sorting (ascending or descending).</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListEdgePackagingJobs`.
///
/// <p>Returns a list of edge packaging jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListEdgePackagingJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_edge_packaging_jobs_input::Builder,
}
impl ListEdgePackagingJobs {
    /// Creates a new `ListEdgePackagingJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListEdgePackagingJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListEdgePackagingJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListEdgePackagingJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListEdgePackagingJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListEdgePackagingJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListEdgePackagingJobsPaginator {
        crate::paginator::ListEdgePackagingJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The response from the last list when returning a list large enough to need tokening.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Maximum number of results to select.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Maximum number of results to select.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Select jobs where the job was created after specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Select jobs where the job was created after specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Select jobs where the job was created before specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Select jobs where the job was created before specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Select jobs where the job was updated after specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>Select jobs where the job was updated after specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>Select jobs where the job was updated before specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>Select jobs where the job was updated before specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>Filter for jobs containing this name in their packaging job name.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Filter for jobs containing this name in their packaging job name.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>Filter for jobs where the model name contains this string.</p>
    pub fn model_name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_name_contains(input.into());
        self
    }
    /// <p>Filter for jobs where the model name contains this string.</p>
    pub fn set_model_name_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_name_contains(input);
        self
    }
    /// <p>The job status to filter for.</p>
    pub fn status_equals(mut self, input: crate::model::EdgePackagingJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>The job status to filter for.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::EdgePackagingJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>Use to specify what column to sort by.</p>
    pub fn sort_by(mut self, input: crate::model::ListEdgePackagingJobsSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Use to specify what column to sort by.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ListEdgePackagingJobsSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>What direction to sort by.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>What direction to sort by.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListEndpointConfigs`.
///
/// <p>Lists endpoint configurations.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListEndpointConfigs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_endpoint_configs_input::Builder,
}
impl ListEndpointConfigs {
    /// Creates a new `ListEndpointConfigs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListEndpointConfigs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListEndpointConfigsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListEndpointConfigsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListEndpointConfigsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListEndpointConfigsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListEndpointConfigsPaginator {
        crate::paginator::ListEndpointConfigsPaginator::new(self.handle, self.inner)
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::EndpointConfigSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::EndpointConfigSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::OrderKey) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::OrderKey>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of the previous <code>ListEndpointConfig</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of endpoint configurations, use the token in the next request. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListEndpointConfig</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of endpoint configurations, use the token in the next request. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of training jobs to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of training jobs to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A string in the endpoint configuration name. This filter returns only endpoint configurations whose name contains the specified string. </p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the endpoint configuration name. This filter returns only endpoint configurations whose name contains the specified string. </p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only endpoint configurations created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only endpoint configurations created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only endpoint configurations with a creation time greater than or equal to the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only endpoint configurations with a creation time greater than or equal to the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
}

/// Fluent builder constructing a request to `ListEndpoints`.
///
/// <p>Lists endpoints.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListEndpoints {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_endpoints_input::Builder,
}
impl ListEndpoints {
    /// Creates a new `ListEndpoints`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListEndpoints,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListEndpointsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListEndpointsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListEndpointsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListEndpointsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListEndpointsPaginator {
        crate::paginator::ListEndpointsPaginator::new(self.handle, self.inner)
    }
    /// <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::EndpointSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::EndpointSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::OrderKey) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::OrderKey>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of a <code>ListEndpoints</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of endpoints, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of a <code>ListEndpoints</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of endpoints, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of endpoints to return in the response. This value defaults to 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of endpoints to return in the response. This value defaults to 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A string in endpoint names. This filter returns only endpoints whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in endpoint names. This filter returns only endpoints whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only endpoints that were created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only endpoints that were created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only endpoints with a creation time greater than or equal to the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only endpoints with a creation time greater than or equal to the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p> A filter that returns only endpoints that were modified before the specified timestamp. </p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p> A filter that returns only endpoints that were modified before the specified timestamp. </p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p> A filter that returns only endpoints that were modified after the specified timestamp. </p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p> A filter that returns only endpoints that were modified after the specified timestamp. </p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p> A filter that returns only endpoints with the specified status.</p>
    pub fn status_equals(mut self, input: crate::model::EndpointStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p> A filter that returns only endpoints with the specified status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::EndpointStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
}

/// Fluent builder constructing a request to `ListExperiments`.
///
/// <p>Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListExperiments {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_experiments_input::Builder,
}
impl ListExperiments {
    /// Creates a new `ListExperiments`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListExperiments,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListExperimentsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListExperimentsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListExperimentsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListExperimentsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListExperimentsPaginator {
        crate::paginator::ListExperimentsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only experiments created after the specified time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A filter that returns only experiments created after the specified time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A filter that returns only experiments created before the specified time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A filter that returns only experiments created before the specified time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortExperimentsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::SortExperimentsBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the previous call to <code>ListExperiments</code> didn't return the full set of experiments, the call returns a token for getting the next set of experiments.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListExperiments</code> didn't return the full set of experiments, the call returns a token for getting the next set of experiments.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of experiments to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of experiments to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListFeatureGroups`.
///
/// <p>List <code>FeatureGroup</code>s based on given filter and order.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListFeatureGroups {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_feature_groups_input::Builder,
}
impl ListFeatureGroups {
    /// Creates a new `ListFeatureGroups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListFeatureGroups,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListFeatureGroupsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListFeatureGroupsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListFeatureGroupsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A string that partially matches one or more <code>FeatureGroup</code>s names. Filters <code>FeatureGroup</code>s by name. </p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string that partially matches one or more <code>FeatureGroup</code>s names. Filters <code>FeatureGroup</code>s by name. </p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A <code>FeatureGroup</code> status. Filters by <code>FeatureGroup</code> status. </p>
    pub fn feature_group_status_equals(mut self, input: crate::model::FeatureGroupStatus) -> Self {
        self.inner = self.inner.feature_group_status_equals(input);
        self
    }
    /// <p>A <code>FeatureGroup</code> status. Filters by <code>FeatureGroup</code> status. </p>
    pub fn set_feature_group_status_equals(
        mut self,
        input: std::option::Option<crate::model::FeatureGroupStatus>,
    ) -> Self {
        self.inner = self.inner.set_feature_group_status_equals(input);
        self
    }
    /// <p>An <code>OfflineStore</code> status. Filters by <code>OfflineStore</code> status. </p>
    pub fn offline_store_status_equals(
        mut self,
        input: crate::model::OfflineStoreStatusValue,
    ) -> Self {
        self.inner = self.inner.offline_store_status_equals(input);
        self
    }
    /// <p>An <code>OfflineStore</code> status. Filters by <code>OfflineStore</code> status. </p>
    pub fn set_offline_store_status_equals(
        mut self,
        input: std::option::Option<crate::model::OfflineStoreStatusValue>,
    ) -> Self {
        self.inner = self.inner.set_offline_store_status_equals(input);
        self
    }
    /// <p>Use this parameter to search for <code>FeatureGroups</code>s created after a specific date and time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Use this parameter to search for <code>FeatureGroups</code>s created after a specific date and time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Use this parameter to search for <code>FeatureGroups</code>s created before a specific date and time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Use this parameter to search for <code>FeatureGroups</code>s created before a specific date and time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>The order in which feature groups are listed.</p>
    pub fn sort_order(mut self, input: crate::model::FeatureGroupSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The order in which feature groups are listed.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::FeatureGroupSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The value on which the feature group list is sorted.</p>
    pub fn sort_by(mut self, input: crate::model::FeatureGroupSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The value on which the feature group list is sorted.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::FeatureGroupSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The maximum number of results returned by <code>ListFeatureGroups</code>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results returned by <code>ListFeatureGroups</code>.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A token to resume pagination of <code>ListFeatureGroups</code> results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to resume pagination of <code>ListFeatureGroups</code> results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListFlowDefinitions`.
///
/// <p>Returns information about the flow definitions in your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListFlowDefinitions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_flow_definitions_input::Builder,
}
impl ListFlowDefinitions {
    /// Creates a new `ListFlowDefinitions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListFlowDefinitions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListFlowDefinitionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListFlowDefinitionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListFlowDefinitionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListFlowDefinitionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListFlowDefinitionsPaginator {
        crate::paginator::ListFlowDefinitionsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only flow definitions with a creation time greater than or equal to the specified timestamp.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only flow definitions with a creation time greater than or equal to the specified timestamp.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only flow definitions that were created before the specified timestamp.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only flow definitions that were created before the specified timestamp.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A token to resume pagination.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to resume pagination.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListHubContents`.
///
/// <p>List the contents of a hub.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListHubContents {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_hub_contents_input::Builder,
}
impl ListHubContents {
    /// Creates a new `ListHubContents`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListHubContents,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListHubContentsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListHubContentsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListHubContentsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the hub to list the contents of.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub to list the contents of.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
    /// <p>The type of hub content to list.</p>
    pub fn hub_content_type(mut self, input: crate::model::HubContentType) -> Self {
        self.inner = self.inner.hub_content_type(input);
        self
    }
    /// <p>The type of hub content to list.</p>
    pub fn set_hub_content_type(
        mut self,
        input: std::option::Option<crate::model::HubContentType>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_type(input);
        self
    }
    /// <p>Only list hub content if the name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Only list hub content if the name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>The upper bound of the hub content schema verion.</p>
    pub fn max_schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.max_schema_version(input.into());
        self
    }
    /// <p>The upper bound of the hub content schema verion.</p>
    pub fn set_max_schema_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_max_schema_version(input);
        self
    }
    /// <p>Only list hub content that was created before the time specified.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Only list hub content that was created before the time specified.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Only list hub content that was created after the time specified.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Only list hub content that was created after the time specified.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Sort hub content versions by either name or creation time.</p>
    pub fn sort_by(mut self, input: crate::model::HubContentSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sort hub content versions by either name or creation time.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::HubContentSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Sort hubs by ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Sort hubs by ascending or descending order.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The maximum amount of hub content to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum amount of hub content to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the response to a previous <code>ListHubContents</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hub content, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListHubContents</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hub content, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListHubContentVersions`.
///
/// <p>List hub content versions.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListHubContentVersions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_hub_content_versions_input::Builder,
}
impl ListHubContentVersions {
    /// Creates a new `ListHubContentVersions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListHubContentVersions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListHubContentVersionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListHubContentVersionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListHubContentVersionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the hub to list the content versions of.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub to list the content versions of.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
    /// <p>The type of hub content to list versions of.</p>
    pub fn hub_content_type(mut self, input: crate::model::HubContentType) -> Self {
        self.inner = self.inner.hub_content_type(input);
        self
    }
    /// <p>The type of hub content to list versions of.</p>
    pub fn set_hub_content_type(
        mut self,
        input: std::option::Option<crate::model::HubContentType>,
    ) -> Self {
        self.inner = self.inner.set_hub_content_type(input);
        self
    }
    /// <p>The name of the hub content.</p>
    pub fn hub_content_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_content_name(input.into());
        self
    }
    /// <p>The name of the hub content.</p>
    pub fn set_hub_content_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_content_name(input);
        self
    }
    /// <p>The lower bound of the hub content versions to list.</p>
    pub fn min_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.min_version(input.into());
        self
    }
    /// <p>The lower bound of the hub content versions to list.</p>
    pub fn set_min_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_min_version(input);
        self
    }
    /// <p>The upper bound of the hub content schema version.</p>
    pub fn max_schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.max_schema_version(input.into());
        self
    }
    /// <p>The upper bound of the hub content schema version.</p>
    pub fn set_max_schema_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_max_schema_version(input);
        self
    }
    /// <p>Only list hub content versions that were created before the time specified.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Only list hub content versions that were created before the time specified.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Only list hub content versions that were created after the time specified.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Only list hub content versions that were created after the time specified.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Sort hub content versions by either name or creation time.</p>
    pub fn sort_by(mut self, input: crate::model::HubContentSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sort hub content versions by either name or creation time.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::HubContentSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Sort hub content versions by ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Sort hub content versions by ascending or descending order.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The maximum number of hub content versions to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of hub content versions to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the response to a previous <code>ListHubContentVersions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hub content versions, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListHubContentVersions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hub content versions, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListHubs`.
///
/// <p>List all existing hubs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListHubs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_hubs_input::Builder,
}
impl ListHubs {
    /// Creates a new `ListHubs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListHubs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListHubsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListHubsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListHubsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Only list hubs with names that contain the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Only list hubs with names that contain the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>Only list hubs that were created before the time specified.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Only list hubs that were created before the time specified.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Only list hubs that were created after the time specified.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Only list hubs that were created after the time specified.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Only list hubs that were last modified before the time specified.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>Only list hubs that were last modified before the time specified.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>Only list hubs that were last modified after the time specified.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>Only list hubs that were last modified after the time specified.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>Sort hubs by either name or creation time.</p>
    pub fn sort_by(mut self, input: crate::model::HubSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sort hubs by either name or creation time.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::HubSortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Sort hubs by ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Sort hubs by ascending or descending order.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The maximum number of hubs to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of hubs to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the response to a previous <code>ListHubs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hubs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListHubs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of hubs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListHumanTaskUis`.
///
/// <p>Returns information about the human task user interfaces in your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListHumanTaskUis {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_human_task_uis_input::Builder,
}
impl ListHumanTaskUis {
    /// Creates a new `ListHumanTaskUis`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListHumanTaskUis,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListHumanTaskUisError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListHumanTaskUisOutput,
        aws_smithy_http::result::SdkError<crate::error::ListHumanTaskUisError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListHumanTaskUisPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListHumanTaskUisPaginator {
        crate::paginator::ListHumanTaskUisPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only human task user interfaces with a creation time greater than or equal to the specified timestamp.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only human task user interfaces with a creation time greater than or equal to the specified timestamp.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only human task user interfaces that were created before the specified timestamp.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only human task user interfaces that were created before the specified timestamp.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A token to resume pagination.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to resume pagination.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListHyperParameterTuningJobs`.
///
/// <p>Gets a list of <code>HyperParameterTuningJobSummary</code> objects that describe the hyperparameter tuning jobs launched in your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListHyperParameterTuningJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_hyper_parameter_tuning_jobs_input::Builder,
}
impl ListHyperParameterTuningJobs {
    /// Creates a new `ListHyperParameterTuningJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListHyperParameterTuningJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListHyperParameterTuningJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListHyperParameterTuningJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListHyperParameterTuningJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListHyperParameterTuningJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListHyperParameterTuningJobsPaginator {
        crate::paginator::ListHyperParameterTuningJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>If the result of the previous <code>ListHyperParameterTuningJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of tuning jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListHyperParameterTuningJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of tuning jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of tuning jobs to return. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of tuning jobs to return. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn sort_by(mut self, input: crate::model::HyperParameterTuningJobSortByOptions) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::HyperParameterTuningJobSortByOptions>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A string in the tuning job name. This filter returns only tuning jobs whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the tuning job name. This filter returns only tuning jobs whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only tuning jobs that were created after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only tuning jobs that were created after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only tuning jobs that were created before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only tuning jobs that were created before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only tuning jobs that were modified after the specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only tuning jobs that were modified after the specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only tuning jobs that were modified before the specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only tuning jobs that were modified before the specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only tuning jobs with the specified status.</p>
    pub fn status_equals(mut self, input: crate::model::HyperParameterTuningJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that returns only tuning jobs with the specified status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::HyperParameterTuningJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
}

/// Fluent builder constructing a request to `ListImages`.
///
/// <p>Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListImages {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_images_input::Builder,
}
impl ListImages {
    /// Creates a new `ListImages`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListImages,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListImagesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListImagesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListImagesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListImagesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListImagesPaginator {
        crate::paginator::ListImagesPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only images created on or after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only images created on or after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only images created on or before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only images created on or before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only images modified on or after the specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only images modified on or after the specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only images modified on or before the specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only images modified on or before the specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>The maximum number of images to return in the response. The default value is 10. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of images to return in the response. The default value is 10. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A filter that returns only images whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A filter that returns only images whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>If the previous call to <code>ListImages</code> didn't return the full set of images, the call returns a token for getting the next set of images.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListImages</code> didn't return the full set of images, the call returns a token for getting the next set of images.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>
    pub fn sort_by(mut self, input: crate::model::ImageSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::ImageSortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>DESCENDING</code>.</p>
    pub fn sort_order(mut self, input: crate::model::ImageSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>DESCENDING</code>.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::ImageSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListImageVersions`.
///
/// <p>Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListImageVersions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_image_versions_input::Builder,
}
impl ListImageVersions {
    /// Creates a new `ListImageVersions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListImageVersions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListImageVersionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListImageVersionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListImageVersionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListImageVersionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListImageVersionsPaginator {
        crate::paginator::ListImageVersionsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only versions created on or after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only versions created on or after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only versions created on or before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only versions created on or before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>The name of the image to list the versions of.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image to list the versions of.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>A filter that returns only versions modified on or after the specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only versions modified on or after the specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only versions modified on or before the specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only versions modified on or before the specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>The maximum number of versions to return in the response. The default value is 10. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of versions to return in the response. The default value is 10. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous call to <code>ListImageVersions</code> didn't return the full set of versions, the call returns a token for getting the next set of versions.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListImageVersions</code> didn't return the full set of versions, the call returns a token for getting the next set of versions.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>
    pub fn sort_by(mut self, input: crate::model::ImageVersionSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ImageVersionSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>DESCENDING</code>.</p>
    pub fn sort_order(mut self, input: crate::model::ImageVersionSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>DESCENDING</code>.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::ImageVersionSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListInferenceExperiments`.
///
/// <p>Returns the list of all inference experiments.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListInferenceExperiments {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_inference_experiments_input::Builder,
}
impl ListInferenceExperiments {
    /// Creates a new `ListInferenceExperiments`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListInferenceExperiments,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListInferenceExperimentsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListInferenceExperimentsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListInferenceExperimentsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListInferenceExperimentsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListInferenceExperimentsPaginator {
        crate::paginator::ListInferenceExperimentsPaginator::new(self.handle, self.inner)
    }
    /// <p>Selects inference experiments whose names contain this name.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Selects inference experiments whose names contain this name.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p> Selects inference experiments of this type. For the possible types of inference experiments, see <code>CreateInferenceExperimentRequest$Type</code>. </p>
    pub fn r#type(mut self, input: crate::model::InferenceExperimentType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p> Selects inference experiments of this type. For the possible types of inference experiments, see <code>CreateInferenceExperimentRequest$Type</code>. </p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::model::InferenceExperimentType>,
    ) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p> Selects inference experiments which are in this status. For the possible statuses, see <code>DescribeInferenceExperimentResponse$Status</code>. </p>
    pub fn status_equals(mut self, input: crate::model::InferenceExperimentStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p> Selects inference experiments which are in this status. For the possible statuses, see <code>DescribeInferenceExperimentResponse$Status</code>. </p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::InferenceExperimentStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>Selects inference experiments which were created after this timestamp.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Selects inference experiments which were created after this timestamp.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Selects inference experiments which were created before this timestamp.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Selects inference experiments which were created before this timestamp.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Selects inference experiments which were last modified after this timestamp.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>Selects inference experiments which were last modified after this timestamp.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>Selects inference experiments which were last modified before this timestamp.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>Selects inference experiments which were last modified before this timestamp.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>The column by which to sort the listed inference experiments.</p>
    pub fn sort_by(mut self, input: crate::model::SortInferenceExperimentsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The column by which to sort the listed inference experiments.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::SortInferenceExperimentsBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The direction of sorting (ascending or descending).</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The direction of sorting (ascending or descending).</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p> The response from the last list when returning a list large enough to need tokening. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The response from the last list when returning a list large enough to need tokening. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to select.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to select.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListInferenceRecommendationsJobs`.
///
/// <p>Lists recommendation jobs that satisfy various filters.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListInferenceRecommendationsJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_inference_recommendations_jobs_input::Builder,
}
impl ListInferenceRecommendationsJobs {
    /// Creates a new `ListInferenceRecommendationsJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListInferenceRecommendationsJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListInferenceRecommendationsJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListInferenceRecommendationsJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListInferenceRecommendationsJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListInferenceRecommendationsJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListInferenceRecommendationsJobsPaginator {
        crate::paginator::ListInferenceRecommendationsJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only jobs created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only jobs created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only jobs created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only jobs created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only jobs that were last modified after the specified time (timestamp).</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only jobs that were last modified after the specified time (timestamp).</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only jobs that were last modified before the specified time (timestamp).</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only jobs that were last modified before the specified time (timestamp).</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A string in the job name. This filter returns only recommendations whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the job name. This filter returns only recommendations whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that retrieves only inference recommendations jobs with a specific status.</p>
    pub fn status_equals(mut self, input: crate::model::RecommendationJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that retrieves only inference recommendations jobs with a specific status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::RecommendationJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>The parameter by which to sort the results.</p>
    pub fn sort_by(mut self, input: crate::model::ListInferenceRecommendationsJobsSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ListInferenceRecommendationsJobsSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for the results.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the response to a previous <code>ListInferenceRecommendationsJobsRequest</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of recommendations, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListInferenceRecommendationsJobsRequest</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of recommendations, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of recommendations to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of recommendations to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListInferenceRecommendationsJobSteps`.
///
/// <p>Returns a list of the subtasks for an Inference Recommender job.</p>
/// <p>The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListInferenceRecommendationsJobSteps {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_inference_recommendations_job_steps_input::Builder,
}
impl ListInferenceRecommendationsJobSteps {
    /// Creates a new `ListInferenceRecommendationsJobSteps`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListInferenceRecommendationsJobSteps,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListInferenceRecommendationsJobStepsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListInferenceRecommendationsJobStepsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListInferenceRecommendationsJobStepsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListInferenceRecommendationsJobStepsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListInferenceRecommendationsJobStepsPaginator {
        crate::paginator::ListInferenceRecommendationsJobStepsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The name for the Inference Recommender job.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>The name for the Inference Recommender job.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p>A filter to return benchmarks of a specified status. If this field is left empty, then all benchmarks are returned.</p>
    pub fn status(mut self, input: crate::model::RecommendationJobStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>A filter to return benchmarks of a specified status. If this field is left empty, then all benchmarks are returned.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::model::RecommendationJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>A filter to return details about the specified type of subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    pub fn step_type(mut self, input: crate::model::RecommendationStepType) -> Self {
        self.inner = self.inner.step_type(input);
        self
    }
    /// <p>A filter to return details about the specified type of subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    pub fn set_step_type(
        mut self,
        input: std::option::Option<crate::model::RecommendationStepType>,
    ) -> Self {
        self.inner = self.inner.set_step_type(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A token that you can specify to return more results from the list. Specify this field if you have a token that was returned from a previous request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token that you can specify to return more results from the list. Specify this field if you have a token that was returned from a previous request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListLabelingJobs`.
///
/// <p>Gets a list of labeling jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListLabelingJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_labeling_jobs_input::Builder,
}
impl ListLabelingJobs {
    /// Creates a new `ListLabelingJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListLabelingJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListLabelingJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListLabelingJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListLabelingJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListLabelingJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListLabelingJobsPaginator {
        crate::paginator::ListLabelingJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only labeling jobs created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only labeling jobs created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only labeling jobs created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only labeling jobs created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only labeling jobs modified after the specified time (timestamp).</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only labeling jobs modified after the specified time (timestamp).</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only labeling jobs modified before the specified time (timestamp).</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only labeling jobs modified before the specified time (timestamp).</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>The maximum number of labeling jobs to return in each page of the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of labeling jobs to return in each page of the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the result of the previous <code>ListLabelingJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListLabelingJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A string in the labeling job name. This filter returns only labeling jobs whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the labeling job name. This filter returns only labeling jobs whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::SortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A filter that retrieves only labeling jobs with a specific status.</p>
    pub fn status_equals(mut self, input: crate::model::LabelingJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that retrieves only labeling jobs with a specific status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::LabelingJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
}

/// Fluent builder constructing a request to `ListLabelingJobsForWorkteam`.
///
/// <p>Gets a list of labeling jobs assigned to a specified work team.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListLabelingJobsForWorkteam {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_labeling_jobs_for_workteam_input::Builder,
}
impl ListLabelingJobsForWorkteam {
    /// Creates a new `ListLabelingJobsForWorkteam`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListLabelingJobsForWorkteam,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListLabelingJobsForWorkteamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListLabelingJobsForWorkteamOutput,
        aws_smithy_http::result::SdkError<crate::error::ListLabelingJobsForWorkteamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListLabelingJobsForWorkteamPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListLabelingJobsForWorkteamPaginator {
        crate::paginator::ListLabelingJobsForWorkteamPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.</p>
    pub fn workteam_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workteam_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.</p>
    pub fn set_workteam_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workteam_arn(input);
        self
    }
    /// <p>The maximum number of labeling jobs to return in each page of the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of labeling jobs to return in each page of the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A filter that returns only labeling jobs created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only labeling jobs created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only labeling jobs created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only labeling jobs created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter the limits jobs to only the ones whose job reference code contains the specified string.</p>
    pub fn job_reference_code_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_reference_code_contains(input.into());
        self
    }
    /// <p>A filter the limits jobs to only the ones whose job reference code contains the specified string.</p>
    pub fn set_job_reference_code_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_job_reference_code_contains(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(
        mut self,
        input: crate::model::ListLabelingJobsForWorkteamSortByOptions,
    ) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ListLabelingJobsForWorkteamSortByOptions>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListLineageGroups`.
///
/// <p>A list of lineage groups shared with your Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListLineageGroups {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_lineage_groups_input::Builder,
}
impl ListLineageGroups {
    /// Creates a new `ListLineageGroups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListLineageGroups,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListLineageGroupsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListLineageGroupsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListLineageGroupsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListLineageGroupsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListLineageGroupsPaginator {
        crate::paginator::ListLineageGroupsPaginator::new(self.handle, self.inner)
    }
    /// <p>A timestamp to filter against lineage groups created after a certain point in time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A timestamp to filter against lineage groups created after a certain point in time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A timestamp to filter against lineage groups created before a certain point in time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A timestamp to filter against lineage groups created before a certain point in time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortLineageGroupsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::SortLineageGroupsBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of endpoints to return in the response. This value defaults to 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of endpoints to return in the response. This value defaults to 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModelBiasJobDefinitions`.
///
/// <p>Lists model bias jobs definitions that satisfy various filters.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModelBiasJobDefinitions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_model_bias_job_definitions_input::Builder,
}
impl ListModelBiasJobDefinitions {
    /// Creates a new `ListModelBiasJobDefinitions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModelBiasJobDefinitions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelBiasJobDefinitionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelBiasJobDefinitionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelBiasJobDefinitionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelBiasJobDefinitionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListModelBiasJobDefinitionsPaginator {
        crate::paginator::ListModelBiasJobDefinitionsPaginator::new(self.handle, self.inner)
    }
    /// <p>Name of the endpoint to monitor for model bias.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>Name of the endpoint to monitor for model bias.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::MonitoringJobDefinitionSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::MonitoringJobDefinitionSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of model bias jobs to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of model bias jobs to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Filter for model bias jobs whose name contains a specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Filter for model bias jobs whose name contains a specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only model bias jobs created before a specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only model bias jobs created before a specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only model bias jobs created after a specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only model bias jobs created after a specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModelCardExportJobs`.
///
/// <p>List the export jobs for the Amazon SageMaker Model Card.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModelCardExportJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_model_card_export_jobs_input::Builder,
}
impl ListModelCardExportJobs {
    /// Creates a new `ListModelCardExportJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModelCardExportJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelCardExportJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelCardExportJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelCardExportJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelCardExportJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListModelCardExportJobsPaginator {
        crate::paginator::ListModelCardExportJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>List export jobs for the model card with the specified name.</p>
    pub fn model_card_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_card_name(input.into());
        self
    }
    /// <p>List export jobs for the model card with the specified name.</p>
    pub fn set_model_card_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_card_name(input);
        self
    }
    /// <p>List export jobs for the model card with the specified version.</p>
    pub fn model_card_version(mut self, input: i32) -> Self {
        self.inner = self.inner.model_card_version(input);
        self
    }
    /// <p>List export jobs for the model card with the specified version.</p>
    pub fn set_model_card_version(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_model_card_version(input);
        self
    }
    /// <p>Only list model card export jobs that were created after the time specified.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Only list model card export jobs that were created after the time specified.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Only list model card export jobs that were created before the time specified.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Only list model card export jobs that were created before the time specified.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Only list model card export jobs with names that contain the specified string.</p>
    pub fn model_card_export_job_name_contains(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.model_card_export_job_name_contains(input.into());
        self
    }
    /// <p>Only list model card export jobs with names that contain the specified string.</p>
    pub fn set_model_card_export_job_name_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_card_export_job_name_contains(input);
        self
    }
    /// <p>Only list model card export jobs with the specified status.</p>
    pub fn status_equals(mut self, input: crate::model::ModelCardExportJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>Only list model card export jobs with the specified status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::ModelCardExportJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>Sort model card export jobs by either name or creation time. Sorts by creation time by default.</p>
    pub fn sort_by(mut self, input: crate::model::ModelCardExportJobSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sort model card export jobs by either name or creation time. Sorts by creation time by default.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ModelCardExportJobSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Sort model card export jobs by ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::model::ModelCardExportJobSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Sort model card export jobs by ascending or descending order.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::ModelCardExportJobSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the response to a previous <code>ListModelCardExportJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model card export jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListModelCardExportJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model card export jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of model card export jobs to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of model card export jobs to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModelCards`.
///
/// <p>List existing model cards.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModelCards {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_model_cards_input::Builder,
}
impl ListModelCards {
    /// Creates a new `ListModelCards`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModelCards,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelCardsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelCardsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelCardsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelCardsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListModelCardsPaginator {
        crate::paginator::ListModelCardsPaginator::new(self.handle, self.inner)
    }
    /// <p>Only list model cards that were created after the time specified.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Only list model cards that were created after the time specified.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Only list model cards that were created before the time specified.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Only list model cards that were created before the time specified.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>The maximum number of model cards to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of model cards to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Only list model cards with names that contain the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Only list model cards with names that contain the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>Only list model cards with the specified approval status.</p>
    pub fn model_card_status(mut self, input: crate::model::ModelCardStatus) -> Self {
        self.inner = self.inner.model_card_status(input);
        self
    }
    /// <p>Only list model cards with the specified approval status.</p>
    pub fn set_model_card_status(
        mut self,
        input: std::option::Option<crate::model::ModelCardStatus>,
    ) -> Self {
        self.inner = self.inner.set_model_card_status(input);
        self
    }
    /// <p>If the response to a previous <code>ListModelCards</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model cards, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListModelCards</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model cards, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Sort model cards by either name or creation time. Sorts by creation time by default.</p>
    pub fn sort_by(mut self, input: crate::model::ModelCardSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sort model cards by either name or creation time. Sorts by creation time by default.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ModelCardSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Sort model cards by ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::model::ModelCardSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Sort model cards by ascending or descending order.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::ModelCardSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModelCardVersions`.
///
/// <p>List existing versions of an Amazon SageMaker Model Card.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModelCardVersions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_model_card_versions_input::Builder,
}
impl ListModelCardVersions {
    /// Creates a new `ListModelCardVersions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModelCardVersions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelCardVersionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelCardVersionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelCardVersionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelCardVersionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListModelCardVersionsPaginator {
        crate::paginator::ListModelCardVersionsPaginator::new(self.handle, self.inner)
    }
    /// <p>Only list model card versions that were created after the time specified.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Only list model card versions that were created after the time specified.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Only list model card versions that were created before the time specified.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Only list model card versions that were created before the time specified.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>The maximum number of model card versions to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of model card versions to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>List model card versions for the model card with the specified name.</p>
    pub fn model_card_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_card_name(input.into());
        self
    }
    /// <p>List model card versions for the model card with the specified name.</p>
    pub fn set_model_card_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_card_name(input);
        self
    }
    /// <p>Only list model card versions with the specified approval status.</p>
    pub fn model_card_status(mut self, input: crate::model::ModelCardStatus) -> Self {
        self.inner = self.inner.model_card_status(input);
        self
    }
    /// <p>Only list model card versions with the specified approval status.</p>
    pub fn set_model_card_status(
        mut self,
        input: std::option::Option<crate::model::ModelCardStatus>,
    ) -> Self {
        self.inner = self.inner.set_model_card_status(input);
        self
    }
    /// <p>If the response to a previous <code>ListModelCardVersions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model card versions, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListModelCardVersions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model card versions, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Sort listed model card versions by version. Sorts by version by default.</p>
    pub fn sort_by(mut self, input: crate::model::ModelCardVersionSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sort listed model card versions by version. Sorts by version by default.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ModelCardVersionSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Sort model card versions by ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::model::ModelCardSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Sort model card versions by ascending or descending order.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::ModelCardSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModelExplainabilityJobDefinitions`.
///
/// <p>Lists model explainability job definitions that satisfy various filters.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModelExplainabilityJobDefinitions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_model_explainability_job_definitions_input::Builder,
}
impl ListModelExplainabilityJobDefinitions {
    /// Creates a new `ListModelExplainabilityJobDefinitions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModelExplainabilityJobDefinitions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelExplainabilityJobDefinitionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelExplainabilityJobDefinitionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelExplainabilityJobDefinitionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelExplainabilityJobDefinitionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::paginator::ListModelExplainabilityJobDefinitionsPaginator {
        crate::paginator::ListModelExplainabilityJobDefinitionsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>Name of the endpoint to monitor for model explainability.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>Name of the endpoint to monitor for model explainability.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::MonitoringJobDefinitionSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::MonitoringJobDefinitionSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Filter for model explainability jobs whose name contains a specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Filter for model explainability jobs whose name contains a specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only model explainability jobs created before a specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only model explainability jobs created before a specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only model explainability jobs created after a specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only model explainability jobs created after a specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModelMetadata`.
///
/// <p>Lists the domain, framework, task, and model name of standard machine learning models found in common model zoos.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModelMetadata {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_model_metadata_input::Builder,
}
impl ListModelMetadata {
    /// Creates a new `ListModelMetadata`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModelMetadata,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelMetadataError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelMetadataOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelMetadataError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelMetadataPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListModelMetadataPaginator {
        crate::paginator::ListModelMetadataPaginator::new(self.handle, self.inner)
    }
    /// <p>One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. Specify the Framework, FrameworkVersion, Domain or Task to filter supported. Filter names and values are case-sensitive.</p>
    pub fn search_expression(mut self, input: crate::model::ModelMetadataSearchExpression) -> Self {
        self.inner = self.inner.search_expression(input);
        self
    }
    /// <p>One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. Specify the Framework, FrameworkVersion, Domain or Task to filter supported. Filter names and values are case-sensitive.</p>
    pub fn set_search_expression(
        mut self,
        input: std::option::Option<crate::model::ModelMetadataSearchExpression>,
    ) -> Self {
        self.inner = self.inner.set_search_expression(input);
        self
    }
    /// <p>If the response to a previous <code>ListModelMetadataResponse</code> request was truncated, the response includes a NextToken. To retrieve the next set of model metadata, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListModelMetadataResponse</code> request was truncated, the response includes a NextToken. To retrieve the next set of model metadata, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of models to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of models to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModelPackageGroups`.
///
/// <p>Gets a list of the model groups in your Amazon Web Services account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModelPackageGroups {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_model_package_groups_input::Builder,
}
impl ListModelPackageGroups {
    /// Creates a new `ListModelPackageGroups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModelPackageGroups,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelPackageGroupsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelPackageGroupsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelPackageGroupsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelPackageGroupsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListModelPackageGroupsPaginator {
        crate::paginator::ListModelPackageGroupsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only model groups created after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only model groups created after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only model groups created before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only model groups created before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A string in the model group name. This filter returns only model groups whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the model group name. This filter returns only model groups whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>If the result of the previous <code>ListModelPackageGroups</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model groups, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListModelPackageGroups</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model groups, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::ModelPackageGroupSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ModelPackageGroupSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModelPackages`.
///
/// <p>Lists the model packages that have been created.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModelPackages {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_model_packages_input::Builder,
}
impl ListModelPackages {
    /// Creates a new `ListModelPackages`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModelPackages,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelPackagesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelPackagesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelPackagesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelPackagesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListModelPackagesPaginator {
        crate::paginator::ListModelPackagesPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only model packages created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only model packages created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only model packages created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only model packages created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>The maximum number of model packages to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of model packages to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A string in the model package name. This filter returns only model packages whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the model package name. This filter returns only model packages whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only the model packages with the specified approval status.</p>
    pub fn model_approval_status(mut self, input: crate::model::ModelApprovalStatus) -> Self {
        self.inner = self.inner.model_approval_status(input);
        self
    }
    /// <p>A filter that returns only the model packages with the specified approval status.</p>
    pub fn set_model_approval_status(
        mut self,
        input: std::option::Option<crate::model::ModelApprovalStatus>,
    ) -> Self {
        self.inner = self.inner.set_model_approval_status(input);
        self
    }
    /// <p>A filter that returns only model versions that belong to the specified model group.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_group_name(input.into());
        self
    }
    /// <p>A filter that returns only model versions that belong to the specified model group.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_group_name(input);
        self
    }
    /// <p>A filter that returns only the model packages of the specified type. This can be one of the following values.</p>
    /// <ul>
    /// <li> <p> <code>UNVERSIONED</code> - List only unversioined models. This is the default value if no <code>ModelPackageType</code> is specified.</p> </li>
    /// <li> <p> <code>VERSIONED</code> - List only versioned models.</p> </li>
    /// <li> <p> <code>BOTH</code> - List both versioned and unversioned models.</p> </li>
    /// </ul>
    pub fn model_package_type(mut self, input: crate::model::ModelPackageType) -> Self {
        self.inner = self.inner.model_package_type(input);
        self
    }
    /// <p>A filter that returns only the model packages of the specified type. This can be one of the following values.</p>
    /// <ul>
    /// <li> <p> <code>UNVERSIONED</code> - List only unversioined models. This is the default value if no <code>ModelPackageType</code> is specified.</p> </li>
    /// <li> <p> <code>VERSIONED</code> - List only versioned models.</p> </li>
    /// <li> <p> <code>BOTH</code> - List both versioned and unversioned models.</p> </li>
    /// </ul>
    pub fn set_model_package_type(
        mut self,
        input: std::option::Option<crate::model::ModelPackageType>,
    ) -> Self {
        self.inner = self.inner.set_model_package_type(input);
        self
    }
    /// <p>If the response to a previous <code>ListModelPackages</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model packages, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListModelPackages</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model packages, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::ModelPackageSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ModelPackageSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModelQualityJobDefinitions`.
///
/// <p>Gets a list of model quality monitoring job definitions in your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModelQualityJobDefinitions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_model_quality_job_definitions_input::Builder,
}
impl ListModelQualityJobDefinitions {
    /// Creates a new `ListModelQualityJobDefinitions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModelQualityJobDefinitions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelQualityJobDefinitionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelQualityJobDefinitionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelQualityJobDefinitionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelQualityJobDefinitionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListModelQualityJobDefinitionsPaginator {
        crate::paginator::ListModelQualityJobDefinitionsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only model quality monitoring job definitions that are associated with the specified endpoint.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>A filter that returns only model quality monitoring job definitions that are associated with the specified endpoint.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::MonitoringJobDefinitionSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::MonitoringJobDefinitionSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of the previous <code>ListModelQualityJobDefinitions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model quality monitoring job definitions, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListModelQualityJobDefinitions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of model quality monitoring job definitions, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return in a call to <code>ListModelQualityJobDefinitions</code>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a call to <code>ListModelQualityJobDefinitions</code>.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A string in the transform job name. This filter returns only model quality monitoring job definitions whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the transform job name. This filter returns only model quality monitoring job definitions whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only model quality monitoring job definitions created before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only model quality monitoring job definitions created before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only model quality monitoring job definitions created after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only model quality monitoring job definitions created after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
}

/// Fluent builder constructing a request to `ListModels`.
///
/// <p>Lists models created with the <code>CreateModel</code> API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListModels {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_models_input::Builder,
}
impl ListModels {
    /// Creates a new `ListModels`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListModels,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListModelsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListModelsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListModelsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListModelsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListModelsPaginator {
        crate::paginator::ListModelsPaginator::new(self.handle, self.inner)
    }
    /// <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::ModelSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::ModelSortKey>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::OrderKey) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::OrderKey>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the response to a previous <code>ListModels</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of models, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response to a previous <code>ListModels</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of models, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of models to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of models to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A string in the model name. This filter returns only models whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the model name. This filter returns only models whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only models created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only models created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only models with a creation time greater than or equal to the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only models with a creation time greater than or equal to the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
}

/// Fluent builder constructing a request to `ListMonitoringAlertHistory`.
///
/// <p>Gets a list of past alerts in a model monitoring schedule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListMonitoringAlertHistory {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_monitoring_alert_history_input::Builder,
}
impl ListMonitoringAlertHistory {
    /// Creates a new `ListMonitoringAlertHistory`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListMonitoringAlertHistory,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListMonitoringAlertHistoryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListMonitoringAlertHistoryOutput,
        aws_smithy_http::result::SdkError<crate::error::ListMonitoringAlertHistoryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListMonitoringAlertHistoryPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListMonitoringAlertHistoryPaginator {
        crate::paginator::ListMonitoringAlertHistoryPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn monitoring_alert_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_alert_name(input.into());
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn set_monitoring_alert_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_alert_name(input);
        self
    }
    /// <p>The field used to sort results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::MonitoringAlertHistorySortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field used to sort results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::MonitoringAlertHistorySortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order, whether <code>Ascending</code> or <code>Descending</code>, of the alert history. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order, whether <code>Ascending</code> or <code>Descending</code>, of the alert history. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of the previous <code>ListMonitoringAlertHistory</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of alerts in the history, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListMonitoringAlertHistory</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of alerts in the history, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to display. The default is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to display. The default is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A filter that returns only alerts created on or before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only alerts created on or before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only alerts created on or after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only alerts created on or after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that retrieves only alerts with a specific status.</p>
    pub fn status_equals(mut self, input: crate::model::MonitoringAlertStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that retrieves only alerts with a specific status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::MonitoringAlertStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
}

/// Fluent builder constructing a request to `ListMonitoringAlerts`.
///
/// <p>Gets the alerts for a single monitoring schedule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListMonitoringAlerts {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_monitoring_alerts_input::Builder,
}
impl ListMonitoringAlerts {
    /// Creates a new `ListMonitoringAlerts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListMonitoringAlerts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListMonitoringAlertsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListMonitoringAlertsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListMonitoringAlertsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListMonitoringAlertsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListMonitoringAlertsPaginator {
        crate::paginator::ListMonitoringAlertsPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
    /// <p>If the result of the previous <code>ListMonitoringAlerts</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of alerts in the history, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListMonitoringAlerts</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of alerts in the history, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to display. The default is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to display. The default is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListMonitoringExecutions`.
///
/// <p>Returns list of all monitoring job executions.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListMonitoringExecutions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_monitoring_executions_input::Builder,
}
impl ListMonitoringExecutions {
    /// Creates a new `ListMonitoringExecutions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListMonitoringExecutions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListMonitoringExecutionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListMonitoringExecutionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListMonitoringExecutionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListMonitoringExecutionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListMonitoringExecutionsPaginator {
        crate::paginator::ListMonitoringExecutionsPaginator::new(self.handle, self.inner)
    }
    /// <p>Name of a specific schedule to fetch jobs for.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>Name of a specific schedule to fetch jobs for.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
    /// <p>Name of a specific endpoint to fetch jobs for.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>Name of a specific endpoint to fetch jobs for.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>, <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::MonitoringExecutionSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>, <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::MonitoringExecutionSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Filter for jobs scheduled before a specified time.</p>
    pub fn scheduled_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.scheduled_time_before(input);
        self
    }
    /// <p>Filter for jobs scheduled before a specified time.</p>
    pub fn set_scheduled_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_scheduled_time_before(input);
        self
    }
    /// <p>Filter for jobs scheduled after a specified time.</p>
    pub fn scheduled_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.scheduled_time_after(input);
        self
    }
    /// <p>Filter for jobs scheduled after a specified time.</p>
    pub fn set_scheduled_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_scheduled_time_after(input);
        self
    }
    /// <p>A filter that returns only jobs created before a specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only jobs created before a specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only jobs created after a specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only jobs created after a specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only jobs modified after a specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only jobs modified after a specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only jobs modified before a specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only jobs modified before a specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that retrieves only jobs with a specific status.</p>
    pub fn status_equals(mut self, input: crate::model::ExecutionStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that retrieves only jobs with a specific status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::ExecutionStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>Gets a list of the monitoring job runs of the specified monitoring job definitions.</p>
    pub fn monitoring_job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_job_definition_name(input.into());
        self
    }
    /// <p>Gets a list of the monitoring job runs of the specified monitoring job definitions.</p>
    pub fn set_monitoring_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_job_definition_name(input);
        self
    }
    /// <p>A filter that returns only the monitoring job runs of the specified monitoring type.</p>
    pub fn monitoring_type_equals(mut self, input: crate::model::MonitoringType) -> Self {
        self.inner = self.inner.monitoring_type_equals(input);
        self
    }
    /// <p>A filter that returns only the monitoring job runs of the specified monitoring type.</p>
    pub fn set_monitoring_type_equals(
        mut self,
        input: std::option::Option<crate::model::MonitoringType>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_type_equals(input);
        self
    }
}

/// Fluent builder constructing a request to `ListMonitoringSchedules`.
///
/// <p>Returns list of all monitoring schedules.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListMonitoringSchedules {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_monitoring_schedules_input::Builder,
}
impl ListMonitoringSchedules {
    /// Creates a new `ListMonitoringSchedules`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListMonitoringSchedules,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListMonitoringSchedulesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListMonitoringSchedulesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListMonitoringSchedulesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListMonitoringSchedulesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListMonitoringSchedulesPaginator {
        crate::paginator::ListMonitoringSchedulesPaginator::new(self.handle, self.inner)
    }
    /// <p>Name of a specific endpoint to fetch schedules for.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>Name of a specific endpoint to fetch schedules for.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>, <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::MonitoringScheduleSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>, <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::MonitoringScheduleSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Filter for monitoring schedules whose name contains a specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Filter for monitoring schedules whose name contains a specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules created before a specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules created before a specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules created after a specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules created after a specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules modified before a specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules modified before a specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules modified after a specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules modified after a specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules modified before a specified time.</p>
    pub fn status_equals(mut self, input: crate::model::ScheduleStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that returns only monitoring schedules modified before a specified time.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::ScheduleStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>Gets a list of the monitoring schedules for the specified monitoring job definition.</p>
    pub fn monitoring_job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_job_definition_name(input.into());
        self
    }
    /// <p>Gets a list of the monitoring schedules for the specified monitoring job definition.</p>
    pub fn set_monitoring_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_job_definition_name(input);
        self
    }
    /// <p>A filter that returns only the monitoring schedules for the specified monitoring type.</p>
    pub fn monitoring_type_equals(mut self, input: crate::model::MonitoringType) -> Self {
        self.inner = self.inner.monitoring_type_equals(input);
        self
    }
    /// <p>A filter that returns only the monitoring schedules for the specified monitoring type.</p>
    pub fn set_monitoring_type_equals(
        mut self,
        input: std::option::Option<crate::model::MonitoringType>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_type_equals(input);
        self
    }
}

/// Fluent builder constructing a request to `ListNotebookInstanceLifecycleConfigs`.
///
/// <p>Lists notebook instance lifestyle configurations created with the <code>CreateNotebookInstanceLifecycleConfig</code> API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListNotebookInstanceLifecycleConfigs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_notebook_instance_lifecycle_configs_input::Builder,
}
impl ListNotebookInstanceLifecycleConfigs {
    /// Creates a new `ListNotebookInstanceLifecycleConfigs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListNotebookInstanceLifecycleConfigs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListNotebookInstanceLifecycleConfigsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListNotebookInstanceLifecycleConfigsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListNotebookInstanceLifecycleConfigsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListNotebookInstanceLifecycleConfigsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListNotebookInstanceLifecycleConfigsPaginator {
        crate::paginator::ListNotebookInstanceLifecycleConfigsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>If the result of a <code>ListNotebookInstanceLifecycleConfigs</code> request was truncated, the response includes a <code>NextToken</code>. To get the next set of lifecycle configurations, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of a <code>ListNotebookInstanceLifecycleConfigs</code> request was truncated, the response includes a <code>NextToken</code>. To get the next set of lifecycle configurations, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of lifecycle configurations to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of lifecycle configurations to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::NotebookInstanceLifecycleConfigSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::NotebookInstanceLifecycleConfigSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results.</p>
    pub fn sort_order(
        mut self,
        input: crate::model::NotebookInstanceLifecycleConfigSortOrder,
    ) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::NotebookInstanceLifecycleConfigSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A string in the lifecycle configuration name. This filter returns only lifecycle configurations whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the lifecycle configuration name. This filter returns only lifecycle configurations whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only lifecycle configurations that were created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only lifecycle configurations that were created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only lifecycle configurations that were created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only lifecycle configurations that were created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only lifecycle configurations that were modified before the specified time (timestamp).</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only lifecycle configurations that were modified before the specified time (timestamp).</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only lifecycle configurations that were modified after the specified time (timestamp).</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only lifecycle configurations that were modified after the specified time (timestamp).</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
}

/// Fluent builder constructing a request to `ListNotebookInstances`.
///
/// <p>Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services Region. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListNotebookInstances {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_notebook_instances_input::Builder,
}
impl ListNotebookInstances {
    /// Creates a new `ListNotebookInstances`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListNotebookInstances,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListNotebookInstancesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListNotebookInstancesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListNotebookInstancesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListNotebookInstancesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListNotebookInstancesPaginator {
        crate::paginator::ListNotebookInstancesPaginator::new(self.handle, self.inner)
    }
    /// <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the response includes a <code>NextToken</code>. You can use this token in your subsequent <code>ListNotebookInstances</code> request to fetch the next set of notebook instances. </p> <note>
    /// <p>You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request. </p>
    /// </note>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the response includes a <code>NextToken</code>. You can use this token in your subsequent <code>ListNotebookInstances</code> request to fetch the next set of notebook instances. </p> <note>
    /// <p>You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request. </p>
    /// </note>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of notebook instances to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of notebook instances to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn sort_by(mut self, input: crate::model::NotebookInstanceSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::NotebookInstanceSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. </p>
    pub fn sort_order(mut self, input: crate::model::NotebookInstanceSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. </p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::NotebookInstanceSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created before the specified time (timestamp). </p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created before the specified time (timestamp). </p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified before the specified time (timestamp).</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified before the specified time (timestamp).</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified after the specified time (timestamp).</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only notebook instances that were modified after the specified time (timestamp).</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only notebook instances with the specified status.</p>
    pub fn status_equals(mut self, input: crate::model::NotebookInstanceStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that returns only notebook instances with the specified status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::NotebookInstanceStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.</p>
    pub fn notebook_instance_lifecycle_config_name_contains(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .notebook_instance_lifecycle_config_name_contains(input.into());
        self
    }
    /// <p>A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.</p>
    pub fn set_notebook_instance_lifecycle_config_name_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .set_notebook_instance_lifecycle_config_name_contains(input);
        self
    }
    /// <p>A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.</p>
    pub fn default_code_repository_contains(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.default_code_repository_contains(input.into());
        self
    }
    /// <p>A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.</p>
    pub fn set_default_code_repository_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_default_code_repository_contains(input);
        self
    }
    /// <p>A filter that returns only notebook instances with associated with the specified git repository.</p>
    pub fn additional_code_repository_equals(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.additional_code_repository_equals(input.into());
        self
    }
    /// <p>A filter that returns only notebook instances with associated with the specified git repository.</p>
    pub fn set_additional_code_repository_equals(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_additional_code_repository_equals(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPipelineExecutions`.
///
/// <p>Gets a list of the pipeline executions.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelineExecutions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pipeline_executions_input::Builder,
}
impl ListPipelineExecutions {
    /// Creates a new `ListPipelineExecutions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPipelineExecutions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPipelineExecutionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPipelineExecutionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPipelineExecutionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPipelineExecutionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPipelineExecutionsPaginator {
        crate::paginator::ListPipelineExecutionsPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the pipeline.</p>
    pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p>The name of the pipeline.</p>
    pub fn set_pipeline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
    /// <p>A filter that returns the pipeline executions that were created after a specified time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A filter that returns the pipeline executions that were created after a specified time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A filter that returns the pipeline executions that were created before a specified time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A filter that returns the pipeline executions that were created before a specified time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortPipelineExecutionsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::SortPipelineExecutionsBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of the previous <code>ListPipelineExecutions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of pipeline executions, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListPipelineExecutions</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of pipeline executions, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of pipeline executions to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of pipeline executions to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPipelineExecutionSteps`.
///
/// <p>Gets a list of <code>PipeLineExecutionStep</code> objects.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelineExecutionSteps {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pipeline_execution_steps_input::Builder,
}
impl ListPipelineExecutionSteps {
    /// Creates a new `ListPipelineExecutionSteps`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPipelineExecutionSteps,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPipelineExecutionStepsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPipelineExecutionStepsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPipelineExecutionStepsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPipelineExecutionStepsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPipelineExecutionStepsPaginator {
        crate::paginator::ListPipelineExecutionStepsPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn pipeline_execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn set_pipeline_execution_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_arn(input);
        self
    }
    /// <p>If the result of the previous <code>ListPipelineExecutionSteps</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of pipeline execution steps, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListPipelineExecutionSteps</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of pipeline execution steps, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of pipeline execution steps to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of pipeline execution steps to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPipelineParametersForExecution`.
///
/// <p>Gets a list of parameters for a pipeline execution.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelineParametersForExecution {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pipeline_parameters_for_execution_input::Builder,
}
impl ListPipelineParametersForExecution {
    /// Creates a new `ListPipelineParametersForExecution`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPipelineParametersForExecution,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPipelineParametersForExecutionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPipelineParametersForExecutionOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPipelineParametersForExecutionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPipelineParametersForExecutionPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPipelineParametersForExecutionPaginator {
        crate::paginator::ListPipelineParametersForExecutionPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn pipeline_execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn set_pipeline_execution_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_arn(input);
        self
    }
    /// <p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of parameters to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of parameters to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPipelines`.
///
/// <p>Gets a list of pipelines.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelines {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pipelines_input::Builder,
}
impl ListPipelines {
    /// Creates a new `ListPipelines`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPipelines,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPipelinesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPipelinesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPipelinesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPipelinesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPipelinesPaginator {
        crate::paginator::ListPipelinesPaginator::new(self.handle, self.inner)
    }
    /// <p>The prefix of the pipeline name.</p>
    pub fn pipeline_name_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name_prefix(input.into());
        self
    }
    /// <p>The prefix of the pipeline name.</p>
    pub fn set_pipeline_name_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_name_prefix(input);
        self
    }
    /// <p>A filter that returns the pipelines that were created after a specified time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A filter that returns the pipelines that were created after a specified time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A filter that returns the pipelines that were created before a specified time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A filter that returns the pipelines that were created before a specified time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortPipelinesBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::SortPipelinesBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of the previous <code>ListPipelines</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of pipelines, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListPipelines</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of pipelines, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of pipelines to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of pipelines to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListProcessingJobs`.
///
/// <p>Lists processing jobs that satisfy various filters.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListProcessingJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_processing_jobs_input::Builder,
}
impl ListProcessingJobs {
    /// Creates a new `ListProcessingJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListProcessingJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListProcessingJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListProcessingJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListProcessingJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListProcessingJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListProcessingJobsPaginator {
        crate::paginator::ListProcessingJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only processing jobs created after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only processing jobs created after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only processing jobs created after the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only processing jobs created after the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only processing jobs modified after the specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only processing jobs modified after the specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only processing jobs modified before the specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only processing jobs modified before the specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A string in the processing job name. This filter returns only processing jobs whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the processing job name. This filter returns only processing jobs whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that retrieves only processing jobs with a specific status.</p>
    pub fn status_equals(mut self, input: crate::model::ProcessingJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that retrieves only processing jobs with a specific status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::ProcessingJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::SortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of the previous <code>ListProcessingJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of processing jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListProcessingJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of processing jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of processing jobs to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of processing jobs to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListProjects`.
///
/// <p>Gets a list of the projects in an Amazon Web Services account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListProjects {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_projects_input::Builder,
}
impl ListProjects {
    /// Creates a new `ListProjects`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListProjects,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListProjectsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListProjectsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListProjectsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListProjectsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListProjectsPaginator {
        crate::paginator::ListProjectsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns the projects that were created after a specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns the projects that were created after a specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns the projects that were created before a specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns the projects that were created before a specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>The maximum number of projects to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of projects to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A filter that returns the projects whose name contains a specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A filter that returns the projects whose name contains a specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>If the result of the previous <code>ListProjects</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListProjects</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::ProjectSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::ProjectSortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::ProjectSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::ProjectSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSpaces`.
///
/// <p>Lists spaces.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSpaces {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_spaces_input::Builder,
}
impl ListSpaces {
    /// Creates a new `ListSpaces`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSpaces,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSpacesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSpacesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSpacesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListSpacesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListSpacesPaginator {
        crate::paginator::ListSpacesPaginator::new(self.handle, self.inner)
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SpaceSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::SpaceSortKey>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>A parameter to search for the Domain ID.</p>
    pub fn domain_id_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id_equals(input.into());
        self
    }
    /// <p>A parameter to search for the Domain ID.</p>
    pub fn set_domain_id_equals(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id_equals(input);
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn space_name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name_contains(input.into());
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn set_space_name_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_space_name_contains(input);
        self
    }
}

/// Fluent builder constructing a request to `ListStageDevices`.
///
/// <p>Lists devices allocated to the stage, containing detailed device information and deployment status.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListStageDevices {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_stage_devices_input::Builder,
}
impl ListStageDevices {
    /// Creates a new `ListStageDevices`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListStageDevices,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListStageDevicesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListStageDevicesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListStageDevicesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListStageDevicesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListStageDevicesPaginator {
        crate::paginator::ListStageDevicesPaginator::new(self.handle, self.inner)
    }
    /// <p>The response from the last list when returning a list large enough to neeed tokening.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The response from the last list when returning a list large enough to neeed tokening.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of requests to select.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of requests to select.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_deployment_plan_name(input.into());
        self
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_deployment_plan_name(input);
        self
    }
    /// <p>Toggle for excluding devices deployed in other stages.</p>
    pub fn exclude_devices_deployed_in_other_stage(mut self, input: bool) -> Self {
        self.inner = self.inner.exclude_devices_deployed_in_other_stage(input);
        self
    }
    /// <p>Toggle for excluding devices deployed in other stages.</p>
    pub fn set_exclude_devices_deployed_in_other_stage(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self
            .inner
            .set_exclude_devices_deployed_in_other_stage(input);
        self
    }
    /// <p>The name of the stage in the deployment.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stage_name(input.into());
        self
    }
    /// <p>The name of the stage in the deployment.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stage_name(input);
        self
    }
}

/// Fluent builder constructing a request to `ListStudioLifecycleConfigs`.
///
/// <p>Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListStudioLifecycleConfigs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_studio_lifecycle_configs_input::Builder,
}
impl ListStudioLifecycleConfigs {
    /// Creates a new `ListStudioLifecycleConfigs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListStudioLifecycleConfigs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListStudioLifecycleConfigsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListStudioLifecycleConfigsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListStudioLifecycleConfigsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListStudioLifecycleConfigsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListStudioLifecycleConfigsPaginator {
        crate::paginator::ListStudioLifecycleConfigsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of Studio Lifecycle Configurations to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of Studio Lifecycle Configurations to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous call to ListStudioLifecycleConfigs didn't return the full set of Lifecycle Configurations, the call returns a token for getting the next set of Lifecycle Configurations.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to ListStudioLifecycleConfigs didn't return the full set of Lifecycle Configurations, the call returns a token for getting the next set of Lifecycle Configurations.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A string in the Lifecycle Configuration name. This filter returns only Lifecycle Configurations whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the Lifecycle Configuration name. This filter returns only Lifecycle Configurations whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A parameter to search for the App Type to which the Lifecycle Configuration is attached.</p>
    pub fn app_type_equals(mut self, input: crate::model::StudioLifecycleConfigAppType) -> Self {
        self.inner = self.inner.app_type_equals(input);
        self
    }
    /// <p>A parameter to search for the App Type to which the Lifecycle Configuration is attached.</p>
    pub fn set_app_type_equals(
        mut self,
        input: std::option::Option<crate::model::StudioLifecycleConfigAppType>,
    ) -> Self {
        self.inner = self.inner.set_app_type_equals(input);
        self
    }
    /// <p>A filter that returns only Lifecycle Configurations created on or before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only Lifecycle Configurations created on or before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only Lifecycle Configurations created on or after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only Lifecycle Configurations created on or after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only Lifecycle Configurations modified before the specified time.</p>
    pub fn modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.modified_time_before(input);
        self
    }
    /// <p>A filter that returns only Lifecycle Configurations modified before the specified time.</p>
    pub fn set_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only Lifecycle Configurations modified after the specified time.</p>
    pub fn modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.modified_time_after(input);
        self
    }
    /// <p>A filter that returns only Lifecycle Configurations modified after the specified time.</p>
    pub fn set_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_modified_time_after(input);
        self
    }
    /// <p>The property used to sort results. The default value is CreationTime.</p>
    pub fn sort_by(mut self, input: crate::model::StudioLifecycleConfigSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is CreationTime.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::StudioLifecycleConfigSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is Descending.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is Descending.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSubscribedWorkteams`.
///
/// <p>Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSubscribedWorkteams {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_subscribed_workteams_input::Builder,
}
impl ListSubscribedWorkteams {
    /// Creates a new `ListSubscribedWorkteams`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSubscribedWorkteams,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSubscribedWorkteamsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSubscribedWorkteamsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSubscribedWorkteamsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListSubscribedWorkteamsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListSubscribedWorkteamsPaginator {
        crate::paginator::ListSubscribedWorkteamsPaginator::new(self.handle, self.inner)
    }
    /// <p>A string in the work team name. This filter returns only work teams whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the work team name. This filter returns only work teams whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>If the result of the previous <code>ListSubscribedWorkteams</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListSubscribedWorkteams</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of work teams to return in each page of the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of work teams to return in each page of the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTags`.
///
/// <p>Returns the tags for the specified SageMaker resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTags {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_input::Builder,
}
impl ListTags {
    /// Creates a new `ListTags`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTags,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListTagsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListTagsPaginator {
        crate::paginator::ListTagsPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p> If the response to the previous <code>ListTags</code> request is truncated, SageMaker returns this token. To retrieve the next set of tags, use it in the subsequent request. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> If the response to the previous <code>ListTags</code> request is truncated, SageMaker returns this token. To retrieve the next set of tags, use it in the subsequent request. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Maximum number of tags to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Maximum number of tags to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTrainingJobs`.
///
/// <p>Lists training jobs.</p> <note>
/// <p>When <code>StatusEquals</code> and <code>MaxResults</code> are set at the same time, the <code>MaxResults</code> number of training jobs are first retrieved ignoring the <code>StatusEquals</code> parameter and then they are filtered by the <code>StatusEquals</code> parameter, which is returned as a response.</p>
/// <p>For example, if <code>ListTrainingJobs</code> is invoked with the following parameters:</p>
/// <p> <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code> </p>
/// <p>First, 100 trainings jobs with any status, including those other than <code>InProgress</code>, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of <code>InProgress</code> are returned.</p>
/// <p>You can quickly test the API using the following Amazon Web Services CLI code.</p>
/// <p> <code>aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress</code> </p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTrainingJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_training_jobs_input::Builder,
}
impl ListTrainingJobs {
    /// Creates a new `ListTrainingJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTrainingJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTrainingJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTrainingJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTrainingJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListTrainingJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListTrainingJobsPaginator {
        crate::paginator::ListTrainingJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>If the result of the previous <code>ListTrainingJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of training jobs, use the token in the next request. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListTrainingJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of training jobs, use the token in the next request. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of training jobs to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of training jobs to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A filter that returns only training jobs created after the specified time (timestamp).</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only training jobs created after the specified time (timestamp).</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only training jobs created before the specified time (timestamp).</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only training jobs created before the specified time (timestamp).</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only training jobs modified after the specified time (timestamp).</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only training jobs modified after the specified time (timestamp).</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only training jobs modified before the specified time (timestamp).</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only training jobs modified before the specified time (timestamp).</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A string in the training job name. This filter returns only training jobs whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the training job name. This filter returns only training jobs whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that retrieves only training jobs with a specific status.</p>
    pub fn status_equals(mut self, input: crate::model::TrainingJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that retrieves only training jobs with a specific status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::TrainingJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::SortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A filter that retrieves only training jobs with a specific warm pool status.</p>
    pub fn warm_pool_status_equals(mut self, input: crate::model::WarmPoolResourceStatus) -> Self {
        self.inner = self.inner.warm_pool_status_equals(input);
        self
    }
    /// <p>A filter that retrieves only training jobs with a specific warm pool status.</p>
    pub fn set_warm_pool_status_equals(
        mut self,
        input: std::option::Option<crate::model::WarmPoolResourceStatus>,
    ) -> Self {
        self.inner = self.inner.set_warm_pool_status_equals(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTrainingJobsForHyperParameterTuningJob`.
///
/// <p>Gets a list of <code>TrainingJobSummary</code> objects that describe the training jobs that a hyperparameter tuning job launched.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTrainingJobsForHyperParameterTuningJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_training_jobs_for_hyper_parameter_tuning_job_input::Builder,
}
impl ListTrainingJobsForHyperParameterTuningJob {
    /// Creates a new `ListTrainingJobsForHyperParameterTuningJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTrainingJobsForHyperParameterTuningJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::ListTrainingJobsForHyperParameterTuningJobError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTrainingJobsForHyperParameterTuningJobOutput,
        aws_smithy_http::result::SdkError<
            crate::error::ListTrainingJobsForHyperParameterTuningJobError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListTrainingJobsForHyperParameterTuningJobPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::paginator::ListTrainingJobsForHyperParameterTuningJobPaginator {
        crate::paginator::ListTrainingJobsForHyperParameterTuningJobPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The name of the tuning job whose training jobs you want to list.</p>
    pub fn hyper_parameter_tuning_job_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.hyper_parameter_tuning_job_name(input.into());
        self
    }
    /// <p>The name of the tuning job whose training jobs you want to list.</p>
    pub fn set_hyper_parameter_tuning_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hyper_parameter_tuning_job_name(input);
        self
    }
    /// <p>If the result of the previous <code>ListTrainingJobsForHyperParameterTuningJob</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of training jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListTrainingJobsForHyperParameterTuningJob</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of training jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of training jobs to return. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of training jobs to return. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A filter that returns only training jobs with the specified status.</p>
    pub fn status_equals(mut self, input: crate::model::TrainingJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that returns only training jobs with the specified status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::TrainingJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    /// <p>If the value of this field is <code>FinalObjectiveMetricValue</code>, any training jobs that did not return an objective metric are not listed.</p>
    pub fn sort_by(mut self, input: crate::model::TrainingJobSortByOptions) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    /// <p>If the value of this field is <code>FinalObjectiveMetricValue</code>, any training jobs that did not return an objective metric are not listed.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::TrainingJobSortByOptions>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTransformJobs`.
///
/// <p>Lists transform jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTransformJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_transform_jobs_input::Builder,
}
impl ListTransformJobs {
    /// Creates a new `ListTransformJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTransformJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTransformJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTransformJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTransformJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListTransformJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListTransformJobsPaginator {
        crate::paginator::ListTransformJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only transform jobs created after the specified time.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>A filter that returns only transform jobs created after the specified time.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>A filter that returns only transform jobs created before the specified time.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>A filter that returns only transform jobs created before the specified time.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>A filter that returns only transform jobs modified after the specified time.</p>
    pub fn last_modified_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only transform jobs modified after the specified time.</p>
    pub fn set_last_modified_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_after(input);
        self
    }
    /// <p>A filter that returns only transform jobs modified before the specified time.</p>
    pub fn last_modified_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_time_before(input);
        self
    }
    /// <p>A filter that returns only transform jobs modified before the specified time.</p>
    pub fn set_last_modified_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_last_modified_time_before(input);
        self
    }
    /// <p>A string in the transform job name. This filter returns only transform jobs whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the transform job name. This filter returns only transform jobs whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A filter that retrieves only transform jobs with a specific status.</p>
    pub fn status_equals(mut self, input: crate::model::TransformJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>A filter that retrieves only transform jobs with a specific status.</p>
    pub fn set_status_equals(
        mut self,
        input: std::option::Option<crate::model::TransformJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::SortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If the result of the previous <code>ListTransformJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of transform jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListTransformJobs</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of transform jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of transform jobs to return in the response. The default value is <code>10</code>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of transform jobs to return in the response. The default value is <code>10</code>.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTrialComponents`.
///
/// <p>Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:</p>
/// <ul>
/// <li> <p> <code>ExperimentName</code> </p> </li>
/// <li> <p> <code>SourceArn</code> </p> </li>
/// <li> <p> <code>TrialName</code> </p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTrialComponents {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_trial_components_input::Builder,
}
impl ListTrialComponents {
    /// Creates a new `ListTrialComponents`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTrialComponents,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTrialComponentsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTrialComponentsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTrialComponentsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListTrialComponentsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListTrialComponentsPaginator {
        crate::paginator::ListTrialComponentsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only components that are part of the specified experiment. If you specify <code>ExperimentName</code>, you can't filter by <code>SourceArn</code> or <code>TrialName</code>.</p>
    pub fn experiment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.experiment_name(input.into());
        self
    }
    /// <p>A filter that returns only components that are part of the specified experiment. If you specify <code>ExperimentName</code>, you can't filter by <code>SourceArn</code> or <code>TrialName</code>.</p>
    pub fn set_experiment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_experiment_name(input);
        self
    }
    /// <p>A filter that returns only components that are part of the specified trial. If you specify <code>TrialName</code>, you can't filter by <code>ExperimentName</code> or <code>SourceArn</code>.</p>
    pub fn trial_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_name(input.into());
        self
    }
    /// <p>A filter that returns only components that are part of the specified trial. If you specify <code>TrialName</code>, you can't filter by <code>ExperimentName</code> or <code>SourceArn</code>.</p>
    pub fn set_trial_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trial_name(input);
        self
    }
    /// <p>A filter that returns only components that have the specified source Amazon Resource Name (ARN). If you specify <code>SourceArn</code>, you can't filter by <code>ExperimentName</code> or <code>TrialName</code>.</p>
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_arn(input.into());
        self
    }
    /// <p>A filter that returns only components that have the specified source Amazon Resource Name (ARN). If you specify <code>SourceArn</code>, you can't filter by <code>ExperimentName</code> or <code>TrialName</code>.</p>
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_arn(input);
        self
    }
    /// <p>A filter that returns only components created after the specified time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A filter that returns only components created after the specified time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A filter that returns only components created before the specified time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A filter that returns only components created before the specified time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortTrialComponentsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::SortTrialComponentsBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The maximum number of components to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of components to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous call to <code>ListTrialComponents</code> didn't return the full set of components, the call returns a token for getting the next set of components.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListTrialComponents</code> didn't return the full set of components, the call returns a token for getting the next set of components.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTrials`.
///
/// <p>Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTrials {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_trials_input::Builder,
}
impl ListTrials {
    /// Creates a new `ListTrials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTrials,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTrialsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTrialsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTrialsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListTrialsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListTrialsPaginator {
        crate::paginator::ListTrialsPaginator::new(self.handle, self.inner)
    }
    /// <p>A filter that returns only trials that are part of the specified experiment.</p>
    pub fn experiment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.experiment_name(input.into());
        self
    }
    /// <p>A filter that returns only trials that are part of the specified experiment.</p>
    pub fn set_experiment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_experiment_name(input);
        self
    }
    /// <p>A filter that returns only trials that are associated with the specified trial component.</p>
    pub fn trial_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_component_name(input.into());
        self
    }
    /// <p>A filter that returns only trials that are associated with the specified trial component.</p>
    pub fn set_trial_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_trial_component_name(input);
        self
    }
    /// <p>A filter that returns only trials created after the specified time.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>A filter that returns only trials created after the specified time.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>A filter that returns only trials created before the specified time.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>A filter that returns only trials created before the specified time.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::SortTrialsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::model::SortTrialsBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. The default value is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The maximum number of trials to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of trials to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the previous call to <code>ListTrials</code> didn't return the full set of trials, the call returns a token for getting the next set of trials.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous call to <code>ListTrials</code> didn't return the full set of trials, the call returns a token for getting the next set of trials.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListUserProfiles`.
///
/// <p>Lists user profiles.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListUserProfiles {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_user_profiles_input::Builder,
}
impl ListUserProfiles {
    /// Creates a new `ListUserProfiles`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListUserProfiles,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListUserProfilesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListUserProfilesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListUserProfilesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListUserProfilesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListUserProfilesPaginator {
        crate::paginator::ListUserProfilesPaginator::new(self.handle, self.inner)
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Returns a list up to a specified limit.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. The default is Ascending.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn sort_by(mut self, input: crate::model::UserProfileSortKey) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The parameter by which to sort the results. The default is CreationTime.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::UserProfileSortKey>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn domain_id_equals(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id_equals(input.into());
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn set_domain_id_equals(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id_equals(input);
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn user_profile_name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name_contains(input.into());
        self
    }
    /// <p>A parameter by which to filter the results.</p>
    pub fn set_user_profile_name_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name_contains(input);
        self
    }
}

/// Fluent builder constructing a request to `ListWorkforces`.
///
/// <p>Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only have one private workforce per Amazon Web Services Region.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkforces {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_workforces_input::Builder,
}
impl ListWorkforces {
    /// Creates a new `ListWorkforces`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListWorkforces,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListWorkforcesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListWorkforcesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListWorkforcesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListWorkforcesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListWorkforcesPaginator {
        crate::paginator::ListWorkforcesPaginator::new(self.handle, self.inner)
    }
    /// <p>Sort workforces using the workforce name or creation date.</p>
    pub fn sort_by(mut self, input: crate::model::ListWorkforcesSortByOptions) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Sort workforces using the workforce name or creation date.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ListWorkforcesSortByOptions>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Sort workforces in ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Sort workforces in ascending or descending order.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A filter you can use to search for workforces using part of the workforce name.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A filter you can use to search for workforces using part of the workforce name.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>A token to resume pagination.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to resume pagination.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of workforces returned in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of workforces returned in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListWorkteams`.
///
/// <p>Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkteams {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_workteams_input::Builder,
}
impl ListWorkteams {
    /// Creates a new `ListWorkteams`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListWorkteams,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListWorkteamsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListWorkteamsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListWorkteamsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListWorkteamsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListWorkteamsPaginator {
        crate::paginator::ListWorkteamsPaginator::new(self.handle, self.inner)
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::model::ListWorkteamsSortByOptions) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::model::ListWorkteamsSortByOptions>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for results. The default is <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A string in the work team's name. This filter returns only work teams whose name contains the specified string.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>A string in the work team's name. This filter returns only work teams whose name contains the specified string.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>If the result of the previous <code>ListWorkteams</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the result of the previous <code>ListWorkteams</code> request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs, use the token in the next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of work teams to return in each page of the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of work teams to return in each page of the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `PutModelPackageGroupPolicy`.
///
/// <p>Adds a resouce policy to control access to a model group. For information about resoure policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutModelPackageGroupPolicy {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_model_package_group_policy_input::Builder,
}
impl PutModelPackageGroupPolicy {
    /// Creates a new `PutModelPackageGroupPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutModelPackageGroupPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutModelPackageGroupPolicyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutModelPackageGroupPolicyOutput,
        aws_smithy_http::result::SdkError<crate::error::PutModelPackageGroupPolicyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model group to add a resource policy to.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_group_name(input.into());
        self
    }
    /// <p>The name of the model group to add a resource policy to.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_group_name(input);
        self
    }
    /// <p>The resource policy for the model group.</p>
    pub fn resource_policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_policy(input.into());
        self
    }
    /// <p>The resource policy for the model group.</p>
    pub fn set_resource_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_policy(input);
        self
    }
}

/// Fluent builder constructing a request to `QueryLineage`.
///
/// <p>Use this action to inspect your lineage and discover relationships between entities. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html"> Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct QueryLineage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::query_lineage_input::Builder,
}
impl QueryLineage {
    /// Creates a new `QueryLineage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::QueryLineage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::QueryLineageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::QueryLineageOutput,
        aws_smithy_http::result::SdkError<crate::error::QueryLineageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::QueryLineagePaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::QueryLineagePaginator {
        crate::paginator::QueryLineagePaginator::new(self.handle, self.inner)
    }
    /// Appends an item to `StartArns`.
    ///
    /// To override the contents of this collection use [`set_start_arns`](Self::set_start_arns).
    ///
    /// <p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>
    pub fn start_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.start_arns(input.into());
        self
    }
    /// <p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>
    pub fn set_start_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_start_arns(input);
        self
    }
    /// <p>Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses.</p>
    pub fn direction(mut self, input: crate::model::Direction) -> Self {
        self.inner = self.inner.direction(input);
        self
    }
    /// <p>Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses.</p>
    pub fn set_direction(mut self, input: std::option::Option<crate::model::Direction>) -> Self {
        self.inner = self.inner.set_direction(input);
        self
    }
    /// <p> Setting this value to <code>True</code> retrieves not only the entities of interest but also the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a> and lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>
    pub fn include_edges(mut self, input: bool) -> Self {
        self.inner = self.inner.include_edges(input);
        self
    }
    /// <p> Setting this value to <code>True</code> retrieves not only the entities of interest but also the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a> and lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>
    pub fn set_include_edges(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_edges(input);
        self
    }
    /// <p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
    /// <ul>
    /// <li> <p>Properties - Key-value pairs to match on the lineage entities' properties.</p> </li>
    /// <li> <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>, <code>Artifact</code>, or <code>Context</code>.</p> </li>
    /// <li> <p>CreatedBefore - Filter entities created before this date.</p> </li>
    /// <li> <p>ModifiedBefore - Filter entities modified before this date.</p> </li>
    /// <li> <p>ModifiedAfter - Filter entities modified after this date.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::model::QueryFilters) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
    /// <ul>
    /// <li> <p>Properties - Key-value pairs to match on the lineage entities' properties.</p> </li>
    /// <li> <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>, <code>Artifact</code>, or <code>Context</code>.</p> </li>
    /// <li> <p>CreatedBefore - Filter entities created before this date.</p> </li>
    /// <li> <p>ModifiedBefore - Filter entities modified before this date.</p> </li>
    /// <li> <p>ModifiedAfter - Filter entities modified after this date.</p> </li>
    /// </ul>
    pub fn set_filters(mut self, input: std::option::Option<crate::model::QueryFilters>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>
    pub fn max_depth(mut self, input: i32) -> Self {
        self.inner = self.inner.max_depth(input);
        self
    }
    /// <p>The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>
    pub fn set_max_depth(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_depth(input);
        self
    }
    /// <p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `RegisterDevices`.
///
/// <p>Register devices.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RegisterDevices {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::register_devices_input::Builder,
}
impl RegisterDevices {
    /// Creates a new `RegisterDevices`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RegisterDevices,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RegisterDevicesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RegisterDevicesOutput,
        aws_smithy_http::result::SdkError<crate::error::RegisterDevicesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the fleet.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
    /// Appends an item to `Devices`.
    ///
    /// To override the contents of this collection use [`set_devices`](Self::set_devices).
    ///
    /// <p>A list of devices to register with SageMaker Edge Manager.</p>
    pub fn devices(mut self, input: crate::model::Device) -> Self {
        self.inner = self.inner.devices(input);
        self
    }
    /// <p>A list of devices to register with SageMaker Edge Manager.</p>
    pub fn set_devices(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Device>>,
    ) -> Self {
        self.inner = self.inner.set_devices(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with devices.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags associated with devices.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `RenderUiTemplate`.
///
/// <p>Renders the UI template so that you can preview the worker's experience. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RenderUiTemplate {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::render_ui_template_input::Builder,
}
impl RenderUiTemplate {
    /// Creates a new `RenderUiTemplate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RenderUiTemplate,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RenderUiTemplateError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RenderUiTemplateOutput,
        aws_smithy_http::result::SdkError<crate::error::RenderUiTemplateError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A <code>Template</code> object containing the worker UI template to render.</p>
    pub fn ui_template(mut self, input: crate::model::UiTemplate) -> Self {
        self.inner = self.inner.ui_template(input);
        self
    }
    /// <p>A <code>Template</code> object containing the worker UI template to render.</p>
    pub fn set_ui_template(mut self, input: std::option::Option<crate::model::UiTemplate>) -> Self {
        self.inner = self.inner.set_ui_template(input);
        self
    }
    /// <p>A <code>RenderableTask</code> object containing a representative task to render.</p>
    pub fn task(mut self, input: crate::model::RenderableTask) -> Self {
        self.inner = self.inner.task(input);
        self
    }
    /// <p>A <code>RenderableTask</code> object containing a representative task to render.</p>
    pub fn set_task(mut self, input: std::option::Option<crate::model::RenderableTask>) -> Self {
        self.inner = self.inner.set_task(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code> parameter.</p>
    /// <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <code>UiConfig</code>.</p>
    pub fn human_task_ui_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.human_task_ui_arn(input.into());
        self
    }
    /// <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code> parameter.</p>
    /// <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <code>UiConfig</code>.</p>
    pub fn set_human_task_ui_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_human_task_ui_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `RetryPipelineExecution`.
///
/// <p>Retry the execution of the pipeline.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RetryPipelineExecution {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::retry_pipeline_execution_input::Builder,
}
impl RetryPipelineExecution {
    /// Creates a new `RetryPipelineExecution`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RetryPipelineExecution,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RetryPipelineExecutionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RetryPipelineExecutionOutput,
        aws_smithy_http::result::SdkError<crate::error::RetryPipelineExecutionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn pipeline_execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn set_pipeline_execution_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_arn(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline.</p>
    pub fn parallelism_configuration(
        mut self,
        input: crate::model::ParallelismConfiguration,
    ) -> Self {
        self.inner = self.inner.parallelism_configuration(input);
        self
    }
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline.</p>
    pub fn set_parallelism_configuration(
        mut self,
        input: std::option::Option<crate::model::ParallelismConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_parallelism_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `Search`.
///
/// <p>Finds Amazon SageMaker resources that match a search query. Matching resources are returned as a list of <code>SearchRecord</code> objects in the response. You can sort the search results by any resource property in a ascending or descending order.</p>
/// <p>You can query against the following value types: numeric, text, Boolean, and timestamp.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct Search {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::search_input::Builder,
}
impl Search {
    /// Creates a new `Search`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::Search,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::SearchError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::SearchOutput,
        aws_smithy_http::result::SdkError<crate::error::SearchError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::SearchPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::SearchPaginator {
        crate::paginator::SearchPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the Amazon SageMaker resource to search for.</p>
    pub fn resource(mut self, input: crate::model::ResourceType) -> Self {
        self.inner = self.inner.resource(input);
        self
    }
    /// <p>The name of the Amazon SageMaker resource to search for.</p>
    pub fn set_resource(mut self, input: std::option::Option<crate::model::ResourceType>) -> Self {
        self.inner = self.inner.set_resource(input);
        self
    }
    /// <p>A Boolean conditional statement. Resources must satisfy this condition to be included in search results. You must provide at least one subexpression, filter, or nested filter. The maximum number of recursive <code>SubExpressions</code>, <code>NestedFilters</code>, and <code>Filters</code> that can be included in a <code>SearchExpression</code> object is 50.</p>
    pub fn search_expression(mut self, input: crate::model::SearchExpression) -> Self {
        self.inner = self.inner.search_expression(input);
        self
    }
    /// <p>A Boolean conditional statement. Resources must satisfy this condition to be included in search results. You must provide at least one subexpression, filter, or nested filter. The maximum number of recursive <code>SubExpressions</code>, <code>NestedFilters</code>, and <code>Filters</code> that can be included in a <code>SearchExpression</code> object is 50.</p>
    pub fn set_search_expression(
        mut self,
        input: std::option::Option<crate::model::SearchExpression>,
    ) -> Self {
        self.inner = self.inner.set_search_expression(input);
        self
    }
    /// <p>The name of the resource property used to sort the <code>SearchResults</code>. The default is <code>LastModifiedTime</code>.</p>
    pub fn sort_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sort_by(input.into());
        self
    }
    /// <p>The name of the resource property used to sort the <code>SearchResults</code>. The default is <code>LastModifiedTime</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>How <code>SearchResults</code> are ordered. Valid values are <code>Ascending</code> or <code>Descending</code>. The default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SearchSortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>How <code>SearchResults</code> are ordered. Valid values are <code>Ascending</code> or <code>Descending</code>. The default is <code>Descending</code>.</p>
    pub fn set_sort_order(
        mut self,
        input: std::option::Option<crate::model::SearchSortOrder>,
    ) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>If more than <code>MaxResults</code> resources match the specified <code>SearchExpression</code>, the response includes a <code>NextToken</code>. The <code>NextToken</code> can be passed to the next <code>SearchRequest</code> to continue retrieving results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If more than <code>MaxResults</code> resources match the specified <code>SearchExpression</code>, the response includes a <code>NextToken</code>. The <code>NextToken</code> can be passed to the next <code>SearchRequest</code> to continue retrieving results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `SendPipelineExecutionStepFailure`.
///
/// <p>Notifies the pipeline that the execution of a callback step failed, along with a message describing why. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SendPipelineExecutionStepFailure {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::send_pipeline_execution_step_failure_input::Builder,
}
impl SendPipelineExecutionStepFailure {
    /// Creates a new `SendPipelineExecutionStepFailure`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::SendPipelineExecutionStepFailure,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::SendPipelineExecutionStepFailureError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::SendPipelineExecutionStepFailureOutput,
        aws_smithy_http::result::SdkError<crate::error::SendPipelineExecutionStepFailureError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The pipeline generated token from the Amazon SQS queue.</p>
    pub fn callback_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.callback_token(input.into());
        self
    }
    /// <p>The pipeline generated token from the Amazon SQS queue.</p>
    pub fn set_callback_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_callback_token(input);
        self
    }
    /// <p>A message describing why the step failed.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.failure_reason(input.into());
        self
    }
    /// <p>A message describing why the step failed.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_failure_reason(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `SendPipelineExecutionStepSuccess`.
///
/// <p>Notifies the pipeline that the execution of a callback step succeeded and provides a list of the step's output parameters. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SendPipelineExecutionStepSuccess {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::send_pipeline_execution_step_success_input::Builder,
}
impl SendPipelineExecutionStepSuccess {
    /// Creates a new `SendPipelineExecutionStepSuccess`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::SendPipelineExecutionStepSuccess,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::SendPipelineExecutionStepSuccessError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::SendPipelineExecutionStepSuccessOutput,
        aws_smithy_http::result::SdkError<crate::error::SendPipelineExecutionStepSuccessError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The pipeline generated token from the Amazon SQS queue.</p>
    pub fn callback_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.callback_token(input.into());
        self
    }
    /// <p>The pipeline generated token from the Amazon SQS queue.</p>
    pub fn set_callback_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_callback_token(input);
        self
    }
    /// Appends an item to `OutputParameters`.
    ///
    /// To override the contents of this collection use [`set_output_parameters`](Self::set_output_parameters).
    ///
    /// <p>A list of the output parameters of the callback step.</p>
    pub fn output_parameters(mut self, input: crate::model::OutputParameter) -> Self {
        self.inner = self.inner.output_parameters(input);
        self
    }
    /// <p>A list of the output parameters of the callback step.</p>
    pub fn set_output_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::OutputParameter>>,
    ) -> Self {
        self.inner = self.inner.set_output_parameters(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `StartEdgeDeploymentStage`.
///
/// <p>Starts a stage in an edge deployment plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartEdgeDeploymentStage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_edge_deployment_stage_input::Builder,
}
impl StartEdgeDeploymentStage {
    /// Creates a new `StartEdgeDeploymentStage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartEdgeDeploymentStage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartEdgeDeploymentStageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartEdgeDeploymentStageOutput,
        aws_smithy_http::result::SdkError<crate::error::StartEdgeDeploymentStageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge deployment plan to start.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_deployment_plan_name(input.into());
        self
    }
    /// <p>The name of the edge deployment plan to start.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_deployment_plan_name(input);
        self
    }
    /// <p>The name of the stage to start.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stage_name(input.into());
        self
    }
    /// <p>The name of the stage to start.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stage_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StartInferenceExperiment`.
///
/// <p>Starts an inference experiment.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartInferenceExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_inference_experiment_input::Builder,
}
impl StartInferenceExperiment {
    /// Creates a new `StartInferenceExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartInferenceExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartInferenceExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartInferenceExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::StartInferenceExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the inference experiment to start.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the inference experiment to start.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StartMonitoringSchedule`.
///
/// <p>Starts a previously stopped monitoring schedule.</p> <note>
/// <p>By default, when you successfully create a new schedule, the status of a monitoring schedule is <code>scheduled</code>.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartMonitoringSchedule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_monitoring_schedule_input::Builder,
}
impl StartMonitoringSchedule {
    /// Creates a new `StartMonitoringSchedule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartMonitoringSchedule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartMonitoringScheduleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartMonitoringScheduleOutput,
        aws_smithy_http::result::SdkError<crate::error::StartMonitoringScheduleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the schedule to start.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>The name of the schedule to start.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StartNotebookInstance`.
///
/// <p>Launches an ML compute instance with the latest version of the libraries and attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the notebook instance status to <code>InService</code>. A notebook instance's status must be <code>InService</code> before you can connect to your Jupyter notebook. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartNotebookInstance {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_notebook_instance_input::Builder,
}
impl StartNotebookInstance {
    /// Creates a new `StartNotebookInstance`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartNotebookInstance,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartNotebookInstanceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartNotebookInstanceOutput,
        aws_smithy_http::result::SdkError<crate::error::StartNotebookInstanceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the notebook instance to start.</p>
    pub fn notebook_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_name(input.into());
        self
    }
    /// <p>The name of the notebook instance to start.</p>
    pub fn set_notebook_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_notebook_instance_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StartPipelineExecution`.
///
/// <p>Starts a pipeline execution.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartPipelineExecution {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_pipeline_execution_input::Builder,
}
impl StartPipelineExecution {
    /// Creates a new `StartPipelineExecution`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartPipelineExecution,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartPipelineExecutionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartPipelineExecutionOutput,
        aws_smithy_http::result::SdkError<crate::error::StartPipelineExecutionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the pipeline.</p>
    pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p>The name of the pipeline.</p>
    pub fn set_pipeline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
    /// <p>The display name of the pipeline execution.</p>
    pub fn pipeline_execution_display_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.pipeline_execution_display_name(input.into());
        self
    }
    /// <p>The display name of the pipeline execution.</p>
    pub fn set_pipeline_execution_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_display_name(input);
        self
    }
    /// Appends an item to `PipelineParameters`.
    ///
    /// To override the contents of this collection use [`set_pipeline_parameters`](Self::set_pipeline_parameters).
    ///
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    pub fn pipeline_parameters(mut self, input: crate::model::Parameter) -> Self {
        self.inner = self.inner.pipeline_parameters(input);
        self
    }
    /// <p>Contains a list of pipeline parameters. This list can be empty. </p>
    pub fn set_pipeline_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_parameters(input);
        self
    }
    /// <p>The description of the pipeline execution.</p>
    pub fn pipeline_execution_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_description(input.into());
        self
    }
    /// <p>The description of the pipeline execution.</p>
    pub fn set_pipeline_execution_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_description(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.</p>
    pub fn parallelism_configuration(
        mut self,
        input: crate::model::ParallelismConfiguration,
    ) -> Self {
        self.inner = self.inner.parallelism_configuration(input);
        self
    }
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.</p>
    pub fn set_parallelism_configuration(
        mut self,
        input: std::option::Option<crate::model::ParallelismConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_parallelism_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `StopAutoMLJob`.
///
/// <p>A method for forcing the termination of a running job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopAutoMLJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_auto_ml_job_input::Builder,
}
impl StopAutoMLJob {
    /// Creates a new `StopAutoMLJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopAutoMLJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopAutoMLJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopAutoMlJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopAutoMLJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the object you are requesting.</p>
    pub fn auto_ml_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_ml_job_name(input.into());
        self
    }
    /// <p>The name of the object you are requesting.</p>
    pub fn set_auto_ml_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_auto_ml_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopCompilationJob`.
///
/// <p>Stops a model compilation job.</p>
/// <p> To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the job down. If the job hasn't stopped, it sends the SIGKILL signal.</p>
/// <p>When it receives a <code>StopCompilationJob</code> request, Amazon SageMaker changes the <code>CompilationJobSummary$CompilationJobStatus</code> of the job to <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the <code>CompilationJobSummary$CompilationJobStatus</code> to <code>Stopped</code>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopCompilationJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_compilation_job_input::Builder,
}
impl StopCompilationJob {
    /// Creates a new `StopCompilationJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopCompilationJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopCompilationJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopCompilationJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopCompilationJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model compilation job to stop.</p>
    pub fn compilation_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.compilation_job_name(input.into());
        self
    }
    /// <p>The name of the model compilation job to stop.</p>
    pub fn set_compilation_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_compilation_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopEdgeDeploymentStage`.
///
/// <p>Stops a stage in an edge deployment plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopEdgeDeploymentStage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_edge_deployment_stage_input::Builder,
}
impl StopEdgeDeploymentStage {
    /// Creates a new `StopEdgeDeploymentStage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopEdgeDeploymentStage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopEdgeDeploymentStageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopEdgeDeploymentStageOutput,
        aws_smithy_http::result::SdkError<crate::error::StopEdgeDeploymentStageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge deployment plan to stop.</p>
    pub fn edge_deployment_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_deployment_plan_name(input.into());
        self
    }
    /// <p>The name of the edge deployment plan to stop.</p>
    pub fn set_edge_deployment_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_deployment_plan_name(input);
        self
    }
    /// <p>The name of the stage to stop.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stage_name(input.into());
        self
    }
    /// <p>The name of the stage to stop.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stage_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopEdgePackagingJob`.
///
/// <p>Request to stop an edge packaging job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopEdgePackagingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_edge_packaging_job_input::Builder,
}
impl StopEdgePackagingJob {
    /// Creates a new `StopEdgePackagingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopEdgePackagingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopEdgePackagingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopEdgePackagingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopEdgePackagingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the edge packaging job.</p>
    pub fn edge_packaging_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.edge_packaging_job_name(input.into());
        self
    }
    /// <p>The name of the edge packaging job.</p>
    pub fn set_edge_packaging_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_edge_packaging_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopHyperParameterTuningJob`.
///
/// <p>Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched.</p>
/// <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the <code>Stopped</code> state, it releases all reserved resources for the tuning job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopHyperParameterTuningJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_hyper_parameter_tuning_job_input::Builder,
}
impl StopHyperParameterTuningJob {
    /// Creates a new `StopHyperParameterTuningJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopHyperParameterTuningJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopHyperParameterTuningJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopHyperParameterTuningJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopHyperParameterTuningJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the tuning job to stop.</p>
    pub fn hyper_parameter_tuning_job_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.hyper_parameter_tuning_job_name(input.into());
        self
    }
    /// <p>The name of the tuning job to stop.</p>
    pub fn set_hyper_parameter_tuning_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hyper_parameter_tuning_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopInferenceExperiment`.
///
/// <p>Stops an inference experiment.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopInferenceExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_inference_experiment_input::Builder,
}
impl StopInferenceExperiment {
    /// Creates a new `StopInferenceExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopInferenceExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopInferenceExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopInferenceExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::StopInferenceExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the inference experiment to stop.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the inference experiment to stop.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Adds a key-value pair to `ModelVariantActions`.
    ///
    /// To override the contents of this collection use [`set_model_variant_actions`](Self::set_model_variant_actions).
    ///
    /// <p> Array of key-value pairs, with names of variants mapped to actions. The possible actions are the following: </p>
    /// <ul>
    /// <li> <p> <code>Promote</code> - Promote the shadow variant to a production variant</p> </li>
    /// <li> <p> <code>Remove</code> - Delete the variant</p> </li>
    /// <li> <p> <code>Retain</code> - Keep the variant as it is</p> </li>
    /// </ul>
    pub fn model_variant_actions(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::model::ModelVariantAction,
    ) -> Self {
        self.inner = self.inner.model_variant_actions(k.into(), v);
        self
    }
    /// <p> Array of key-value pairs, with names of variants mapped to actions. The possible actions are the following: </p>
    /// <ul>
    /// <li> <p> <code>Promote</code> - Promote the shadow variant to a production variant</p> </li>
    /// <li> <p> <code>Remove</code> - Delete the variant</p> </li>
    /// <li> <p> <code>Retain</code> - Keep the variant as it is</p> </li>
    /// </ul>
    pub fn set_model_variant_actions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::ModelVariantAction>,
        >,
    ) -> Self {
        self.inner = self.inner.set_model_variant_actions(input);
        self
    }
    /// Appends an item to `DesiredModelVariants`.
    ///
    /// To override the contents of this collection use [`set_desired_model_variants`](Self::set_desired_model_variants).
    ///
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant that you want to deploy after the inference experiment stops. Each <code>ModelVariantConfig</code> describes the infrastructure configuration for deploying the corresponding variant. </p>
    pub fn desired_model_variants(mut self, input: crate::model::ModelVariantConfig) -> Self {
        self.inner = self.inner.desired_model_variants(input);
        self
    }
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant that you want to deploy after the inference experiment stops. Each <code>ModelVariantConfig</code> describes the infrastructure configuration for deploying the corresponding variant. </p>
    pub fn set_desired_model_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ModelVariantConfig>>,
    ) -> Self {
        self.inner = self.inner.set_desired_model_variants(input);
        self
    }
    /// <p> The desired state of the experiment after stopping. The possible states are the following: </p>
    /// <ul>
    /// <li> <p> <code>Completed</code>: The experiment completed successfully</p> </li>
    /// <li> <p> <code>Cancelled</code>: The experiment was canceled</p> </li>
    /// </ul>
    pub fn desired_state(
        mut self,
        input: crate::model::InferenceExperimentStopDesiredState,
    ) -> Self {
        self.inner = self.inner.desired_state(input);
        self
    }
    /// <p> The desired state of the experiment after stopping. The possible states are the following: </p>
    /// <ul>
    /// <li> <p> <code>Completed</code>: The experiment completed successfully</p> </li>
    /// <li> <p> <code>Cancelled</code>: The experiment was canceled</p> </li>
    /// </ul>
    pub fn set_desired_state(
        mut self,
        input: std::option::Option<crate::model::InferenceExperimentStopDesiredState>,
    ) -> Self {
        self.inner = self.inner.set_desired_state(input);
        self
    }
    /// <p>The reason for stopping the experiment.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reason(input.into());
        self
    }
    /// <p>The reason for stopping the experiment.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
}

/// Fluent builder constructing a request to `StopInferenceRecommendationsJob`.
///
/// <p>Stops an Inference Recommender job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopInferenceRecommendationsJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_inference_recommendations_job_input::Builder,
}
impl StopInferenceRecommendationsJob {
    /// Creates a new `StopInferenceRecommendationsJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopInferenceRecommendationsJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopInferenceRecommendationsJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopInferenceRecommendationsJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopInferenceRecommendationsJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the job you want to stop.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>The name of the job you want to stop.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopLabelingJob`.
///
/// <p>Stops a running labeling job. A job that is stopped cannot be restarted. Any results obtained before the job is stopped are placed in the Amazon S3 output bucket.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopLabelingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_labeling_job_input::Builder,
}
impl StopLabelingJob {
    /// Creates a new `StopLabelingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopLabelingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopLabelingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopLabelingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopLabelingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the labeling job to stop.</p>
    pub fn labeling_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.labeling_job_name(input.into());
        self
    }
    /// <p>The name of the labeling job to stop.</p>
    pub fn set_labeling_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_labeling_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopMonitoringSchedule`.
///
/// <p>Stops a previously started monitoring schedule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopMonitoringSchedule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_monitoring_schedule_input::Builder,
}
impl StopMonitoringSchedule {
    /// Creates a new `StopMonitoringSchedule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopMonitoringSchedule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopMonitoringScheduleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopMonitoringScheduleOutput,
        aws_smithy_http::result::SdkError<crate::error::StopMonitoringScheduleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the schedule to stop.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>The name of the schedule to stop.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopNotebookInstance`.
///
/// <p>Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call <code>StopNotebookInstance</code>.</p>
/// <p>To access data on the ML storage volume for a notebook instance that has been terminated, call the <code>StartNotebookInstance</code> API. <code>StartNotebookInstance</code> launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopNotebookInstance {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_notebook_instance_input::Builder,
}
impl StopNotebookInstance {
    /// Creates a new `StopNotebookInstance`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopNotebookInstance,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopNotebookInstanceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopNotebookInstanceOutput,
        aws_smithy_http::result::SdkError<crate::error::StopNotebookInstanceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the notebook instance to terminate.</p>
    pub fn notebook_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_name(input.into());
        self
    }
    /// <p>The name of the notebook instance to terminate.</p>
    pub fn set_notebook_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_notebook_instance_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopPipelineExecution`.
///
/// <p>Stops a pipeline execution.</p>
/// <p> <b>Callback Step</b> </p>
/// <p>A pipeline execution won't stop while a callback step is running. When you call <code>StopPipelineExecution</code> on a pipeline execution with a running callback step, SageMaker Pipelines sends an additional Amazon SQS message to the specified SQS queue. The body of the SQS message contains a "Status" field which is set to "Stopping".</p>
/// <p>You should add logic to your Amazon SQS message consumer to take any needed action (for example, resource cleanup) upon receipt of the message followed by a call to <code>SendPipelineExecutionStepSuccess</code> or <code>SendPipelineExecutionStepFailure</code>.</p>
/// <p>Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.</p>
/// <p> <b>Lambda Step</b> </p>
/// <p>A pipeline execution can't be stopped while a lambda step is running because the Lambda function invoked by the lambda step can't be stopped. If you attempt to stop the execution while the Lambda function is running, the pipeline waits for the Lambda function to finish or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function finishes, the pipeline execution status is <code>Stopped</code>. If the timeout is hit the pipeline execution status is <code>Failed</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopPipelineExecution {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_pipeline_execution_input::Builder,
}
impl StopPipelineExecution {
    /// Creates a new `StopPipelineExecution`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopPipelineExecution,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopPipelineExecutionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopPipelineExecutionOutput,
        aws_smithy_http::result::SdkError<crate::error::StopPipelineExecutionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn pipeline_execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn set_pipeline_execution_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_arn(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `StopProcessingJob`.
///
/// <p>Stops a processing job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopProcessingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_processing_job_input::Builder,
}
impl StopProcessingJob {
    /// Creates a new `StopProcessingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopProcessingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopProcessingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopProcessingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopProcessingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the processing job to stop.</p>
    pub fn processing_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.processing_job_name(input.into());
        self
    }
    /// <p>The name of the processing job to stop.</p>
    pub fn set_processing_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_processing_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopTrainingJob`.
///
/// <p>Stops a training job. To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts, so the results of the training is not lost. </p>
/// <p>When it receives a <code>StopTrainingJob</code> request, SageMaker changes the status of the job to <code>Stopping</code>. After SageMaker stops the job, it sets the status to <code>Stopped</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopTrainingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_training_job_input::Builder,
}
impl StopTrainingJob {
    /// Creates a new `StopTrainingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopTrainingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopTrainingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopTrainingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopTrainingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the training job to stop.</p>
    pub fn training_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.training_job_name(input.into());
        self
    }
    /// <p>The name of the training job to stop.</p>
    pub fn set_training_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_training_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopTransformJob`.
///
/// <p>Stops a batch transform job.</p>
/// <p>When Amazon SageMaker receives a <code>StopTransformJob</code> request, the status of the job changes to <code>Stopping</code>. After Amazon SageMaker stops the job, the status is set to <code>Stopped</code>. When you stop a batch transform job before it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopTransformJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_transform_job_input::Builder,
}
impl StopTransformJob {
    /// Creates a new `StopTransformJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopTransformJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopTransformJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopTransformJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopTransformJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the batch transform job to stop.</p>
    pub fn transform_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.transform_job_name(input.into());
        self
    }
    /// <p>The name of the batch transform job to stop.</p>
    pub fn set_transform_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_transform_job_name(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateAction`.
///
/// <p>Updates an action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAction {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_action_input::Builder,
}
impl UpdateAction {
    /// Creates a new `UpdateAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateActionOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the action to update.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_name(input.into());
        self
    }
    /// <p>The name of the action to update.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_name(input);
        self
    }
    /// <p>The new description for the action.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The new description for the action.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The new status for the action.</p>
    pub fn status(mut self, input: crate::model::ActionStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The new status for the action.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::model::ActionStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// Adds a key-value pair to `Properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>The new list of properties. Overwrites the current property list.</p>
    pub fn properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.properties(k.into(), v.into());
        self
    }
    /// <p>The new list of properties. Overwrites the current property list.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_properties(input);
        self
    }
    /// Appends an item to `PropertiesToRemove`.
    ///
    /// To override the contents of this collection use [`set_properties_to_remove`](Self::set_properties_to_remove).
    ///
    /// <p>A list of properties to remove.</p>
    pub fn properties_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.properties_to_remove(input.into());
        self
    }
    /// <p>A list of properties to remove.</p>
    pub fn set_properties_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_properties_to_remove(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateAppImageConfig`.
///
/// <p>Updates the properties of an AppImageConfig.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAppImageConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_app_image_config_input::Builder,
}
impl UpdateAppImageConfig {
    /// Creates a new `UpdateAppImageConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateAppImageConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateAppImageConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateAppImageConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateAppImageConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the AppImageConfig to update.</p>
    pub fn app_image_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_image_config_name(input.into());
        self
    }
    /// <p>The name of the AppImageConfig to update.</p>
    pub fn set_app_image_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_app_image_config_name(input);
        self
    }
    /// <p>The new KernelGateway app to run on the image.</p>
    pub fn kernel_gateway_image_config(
        mut self,
        input: crate::model::KernelGatewayImageConfig,
    ) -> Self {
        self.inner = self.inner.kernel_gateway_image_config(input);
        self
    }
    /// <p>The new KernelGateway app to run on the image.</p>
    pub fn set_kernel_gateway_image_config(
        mut self,
        input: std::option::Option<crate::model::KernelGatewayImageConfig>,
    ) -> Self {
        self.inner = self.inner.set_kernel_gateway_image_config(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateArtifact`.
///
/// <p>Updates an artifact.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateArtifact {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_artifact_input::Builder,
}
impl UpdateArtifact {
    /// Creates a new `UpdateArtifact`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateArtifact,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateArtifactError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateArtifactOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateArtifactError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the artifact to update.</p>
    pub fn artifact_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.artifact_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the artifact to update.</p>
    pub fn set_artifact_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_artifact_arn(input);
        self
    }
    /// <p>The new name for the artifact.</p>
    pub fn artifact_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.artifact_name(input.into());
        self
    }
    /// <p>The new name for the artifact.</p>
    pub fn set_artifact_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_artifact_name(input);
        self
    }
    /// Adds a key-value pair to `Properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>The new list of properties. Overwrites the current property list.</p>
    pub fn properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.properties(k.into(), v.into());
        self
    }
    /// <p>The new list of properties. Overwrites the current property list.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_properties(input);
        self
    }
    /// Appends an item to `PropertiesToRemove`.
    ///
    /// To override the contents of this collection use [`set_properties_to_remove`](Self::set_properties_to_remove).
    ///
    /// <p>A list of properties to remove.</p>
    pub fn properties_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.properties_to_remove(input.into());
        self
    }
    /// <p>A list of properties to remove.</p>
    pub fn set_properties_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_properties_to_remove(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateCodeRepository`.
///
/// <p>Updates the specified Git repository with the specified values.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCodeRepository {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_code_repository_input::Builder,
}
impl UpdateCodeRepository {
    /// Creates a new `UpdateCodeRepository`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateCodeRepository,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateCodeRepositoryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateCodeRepositoryOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateCodeRepositoryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Git repository to update.</p>
    pub fn code_repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.code_repository_name(input.into());
        self
    }
    /// <p>The name of the Git repository to update.</p>
    pub fn set_code_repository_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_code_repository_name(input);
        self
    }
    /// <p>The configuration of the git repository, including the URL and the Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository. The secret must have a staging label of <code>AWSCURRENT</code> and must be in the following format:</p>
    /// <p> <code>{"username": <i>UserName</i>, "password": <i>Password</i>}</code> </p>
    pub fn git_config(mut self, input: crate::model::GitConfigForUpdate) -> Self {
        self.inner = self.inner.git_config(input);
        self
    }
    /// <p>The configuration of the git repository, including the URL and the Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository. The secret must have a staging label of <code>AWSCURRENT</code> and must be in the following format:</p>
    /// <p> <code>{"username": <i>UserName</i>, "password": <i>Password</i>}</code> </p>
    pub fn set_git_config(
        mut self,
        input: std::option::Option<crate::model::GitConfigForUpdate>,
    ) -> Self {
        self.inner = self.inner.set_git_config(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateContext`.
///
/// <p>Updates a context.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateContext {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_context_input::Builder,
}
impl UpdateContext {
    /// Creates a new `UpdateContext`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateContext,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateContextError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateContextOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateContextError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the context to update.</p>
    pub fn context_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.context_name(input.into());
        self
    }
    /// <p>The name of the context to update.</p>
    pub fn set_context_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_context_name(input);
        self
    }
    /// <p>The new description for the context.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The new description for the context.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Adds a key-value pair to `Properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>The new list of properties. Overwrites the current property list.</p>
    pub fn properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.properties(k.into(), v.into());
        self
    }
    /// <p>The new list of properties. Overwrites the current property list.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_properties(input);
        self
    }
    /// Appends an item to `PropertiesToRemove`.
    ///
    /// To override the contents of this collection use [`set_properties_to_remove`](Self::set_properties_to_remove).
    ///
    /// <p>A list of properties to remove.</p>
    pub fn properties_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.properties_to_remove(input.into());
        self
    }
    /// <p>A list of properties to remove.</p>
    pub fn set_properties_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_properties_to_remove(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateDeviceFleet`.
///
/// <p>Updates a fleet of devices.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDeviceFleet {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_device_fleet_input::Builder,
}
impl UpdateDeviceFleet {
    /// Creates a new `UpdateDeviceFleet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateDeviceFleet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateDeviceFleetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateDeviceFleetOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateDeviceFleetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the fleet.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>Description of the fleet.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>Description of the fleet.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Output configuration for storing sample data collected by the fleet.</p>
    pub fn output_config(mut self, input: crate::model::EdgeOutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>Output configuration for storing sample data collected by the fleet.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::model::EdgeOutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn enable_iot_role_alias(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_iot_role_alias(input);
        self
    }
    /// <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".</p>
    /// <p>For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".</p>
    pub fn set_enable_iot_role_alias(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_iot_role_alias(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateDevices`.
///
/// <p>Updates one or more devices in a fleet.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDevices {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_devices_input::Builder,
}
impl UpdateDevices {
    /// Creates a new `UpdateDevices`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateDevices,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateDevicesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateDevicesOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateDevicesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the fleet the devices belong to.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_fleet_name(input.into());
        self
    }
    /// <p>The name of the fleet the devices belong to.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_fleet_name(input);
        self
    }
    /// Appends an item to `Devices`.
    ///
    /// To override the contents of this collection use [`set_devices`](Self::set_devices).
    ///
    /// <p>List of devices to register with Edge Manager agent.</p>
    pub fn devices(mut self, input: crate::model::Device) -> Self {
        self.inner = self.inner.devices(input);
        self
    }
    /// <p>List of devices to register with Edge Manager agent.</p>
    pub fn set_devices(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Device>>,
    ) -> Self {
        self.inner = self.inner.set_devices(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateDomain`.
///
/// <p>Updates the default settings for new user profiles in the domain.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDomain {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_domain_input::Builder,
}
impl UpdateDomain {
    /// Creates a new `UpdateDomain`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateDomain,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateDomainError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateDomainOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateDomainError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the domain to be updated.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The ID of the domain to be updated.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn default_user_settings(mut self, input: crate::model::UserSettings) -> Self {
        self.inner = self.inner.default_user_settings(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn set_default_user_settings(
        mut self,
        input: std::option::Option<crate::model::UserSettings>,
    ) -> Self {
        self.inner = self.inner.set_default_user_settings(input);
        self
    }
    /// <p>A collection of <code>DomainSettings</code> configuration values to update.</p>
    pub fn domain_settings_for_update(
        mut self,
        input: crate::model::DomainSettingsForUpdate,
    ) -> Self {
        self.inner = self.inner.domain_settings_for_update(input);
        self
    }
    /// <p>A collection of <code>DomainSettings</code> configuration values to update.</p>
    pub fn set_domain_settings_for_update(
        mut self,
        input: std::option::Option<crate::model::DomainSettingsForUpdate>,
    ) -> Self {
        self.inner = self.inner.set_domain_settings_for_update(input);
        self
    }
    /// <p>The default settings used to create a space within the Domain.</p>
    pub fn default_space_settings(mut self, input: crate::model::DefaultSpaceSettings) -> Self {
        self.inner = self.inner.default_space_settings(input);
        self
    }
    /// <p>The default settings used to create a space within the Domain.</p>
    pub fn set_default_space_settings(
        mut self,
        input: std::option::Option<crate::model::DefaultSpaceSettings>,
    ) -> Self {
        self.inner = self.inner.set_default_space_settings(input);
        self
    }
    /// <p>The entity that creates and manages the required security groups for inter-app communication in <code>VPCOnly</code> mode. Required when <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code> is provided.</p>
    pub fn app_security_group_management(
        mut self,
        input: crate::model::AppSecurityGroupManagement,
    ) -> Self {
        self.inner = self.inner.app_security_group_management(input);
        self
    }
    /// <p>The entity that creates and manages the required security groups for inter-app communication in <code>VPCOnly</code> mode. Required when <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code> is provided.</p>
    pub fn set_app_security_group_management(
        mut self,
        input: std::option::Option<crate::model::AppSecurityGroupManagement>,
    ) -> Self {
        self.inner = self.inner.set_app_security_group_management(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateEndpoint`.
///
/// <p>Deploys the new <code>EndpointConfig</code> specified in the request, switches to using newly created endpoint, and then deletes resources provisioned for the endpoint using the previous <code>EndpointConfig</code> (there is no availability loss). </p>
/// <p>When SageMaker receives the request, it sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <code>DescribeEndpoint</code> API. </p> <note>
/// <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p>
/// <p>If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEndpoint {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_endpoint_input::Builder,
}
impl UpdateEndpoint {
    /// Creates a new `UpdateEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateEndpointError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateEndpointOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateEndpointError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the endpoint whose configuration you want to update.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>The name of the endpoint whose configuration you want to update.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>The name of the new endpoint configuration.</p>
    pub fn endpoint_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_config_name(input.into());
        self
    }
    /// <p>The name of the new endpoint configuration.</p>
    pub fn set_endpoint_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_config_name(input);
        self
    }
    /// <p>When updating endpoint resources, enables or disables the retention of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html">variant properties</a>, such as the instance count or the variant weight. To retain the variant properties of an endpoint when updating it, set <code>RetainAllVariantProperties</code> to <code>true</code>. To use the variant properties specified in a new <code>EndpointConfig</code> call when updating an endpoint, set <code>RetainAllVariantProperties</code> to <code>false</code>. The default is <code>false</code>.</p>
    pub fn retain_all_variant_properties(mut self, input: bool) -> Self {
        self.inner = self.inner.retain_all_variant_properties(input);
        self
    }
    /// <p>When updating endpoint resources, enables or disables the retention of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html">variant properties</a>, such as the instance count or the variant weight. To retain the variant properties of an endpoint when updating it, set <code>RetainAllVariantProperties</code> to <code>true</code>. To use the variant properties specified in a new <code>EndpointConfig</code> call when updating an endpoint, set <code>RetainAllVariantProperties</code> to <code>false</code>. The default is <code>false</code>.</p>
    pub fn set_retain_all_variant_properties(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_retain_all_variant_properties(input);
        self
    }
    /// Appends an item to `ExcludeRetainedVariantProperties`.
    ///
    /// To override the contents of this collection use [`set_exclude_retained_variant_properties`](Self::set_exclude_retained_variant_properties).
    ///
    /// <p>When you are updating endpoint resources with <code>UpdateEndpointInput$RetainAllVariantProperties</code>, whose value is set to <code>true</code>, <code>ExcludeRetainedVariantProperties</code> specifies the list of type <code>VariantProperty</code> to override with the values provided by <code>EndpointConfig</code>. If you don't specify a value for <code>ExcludeRetainedVariantProperties</code>, no variant properties are overridden. </p>
    pub fn exclude_retained_variant_properties(
        mut self,
        input: crate::model::VariantProperty,
    ) -> Self {
        self.inner = self.inner.exclude_retained_variant_properties(input);
        self
    }
    /// <p>When you are updating endpoint resources with <code>UpdateEndpointInput$RetainAllVariantProperties</code>, whose value is set to <code>true</code>, <code>ExcludeRetainedVariantProperties</code> specifies the list of type <code>VariantProperty</code> to override with the values provided by <code>EndpointConfig</code>. If you don't specify a value for <code>ExcludeRetainedVariantProperties</code>, no variant properties are overridden. </p>
    pub fn set_exclude_retained_variant_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::VariantProperty>>,
    ) -> Self {
        self.inner = self.inner.set_exclude_retained_variant_properties(input);
        self
    }
    /// <p>The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.</p>
    pub fn deployment_config(mut self, input: crate::model::DeploymentConfig) -> Self {
        self.inner = self.inner.deployment_config(input);
        self
    }
    /// <p>The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.</p>
    pub fn set_deployment_config(
        mut self,
        input: std::option::Option<crate::model::DeploymentConfig>,
    ) -> Self {
        self.inner = self.inner.set_deployment_config(input);
        self
    }
    /// <p>Specifies whether to reuse the last deployment configuration. The default value is false (the configuration is not reused).</p>
    pub fn retain_deployment_config(mut self, input: bool) -> Self {
        self.inner = self.inner.retain_deployment_config(input);
        self
    }
    /// <p>Specifies whether to reuse the last deployment configuration. The default value is false (the configuration is not reused).</p>
    pub fn set_retain_deployment_config(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_retain_deployment_config(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateEndpointWeightsAndCapacities`.
///
/// <p>Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <code>DescribeEndpoint</code> API. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEndpointWeightsAndCapacities {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_endpoint_weights_and_capacities_input::Builder,
}
impl UpdateEndpointWeightsAndCapacities {
    /// Creates a new `UpdateEndpointWeightsAndCapacities`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateEndpointWeightsAndCapacities,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateEndpointWeightsAndCapacitiesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateEndpointWeightsAndCapacitiesOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateEndpointWeightsAndCapacitiesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of an existing SageMaker endpoint.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>The name of an existing SageMaker endpoint.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// Appends an item to `DesiredWeightsAndCapacities`.
    ///
    /// To override the contents of this collection use [`set_desired_weights_and_capacities`](Self::set_desired_weights_and_capacities).
    ///
    /// <p>An object that provides new capacity and weight values for a variant.</p>
    pub fn desired_weights_and_capacities(
        mut self,
        input: crate::model::DesiredWeightAndCapacity,
    ) -> Self {
        self.inner = self.inner.desired_weights_and_capacities(input);
        self
    }
    /// <p>An object that provides new capacity and weight values for a variant.</p>
    pub fn set_desired_weights_and_capacities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::DesiredWeightAndCapacity>>,
    ) -> Self {
        self.inner = self.inner.set_desired_weights_and_capacities(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateExperiment`.
///
/// <p>Adds, updates, or removes the description of an experiment. Updates the display name of an experiment.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_experiment_input::Builder,
}
impl UpdateExperiment {
    /// Creates a new `UpdateExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the experiment to update.</p>
    pub fn experiment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.experiment_name(input.into());
        self
    }
    /// <p>The name of the experiment to update.</p>
    pub fn set_experiment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_experiment_name(input);
        self
    }
    /// <p>The name of the experiment as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>ExperimentName</code> is displayed.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The name of the experiment as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>ExperimentName</code> is displayed.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The description of the experiment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the experiment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateFeatureGroup`.
///
/// <p>Updates the feature group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFeatureGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_feature_group_input::Builder,
}
impl UpdateFeatureGroup {
    /// Creates a new `UpdateFeatureGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateFeatureGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateFeatureGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateFeatureGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateFeatureGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the feature group that you're updating.</p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.feature_group_name(input.into());
        self
    }
    /// <p>The name of the feature group that you're updating.</p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_feature_group_name(input);
        self
    }
    /// Appends an item to `FeatureAdditions`.
    ///
    /// To override the contents of this collection use [`set_feature_additions`](Self::set_feature_additions).
    ///
    /// <p>Updates the feature group. Updating a feature group is an asynchronous operation. When you get an HTTP 200 response, you've made a valid request. It takes some time after you've made a valid request for Feature Store to update the feature group.</p>
    pub fn feature_additions(mut self, input: crate::model::FeatureDefinition) -> Self {
        self.inner = self.inner.feature_additions(input);
        self
    }
    /// <p>Updates the feature group. Updating a feature group is an asynchronous operation. When you get an HTTP 200 response, you've made a valid request. It takes some time after you've made a valid request for Feature Store to update the feature group.</p>
    pub fn set_feature_additions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::FeatureDefinition>>,
    ) -> Self {
        self.inner = self.inner.set_feature_additions(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateFeatureMetadata`.
///
/// <p>Updates the description and parameters of the feature group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFeatureMetadata {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_feature_metadata_input::Builder,
}
impl UpdateFeatureMetadata {
    /// Creates a new `UpdateFeatureMetadata`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateFeatureMetadata,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateFeatureMetadataError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateFeatureMetadataOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateFeatureMetadataError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the feature group containing the feature that you're updating.</p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.feature_group_name(input.into());
        self
    }
    /// <p>The name of the feature group containing the feature that you're updating.</p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_feature_group_name(input);
        self
    }
    /// <p>The name of the feature that you're updating.</p>
    pub fn feature_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.feature_name(input.into());
        self
    }
    /// <p>The name of the feature that you're updating.</p>
    pub fn set_feature_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_feature_name(input);
        self
    }
    /// <p>A description that you can write to better describe the feature.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description that you can write to better describe the feature.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `ParameterAdditions`.
    ///
    /// To override the contents of this collection use [`set_parameter_additions`](Self::set_parameter_additions).
    ///
    /// <p>A list of key-value pairs that you can add to better describe the feature.</p>
    pub fn parameter_additions(mut self, input: crate::model::FeatureParameter) -> Self {
        self.inner = self.inner.parameter_additions(input);
        self
    }
    /// <p>A list of key-value pairs that you can add to better describe the feature.</p>
    pub fn set_parameter_additions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::FeatureParameter>>,
    ) -> Self {
        self.inner = self.inner.set_parameter_additions(input);
        self
    }
    /// Appends an item to `ParameterRemovals`.
    ///
    /// To override the contents of this collection use [`set_parameter_removals`](Self::set_parameter_removals).
    ///
    /// <p>A list of parameter keys that you can specify to remove parameters that describe your feature.</p>
    pub fn parameter_removals(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.parameter_removals(input.into());
        self
    }
    /// <p>A list of parameter keys that you can specify to remove parameters that describe your feature.</p>
    pub fn set_parameter_removals(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_parameter_removals(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateHub`.
///
/// <p>Update a hub.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateHub {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_hub_input::Builder,
}
impl UpdateHub {
    /// Creates a new `UpdateHub`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateHub,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateHubError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateHubOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateHubError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the hub to update.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_name(input.into());
        self
    }
    /// <p>The name of the hub to update.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_name(input);
        self
    }
    /// <p>A description of the updated hub.</p>
    pub fn hub_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_description(input.into());
        self
    }
    /// <p>A description of the updated hub.</p>
    pub fn set_hub_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_description(input);
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn hub_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_display_name(input.into());
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn set_hub_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hub_display_name(input);
        self
    }
    /// Appends an item to `HubSearchKeywords`.
    ///
    /// To override the contents of this collection use [`set_hub_search_keywords`](Self::set_hub_search_keywords).
    ///
    /// <p>The searchable keywords for the hub.</p>
    pub fn hub_search_keywords(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hub_search_keywords(input.into());
        self
    }
    /// <p>The searchable keywords for the hub.</p>
    pub fn set_hub_search_keywords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_hub_search_keywords(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateImage`.
///
/// <p>Updates the properties of a SageMaker image. To change the image's tags, use the <code>AddTags</code> and <code>DeleteTags</code> APIs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateImage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_image_input::Builder,
}
impl UpdateImage {
    /// Creates a new `UpdateImage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateImage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateImageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateImageOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateImageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `DeleteProperties`.
    ///
    /// To override the contents of this collection use [`set_delete_properties`](Self::set_delete_properties).
    ///
    /// <p>A list of properties to delete. Only the <code>Description</code> and <code>DisplayName</code> properties can be deleted.</p>
    pub fn delete_properties(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.delete_properties(input.into());
        self
    }
    /// <p>A list of properties to delete. Only the <code>Description</code> and <code>DisplayName</code> properties can be deleted.</p>
    pub fn set_delete_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_delete_properties(input);
        self
    }
    /// <p>The new description for the image.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The new description for the image.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The new display name for the image.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The new display name for the image.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The name of the image to update.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image to update.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>The new ARN for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The new ARN for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateImageVersion`.
///
/// <p>Updates the properties of a SageMaker image version.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateImageVersion {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_image_version_input::Builder,
}
impl UpdateImageVersion {
    /// Creates a new `UpdateImageVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateImageVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateImageVersionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateImageVersionOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateImageVersionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the image.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>The alias of the image version.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
    /// <p>The version of the image.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.inner = self.inner.version(input);
        self
    }
    /// <p>The version of the image.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_version(input);
        self
    }
    /// Appends an item to `AliasesToAdd`.
    ///
    /// To override the contents of this collection use [`set_aliases_to_add`](Self::set_aliases_to_add).
    ///
    /// <p>A list of aliases to add.</p>
    pub fn aliases_to_add(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aliases_to_add(input.into());
        self
    }
    /// <p>A list of aliases to add.</p>
    pub fn set_aliases_to_add(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_aliases_to_add(input);
        self
    }
    /// Appends an item to `AliasesToDelete`.
    ///
    /// To override the contents of this collection use [`set_aliases_to_delete`](Self::set_aliases_to_delete).
    ///
    /// <p>A list of aliases to delete.</p>
    pub fn aliases_to_delete(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aliases_to_delete(input.into());
        self
    }
    /// <p>A list of aliases to delete.</p>
    pub fn set_aliases_to_delete(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_aliases_to_delete(input);
        self
    }
    /// <p>The availability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn vendor_guidance(mut self, input: crate::model::VendorGuidance) -> Self {
        self.inner = self.inner.vendor_guidance(input);
        self
    }
    /// <p>The availability of the image version specified by the maintainer.</p>
    /// <ul>
    /// <li> <p> <code>NOT_PROVIDED</code>: The maintainers did not provide a status for image version stability.</p> </li>
    /// <li> <p> <code>STABLE</code>: The image version is stable.</p> </li>
    /// <li> <p> <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.</p> </li>
    /// <li> <p> <code>ARCHIVED</code>: The image version is archived. Archived image versions are not searchable and are no longer actively supported. </p> </li>
    /// </ul>
    pub fn set_vendor_guidance(
        mut self,
        input: std::option::Option<crate::model::VendorGuidance>,
    ) -> Self {
        self.inner = self.inner.set_vendor_guidance(input);
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn job_type(mut self, input: crate::model::JobType) -> Self {
        self.inner = self.inner.job_type(input);
        self
    }
    /// <p>Indicates SageMaker job type compatibility.</p>
    /// <ul>
    /// <li> <p> <code>TRAINING</code>: The image version is compatible with SageMaker training jobs.</p> </li>
    /// <li> <p> <code>INFERENCE</code>: The image version is compatible with SageMaker inference jobs.</p> </li>
    /// <li> <p> <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker notebook kernels.</p> </li>
    /// </ul>
    pub fn set_job_type(mut self, input: std::option::Option<crate::model::JobType>) -> Self {
        self.inner = self.inner.set_job_type(input);
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn ml_framework(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ml_framework(input.into());
        self
    }
    /// <p>The machine learning framework vended in the image version.</p>
    pub fn set_ml_framework(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ml_framework(input);
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn programming_lang(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.programming_lang(input.into());
        self
    }
    /// <p>The supported programming language and its version.</p>
    pub fn set_programming_lang(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_programming_lang(input);
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn processor(mut self, input: crate::model::Processor) -> Self {
        self.inner = self.inner.processor(input);
        self
    }
    /// <p>Indicates CPU or GPU compatibility.</p>
    /// <ul>
    /// <li> <p> <code>CPU</code>: The image version is compatible with CPU.</p> </li>
    /// <li> <p> <code>GPU</code>: The image version is compatible with GPU.</p> </li>
    /// </ul>
    pub fn set_processor(mut self, input: std::option::Option<crate::model::Processor>) -> Self {
        self.inner = self.inner.set_processor(input);
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn horovod(mut self, input: bool) -> Self {
        self.inner = self.inner.horovod(input);
        self
    }
    /// <p>Indicates Horovod compatibility.</p>
    pub fn set_horovod(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_horovod(input);
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn release_notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.release_notes(input.into());
        self
    }
    /// <p>The maintainer description of the image version.</p>
    pub fn set_release_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_release_notes(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateInferenceExperiment`.
///
/// <p> Updates an inference experiment that you created. The status of the inference experiment has to be either <code>Created</code>, <code>Running</code>. For more information on the status of an inference experiment, see <code>DescribeInferenceExperimentResponse$Status</code>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateInferenceExperiment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_inference_experiment_input::Builder,
}
impl UpdateInferenceExperiment {
    /// Creates a new `UpdateInferenceExperiment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateInferenceExperiment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateInferenceExperimentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateInferenceExperimentOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateInferenceExperimentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the inference experiment to be updated.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the inference experiment to be updated.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The duration for which the inference experiment will run. If the status of the inference experiment is <code>Created</code>, then you can update both the start and end dates. If the status of the inference experiment is <code>Running</code>, then you can update only the end date. </p>
    pub fn schedule(mut self, input: crate::model::InferenceExperimentSchedule) -> Self {
        self.inner = self.inner.schedule(input);
        self
    }
    /// <p> The duration for which the inference experiment will run. If the status of the inference experiment is <code>Created</code>, then you can update both the start and end dates. If the status of the inference experiment is <code>Running</code>, then you can update only the end date. </p>
    pub fn set_schedule(
        mut self,
        input: std::option::Option<crate::model::InferenceExperimentSchedule>,
    ) -> Self {
        self.inner = self.inner.set_schedule(input);
        self
    }
    /// <p>The description of the inference experiment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the inference experiment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `ModelVariants`.
    ///
    /// To override the contents of this collection use [`set_model_variants`](Self::set_model_variants).
    ///
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant, whose infrastructure configuration you want to update. </p>
    pub fn model_variants(mut self, input: crate::model::ModelVariantConfig) -> Self {
        self.inner = self.inner.model_variants(input);
        self
    }
    /// <p> An array of <code>ModelVariantConfig</code> objects. There is one for each variant, whose infrastructure configuration you want to update. </p>
    pub fn set_model_variants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ModelVariantConfig>>,
    ) -> Self {
        self.inner = self.inner.set_model_variants(input);
        self
    }
    /// <p>The Amazon S3 location and configuration for storing inference request and response data.</p>
    pub fn data_storage_config(
        mut self,
        input: crate::model::InferenceExperimentDataStorageConfig,
    ) -> Self {
        self.inner = self.inner.data_storage_config(input);
        self
    }
    /// <p>The Amazon S3 location and configuration for storing inference request and response data.</p>
    pub fn set_data_storage_config(
        mut self,
        input: std::option::Option<crate::model::InferenceExperimentDataStorageConfig>,
    ) -> Self {
        self.inner = self.inner.set_data_storage_config(input);
        self
    }
    /// <p> The configuration of <code>ShadowMode</code> inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates. </p>
    pub fn shadow_mode_config(mut self, input: crate::model::ShadowModeConfig) -> Self {
        self.inner = self.inner.shadow_mode_config(input);
        self
    }
    /// <p> The configuration of <code>ShadowMode</code> inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates. </p>
    pub fn set_shadow_mode_config(
        mut self,
        input: std::option::Option<crate::model::ShadowModeConfig>,
    ) -> Self {
        self.inner = self.inner.set_shadow_mode_config(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateModelCard`.
///
/// <p>Update an Amazon SageMaker Model Card.</p> <important>
/// <p>You cannot update both model card content and model card status in a single call.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateModelCard {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_model_card_input::Builder,
}
impl UpdateModelCard {
    /// Creates a new `UpdateModelCard`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateModelCard,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateModelCardError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateModelCardOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateModelCardError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the model card to update.</p>
    pub fn model_card_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_card_name(input.into());
        self
    }
    /// <p>The name of the model card to update.</p>
    pub fn set_model_card_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_card_name(input);
        self
    }
    /// <p>The updated model card content. Content must be in <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards-api-json-schema.html">model card JSON schema</a> and provided as a string.</p>
    /// <p>When updating model card content, be sure to include the full content and not just updated content.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.content(input.into());
        self
    }
    /// <p>The updated model card content. Content must be in <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards-api-json-schema.html">model card JSON schema</a> and provided as a string.</p>
    /// <p>When updating model card content, be sure to include the full content and not just updated content.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_content(input);
        self
    }
    /// <p>The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.</p>
    /// <ul>
    /// <li> <p> <code>Draft</code>: The model card is a work in progress.</p> </li>
    /// <li> <p> <code>PendingReview</code>: The model card is pending review.</p> </li>
    /// <li> <p> <code>Approved</code>: The model card is approved.</p> </li>
    /// <li> <p> <code>Archived</code>: The model card is archived. No more updates should be made to the model card, but it can still be exported.</p> </li>
    /// </ul>
    pub fn model_card_status(mut self, input: crate::model::ModelCardStatus) -> Self {
        self.inner = self.inner.model_card_status(input);
        self
    }
    /// <p>The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.</p>
    /// <ul>
    /// <li> <p> <code>Draft</code>: The model card is a work in progress.</p> </li>
    /// <li> <p> <code>PendingReview</code>: The model card is pending review.</p> </li>
    /// <li> <p> <code>Approved</code>: The model card is approved.</p> </li>
    /// <li> <p> <code>Archived</code>: The model card is archived. No more updates should be made to the model card, but it can still be exported.</p> </li>
    /// </ul>
    pub fn set_model_card_status(
        mut self,
        input: std::option::Option<crate::model::ModelCardStatus>,
    ) -> Self {
        self.inner = self.inner.set_model_card_status(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateModelPackage`.
///
/// <p>Updates a versioned model.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateModelPackage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_model_package_input::Builder,
}
impl UpdateModelPackage {
    /// Creates a new `UpdateModelPackage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateModelPackage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateModelPackageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateModelPackageOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateModelPackageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub fn model_package_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_package_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub fn set_model_package_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_package_arn(input);
        self
    }
    /// <p>The approval status of the model.</p>
    pub fn model_approval_status(mut self, input: crate::model::ModelApprovalStatus) -> Self {
        self.inner = self.inner.model_approval_status(input);
        self
    }
    /// <p>The approval status of the model.</p>
    pub fn set_model_approval_status(
        mut self,
        input: std::option::Option<crate::model::ModelApprovalStatus>,
    ) -> Self {
        self.inner = self.inner.set_model_approval_status(input);
        self
    }
    /// <p>A description for the approval status of the model.</p>
    pub fn approval_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.approval_description(input.into());
        self
    }
    /// <p>A description for the approval status of the model.</p>
    pub fn set_approval_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_approval_description(input);
        self
    }
    /// Adds a key-value pair to `CustomerMetadataProperties`.
    ///
    /// To override the contents of this collection use [`set_customer_metadata_properties`](Self::set_customer_metadata_properties).
    ///
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn customer_metadata_properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.customer_metadata_properties(k.into(), v.into());
        self
    }
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn set_customer_metadata_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_customer_metadata_properties(input);
        self
    }
    /// Appends an item to `CustomerMetadataPropertiesToRemove`.
    ///
    /// To override the contents of this collection use [`set_customer_metadata_properties_to_remove`](Self::set_customer_metadata_properties_to_remove).
    ///
    /// <p>The metadata properties associated with the model package versions to remove.</p>
    pub fn customer_metadata_properties_to_remove(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .customer_metadata_properties_to_remove(input.into());
        self
    }
    /// <p>The metadata properties associated with the model package versions to remove.</p>
    pub fn set_customer_metadata_properties_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_customer_metadata_properties_to_remove(input);
        self
    }
    /// Appends an item to `AdditionalInferenceSpecificationsToAdd`.
    ///
    /// To override the contents of this collection use [`set_additional_inference_specifications_to_add`](Self::set_additional_inference_specifications_to_add).
    ///
    /// <p>An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.</p>
    pub fn additional_inference_specifications_to_add(
        mut self,
        input: crate::model::AdditionalInferenceSpecificationDefinition,
    ) -> Self {
        self.inner = self.inner.additional_inference_specifications_to_add(input);
        self
    }
    /// <p>An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.</p>
    pub fn set_additional_inference_specifications_to_add(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::model::AdditionalInferenceSpecificationDefinition>,
        >,
    ) -> Self {
        self.inner = self
            .inner
            .set_additional_inference_specifications_to_add(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateMonitoringAlert`.
///
/// <p>Update the parameters of a model monitor alert.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMonitoringAlert {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_monitoring_alert_input::Builder,
}
impl UpdateMonitoringAlert {
    /// Creates a new `UpdateMonitoringAlert`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateMonitoringAlert,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateMonitoringAlertError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateMonitoringAlertOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateMonitoringAlertError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn monitoring_alert_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_alert_name(input.into());
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn set_monitoring_alert_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_alert_name(input);
        self
    }
    /// <p>Within <code>EvaluationPeriod</code>, how many execution failures will raise an alert.</p>
    pub fn datapoints_to_alert(mut self, input: i32) -> Self {
        self.inner = self.inner.datapoints_to_alert(input);
        self
    }
    /// <p>Within <code>EvaluationPeriod</code>, how many execution failures will raise an alert.</p>
    pub fn set_datapoints_to_alert(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_datapoints_to_alert(input);
        self
    }
    /// <p>The number of most recent monitoring executions to consider when evaluating alert status.</p>
    pub fn evaluation_period(mut self, input: i32) -> Self {
        self.inner = self.inner.evaluation_period(input);
        self
    }
    /// <p>The number of most recent monitoring executions to consider when evaluating alert status.</p>
    pub fn set_evaluation_period(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_evaluation_period(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateMonitoringSchedule`.
///
/// <p>Updates a previously created schedule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMonitoringSchedule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_monitoring_schedule_input::Builder,
}
impl UpdateMonitoringSchedule {
    /// Creates a new `UpdateMonitoringSchedule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateMonitoringSchedule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateMonitoringScheduleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateMonitoringScheduleOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateMonitoringScheduleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_schedule_name(input.into());
        self
    }
    /// <p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_name(input);
        self
    }
    /// <p>The configuration object that specifies the monitoring schedule and defines the monitoring job.</p>
    pub fn monitoring_schedule_config(
        mut self,
        input: crate::model::MonitoringScheduleConfig,
    ) -> Self {
        self.inner = self.inner.monitoring_schedule_config(input);
        self
    }
    /// <p>The configuration object that specifies the monitoring schedule and defines the monitoring job.</p>
    pub fn set_monitoring_schedule_config(
        mut self,
        input: std::option::Option<crate::model::MonitoringScheduleConfig>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_schedule_config(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateNotebookInstance`.
///
/// <p>Updates a notebook instance. NotebookInstance updates include upgrading or downgrading the ML compute instance used for your notebook instance to accommodate changes in your workload requirements.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateNotebookInstance {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_notebook_instance_input::Builder,
}
impl UpdateNotebookInstance {
    /// Creates a new `UpdateNotebookInstance`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateNotebookInstance,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateNotebookInstanceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateNotebookInstanceOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateNotebookInstanceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the notebook instance to update.</p>
    pub fn notebook_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_name(input.into());
        self
    }
    /// <p>The name of the notebook instance to update.</p>
    pub fn set_notebook_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_notebook_instance_name(input);
        self
    }
    /// <p>The Amazon ML compute instance type.</p>
    pub fn instance_type(mut self, input: crate::model::InstanceType) -> Self {
        self.inner = self.inner.instance_type(input);
        self
    }
    /// <p>The Amazon ML compute instance type.</p>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::model::InstanceType>,
    ) -> Self {
        self.inner = self.inner.set_instance_type(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p> <note>
    /// <p>To be able to pass this role to SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    /// </note>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p> <note>
    /// <p>To be able to pass this role to SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    /// </note>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    pub fn lifecycle_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    pub fn set_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_lifecycle_config_name(input);
        self
    }
    /// <p>Set to <code>true</code> to remove the notebook instance lifecycle configuration currently associated with the notebook instance. This operation is idempotent. If you specify a lifecycle configuration that is not associated with the notebook instance when you call this method, it does not throw an error.</p>
    pub fn disassociate_lifecycle_config(mut self, input: bool) -> Self {
        self.inner = self.inner.disassociate_lifecycle_config(input);
        self
    }
    /// <p>Set to <code>true</code> to remove the notebook instance lifecycle configuration currently associated with the notebook instance. This operation is idempotent. If you specify a lifecycle configuration that is not associated with the notebook instance when you call this method, it does not throw an error.</p>
    pub fn set_disassociate_lifecycle_config(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disassociate_lifecycle_config(input);
        self
    }
    /// <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB. ML storage volumes are encrypted, so SageMaker can't determine the amount of available free space on the volume. Because of this, you can increase the volume size when you update a notebook instance, but you can't decrease the volume size. If you want to decrease the size of the ML storage volume in use, create a new notebook instance with the desired size.</p>
    pub fn volume_size_in_gb(mut self, input: i32) -> Self {
        self.inner = self.inner.volume_size_in_gb(input);
        self
    }
    /// <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB. ML storage volumes are encrypted, so SageMaker can't determine the amount of available free space on the volume. Because of this, you can increase the volume size when you update a notebook instance, but you can't decrease the volume size. If you want to decrease the size of the ML storage volume in use, create a new notebook instance with the desired size.</p>
    pub fn set_volume_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_volume_size_in_gb(input);
        self
    }
    /// <p>The Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn default_code_repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.default_code_repository(input.into());
        self
    }
    /// <p>The Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn set_default_code_repository(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_default_code_repository(input);
        self
    }
    /// Appends an item to `AdditionalCodeRepositories`.
    ///
    /// To override the contents of this collection use [`set_additional_code_repositories`](Self::set_additional_code_repositories).
    ///
    /// <p>An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn additional_code_repositories(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.additional_code_repositories(input.into());
        self
    }
    /// <p>An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn set_additional_code_repositories(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_additional_code_repositories(input);
        self
    }
    /// Appends an item to `AcceleratorTypes`.
    ///
    /// To override the contents of this collection use [`set_accelerator_types`](Self::set_accelerator_types).
    ///
    /// <p>A list of the Elastic Inference (EI) instance types to associate with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon SageMaker</a>.</p>
    pub fn accelerator_types(
        mut self,
        input: crate::model::NotebookInstanceAcceleratorType,
    ) -> Self {
        self.inner = self.inner.accelerator_types(input);
        self
    }
    /// <p>A list of the Elastic Inference (EI) instance types to associate with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon SageMaker</a>.</p>
    pub fn set_accelerator_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::NotebookInstanceAcceleratorType>>,
    ) -> Self {
        self.inner = self.inner.set_accelerator_types(input);
        self
    }
    /// <p>A list of the Elastic Inference (EI) instance types to remove from this notebook instance. This operation is idempotent. If you specify an accelerator type that is not associated with the notebook instance when you call this method, it does not throw an error.</p>
    pub fn disassociate_accelerator_types(mut self, input: bool) -> Self {
        self.inner = self.inner.disassociate_accelerator_types(input);
        self
    }
    /// <p>A list of the Elastic Inference (EI) instance types to remove from this notebook instance. This operation is idempotent. If you specify an accelerator type that is not associated with the notebook instance when you call this method, it does not throw an error.</p>
    pub fn set_disassociate_accelerator_types(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disassociate_accelerator_types(input);
        self
    }
    /// <p>The name or URL of the default Git repository to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.</p>
    pub fn disassociate_default_code_repository(mut self, input: bool) -> Self {
        self.inner = self.inner.disassociate_default_code_repository(input);
        self
    }
    /// <p>The name or URL of the default Git repository to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.</p>
    pub fn set_disassociate_default_code_repository(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_disassociate_default_code_repository(input);
        self
    }
    /// <p>A list of names or URLs of the default Git repositories to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.</p>
    pub fn disassociate_additional_code_repositories(mut self, input: bool) -> Self {
        self.inner = self.inner.disassociate_additional_code_repositories(input);
        self
    }
    /// <p>A list of names or URLs of the default Git repositories to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.</p>
    pub fn set_disassociate_additional_code_repositories(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self
            .inner
            .set_disassociate_additional_code_repositories(input);
        self
    }
    /// <p>Whether root access is enabled or disabled for users of the notebook instance. The default value is <code>Enabled</code>.</p> <note>
    /// <p>If you set this to <code>Disabled</code>, users don't have root access on the notebook instance, but lifecycle configuration scripts still run with root permissions.</p>
    /// </note>
    pub fn root_access(mut self, input: crate::model::RootAccess) -> Self {
        self.inner = self.inner.root_access(input);
        self
    }
    /// <p>Whether root access is enabled or disabled for users of the notebook instance. The default value is <code>Enabled</code>.</p> <note>
    /// <p>If you set this to <code>Disabled</code>, users don't have root access on the notebook instance, but lifecycle configuration scripts still run with root permissions.</p>
    /// </note>
    pub fn set_root_access(mut self, input: std::option::Option<crate::model::RootAccess>) -> Self {
        self.inner = self.inner.set_root_access(input);
        self
    }
    /// <p>Information on the IMDS configuration of the notebook instance</p>
    pub fn instance_metadata_service_configuration(
        mut self,
        input: crate::model::InstanceMetadataServiceConfiguration,
    ) -> Self {
        self.inner = self.inner.instance_metadata_service_configuration(input);
        self
    }
    /// <p>Information on the IMDS configuration of the notebook instance</p>
    pub fn set_instance_metadata_service_configuration(
        mut self,
        input: std::option::Option<crate::model::InstanceMetadataServiceConfiguration>,
    ) -> Self {
        self.inner = self
            .inner
            .set_instance_metadata_service_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateNotebookInstanceLifecycleConfig`.
///
/// <p>Updates a notebook instance lifecycle configuration created with the <code>CreateNotebookInstanceLifecycleConfig</code> API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateNotebookInstanceLifecycleConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_notebook_instance_lifecycle_config_input::Builder,
}
impl UpdateNotebookInstanceLifecycleConfig {
    /// Creates a new `UpdateNotebookInstanceLifecycleConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateNotebookInstanceLifecycleConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateNotebookInstanceLifecycleConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateNotebookInstanceLifecycleConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateNotebookInstanceLifecycleConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the lifecycle configuration.</p>
    pub fn notebook_instance_lifecycle_config_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .notebook_instance_lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of the lifecycle configuration.</p>
    pub fn set_notebook_instance_lifecycle_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .set_notebook_instance_lifecycle_config_name(input);
        self
    }
    /// Appends an item to `OnCreate`.
    ///
    /// To override the contents of this collection use [`set_on_create`](Self::set_on_create).
    ///
    /// <p>The shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn on_create(mut self, input: crate::model::NotebookInstanceLifecycleHook) -> Self {
        self.inner = self.inner.on_create(input);
        self
    }
    /// <p>The shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn set_on_create(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::NotebookInstanceLifecycleHook>>,
    ) -> Self {
        self.inner = self.inner.set_on_create(input);
        self
    }
    /// Appends an item to `OnStart`.
    ///
    /// To override the contents of this collection use [`set_on_start`](Self::set_on_start).
    ///
    /// <p>The shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn on_start(mut self, input: crate::model::NotebookInstanceLifecycleHook) -> Self {
        self.inner = self.inner.on_start(input);
        self
    }
    /// <p>The shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.</p>
    pub fn set_on_start(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::NotebookInstanceLifecycleHook>>,
    ) -> Self {
        self.inner = self.inner.set_on_start(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdatePipeline`.
///
/// <p>Updates a pipeline.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePipeline {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_pipeline_input::Builder,
}
impl UpdatePipeline {
    /// Creates a new `UpdatePipeline`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdatePipeline,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdatePipelineError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdatePipelineOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdatePipelineError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the pipeline to update.</p>
    pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p>The name of the pipeline to update.</p>
    pub fn set_pipeline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
    /// <p>The display name of the pipeline.</p>
    pub fn pipeline_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_display_name(input.into());
        self
    }
    /// <p>The display name of the pipeline.</p>
    pub fn set_pipeline_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_display_name(input);
        self
    }
    /// <p>The JSON pipeline definition.</p>
    pub fn pipeline_definition(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_definition(input.into());
        self
    }
    /// <p>The JSON pipeline definition.</p>
    pub fn set_pipeline_definition(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_definition(input);
        self
    }
    /// <p>The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.</p>
    pub fn pipeline_definition_s3_location(
        mut self,
        input: crate::model::PipelineDefinitionS3Location,
    ) -> Self {
        self.inner = self.inner.pipeline_definition_s3_location(input);
        self
    }
    /// <p>The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.</p>
    pub fn set_pipeline_definition_s3_location(
        mut self,
        input: std::option::Option<crate::model::PipelineDefinitionS3Location>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_definition_s3_location(input);
        self
    }
    /// <p>The description of the pipeline.</p>
    pub fn pipeline_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_description(input.into());
        self
    }
    /// <p>The description of the pipeline.</p>
    pub fn set_pipeline_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_description(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that the pipeline uses to execute.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that the pipeline uses to execute.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>If specified, it applies to all executions of this pipeline by default.</p>
    pub fn parallelism_configuration(
        mut self,
        input: crate::model::ParallelismConfiguration,
    ) -> Self {
        self.inner = self.inner.parallelism_configuration(input);
        self
    }
    /// <p>If specified, it applies to all executions of this pipeline by default.</p>
    pub fn set_parallelism_configuration(
        mut self,
        input: std::option::Option<crate::model::ParallelismConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_parallelism_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdatePipelineExecution`.
///
/// <p>Updates a pipeline execution.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePipelineExecution {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_pipeline_execution_input::Builder,
}
impl UpdatePipelineExecution {
    /// Creates a new `UpdatePipelineExecution`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdatePipelineExecution,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdatePipelineExecutionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdatePipelineExecutionOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdatePipelineExecutionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn pipeline_execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    pub fn set_pipeline_execution_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_arn(input);
        self
    }
    /// <p>The description of the pipeline execution.</p>
    pub fn pipeline_execution_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_description(input.into());
        self
    }
    /// <p>The description of the pipeline execution.</p>
    pub fn set_pipeline_execution_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_description(input);
        self
    }
    /// <p>The display name of the pipeline execution.</p>
    pub fn pipeline_execution_display_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.pipeline_execution_display_name(input.into());
        self
    }
    /// <p>The display name of the pipeline execution.</p>
    pub fn set_pipeline_execution_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_execution_display_name(input);
        self
    }
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.</p>
    pub fn parallelism_configuration(
        mut self,
        input: crate::model::ParallelismConfiguration,
    ) -> Self {
        self.inner = self.inner.parallelism_configuration(input);
        self
    }
    /// <p>This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.</p>
    pub fn set_parallelism_configuration(
        mut self,
        input: std::option::Option<crate::model::ParallelismConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_parallelism_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateProject`.
///
/// <p>Updates a machine learning (ML) project that is created from a template that sets up an ML pipeline from training to deploying an approved model.</p> <note>
/// <p>You must not update a project that is in use. If you update the <code>ServiceCatalogProvisioningUpdateDetails</code> of a project that is active or being created, or updated, you may lose resources already created by the project.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProject {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_project_input::Builder,
}
impl UpdateProject {
    /// Creates a new `UpdateProject`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateProject,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateProjectError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateProjectOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateProjectError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the project.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.project_name(input.into());
        self
    }
    /// <p>The name of the project.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_project_name(input);
        self
    }
    /// <p>The description for the project.</p>
    pub fn project_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.project_description(input.into());
        self
    }
    /// <p>The description for the project.</p>
    pub fn set_project_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_project_description(input);
        self
    }
    /// <p>The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. </p>
    pub fn service_catalog_provisioning_update_details(
        mut self,
        input: crate::model::ServiceCatalogProvisioningUpdateDetails,
    ) -> Self {
        self.inner = self
            .inner
            .service_catalog_provisioning_update_details(input);
        self
    }
    /// <p>The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. </p>
    pub fn set_service_catalog_provisioning_update_details(
        mut self,
        input: std::option::Option<crate::model::ServiceCatalogProvisioningUpdateDetails>,
    ) -> Self {
        self.inner = self
            .inner
            .set_service_catalog_provisioning_update_details(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>. In addition, the project must have tag update constraints set in order to include this parameter in the request. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/constraints-resourceupdate.html">Amazon Web Services Service Catalog Tag Update Constraints</a>.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>. In addition, the project must have tag update constraints set in order to include this parameter in the request. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/constraints-resourceupdate.html">Amazon Web Services Service Catalog Tag Update Constraints</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateSpace`.
///
/// <p>Updates the settings of a space.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSpace {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_space_input::Builder,
}
impl UpdateSpace {
    /// Creates a new `UpdateSpace`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateSpace,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateSpaceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateSpaceOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateSpaceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The ID of the associated Domain.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.space_name(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_space_name(input);
        self
    }
    /// <p>A collection of space settings.</p>
    pub fn space_settings(mut self, input: crate::model::SpaceSettings) -> Self {
        self.inner = self.inner.space_settings(input);
        self
    }
    /// <p>A collection of space settings.</p>
    pub fn set_space_settings(
        mut self,
        input: std::option::Option<crate::model::SpaceSettings>,
    ) -> Self {
        self.inner = self.inner.set_space_settings(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateTrainingJob`.
///
/// <p>Update a model training job to request a new Debugger profiling configuration or to change warm pool retention length.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTrainingJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_training_job_input::Builder,
}
impl UpdateTrainingJob {
    /// Creates a new `UpdateTrainingJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateTrainingJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateTrainingJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateTrainingJobOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateTrainingJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of a training job to update the Debugger profiling configuration.</p>
    pub fn training_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.training_job_name(input.into());
        self
    }
    /// <p>The name of a training job to update the Debugger profiling configuration.</p>
    pub fn set_training_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_training_job_name(input);
        self
    }
    /// <p>Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.</p>
    pub fn profiler_config(mut self, input: crate::model::ProfilerConfigForUpdate) -> Self {
        self.inner = self.inner.profiler_config(input);
        self
    }
    /// <p>Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.</p>
    pub fn set_profiler_config(
        mut self,
        input: std::option::Option<crate::model::ProfilerConfigForUpdate>,
    ) -> Self {
        self.inner = self.inner.set_profiler_config(input);
        self
    }
    /// Appends an item to `ProfilerRuleConfigurations`.
    ///
    /// To override the contents of this collection use [`set_profiler_rule_configurations`](Self::set_profiler_rule_configurations).
    ///
    /// <p>Configuration information for Amazon SageMaker Debugger rules for profiling system and framework metrics.</p>
    pub fn profiler_rule_configurations(
        mut self,
        input: crate::model::ProfilerRuleConfiguration,
    ) -> Self {
        self.inner = self.inner.profiler_rule_configurations(input);
        self
    }
    /// <p>Configuration information for Amazon SageMaker Debugger rules for profiling system and framework metrics.</p>
    pub fn set_profiler_rule_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ProfilerRuleConfiguration>>,
    ) -> Self {
        self.inner = self.inner.set_profiler_rule_configurations(input);
        self
    }
    /// <p>The training job <code>ResourceConfig</code> to update warm pool retention length.</p>
    pub fn resource_config(mut self, input: crate::model::ResourceConfigForUpdate) -> Self {
        self.inner = self.inner.resource_config(input);
        self
    }
    /// <p>The training job <code>ResourceConfig</code> to update warm pool retention length.</p>
    pub fn set_resource_config(
        mut self,
        input: std::option::Option<crate::model::ResourceConfigForUpdate>,
    ) -> Self {
        self.inner = self.inner.set_resource_config(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateTrial`.
///
/// <p>Updates the display name of a trial.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTrial {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_trial_input::Builder,
}
impl UpdateTrial {
    /// Creates a new `UpdateTrial`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateTrial,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateTrialError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateTrialOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateTrialError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the trial to update.</p>
    pub fn trial_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_name(input.into());
        self
    }
    /// <p>The name of the trial to update.</p>
    pub fn set_trial_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trial_name(input);
        self
    }
    /// <p>The name of the trial as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The name of the trial as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateTrialComponent`.
///
/// <p>Updates one or more properties of a trial component.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTrialComponent {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_trial_component_input::Builder,
}
impl UpdateTrialComponent {
    /// Creates a new `UpdateTrialComponent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateTrialComponent,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateTrialComponentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateTrialComponentOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateTrialComponentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the component to update.</p>
    pub fn trial_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trial_component_name(input.into());
        self
    }
    /// <p>The name of the component to update.</p>
    pub fn set_trial_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_trial_component_name(input);
        self
    }
    /// <p>The name of the component as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is displayed.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The name of the component as displayed. The name doesn't need to be unique. If <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is displayed.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The new status of the component.</p>
    pub fn status(mut self, input: crate::model::TrialComponentStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The new status of the component.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::model::TrialComponentStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>When the component started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>When the component started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>When the component ended.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>When the component ended.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// Adds a key-value pair to `Parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Replaces all of the component's hyperparameters with the specified hyperparameters.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::model::TrialComponentParameterValue,
    ) -> Self {
        self.inner = self.inner.parameters(k.into(), v);
        self
    }
    /// <p>Replaces all of the component's hyperparameters with the specified hyperparameters.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::model::TrialComponentParameterValue,
            >,
        >,
    ) -> Self {
        self.inner = self.inner.set_parameters(input);
        self
    }
    /// Appends an item to `ParametersToRemove`.
    ///
    /// To override the contents of this collection use [`set_parameters_to_remove`](Self::set_parameters_to_remove).
    ///
    /// <p>The hyperparameters to remove from the component.</p>
    pub fn parameters_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.parameters_to_remove(input.into());
        self
    }
    /// <p>The hyperparameters to remove from the component.</p>
    pub fn set_parameters_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_parameters_to_remove(input);
        self
    }
    /// Adds a key-value pair to `InputArtifacts`.
    ///
    /// To override the contents of this collection use [`set_input_artifacts`](Self::set_input_artifacts).
    ///
    /// <p>Replaces all of the component's input artifacts with the specified artifacts.</p>
    pub fn input_artifacts(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::model::TrialComponentArtifact,
    ) -> Self {
        self.inner = self.inner.input_artifacts(k.into(), v);
        self
    }
    /// <p>Replaces all of the component's input artifacts with the specified artifacts.</p>
    pub fn set_input_artifacts(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::TrialComponentArtifact>,
        >,
    ) -> Self {
        self.inner = self.inner.set_input_artifacts(input);
        self
    }
    /// Appends an item to `InputArtifactsToRemove`.
    ///
    /// To override the contents of this collection use [`set_input_artifacts_to_remove`](Self::set_input_artifacts_to_remove).
    ///
    /// <p>The input artifacts to remove from the component.</p>
    pub fn input_artifacts_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.input_artifacts_to_remove(input.into());
        self
    }
    /// <p>The input artifacts to remove from the component.</p>
    pub fn set_input_artifacts_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_input_artifacts_to_remove(input);
        self
    }
    /// Adds a key-value pair to `OutputArtifacts`.
    ///
    /// To override the contents of this collection use [`set_output_artifacts`](Self::set_output_artifacts).
    ///
    /// <p>Replaces all of the component's output artifacts with the specified artifacts.</p>
    pub fn output_artifacts(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::model::TrialComponentArtifact,
    ) -> Self {
        self.inner = self.inner.output_artifacts(k.into(), v);
        self
    }
    /// <p>Replaces all of the component's output artifacts with the specified artifacts.</p>
    pub fn set_output_artifacts(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::TrialComponentArtifact>,
        >,
    ) -> Self {
        self.inner = self.inner.set_output_artifacts(input);
        self
    }
    /// Appends an item to `OutputArtifactsToRemove`.
    ///
    /// To override the contents of this collection use [`set_output_artifacts_to_remove`](Self::set_output_artifacts_to_remove).
    ///
    /// <p>The output artifacts to remove from the component.</p>
    pub fn output_artifacts_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.output_artifacts_to_remove(input.into());
        self
    }
    /// <p>The output artifacts to remove from the component.</p>
    pub fn set_output_artifacts_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_output_artifacts_to_remove(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateUserProfile`.
///
/// <p>Updates a user profile.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateUserProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_user_profile_input::Builder,
}
impl UpdateUserProfile {
    /// Creates a new `UpdateUserProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateUserProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateUserProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateUserProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateUserProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_profile_name(input.into());
        self
    }
    /// <p>The user profile name.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_user_profile_name(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn user_settings(mut self, input: crate::model::UserSettings) -> Self {
        self.inner = self.inner.user_settings(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn set_user_settings(
        mut self,
        input: std::option::Option<crate::model::UserSettings>,
    ) -> Self {
        self.inner = self.inner.set_user_settings(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateWorkforce`.
///
/// <p>Use this operation to update your workforce. You can use this operation to require that workers use specific IP addresses to work on tasks and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.</p>
/// <p>The worker portal is now supported in VPC and public internet.</p>
/// <p> Use <code>SourceIpConfig</code> to restrict worker access to tasks to a specific range of IP addresses. You specify allowed IP addresses by creating a list of up to ten <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>. By default, a workforce isn't restricted to specific IP addresses. If you specify a range of IP addresses, workers who attempt to access tasks using any IP address outside the specified range are denied and get a <code>Not Found</code> error message on the worker portal.</p>
/// <p>To restrict access to all the workers in public internet, add the <code>SourceIpConfig</code> CIDR value as "0.0.0.0/0".</p> <important>
/// <p>Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.</p>
/// </important>
/// <p>Use <code>OidcConfig</code> to update the configuration of a workforce created using your own OIDC IdP. </p> <important>
/// <p>You can only update your OIDC IdP configuration when there are no work teams associated with your workforce. You can delete work teams using the operation.</p>
/// </important>
/// <p>After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you can view details about your update workforce using the operation.</p> <important>
/// <p>This operation only applies to private workforces.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkforce {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_workforce_input::Builder,
}
impl UpdateWorkforce {
    /// Creates a new `UpdateWorkforce`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateWorkforce,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkforceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateWorkforceOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkforceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the private workforce that you want to update. You can find your workforce name by using the operation.</p>
    pub fn workforce_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workforce_name(input.into());
        self
    }
    /// <p>The name of the private workforce that you want to update. You can find your workforce name by using the operation.</p>
    pub fn set_workforce_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workforce_name(input);
        self
    }
    /// <p>A list of one to ten worker IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>) that can be used to access tasks assigned to this workforce.</p>
    /// <p>Maximum: Ten CIDR values</p>
    pub fn source_ip_config(mut self, input: crate::model::SourceIpConfig) -> Self {
        self.inner = self.inner.source_ip_config(input);
        self
    }
    /// <p>A list of one to ten worker IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>) that can be used to access tasks assigned to this workforce.</p>
    /// <p>Maximum: Ten CIDR values</p>
    pub fn set_source_ip_config(
        mut self,
        input: std::option::Option<crate::model::SourceIpConfig>,
    ) -> Self {
        self.inner = self.inner.set_source_ip_config(input);
        self
    }
    /// <p>Use this parameter to update your OIDC Identity Provider (IdP) configuration for a workforce made using your own IdP.</p>
    pub fn oidc_config(mut self, input: crate::model::OidcConfig) -> Self {
        self.inner = self.inner.oidc_config(input);
        self
    }
    /// <p>Use this parameter to update your OIDC Identity Provider (IdP) configuration for a workforce made using your own IdP.</p>
    pub fn set_oidc_config(mut self, input: std::option::Option<crate::model::OidcConfig>) -> Self {
        self.inner = self.inner.set_oidc_config(input);
        self
    }
    /// <p>Use this parameter to update your VPC configuration for a workforce.</p>
    pub fn workforce_vpc_config(mut self, input: crate::model::WorkforceVpcConfigRequest) -> Self {
        self.inner = self.inner.workforce_vpc_config(input);
        self
    }
    /// <p>Use this parameter to update your VPC configuration for a workforce.</p>
    pub fn set_workforce_vpc_config(
        mut self,
        input: std::option::Option<crate::model::WorkforceVpcConfigRequest>,
    ) -> Self {
        self.inner = self.inner.set_workforce_vpc_config(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateWorkteam`.
///
/// <p>Updates an existing work team with new member definitions or description.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkteam {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_workteam_input::Builder,
}
impl UpdateWorkteam {
    /// Creates a new `UpdateWorkteam`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateWorkteam,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkteamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateWorkteamOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkteamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the work team to update.</p>
    pub fn workteam_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workteam_name(input.into());
        self
    }
    /// <p>The name of the work team to update.</p>
    pub fn set_workteam_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workteam_name(input);
        self
    }
    /// Appends an item to `MemberDefinitions`.
    ///
    /// To override the contents of this collection use [`set_member_definitions`](Self::set_member_definitions).
    ///
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>. Be aware that user groups that are already in the work team must also be listed in <code>Groups</code> when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update. </p>
    pub fn member_definitions(mut self, input: crate::model::MemberDefinition) -> Self {
        self.inner = self.inner.member_definitions(input);
        self
    }
    /// <p>A list of <code>MemberDefinition</code> objects that contains objects that identify the workers that make up the work team. </p>
    /// <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input for both of these parameters in a single request.</p>
    /// <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito <i>user groups</i> within the user pool used to create a workforce. All of the <code>CognitoMemberDefinition</code> objects that make up the member definition must have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon Cognito user group to an existing worker pool, see <code>Adding groups to a User Pool</code>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User Pools</a>.</p>
    /// <p>For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in <code>OidcMemberDefinition</code> by listing those groups in <code>Groups</code>. Be aware that user groups that are already in the work team must also be listed in <code>Groups</code> when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update. </p>
    pub fn set_member_definitions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::MemberDefinition>>,
    ) -> Self {
        self.inner = self.inner.set_member_definitions(input);
        self
    }
    /// <p>An updated description for the work team.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An updated description for the work team.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Configures SNS topic notifications for available or expiring work items</p>
    pub fn notification_configuration(
        mut self,
        input: crate::model::NotificationConfiguration,
    ) -> Self {
        self.inner = self.inner.notification_configuration(input);
        self
    }
    /// <p>Configures SNS topic notifications for available or expiring work items</p>
    pub fn set_notification_configuration(
        mut self,
        input: std::option::Option<crate::model::NotificationConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_notification_configuration(input);
        self
    }
}
