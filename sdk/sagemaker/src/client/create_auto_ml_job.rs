// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateAutoMLJob`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`auto_ml_job_name(impl Into<String>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::auto_ml_job_name) / [`set_auto_ml_job_name(Option<String>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_auto_ml_job_name): <p>Identifies an Autopilot job. The name must be unique to your account and is case-insensitive.</p>
    ///   - [`input_data_config(Vec<AutoMlChannel>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::input_data_config) / [`set_input_data_config(Option<Vec<AutoMlChannel>>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_input_data_config): <p>An array of channel objects that describes the input data and its location. Each channel is a named input source. Similar to <code>InputDataConfig</code> supported by . Format(s) supported: CSV, Parquet. A minimum of 500 rows is required for the training dataset. There is not a minimum number of rows required for the validation dataset.</p>
    ///   - [`output_data_config(AutoMlOutputDataConfig)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::output_data_config) / [`set_output_data_config(Option<AutoMlOutputDataConfig>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_output_data_config): <p>Provides information about encryption and the Amazon S3 output path needed to store artifacts from an AutoML job. Format(s) supported: CSV.</p>
    ///   - [`problem_type(ProblemType)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::problem_type) / [`set_problem_type(Option<ProblemType>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_problem_type): <p>Defines the type of supervised learning available for the candidates. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-problem-types.html"> Amazon SageMaker Autopilot problem types and algorithm support</a>.</p>
    ///   - [`auto_ml_job_objective(AutoMlJobObjective)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::auto_ml_job_objective) / [`set_auto_ml_job_objective(Option<AutoMlJobObjective>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_auto_ml_job_objective): <p>Defines the objective metric used to measure the predictive quality of an AutoML job. You provide an <code>AutoMLJobObjective$MetricName</code> and Autopilot infers whether to minimize or maximize it.</p>
    ///   - [`auto_ml_job_config(AutoMlJobConfig)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::auto_ml_job_config) / [`set_auto_ml_job_config(Option<AutoMlJobConfig>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_auto_ml_job_config): <p>A collection of settings used to configure an AutoML job.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_role_arn): <p>The ARN of the role that is used to access the data.</p>
    ///   - [`generate_candidate_definitions_only(bool)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::generate_candidate_definitions_only) / [`set_generate_candidate_definitions_only(bool)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_generate_candidate_definitions_only): <p>Generates possible candidates without training the models. A candidate is a combination of data preprocessors, algorithms, and algorithm parameter settings.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_tags): <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    ///   - [`model_deploy_config(ModelDeployConfig)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::model_deploy_config) / [`set_model_deploy_config(Option<ModelDeployConfig>)`](crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::set_model_deploy_config): <p>Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.</p>
    /// - On success, responds with [`CreateAutoMlJobOutput`](crate::operation::create_auto_ml_job::CreateAutoMlJobOutput) with field(s):
    ///   - [`auto_ml_job_arn(Option<String>)`](crate::operation::create_auto_ml_job::CreateAutoMlJobOutput::auto_ml_job_arn): <p>The unique ARN assigned to the AutoML job when it is created.</p>
    /// - On failure, responds with [`SdkError<CreateAutoMLJobError>`](crate::operation::create_auto_ml_job::CreateAutoMLJobError)
    pub fn create_auto_ml_job(
        &self,
    ) -> crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder {
        crate::operation::create_auto_ml_job::builders::CreateAutoMLJobFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
