// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateProcessingJob`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`processing_inputs(Vec<ProcessingInput>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::processing_inputs) / [`set_processing_inputs(Option<Vec<ProcessingInput>>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_processing_inputs): <p>An array of inputs configuring the data to download into the processing container.</p>
    ///   - [`processing_output_config(ProcessingOutputConfig)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::processing_output_config) / [`set_processing_output_config(Option<ProcessingOutputConfig>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_processing_output_config): <p>Output configuration for the processing job.</p>
    ///   - [`processing_job_name(impl Into<String>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::processing_job_name) / [`set_processing_job_name(Option<String>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_processing_job_name): <p> The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.</p>
    ///   - [`processing_resources(ProcessingResources)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::processing_resources) / [`set_processing_resources(Option<ProcessingResources>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_processing_resources): <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.</p>
    ///   - [`stopping_condition(ProcessingStoppingCondition)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::stopping_condition) / [`set_stopping_condition(Option<ProcessingStoppingCondition>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_stopping_condition): <p>The time limit for how long the processing job is allowed to run.</p>
    ///   - [`app_specification(AppSpecification)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::app_specification) / [`set_app_specification(Option<AppSpecification>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_app_specification): <p>Configures the processing job to run a specified Docker container image.</p>
    ///   - [`environment(HashMap<String, String>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::environment) / [`set_environment(Option<HashMap<String, String>>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_environment): <p>The environment variables to set in the Docker container. Up to 100 key and values entries in the map are supported.</p>
    ///   - [`network_config(NetworkConfig)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::network_config) / [`set_network_config(Option<NetworkConfig>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_network_config): <p>Networking options for a processing job, such as whether to allow inbound and outbound network calls to and from processing containers, and the VPC subnets and security groups to use for VPC-enabled processing jobs.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_role_arn): <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_tags): <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    ///   - [`experiment_config(ExperimentConfig)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::experiment_config) / [`set_experiment_config(Option<ExperimentConfig>)`](crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::set_experiment_config): <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>  <ul>   <li> <p> <code>CreateProcessingJob</code> </p> </li>   <li> <p> <code>CreateTrainingJob</code> </p> </li>   <li> <p> <code>CreateTransformJob</code> </p> </li>  </ul>
    /// - On success, responds with [`CreateProcessingJobOutput`](crate::operation::create_processing_job::CreateProcessingJobOutput) with field(s):
    ///   - [`processing_job_arn(Option<String>)`](crate::operation::create_processing_job::CreateProcessingJobOutput::processing_job_arn): <p>The Amazon Resource Name (ARN) of the processing job.</p>
    /// - On failure, responds with [`SdkError<CreateProcessingJobError>`](crate::operation::create_processing_job::CreateProcessingJobError)
    pub fn create_processing_job(
        &self,
    ) -> crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder {
        crate::operation::create_processing_job::builders::CreateProcessingJobFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
