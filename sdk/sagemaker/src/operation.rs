// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates an <i>association</i> between the source and the destination. A
/// source can be associated with multiple destinations, and a destination can be associated
/// with multiple sources. An association is a lineage tracking entity. For more information, see
/// <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
/// ML Lineage Tracking</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddAssociation {
    _private: (),
}
impl AddAssociation {
    /// Creates a new builder-style object to manufacture [`AddAssociationInput`](crate::input::AddAssociationInput)
    pub fn builder() -> crate::input::add_association_input::Builder {
        crate::input::add_association_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::AddAssociationOutput, crate::error::AddAssociationError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::AddAssociationError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::AddAssociationError {
                        kind: crate::error::AddAssociationErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::AddAssociationError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::AddAssociationError {
                        kind: crate::error::AddAssociationErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::AddAssociationError::unhandled(e),
                },
                _ => crate::error::AddAssociationError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::add_association_output::Builder::default();
        builder =
            crate::json_deser::add_association_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::AddAssociationError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddAssociation {
    type Output = Result<crate::output::AddAssociationOutput, crate::error::AddAssociationError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Adds or overwrites one or more tags for the specified Amazon SageMaker resource. You can add
/// tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform
/// jobs, models, labeling jobs, work teams, endpoint configurations, and
/// endpoints.</p>
/// <p>Each tag consists of a key and an optional value. Tag keys must be unique per
/// resource. For more information about tags, see For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS
/// Tagging Strategies</a>.</p>
/// <note>
/// <p>Tags that you add to a hyperparameter tuning job by calling this API are also
/// added to any training jobs that the hyperparameter tuning job launches after you
/// call this API, but not to training jobs that the hyperparameter tuning job launched
/// before you called this API. To make sure that the tags associated with a
/// hyperparameter tuning job are also added to all training jobs that the
/// hyperparameter tuning job launches, add the tags when you first create the tuning
/// job by specifying them in the <code>Tags</code> parameter of <a>CreateHyperParameterTuningJob</a>
/// </p>
/// </note>
/// <note>
/// <p>Tags that you add to a SageMaker Studio Domain or User Profile by calling this API
/// are also added to any Apps that the Domain or User Profile launches after you call
/// this API, but not to Apps that the Domain or User Profile launched before you called
/// this API. To make sure that the tags associated with a Domain or User Profile are
/// also added to all Apps that the Domain or User Profile launches, add the tags when
/// you first create the Domain or User Profile by specifying them in the
/// <code>Tags</code> parameter of <a>CreateDomain</a> or <a>CreateUserProfile</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddTags {
    _private: (),
}
impl AddTags {
    /// Creates a new builder-style object to manufacture [`AddTagsInput`](crate::input::AddTagsInput)
    pub fn builder() -> crate::input::add_tags_input::Builder {
        crate::input::add_tags_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::AddTagsOutput, crate::error::AddTagsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::AddTagsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::add_tags_output::Builder::default();
        builder = crate::json_deser::add_tags_deser_operation(response.body().as_ref(), builder)
            .map_err(crate::error::AddTagsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddTags {
    type Output = Result<crate::output::AddTagsOutput, crate::error::AddTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Associates a trial component with a trial. A trial component can be associated with
/// multiple trials. To disassociate a trial component from a trial, call the <a>DisassociateTrialComponent</a> API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateTrialComponent {
    _private: (),
}
impl AssociateTrialComponent {
    /// Creates a new builder-style object to manufacture [`AssociateTrialComponentInput`](crate::input::AssociateTrialComponentInput)
    pub fn builder() -> crate::input::associate_trial_component_input::Builder {
        crate::input::associate_trial_component_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::AssociateTrialComponentOutput,
        crate::error::AssociateTrialComponentError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::AssociateTrialComponentError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::AssociateTrialComponentError {
                        kind: crate::error::AssociateTrialComponentErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::AssociateTrialComponentError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::AssociateTrialComponentError {
                        kind: crate::error::AssociateTrialComponentErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::AssociateTrialComponentError::unhandled(e),
                },
                _ => crate::error::AssociateTrialComponentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::associate_trial_component_output::Builder::default();
        builder = crate::json_deser::associate_trial_component_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::AssociateTrialComponentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateTrialComponent {
    type Output = Result<
        crate::output::AssociateTrialComponentOutput,
        crate::error::AssociateTrialComponentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates an <i>action</i>. An action is a lineage tracking entity that
/// represents an action or activity. For example, a model deployment or an HPO job.
/// Generally, an action involves at least one input or output artifact. For more information, see
/// <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
/// ML Lineage Tracking</a>.</p>
/// <note>
/// <p>
/// <code>CreateAction</code> can only be invoked from within an SageMaker managed
/// environment. This includes SageMaker training jobs, processing jobs, transform jobs, and SageMaker
/// notebooks. A call to <code>CreateAction</code> from outside one of these
/// environments results in an error.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAction {
    _private: (),
}
impl CreateAction {
    /// Creates a new builder-style object to manufacture [`CreateActionInput`](crate::input::CreateActionInput)
    pub fn builder() -> crate::input::create_action_input::Builder {
        crate::input::create_action_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateActionOutput, crate::error::CreateActionError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateActionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateActionError {
                        kind: crate::error::CreateActionErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateActionError::unhandled(e),
                },
                _ => crate::error::CreateActionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_action_output::Builder::default();
        builder =
            crate::json_deser::create_action_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateActionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAction {
    type Output = Result<crate::output::CreateActionOutput, crate::error::CreateActionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Create a machine learning algorithm that you can use in Amazon SageMaker and list in the AWS
/// Marketplace.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAlgorithm {
    _private: (),
}
impl CreateAlgorithm {
    /// Creates a new builder-style object to manufacture [`CreateAlgorithmInput`](crate::input::CreateAlgorithmInput)
    pub fn builder() -> crate::input::create_algorithm_input::Builder {
        crate::input::create_algorithm_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateAlgorithmOutput, crate::error::CreateAlgorithmError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::CreateAlgorithmError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_algorithm_output::Builder::default();
        builder =
            crate::json_deser::create_algorithm_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateAlgorithmError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAlgorithm {
    type Output = Result<crate::output::CreateAlgorithmOutput, crate::error::CreateAlgorithmError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a running app for the specified UserProfile. Supported apps are
/// <code>JupyterServer</code> and <code>KernelGateway</code>. This operation is automatically
/// invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel
/// configurations are selected by the user. A user may have multiple Apps active simultaneously.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateApp {
    _private: (),
}
impl CreateApp {
    /// Creates a new builder-style object to manufacture [`CreateAppInput`](crate::input::CreateAppInput)
    pub fn builder() -> crate::input::create_app_input::Builder {
        crate::input::create_app_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateAppOutput, crate::error::CreateAppError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateAppError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateAppError {
                        kind: crate::error::CreateAppErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateAppError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateAppError {
                        kind: crate::error::CreateAppErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateAppError::unhandled(e),
                },
                _ => crate::error::CreateAppError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_app_output::Builder::default();
        builder = crate::json_deser::create_app_deser_operation(response.body().as_ref(), builder)
            .map_err(crate::error::CreateAppError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateApp {
    type Output = Result<crate::output::CreateAppOutput, crate::error::CreateAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a configuration for running a SageMaker image as a KernelGateway app. The
/// configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the
/// kernels in the image.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAppImageConfig {
    _private: (),
}
impl CreateAppImageConfig {
    /// Creates a new builder-style object to manufacture [`CreateAppImageConfigInput`](crate::input::CreateAppImageConfigInput)
    pub fn builder() -> crate::input::create_app_image_config_input::Builder {
        crate::input::create_app_image_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateAppImageConfigOutput, crate::error::CreateAppImageConfigError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateAppImageConfigError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateAppImageConfigError {
                        kind: crate::error::CreateAppImageConfigErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateAppImageConfigError::unhandled(e),
                },
                _ => crate::error::CreateAppImageConfigError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_app_image_config_output::Builder::default();
        builder = crate::json_deser::create_app_image_config_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateAppImageConfigError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAppImageConfig {
    type Output =
        Result<crate::output::CreateAppImageConfigOutput, crate::error::CreateAppImageConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates an <i>artifact</i>. An artifact is a lineage tracking entity that
/// represents a URI addressable object or data. Some examples are the S3 URI of a dataset and
/// the ECR registry path of an image. For more information, see
/// <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
/// ML Lineage Tracking</a>.</p>
/// <note>
/// <p>
/// <code>CreateArtifact</code> can only be invoked from within an SageMaker managed
/// environment. This includes SageMaker training jobs, processing jobs, transform jobs, and SageMaker
/// notebooks. A call to <code>CreateArtifact</code> from outside one of these
/// environments results in an error.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateArtifact {
    _private: (),
}
impl CreateArtifact {
    /// Creates a new builder-style object to manufacture [`CreateArtifactInput`](crate::input::CreateArtifactInput)
    pub fn builder() -> crate::input::create_artifact_input::Builder {
        crate::input::create_artifact_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateArtifactOutput, crate::error::CreateArtifactError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateArtifactError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateArtifactError {
                        kind: crate::error::CreateArtifactErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateArtifactError::unhandled(e),
                },
                _ => crate::error::CreateArtifactError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_artifact_output::Builder::default();
        builder =
            crate::json_deser::create_artifact_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateArtifactError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateArtifact {
    type Output = Result<crate::output::CreateArtifactOutput, crate::error::CreateArtifactError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates an Autopilot job.</p>
/// <p>Find the best performing model after you run an Autopilot job by calling .</p>
/// <p>For information about how to use Autopilot, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html">Automate Model
/// Development with Amazon SageMaker Autopilot</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAutoMLJob {
    _private: (),
}
impl CreateAutoMLJob {
    /// Creates a new builder-style object to manufacture [`CreateAutoMLJobInput`](crate::input::CreateAutoMLJobInput)
    pub fn builder() -> crate::input::create_auto_ml_job_input::Builder {
        crate::input::create_auto_ml_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateAutoMLJobOutput, crate::error::CreateAutoMLJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateAutoMLJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateAutoMLJobError {
                        kind: crate::error::CreateAutoMLJobErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateAutoMLJobError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateAutoMLJobError {
                        kind: crate::error::CreateAutoMLJobErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateAutoMLJobError::unhandled(e),
                },
                _ => crate::error::CreateAutoMLJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_auto_ml_job_output::Builder::default();
        builder = crate::json_deser::create_auto_ml_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateAutoMLJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAutoMLJob {
    type Output = Result<crate::output::CreateAutoMLJobOutput, crate::error::CreateAutoMLJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a Git repository as a resource in your Amazon SageMaker account. You can associate the
/// repository with notebook instances so that you can use Git source control for the
/// notebooks you create. The Git repository is a resource in your Amazon SageMaker account, so it can
/// be associated with more than one notebook instance, and it persists independently from
/// the lifecycle of any notebook instances it is associated with.</p>
/// <p>The repository can be hosted either in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</a> or in any
/// other Git repository.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCodeRepository {
    _private: (),
}
impl CreateCodeRepository {
    /// Creates a new builder-style object to manufacture [`CreateCodeRepositoryInput`](crate::input::CreateCodeRepositoryInput)
    pub fn builder() -> crate::input::create_code_repository_input::Builder {
        crate::input::create_code_repository_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateCodeRepositoryOutput, crate::error::CreateCodeRepositoryError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::CreateCodeRepositoryError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_code_repository_output::Builder::default();
        builder = crate::json_deser::create_code_repository_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateCodeRepositoryError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCodeRepository {
    type Output =
        Result<crate::output::CreateCodeRepositoryOutput, crate::error::CreateCodeRepositoryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the
/// resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. </p>
/// <p>If
/// you choose to host your model using Amazon SageMaker hosting services, you can use the resulting
/// model artifacts as part of the model. You can also use the artifacts with
/// AWS
/// IoT Greengrass. In that case, deploy them as an ML
/// resource.</p>
/// <p>In the request body, you provide the following:</p>
/// <ul>
/// <li>
/// <p>A name for the compilation job</p>
/// </li>
/// <li>
/// <p> Information about the input model artifacts </p>
/// </li>
/// <li>
/// <p>The output location for the compiled model and the device (target) that the
/// model runs on </p>
/// </li>
/// <li>
/// <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform
/// the model compilation job. </p>
/// </li>
/// </ul>
/// <p>You can also provide a <code>Tag</code> to track the model compilation job's resource
/// use and costs. The response body contains the
/// <code>CompilationJobArn</code>
/// for the compiled job.</p>
/// <p>To stop a model compilation job, use <a>StopCompilationJob</a>. To get
/// information about a particular model compilation job, use <a>DescribeCompilationJob</a>. To get information about multiple model
/// compilation jobs, use <a>ListCompilationJobs</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCompilationJob {
    _private: (),
}
impl CreateCompilationJob {
    /// Creates a new builder-style object to manufacture [`CreateCompilationJobInput`](crate::input::CreateCompilationJobInput)
    pub fn builder() -> crate::input::create_compilation_job_input::Builder {
        crate::input::create_compilation_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateCompilationJobOutput, crate::error::CreateCompilationJobError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateCompilationJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateCompilationJobError {
                        kind: crate::error::CreateCompilationJobErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateCompilationJobError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateCompilationJobError {
                        kind: crate::error::CreateCompilationJobErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateCompilationJobError::unhandled(e),
                },
                _ => crate::error::CreateCompilationJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_compilation_job_output::Builder::default();
        builder = crate::json_deser::create_compilation_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateCompilationJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCompilationJob {
    type Output =
        Result<crate::output::CreateCompilationJobOutput, crate::error::CreateCompilationJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a <i>context</i>. A context is a lineage tracking entity that
/// represents a logical grouping of other tracking or experiment entities. Some examples are
/// an endpoint and a model package. For more information, see
/// <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
/// ML Lineage Tracking</a>.</p>
/// <note>
/// <p>
/// <code>CreateContext</code> can only be invoked from within an SageMaker managed
/// environment. This includes SageMaker training jobs, processing jobs, transform jobs, and SageMaker
/// notebooks. A call to <code>CreateContext</code> from outside one of these
/// environments results in an error.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateContext {
    _private: (),
}
impl CreateContext {
    /// Creates a new builder-style object to manufacture [`CreateContextInput`](crate::input::CreateContextInput)
    pub fn builder() -> crate::input::create_context_input::Builder {
        crate::input::create_context_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateContextOutput, crate::error::CreateContextError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateContextError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateContextError {
                        kind: crate::error::CreateContextErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateContextError::unhandled(e),
                },
                _ => crate::error::CreateContextError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_context_output::Builder::default();
        builder =
            crate::json_deser::create_context_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateContextError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateContext {
    type Output = Result<crate::output::CreateContextOutput, crate::error::CreateContextError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a definition for a job that monitors data quality and drift. For information
/// about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDataQualityJobDefinition {
    _private: (),
}
impl CreateDataQualityJobDefinition {
    /// Creates a new builder-style object to manufacture [`CreateDataQualityJobDefinitionInput`](crate::input::CreateDataQualityJobDefinitionInput)
    pub fn builder() -> crate::input::create_data_quality_job_definition_input::Builder {
        crate::input::create_data_quality_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateDataQualityJobDefinitionOutput,
        crate::error::CreateDataQualityJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::CreateDataQualityJobDefinitionError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateDataQualityJobDefinitionError { kind: crate::error::CreateDataQualityJobDefinitionErrorKind::ResourceInUse(body), meta: generic },
                    Err(e) => crate::error::CreateDataQualityJobDefinitionError::unhandled(e)
                }
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateDataQualityJobDefinitionError { kind: crate::error::CreateDataQualityJobDefinitionErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::CreateDataQualityJobDefinitionError::unhandled(e)
                }
                _ => crate::error::CreateDataQualityJobDefinitionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::create_data_quality_job_definition_output::Builder::default();
        builder = crate::json_deser::create_data_quality_job_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateDataQualityJobDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDataQualityJobDefinition {
    type Output = Result<
        crate::output::CreateDataQualityJobDefinitionOutput,
        crate::error::CreateDataQualityJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a device fleet.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeviceFleet {
    _private: (),
}
impl CreateDeviceFleet {
    /// Creates a new builder-style object to manufacture [`CreateDeviceFleetInput`](crate::input::CreateDeviceFleetInput)
    pub fn builder() -> crate::input::create_device_fleet_input::Builder {
        crate::input::create_device_fleet_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateDeviceFleetOutput, crate::error::CreateDeviceFleetError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateDeviceFleetError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateDeviceFleetError {
                        kind: crate::error::CreateDeviceFleetErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateDeviceFleetError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateDeviceFleetError {
                        kind: crate::error::CreateDeviceFleetErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateDeviceFleetError::unhandled(e),
                },
                _ => crate::error::CreateDeviceFleetError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_device_fleet_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDeviceFleet {
    type Output =
        Result<crate::output::CreateDeviceFleetOutput, crate::error::CreateDeviceFleetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain consists of an associated
/// Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application,
/// policy, and Amazon Virtual Private Cloud (VPC) configurations. An AWS account is limited to one domain per region.
/// Users within a domain can share notebook files and other artifacts with each other.</p>
/// <p>
/// <b>EFS storage</b>
/// </p>
/// <p>When a domain is created, an EFS volume is created for use by all of the users within the
/// domain. Each user receives a private home directory within the EFS volume for notebooks,
/// Git repositories, and data files.</p>
/// <p>SageMaker uses the AWS Key Management Service (AWS KMS) to encrypt the EFS volume attached to the domain with
/// an AWS managed customer master key (CMK) by default. For more control, you can specify a
/// customer managed CMK. For more information, see
/// <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect Data at
/// Rest Using Encryption</a>.</p>
/// <p>
/// <b>VPC configuration</b>
/// </p>
/// <p>All SageMaker Studio traffic between the domain and the EFS volume is through the specified
/// VPC and subnets. For other Studio traffic, you can specify the <code>AppNetworkAccessType</code>
/// parameter. <code>AppNetworkAccessType</code> corresponds to the network access type that you
/// choose when you onboard to Studio. The following options are available:</p>
/// <ul>
/// <li>
/// <p>
/// <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC managed by
/// Amazon SageMaker, which allows internet access. This is the default value.</p>
/// </li>
/// <li>
/// <p>
/// <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets.
/// Internet access is disabled by default. To allow internet access, you must specify a
/// NAT gateway.</p>
/// <p>When internet access is disabled, you won't be able to run a Studio notebook or to
/// train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime
/// or a NAT gateway and your security groups allow outbound connections.</p>
/// </li>
/// </ul>
/// <p>For more information, see
/// <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect
/// SageMaker Studio Notebooks to Resources in a VPC</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDomain {
    _private: (),
}
impl CreateDomain {
    /// Creates a new builder-style object to manufacture [`CreateDomainInput`](crate::input::CreateDomainInput)
    pub fn builder() -> crate::input::create_domain_input::Builder {
        crate::input::create_domain_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateDomainOutput, crate::error::CreateDomainError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateDomainError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateDomainError {
                        kind: crate::error::CreateDomainErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateDomainError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateDomainError {
                        kind: crate::error::CreateDomainErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateDomainError::unhandled(e),
                },
                _ => crate::error::CreateDomainError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_domain_output::Builder::default();
        builder =
            crate::json_deser::create_domain_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateDomainError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDomain {
    type Output = Result<crate::output::CreateDomainOutput, crate::error::CreateDomainError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEdgePackagingJob {
    _private: (),
}
impl CreateEdgePackagingJob {
    /// Creates a new builder-style object to manufacture [`CreateEdgePackagingJobInput`](crate::input::CreateEdgePackagingJobInput)
    pub fn builder() -> crate::input::create_edge_packaging_job_input::Builder {
        crate::input::create_edge_packaging_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateEdgePackagingJobOutput,
        crate::error::CreateEdgePackagingJobError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::CreateEdgePackagingJobError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateEdgePackagingJobError {
                        kind: crate::error::CreateEdgePackagingJobErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateEdgePackagingJobError::unhandled(e),
                },
                _ => crate::error::CreateEdgePackagingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_edge_packaging_job_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEdgePackagingJob {
    type Output = Result<
        crate::output::CreateEdgePackagingJobOutput,
        crate::error::CreateEdgePackagingJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates an endpoint using the endpoint configuration specified in the request. Amazon SageMaker
/// uses the endpoint to provision resources and deploy models. You create the endpoint
/// configuration with the <a>CreateEndpointConfig</a> API. </p>
/// <p> Use this API to deploy models using Amazon SageMaker hosting services. </p>
/// <p>For an example that calls this method when deploying a model to Amazon SageMaker hosting services,
/// see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ex1-deploy-model.html#ex1-deploy-model-boto">Deploy the
/// Model to Amazon SageMaker Hosting Services (AWS SDK for Python (Boto
/// 3)).</a>
/// </p>
/// <note>
/// <p> You must not delete an <code>EndpointConfig</code> that is in use by an endpoint
/// that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code>
/// operations are being performed on the endpoint. To update an endpoint, you must
/// create a new <code>EndpointConfig</code>.</p>
/// </note>
/// <p>The endpoint name must be unique within an AWS Region in your AWS account. </p>
/// <p>When it receives the request, Amazon SageMaker creates the endpoint, launches the resources (ML
/// compute instances), and deploys the model(s) on them. </p>
/// <note>
/// <p>When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
/// verify that your endpoint configuration exists. When you read data from a DynamoDB
/// table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
/// <code>Eventually Consistent Reads</code>
/// </a>, the response might not
/// reflect the results of a recently completed write operation. The response might
/// include some stale data. If the dependent entities are not yet in DynamoDB, this
/// causes a validation error. If you repeat your read request after a short time, the
/// response should return the latest data. So retry logic is recommended to handle
/// these possible issues. We also recommend that customers call <a>DescribeEndpointConfig</a> before calling <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
/// </note>
/// <p>When Amazon SageMaker receives the request, it sets the endpoint status to
/// <code>Creating</code>. After it creates the endpoint, it sets the status to
/// <code>InService</code>. Amazon SageMaker can then process incoming requests for inferences. To
/// check the status of an endpoint, use the <a>DescribeEndpoint</a>
/// API.</p>
/// <p>If any of the models hosted at this endpoint get model data from an Amazon S3 location,
/// Amazon SageMaker uses AWS Security Token Service to download model artifacts from the S3 path you
/// provided. AWS STS is activated in your IAM user account by default. If you previously
/// deactivated AWS STS for a region, you need to reactivate AWS STS for that region. For
/// more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and
/// Deactivating AWS STS in an AWS Region</a> in the <i>AWS Identity and Access Management User
/// Guide</i>.</p>
/// <note>
/// <p> To add the IAM role policies for using this API operation, go to the <a href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose
/// Roles in the left navigation pane. Search the IAM role that you want to grant
/// access to use the <a>CreateEndpoint</a> and <a>CreateEndpointConfig</a> API operations, add the following policies to
/// the role. </p>
/// <ul>
/// <li>
/// <p>Option 1: For a full Amazon SageMaker access, search and attach the
/// <code>AmazonSageMakerFullAccess</code> policy.</p>
/// </li>
/// <li>
/// <p>Option 2: For granting a limited access to an IAM role, paste the
/// following Action elements manually into the JSON file of the IAM role: </p>
/// <p>
/// <code>"Action": ["sagemaker:CreateEndpoint",
/// "sagemaker:CreateEndpointConfig"]</code>
/// </p>
/// <p>
/// <code>"Resource": [</code>
/// </p>
/// <p>
/// <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code>
/// </p>
/// <p>
/// <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code>
/// </p>
/// <p>
/// <code>]</code>
/// </p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">Amazon SageMaker API
/// Permissions: Actions, Permissions, and Resources
/// Reference</a>.</p>
/// </li>
/// </ul>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEndpoint {
    _private: (),
}
impl CreateEndpoint {
    /// Creates a new builder-style object to manufacture [`CreateEndpointInput`](crate::input::CreateEndpointInput)
    pub fn builder() -> crate::input::create_endpoint_input::Builder {
        crate::input::create_endpoint_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateEndpointOutput, crate::error::CreateEndpointError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateEndpointError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateEndpointError {
                        kind: crate::error::CreateEndpointErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateEndpointError::unhandled(e),
                },
                _ => crate::error::CreateEndpointError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_endpoint_output::Builder::default();
        builder =
            crate::json_deser::create_endpoint_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateEndpointError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEndpoint {
    type Output = Result<crate::output::CreateEndpointOutput, crate::error::CreateEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates an endpoint configuration that Amazon SageMaker hosting services uses to deploy models. In
/// the configuration, you identify one or more models, created using the
/// <code>CreateModel</code> API, to deploy and the resources that you want Amazon SageMaker to
/// provision. Then you call the <a>CreateEndpoint</a> API.</p>
/// <note>
/// <p> Use this API if you want to use Amazon SageMaker hosting services to deploy models into
/// production. </p>
/// </note>
/// <p>In the request, you define a <code>ProductionVariant</code>, for each model that you
/// want to deploy. Each <code>ProductionVariant</code> parameter also describes the
/// resources that you want Amazon SageMaker to provision. This includes the number and type of ML
/// compute instances to deploy. </p>
/// <p>If you are hosting multiple models, you also assign a <code>VariantWeight</code> to
/// specify how much traffic you want to allocate to each model. For example, suppose that
/// you want to host two models, A and B, and you assign traffic weight 2 for model A and 1
/// for model B. Amazon SageMaker distributes two-thirds of the traffic to Model A, and one-third to
/// model B. </p>
/// <p>For an example that calls this method when deploying a model to Amazon SageMaker hosting services,
/// see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ex1-deploy-model.html#ex1-deploy-model-boto">Deploy the
/// Model to Amazon SageMaker Hosting Services (AWS SDK for Python (Boto
/// 3)).</a>
/// </p>
/// <note>
/// <p>When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
/// verify that your endpoint configuration exists. When you read data from a DynamoDB
/// table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
/// <code>Eventually Consistent Reads</code>
/// </a>, the response might not
/// reflect the results of a recently completed write operation. The response might
/// include some stale data. If the dependent entities are not yet in DynamoDB, this
/// causes a validation error. If you repeat your read request after a short time, the
/// response should return the latest data. So retry logic is recommended to handle
/// these possible issues. We also recommend that customers call <a>DescribeEndpointConfig</a> before calling <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEndpointConfig {
    _private: (),
}
impl CreateEndpointConfig {
    /// Creates a new builder-style object to manufacture [`CreateEndpointConfigInput`](crate::input::CreateEndpointConfigInput)
    pub fn builder() -> crate::input::create_endpoint_config_input::Builder {
        crate::input::create_endpoint_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateEndpointConfigOutput, crate::error::CreateEndpointConfigError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateEndpointConfigError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateEndpointConfigError {
                        kind: crate::error::CreateEndpointConfigErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateEndpointConfigError::unhandled(e),
                },
                _ => crate::error::CreateEndpointConfigError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_endpoint_config_output::Builder::default();
        builder = crate::json_deser::create_endpoint_config_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateEndpointConfigError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEndpointConfig {
    type Output =
        Result<crate::output::CreateEndpointConfigOutput, crate::error::CreateEndpointConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates an SageMaker <i>experiment</i>. An experiment is a collection of
/// <i>trials</i> that are observed, compared and evaluated as a group. A trial is
/// a set of steps, called <i>trial components</i>, that produce a machine learning
/// model.</p>
/// <p>The goal of an experiment is to determine the components that produce the best model.
/// Multiple trials are performed, each one isolating and measuring the impact of a change to one
/// or more inputs, while keeping the remaining inputs constant.</p>
/// <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
/// components are automatically tracked, logged, and indexed. When you use the AWS SDK for Python (Boto), you
/// must use the logging APIs provided by the SDK.</p>
/// <p>You can add tags to experiments, trials, trial components and then use the <a>Search</a> API to search for the tags.</p>
/// <p>To add a description to an experiment, specify the optional <code>Description</code>
/// parameter. To add a description later, or to change the description, call the <a>UpdateExperiment</a> API.</p>
/// <p>To get a list of all your experiments, call the <a>ListExperiments</a> API. To
/// view an experiment's properties, call the <a>DescribeExperiment</a> API. To get a
/// list of all the trials associated with an experiment, call the <a>ListTrials</a>
/// API. To create a trial call the <a>CreateTrial</a> API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateExperiment {
    _private: (),
}
impl CreateExperiment {
    /// Creates a new builder-style object to manufacture [`CreateExperimentInput`](crate::input::CreateExperimentInput)
    pub fn builder() -> crate::input::create_experiment_input::Builder {
        crate::input::create_experiment_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateExperimentOutput, crate::error::CreateExperimentError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateExperimentError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateExperimentError {
                        kind: crate::error::CreateExperimentErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateExperimentError::unhandled(e),
                },
                _ => crate::error::CreateExperimentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_experiment_output::Builder::default();
        builder =
            crate::json_deser::create_experiment_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateExperimentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateExperiment {
    type Output =
        Result<crate::output::CreateExperimentOutput, crate::error::CreateExperimentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a group of
/// <code>Features</code> defined in the <code>FeatureStore</code> to describe a
/// <code>Record</code>. </p>
/// <p>The <code>FeatureGroup</code> defines the schema and features contained in the
/// FeatureGroup. A <code>FeatureGroup</code> definition is composed of a list of
/// <code>Features</code>, a <code>RecordIdentifierFeatureName</code>, an
/// <code>EventTimeFeatureName</code> and configurations for its <code>OnlineStore</code>
/// and <code>OfflineStore</code>. Check <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">AWS service quotas</a> to see
/// the <code>FeatureGroup</code>s quota for your AWS account.</p>
/// <important>
/// <p>You must include at least one of <code>OnlineStoreConfig</code> and
/// <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFeatureGroup {
    _private: (),
}
impl CreateFeatureGroup {
    /// Creates a new builder-style object to manufacture [`CreateFeatureGroupInput`](crate::input::CreateFeatureGroupInput)
    pub fn builder() -> crate::input::create_feature_group_input::Builder {
        crate::input::create_feature_group_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateFeatureGroupOutput, crate::error::CreateFeatureGroupError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateFeatureGroupError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateFeatureGroupError {
                        kind: crate::error::CreateFeatureGroupErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateFeatureGroupError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateFeatureGroupError {
                        kind: crate::error::CreateFeatureGroupErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateFeatureGroupError::unhandled(e),
                },
                _ => crate::error::CreateFeatureGroupError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_feature_group_output::Builder::default();
        builder = crate::json_deser::create_feature_group_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateFeatureGroupError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFeatureGroup {
    type Output =
        Result<crate::output::CreateFeatureGroupOutput, crate::error::CreateFeatureGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a flow definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFlowDefinition {
    _private: (),
}
impl CreateFlowDefinition {
    /// Creates a new builder-style object to manufacture [`CreateFlowDefinitionInput`](crate::input::CreateFlowDefinitionInput)
    pub fn builder() -> crate::input::create_flow_definition_input::Builder {
        crate::input::create_flow_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateFlowDefinitionOutput, crate::error::CreateFlowDefinitionError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateFlowDefinitionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateFlowDefinitionError {
                        kind: crate::error::CreateFlowDefinitionErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateFlowDefinitionError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateFlowDefinitionError {
                        kind: crate::error::CreateFlowDefinitionErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateFlowDefinitionError::unhandled(e),
                },
                _ => crate::error::CreateFlowDefinitionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_flow_definition_output::Builder::default();
        builder = crate::json_deser::create_flow_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateFlowDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFlowDefinition {
    type Output =
        Result<crate::output::CreateFlowDefinitionOutput, crate::error::CreateFlowDefinitionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateHumanTaskUi {
    _private: (),
}
impl CreateHumanTaskUi {
    /// Creates a new builder-style object to manufacture [`CreateHumanTaskUiInput`](crate::input::CreateHumanTaskUiInput)
    pub fn builder() -> crate::input::create_human_task_ui_input::Builder {
        crate::input::create_human_task_ui_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateHumanTaskUiOutput, crate::error::CreateHumanTaskUiError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateHumanTaskUiError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateHumanTaskUiError {
                        kind: crate::error::CreateHumanTaskUiErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateHumanTaskUiError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateHumanTaskUiError {
                        kind: crate::error::CreateHumanTaskUiErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateHumanTaskUiError::unhandled(e),
                },
                _ => crate::error::CreateHumanTaskUiError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_human_task_ui_output::Builder::default();
        builder = crate::json_deser::create_human_task_ui_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateHumanTaskUiError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateHumanTaskUi {
    type Output =
        Result<crate::output::CreateHumanTaskUiOutput, crate::error::CreateHumanTaskUiError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version
/// of a model by running many training jobs on your dataset using the algorithm you choose
/// and values for hyperparameters within ranges that you specify. It then chooses the
/// hyperparameter values that result in a model that performs the best, as measured by an
/// objective metric that you choose.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateHyperParameterTuningJob {
    _private: (),
}
impl CreateHyperParameterTuningJob {
    /// Creates a new builder-style object to manufacture [`CreateHyperParameterTuningJobInput`](crate::input::CreateHyperParameterTuningJobInput)
    pub fn builder() -> crate::input::create_hyper_parameter_tuning_job_input::Builder {
        crate::input::create_hyper_parameter_tuning_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateHyperParameterTuningJobOutput,
        crate::error::CreateHyperParameterTuningJobError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::CreateHyperParameterTuningJobError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateHyperParameterTuningJobError { kind: crate::error::CreateHyperParameterTuningJobErrorKind::ResourceInUse(body), meta: generic },
                    Err(e) => crate::error::CreateHyperParameterTuningJobError::unhandled(e)
                }
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateHyperParameterTuningJobError { kind: crate::error::CreateHyperParameterTuningJobErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::CreateHyperParameterTuningJobError::unhandled(e)
                }
                _ => crate::error::CreateHyperParameterTuningJobError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::create_hyper_parameter_tuning_job_output::Builder::default();
        builder = crate::json_deser::create_hyper_parameter_tuning_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateHyperParameterTuningJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateHyperParameterTuningJob {
    type Output = Result<
        crate::output::CreateHyperParameterTuningJobOutput,
        crate::error::CreateHyperParameterTuningJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image
/// version represents a container image stored in Amazon Container Registry (ECR). For more information, see
/// <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateImage {
    _private: (),
}
impl CreateImage {
    /// Creates a new builder-style object to manufacture [`CreateImageInput`](crate::input::CreateImageInput)
    pub fn builder() -> crate::input::create_image_input::Builder {
        crate::input::create_image_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateImageOutput, crate::error::CreateImageError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateImageError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateImageError {
                        kind: crate::error::CreateImageErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateImageError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateImageError {
                        kind: crate::error::CreateImageErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateImageError::unhandled(e),
                },
                _ => crate::error::CreateImageError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_image_output::Builder::default();
        builder =
            crate::json_deser::create_image_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateImageError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateImage {
    type Output = Result<crate::output::CreateImageOutput, crate::error::CreateImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a version of the SageMaker image specified by <code>ImageName</code>. The version
/// represents the Amazon Container Registry (ECR) container image specified by <code>BaseImage</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateImageVersion {
    _private: (),
}
impl CreateImageVersion {
    /// Creates a new builder-style object to manufacture [`CreateImageVersionInput`](crate::input::CreateImageVersionInput)
    pub fn builder() -> crate::input::create_image_version_input::Builder {
        crate::input::create_image_version_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateImageVersionOutput, crate::error::CreateImageVersionError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateImageVersionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateImageVersionError {
                        kind: crate::error::CreateImageVersionErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateImageVersionError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateImageVersionError {
                        kind: crate::error::CreateImageVersionErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateImageVersionError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateImageVersionError {
                        kind: crate::error::CreateImageVersionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateImageVersionError::unhandled(e),
                },
                _ => crate::error::CreateImageVersionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_image_version_output::Builder::default();
        builder = crate::json_deser::create_image_version_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateImageVersionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateImageVersion {
    type Output =
        Result<crate::output::CreateImageVersionOutput, crate::error::CreateImageVersionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a job that uses workers to label the data objects in your input dataset. You
/// can use the labeled data to train machine learning models. </p>
/// <p>You can select your workforce from one of three providers:</p>
/// <ul>
/// <li>
/// <p>A private workforce that you create. It can include employees, contractors,
/// and outside experts. Use a private workforce when want the data to stay within
/// your organization or when a specific set of skills is required.</p>
/// </li>
/// <li>
/// <p>One or more vendors that you select from the AWS Marketplace. Vendors provide
/// expertise in specific areas. </p>
/// </li>
/// <li>
/// <p>The Amazon Mechanical Turk workforce. This is the largest workforce, but it
/// should only be used for public data or data that has been stripped of any
/// personally identifiable information.</p>
/// </li>
/// </ul>
/// <p>You can also use <i>automated data labeling</i> to reduce the number of
/// data objects that need to be labeled by a human. Automated data labeling uses
/// <i>active learning</i> to determine if a data object can be labeled by
/// machine or if it needs to be sent to a human worker. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using
/// Automated Data Labeling</a>.</p>
/// <p>The data objects to be labeled are contained in an Amazon S3 bucket. You create a
/// <i>manifest file</i> that describes the location of each object. For
/// more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using Input and Output Data</a>.</p>
/// <p>The output can be used as the manifest file for another labeling job or as training
/// data for your machine learning models.</p>
/// <p>You can use this operation to create a static labeling job or a streaming labeling
/// job. A static labeling job stops if all data objects in the input manifest file
/// identified in <code>ManifestS3Uri</code> have been labeled. A streaming labeling job
/// runs perpetually until it is manually stopped, or remains idle for 10 days. You can send
/// new data objects to an active (<code>InProgress</code>) streaming labeling job in real
/// time. To learn how to create a static labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create a Labeling Job
/// (API) </a> in the Amazon SageMaker Developer Guide. To learn how to create a streaming
/// labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create a Streaming Labeling
/// Job</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLabelingJob {
    _private: (),
}
impl CreateLabelingJob {
    /// Creates a new builder-style object to manufacture [`CreateLabelingJobInput`](crate::input::CreateLabelingJobInput)
    pub fn builder() -> crate::input::create_labeling_job_input::Builder {
        crate::input::create_labeling_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateLabelingJobOutput, crate::error::CreateLabelingJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateLabelingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateLabelingJobError {
                        kind: crate::error::CreateLabelingJobErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateLabelingJobError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateLabelingJobError {
                        kind: crate::error::CreateLabelingJobErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateLabelingJobError::unhandled(e),
                },
                _ => crate::error::CreateLabelingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_labeling_job_output::Builder::default();
        builder = crate::json_deser::create_labeling_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateLabelingJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLabelingJob {
    type Output =
        Result<crate::output::CreateLabelingJobOutput, crate::error::CreateLabelingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a model in Amazon SageMaker. In the request, you name the model and describe a primary
/// container. For the primary container, you specify the Docker image that
/// contains inference code, artifacts (from prior training), and a custom environment map
/// that the inference code uses when you deploy the model for predictions.</p>
/// <p>Use this API to create a model if you want to use Amazon SageMaker hosting services or run a batch
/// transform job.</p>
/// <p>To host your model, you create an endpoint configuration with the
/// <code>CreateEndpointConfig</code> API, and then create an endpoint with the
/// <code>CreateEndpoint</code> API. Amazon SageMaker then deploys all of the containers that you
/// defined for the model in the hosting environment. </p>
/// <p>For an example that calls this method when deploying a model to Amazon SageMaker hosting services,
/// see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ex1-deploy-model.html#ex1-deploy-model-boto">Deploy the
/// Model to Amazon SageMaker Hosting Services (AWS SDK for Python (Boto
/// 3)).</a>
/// </p>
/// <p>To run a batch transform using your model, you start a job with the
/// <code>CreateTransformJob</code> API. Amazon SageMaker uses your model and your dataset to get
/// inferences which are then saved to a specified S3 location.</p>
/// <p>In the <code>CreateModel</code> request, you must define a container with the
/// <code>PrimaryContainer</code> parameter.</p>
/// <p>In the request, you also provide an IAM role that Amazon SageMaker can assume to access model
/// artifacts and docker image for deployment on ML compute hosting instances or for batch
/// transform jobs. In addition, you also use the IAM role to manage permissions the
/// inference code needs. For example, if the inference code access any other AWS resources,
/// you grant necessary permissions via this role.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateModel {
    _private: (),
}
impl CreateModel {
    /// Creates a new builder-style object to manufacture [`CreateModelInput`](crate::input::CreateModelInput)
    pub fn builder() -> crate::input::create_model_input::Builder {
        crate::input::create_model_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateModelOutput, crate::error::CreateModelError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateModelError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelError {
                        kind: crate::error::CreateModelErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateModelError::unhandled(e),
                },
                _ => crate::error::CreateModelError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_model_output::Builder::default();
        builder =
            crate::json_deser::create_model_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateModelError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateModel {
    type Output = Result<crate::output::CreateModelOutput, crate::error::CreateModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates the definition for a model bias job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelBiasJobDefinition {
    _private: (),
}
impl CreateModelBiasJobDefinition {
    /// Creates a new builder-style object to manufacture [`CreateModelBiasJobDefinitionInput`](crate::input::CreateModelBiasJobDefinitionInput)
    pub fn builder() -> crate::input::create_model_bias_job_definition_input::Builder {
        crate::input::create_model_bias_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateModelBiasJobDefinitionOutput,
        crate::error::CreateModelBiasJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::CreateModelBiasJobDefinitionError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelBiasJobDefinitionError { kind: crate::error::CreateModelBiasJobDefinitionErrorKind::ResourceInUse(body), meta: generic },
                    Err(e) => crate::error::CreateModelBiasJobDefinitionError::unhandled(e)
                }
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelBiasJobDefinitionError { kind: crate::error::CreateModelBiasJobDefinitionErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::CreateModelBiasJobDefinitionError::unhandled(e)
                }
                _ => crate::error::CreateModelBiasJobDefinitionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::create_model_bias_job_definition_output::Builder::default();
        builder = crate::json_deser::create_model_bias_job_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateModelBiasJobDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateModelBiasJobDefinition {
    type Output = Result<
        crate::output::CreateModelBiasJobDefinitionOutput,
        crate::error::CreateModelBiasJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates the definition for a model explainability job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelExplainabilityJobDefinition {
    _private: (),
}
impl CreateModelExplainabilityJobDefinition {
    /// Creates a new builder-style object to manufacture [`CreateModelExplainabilityJobDefinitionInput`](crate::input::CreateModelExplainabilityJobDefinitionInput)
    pub fn builder() -> crate::input::create_model_explainability_job_definition_input::Builder {
        crate::input::create_model_explainability_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateModelExplainabilityJobDefinitionOutput,
        crate::error::CreateModelExplainabilityJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::CreateModelExplainabilityJobDefinitionError::unhandled(
                            generic,
                        ),
                    )
                }
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelExplainabilityJobDefinitionError { kind: crate::error::CreateModelExplainabilityJobDefinitionErrorKind::ResourceInUse(body), meta: generic },
                    Err(e) => crate::error::CreateModelExplainabilityJobDefinitionError::unhandled(e)
                }
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelExplainabilityJobDefinitionError { kind: crate::error::CreateModelExplainabilityJobDefinitionErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::CreateModelExplainabilityJobDefinitionError::unhandled(e)
                }
                _ => crate::error::CreateModelExplainabilityJobDefinitionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::create_model_explainability_job_definition_output::Builder::default();
        builder = crate::json_deser::create_model_explainability_job_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateModelExplainabilityJobDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateModelExplainabilityJobDefinition {
    type Output = Result<
        crate::output::CreateModelExplainabilityJobDefinitionOutput,
        crate::error::CreateModelExplainabilityJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a model package that you can use to create Amazon SageMaker models or list on AWS
/// Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to
/// model packages listed on AWS Marketplace to create models in Amazon SageMaker.</p>
/// <p>To create a model package by specifying a Docker container that contains your
/// inference code and the Amazon S3 location of your model artifacts, provide values for
/// <code>InferenceSpecification</code>. To create a model from an algorithm resource
/// that you created or subscribed to in AWS Marketplace, provide a value for
/// <code>SourceAlgorithmSpecification</code>.</p>
/// <note>
/// <p>There are two types of model packages:</p>
/// <ul>
/// <li>
/// <p>Versioned - a model that is part of a model group in the model
/// registry.</p>
/// </li>
/// <li>
/// <p>Unversioned - a model package that is not part of a model group.</p>
/// </li>
/// </ul>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelPackage {
    _private: (),
}
impl CreateModelPackage {
    /// Creates a new builder-style object to manufacture [`CreateModelPackageInput`](crate::input::CreateModelPackageInput)
    pub fn builder() -> crate::input::create_model_package_input::Builder {
        crate::input::create_model_package_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateModelPackageOutput, crate::error::CreateModelPackageError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateModelPackageError::unhandled(generic)),
            };
            return Err(match error_code {
                "ConflictException" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelPackageError {
                        kind: crate::error::CreateModelPackageErrorKind::ConflictError(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateModelPackageError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelPackageError {
                        kind: crate::error::CreateModelPackageErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateModelPackageError::unhandled(e),
                },
                _ => crate::error::CreateModelPackageError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_model_package_output::Builder::default();
        builder = crate::json_deser::create_model_package_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateModelPackageError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateModelPackage {
    type Output =
        Result<crate::output::CreateModelPackageOutput, crate::error::CreateModelPackageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a model group. A model group contains a group of model versions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelPackageGroup {
    _private: (),
}
impl CreateModelPackageGroup {
    /// Creates a new builder-style object to manufacture [`CreateModelPackageGroupInput`](crate::input::CreateModelPackageGroupInput)
    pub fn builder() -> crate::input::create_model_package_group_input::Builder {
        crate::input::create_model_package_group_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateModelPackageGroupOutput,
        crate::error::CreateModelPackageGroupError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::CreateModelPackageGroupError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelPackageGroupError {
                        kind: crate::error::CreateModelPackageGroupErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateModelPackageGroupError::unhandled(e),
                },
                _ => crate::error::CreateModelPackageGroupError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_model_package_group_output::Builder::default();
        builder = crate::json_deser::create_model_package_group_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateModelPackageGroupError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateModelPackageGroup {
    type Output = Result<
        crate::output::CreateModelPackageGroupOutput,
        crate::error::CreateModelPackageGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a definition for a job that monitors model quality and drift. For information
/// about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelQualityJobDefinition {
    _private: (),
}
impl CreateModelQualityJobDefinition {
    /// Creates a new builder-style object to manufacture [`CreateModelQualityJobDefinitionInput`](crate::input::CreateModelQualityJobDefinitionInput)
    pub fn builder() -> crate::input::create_model_quality_job_definition_input::Builder {
        crate::input::create_model_quality_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateModelQualityJobDefinitionOutput,
        crate::error::CreateModelQualityJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::CreateModelQualityJobDefinitionError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelQualityJobDefinitionError { kind: crate::error::CreateModelQualityJobDefinitionErrorKind::ResourceInUse(body), meta: generic },
                    Err(e) => crate::error::CreateModelQualityJobDefinitionError::unhandled(e)
                }
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateModelQualityJobDefinitionError { kind: crate::error::CreateModelQualityJobDefinitionErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::CreateModelQualityJobDefinitionError::unhandled(e)
                }
                _ => crate::error::CreateModelQualityJobDefinitionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::create_model_quality_job_definition_output::Builder::default();
        builder = crate::json_deser::create_model_quality_job_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateModelQualityJobDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateModelQualityJobDefinition {
    type Output = Result<
        crate::output::CreateModelQualityJobDefinitionOutput,
        crate::error::CreateModelQualityJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data
/// captured for an Amazon SageMaker Endoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMonitoringSchedule {
    _private: (),
}
impl CreateMonitoringSchedule {
    /// Creates a new builder-style object to manufacture [`CreateMonitoringScheduleInput`](crate::input::CreateMonitoringScheduleInput)
    pub fn builder() -> crate::input::create_monitoring_schedule_input::Builder {
        crate::input::create_monitoring_schedule_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateMonitoringScheduleOutput,
        crate::error::CreateMonitoringScheduleError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::CreateMonitoringScheduleError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateMonitoringScheduleError {
                        kind: crate::error::CreateMonitoringScheduleErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateMonitoringScheduleError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateMonitoringScheduleError {
                        kind:
                            crate::error::CreateMonitoringScheduleErrorKind::ResourceLimitExceeded(
                                body,
                            ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateMonitoringScheduleError::unhandled(e),
                },
                _ => crate::error::CreateMonitoringScheduleError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_monitoring_schedule_output::Builder::default();
        builder = crate::json_deser::create_monitoring_schedule_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateMonitoringScheduleError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMonitoringSchedule {
    type Output = Result<
        crate::output::CreateMonitoringScheduleOutput,
        crate::error::CreateMonitoringScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates an Amazon SageMaker notebook instance. A notebook instance is a machine learning (ML)
/// compute instance running on a Jupyter notebook. </p>
/// <p>In a <code>CreateNotebookInstance</code> request, specify the type of ML compute
/// instance that you want to run. Amazon SageMaker launches the instance, installs common libraries
/// that you can use to explore datasets for model training, and attaches an ML storage
/// volume to the notebook instance. </p>
/// <p>Amazon SageMaker also provides a set of example notebooks. Each notebook demonstrates how to
/// use Amazon SageMaker with a specific algorithm or with a machine learning framework. </p>
/// <p>After receiving the request, Amazon SageMaker does the following:</p>
/// <ol>
/// <li>
/// <p>Creates a network interface in the Amazon SageMaker VPC.</p>
/// </li>
/// <li>
/// <p>(Option) If you specified <code>SubnetId</code>, Amazon SageMaker creates a network
/// interface in your own VPC, which is inferred from the subnet ID that you provide
/// in the input. When creating this network interface, Amazon SageMaker attaches the security
/// group that you specified in the request to the network interface that it creates
/// in your VPC.</p>
/// </li>
/// <li>
/// <p>Launches an EC2 instance of the type specified in the request in the Amazon SageMaker
/// VPC. If you specified <code>SubnetId</code> of your VPC, Amazon SageMaker specifies both
/// network interfaces when launching this instance. This enables inbound traffic
/// from your own VPC to the notebook instance, assuming that the security groups
/// allow it.</p>
/// </li>
/// </ol>
/// <p>After creating the notebook instance, Amazon SageMaker returns its Amazon Resource Name (ARN).
/// You can't change the name of a notebook instance after you create it.</p>
/// <p>After Amazon SageMaker creates the notebook instance, you can connect to the Jupyter server and
/// work in Jupyter notebooks. For example, you can write code to explore a dataset that you
/// can use for model training, train a model, host models by creating Amazon SageMaker endpoints, and
/// validate hosted models. </p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateNotebookInstance {
    _private: (),
}
impl CreateNotebookInstance {
    /// Creates a new builder-style object to manufacture [`CreateNotebookInstanceInput`](crate::input::CreateNotebookInstanceInput)
    pub fn builder() -> crate::input::create_notebook_instance_input::Builder {
        crate::input::create_notebook_instance_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateNotebookInstanceOutput,
        crate::error::CreateNotebookInstanceError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::CreateNotebookInstanceError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateNotebookInstanceError {
                        kind: crate::error::CreateNotebookInstanceErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateNotebookInstanceError::unhandled(e),
                },
                _ => crate::error::CreateNotebookInstanceError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_notebook_instance_output::Builder::default();
        builder = crate::json_deser::create_notebook_instance_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateNotebookInstanceError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateNotebookInstance {
    type Output = Result<
        crate::output::CreateNotebookInstanceOutput,
        crate::error::CreateNotebookInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a lifecycle configuration that you can associate with a notebook instance. A
/// <i>lifecycle configuration</i> is a collection of shell scripts that
/// run when you create or start a notebook instance.</p>
/// <p>Each lifecycle configuration script has a limit of 16384 characters.</p>
/// <p>The value of the <code>$PATH</code> environment variable that is available to both
/// scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p>
/// <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group
/// <code>/aws/sagemaker/NotebookInstances</code> in log stream
/// <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p>
/// <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs
/// for longer than 5 minutes, it fails and the notebook instance is not created or
/// started.</p>
/// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
/// 2.1: (Optional) Customize a Notebook Instance</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateNotebookInstanceLifecycleConfig {
    _private: (),
}
impl CreateNotebookInstanceLifecycleConfig {
    /// Creates a new builder-style object to manufacture [`CreateNotebookInstanceLifecycleConfigInput`](crate::input::CreateNotebookInstanceLifecycleConfigInput)
    pub fn builder() -> crate::input::create_notebook_instance_lifecycle_config_input::Builder {
        crate::input::create_notebook_instance_lifecycle_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreateNotebookInstanceLifecycleConfigOutput,
        crate::error::CreateNotebookInstanceLifecycleConfigError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::CreateNotebookInstanceLifecycleConfigError::unhandled(
                            generic,
                        ),
                    )
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateNotebookInstanceLifecycleConfigError { kind: crate::error::CreateNotebookInstanceLifecycleConfigErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::CreateNotebookInstanceLifecycleConfigError::unhandled(e)
                }
                _ => crate::error::CreateNotebookInstanceLifecycleConfigError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::create_notebook_instance_lifecycle_config_output::Builder::default();
        builder = crate::json_deser::create_notebook_instance_lifecycle_config_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateNotebookInstanceLifecycleConfigError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateNotebookInstanceLifecycleConfig {
    type Output = Result<
        crate::output::CreateNotebookInstanceLifecycleConfigOutput,
        crate::error::CreateNotebookInstanceLifecycleConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a pipeline using a JSON pipeline definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePipeline {
    _private: (),
}
impl CreatePipeline {
    /// Creates a new builder-style object to manufacture [`CreatePipelineInput`](crate::input::CreatePipelineInput)
    pub fn builder() -> crate::input::create_pipeline_input::Builder {
        crate::input::create_pipeline_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreatePipelineOutput, crate::error::CreatePipelineError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreatePipelineError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreatePipelineError {
                        kind: crate::error::CreatePipelineErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreatePipelineError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreatePipelineError {
                        kind: crate::error::CreatePipelineErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreatePipelineError::unhandled(e),
                },
                _ => crate::error::CreatePipelineError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_pipeline_output::Builder::default();
        builder =
            crate::json_deser::create_pipeline_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreatePipelineError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePipeline {
    type Output = Result<crate::output::CreatePipelineOutput, crate::error::CreatePipelineError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a URL for a specified UserProfile in a Domain.  When accessed in a web browser,
/// the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of
/// the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume.
/// This operation can only be called when the authentication mode equals IAM.
/// </p>
/// <note>
/// <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you
/// are directed to the AWS console sign-in page.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePresignedDomainUrl {
    _private: (),
}
impl CreatePresignedDomainUrl {
    /// Creates a new builder-style object to manufacture [`CreatePresignedDomainUrlInput`](crate::input::CreatePresignedDomainUrlInput)
    pub fn builder() -> crate::input::create_presigned_domain_url_input::Builder {
        crate::input::create_presigned_domain_url_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreatePresignedDomainUrlOutput,
        crate::error::CreatePresignedDomainUrlError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::CreatePresignedDomainUrlError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreatePresignedDomainUrlError {
                        kind: crate::error::CreatePresignedDomainUrlErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreatePresignedDomainUrlError::unhandled(e),
                },
                _ => crate::error::CreatePresignedDomainUrlError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_presigned_domain_url_output::Builder::default();
        builder = crate::json_deser::create_presigned_domain_url_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreatePresignedDomainUrlError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePresignedDomainUrl {
    type Output = Result<
        crate::output::CreatePresignedDomainUrlOutput,
        crate::error::CreatePresignedDomainUrlError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a URL that you can use to connect to the Jupyter server from a notebook
/// instance. In the Amazon SageMaker console, when you choose <code>Open</code> next to a notebook
/// instance, Amazon SageMaker opens a new tab showing the Jupyter server home page from the notebook
/// instance. The console uses this API to get the URL and show the page.</p>
/// <p> The IAM role or user used to call this API defines the permissions to access the
/// notebook instance. Once the presigned URL is created, no additional permission is
/// required to access this URL. IAM authorization policies for this API are also enforced
/// for every HTTP request and WebSocket frame that attempts to connect to the notebook
/// instance.</p>
/// <p>You can restrict access to this API and to the URL that it returns to a list of IP
/// addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the
/// <code>aws:SourceIP</code> condition context key to specify the list of IP addresses
/// that you want to have access to the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit Access to a Notebook Instance by IP Address</a>.</p>
/// <note>
/// <p>The URL that you get from a call to <a>CreatePresignedNotebookInstanceUrl</a> is valid only for 5 minutes. If
/// you try to use the URL after the 5-minute limit expires, you are directed to the
/// AWS console sign-in page.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePresignedNotebookInstanceUrl {
    _private: (),
}
impl CreatePresignedNotebookInstanceUrl {
    /// Creates a new builder-style object to manufacture [`CreatePresignedNotebookInstanceUrlInput`](crate::input::CreatePresignedNotebookInstanceUrlInput)
    pub fn builder() -> crate::input::create_presigned_notebook_instance_url_input::Builder {
        crate::input::create_presigned_notebook_instance_url_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::CreatePresignedNotebookInstanceUrlOutput,
        crate::error::CreatePresignedNotebookInstanceUrlError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::CreatePresignedNotebookInstanceUrlError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::create_presigned_notebook_instance_url_output::Builder::default();
        builder = crate::json_deser::create_presigned_notebook_instance_url_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreatePresignedNotebookInstanceUrlError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePresignedNotebookInstanceUrl {
    type Output = Result<
        crate::output::CreatePresignedNotebookInstanceUrlOutput,
        crate::error::CreatePresignedNotebookInstanceUrlError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a processing job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProcessingJob {
    _private: (),
}
impl CreateProcessingJob {
    /// Creates a new builder-style object to manufacture [`CreateProcessingJobInput`](crate::input::CreateProcessingJobInput)
    pub fn builder() -> crate::input::create_processing_job_input::Builder {
        crate::input::create_processing_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateProcessingJobOutput, crate::error::CreateProcessingJobError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateProcessingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateProcessingJobError {
                        kind: crate::error::CreateProcessingJobErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateProcessingJobError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateProcessingJobError {
                        kind: crate::error::CreateProcessingJobErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateProcessingJobError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateProcessingJobError {
                        kind: crate::error::CreateProcessingJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateProcessingJobError::unhandled(e),
                },
                _ => crate::error::CreateProcessingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_processing_job_output::Builder::default();
        builder = crate::json_deser::create_processing_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateProcessingJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProcessingJob {
    type Output =
        Result<crate::output::CreateProcessingJobOutput, crate::error::CreateProcessingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a machine learning (ML) project that can contain one or more templates that set
/// up an ML pipeline from training to deploying an approved model.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProject {
    _private: (),
}
impl CreateProject {
    /// Creates a new builder-style object to manufacture [`CreateProjectInput`](crate::input::CreateProjectInput)
    pub fn builder() -> crate::input::create_project_input::Builder {
        crate::input::create_project_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateProjectOutput, crate::error::CreateProjectError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateProjectError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateProjectError {
                        kind: crate::error::CreateProjectErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateProjectError::unhandled(e),
                },
                _ => crate::error::CreateProjectError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_project_output::Builder::default();
        builder =
            crate::json_deser::create_project_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateProjectError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProject {
    type Output = Result<crate::output::CreateProjectOutput, crate::error::CreateProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Starts a model training job. After training completes, Amazon SageMaker saves the resulting
/// model artifacts to an Amazon S3 location that you specify. </p>
/// <p>If you choose to host your model using Amazon SageMaker hosting services, you can use the
/// resulting model artifacts as part of the model. You can also use the artifacts in a
/// machine learning service other than Amazon SageMaker, provided that you know how to use them for
/// inference.
/// </p>
/// <p>In the request body, you provide the following: </p>
/// <ul>
/// <li>
/// <p>
/// <code>AlgorithmSpecification</code> - Identifies the training algorithm to
/// use.
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>HyperParameters</code> - Specify these algorithm-specific parameters to
/// enable the estimation of model parameters during training. Hyperparameters can
/// be tuned to optimize this learning process. For a list of hyperparameters for
/// each training algorithm provided by Amazon SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p>
/// </li>
/// <li>
/// <p>
/// <code>InputDataConfig</code> - Describes the training dataset and the Amazon S3,
/// EFS, or FSx location where it is stored.</p>
/// </li>
/// <li>
/// <p>
/// <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you want
/// Amazon SageMaker to save the results of model training. </p>
/// </li>
/// <li>
/// <p>
/// <code>ResourceConfig</code> - Identifies the resources, ML compute
/// instances, and ML storage volumes to deploy for model training. In distributed
/// training, you specify more than one instance. </p>
/// </li>
/// <li>
/// <p>
/// <code>EnableManagedSpotTraining</code> - Optimize the cost of training machine
/// learning models by up to 80% by using Amazon EC2 Spot instances. For more
/// information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot
/// Training</a>. </p>
/// </li>
/// <li>
/// <p>
/// <code>RoleArn</code> - The Amazon Resource Name (ARN) that Amazon SageMaker assumes to perform tasks on
/// your behalf during model training.
/// You must grant this role the necessary permissions so that Amazon SageMaker can successfully
/// complete model training. </p>
/// </li>
/// <li>
/// <p>
/// <code>StoppingCondition</code> - To help cap training costs, use
/// <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use
/// <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot
/// training job has to complete. </p>
/// </li>
/// <li>
/// <p>
/// <code>Environment</code> - The environment variables to set in the Docker
/// container.</p>
/// </li>
/// <li>
/// <p>
/// <code>RetryStrategy</code> - The number of times to retry the job when the job
/// fails due to an <code>InternalServerError</code>.</p>
/// </li>
/// </ul>
/// <p> For more information about Amazon SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrainingJob {
    _private: (),
}
impl CreateTrainingJob {
    /// Creates a new builder-style object to manufacture [`CreateTrainingJobInput`](crate::input::CreateTrainingJobInput)
    pub fn builder() -> crate::input::create_training_job_input::Builder {
        crate::input::create_training_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateTrainingJobOutput, crate::error::CreateTrainingJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateTrainingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateTrainingJobError {
                        kind: crate::error::CreateTrainingJobErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateTrainingJobError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateTrainingJobError {
                        kind: crate::error::CreateTrainingJobErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateTrainingJobError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateTrainingJobError {
                        kind: crate::error::CreateTrainingJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateTrainingJobError::unhandled(e),
                },
                _ => crate::error::CreateTrainingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_training_job_output::Builder::default();
        builder = crate::json_deser::create_training_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateTrainingJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTrainingJob {
    type Output =
        Result<crate::output::CreateTrainingJobOutput, crate::error::CreateTrainingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Starts a transform job. A transform job uses a trained model to get inferences on a
/// dataset and saves these results to an Amazon S3 location that you specify.</p>
/// <p>To perform batch transformations, you create a transform job and use the data that you
/// have readily available.</p>
/// <p>In the request body, you provide the following:</p>
/// <ul>
/// <li>
/// <p>
/// <code>TransformJobName</code> - Identifies the transform job. The name must be
/// unique within an AWS Region in an AWS account.</p>
/// </li>
/// <li>
/// <p>
/// <code>ModelName</code> - Identifies the model to use. <code>ModelName</code>
/// must be the name of an existing Amazon SageMaker model in the same AWS Region and AWS
/// account. For information on creating a model, see <a>CreateModel</a>.</p>
/// </li>
/// <li>
/// <p>
/// <code>TransformInput</code> - Describes the dataset to be transformed and the
/// Amazon S3 location where it is stored.</p>
/// </li>
/// <li>
/// <p>
/// <code>TransformOutput</code> - Identifies the Amazon S3 location where you want
/// Amazon SageMaker to save the results from the transform job.</p>
/// </li>
/// <li>
/// <p>
/// <code>TransformResources</code> - Identifies the ML compute instances for the
/// transform job.</p>
/// </li>
/// </ul>
/// <p>For more information about how batch transformation works, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch
/// Transform</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransformJob {
    _private: (),
}
impl CreateTransformJob {
    /// Creates a new builder-style object to manufacture [`CreateTransformJobInput`](crate::input::CreateTransformJobInput)
    pub fn builder() -> crate::input::create_transform_job_input::Builder {
        crate::input::create_transform_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateTransformJobOutput, crate::error::CreateTransformJobError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateTransformJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateTransformJobError {
                        kind: crate::error::CreateTransformJobErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateTransformJobError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateTransformJobError {
                        kind: crate::error::CreateTransformJobErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateTransformJobError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateTransformJobError {
                        kind: crate::error::CreateTransformJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateTransformJobError::unhandled(e),
                },
                _ => crate::error::CreateTransformJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_transform_job_output::Builder::default();
        builder = crate::json_deser::create_transform_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateTransformJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransformJob {
    type Output =
        Result<crate::output::CreateTransformJobOutput, crate::error::CreateTransformJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates an SageMaker <i>trial</i>. A trial is a set of steps called
/// <i>trial components</i> that produce a machine learning model. A trial is part
/// of a single SageMaker <i>experiment</i>.</p>
/// <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
/// components are automatically tracked, logged, and indexed. When you use the AWS SDK for Python (Boto), you
/// must use the logging APIs provided by the SDK.</p>
/// <p>You can add tags to a trial and then use the <a>Search</a> API to search for
/// the tags.</p>
/// <p>To get a list of all your trials, call the <a>ListTrials</a> API. To view a
/// trial's properties, call the <a>DescribeTrial</a> API. To create a trial component,
/// call the <a>CreateTrialComponent</a> API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrial {
    _private: (),
}
impl CreateTrial {
    /// Creates a new builder-style object to manufacture [`CreateTrialInput`](crate::input::CreateTrialInput)
    pub fn builder() -> crate::input::create_trial_input::Builder {
        crate::input::create_trial_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateTrialOutput, crate::error::CreateTrialError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateTrialError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateTrialError {
                        kind: crate::error::CreateTrialErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateTrialError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateTrialError {
                        kind: crate::error::CreateTrialErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateTrialError::unhandled(e),
                },
                _ => crate::error::CreateTrialError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_trial_output::Builder::default();
        builder =
            crate::json_deser::create_trial_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateTrialError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTrial {
    type Output = Result<crate::output::CreateTrialOutput, crate::error::CreateTrialError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a <i>trial component</i>, which is a stage of a machine learning
/// <i>trial</i>. A trial is composed of one or more trial components. A trial
/// component can be used in multiple trials.</p>
/// <p>Trial components include pre-processing jobs, training jobs, and batch transform
/// jobs.</p>
/// <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
/// components are automatically tracked, logged, and indexed. When you use the AWS SDK for Python (Boto), you
/// must use the logging APIs provided by the SDK.</p>
/// <p>You can add tags to a trial component and then use the <a>Search</a> API to
/// search for the tags.</p>
/// <note>
/// <p>
/// <code>CreateTrialComponent</code> can only be invoked from within an SageMaker managed
/// environment. This includes SageMaker training jobs, processing jobs, transform jobs, and SageMaker
/// notebooks. A call to <code>CreateTrialComponent</code> from outside one of these
/// environments results in an error.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrialComponent {
    _private: (),
}
impl CreateTrialComponent {
    /// Creates a new builder-style object to manufacture [`CreateTrialComponentInput`](crate::input::CreateTrialComponentInput)
    pub fn builder() -> crate::input::create_trial_component_input::Builder {
        crate::input::create_trial_component_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateTrialComponentOutput, crate::error::CreateTrialComponentError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateTrialComponentError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateTrialComponentError {
                        kind: crate::error::CreateTrialComponentErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateTrialComponentError::unhandled(e),
                },
                _ => crate::error::CreateTrialComponentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_trial_component_output::Builder::default();
        builder = crate::json_deser::create_trial_component_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateTrialComponentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTrialComponent {
    type Output =
        Result<crate::output::CreateTrialComponentOutput, crate::error::CreateTrialComponentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a user profile. A user profile represents a single user within a domain, and is
/// the main way to reference a "person" for the purposes of sharing, reporting, and other
/// user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an
/// administrator invites a person by email or imports them from SSO, a user profile is
/// automatically created. A user profile is the primary holder of settings for an individual
/// user and has a reference to the user's private Amazon Elastic File System (EFS) home directory.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateUserProfile {
    _private: (),
}
impl CreateUserProfile {
    /// Creates a new builder-style object to manufacture [`CreateUserProfileInput`](crate::input::CreateUserProfileInput)
    pub fn builder() -> crate::input::create_user_profile_input::Builder {
        crate::input::create_user_profile_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateUserProfileOutput, crate::error::CreateUserProfileError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateUserProfileError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateUserProfileError {
                        kind: crate::error::CreateUserProfileErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateUserProfileError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateUserProfileError {
                        kind: crate::error::CreateUserProfileErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateUserProfileError::unhandled(e),
                },
                _ => crate::error::CreateUserProfileError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_user_profile_output::Builder::default();
        builder = crate::json_deser::create_user_profile_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::CreateUserProfileError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateUserProfile {
    type Output =
        Result<crate::output::CreateUserProfileOutput, crate::error::CreateUserProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Use this operation to create a workforce. This operation will return an error
/// if a workforce already exists in the AWS Region that you specify. You can only
/// create one workforce in each AWS Region per AWS account.</p>
/// <p>If you want to create a new workforce in an AWS Region where
/// a workforce already exists, use the  API
/// operation to delete the existing workforce and then use <code>CreateWorkforce</code>
/// to create a new workforce.</p>
/// <p>To create a private workforce using Amazon Cognito, you must specify a Cognito user pool
/// in <code>CognitoConfig</code>.
/// You can also create an Amazon Cognito workforce using the Amazon SageMaker console.
/// For more information, see
/// <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">
/// Create a Private Workforce (Amazon Cognito)</a>.</p>
/// <p>To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP
/// configuration in <code>OidcConfig</code>. Your OIDC IdP must support <i>groups</i>
/// because groups are used by Ground Truth and Amazon A2I to create work teams.
/// For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html">
/// Create a Private Workforce (OIDC IdP)</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkforce {
    _private: (),
}
impl CreateWorkforce {
    /// Creates a new builder-style object to manufacture [`CreateWorkforceInput`](crate::input::CreateWorkforceInput)
    pub fn builder() -> crate::input::create_workforce_input::Builder {
        crate::input::create_workforce_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateWorkforceOutput, crate::error::CreateWorkforceError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::CreateWorkforceError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_workforce_output::Builder::default();
        builder =
            crate::json_deser::create_workforce_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateWorkforceError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateWorkforce {
    type Output = Result<crate::output::CreateWorkforceOutput, crate::error::CreateWorkforceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Creates a new work team for labeling your data. A work team is defined by one or more
/// Amazon Cognito user pools. You must first create the user pools before you can create a work
/// team.</p>
/// <p>You cannot create more than 25 work teams in an account and region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkteam {
    _private: (),
}
impl CreateWorkteam {
    /// Creates a new builder-style object to manufacture [`CreateWorkteamInput`](crate::input::CreateWorkteamInput)
    pub fn builder() -> crate::input::create_workteam_input::Builder {
        crate::input::create_workteam_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::CreateWorkteamOutput, crate::error::CreateWorkteamError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::CreateWorkteamError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateWorkteamError {
                        kind: crate::error::CreateWorkteamErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateWorkteamError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::CreateWorkteamError {
                        kind: crate::error::CreateWorkteamErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::CreateWorkteamError::unhandled(e),
                },
                _ => crate::error::CreateWorkteamError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::create_workteam_output::Builder::default();
        builder =
            crate::json_deser::create_workteam_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::CreateWorkteamError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateWorkteam {
    type Output = Result<crate::output::CreateWorkteamOutput, crate::error::CreateWorkteamError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAction {
    _private: (),
}
impl DeleteAction {
    /// Creates a new builder-style object to manufacture [`DeleteActionInput`](crate::input::DeleteActionInput)
    pub fn builder() -> crate::input::delete_action_input::Builder {
        crate::input::delete_action_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteActionOutput, crate::error::DeleteActionError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteActionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteActionError {
                        kind: crate::error::DeleteActionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteActionError::unhandled(e),
                },
                _ => crate::error::DeleteActionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_action_output::Builder::default();
        builder =
            crate::json_deser::delete_action_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DeleteActionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAction {
    type Output = Result<crate::output::DeleteActionOutput, crate::error::DeleteActionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Removes the specified algorithm from your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAlgorithm {
    _private: (),
}
impl DeleteAlgorithm {
    /// Creates a new builder-style object to manufacture [`DeleteAlgorithmInput`](crate::input::DeleteAlgorithmInput)
    pub fn builder() -> crate::input::delete_algorithm_input::Builder {
        crate::input::delete_algorithm_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteAlgorithmOutput, crate::error::DeleteAlgorithmError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteAlgorithmError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_algorithm_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAlgorithm {
    type Output = Result<crate::output::DeleteAlgorithmOutput, crate::error::DeleteAlgorithmError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Used to stop and delete an app.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteApp {
    _private: (),
}
impl DeleteApp {
    /// Creates a new builder-style object to manufacture [`DeleteAppInput`](crate::input::DeleteAppInput)
    pub fn builder() -> crate::input::delete_app_input::Builder {
        crate::input::delete_app_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteAppOutput, crate::error::DeleteAppError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteAppError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteAppError {
                        kind: crate::error::DeleteAppErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteAppError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteAppError {
                        kind: crate::error::DeleteAppErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteAppError::unhandled(e),
                },
                _ => crate::error::DeleteAppError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_app_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteApp {
    type Output = Result<crate::output::DeleteAppOutput, crate::error::DeleteAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an AppImageConfig.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAppImageConfig {
    _private: (),
}
impl DeleteAppImageConfig {
    /// Creates a new builder-style object to manufacture [`DeleteAppImageConfigInput`](crate::input::DeleteAppImageConfigInput)
    pub fn builder() -> crate::input::delete_app_image_config_input::Builder {
        crate::input::delete_app_image_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteAppImageConfigOutput, crate::error::DeleteAppImageConfigError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteAppImageConfigError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteAppImageConfigError {
                        kind: crate::error::DeleteAppImageConfigErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteAppImageConfigError::unhandled(e),
                },
                _ => crate::error::DeleteAppImageConfigError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_app_image_config_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAppImageConfig {
    type Output =
        Result<crate::output::DeleteAppImageConfigOutput, crate::error::DeleteAppImageConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an artifact. Either <code>ArtifactArn</code> or <code>Source</code> must be
/// specified.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteArtifact {
    _private: (),
}
impl DeleteArtifact {
    /// Creates a new builder-style object to manufacture [`DeleteArtifactInput`](crate::input::DeleteArtifactInput)
    pub fn builder() -> crate::input::delete_artifact_input::Builder {
        crate::input::delete_artifact_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteArtifactOutput, crate::error::DeleteArtifactError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteArtifactError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteArtifactError {
                        kind: crate::error::DeleteArtifactErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteArtifactError::unhandled(e),
                },
                _ => crate::error::DeleteArtifactError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_artifact_output::Builder::default();
        builder =
            crate::json_deser::delete_artifact_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DeleteArtifactError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteArtifact {
    type Output = Result<crate::output::DeleteArtifactOutput, crate::error::DeleteArtifactError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an association.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAssociation {
    _private: (),
}
impl DeleteAssociation {
    /// Creates a new builder-style object to manufacture [`DeleteAssociationInput`](crate::input::DeleteAssociationInput)
    pub fn builder() -> crate::input::delete_association_input::Builder {
        crate::input::delete_association_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteAssociationOutput, crate::error::DeleteAssociationError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteAssociationError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteAssociationError {
                        kind: crate::error::DeleteAssociationErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteAssociationError::unhandled(e),
                },
                _ => crate::error::DeleteAssociationError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_association_output::Builder::default();
        builder = crate::json_deser::delete_association_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DeleteAssociationError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAssociation {
    type Output =
        Result<crate::output::DeleteAssociationOutput, crate::error::DeleteAssociationError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes the specified Git repository from your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCodeRepository {
    _private: (),
}
impl DeleteCodeRepository {
    /// Creates a new builder-style object to manufacture [`DeleteCodeRepositoryInput`](crate::input::DeleteCodeRepositoryInput)
    pub fn builder() -> crate::input::delete_code_repository_input::Builder {
        crate::input::delete_code_repository_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteCodeRepositoryOutput, crate::error::DeleteCodeRepositoryError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteCodeRepositoryError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_code_repository_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteCodeRepository {
    type Output =
        Result<crate::output::DeleteCodeRepositoryOutput, crate::error::DeleteCodeRepositoryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an context.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteContext {
    _private: (),
}
impl DeleteContext {
    /// Creates a new builder-style object to manufacture [`DeleteContextInput`](crate::input::DeleteContextInput)
    pub fn builder() -> crate::input::delete_context_input::Builder {
        crate::input::delete_context_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteContextOutput, crate::error::DeleteContextError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteContextError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteContextError {
                        kind: crate::error::DeleteContextErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteContextError::unhandled(e),
                },
                _ => crate::error::DeleteContextError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_context_output::Builder::default();
        builder =
            crate::json_deser::delete_context_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DeleteContextError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteContext {
    type Output = Result<crate::output::DeleteContextOutput, crate::error::DeleteContextError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a data quality monitoring job definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDataQualityJobDefinition {
    _private: (),
}
impl DeleteDataQualityJobDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteDataQualityJobDefinitionInput`](crate::input::DeleteDataQualityJobDefinitionInput)
    pub fn builder() -> crate::input::delete_data_quality_job_definition_input::Builder {
        crate::input::delete_data_quality_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DeleteDataQualityJobDefinitionOutput,
        crate::error::DeleteDataQualityJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::DeleteDataQualityJobDefinitionError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteDataQualityJobDefinitionError {
                        kind:
                            crate::error::DeleteDataQualityJobDefinitionErrorKind::ResourceNotFound(
                                body,
                            ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteDataQualityJobDefinitionError::unhandled(e),
                },
                _ => crate::error::DeleteDataQualityJobDefinitionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::delete_data_quality_job_definition_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDataQualityJobDefinition {
    type Output = Result<
        crate::output::DeleteDataQualityJobDefinitionOutput,
        crate::error::DeleteDataQualityJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a fleet.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDeviceFleet {
    _private: (),
}
impl DeleteDeviceFleet {
    /// Creates a new builder-style object to manufacture [`DeleteDeviceFleetInput`](crate::input::DeleteDeviceFleetInput)
    pub fn builder() -> crate::input::delete_device_fleet_input::Builder {
        crate::input::delete_device_fleet_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteDeviceFleetOutput, crate::error::DeleteDeviceFleetError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteDeviceFleetError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteDeviceFleetError {
                        kind: crate::error::DeleteDeviceFleetErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteDeviceFleetError::unhandled(e),
                },
                _ => crate::error::DeleteDeviceFleetError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_device_fleet_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDeviceFleet {
    type Output =
        Result<crate::output::DeleteDeviceFleetOutput, crate::error::DeleteDeviceFleetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Used to delete a domain.
/// If you onboarded with IAM mode, you will need to delete your domain to onboard again using SSO.
/// Use with caution. All of the members of the domain will lose access to their EFS volume,
/// including data, notebooks, and other artifacts.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDomain {
    _private: (),
}
impl DeleteDomain {
    /// Creates a new builder-style object to manufacture [`DeleteDomainInput`](crate::input::DeleteDomainInput)
    pub fn builder() -> crate::input::delete_domain_input::Builder {
        crate::input::delete_domain_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteDomainOutput, crate::error::DeleteDomainError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteDomainError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteDomainError {
                        kind: crate::error::DeleteDomainErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteDomainError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteDomainError {
                        kind: crate::error::DeleteDomainErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteDomainError::unhandled(e),
                },
                _ => crate::error::DeleteDomainError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_domain_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDomain {
    type Output = Result<crate::output::DeleteDomainOutput, crate::error::DeleteDomainError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an endpoint. Amazon SageMaker frees up all of the resources that were deployed when the
/// endpoint was created. </p>
/// <p>Amazon SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't
/// need to use the <a href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a> API call.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEndpoint {
    _private: (),
}
impl DeleteEndpoint {
    /// Creates a new builder-style object to manufacture [`DeleteEndpointInput`](crate::input::DeleteEndpointInput)
    pub fn builder() -> crate::input::delete_endpoint_input::Builder {
        crate::input::delete_endpoint_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteEndpointOutput, crate::error::DeleteEndpointError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteEndpointError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_endpoint_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEndpoint {
    type Output = Result<crate::output::DeleteEndpointOutput, crate::error::DeleteEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API
/// deletes only the specified configuration. It does not delete endpoints created using the
/// configuration. </p>
/// <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is
/// live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations
/// are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an
/// endpoint that is active or being created or updated you may lose visibility into the
/// instance type the endpoint is using. The endpoint must be deleted in order to stop
/// incurring charges.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEndpointConfig {
    _private: (),
}
impl DeleteEndpointConfig {
    /// Creates a new builder-style object to manufacture [`DeleteEndpointConfigInput`](crate::input::DeleteEndpointConfigInput)
    pub fn builder() -> crate::input::delete_endpoint_config_input::Builder {
        crate::input::delete_endpoint_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteEndpointConfigOutput, crate::error::DeleteEndpointConfigError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteEndpointConfigError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_endpoint_config_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEndpointConfig {
    type Output =
        Result<crate::output::DeleteEndpointConfigOutput, crate::error::DeleteEndpointConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an SageMaker experiment. All trials associated with the experiment must be deleted
/// first. Use the <a>ListTrials</a> API to get a list of the trials associated with
/// the experiment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteExperiment {
    _private: (),
}
impl DeleteExperiment {
    /// Creates a new builder-style object to manufacture [`DeleteExperimentInput`](crate::input::DeleteExperimentInput)
    pub fn builder() -> crate::input::delete_experiment_input::Builder {
        crate::input::delete_experiment_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteExperimentOutput, crate::error::DeleteExperimentError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteExperimentError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteExperimentError {
                        kind: crate::error::DeleteExperimentErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteExperimentError::unhandled(e),
                },
                _ => crate::error::DeleteExperimentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_experiment_output::Builder::default();
        builder =
            crate::json_deser::delete_experiment_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DeleteExperimentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteExperiment {
    type Output =
        Result<crate::output::DeleteExperimentOutput, crate::error::DeleteExperimentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Delete the <code>FeatureGroup</code> and any data that was written to the
/// <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be accessed from
/// the <code>OnlineStore</code> immediately after <code>DeleteFeatureGroup</code> is called. </p>
/// <p>Data written into the <code>OfflineStore</code> will not be deleted. The AWS Glue
/// database and tables that are automatically created for your <code>OfflineStore</code> are
/// not deleted. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFeatureGroup {
    _private: (),
}
impl DeleteFeatureGroup {
    /// Creates a new builder-style object to manufacture [`DeleteFeatureGroupInput`](crate::input::DeleteFeatureGroupInput)
    pub fn builder() -> crate::input::delete_feature_group_input::Builder {
        crate::input::delete_feature_group_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteFeatureGroupOutput, crate::error::DeleteFeatureGroupError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteFeatureGroupError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteFeatureGroupError {
                        kind: crate::error::DeleteFeatureGroupErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteFeatureGroupError::unhandled(e),
                },
                _ => crate::error::DeleteFeatureGroupError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_feature_group_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteFeatureGroup {
    type Output =
        Result<crate::output::DeleteFeatureGroupOutput, crate::error::DeleteFeatureGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes the specified flow definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFlowDefinition {
    _private: (),
}
impl DeleteFlowDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteFlowDefinitionInput`](crate::input::DeleteFlowDefinitionInput)
    pub fn builder() -> crate::input::delete_flow_definition_input::Builder {
        crate::input::delete_flow_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteFlowDefinitionOutput, crate::error::DeleteFlowDefinitionError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteFlowDefinitionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteFlowDefinitionError {
                        kind: crate::error::DeleteFlowDefinitionErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteFlowDefinitionError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteFlowDefinitionError {
                        kind: crate::error::DeleteFlowDefinitionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteFlowDefinitionError::unhandled(e),
                },
                _ => crate::error::DeleteFlowDefinitionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_flow_definition_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteFlowDefinition {
    type Output =
        Result<crate::output::DeleteFlowDefinitionOutput, crate::error::DeleteFlowDefinitionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Use this operation to delete a human task user interface (worker task template).</p>
/// <p>
/// To see a list of human task user interfaces
/// (work task templates) in your account, use .
/// When you delete a worker task template, it no longer appears when you call <code>ListHumanTaskUis</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteHumanTaskUi {
    _private: (),
}
impl DeleteHumanTaskUi {
    /// Creates a new builder-style object to manufacture [`DeleteHumanTaskUiInput`](crate::input::DeleteHumanTaskUiInput)
    pub fn builder() -> crate::input::delete_human_task_ui_input::Builder {
        crate::input::delete_human_task_ui_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteHumanTaskUiOutput, crate::error::DeleteHumanTaskUiError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteHumanTaskUiError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteHumanTaskUiError {
                        kind: crate::error::DeleteHumanTaskUiErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteHumanTaskUiError::unhandled(e),
                },
                _ => crate::error::DeleteHumanTaskUiError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_human_task_ui_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteHumanTaskUi {
    type Output =
        Result<crate::output::DeleteHumanTaskUiOutput, crate::error::DeleteHumanTaskUiError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a SageMaker image and all versions of the image. The container images aren't
/// deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteImage {
    _private: (),
}
impl DeleteImage {
    /// Creates a new builder-style object to manufacture [`DeleteImageInput`](crate::input::DeleteImageInput)
    pub fn builder() -> crate::input::delete_image_input::Builder {
        crate::input::delete_image_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteImageOutput, crate::error::DeleteImageError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteImageError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteImageError {
                        kind: crate::error::DeleteImageErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteImageError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteImageError {
                        kind: crate::error::DeleteImageErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteImageError::unhandled(e),
                },
                _ => crate::error::DeleteImageError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_image_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteImage {
    type Output = Result<crate::output::DeleteImageOutput, crate::error::DeleteImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a version of a SageMaker image. The container image the version represents isn't
/// deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteImageVersion {
    _private: (),
}
impl DeleteImageVersion {
    /// Creates a new builder-style object to manufacture [`DeleteImageVersionInput`](crate::input::DeleteImageVersionInput)
    pub fn builder() -> crate::input::delete_image_version_input::Builder {
        crate::input::delete_image_version_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteImageVersionOutput, crate::error::DeleteImageVersionError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteImageVersionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteImageVersionError {
                        kind: crate::error::DeleteImageVersionErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteImageVersionError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteImageVersionError {
                        kind: crate::error::DeleteImageVersionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteImageVersionError::unhandled(e),
                },
                _ => crate::error::DeleteImageVersionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_image_version_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteImageVersion {
    type Output =
        Result<crate::output::DeleteImageVersionOutput, crate::error::DeleteImageVersionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a model. The <code>DeleteModel</code> API deletes only the model entry that
/// was created in Amazon SageMaker when you called the <a>CreateModel</a> API. It does not
/// delete model artifacts, inference code, or the IAM role that you specified when
/// creating the model. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModel {
    _private: (),
}
impl DeleteModel {
    /// Creates a new builder-style object to manufacture [`DeleteModelInput`](crate::input::DeleteModelInput)
    pub fn builder() -> crate::input::delete_model_input::Builder {
        crate::input::delete_model_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteModelOutput, crate::error::DeleteModelError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteModelError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_model_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteModel {
    type Output = Result<crate::output::DeleteModelOutput, crate::error::DeleteModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an Amazon SageMaker model bias job definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelBiasJobDefinition {
    _private: (),
}
impl DeleteModelBiasJobDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteModelBiasJobDefinitionInput`](crate::input::DeleteModelBiasJobDefinitionInput)
    pub fn builder() -> crate::input::delete_model_bias_job_definition_input::Builder {
        crate::input::delete_model_bias_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DeleteModelBiasJobDefinitionOutput,
        crate::error::DeleteModelBiasJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DeleteModelBiasJobDefinitionError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteModelBiasJobDefinitionError {
                        kind: crate::error::DeleteModelBiasJobDefinitionErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteModelBiasJobDefinitionError::unhandled(e),
                },
                _ => crate::error::DeleteModelBiasJobDefinitionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::delete_model_bias_job_definition_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteModelBiasJobDefinition {
    type Output = Result<
        crate::output::DeleteModelBiasJobDefinitionOutput,
        crate::error::DeleteModelBiasJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an Amazon SageMaker model explainability job definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelExplainabilityJobDefinition {
    _private: (),
}
impl DeleteModelExplainabilityJobDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteModelExplainabilityJobDefinitionInput`](crate::input::DeleteModelExplainabilityJobDefinitionInput)
    pub fn builder() -> crate::input::delete_model_explainability_job_definition_input::Builder {
        crate::input::delete_model_explainability_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DeleteModelExplainabilityJobDefinitionOutput,
        crate::error::DeleteModelExplainabilityJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::DeleteModelExplainabilityJobDefinitionError::unhandled(
                            generic,
                        ),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteModelExplainabilityJobDefinitionError { kind: crate::error::DeleteModelExplainabilityJobDefinitionErrorKind::ResourceNotFound(body), meta: generic },
                    Err(e) => crate::error::DeleteModelExplainabilityJobDefinitionError::unhandled(e)
                }
                _ => crate::error::DeleteModelExplainabilityJobDefinitionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::delete_model_explainability_job_definition_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteModelExplainabilityJobDefinition {
    type Output = Result<
        crate::output::DeleteModelExplainabilityJobDefinitionOutput,
        crate::error::DeleteModelExplainabilityJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a model package.</p>
/// <p>A model package is used to create Amazon SageMaker models or list on AWS Marketplace. Buyers can
/// subscribe to model packages listed on AWS Marketplace to create models in Amazon SageMaker.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelPackage {
    _private: (),
}
impl DeleteModelPackage {
    /// Creates a new builder-style object to manufacture [`DeleteModelPackageInput`](crate::input::DeleteModelPackageInput)
    pub fn builder() -> crate::input::delete_model_package_input::Builder {
        crate::input::delete_model_package_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteModelPackageOutput, crate::error::DeleteModelPackageError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteModelPackageError::unhandled(generic)),
            };
            return Err(match error_code {
                "ConflictException" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteModelPackageError {
                        kind: crate::error::DeleteModelPackageErrorKind::ConflictError(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteModelPackageError::unhandled(e),
                },
                _ => crate::error::DeleteModelPackageError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_model_package_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteModelPackage {
    type Output =
        Result<crate::output::DeleteModelPackageOutput, crate::error::DeleteModelPackageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes the specified model group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelPackageGroup {
    _private: (),
}
impl DeleteModelPackageGroup {
    /// Creates a new builder-style object to manufacture [`DeleteModelPackageGroupInput`](crate::input::DeleteModelPackageGroupInput)
    pub fn builder() -> crate::input::delete_model_package_group_input::Builder {
        crate::input::delete_model_package_group_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DeleteModelPackageGroupOutput,
        crate::error::DeleteModelPackageGroupError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteModelPackageGroupError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_model_package_group_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteModelPackageGroup {
    type Output = Result<
        crate::output::DeleteModelPackageGroupOutput,
        crate::error::DeleteModelPackageGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a model group resource policy.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelPackageGroupPolicy {
    _private: (),
}
impl DeleteModelPackageGroupPolicy {
    /// Creates a new builder-style object to manufacture [`DeleteModelPackageGroupPolicyInput`](crate::input::DeleteModelPackageGroupPolicyInput)
    pub fn builder() -> crate::input::delete_model_package_group_policy_input::Builder {
        crate::input::delete_model_package_group_policy_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DeleteModelPackageGroupPolicyOutput,
        crate::error::DeleteModelPackageGroupPolicyError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteModelPackageGroupPolicyError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::delete_model_package_group_policy_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteModelPackageGroupPolicy {
    type Output = Result<
        crate::output::DeleteModelPackageGroupPolicyOutput,
        crate::error::DeleteModelPackageGroupPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes the secified model quality monitoring job definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModelQualityJobDefinition {
    _private: (),
}
impl DeleteModelQualityJobDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteModelQualityJobDefinitionInput`](crate::input::DeleteModelQualityJobDefinitionInput)
    pub fn builder() -> crate::input::delete_model_quality_job_definition_input::Builder {
        crate::input::delete_model_quality_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DeleteModelQualityJobDefinitionOutput,
        crate::error::DeleteModelQualityJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::DeleteModelQualityJobDefinitionError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteModelQualityJobDefinitionError {
                        kind:
                            crate::error::DeleteModelQualityJobDefinitionErrorKind::ResourceNotFound(
                                body,
                            ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteModelQualityJobDefinitionError::unhandled(e),
                },
                _ => crate::error::DeleteModelQualityJobDefinitionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::delete_model_quality_job_definition_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteModelQualityJobDefinition {
    type Output = Result<
        crate::output::DeleteModelQualityJobDefinitionOutput,
        crate::error::DeleteModelQualityJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a monitoring schedule. Also stops the schedule had not already been stopped.
/// This does not delete the job execution history of the monitoring schedule. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMonitoringSchedule {
    _private: (),
}
impl DeleteMonitoringSchedule {
    /// Creates a new builder-style object to manufacture [`DeleteMonitoringScheduleInput`](crate::input::DeleteMonitoringScheduleInput)
    pub fn builder() -> crate::input::delete_monitoring_schedule_input::Builder {
        crate::input::delete_monitoring_schedule_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DeleteMonitoringScheduleOutput,
        crate::error::DeleteMonitoringScheduleError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DeleteMonitoringScheduleError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteMonitoringScheduleError {
                        kind: crate::error::DeleteMonitoringScheduleErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteMonitoringScheduleError::unhandled(e),
                },
                _ => crate::error::DeleteMonitoringScheduleError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_monitoring_schedule_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteMonitoringSchedule {
    type Output = Result<
        crate::output::DeleteMonitoringScheduleOutput,
        crate::error::DeleteMonitoringScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p> Deletes an Amazon SageMaker notebook instance. Before you can delete a notebook instance, you
/// must call the <code>StopNotebookInstance</code> API. </p>
/// <important>
/// <p>When you delete a notebook instance, you lose all of your data. Amazon SageMaker removes
/// the ML compute instance, and deletes the ML storage volume and the network interface
/// associated with the notebook instance. </p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNotebookInstance {
    _private: (),
}
impl DeleteNotebookInstance {
    /// Creates a new builder-style object to manufacture [`DeleteNotebookInstanceInput`](crate::input::DeleteNotebookInstanceInput)
    pub fn builder() -> crate::input::delete_notebook_instance_input::Builder {
        crate::input::delete_notebook_instance_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DeleteNotebookInstanceOutput,
        crate::error::DeleteNotebookInstanceError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteNotebookInstanceError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_notebook_instance_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNotebookInstance {
    type Output = Result<
        crate::output::DeleteNotebookInstanceOutput,
        crate::error::DeleteNotebookInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a notebook instance lifecycle configuration.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNotebookInstanceLifecycleConfig {
    _private: (),
}
impl DeleteNotebookInstanceLifecycleConfig {
    /// Creates a new builder-style object to manufacture [`DeleteNotebookInstanceLifecycleConfigInput`](crate::input::DeleteNotebookInstanceLifecycleConfigInput)
    pub fn builder() -> crate::input::delete_notebook_instance_lifecycle_config_input::Builder {
        crate::input::delete_notebook_instance_lifecycle_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DeleteNotebookInstanceLifecycleConfigOutput,
        crate::error::DeleteNotebookInstanceLifecycleConfigError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteNotebookInstanceLifecycleConfigError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::delete_notebook_instance_lifecycle_config_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNotebookInstanceLifecycleConfig {
    type Output = Result<
        crate::output::DeleteNotebookInstanceLifecycleConfigOutput,
        crate::error::DeleteNotebookInstanceLifecycleConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a pipeline if there are no running instances of the pipeline. To delete a
/// pipeline, you must stop all running instances of the pipeline using the
/// <code>StopPipelineExecution</code> API. When you delete a pipeline, all instances of the
/// pipeline are deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePipeline {
    _private: (),
}
impl DeletePipeline {
    /// Creates a new builder-style object to manufacture [`DeletePipelineInput`](crate::input::DeletePipelineInput)
    pub fn builder() -> crate::input::delete_pipeline_input::Builder {
        crate::input::delete_pipeline_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeletePipelineOutput, crate::error::DeletePipelineError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeletePipelineError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeletePipelineError {
                        kind: crate::error::DeletePipelineErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeletePipelineError::unhandled(e),
                },
                _ => crate::error::DeletePipelineError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_pipeline_output::Builder::default();
        builder =
            crate::json_deser::delete_pipeline_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DeletePipelineError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePipeline {
    type Output = Result<crate::output::DeletePipelineOutput, crate::error::DeletePipelineError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Delete the specified project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProject {
    _private: (),
}
impl DeleteProject {
    /// Creates a new builder-style object to manufacture [`DeleteProjectInput`](crate::input::DeleteProjectInput)
    pub fn builder() -> crate::input::delete_project_input::Builder {
        crate::input::delete_project_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteProjectOutput, crate::error::DeleteProjectError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteProjectError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_project_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteProject {
    type Output = Result<crate::output::DeleteProjectOutput, crate::error::DeleteProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes the specified tags from an Amazon SageMaker resource.</p>
/// <p>To list a resource's tags, use the <code>ListTags</code> API. </p>
/// <note>
/// <p>When you call this API to delete tags from a hyperparameter tuning job, the
/// deleted tags are not removed from training jobs that the hyperparameter tuning job
/// launched before you called this API.</p>
/// </note>
/// <note>
/// <p>When you call this API to delete tags from a SageMaker Studio Domain or User
/// Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain
/// or User Profile launched before you called this API.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTags {
    _private: (),
}
impl DeleteTags {
    /// Creates a new builder-style object to manufacture [`DeleteTagsInput`](crate::input::DeleteTagsInput)
    pub fn builder() -> crate::input::delete_tags_input::Builder {
        crate::input::delete_tags_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteTagsOutput, crate::error::DeleteTagsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteTagsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_tags_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTags {
    type Output = Result<crate::output::DeleteTagsOutput, crate::error::DeleteTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes the specified trial. All trial components that make up the trial must be deleted
/// first. Use the <a>DescribeTrialComponent</a> API to get the list of trial
/// components.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTrial {
    _private: (),
}
impl DeleteTrial {
    /// Creates a new builder-style object to manufacture [`DeleteTrialInput`](crate::input::DeleteTrialInput)
    pub fn builder() -> crate::input::delete_trial_input::Builder {
        crate::input::delete_trial_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteTrialOutput, crate::error::DeleteTrialError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteTrialError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteTrialError {
                        kind: crate::error::DeleteTrialErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteTrialError::unhandled(e),
                },
                _ => crate::error::DeleteTrialError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_trial_output::Builder::default();
        builder =
            crate::json_deser::delete_trial_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DeleteTrialError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTrial {
    type Output = Result<crate::output::DeleteTrialOutput, crate::error::DeleteTrialError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes the specified trial component. A trial component must be disassociated from all
/// trials before the trial component can be deleted. To disassociate a trial component from a
/// trial, call the <a>DisassociateTrialComponent</a> API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTrialComponent {
    _private: (),
}
impl DeleteTrialComponent {
    /// Creates a new builder-style object to manufacture [`DeleteTrialComponentInput`](crate::input::DeleteTrialComponentInput)
    pub fn builder() -> crate::input::delete_trial_component_input::Builder {
        crate::input::delete_trial_component_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteTrialComponentOutput, crate::error::DeleteTrialComponentError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteTrialComponentError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteTrialComponentError {
                        kind: crate::error::DeleteTrialComponentErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteTrialComponentError::unhandled(e),
                },
                _ => crate::error::DeleteTrialComponentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_trial_component_output::Builder::default();
        builder = crate::json_deser::delete_trial_component_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DeleteTrialComponentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTrialComponent {
    type Output =
        Result<crate::output::DeleteTrialComponentOutput, crate::error::DeleteTrialComponentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes a user profile. When a user profile is deleted, the user loses access to their EFS
/// volume, including data, notebooks, and other artifacts.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteUserProfile {
    _private: (),
}
impl DeleteUserProfile {
    /// Creates a new builder-style object to manufacture [`DeleteUserProfileInput`](crate::input::DeleteUserProfileInput)
    pub fn builder() -> crate::input::delete_user_profile_input::Builder {
        crate::input::delete_user_profile_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteUserProfileOutput, crate::error::DeleteUserProfileError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteUserProfileError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteUserProfileError {
                        kind: crate::error::DeleteUserProfileErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteUserProfileError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteUserProfileError {
                        kind: crate::error::DeleteUserProfileErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteUserProfileError::unhandled(e),
                },
                _ => crate::error::DeleteUserProfileError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_user_profile_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteUserProfile {
    type Output =
        Result<crate::output::DeleteUserProfileOutput, crate::error::DeleteUserProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Use this operation to delete a workforce.</p>
/// <p>If you want to create a new workforce in an AWS Region where
/// a workforce already exists, use this operation to delete the
/// existing workforce and then use
/// to create a new workforce.</p>
/// <important>
/// <p>If a private workforce contains one or more work teams, you must use
/// the
/// operation to delete all work teams before you delete the workforce.
/// If you try to delete a workforce that contains one or more work teams,
/// you will recieve a <code>ResourceInUse</code> error.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWorkforce {
    _private: (),
}
impl DeleteWorkforce {
    /// Creates a new builder-style object to manufacture [`DeleteWorkforceInput`](crate::input::DeleteWorkforceInput)
    pub fn builder() -> crate::input::delete_workforce_input::Builder {
        crate::input::delete_workforce_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteWorkforceOutput, crate::error::DeleteWorkforceError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeleteWorkforceError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_workforce_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteWorkforce {
    type Output = Result<crate::output::DeleteWorkforceOutput, crate::error::DeleteWorkforceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deletes an existing work team. This operation can't be undone.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWorkteam {
    _private: (),
}
impl DeleteWorkteam {
    /// Creates a new builder-style object to manufacture [`DeleteWorkteamInput`](crate::input::DeleteWorkteamInput)
    pub fn builder() -> crate::input::delete_workteam_input::Builder {
        crate::input::delete_workteam_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeleteWorkteamOutput, crate::error::DeleteWorkteamError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteWorkteamError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DeleteWorkteamError {
                        kind: crate::error::DeleteWorkteamErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DeleteWorkteamError::unhandled(e),
                },
                _ => crate::error::DeleteWorkteamError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::delete_workteam_output::Builder::default();
        builder =
            crate::json_deser::delete_workteam_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DeleteWorkteamError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteWorkteam {
    type Output = Result<crate::output::DeleteWorkteamOutput, crate::error::DeleteWorkteamError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterDevices {
    _private: (),
}
impl DeregisterDevices {
    /// Creates a new builder-style object to manufacture [`DeregisterDevicesInput`](crate::input::DeregisterDevicesInput)
    pub fn builder() -> crate::input::deregister_devices_input::Builder {
        crate::input::deregister_devices_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DeregisterDevicesOutput, crate::error::DeregisterDevicesError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DeregisterDevicesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::deregister_devices_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterDevices {
    type Output =
        Result<crate::output::DeregisterDevicesOutput, crate::error::DeregisterDevicesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes an action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAction {
    _private: (),
}
impl DescribeAction {
    /// Creates a new builder-style object to manufacture [`DescribeActionInput`](crate::input::DescribeActionInput)
    pub fn builder() -> crate::input::describe_action_input::Builder {
        crate::input::describe_action_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeActionOutput, crate::error::DescribeActionError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeActionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeActionError {
                        kind: crate::error::DescribeActionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeActionError::unhandled(e),
                },
                _ => crate::error::DescribeActionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_action_output::Builder::default();
        builder =
            crate::json_deser::describe_action_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeActionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAction {
    type Output = Result<crate::output::DescribeActionOutput, crate::error::DescribeActionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a description of the specified algorithm that is in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAlgorithm {
    _private: (),
}
impl DescribeAlgorithm {
    /// Creates a new builder-style object to manufacture [`DescribeAlgorithmInput`](crate::input::DescribeAlgorithmInput)
    pub fn builder() -> crate::input::describe_algorithm_input::Builder {
        crate::input::describe_algorithm_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeAlgorithmOutput, crate::error::DescribeAlgorithmError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeAlgorithmError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_algorithm_output::Builder::default();
        builder = crate::json_deser::describe_algorithm_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeAlgorithmError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAlgorithm {
    type Output =
        Result<crate::output::DescribeAlgorithmOutput, crate::error::DescribeAlgorithmError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes the app.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeApp {
    _private: (),
}
impl DescribeApp {
    /// Creates a new builder-style object to manufacture [`DescribeAppInput`](crate::input::DescribeAppInput)
    pub fn builder() -> crate::input::describe_app_input::Builder {
        crate::input::describe_app_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeAppOutput, crate::error::DescribeAppError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeAppError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeAppError {
                        kind: crate::error::DescribeAppErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeAppError::unhandled(e),
                },
                _ => crate::error::DescribeAppError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_app_output::Builder::default();
        builder =
            crate::json_deser::describe_app_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeAppError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeApp {
    type Output = Result<crate::output::DescribeAppOutput, crate::error::DescribeAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes an AppImageConfig.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAppImageConfig {
    _private: (),
}
impl DescribeAppImageConfig {
    /// Creates a new builder-style object to manufacture [`DescribeAppImageConfigInput`](crate::input::DescribeAppImageConfigInput)
    pub fn builder() -> crate::input::describe_app_image_config_input::Builder {
        crate::input::describe_app_image_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeAppImageConfigOutput,
        crate::error::DescribeAppImageConfigError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DescribeAppImageConfigError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeAppImageConfigError {
                        kind: crate::error::DescribeAppImageConfigErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeAppImageConfigError::unhandled(e),
                },
                _ => crate::error::DescribeAppImageConfigError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_app_image_config_output::Builder::default();
        builder = crate::json_deser::describe_app_image_config_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeAppImageConfigError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAppImageConfig {
    type Output = Result<
        crate::output::DescribeAppImageConfigOutput,
        crate::error::DescribeAppImageConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes an artifact.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeArtifact {
    _private: (),
}
impl DescribeArtifact {
    /// Creates a new builder-style object to manufacture [`DescribeArtifactInput`](crate::input::DescribeArtifactInput)
    pub fn builder() -> crate::input::describe_artifact_input::Builder {
        crate::input::describe_artifact_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeArtifactOutput, crate::error::DescribeArtifactError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeArtifactError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeArtifactError {
                        kind: crate::error::DescribeArtifactErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeArtifactError::unhandled(e),
                },
                _ => crate::error::DescribeArtifactError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_artifact_output::Builder::default();
        builder =
            crate::json_deser::describe_artifact_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeArtifactError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeArtifact {
    type Output =
        Result<crate::output::DescribeArtifactOutput, crate::error::DescribeArtifactError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns information about an Amazon SageMaker AutoML job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAutoMLJob {
    _private: (),
}
impl DescribeAutoMLJob {
    /// Creates a new builder-style object to manufacture [`DescribeAutoMLJobInput`](crate::input::DescribeAutoMLJobInput)
    pub fn builder() -> crate::input::describe_auto_ml_job_input::Builder {
        crate::input::describe_auto_ml_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeAutoMLJobOutput, crate::error::DescribeAutoMLJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeAutoMLJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeAutoMLJobError {
                        kind: crate::error::DescribeAutoMLJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeAutoMLJobError::unhandled(e),
                },
                _ => crate::error::DescribeAutoMLJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_auto_ml_job_output::Builder::default();
        builder = crate::json_deser::describe_auto_ml_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeAutoMLJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAutoMLJob {
    type Output =
        Result<crate::output::DescribeAutoMLJobOutput, crate::error::DescribeAutoMLJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets details about the specified Git repository.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCodeRepository {
    _private: (),
}
impl DescribeCodeRepository {
    /// Creates a new builder-style object to manufacture [`DescribeCodeRepositoryInput`](crate::input::DescribeCodeRepositoryInput)
    pub fn builder() -> crate::input::describe_code_repository_input::Builder {
        crate::input::describe_code_repository_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeCodeRepositoryOutput,
        crate::error::DescribeCodeRepositoryError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeCodeRepositoryError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_code_repository_output::Builder::default();
        builder = crate::json_deser::describe_code_repository_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeCodeRepositoryError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCodeRepository {
    type Output = Result<
        crate::output::DescribeCodeRepositoryOutput,
        crate::error::DescribeCodeRepositoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns information about a model compilation job.</p>
/// <p>To create a model compilation job, use <a>CreateCompilationJob</a>. To get
/// information about multiple model compilation jobs, use <a>ListCompilationJobs</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCompilationJob {
    _private: (),
}
impl DescribeCompilationJob {
    /// Creates a new builder-style object to manufacture [`DescribeCompilationJobInput`](crate::input::DescribeCompilationJobInput)
    pub fn builder() -> crate::input::describe_compilation_job_input::Builder {
        crate::input::describe_compilation_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeCompilationJobOutput,
        crate::error::DescribeCompilationJobError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DescribeCompilationJobError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeCompilationJobError {
                        kind: crate::error::DescribeCompilationJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeCompilationJobError::unhandled(e),
                },
                _ => crate::error::DescribeCompilationJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_compilation_job_output::Builder::default();
        builder = crate::json_deser::describe_compilation_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeCompilationJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCompilationJob {
    type Output = Result<
        crate::output::DescribeCompilationJobOutput,
        crate::error::DescribeCompilationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes a context.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeContext {
    _private: (),
}
impl DescribeContext {
    /// Creates a new builder-style object to manufacture [`DescribeContextInput`](crate::input::DescribeContextInput)
    pub fn builder() -> crate::input::describe_context_input::Builder {
        crate::input::describe_context_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeContextOutput, crate::error::DescribeContextError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeContextError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeContextError {
                        kind: crate::error::DescribeContextErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeContextError::unhandled(e),
                },
                _ => crate::error::DescribeContextError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_context_output::Builder::default();
        builder =
            crate::json_deser::describe_context_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeContextError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeContext {
    type Output = Result<crate::output::DescribeContextOutput, crate::error::DescribeContextError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets the details of a data quality monitoring job definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDataQualityJobDefinition {
    _private: (),
}
impl DescribeDataQualityJobDefinition {
    /// Creates a new builder-style object to manufacture [`DescribeDataQualityJobDefinitionInput`](crate::input::DescribeDataQualityJobDefinitionInput)
    pub fn builder() -> crate::input::describe_data_quality_job_definition_input::Builder {
        crate::input::describe_data_quality_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeDataQualityJobDefinitionOutput,
        crate::error::DescribeDataQualityJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::DescribeDataQualityJobDefinitionError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeDataQualityJobDefinitionError { kind: crate::error::DescribeDataQualityJobDefinitionErrorKind::ResourceNotFound(body), meta: generic },
                    Err(e) => crate::error::DescribeDataQualityJobDefinitionError::unhandled(e)
                }
                _ => crate::error::DescribeDataQualityJobDefinitionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::describe_data_quality_job_definition_output::Builder::default();
        builder = crate::json_deser::describe_data_quality_job_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeDataQualityJobDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDataQualityJobDefinition {
    type Output = Result<
        crate::output::DescribeDataQualityJobDefinitionOutput,
        crate::error::DescribeDataQualityJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes the device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDevice {
    _private: (),
}
impl DescribeDevice {
    /// Creates a new builder-style object to manufacture [`DescribeDeviceInput`](crate::input::DescribeDeviceInput)
    pub fn builder() -> crate::input::describe_device_input::Builder {
        crate::input::describe_device_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeDeviceOutput, crate::error::DescribeDeviceError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeDeviceError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeDeviceError {
                        kind: crate::error::DescribeDeviceErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeDeviceError::unhandled(e),
                },
                _ => crate::error::DescribeDeviceError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_device_output::Builder::default();
        builder =
            crate::json_deser::describe_device_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeDeviceError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDevice {
    type Output = Result<crate::output::DescribeDeviceOutput, crate::error::DescribeDeviceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>A description of the fleet the device belongs to.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDeviceFleet {
    _private: (),
}
impl DescribeDeviceFleet {
    /// Creates a new builder-style object to manufacture [`DescribeDeviceFleetInput`](crate::input::DescribeDeviceFleetInput)
    pub fn builder() -> crate::input::describe_device_fleet_input::Builder {
        crate::input::describe_device_fleet_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeDeviceFleetOutput, crate::error::DescribeDeviceFleetError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeDeviceFleetError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeDeviceFleetError {
                        kind: crate::error::DescribeDeviceFleetErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeDeviceFleetError::unhandled(e),
                },
                _ => crate::error::DescribeDeviceFleetError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_device_fleet_output::Builder::default();
        builder = crate::json_deser::describe_device_fleet_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeDeviceFleetError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDeviceFleet {
    type Output =
        Result<crate::output::DescribeDeviceFleetOutput, crate::error::DescribeDeviceFleetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>The description of the domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDomain {
    _private: (),
}
impl DescribeDomain {
    /// Creates a new builder-style object to manufacture [`DescribeDomainInput`](crate::input::DescribeDomainInput)
    pub fn builder() -> crate::input::describe_domain_input::Builder {
        crate::input::describe_domain_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeDomainOutput, crate::error::DescribeDomainError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeDomainError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeDomainError {
                        kind: crate::error::DescribeDomainErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeDomainError::unhandled(e),
                },
                _ => crate::error::DescribeDomainError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_domain_output::Builder::default();
        builder =
            crate::json_deser::describe_domain_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeDomainError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDomain {
    type Output = Result<crate::output::DescribeDomainOutput, crate::error::DescribeDomainError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>A description of edge packaging jobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEdgePackagingJob {
    _private: (),
}
impl DescribeEdgePackagingJob {
    /// Creates a new builder-style object to manufacture [`DescribeEdgePackagingJobInput`](crate::input::DescribeEdgePackagingJobInput)
    pub fn builder() -> crate::input::describe_edge_packaging_job_input::Builder {
        crate::input::describe_edge_packaging_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeEdgePackagingJobOutput,
        crate::error::DescribeEdgePackagingJobError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DescribeEdgePackagingJobError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeEdgePackagingJobError {
                        kind: crate::error::DescribeEdgePackagingJobErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeEdgePackagingJobError::unhandled(e),
                },
                _ => crate::error::DescribeEdgePackagingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_edge_packaging_job_output::Builder::default();
        builder = crate::json_deser::describe_edge_packaging_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeEdgePackagingJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEdgePackagingJob {
    type Output = Result<
        crate::output::DescribeEdgePackagingJobOutput,
        crate::error::DescribeEdgePackagingJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns the description of an endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEndpoint {
    _private: (),
}
impl DescribeEndpoint {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointInput`](crate::input::DescribeEndpointInput)
    pub fn builder() -> crate::input::describe_endpoint_input::Builder {
        crate::input::describe_endpoint_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeEndpointOutput, crate::error::DescribeEndpointError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeEndpointError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_endpoint_output::Builder::default();
        builder =
            crate::json_deser::describe_endpoint_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeEndpointError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEndpoint {
    type Output =
        Result<crate::output::DescribeEndpointOutput, crate::error::DescribeEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns the description of an endpoint configuration created using the
/// <code>CreateEndpointConfig</code> API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEndpointConfig {
    _private: (),
}
impl DescribeEndpointConfig {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointConfigInput`](crate::input::DescribeEndpointConfigInput)
    pub fn builder() -> crate::input::describe_endpoint_config_input::Builder {
        crate::input::describe_endpoint_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeEndpointConfigOutput,
        crate::error::DescribeEndpointConfigError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeEndpointConfigError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_endpoint_config_output::Builder::default();
        builder = crate::json_deser::describe_endpoint_config_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeEndpointConfigError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEndpointConfig {
    type Output = Result<
        crate::output::DescribeEndpointConfigOutput,
        crate::error::DescribeEndpointConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Provides a list of an experiment's properties.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeExperiment {
    _private: (),
}
impl DescribeExperiment {
    /// Creates a new builder-style object to manufacture [`DescribeExperimentInput`](crate::input::DescribeExperimentInput)
    pub fn builder() -> crate::input::describe_experiment_input::Builder {
        crate::input::describe_experiment_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeExperimentOutput, crate::error::DescribeExperimentError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeExperimentError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeExperimentError {
                        kind: crate::error::DescribeExperimentErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeExperimentError::unhandled(e),
                },
                _ => crate::error::DescribeExperimentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_experiment_output::Builder::default();
        builder = crate::json_deser::describe_experiment_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeExperimentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeExperiment {
    type Output =
        Result<crate::output::DescribeExperimentOutput, crate::error::DescribeExperimentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Use this operation to describe a <code>FeatureGroup</code>. The response includes
/// information on the creation time, <code>FeatureGroup</code> name, the unique identifier for
/// each <code>FeatureGroup</code>, and more.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFeatureGroup {
    _private: (),
}
impl DescribeFeatureGroup {
    /// Creates a new builder-style object to manufacture [`DescribeFeatureGroupInput`](crate::input::DescribeFeatureGroupInput)
    pub fn builder() -> crate::input::describe_feature_group_input::Builder {
        crate::input::describe_feature_group_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeFeatureGroupOutput, crate::error::DescribeFeatureGroupError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeFeatureGroupError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeFeatureGroupError {
                        kind: crate::error::DescribeFeatureGroupErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeFeatureGroupError::unhandled(e),
                },
                _ => crate::error::DescribeFeatureGroupError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_feature_group_output::Builder::default();
        builder = crate::json_deser::describe_feature_group_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeFeatureGroupError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFeatureGroup {
    type Output =
        Result<crate::output::DescribeFeatureGroupOutput, crate::error::DescribeFeatureGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns information about the specified flow definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFlowDefinition {
    _private: (),
}
impl DescribeFlowDefinition {
    /// Creates a new builder-style object to manufacture [`DescribeFlowDefinitionInput`](crate::input::DescribeFlowDefinitionInput)
    pub fn builder() -> crate::input::describe_flow_definition_input::Builder {
        crate::input::describe_flow_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeFlowDefinitionOutput,
        crate::error::DescribeFlowDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DescribeFlowDefinitionError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeFlowDefinitionError {
                        kind: crate::error::DescribeFlowDefinitionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeFlowDefinitionError::unhandled(e),
                },
                _ => crate::error::DescribeFlowDefinitionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_flow_definition_output::Builder::default();
        builder = crate::json_deser::describe_flow_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeFlowDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFlowDefinition {
    type Output = Result<
        crate::output::DescribeFlowDefinitionOutput,
        crate::error::DescribeFlowDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns information about the requested human task user interface (worker task template).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHumanTaskUi {
    _private: (),
}
impl DescribeHumanTaskUi {
    /// Creates a new builder-style object to manufacture [`DescribeHumanTaskUiInput`](crate::input::DescribeHumanTaskUiInput)
    pub fn builder() -> crate::input::describe_human_task_ui_input::Builder {
        crate::input::describe_human_task_ui_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeHumanTaskUiOutput, crate::error::DescribeHumanTaskUiError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeHumanTaskUiError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeHumanTaskUiError {
                        kind: crate::error::DescribeHumanTaskUiErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeHumanTaskUiError::unhandled(e),
                },
                _ => crate::error::DescribeHumanTaskUiError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_human_task_ui_output::Builder::default();
        builder = crate::json_deser::describe_human_task_ui_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeHumanTaskUiError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHumanTaskUi {
    type Output =
        Result<crate::output::DescribeHumanTaskUiOutput, crate::error::DescribeHumanTaskUiError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets
/// a description of a hyperparameter tuning job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHyperParameterTuningJob {
    _private: (),
}
impl DescribeHyperParameterTuningJob {
    /// Creates a new builder-style object to manufacture [`DescribeHyperParameterTuningJobInput`](crate::input::DescribeHyperParameterTuningJobInput)
    pub fn builder() -> crate::input::describe_hyper_parameter_tuning_job_input::Builder {
        crate::input::describe_hyper_parameter_tuning_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeHyperParameterTuningJobOutput,
        crate::error::DescribeHyperParameterTuningJobError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::DescribeHyperParameterTuningJobError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeHyperParameterTuningJobError {
                        kind:
                            crate::error::DescribeHyperParameterTuningJobErrorKind::ResourceNotFound(
                                body,
                            ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeHyperParameterTuningJobError::unhandled(e),
                },
                _ => crate::error::DescribeHyperParameterTuningJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::describe_hyper_parameter_tuning_job_output::Builder::default();
        builder = crate::json_deser::describe_hyper_parameter_tuning_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeHyperParameterTuningJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHyperParameterTuningJob {
    type Output = Result<
        crate::output::DescribeHyperParameterTuningJobOutput,
        crate::error::DescribeHyperParameterTuningJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes a SageMaker image.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeImage {
    _private: (),
}
impl DescribeImage {
    /// Creates a new builder-style object to manufacture [`DescribeImageInput`](crate::input::DescribeImageInput)
    pub fn builder() -> crate::input::describe_image_input::Builder {
        crate::input::describe_image_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeImageOutput, crate::error::DescribeImageError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeImageError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeImageError {
                        kind: crate::error::DescribeImageErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeImageError::unhandled(e),
                },
                _ => crate::error::DescribeImageError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_image_output::Builder::default();
        builder =
            crate::json_deser::describe_image_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeImageError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeImage {
    type Output = Result<crate::output::DescribeImageOutput, crate::error::DescribeImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes a version of a SageMaker image.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeImageVersion {
    _private: (),
}
impl DescribeImageVersion {
    /// Creates a new builder-style object to manufacture [`DescribeImageVersionInput`](crate::input::DescribeImageVersionInput)
    pub fn builder() -> crate::input::describe_image_version_input::Builder {
        crate::input::describe_image_version_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeImageVersionOutput, crate::error::DescribeImageVersionError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeImageVersionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeImageVersionError {
                        kind: crate::error::DescribeImageVersionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeImageVersionError::unhandled(e),
                },
                _ => crate::error::DescribeImageVersionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_image_version_output::Builder::default();
        builder = crate::json_deser::describe_image_version_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeImageVersionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeImageVersion {
    type Output =
        Result<crate::output::DescribeImageVersionOutput, crate::error::DescribeImageVersionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets information about a labeling job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLabelingJob {
    _private: (),
}
impl DescribeLabelingJob {
    /// Creates a new builder-style object to manufacture [`DescribeLabelingJobInput`](crate::input::DescribeLabelingJobInput)
    pub fn builder() -> crate::input::describe_labeling_job_input::Builder {
        crate::input::describe_labeling_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeLabelingJobOutput, crate::error::DescribeLabelingJobError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeLabelingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeLabelingJobError {
                        kind: crate::error::DescribeLabelingJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeLabelingJobError::unhandled(e),
                },
                _ => crate::error::DescribeLabelingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_labeling_job_output::Builder::default();
        builder = crate::json_deser::describe_labeling_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeLabelingJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLabelingJob {
    type Output =
        Result<crate::output::DescribeLabelingJobOutput, crate::error::DescribeLabelingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes a model that you created using the <code>CreateModel</code>
/// API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModel {
    _private: (),
}
impl DescribeModel {
    /// Creates a new builder-style object to manufacture [`DescribeModelInput`](crate::input::DescribeModelInput)
    pub fn builder() -> crate::input::describe_model_input::Builder {
        crate::input::describe_model_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeModelOutput, crate::error::DescribeModelError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeModelError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_model_output::Builder::default();
        builder =
            crate::json_deser::describe_model_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeModelError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeModel {
    type Output = Result<crate::output::DescribeModelOutput, crate::error::DescribeModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a description of a model bias job definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelBiasJobDefinition {
    _private: (),
}
impl DescribeModelBiasJobDefinition {
    /// Creates a new builder-style object to manufacture [`DescribeModelBiasJobDefinitionInput`](crate::input::DescribeModelBiasJobDefinitionInput)
    pub fn builder() -> crate::input::describe_model_bias_job_definition_input::Builder {
        crate::input::describe_model_bias_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeModelBiasJobDefinitionOutput,
        crate::error::DescribeModelBiasJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::DescribeModelBiasJobDefinitionError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeModelBiasJobDefinitionError {
                        kind:
                            crate::error::DescribeModelBiasJobDefinitionErrorKind::ResourceNotFound(
                                body,
                            ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeModelBiasJobDefinitionError::unhandled(e),
                },
                _ => crate::error::DescribeModelBiasJobDefinitionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::describe_model_bias_job_definition_output::Builder::default();
        builder = crate::json_deser::describe_model_bias_job_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeModelBiasJobDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeModelBiasJobDefinition {
    type Output = Result<
        crate::output::DescribeModelBiasJobDefinitionOutput,
        crate::error::DescribeModelBiasJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a description of a model explainability job definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelExplainabilityJobDefinition {
    _private: (),
}
impl DescribeModelExplainabilityJobDefinition {
    /// Creates a new builder-style object to manufacture [`DescribeModelExplainabilityJobDefinitionInput`](crate::input::DescribeModelExplainabilityJobDefinitionInput)
    pub fn builder() -> crate::input::describe_model_explainability_job_definition_input::Builder {
        crate::input::describe_model_explainability_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeModelExplainabilityJobDefinitionOutput,
        crate::error::DescribeModelExplainabilityJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::DescribeModelExplainabilityJobDefinitionError::unhandled(
                            generic,
                        ),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeModelExplainabilityJobDefinitionError { kind: crate::error::DescribeModelExplainabilityJobDefinitionErrorKind::ResourceNotFound(body), meta: generic },
                    Err(e) => crate::error::DescribeModelExplainabilityJobDefinitionError::unhandled(e)
                }
                _ => crate::error::DescribeModelExplainabilityJobDefinitionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::describe_model_explainability_job_definition_output::Builder::default();
        builder = crate::json_deser::describe_model_explainability_job_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeModelExplainabilityJobDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeModelExplainabilityJobDefinition {
    type Output = Result<
        crate::output::DescribeModelExplainabilityJobDefinitionOutput,
        crate::error::DescribeModelExplainabilityJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a description of the specified model package, which is used to create Amazon SageMaker
/// models or list them on AWS Marketplace.</p>
/// <p>To create models in Amazon SageMaker, buyers can subscribe to model packages listed on AWS
/// Marketplace.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelPackage {
    _private: (),
}
impl DescribeModelPackage {
    /// Creates a new builder-style object to manufacture [`DescribeModelPackageInput`](crate::input::DescribeModelPackageInput)
    pub fn builder() -> crate::input::describe_model_package_input::Builder {
        crate::input::describe_model_package_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeModelPackageOutput, crate::error::DescribeModelPackageError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeModelPackageError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_model_package_output::Builder::default();
        builder = crate::json_deser::describe_model_package_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeModelPackageError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeModelPackage {
    type Output =
        Result<crate::output::DescribeModelPackageOutput, crate::error::DescribeModelPackageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a description for the specified model group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelPackageGroup {
    _private: (),
}
impl DescribeModelPackageGroup {
    /// Creates a new builder-style object to manufacture [`DescribeModelPackageGroupInput`](crate::input::DescribeModelPackageGroupInput)
    pub fn builder() -> crate::input::describe_model_package_group_input::Builder {
        crate::input::describe_model_package_group_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeModelPackageGroupOutput,
        crate::error::DescribeModelPackageGroupError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeModelPackageGroupError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_model_package_group_output::Builder::default();
        builder = crate::json_deser::describe_model_package_group_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeModelPackageGroupError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeModelPackageGroup {
    type Output = Result<
        crate::output::DescribeModelPackageGroupOutput,
        crate::error::DescribeModelPackageGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a description of a model quality job definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModelQualityJobDefinition {
    _private: (),
}
impl DescribeModelQualityJobDefinition {
    /// Creates a new builder-style object to manufacture [`DescribeModelQualityJobDefinitionInput`](crate::input::DescribeModelQualityJobDefinitionInput)
    pub fn builder() -> crate::input::describe_model_quality_job_definition_input::Builder {
        crate::input::describe_model_quality_job_definition_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeModelQualityJobDefinitionOutput,
        crate::error::DescribeModelQualityJobDefinitionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::DescribeModelQualityJobDefinitionError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeModelQualityJobDefinitionError { kind: crate::error::DescribeModelQualityJobDefinitionErrorKind::ResourceNotFound(body), meta: generic },
                    Err(e) => crate::error::DescribeModelQualityJobDefinitionError::unhandled(e)
                }
                _ => crate::error::DescribeModelQualityJobDefinitionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::describe_model_quality_job_definition_output::Builder::default();
        builder = crate::json_deser::describe_model_quality_job_definition_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeModelQualityJobDefinitionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeModelQualityJobDefinition {
    type Output = Result<
        crate::output::DescribeModelQualityJobDefinitionOutput,
        crate::error::DescribeModelQualityJobDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes the schedule for a monitoring job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMonitoringSchedule {
    _private: (),
}
impl DescribeMonitoringSchedule {
    /// Creates a new builder-style object to manufacture [`DescribeMonitoringScheduleInput`](crate::input::DescribeMonitoringScheduleInput)
    pub fn builder() -> crate::input::describe_monitoring_schedule_input::Builder {
        crate::input::describe_monitoring_schedule_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeMonitoringScheduleOutput,
        crate::error::DescribeMonitoringScheduleError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DescribeMonitoringScheduleError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeMonitoringScheduleError {
                        kind: crate::error::DescribeMonitoringScheduleErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeMonitoringScheduleError::unhandled(e),
                },
                _ => crate::error::DescribeMonitoringScheduleError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_monitoring_schedule_output::Builder::default();
        builder = crate::json_deser::describe_monitoring_schedule_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeMonitoringScheduleError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMonitoringSchedule {
    type Output = Result<
        crate::output::DescribeMonitoringScheduleOutput,
        crate::error::DescribeMonitoringScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns information about a notebook instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNotebookInstance {
    _private: (),
}
impl DescribeNotebookInstance {
    /// Creates a new builder-style object to manufacture [`DescribeNotebookInstanceInput`](crate::input::DescribeNotebookInstanceInput)
    pub fn builder() -> crate::input::describe_notebook_instance_input::Builder {
        crate::input::describe_notebook_instance_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeNotebookInstanceOutput,
        crate::error::DescribeNotebookInstanceError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeNotebookInstanceError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_notebook_instance_output::Builder::default();
        builder = crate::json_deser::describe_notebook_instance_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeNotebookInstanceError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNotebookInstance {
    type Output = Result<
        crate::output::DescribeNotebookInstanceOutput,
        crate::error::DescribeNotebookInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a description of a notebook instance lifecycle configuration.</p>
/// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
/// 2.1: (Optional) Customize a Notebook Instance</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNotebookInstanceLifecycleConfig {
    _private: (),
}
impl DescribeNotebookInstanceLifecycleConfig {
    /// Creates a new builder-style object to manufacture [`DescribeNotebookInstanceLifecycleConfigInput`](crate::input::DescribeNotebookInstanceLifecycleConfigInput)
    pub fn builder() -> crate::input::describe_notebook_instance_lifecycle_config_input::Builder {
        crate::input::describe_notebook_instance_lifecycle_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeNotebookInstanceLifecycleConfigOutput,
        crate::error::DescribeNotebookInstanceLifecycleConfigError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(
                crate::error::DescribeNotebookInstanceLifecycleConfigError::generic(generic),
            );
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::describe_notebook_instance_lifecycle_config_output::Builder::default();
        builder = crate::json_deser::describe_notebook_instance_lifecycle_config_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeNotebookInstanceLifecycleConfigError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNotebookInstanceLifecycleConfig {
    type Output = Result<
        crate::output::DescribeNotebookInstanceLifecycleConfigOutput,
        crate::error::DescribeNotebookInstanceLifecycleConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes the details of a pipeline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePipeline {
    _private: (),
}
impl DescribePipeline {
    /// Creates a new builder-style object to manufacture [`DescribePipelineInput`](crate::input::DescribePipelineInput)
    pub fn builder() -> crate::input::describe_pipeline_input::Builder {
        crate::input::describe_pipeline_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribePipelineOutput, crate::error::DescribePipelineError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribePipelineError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribePipelineError {
                        kind: crate::error::DescribePipelineErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribePipelineError::unhandled(e),
                },
                _ => crate::error::DescribePipelineError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_pipeline_output::Builder::default();
        builder =
            crate::json_deser::describe_pipeline_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribePipelineError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePipeline {
    type Output =
        Result<crate::output::DescribePipelineOutput, crate::error::DescribePipelineError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes the details of an execution's pipeline definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePipelineDefinitionForExecution {
    _private: (),
}
impl DescribePipelineDefinitionForExecution {
    /// Creates a new builder-style object to manufacture [`DescribePipelineDefinitionForExecutionInput`](crate::input::DescribePipelineDefinitionForExecutionInput)
    pub fn builder() -> crate::input::describe_pipeline_definition_for_execution_input::Builder {
        crate::input::describe_pipeline_definition_for_execution_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribePipelineDefinitionForExecutionOutput,
        crate::error::DescribePipelineDefinitionForExecutionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::DescribePipelineDefinitionForExecutionError::unhandled(
                            generic,
                        ),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribePipelineDefinitionForExecutionError { kind: crate::error::DescribePipelineDefinitionForExecutionErrorKind::ResourceNotFound(body), meta: generic },
                    Err(e) => crate::error::DescribePipelineDefinitionForExecutionError::unhandled(e)
                }
                _ => crate::error::DescribePipelineDefinitionForExecutionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::describe_pipeline_definition_for_execution_output::Builder::default();
        builder = crate::json_deser::describe_pipeline_definition_for_execution_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribePipelineDefinitionForExecutionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePipelineDefinitionForExecution {
    type Output = Result<
        crate::output::DescribePipelineDefinitionForExecutionOutput,
        crate::error::DescribePipelineDefinitionForExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes the details of a pipeline execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePipelineExecution {
    _private: (),
}
impl DescribePipelineExecution {
    /// Creates a new builder-style object to manufacture [`DescribePipelineExecutionInput`](crate::input::DescribePipelineExecutionInput)
    pub fn builder() -> crate::input::describe_pipeline_execution_input::Builder {
        crate::input::describe_pipeline_execution_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribePipelineExecutionOutput,
        crate::error::DescribePipelineExecutionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DescribePipelineExecutionError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribePipelineExecutionError {
                        kind: crate::error::DescribePipelineExecutionErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribePipelineExecutionError::unhandled(e),
                },
                _ => crate::error::DescribePipelineExecutionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_pipeline_execution_output::Builder::default();
        builder = crate::json_deser::describe_pipeline_execution_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribePipelineExecutionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePipelineExecution {
    type Output = Result<
        crate::output::DescribePipelineExecutionOutput,
        crate::error::DescribePipelineExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a description of a processing job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProcessingJob {
    _private: (),
}
impl DescribeProcessingJob {
    /// Creates a new builder-style object to manufacture [`DescribeProcessingJobInput`](crate::input::DescribeProcessingJobInput)
    pub fn builder() -> crate::input::describe_processing_job_input::Builder {
        crate::input::describe_processing_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeProcessingJobOutput, crate::error::DescribeProcessingJobError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeProcessingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeProcessingJobError {
                        kind: crate::error::DescribeProcessingJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeProcessingJobError::unhandled(e),
                },
                _ => crate::error::DescribeProcessingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_processing_job_output::Builder::default();
        builder = crate::json_deser::describe_processing_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeProcessingJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProcessingJob {
    type Output = Result<
        crate::output::DescribeProcessingJobOutput,
        crate::error::DescribeProcessingJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes the details of a project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProject {
    _private: (),
}
impl DescribeProject {
    /// Creates a new builder-style object to manufacture [`DescribeProjectInput`](crate::input::DescribeProjectInput)
    pub fn builder() -> crate::input::describe_project_input::Builder {
        crate::input::describe_project_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeProjectOutput, crate::error::DescribeProjectError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeProjectError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_project_output::Builder::default();
        builder =
            crate::json_deser::describe_project_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeProjectError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProject {
    type Output = Result<crate::output::DescribeProjectOutput, crate::error::DescribeProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets information about a work team provided by a vendor. It returns details about the
/// subscription with a vendor in the AWS Marketplace.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSubscribedWorkteam {
    _private: (),
}
impl DescribeSubscribedWorkteam {
    /// Creates a new builder-style object to manufacture [`DescribeSubscribedWorkteamInput`](crate::input::DescribeSubscribedWorkteamInput)
    pub fn builder() -> crate::input::describe_subscribed_workteam_input::Builder {
        crate::input::describe_subscribed_workteam_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeSubscribedWorkteamOutput,
        crate::error::DescribeSubscribedWorkteamError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeSubscribedWorkteamError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_subscribed_workteam_output::Builder::default();
        builder = crate::json_deser::describe_subscribed_workteam_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeSubscribedWorkteamError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSubscribedWorkteam {
    type Output = Result<
        crate::output::DescribeSubscribedWorkteamOutput,
        crate::error::DescribeSubscribedWorkteamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns information about a training job. </p>
/// <p>Some of the attributes below only appear if the training job successfully starts.
/// If the training job fails, <code>TrainingJobStatus</code> is <code>Failed</code> and,
/// depending on the <code>FailureReason</code>, attributes like
/// <code>TrainingStartTime</code>, <code>TrainingTimeInSeconds</code>,
/// <code>TrainingEndTime</code>, and <code>BillableTimeInSeconds</code> may not be
/// present in the response.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrainingJob {
    _private: (),
}
impl DescribeTrainingJob {
    /// Creates a new builder-style object to manufacture [`DescribeTrainingJobInput`](crate::input::DescribeTrainingJobInput)
    pub fn builder() -> crate::input::describe_training_job_input::Builder {
        crate::input::describe_training_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeTrainingJobOutput, crate::error::DescribeTrainingJobError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeTrainingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeTrainingJobError {
                        kind: crate::error::DescribeTrainingJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeTrainingJobError::unhandled(e),
                },
                _ => crate::error::DescribeTrainingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_training_job_output::Builder::default();
        builder = crate::json_deser::describe_training_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeTrainingJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTrainingJob {
    type Output =
        Result<crate::output::DescribeTrainingJobOutput, crate::error::DescribeTrainingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns information about a transform job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransformJob {
    _private: (),
}
impl DescribeTransformJob {
    /// Creates a new builder-style object to manufacture [`DescribeTransformJobInput`](crate::input::DescribeTransformJobInput)
    pub fn builder() -> crate::input::describe_transform_job_input::Builder {
        crate::input::describe_transform_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeTransformJobOutput, crate::error::DescribeTransformJobError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeTransformJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeTransformJobError {
                        kind: crate::error::DescribeTransformJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeTransformJobError::unhandled(e),
                },
                _ => crate::error::DescribeTransformJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_transform_job_output::Builder::default();
        builder = crate::json_deser::describe_transform_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeTransformJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTransformJob {
    type Output =
        Result<crate::output::DescribeTransformJobOutput, crate::error::DescribeTransformJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Provides a list of a trial's properties.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrial {
    _private: (),
}
impl DescribeTrial {
    /// Creates a new builder-style object to manufacture [`DescribeTrialInput`](crate::input::DescribeTrialInput)
    pub fn builder() -> crate::input::describe_trial_input::Builder {
        crate::input::describe_trial_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeTrialOutput, crate::error::DescribeTrialError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeTrialError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeTrialError {
                        kind: crate::error::DescribeTrialErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeTrialError::unhandled(e),
                },
                _ => crate::error::DescribeTrialError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_trial_output::Builder::default();
        builder =
            crate::json_deser::describe_trial_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeTrialError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTrial {
    type Output = Result<crate::output::DescribeTrialOutput, crate::error::DescribeTrialError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Provides a list of a trials component's properties.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrialComponent {
    _private: (),
}
impl DescribeTrialComponent {
    /// Creates a new builder-style object to manufacture [`DescribeTrialComponentInput`](crate::input::DescribeTrialComponentInput)
    pub fn builder() -> crate::input::describe_trial_component_input::Builder {
        crate::input::describe_trial_component_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DescribeTrialComponentOutput,
        crate::error::DescribeTrialComponentError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DescribeTrialComponentError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeTrialComponentError {
                        kind: crate::error::DescribeTrialComponentErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeTrialComponentError::unhandled(e),
                },
                _ => crate::error::DescribeTrialComponentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_trial_component_output::Builder::default();
        builder = crate::json_deser::describe_trial_component_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeTrialComponentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTrialComponent {
    type Output = Result<
        crate::output::DescribeTrialComponentOutput,
        crate::error::DescribeTrialComponentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes a user profile. For more information, see <code>CreateUserProfile</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeUserProfile {
    _private: (),
}
impl DescribeUserProfile {
    /// Creates a new builder-style object to manufacture [`DescribeUserProfileInput`](crate::input::DescribeUserProfileInput)
    pub fn builder() -> crate::input::describe_user_profile_input::Builder {
        crate::input::describe_user_profile_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeUserProfileOutput, crate::error::DescribeUserProfileError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeUserProfileError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DescribeUserProfileError {
                        kind: crate::error::DescribeUserProfileErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::DescribeUserProfileError::unhandled(e),
                },
                _ => crate::error::DescribeUserProfileError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_user_profile_output::Builder::default();
        builder = crate::json_deser::describe_user_profile_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeUserProfileError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeUserProfile {
    type Output =
        Result<crate::output::DescribeUserProfileOutput, crate::error::DescribeUserProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists private workforce information, including workforce name, Amazon Resource Name
/// (ARN), and, if applicable, allowed IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Allowable IP address
/// ranges are the IP addresses that workers can use to access tasks. </p>
/// <important>
/// <p>This operation applies only to private workforces.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeWorkforce {
    _private: (),
}
impl DescribeWorkforce {
    /// Creates a new builder-style object to manufacture [`DescribeWorkforceInput`](crate::input::DescribeWorkforceInput)
    pub fn builder() -> crate::input::describe_workforce_input::Builder {
        crate::input::describe_workforce_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeWorkforceOutput, crate::error::DescribeWorkforceError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeWorkforceError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_workforce_output::Builder::default();
        builder = crate::json_deser::describe_workforce_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DescribeWorkforceError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeWorkforce {
    type Output =
        Result<crate::output::DescribeWorkforceOutput, crate::error::DescribeWorkforceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets information about a specific work team. You can see information such as the
/// create date, the last updated date, membership information, and the work team's Amazon
/// Resource Name (ARN).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeWorkteam {
    _private: (),
}
impl DescribeWorkteam {
    /// Creates a new builder-style object to manufacture [`DescribeWorkteamInput`](crate::input::DescribeWorkteamInput)
    pub fn builder() -> crate::input::describe_workteam_input::Builder {
        crate::input::describe_workteam_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::DescribeWorkteamOutput, crate::error::DescribeWorkteamError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::DescribeWorkteamError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::describe_workteam_output::Builder::default();
        builder =
            crate::json_deser::describe_workteam_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::DescribeWorkteamError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeWorkteam {
    type Output =
        Result<crate::output::DescribeWorkteamOutput, crate::error::DescribeWorkteamError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Disables using Service Catalog in SageMaker. Service Catalog is used to create
/// SageMaker projects.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableSagemakerServicecatalogPortfolio {
    _private: (),
}
impl DisableSagemakerServicecatalogPortfolio {
    /// Creates a new builder-style object to manufacture [`DisableSagemakerServicecatalogPortfolioInput`](crate::input::DisableSagemakerServicecatalogPortfolioInput)
    pub fn builder() -> crate::input::disable_sagemaker_servicecatalog_portfolio_input::Builder {
        crate::input::disable_sagemaker_servicecatalog_portfolio_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DisableSagemakerServicecatalogPortfolioOutput,
        crate::error::DisableSagemakerServicecatalogPortfolioError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(
                crate::error::DisableSagemakerServicecatalogPortfolioError::generic(generic),
            );
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::disable_sagemaker_servicecatalog_portfolio_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableSagemakerServicecatalogPortfolio {
    type Output = Result<
        crate::output::DisableSagemakerServicecatalogPortfolioOutput,
        crate::error::DisableSagemakerServicecatalogPortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Disassociates a trial component from a trial. This doesn't effect other trials the
/// component is associated with. Before you can delete a component, you must disassociate the
/// component from all trials it is associated with. To associate a trial component with a trial,
/// call the <a>AssociateTrialComponent</a> API.</p>
/// <p>To get a list of the trials a component is associated with, use the <a>Search</a> API. Specify <code>ExperimentTrialComponent</code> for the <code>Resource</code> parameter.
/// The list appears in the response under <code>Results.TrialComponent.Parents</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateTrialComponent {
    _private: (),
}
impl DisassociateTrialComponent {
    /// Creates a new builder-style object to manufacture [`DisassociateTrialComponentInput`](crate::input::DisassociateTrialComponentInput)
    pub fn builder() -> crate::input::disassociate_trial_component_input::Builder {
        crate::input::disassociate_trial_component_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::DisassociateTrialComponentOutput,
        crate::error::DisassociateTrialComponentError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::DisassociateTrialComponentError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::DisassociateTrialComponentError {
                        kind: crate::error::DisassociateTrialComponentErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::DisassociateTrialComponentError::unhandled(e),
                },
                _ => crate::error::DisassociateTrialComponentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::disassociate_trial_component_output::Builder::default();
        builder = crate::json_deser::disassociate_trial_component_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::DisassociateTrialComponentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateTrialComponent {
    type Output = Result<
        crate::output::DisassociateTrialComponentOutput,
        crate::error::DisassociateTrialComponentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Enables using Service Catalog in SageMaker. Service Catalog is used to create
/// SageMaker projects.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableSagemakerServicecatalogPortfolio {
    _private: (),
}
impl EnableSagemakerServicecatalogPortfolio {
    /// Creates a new builder-style object to manufacture [`EnableSagemakerServicecatalogPortfolioInput`](crate::input::EnableSagemakerServicecatalogPortfolioInput)
    pub fn builder() -> crate::input::enable_sagemaker_servicecatalog_portfolio_input::Builder {
        crate::input::enable_sagemaker_servicecatalog_portfolio_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::EnableSagemakerServicecatalogPortfolioOutput,
        crate::error::EnableSagemakerServicecatalogPortfolioError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::EnableSagemakerServicecatalogPortfolioError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::enable_sagemaker_servicecatalog_portfolio_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableSagemakerServicecatalogPortfolio {
    type Output = Result<
        crate::output::EnableSagemakerServicecatalogPortfolioOutput,
        crate::error::EnableSagemakerServicecatalogPortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Describes a fleet.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDeviceFleetReport {
    _private: (),
}
impl GetDeviceFleetReport {
    /// Creates a new builder-style object to manufacture [`GetDeviceFleetReportInput`](crate::input::GetDeviceFleetReportInput)
    pub fn builder() -> crate::input::get_device_fleet_report_input::Builder {
        crate::input::get_device_fleet_report_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::GetDeviceFleetReportOutput, crate::error::GetDeviceFleetReportError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::GetDeviceFleetReportError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::get_device_fleet_report_output::Builder::default();
        builder = crate::json_deser::get_device_fleet_report_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::GetDeviceFleetReportError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDeviceFleetReport {
    type Output =
        Result<crate::output::GetDeviceFleetReportOutput, crate::error::GetDeviceFleetReportError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a resource policy that manages access for a model group. For information about
/// resource policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
/// policies and resource-based policies</a> in the <i>AWS Identity and
/// Access Management User Guide.</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetModelPackageGroupPolicy {
    _private: (),
}
impl GetModelPackageGroupPolicy {
    /// Creates a new builder-style object to manufacture [`GetModelPackageGroupPolicyInput`](crate::input::GetModelPackageGroupPolicyInput)
    pub fn builder() -> crate::input::get_model_package_group_policy_input::Builder {
        crate::input::get_model_package_group_policy_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::GetModelPackageGroupPolicyOutput,
        crate::error::GetModelPackageGroupPolicyError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::GetModelPackageGroupPolicyError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::get_model_package_group_policy_output::Builder::default();
        builder = crate::json_deser::get_model_package_group_policy_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::GetModelPackageGroupPolicyError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetModelPackageGroupPolicy {
    type Output = Result<
        crate::output::GetModelPackageGroupPolicyOutput,
        crate::error::GetModelPackageGroupPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets the status of Service Catalog in SageMaker. Service Catalog is used to create
/// SageMaker projects.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSagemakerServicecatalogPortfolioStatus {
    _private: (),
}
impl GetSagemakerServicecatalogPortfolioStatus {
    /// Creates a new builder-style object to manufacture [`GetSagemakerServicecatalogPortfolioStatusInput`](crate::input::GetSagemakerServicecatalogPortfolioStatusInput)
    pub fn builder() -> crate::input::get_sagemaker_servicecatalog_portfolio_status_input::Builder {
        crate::input::get_sagemaker_servicecatalog_portfolio_status_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::GetSagemakerServicecatalogPortfolioStatusOutput,
        crate::error::GetSagemakerServicecatalogPortfolioStatusError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(
                crate::error::GetSagemakerServicecatalogPortfolioStatusError::generic(generic),
            );
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::get_sagemaker_servicecatalog_portfolio_status_output::Builder::default();
        builder = crate::json_deser::get_sagemaker_servicecatalog_portfolio_status_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::GetSagemakerServicecatalogPortfolioStatusError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSagemakerServicecatalogPortfolioStatus {
    type Output = Result<
        crate::output::GetSagemakerServicecatalogPortfolioStatusOutput,
        crate::error::GetSagemakerServicecatalogPortfolioStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>An auto-complete API for the search functionality in the Amazon SageMaker console. It returns
/// suggestions of possible matches for the property name to use in <code>Search</code>
/// queries. Provides suggestions for <code>HyperParameters</code>, <code>Tags</code>, and
/// <code>Metrics</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSearchSuggestions {
    _private: (),
}
impl GetSearchSuggestions {
    /// Creates a new builder-style object to manufacture [`GetSearchSuggestionsInput`](crate::input::GetSearchSuggestionsInput)
    pub fn builder() -> crate::input::get_search_suggestions_input::Builder {
        crate::input::get_search_suggestions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::GetSearchSuggestionsOutput, crate::error::GetSearchSuggestionsError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::GetSearchSuggestionsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::get_search_suggestions_output::Builder::default();
        builder = crate::json_deser::get_search_suggestions_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::GetSearchSuggestionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSearchSuggestions {
    type Output =
        Result<crate::output::GetSearchSuggestionsOutput, crate::error::GetSearchSuggestionsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the actions in your account and their properties.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListActions {
    _private: (),
}
impl ListActions {
    /// Creates a new builder-style object to manufacture [`ListActionsInput`](crate::input::ListActionsInput)
    pub fn builder() -> crate::input::list_actions_input::Builder {
        crate::input::list_actions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListActionsOutput, crate::error::ListActionsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::ListActionsError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListActionsError {
                        kind: crate::error::ListActionsErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListActionsError::unhandled(e),
                },
                _ => crate::error::ListActionsError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_actions_output::Builder::default();
        builder =
            crate::json_deser::list_actions_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListActionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListActions {
    type Output = Result<crate::output::ListActionsOutput, crate::error::ListActionsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the machine learning algorithms that have been created.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAlgorithms {
    _private: (),
}
impl ListAlgorithms {
    /// Creates a new builder-style object to manufacture [`ListAlgorithmsInput`](crate::input::ListAlgorithmsInput)
    pub fn builder() -> crate::input::list_algorithms_input::Builder {
        crate::input::list_algorithms_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListAlgorithmsOutput, crate::error::ListAlgorithmsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListAlgorithmsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_algorithms_output::Builder::default();
        builder =
            crate::json_deser::list_algorithms_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListAlgorithmsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAlgorithms {
    type Output = Result<crate::output::ListAlgorithmsOutput, crate::error::ListAlgorithmsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the AppImageConfigs in your account and their properties. The list can be
/// filtered by creation time or modified time, and whether the AppImageConfig name contains
/// a specified string.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAppImageConfigs {
    _private: (),
}
impl ListAppImageConfigs {
    /// Creates a new builder-style object to manufacture [`ListAppImageConfigsInput`](crate::input::ListAppImageConfigsInput)
    pub fn builder() -> crate::input::list_app_image_configs_input::Builder {
        crate::input::list_app_image_configs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListAppImageConfigsOutput, crate::error::ListAppImageConfigsError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListAppImageConfigsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_app_image_configs_output::Builder::default();
        builder = crate::json_deser::list_app_image_configs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListAppImageConfigsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAppImageConfigs {
    type Output =
        Result<crate::output::ListAppImageConfigsOutput, crate::error::ListAppImageConfigsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists apps.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListApps {
    _private: (),
}
impl ListApps {
    /// Creates a new builder-style object to manufacture [`ListAppsInput`](crate::input::ListAppsInput)
    pub fn builder() -> crate::input::list_apps_input::Builder {
        crate::input::list_apps_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListAppsOutput, crate::error::ListAppsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListAppsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_apps_output::Builder::default();
        builder = crate::json_deser::list_apps_deser_operation(response.body().as_ref(), builder)
            .map_err(crate::error::ListAppsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListApps {
    type Output = Result<crate::output::ListAppsOutput, crate::error::ListAppsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the artifacts in your account and their properties.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListArtifacts {
    _private: (),
}
impl ListArtifacts {
    /// Creates a new builder-style object to manufacture [`ListArtifactsInput`](crate::input::ListArtifactsInput)
    pub fn builder() -> crate::input::list_artifacts_input::Builder {
        crate::input::list_artifacts_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListArtifactsOutput, crate::error::ListArtifactsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::ListArtifactsError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListArtifactsError {
                        kind: crate::error::ListArtifactsErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListArtifactsError::unhandled(e),
                },
                _ => crate::error::ListArtifactsError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_artifacts_output::Builder::default();
        builder =
            crate::json_deser::list_artifacts_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListArtifactsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListArtifacts {
    type Output = Result<crate::output::ListArtifactsOutput, crate::error::ListArtifactsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the associations in your account and their properties.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssociations {
    _private: (),
}
impl ListAssociations {
    /// Creates a new builder-style object to manufacture [`ListAssociationsInput`](crate::input::ListAssociationsInput)
    pub fn builder() -> crate::input::list_associations_input::Builder {
        crate::input::list_associations_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListAssociationsOutput, crate::error::ListAssociationsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::ListAssociationsError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListAssociationsError {
                        kind: crate::error::ListAssociationsErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListAssociationsError::unhandled(e),
                },
                _ => crate::error::ListAssociationsError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_associations_output::Builder::default();
        builder =
            crate::json_deser::list_associations_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListAssociationsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssociations {
    type Output =
        Result<crate::output::ListAssociationsOutput, crate::error::ListAssociationsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Request a list of jobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAutoMLJobs {
    _private: (),
}
impl ListAutoMLJobs {
    /// Creates a new builder-style object to manufacture [`ListAutoMLJobsInput`](crate::input::ListAutoMLJobsInput)
    pub fn builder() -> crate::input::list_auto_ml_jobs_input::Builder {
        crate::input::list_auto_ml_jobs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListAutoMLJobsOutput, crate::error::ListAutoMLJobsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListAutoMLJobsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_auto_ml_jobs_output::Builder::default();
        builder =
            crate::json_deser::list_auto_ml_jobs_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListAutoMLJobsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAutoMLJobs {
    type Output = Result<crate::output::ListAutoMLJobsOutput, crate::error::ListAutoMLJobsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>List the candidates created for the job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCandidatesForAutoMLJob {
    _private: (),
}
impl ListCandidatesForAutoMLJob {
    /// Creates a new builder-style object to manufacture [`ListCandidatesForAutoMLJobInput`](crate::input::ListCandidatesForAutoMLJobInput)
    pub fn builder() -> crate::input::list_candidates_for_auto_ml_job_input::Builder {
        crate::input::list_candidates_for_auto_ml_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListCandidatesForAutoMLJobOutput,
        crate::error::ListCandidatesForAutoMLJobError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::ListCandidatesForAutoMLJobError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListCandidatesForAutoMLJobError {
                        kind: crate::error::ListCandidatesForAutoMLJobErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListCandidatesForAutoMLJobError::unhandled(e),
                },
                _ => crate::error::ListCandidatesForAutoMLJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_candidates_for_auto_ml_job_output::Builder::default();
        builder = crate::json_deser::list_candidates_for_auto_ml_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListCandidatesForAutoMLJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCandidatesForAutoMLJob {
    type Output = Result<
        crate::output::ListCandidatesForAutoMLJobOutput,
        crate::error::ListCandidatesForAutoMLJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of the Git repositories in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCodeRepositories {
    _private: (),
}
impl ListCodeRepositories {
    /// Creates a new builder-style object to manufacture [`ListCodeRepositoriesInput`](crate::input::ListCodeRepositoriesInput)
    pub fn builder() -> crate::input::list_code_repositories_input::Builder {
        crate::input::list_code_repositories_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListCodeRepositoriesOutput, crate::error::ListCodeRepositoriesError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListCodeRepositoriesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_code_repositories_output::Builder::default();
        builder = crate::json_deser::list_code_repositories_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListCodeRepositoriesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCodeRepositories {
    type Output =
        Result<crate::output::ListCodeRepositoriesOutput, crate::error::ListCodeRepositoriesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists model compilation jobs that satisfy various filters.</p>
/// <p>To create a model compilation job, use <a>CreateCompilationJob</a>. To get
/// information about a particular model compilation job you have created, use <a>DescribeCompilationJob</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCompilationJobs {
    _private: (),
}
impl ListCompilationJobs {
    /// Creates a new builder-style object to manufacture [`ListCompilationJobsInput`](crate::input::ListCompilationJobsInput)
    pub fn builder() -> crate::input::list_compilation_jobs_input::Builder {
        crate::input::list_compilation_jobs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListCompilationJobsOutput, crate::error::ListCompilationJobsError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListCompilationJobsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_compilation_jobs_output::Builder::default();
        builder = crate::json_deser::list_compilation_jobs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListCompilationJobsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCompilationJobs {
    type Output =
        Result<crate::output::ListCompilationJobsOutput, crate::error::ListCompilationJobsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the contexts in your account and their properties.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListContexts {
    _private: (),
}
impl ListContexts {
    /// Creates a new builder-style object to manufacture [`ListContextsInput`](crate::input::ListContextsInput)
    pub fn builder() -> crate::input::list_contexts_input::Builder {
        crate::input::list_contexts_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListContextsOutput, crate::error::ListContextsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::ListContextsError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListContextsError {
                        kind: crate::error::ListContextsErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListContextsError::unhandled(e),
                },
                _ => crate::error::ListContextsError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_contexts_output::Builder::default();
        builder =
            crate::json_deser::list_contexts_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListContextsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListContexts {
    type Output = Result<crate::output::ListContextsOutput, crate::error::ListContextsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the data quality job definitions in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDataQualityJobDefinitions {
    _private: (),
}
impl ListDataQualityJobDefinitions {
    /// Creates a new builder-style object to manufacture [`ListDataQualityJobDefinitionsInput`](crate::input::ListDataQualityJobDefinitionsInput)
    pub fn builder() -> crate::input::list_data_quality_job_definitions_input::Builder {
        crate::input::list_data_quality_job_definitions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListDataQualityJobDefinitionsOutput,
        crate::error::ListDataQualityJobDefinitionsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListDataQualityJobDefinitionsError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::list_data_quality_job_definitions_output::Builder::default();
        builder = crate::json_deser::list_data_quality_job_definitions_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListDataQualityJobDefinitionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDataQualityJobDefinitions {
    type Output = Result<
        crate::output::ListDataQualityJobDefinitionsOutput,
        crate::error::ListDataQualityJobDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a list of devices in the fleet.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDeviceFleets {
    _private: (),
}
impl ListDeviceFleets {
    /// Creates a new builder-style object to manufacture [`ListDeviceFleetsInput`](crate::input::ListDeviceFleetsInput)
    pub fn builder() -> crate::input::list_device_fleets_input::Builder {
        crate::input::list_device_fleets_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListDeviceFleetsOutput, crate::error::ListDeviceFleetsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListDeviceFleetsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_device_fleets_output::Builder::default();
        builder = crate::json_deser::list_device_fleets_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListDeviceFleetsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDeviceFleets {
    type Output =
        Result<crate::output::ListDeviceFleetsOutput, crate::error::ListDeviceFleetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>A list of devices.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDevices {
    _private: (),
}
impl ListDevices {
    /// Creates a new builder-style object to manufacture [`ListDevicesInput`](crate::input::ListDevicesInput)
    pub fn builder() -> crate::input::list_devices_input::Builder {
        crate::input::list_devices_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListDevicesOutput, crate::error::ListDevicesError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListDevicesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_devices_output::Builder::default();
        builder =
            crate::json_deser::list_devices_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListDevicesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDevices {
    type Output = Result<crate::output::ListDevicesOutput, crate::error::ListDevicesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the domains.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDomains {
    _private: (),
}
impl ListDomains {
    /// Creates a new builder-style object to manufacture [`ListDomainsInput`](crate::input::ListDomainsInput)
    pub fn builder() -> crate::input::list_domains_input::Builder {
        crate::input::list_domains_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListDomainsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_domains_output::Builder::default();
        builder =
            crate::json_deser::list_domains_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListDomainsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDomains {
    type Output = Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a list of edge packaging jobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEdgePackagingJobs {
    _private: (),
}
impl ListEdgePackagingJobs {
    /// Creates a new builder-style object to manufacture [`ListEdgePackagingJobsInput`](crate::input::ListEdgePackagingJobsInput)
    pub fn builder() -> crate::input::list_edge_packaging_jobs_input::Builder {
        crate::input::list_edge_packaging_jobs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListEdgePackagingJobsOutput, crate::error::ListEdgePackagingJobsError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListEdgePackagingJobsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_edge_packaging_jobs_output::Builder::default();
        builder = crate::json_deser::list_edge_packaging_jobs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListEdgePackagingJobsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEdgePackagingJobs {
    type Output = Result<
        crate::output::ListEdgePackagingJobsOutput,
        crate::error::ListEdgePackagingJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists endpoint configurations.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEndpointConfigs {
    _private: (),
}
impl ListEndpointConfigs {
    /// Creates a new builder-style object to manufacture [`ListEndpointConfigsInput`](crate::input::ListEndpointConfigsInput)
    pub fn builder() -> crate::input::list_endpoint_configs_input::Builder {
        crate::input::list_endpoint_configs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListEndpointConfigsOutput, crate::error::ListEndpointConfigsError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListEndpointConfigsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_endpoint_configs_output::Builder::default();
        builder = crate::json_deser::list_endpoint_configs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListEndpointConfigsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEndpointConfigs {
    type Output =
        Result<crate::output::ListEndpointConfigsOutput, crate::error::ListEndpointConfigsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists endpoints.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEndpoints {
    _private: (),
}
impl ListEndpoints {
    /// Creates a new builder-style object to manufacture [`ListEndpointsInput`](crate::input::ListEndpointsInput)
    pub fn builder() -> crate::input::list_endpoints_input::Builder {
        crate::input::list_endpoints_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListEndpointsOutput, crate::error::ListEndpointsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListEndpointsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_endpoints_output::Builder::default();
        builder =
            crate::json_deser::list_endpoints_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListEndpointsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEndpoints {
    type Output = Result<crate::output::ListEndpointsOutput, crate::error::ListEndpointsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists all the experiments in your account. The list can be filtered to show only
/// experiments that were created in a specific time range. The list can be sorted by experiment
/// name or creation time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListExperiments {
    _private: (),
}
impl ListExperiments {
    /// Creates a new builder-style object to manufacture [`ListExperimentsInput`](crate::input::ListExperimentsInput)
    pub fn builder() -> crate::input::list_experiments_input::Builder {
        crate::input::list_experiments_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListExperimentsOutput, crate::error::ListExperimentsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListExperimentsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_experiments_output::Builder::default();
        builder =
            crate::json_deser::list_experiments_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListExperimentsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListExperiments {
    type Output = Result<crate::output::ListExperimentsOutput, crate::error::ListExperimentsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>List <code>FeatureGroup</code>s based on given filter and order.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFeatureGroups {
    _private: (),
}
impl ListFeatureGroups {
    /// Creates a new builder-style object to manufacture [`ListFeatureGroupsInput`](crate::input::ListFeatureGroupsInput)
    pub fn builder() -> crate::input::list_feature_groups_input::Builder {
        crate::input::list_feature_groups_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListFeatureGroupsOutput, crate::error::ListFeatureGroupsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListFeatureGroupsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_feature_groups_output::Builder::default();
        builder = crate::json_deser::list_feature_groups_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListFeatureGroupsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListFeatureGroups {
    type Output =
        Result<crate::output::ListFeatureGroupsOutput, crate::error::ListFeatureGroupsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns information about the flow definitions in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFlowDefinitions {
    _private: (),
}
impl ListFlowDefinitions {
    /// Creates a new builder-style object to manufacture [`ListFlowDefinitionsInput`](crate::input::ListFlowDefinitionsInput)
    pub fn builder() -> crate::input::list_flow_definitions_input::Builder {
        crate::input::list_flow_definitions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListFlowDefinitionsOutput, crate::error::ListFlowDefinitionsError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListFlowDefinitionsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_flow_definitions_output::Builder::default();
        builder = crate::json_deser::list_flow_definitions_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListFlowDefinitionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListFlowDefinitions {
    type Output =
        Result<crate::output::ListFlowDefinitionsOutput, crate::error::ListFlowDefinitionsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns information about the human task user interfaces in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListHumanTaskUis {
    _private: (),
}
impl ListHumanTaskUis {
    /// Creates a new builder-style object to manufacture [`ListHumanTaskUisInput`](crate::input::ListHumanTaskUisInput)
    pub fn builder() -> crate::input::list_human_task_uis_input::Builder {
        crate::input::list_human_task_uis_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListHumanTaskUisOutput, crate::error::ListHumanTaskUisError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListHumanTaskUisError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_human_task_uis_output::Builder::default();
        builder = crate::json_deser::list_human_task_uis_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListHumanTaskUisError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListHumanTaskUis {
    type Output =
        Result<crate::output::ListHumanTaskUisOutput, crate::error::ListHumanTaskUisError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of <a>HyperParameterTuningJobSummary</a> objects that
/// describe
/// the hyperparameter tuning jobs launched in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListHyperParameterTuningJobs {
    _private: (),
}
impl ListHyperParameterTuningJobs {
    /// Creates a new builder-style object to manufacture [`ListHyperParameterTuningJobsInput`](crate::input::ListHyperParameterTuningJobsInput)
    pub fn builder() -> crate::input::list_hyper_parameter_tuning_jobs_input::Builder {
        crate::input::list_hyper_parameter_tuning_jobs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListHyperParameterTuningJobsOutput,
        crate::error::ListHyperParameterTuningJobsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListHyperParameterTuningJobsError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::list_hyper_parameter_tuning_jobs_output::Builder::default();
        builder = crate::json_deser::list_hyper_parameter_tuning_jobs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListHyperParameterTuningJobsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListHyperParameterTuningJobs {
    type Output = Result<
        crate::output::ListHyperParameterTuningJobsOutput,
        crate::error::ListHyperParameterTuningJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the images in your account and their properties. The list can be filtered by
/// creation time or modified time, and whether the image name contains a specified string.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListImages {
    _private: (),
}
impl ListImages {
    /// Creates a new builder-style object to manufacture [`ListImagesInput`](crate::input::ListImagesInput)
    pub fn builder() -> crate::input::list_images_input::Builder {
        crate::input::list_images_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListImagesOutput, crate::error::ListImagesError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListImagesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_images_output::Builder::default();
        builder = crate::json_deser::list_images_deser_operation(response.body().as_ref(), builder)
            .map_err(crate::error::ListImagesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListImages {
    type Output = Result<crate::output::ListImagesOutput, crate::error::ListImagesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the versions of a specified image and their properties. The list can be filtered
/// by creation time or modified time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListImageVersions {
    _private: (),
}
impl ListImageVersions {
    /// Creates a new builder-style object to manufacture [`ListImageVersionsInput`](crate::input::ListImageVersionsInput)
    pub fn builder() -> crate::input::list_image_versions_input::Builder {
        crate::input::list_image_versions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListImageVersionsOutput, crate::error::ListImageVersionsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::ListImageVersionsError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListImageVersionsError {
                        kind: crate::error::ListImageVersionsErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListImageVersionsError::unhandled(e),
                },
                _ => crate::error::ListImageVersionsError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_image_versions_output::Builder::default();
        builder = crate::json_deser::list_image_versions_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListImageVersionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListImageVersions {
    type Output =
        Result<crate::output::ListImageVersionsOutput, crate::error::ListImageVersionsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of labeling jobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListLabelingJobs {
    _private: (),
}
impl ListLabelingJobs {
    /// Creates a new builder-style object to manufacture [`ListLabelingJobsInput`](crate::input::ListLabelingJobsInput)
    pub fn builder() -> crate::input::list_labeling_jobs_input::Builder {
        crate::input::list_labeling_jobs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListLabelingJobsOutput, crate::error::ListLabelingJobsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListLabelingJobsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_labeling_jobs_output::Builder::default();
        builder = crate::json_deser::list_labeling_jobs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListLabelingJobsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListLabelingJobs {
    type Output =
        Result<crate::output::ListLabelingJobsOutput, crate::error::ListLabelingJobsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of labeling jobs assigned to a specified work team.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListLabelingJobsForWorkteam {
    _private: (),
}
impl ListLabelingJobsForWorkteam {
    /// Creates a new builder-style object to manufacture [`ListLabelingJobsForWorkteamInput`](crate::input::ListLabelingJobsForWorkteamInput)
    pub fn builder() -> crate::input::list_labeling_jobs_for_workteam_input::Builder {
        crate::input::list_labeling_jobs_for_workteam_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListLabelingJobsForWorkteamOutput,
        crate::error::ListLabelingJobsForWorkteamError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::ListLabelingJobsForWorkteamError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListLabelingJobsForWorkteamError {
                        kind: crate::error::ListLabelingJobsForWorkteamErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListLabelingJobsForWorkteamError::unhandled(e),
                },
                _ => crate::error::ListLabelingJobsForWorkteamError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_labeling_jobs_for_workteam_output::Builder::default();
        builder = crate::json_deser::list_labeling_jobs_for_workteam_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListLabelingJobsForWorkteamError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListLabelingJobsForWorkteam {
    type Output = Result<
        crate::output::ListLabelingJobsForWorkteamOutput,
        crate::error::ListLabelingJobsForWorkteamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists model bias jobs definitions that satisfy various filters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListModelBiasJobDefinitions {
    _private: (),
}
impl ListModelBiasJobDefinitions {
    /// Creates a new builder-style object to manufacture [`ListModelBiasJobDefinitionsInput`](crate::input::ListModelBiasJobDefinitionsInput)
    pub fn builder() -> crate::input::list_model_bias_job_definitions_input::Builder {
        crate::input::list_model_bias_job_definitions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListModelBiasJobDefinitionsOutput,
        crate::error::ListModelBiasJobDefinitionsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListModelBiasJobDefinitionsError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_model_bias_job_definitions_output::Builder::default();
        builder = crate::json_deser::list_model_bias_job_definitions_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListModelBiasJobDefinitionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListModelBiasJobDefinitions {
    type Output = Result<
        crate::output::ListModelBiasJobDefinitionsOutput,
        crate::error::ListModelBiasJobDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists model explainability job definitions that satisfy various filters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListModelExplainabilityJobDefinitions {
    _private: (),
}
impl ListModelExplainabilityJobDefinitions {
    /// Creates a new builder-style object to manufacture [`ListModelExplainabilityJobDefinitionsInput`](crate::input::ListModelExplainabilityJobDefinitionsInput)
    pub fn builder() -> crate::input::list_model_explainability_job_definitions_input::Builder {
        crate::input::list_model_explainability_job_definitions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListModelExplainabilityJobDefinitionsOutput,
        crate::error::ListModelExplainabilityJobDefinitionsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListModelExplainabilityJobDefinitionsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::list_model_explainability_job_definitions_output::Builder::default();
        builder = crate::json_deser::list_model_explainability_job_definitions_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListModelExplainabilityJobDefinitionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListModelExplainabilityJobDefinitions {
    type Output = Result<
        crate::output::ListModelExplainabilityJobDefinitionsOutput,
        crate::error::ListModelExplainabilityJobDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of the model groups in your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListModelPackageGroups {
    _private: (),
}
impl ListModelPackageGroups {
    /// Creates a new builder-style object to manufacture [`ListModelPackageGroupsInput`](crate::input::ListModelPackageGroupsInput)
    pub fn builder() -> crate::input::list_model_package_groups_input::Builder {
        crate::input::list_model_package_groups_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListModelPackageGroupsOutput,
        crate::error::ListModelPackageGroupsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListModelPackageGroupsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_model_package_groups_output::Builder::default();
        builder = crate::json_deser::list_model_package_groups_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListModelPackageGroupsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListModelPackageGroups {
    type Output = Result<
        crate::output::ListModelPackageGroupsOutput,
        crate::error::ListModelPackageGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the model packages that have been created.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListModelPackages {
    _private: (),
}
impl ListModelPackages {
    /// Creates a new builder-style object to manufacture [`ListModelPackagesInput`](crate::input::ListModelPackagesInput)
    pub fn builder() -> crate::input::list_model_packages_input::Builder {
        crate::input::list_model_packages_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListModelPackagesOutput, crate::error::ListModelPackagesError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListModelPackagesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_model_packages_output::Builder::default();
        builder = crate::json_deser::list_model_packages_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListModelPackagesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListModelPackages {
    type Output =
        Result<crate::output::ListModelPackagesOutput, crate::error::ListModelPackagesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of model quality monitoring job definitions in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListModelQualityJobDefinitions {
    _private: (),
}
impl ListModelQualityJobDefinitions {
    /// Creates a new builder-style object to manufacture [`ListModelQualityJobDefinitionsInput`](crate::input::ListModelQualityJobDefinitionsInput)
    pub fn builder() -> crate::input::list_model_quality_job_definitions_input::Builder {
        crate::input::list_model_quality_job_definitions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListModelQualityJobDefinitionsOutput,
        crate::error::ListModelQualityJobDefinitionsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListModelQualityJobDefinitionsError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::list_model_quality_job_definitions_output::Builder::default();
        builder = crate::json_deser::list_model_quality_job_definitions_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListModelQualityJobDefinitionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListModelQualityJobDefinitions {
    type Output = Result<
        crate::output::ListModelQualityJobDefinitionsOutput,
        crate::error::ListModelQualityJobDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists models created with the <a>CreateModel</a> API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListModels {
    _private: (),
}
impl ListModels {
    /// Creates a new builder-style object to manufacture [`ListModelsInput`](crate::input::ListModelsInput)
    pub fn builder() -> crate::input::list_models_input::Builder {
        crate::input::list_models_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListModelsOutput, crate::error::ListModelsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListModelsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_models_output::Builder::default();
        builder = crate::json_deser::list_models_deser_operation(response.body().as_ref(), builder)
            .map_err(crate::error::ListModelsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListModels {
    type Output = Result<crate::output::ListModelsOutput, crate::error::ListModelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns list of all monitoring job executions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMonitoringExecutions {
    _private: (),
}
impl ListMonitoringExecutions {
    /// Creates a new builder-style object to manufacture [`ListMonitoringExecutionsInput`](crate::input::ListMonitoringExecutionsInput)
    pub fn builder() -> crate::input::list_monitoring_executions_input::Builder {
        crate::input::list_monitoring_executions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListMonitoringExecutionsOutput,
        crate::error::ListMonitoringExecutionsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListMonitoringExecutionsError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_monitoring_executions_output::Builder::default();
        builder = crate::json_deser::list_monitoring_executions_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListMonitoringExecutionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListMonitoringExecutions {
    type Output = Result<
        crate::output::ListMonitoringExecutionsOutput,
        crate::error::ListMonitoringExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns list of all monitoring schedules.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMonitoringSchedules {
    _private: (),
}
impl ListMonitoringSchedules {
    /// Creates a new builder-style object to manufacture [`ListMonitoringSchedulesInput`](crate::input::ListMonitoringSchedulesInput)
    pub fn builder() -> crate::input::list_monitoring_schedules_input::Builder {
        crate::input::list_monitoring_schedules_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListMonitoringSchedulesOutput,
        crate::error::ListMonitoringSchedulesError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListMonitoringSchedulesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_monitoring_schedules_output::Builder::default();
        builder = crate::json_deser::list_monitoring_schedules_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListMonitoringSchedulesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListMonitoringSchedules {
    type Output = Result<
        crate::output::ListMonitoringSchedulesOutput,
        crate::error::ListMonitoringSchedulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists notebook instance lifestyle configurations created with the <a>CreateNotebookInstanceLifecycleConfig</a> API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListNotebookInstanceLifecycleConfigs {
    _private: (),
}
impl ListNotebookInstanceLifecycleConfigs {
    /// Creates a new builder-style object to manufacture [`ListNotebookInstanceLifecycleConfigsInput`](crate::input::ListNotebookInstanceLifecycleConfigsInput)
    pub fn builder() -> crate::input::list_notebook_instance_lifecycle_configs_input::Builder {
        crate::input::list_notebook_instance_lifecycle_configs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListNotebookInstanceLifecycleConfigsOutput,
        crate::error::ListNotebookInstanceLifecycleConfigsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListNotebookInstanceLifecycleConfigsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::list_notebook_instance_lifecycle_configs_output::Builder::default();
        builder = crate::json_deser::list_notebook_instance_lifecycle_configs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListNotebookInstanceLifecycleConfigsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListNotebookInstanceLifecycleConfigs {
    type Output = Result<
        crate::output::ListNotebookInstanceLifecycleConfigsOutput,
        crate::error::ListNotebookInstanceLifecycleConfigsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a list of the Amazon SageMaker notebook instances in the requester's account in an AWS
/// Region. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListNotebookInstances {
    _private: (),
}
impl ListNotebookInstances {
    /// Creates a new builder-style object to manufacture [`ListNotebookInstancesInput`](crate::input::ListNotebookInstancesInput)
    pub fn builder() -> crate::input::list_notebook_instances_input::Builder {
        crate::input::list_notebook_instances_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListNotebookInstancesOutput, crate::error::ListNotebookInstancesError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListNotebookInstancesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_notebook_instances_output::Builder::default();
        builder = crate::json_deser::list_notebook_instances_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListNotebookInstancesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListNotebookInstances {
    type Output = Result<
        crate::output::ListNotebookInstancesOutput,
        crate::error::ListNotebookInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of the pipeline executions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelineExecutions {
    _private: (),
}
impl ListPipelineExecutions {
    /// Creates a new builder-style object to manufacture [`ListPipelineExecutionsInput`](crate::input::ListPipelineExecutionsInput)
    pub fn builder() -> crate::input::list_pipeline_executions_input::Builder {
        crate::input::list_pipeline_executions_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListPipelineExecutionsOutput,
        crate::error::ListPipelineExecutionsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::ListPipelineExecutionsError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListPipelineExecutionsError {
                        kind: crate::error::ListPipelineExecutionsErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListPipelineExecutionsError::unhandled(e),
                },
                _ => crate::error::ListPipelineExecutionsError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_pipeline_executions_output::Builder::default();
        builder = crate::json_deser::list_pipeline_executions_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListPipelineExecutionsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPipelineExecutions {
    type Output = Result<
        crate::output::ListPipelineExecutionsOutput,
        crate::error::ListPipelineExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of <code>PipeLineExecutionStep</code> objects.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelineExecutionSteps {
    _private: (),
}
impl ListPipelineExecutionSteps {
    /// Creates a new builder-style object to manufacture [`ListPipelineExecutionStepsInput`](crate::input::ListPipelineExecutionStepsInput)
    pub fn builder() -> crate::input::list_pipeline_execution_steps_input::Builder {
        crate::input::list_pipeline_execution_steps_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListPipelineExecutionStepsOutput,
        crate::error::ListPipelineExecutionStepsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::ListPipelineExecutionStepsError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListPipelineExecutionStepsError {
                        kind: crate::error::ListPipelineExecutionStepsErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListPipelineExecutionStepsError::unhandled(e),
                },
                _ => crate::error::ListPipelineExecutionStepsError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_pipeline_execution_steps_output::Builder::default();
        builder = crate::json_deser::list_pipeline_execution_steps_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListPipelineExecutionStepsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPipelineExecutionSteps {
    type Output = Result<
        crate::output::ListPipelineExecutionStepsOutput,
        crate::error::ListPipelineExecutionStepsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of parameters for a pipeline execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelineParametersForExecution {
    _private: (),
}
impl ListPipelineParametersForExecution {
    /// Creates a new builder-style object to manufacture [`ListPipelineParametersForExecutionInput`](crate::input::ListPipelineParametersForExecutionInput)
    pub fn builder() -> crate::input::list_pipeline_parameters_for_execution_input::Builder {
        crate::input::list_pipeline_parameters_for_execution_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListPipelineParametersForExecutionOutput,
        crate::error::ListPipelineParametersForExecutionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::ListPipelineParametersForExecutionError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListPipelineParametersForExecutionError { kind: crate::error::ListPipelineParametersForExecutionErrorKind::ResourceNotFound(body), meta: generic },
                    Err(e) => crate::error::ListPipelineParametersForExecutionError::unhandled(e)
                }
                _ => crate::error::ListPipelineParametersForExecutionError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::list_pipeline_parameters_for_execution_output::Builder::default();
        builder = crate::json_deser::list_pipeline_parameters_for_execution_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListPipelineParametersForExecutionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPipelineParametersForExecution {
    type Output = Result<
        crate::output::ListPipelineParametersForExecutionOutput,
        crate::error::ListPipelineParametersForExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of pipelines.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelines {
    _private: (),
}
impl ListPipelines {
    /// Creates a new builder-style object to manufacture [`ListPipelinesInput`](crate::input::ListPipelinesInput)
    pub fn builder() -> crate::input::list_pipelines_input::Builder {
        crate::input::list_pipelines_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListPipelinesOutput, crate::error::ListPipelinesError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListPipelinesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_pipelines_output::Builder::default();
        builder =
            crate::json_deser::list_pipelines_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListPipelinesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPipelines {
    type Output = Result<crate::output::ListPipelinesOutput, crate::error::ListPipelinesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists processing jobs that satisfy various filters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProcessingJobs {
    _private: (),
}
impl ListProcessingJobs {
    /// Creates a new builder-style object to manufacture [`ListProcessingJobsInput`](crate::input::ListProcessingJobsInput)
    pub fn builder() -> crate::input::list_processing_jobs_input::Builder {
        crate::input::list_processing_jobs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListProcessingJobsOutput, crate::error::ListProcessingJobsError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListProcessingJobsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_processing_jobs_output::Builder::default();
        builder = crate::json_deser::list_processing_jobs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListProcessingJobsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProcessingJobs {
    type Output =
        Result<crate::output::ListProcessingJobsOutput, crate::error::ListProcessingJobsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of the projects in an AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProjects {
    _private: (),
}
impl ListProjects {
    /// Creates a new builder-style object to manufacture [`ListProjectsInput`](crate::input::ListProjectsInput)
    pub fn builder() -> crate::input::list_projects_input::Builder {
        crate::input::list_projects_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListProjectsOutput, crate::error::ListProjectsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListProjectsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_projects_output::Builder::default();
        builder =
            crate::json_deser::list_projects_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListProjectsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProjects {
    type Output = Result<crate::output::ListProjectsOutput, crate::error::ListProjectsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of the work teams that you are subscribed to in the AWS Marketplace. The
/// list may be empty if no work team satisfies the filter specified in the
/// <code>NameContains</code> parameter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSubscribedWorkteams {
    _private: (),
}
impl ListSubscribedWorkteams {
    /// Creates a new builder-style object to manufacture [`ListSubscribedWorkteamsInput`](crate::input::ListSubscribedWorkteamsInput)
    pub fn builder() -> crate::input::list_subscribed_workteams_input::Builder {
        crate::input::list_subscribed_workteams_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListSubscribedWorkteamsOutput,
        crate::error::ListSubscribedWorkteamsError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListSubscribedWorkteamsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_subscribed_workteams_output::Builder::default();
        builder = crate::json_deser::list_subscribed_workteams_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListSubscribedWorkteamsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSubscribedWorkteams {
    type Output = Result<
        crate::output::ListSubscribedWorkteamsOutput,
        crate::error::ListSubscribedWorkteamsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns the tags for the specified Amazon SageMaker resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTags {
    _private: (),
}
impl ListTags {
    /// Creates a new builder-style object to manufacture [`ListTagsInput`](crate::input::ListTagsInput)
    pub fn builder() -> crate::input::list_tags_input::Builder {
        crate::input::list_tags_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListTagsOutput, crate::error::ListTagsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListTagsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_tags_output::Builder::default();
        builder = crate::json_deser::list_tags_deser_operation(response.body().as_ref(), builder)
            .map_err(crate::error::ListTagsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTags {
    type Output = Result<crate::output::ListTagsOutput, crate::error::ListTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists training jobs.</p>
/// <note>
/// <p>When <code>StatusEquals</code> and <code>MaxResults</code> are set at the same
/// time, the <code>MaxResults</code> number of training jobs are first retrieved
/// ignoring the <code>StatusEquals</code> parameter and then they are filtered by the
/// <code>StatusEquals</code> parameter, which is returned as a response.</p>
/// <p>For example, if <code>ListTrainingJobs</code> is invoked with the following
/// parameters:</p>
/// <p>
/// <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code>
/// </p>
/// <p>First, 100 trainings jobs with any status, including those other than
/// <code>InProgress</code>, are selected (sorted according to the creation time,
/// from the most current to the oldest). Next, those with a status of
/// <code>InProgress</code> are returned.</p>
/// <p>You can quickly test the API using the following AWS CLI code.</p>
/// <p>
/// <code>aws sagemaker list-training-jobs --max-results 100 --status-equals
/// InProgress</code>
/// </p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTrainingJobs {
    _private: (),
}
impl ListTrainingJobs {
    /// Creates a new builder-style object to manufacture [`ListTrainingJobsInput`](crate::input::ListTrainingJobsInput)
    pub fn builder() -> crate::input::list_training_jobs_input::Builder {
        crate::input::list_training_jobs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListTrainingJobsOutput, crate::error::ListTrainingJobsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListTrainingJobsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_training_jobs_output::Builder::default();
        builder = crate::json_deser::list_training_jobs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListTrainingJobsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTrainingJobs {
    type Output =
        Result<crate::output::ListTrainingJobsOutput, crate::error::ListTrainingJobsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of <a>TrainingJobSummary</a> objects that describe the training
/// jobs that a hyperparameter tuning job launched.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTrainingJobsForHyperParameterTuningJob {
    _private: (),
}
impl ListTrainingJobsForHyperParameterTuningJob {
    /// Creates a new builder-style object to manufacture [`ListTrainingJobsForHyperParameterTuningJobInput`](crate::input::ListTrainingJobsForHyperParameterTuningJobInput)
    pub fn builder(
    ) -> crate::input::list_training_jobs_for_hyper_parameter_tuning_job_input::Builder {
        crate::input::list_training_jobs_for_hyper_parameter_tuning_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::ListTrainingJobsForHyperParameterTuningJobOutput,
        crate::error::ListTrainingJobsForHyperParameterTuningJobError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code =
                match generic.code() {
                    Some(code) => code,
                    None => return Err(
                        crate::error::ListTrainingJobsForHyperParameterTuningJobError::unhandled(
                            generic,
                        ),
                    ),
                };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListTrainingJobsForHyperParameterTuningJobError { kind: crate::error::ListTrainingJobsForHyperParameterTuningJobErrorKind::ResourceNotFound(body), meta: generic },
                    Err(e) => crate::error::ListTrainingJobsForHyperParameterTuningJobError::unhandled(e)
                }
                _ => crate::error::ListTrainingJobsForHyperParameterTuningJobError::generic(generic)
            });
        }
        #[allow(unused_mut)]let mut builder = crate::output::list_training_jobs_for_hyper_parameter_tuning_job_output::Builder::default();
        builder =
            crate::json_deser::list_training_jobs_for_hyper_parameter_tuning_job_deser_operation(
                response.body().as_ref(),
                builder,
            )
            .map_err(crate::error::ListTrainingJobsForHyperParameterTuningJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTrainingJobsForHyperParameterTuningJob {
    type Output = Result<
        crate::output::ListTrainingJobsForHyperParameterTuningJobOutput,
        crate::error::ListTrainingJobsForHyperParameterTuningJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists transform jobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTransformJobs {
    _private: (),
}
impl ListTransformJobs {
    /// Creates a new builder-style object to manufacture [`ListTransformJobsInput`](crate::input::ListTransformJobsInput)
    pub fn builder() -> crate::input::list_transform_jobs_input::Builder {
        crate::input::list_transform_jobs_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListTransformJobsOutput, crate::error::ListTransformJobsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListTransformJobsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_transform_jobs_output::Builder::default();
        builder = crate::json_deser::list_transform_jobs_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListTransformJobsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTransformJobs {
    type Output =
        Result<crate::output::ListTransformJobsOutput, crate::error::ListTransformJobsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the trial components in your account. You can sort the list by trial component name
/// or creation time. You can filter the list to show only components that were created in a
/// specific time range. You can also filter on one of the following:</p>
/// <ul>
/// <li>
/// <p>
/// <code>ExperimentName</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>SourceArn</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>TrialName</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTrialComponents {
    _private: (),
}
impl ListTrialComponents {
    /// Creates a new builder-style object to manufacture [`ListTrialComponentsInput`](crate::input::ListTrialComponentsInput)
    pub fn builder() -> crate::input::list_trial_components_input::Builder {
        crate::input::list_trial_components_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListTrialComponentsOutput, crate::error::ListTrialComponentsError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::ListTrialComponentsError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListTrialComponentsError {
                        kind: crate::error::ListTrialComponentsErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListTrialComponentsError::unhandled(e),
                },
                _ => crate::error::ListTrialComponentsError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_trial_components_output::Builder::default();
        builder = crate::json_deser::list_trial_components_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListTrialComponentsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTrialComponents {
    type Output =
        Result<crate::output::ListTrialComponentsOutput, crate::error::ListTrialComponentsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists the trials in your account. Specify an experiment name to limit the list to the
/// trials that are part of that experiment. Specify a trial component name to limit the list to
/// the trials that associated with that trial component. The list can be filtered to show only
/// trials that were created in a specific time range. The list can be sorted by trial name or
/// creation time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTrials {
    _private: (),
}
impl ListTrials {
    /// Creates a new builder-style object to manufacture [`ListTrialsInput`](crate::input::ListTrialsInput)
    pub fn builder() -> crate::input::list_trials_input::Builder {
        crate::input::list_trials_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListTrialsOutput, crate::error::ListTrialsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::ListTrialsError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::ListTrialsError {
                        kind: crate::error::ListTrialsErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::ListTrialsError::unhandled(e),
                },
                _ => crate::error::ListTrialsError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_trials_output::Builder::default();
        builder = crate::json_deser::list_trials_deser_operation(response.body().as_ref(), builder)
            .map_err(crate::error::ListTrialsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTrials {
    type Output = Result<crate::output::ListTrialsOutput, crate::error::ListTrialsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Lists user profiles.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListUserProfiles {
    _private: (),
}
impl ListUserProfiles {
    /// Creates a new builder-style object to manufacture [`ListUserProfilesInput`](crate::input::ListUserProfilesInput)
    pub fn builder() -> crate::input::list_user_profiles_input::Builder {
        crate::input::list_user_profiles_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListUserProfilesOutput, crate::error::ListUserProfilesError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListUserProfilesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_user_profiles_output::Builder::default();
        builder = crate::json_deser::list_user_profiles_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::ListUserProfilesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListUserProfiles {
    type Output =
        Result<crate::output::ListUserProfilesOutput, crate::error::ListUserProfilesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Use this operation to list all private and vendor workforces in an AWS Region. Note that you can only
/// have one private workforce per AWS Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkforces {
    _private: (),
}
impl ListWorkforces {
    /// Creates a new builder-style object to manufacture [`ListWorkforcesInput`](crate::input::ListWorkforcesInput)
    pub fn builder() -> crate::input::list_workforces_input::Builder {
        crate::input::list_workforces_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListWorkforcesOutput, crate::error::ListWorkforcesError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListWorkforcesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_workforces_output::Builder::default();
        builder =
            crate::json_deser::list_workforces_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListWorkforcesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListWorkforces {
    type Output = Result<crate::output::ListWorkforcesOutput, crate::error::ListWorkforcesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Gets a list of private work teams that you have defined in a region. The list may be empty if
/// no work team satisfies the filter specified in the <code>NameContains</code>
/// parameter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkteams {
    _private: (),
}
impl ListWorkteams {
    /// Creates a new builder-style object to manufacture [`ListWorkteamsInput`](crate::input::ListWorkteamsInput)
    pub fn builder() -> crate::input::list_workteams_input::Builder {
        crate::input::list_workteams_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::ListWorkteamsOutput, crate::error::ListWorkteamsError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::ListWorkteamsError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::list_workteams_output::Builder::default();
        builder =
            crate::json_deser::list_workteams_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::ListWorkteamsError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListWorkteams {
    type Output = Result<crate::output::ListWorkteamsOutput, crate::error::ListWorkteamsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Adds a resouce policy to control access to a model group. For information about
/// resoure policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
/// policies and resource-based policies</a> in the <i>AWS Identity and Access Management User Guide.</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutModelPackageGroupPolicy {
    _private: (),
}
impl PutModelPackageGroupPolicy {
    /// Creates a new builder-style object to manufacture [`PutModelPackageGroupPolicyInput`](crate::input::PutModelPackageGroupPolicyInput)
    pub fn builder() -> crate::input::put_model_package_group_policy_input::Builder {
        crate::input::put_model_package_group_policy_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::PutModelPackageGroupPolicyOutput,
        crate::error::PutModelPackageGroupPolicyError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::PutModelPackageGroupPolicyError::generic(
                generic,
            ));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::put_model_package_group_policy_output::Builder::default();
        builder = crate::json_deser::put_model_package_group_policy_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::PutModelPackageGroupPolicyError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutModelPackageGroupPolicy {
    type Output = Result<
        crate::output::PutModelPackageGroupPolicyOutput,
        crate::error::PutModelPackageGroupPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Register devices.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterDevices {
    _private: (),
}
impl RegisterDevices {
    /// Creates a new builder-style object to manufacture [`RegisterDevicesInput`](crate::input::RegisterDevicesInput)
    pub fn builder() -> crate::input::register_devices_input::Builder {
        crate::input::register_devices_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::RegisterDevicesOutput, crate::error::RegisterDevicesError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::RegisterDevicesError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::RegisterDevicesError {
                        kind: crate::error::RegisterDevicesErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::RegisterDevicesError::unhandled(e),
                },
                _ => crate::error::RegisterDevicesError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::register_devices_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterDevices {
    type Output = Result<crate::output::RegisterDevicesOutput, crate::error::RegisterDevicesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Renders the UI template so that you can preview the worker's experience. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RenderUiTemplate {
    _private: (),
}
impl RenderUiTemplate {
    /// Creates a new builder-style object to manufacture [`RenderUiTemplateInput`](crate::input::RenderUiTemplateInput)
    pub fn builder() -> crate::input::render_ui_template_input::Builder {
        crate::input::render_ui_template_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::RenderUiTemplateOutput, crate::error::RenderUiTemplateError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::RenderUiTemplateError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::RenderUiTemplateError {
                        kind: crate::error::RenderUiTemplateErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::RenderUiTemplateError::unhandled(e),
                },
                _ => crate::error::RenderUiTemplateError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::render_ui_template_output::Builder::default();
        builder = crate::json_deser::render_ui_template_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::RenderUiTemplateError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RenderUiTemplate {
    type Output =
        Result<crate::output::RenderUiTemplateOutput, crate::error::RenderUiTemplateError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Finds Amazon SageMaker resources that match a search query. Matching resources are returned
/// as a list of <code>SearchRecord</code> objects in the response. You can sort the search
/// results by any resource property in a ascending or descending order.</p>
/// <p>You can query against the following value types: numeric, text, Boolean, and
/// timestamp.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct Search {
    _private: (),
}
impl Search {
    /// Creates a new builder-style object to manufacture [`SearchInput`](crate::input::SearchInput)
    pub fn builder() -> crate::input::search_input::Builder {
        crate::input::search_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::SearchOutput, crate::error::SearchError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::SearchError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::search_output::Builder::default();
        builder = crate::json_deser::search_deser_operation(response.body().as_ref(), builder)
            .map_err(crate::error::SearchError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for Search {
    type Output = Result<crate::output::SearchOutput, crate::error::SearchError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Notifies the pipeline that the execution of a callback step failed, along with a
/// message describing why. When a callback step is run, the pipeline generates a callback
/// token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendPipelineExecutionStepFailure {
    _private: (),
}
impl SendPipelineExecutionStepFailure {
    /// Creates a new builder-style object to manufacture [`SendPipelineExecutionStepFailureInput`](crate::input::SendPipelineExecutionStepFailureInput)
    pub fn builder() -> crate::input::send_pipeline_execution_step_failure_input::Builder {
        crate::input::send_pipeline_execution_step_failure_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::SendPipelineExecutionStepFailureOutput,
        crate::error::SendPipelineExecutionStepFailureError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::SendPipelineExecutionStepFailureError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::SendPipelineExecutionStepFailureError { kind: crate::error::SendPipelineExecutionStepFailureErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::SendPipelineExecutionStepFailureError::unhandled(e)
                }
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::SendPipelineExecutionStepFailureError { kind: crate::error::SendPipelineExecutionStepFailureErrorKind::ResourceNotFound(body), meta: generic },
                    Err(e) => crate::error::SendPipelineExecutionStepFailureError::unhandled(e)
                }
                _ => crate::error::SendPipelineExecutionStepFailureError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::send_pipeline_execution_step_failure_output::Builder::default();
        builder = crate::json_deser::send_pipeline_execution_step_failure_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::SendPipelineExecutionStepFailureError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendPipelineExecutionStepFailure {
    type Output = Result<
        crate::output::SendPipelineExecutionStepFailureOutput,
        crate::error::SendPipelineExecutionStepFailureError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Notifies the pipeline that the execution of a callback step succeeded and provides a
/// list of the step's output parameters. When a callback step is run, the pipeline generates
/// a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendPipelineExecutionStepSuccess {
    _private: (),
}
impl SendPipelineExecutionStepSuccess {
    /// Creates a new builder-style object to manufacture [`SendPipelineExecutionStepSuccessInput`](crate::input::SendPipelineExecutionStepSuccessInput)
    pub fn builder() -> crate::input::send_pipeline_execution_step_success_input::Builder {
        crate::input::send_pipeline_execution_step_success_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::SendPipelineExecutionStepSuccessOutput,
        crate::error::SendPipelineExecutionStepSuccessError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::SendPipelineExecutionStepSuccessError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::SendPipelineExecutionStepSuccessError { kind: crate::error::SendPipelineExecutionStepSuccessErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::SendPipelineExecutionStepSuccessError::unhandled(e)
                }
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::SendPipelineExecutionStepSuccessError { kind: crate::error::SendPipelineExecutionStepSuccessErrorKind::ResourceNotFound(body), meta: generic },
                    Err(e) => crate::error::SendPipelineExecutionStepSuccessError::unhandled(e)
                }
                _ => crate::error::SendPipelineExecutionStepSuccessError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::send_pipeline_execution_step_success_output::Builder::default();
        builder = crate::json_deser::send_pipeline_execution_step_success_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::SendPipelineExecutionStepSuccessError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendPipelineExecutionStepSuccess {
    type Output = Result<
        crate::output::SendPipelineExecutionStepSuccessOutput,
        crate::error::SendPipelineExecutionStepSuccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Starts a previously stopped monitoring schedule.</p>
/// <note>
/// <p>By default, when you successfully create a new schedule, the status of a monitoring
/// schedule is <code>scheduled</code>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartMonitoringSchedule {
    _private: (),
}
impl StartMonitoringSchedule {
    /// Creates a new builder-style object to manufacture [`StartMonitoringScheduleInput`](crate::input::StartMonitoringScheduleInput)
    pub fn builder() -> crate::input::start_monitoring_schedule_input::Builder {
        crate::input::start_monitoring_schedule_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::StartMonitoringScheduleOutput,
        crate::error::StartMonitoringScheduleError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::StartMonitoringScheduleError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StartMonitoringScheduleError {
                        kind: crate::error::StartMonitoringScheduleErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::StartMonitoringScheduleError::unhandled(e),
                },
                _ => crate::error::StartMonitoringScheduleError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::start_monitoring_schedule_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartMonitoringSchedule {
    type Output = Result<
        crate::output::StartMonitoringScheduleOutput,
        crate::error::StartMonitoringScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Launches an ML compute instance with the latest version of the libraries and
/// attaches your ML storage volume. After configuring the notebook instance, Amazon SageMaker sets the
/// notebook instance status to <code>InService</code>. A notebook instance's status must be
/// <code>InService</code> before you can connect to your Jupyter notebook. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartNotebookInstance {
    _private: (),
}
impl StartNotebookInstance {
    /// Creates a new builder-style object to manufacture [`StartNotebookInstanceInput`](crate::input::StartNotebookInstanceInput)
    pub fn builder() -> crate::input::start_notebook_instance_input::Builder {
        crate::input::start_notebook_instance_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StartNotebookInstanceOutput, crate::error::StartNotebookInstanceError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::StartNotebookInstanceError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StartNotebookInstanceError {
                        kind: crate::error::StartNotebookInstanceErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::StartNotebookInstanceError::unhandled(e),
                },
                _ => crate::error::StartNotebookInstanceError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::start_notebook_instance_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartNotebookInstance {
    type Output = Result<
        crate::output::StartNotebookInstanceOutput,
        crate::error::StartNotebookInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Starts a pipeline execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartPipelineExecution {
    _private: (),
}
impl StartPipelineExecution {
    /// Creates a new builder-style object to manufacture [`StartPipelineExecutionInput`](crate::input::StartPipelineExecutionInput)
    pub fn builder() -> crate::input::start_pipeline_execution_input::Builder {
        crate::input::start_pipeline_execution_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::StartPipelineExecutionOutput,
        crate::error::StartPipelineExecutionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::StartPipelineExecutionError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StartPipelineExecutionError {
                        kind: crate::error::StartPipelineExecutionErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::StartPipelineExecutionError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StartPipelineExecutionError {
                        kind: crate::error::StartPipelineExecutionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::StartPipelineExecutionError::unhandled(e),
                },
                _ => crate::error::StartPipelineExecutionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::start_pipeline_execution_output::Builder::default();
        builder = crate::json_deser::start_pipeline_execution_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::StartPipelineExecutionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartPipelineExecution {
    type Output = Result<
        crate::output::StartPipelineExecutionOutput,
        crate::error::StartPipelineExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>A method for forcing the termination of a running job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopAutoMLJob {
    _private: (),
}
impl StopAutoMLJob {
    /// Creates a new builder-style object to manufacture [`StopAutoMLJobInput`](crate::input::StopAutoMLJobInput)
    pub fn builder() -> crate::input::stop_auto_ml_job_input::Builder {
        crate::input::stop_auto_ml_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StopAutoMLJobOutput, crate::error::StopAutoMLJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::StopAutoMLJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StopAutoMLJobError {
                        kind: crate::error::StopAutoMLJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::StopAutoMLJobError::unhandled(e),
                },
                _ => crate::error::StopAutoMLJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_auto_ml_job_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopAutoMLJob {
    type Output = Result<crate::output::StopAutoMLJobOutput, crate::error::StopAutoMLJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Stops a model compilation job.</p>
/// <p> To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the
/// job down. If the job hasn't stopped, it sends the SIGKILL signal.</p>
/// <p>When it receives a <code>StopCompilationJob</code> request, Amazon SageMaker changes the <a>CompilationJobSummary$CompilationJobStatus</a> of the job to
/// <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the <a>CompilationJobSummary$CompilationJobStatus</a> to <code>Stopped</code>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopCompilationJob {
    _private: (),
}
impl StopCompilationJob {
    /// Creates a new builder-style object to manufacture [`StopCompilationJobInput`](crate::input::StopCompilationJobInput)
    pub fn builder() -> crate::input::stop_compilation_job_input::Builder {
        crate::input::stop_compilation_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StopCompilationJobOutput, crate::error::StopCompilationJobError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::StopCompilationJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StopCompilationJobError {
                        kind: crate::error::StopCompilationJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::StopCompilationJobError::unhandled(e),
                },
                _ => crate::error::StopCompilationJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_compilation_job_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopCompilationJob {
    type Output =
        Result<crate::output::StopCompilationJobOutput, crate::error::StopCompilationJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Request to stop an edge packaging job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopEdgePackagingJob {
    _private: (),
}
impl StopEdgePackagingJob {
    /// Creates a new builder-style object to manufacture [`StopEdgePackagingJobInput`](crate::input::StopEdgePackagingJobInput)
    pub fn builder() -> crate::input::stop_edge_packaging_job_input::Builder {
        crate::input::stop_edge_packaging_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StopEdgePackagingJobOutput, crate::error::StopEdgePackagingJobError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::StopEdgePackagingJobError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_edge_packaging_job_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopEdgePackagingJob {
    type Output =
        Result<crate::output::StopEdgePackagingJobOutput, crate::error::StopEdgePackagingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Stops a running hyperparameter tuning job and all running training jobs that the
/// tuning job launched.</p>
/// <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All
/// data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the
/// tuning job moves to the <code>Stopped</code> state, it releases all
/// reserved
/// resources for the tuning job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopHyperParameterTuningJob {
    _private: (),
}
impl StopHyperParameterTuningJob {
    /// Creates a new builder-style object to manufacture [`StopHyperParameterTuningJobInput`](crate::input::StopHyperParameterTuningJobInput)
    pub fn builder() -> crate::input::stop_hyper_parameter_tuning_job_input::Builder {
        crate::input::stop_hyper_parameter_tuning_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::StopHyperParameterTuningJobOutput,
        crate::error::StopHyperParameterTuningJobError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::StopHyperParameterTuningJobError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StopHyperParameterTuningJobError {
                        kind: crate::error::StopHyperParameterTuningJobErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::StopHyperParameterTuningJobError::unhandled(e),
                },
                _ => crate::error::StopHyperParameterTuningJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_hyper_parameter_tuning_job_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopHyperParameterTuningJob {
    type Output = Result<
        crate::output::StopHyperParameterTuningJobOutput,
        crate::error::StopHyperParameterTuningJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Stops a running labeling job. A job that is stopped cannot be restarted. Any results
/// obtained before the job is stopped are placed in the Amazon S3 output bucket.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopLabelingJob {
    _private: (),
}
impl StopLabelingJob {
    /// Creates a new builder-style object to manufacture [`StopLabelingJobInput`](crate::input::StopLabelingJobInput)
    pub fn builder() -> crate::input::stop_labeling_job_input::Builder {
        crate::input::stop_labeling_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StopLabelingJobOutput, crate::error::StopLabelingJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::StopLabelingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StopLabelingJobError {
                        kind: crate::error::StopLabelingJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::StopLabelingJobError::unhandled(e),
                },
                _ => crate::error::StopLabelingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_labeling_job_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopLabelingJob {
    type Output = Result<crate::output::StopLabelingJobOutput, crate::error::StopLabelingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Stops a previously started monitoring schedule.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopMonitoringSchedule {
    _private: (),
}
impl StopMonitoringSchedule {
    /// Creates a new builder-style object to manufacture [`StopMonitoringScheduleInput`](crate::input::StopMonitoringScheduleInput)
    pub fn builder() -> crate::input::stop_monitoring_schedule_input::Builder {
        crate::input::stop_monitoring_schedule_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::StopMonitoringScheduleOutput,
        crate::error::StopMonitoringScheduleError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::StopMonitoringScheduleError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StopMonitoringScheduleError {
                        kind: crate::error::StopMonitoringScheduleErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::StopMonitoringScheduleError::unhandled(e),
                },
                _ => crate::error::StopMonitoringScheduleError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_monitoring_schedule_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopMonitoringSchedule {
    type Output = Result<
        crate::output::StopMonitoringScheduleOutput,
        crate::error::StopMonitoringScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Terminates the ML compute instance. Before terminating the instance, Amazon SageMaker
/// disconnects the ML storage volume from it. Amazon SageMaker preserves the ML storage volume. Amazon SageMaker
/// stops charging you for the ML compute instance when you call
/// <code>StopNotebookInstance</code>.</p>
/// <p>To access data on the ML storage volume for a notebook instance that has been
/// terminated, call the <code>StartNotebookInstance</code> API.
/// <code>StartNotebookInstance</code> launches another ML compute instance, configures
/// it, and attaches the preserved ML storage volume so you can continue your work.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopNotebookInstance {
    _private: (),
}
impl StopNotebookInstance {
    /// Creates a new builder-style object to manufacture [`StopNotebookInstanceInput`](crate::input::StopNotebookInstanceInput)
    pub fn builder() -> crate::input::stop_notebook_instance_input::Builder {
        crate::input::stop_notebook_instance_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StopNotebookInstanceOutput, crate::error::StopNotebookInstanceError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::StopNotebookInstanceError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_notebook_instance_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopNotebookInstance {
    type Output =
        Result<crate::output::StopNotebookInstanceOutput, crate::error::StopNotebookInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Stops a pipeline execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopPipelineExecution {
    _private: (),
}
impl StopPipelineExecution {
    /// Creates a new builder-style object to manufacture [`StopPipelineExecutionInput`](crate::input::StopPipelineExecutionInput)
    pub fn builder() -> crate::input::stop_pipeline_execution_input::Builder {
        crate::input::stop_pipeline_execution_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StopPipelineExecutionOutput, crate::error::StopPipelineExecutionError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::StopPipelineExecutionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StopPipelineExecutionError {
                        kind: crate::error::StopPipelineExecutionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::StopPipelineExecutionError::unhandled(e),
                },
                _ => crate::error::StopPipelineExecutionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_pipeline_execution_output::Builder::default();
        builder = crate::json_deser::stop_pipeline_execution_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::StopPipelineExecutionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopPipelineExecution {
    type Output = Result<
        crate::output::StopPipelineExecutionOutput,
        crate::error::StopPipelineExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Stops a processing job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopProcessingJob {
    _private: (),
}
impl StopProcessingJob {
    /// Creates a new builder-style object to manufacture [`StopProcessingJobInput`](crate::input::StopProcessingJobInput)
    pub fn builder() -> crate::input::stop_processing_job_input::Builder {
        crate::input::stop_processing_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StopProcessingJobOutput, crate::error::StopProcessingJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::StopProcessingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StopProcessingJobError {
                        kind: crate::error::StopProcessingJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::StopProcessingJobError::unhandled(e),
                },
                _ => crate::error::StopProcessingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_processing_job_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopProcessingJob {
    type Output =
        Result<crate::output::StopProcessingJobOutput, crate::error::StopProcessingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Stops a training job. To stop a job, Amazon SageMaker sends the algorithm the
/// <code>SIGTERM</code> signal, which delays job termination for 120 seconds.
/// Algorithms might use this 120-second window to save the model artifacts, so the results
/// of the training is not lost. </p>
/// <p>When it receives a <code>StopTrainingJob</code> request, Amazon SageMaker changes the status of
/// the job to <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the status to
/// <code>Stopped</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopTrainingJob {
    _private: (),
}
impl StopTrainingJob {
    /// Creates a new builder-style object to manufacture [`StopTrainingJobInput`](crate::input::StopTrainingJobInput)
    pub fn builder() -> crate::input::stop_training_job_input::Builder {
        crate::input::stop_training_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StopTrainingJobOutput, crate::error::StopTrainingJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::StopTrainingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StopTrainingJobError {
                        kind: crate::error::StopTrainingJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::StopTrainingJobError::unhandled(e),
                },
                _ => crate::error::StopTrainingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_training_job_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopTrainingJob {
    type Output = Result<crate::output::StopTrainingJobOutput, crate::error::StopTrainingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Stops a transform job.</p>
/// <p>When Amazon SageMaker receives a <code>StopTransformJob</code> request, the status of the job
/// changes to <code>Stopping</code>. After Amazon SageMaker
/// stops
/// the job, the status is set to <code>Stopped</code>. When you stop a transform job before
/// it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopTransformJob {
    _private: (),
}
impl StopTransformJob {
    /// Creates a new builder-style object to manufacture [`StopTransformJobInput`](crate::input::StopTransformJobInput)
    pub fn builder() -> crate::input::stop_transform_job_input::Builder {
        crate::input::stop_transform_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::StopTransformJobOutput, crate::error::StopTransformJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::StopTransformJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::StopTransformJobError {
                        kind: crate::error::StopTransformJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::StopTransformJobError::unhandled(e),
                },
                _ => crate::error::StopTransformJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::stop_transform_job_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopTransformJob {
    type Output =
        Result<crate::output::StopTransformJobOutput, crate::error::StopTransformJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates an action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAction {
    _private: (),
}
impl UpdateAction {
    /// Creates a new builder-style object to manufacture [`UpdateActionInput`](crate::input::UpdateActionInput)
    pub fn builder() -> crate::input::update_action_input::Builder {
        crate::input::update_action_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateActionOutput, crate::error::UpdateActionError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateActionError::unhandled(generic)),
            };
            return Err(match error_code {
                "ConflictException" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateActionError {
                        kind: crate::error::UpdateActionErrorKind::ConflictError(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateActionError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateActionError {
                        kind: crate::error::UpdateActionErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateActionError::unhandled(e),
                },
                _ => crate::error::UpdateActionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_action_output::Builder::default();
        builder =
            crate::json_deser::update_action_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateActionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAction {
    type Output = Result<crate::output::UpdateActionOutput, crate::error::UpdateActionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates the properties of an AppImageConfig.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAppImageConfig {
    _private: (),
}
impl UpdateAppImageConfig {
    /// Creates a new builder-style object to manufacture [`UpdateAppImageConfigInput`](crate::input::UpdateAppImageConfigInput)
    pub fn builder() -> crate::input::update_app_image_config_input::Builder {
        crate::input::update_app_image_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateAppImageConfigOutput, crate::error::UpdateAppImageConfigError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateAppImageConfigError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateAppImageConfigError {
                        kind: crate::error::UpdateAppImageConfigErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateAppImageConfigError::unhandled(e),
                },
                _ => crate::error::UpdateAppImageConfigError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_app_image_config_output::Builder::default();
        builder = crate::json_deser::update_app_image_config_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::UpdateAppImageConfigError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAppImageConfig {
    type Output =
        Result<crate::output::UpdateAppImageConfigOutput, crate::error::UpdateAppImageConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates an artifact.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateArtifact {
    _private: (),
}
impl UpdateArtifact {
    /// Creates a new builder-style object to manufacture [`UpdateArtifactInput`](crate::input::UpdateArtifactInput)
    pub fn builder() -> crate::input::update_artifact_input::Builder {
        crate::input::update_artifact_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateArtifactOutput, crate::error::UpdateArtifactError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateArtifactError::unhandled(generic)),
            };
            return Err(match error_code {
                "ConflictException" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateArtifactError {
                        kind: crate::error::UpdateArtifactErrorKind::ConflictError(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateArtifactError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateArtifactError {
                        kind: crate::error::UpdateArtifactErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateArtifactError::unhandled(e),
                },
                _ => crate::error::UpdateArtifactError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_artifact_output::Builder::default();
        builder =
            crate::json_deser::update_artifact_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateArtifactError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateArtifact {
    type Output = Result<crate::output::UpdateArtifactOutput, crate::error::UpdateArtifactError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates the specified Git repository with the specified values.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCodeRepository {
    _private: (),
}
impl UpdateCodeRepository {
    /// Creates a new builder-style object to manufacture [`UpdateCodeRepositoryInput`](crate::input::UpdateCodeRepositoryInput)
    pub fn builder() -> crate::input::update_code_repository_input::Builder {
        crate::input::update_code_repository_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateCodeRepositoryOutput, crate::error::UpdateCodeRepositoryError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::UpdateCodeRepositoryError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_code_repository_output::Builder::default();
        builder = crate::json_deser::update_code_repository_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::UpdateCodeRepositoryError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateCodeRepository {
    type Output =
        Result<crate::output::UpdateCodeRepositoryOutput, crate::error::UpdateCodeRepositoryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates a context.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateContext {
    _private: (),
}
impl UpdateContext {
    /// Creates a new builder-style object to manufacture [`UpdateContextInput`](crate::input::UpdateContextInput)
    pub fn builder() -> crate::input::update_context_input::Builder {
        crate::input::update_context_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateContextOutput, crate::error::UpdateContextError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateContextError::unhandled(generic)),
            };
            return Err(match error_code {
                "ConflictException" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateContextError {
                        kind: crate::error::UpdateContextErrorKind::ConflictError(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateContextError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateContextError {
                        kind: crate::error::UpdateContextErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateContextError::unhandled(e),
                },
                _ => crate::error::UpdateContextError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_context_output::Builder::default();
        builder =
            crate::json_deser::update_context_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateContextError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateContext {
    type Output = Result<crate::output::UpdateContextOutput, crate::error::UpdateContextError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates a fleet of devices.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDeviceFleet {
    _private: (),
}
impl UpdateDeviceFleet {
    /// Creates a new builder-style object to manufacture [`UpdateDeviceFleetInput`](crate::input::UpdateDeviceFleetInput)
    pub fn builder() -> crate::input::update_device_fleet_input::Builder {
        crate::input::update_device_fleet_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateDeviceFleetOutput, crate::error::UpdateDeviceFleetError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateDeviceFleetError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateDeviceFleetError {
                        kind: crate::error::UpdateDeviceFleetErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateDeviceFleetError::unhandled(e),
                },
                _ => crate::error::UpdateDeviceFleetError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_device_fleet_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDeviceFleet {
    type Output =
        Result<crate::output::UpdateDeviceFleetOutput, crate::error::UpdateDeviceFleetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates one or more devices in a fleet.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDevices {
    _private: (),
}
impl UpdateDevices {
    /// Creates a new builder-style object to manufacture [`UpdateDevicesInput`](crate::input::UpdateDevicesInput)
    pub fn builder() -> crate::input::update_devices_input::Builder {
        crate::input::update_devices_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateDevicesOutput, crate::error::UpdateDevicesError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::UpdateDevicesError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_devices_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDevices {
    type Output = Result<crate::output::UpdateDevicesOutput, crate::error::UpdateDevicesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates the default settings for new user profiles in the domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDomain {
    _private: (),
}
impl UpdateDomain {
    /// Creates a new builder-style object to manufacture [`UpdateDomainInput`](crate::input::UpdateDomainInput)
    pub fn builder() -> crate::input::update_domain_input::Builder {
        crate::input::update_domain_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateDomainOutput, crate::error::UpdateDomainError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateDomainError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateDomainError {
                        kind: crate::error::UpdateDomainErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateDomainError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateDomainError {
                        kind: crate::error::UpdateDomainErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateDomainError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateDomainError {
                        kind: crate::error::UpdateDomainErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateDomainError::unhandled(e),
                },
                _ => crate::error::UpdateDomainError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_domain_output::Builder::default();
        builder =
            crate::json_deser::update_domain_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateDomainError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDomain {
    type Output = Result<crate::output::UpdateDomainOutput, crate::error::UpdateDomainError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Deploys the new <code>EndpointConfig</code> specified in the request, switches to
/// using newly created endpoint, and then deletes resources provisioned for the endpoint
/// using the previous <code>EndpointConfig</code> (there is no availability loss). </p>
/// <p>When Amazon SageMaker receives the request, it sets the endpoint status to
/// <code>Updating</code>. After updating the endpoint, it sets the status to
/// <code>InService</code>. To check the status of an endpoint, use the <a>DescribeEndpoint</a> API.
/// </p>
/// <note>
/// <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is
/// live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code>
/// operations are being performed on the endpoint. To update an endpoint, you must
/// create a new <code>EndpointConfig</code>.</p>
/// <p>If you delete the <code>EndpointConfig</code> of an endpoint that is active or
/// being created or updated you may lose visibility into the instance type the endpoint
/// is using. The endpoint must be deleted in order to stop incurring charges.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEndpoint {
    _private: (),
}
impl UpdateEndpoint {
    /// Creates a new builder-style object to manufacture [`UpdateEndpointInput`](crate::input::UpdateEndpointInput)
    pub fn builder() -> crate::input::update_endpoint_input::Builder {
        crate::input::update_endpoint_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateEndpointOutput, crate::error::UpdateEndpointError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateEndpointError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateEndpointError {
                        kind: crate::error::UpdateEndpointErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateEndpointError::unhandled(e),
                },
                _ => crate::error::UpdateEndpointError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_endpoint_output::Builder::default();
        builder =
            crate::json_deser::update_endpoint_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateEndpointError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateEndpoint {
    type Output = Result<crate::output::UpdateEndpointOutput, crate::error::UpdateEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates variant weight of one or more variants associated with an existing
/// endpoint, or capacity of one variant associated with an existing endpoint. When it
/// receives the request, Amazon SageMaker sets the endpoint status to <code>Updating</code>. After
/// updating the endpoint, it sets the status to <code>InService</code>. To check the status
/// of an endpoint, use the <a>DescribeEndpoint</a> API. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEndpointWeightsAndCapacities {
    _private: (),
}
impl UpdateEndpointWeightsAndCapacities {
    /// Creates a new builder-style object to manufacture [`UpdateEndpointWeightsAndCapacitiesInput`](crate::input::UpdateEndpointWeightsAndCapacitiesInput)
    pub fn builder() -> crate::input::update_endpoint_weights_and_capacities_input::Builder {
        crate::input::update_endpoint_weights_and_capacities_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::UpdateEndpointWeightsAndCapacitiesOutput,
        crate::error::UpdateEndpointWeightsAndCapacitiesError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::UpdateEndpointWeightsAndCapacitiesError::unhandled(generic),
                    )
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateEndpointWeightsAndCapacitiesError { kind: crate::error::UpdateEndpointWeightsAndCapacitiesErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::UpdateEndpointWeightsAndCapacitiesError::unhandled(e)
                }
                _ => crate::error::UpdateEndpointWeightsAndCapacitiesError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::update_endpoint_weights_and_capacities_output::Builder::default();
        builder = crate::json_deser::update_endpoint_weights_and_capacities_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::UpdateEndpointWeightsAndCapacitiesError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateEndpointWeightsAndCapacities {
    type Output = Result<
        crate::output::UpdateEndpointWeightsAndCapacitiesOutput,
        crate::error::UpdateEndpointWeightsAndCapacitiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Adds, updates, or removes the description of an experiment. Updates the display name of an
/// experiment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateExperiment {
    _private: (),
}
impl UpdateExperiment {
    /// Creates a new builder-style object to manufacture [`UpdateExperimentInput`](crate::input::UpdateExperimentInput)
    pub fn builder() -> crate::input::update_experiment_input::Builder {
        crate::input::update_experiment_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateExperimentOutput, crate::error::UpdateExperimentError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateExperimentError::unhandled(generic)),
            };
            return Err(match error_code {
                "ConflictException" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateExperimentError {
                        kind: crate::error::UpdateExperimentErrorKind::ConflictError(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateExperimentError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateExperimentError {
                        kind: crate::error::UpdateExperimentErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateExperimentError::unhandled(e),
                },
                _ => crate::error::UpdateExperimentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_experiment_output::Builder::default();
        builder =
            crate::json_deser::update_experiment_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateExperimentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateExperiment {
    type Output =
        Result<crate::output::UpdateExperimentOutput, crate::error::UpdateExperimentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates the properties of a SageMaker image. To change the image's tags, use the
/// <a>AddTags</a> and <a>DeleteTags</a> APIs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateImage {
    _private: (),
}
impl UpdateImage {
    /// Creates a new builder-style object to manufacture [`UpdateImageInput`](crate::input::UpdateImageInput)
    pub fn builder() -> crate::input::update_image_input::Builder {
        crate::input::update_image_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateImageOutput, crate::error::UpdateImageError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateImageError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateImageError {
                        kind: crate::error::UpdateImageErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateImageError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateImageError {
                        kind: crate::error::UpdateImageErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateImageError::unhandled(e),
                },
                _ => crate::error::UpdateImageError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_image_output::Builder::default();
        builder =
            crate::json_deser::update_image_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateImageError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateImage {
    type Output = Result<crate::output::UpdateImageOutput, crate::error::UpdateImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates a versioned model.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateModelPackage {
    _private: (),
}
impl UpdateModelPackage {
    /// Creates a new builder-style object to manufacture [`UpdateModelPackageInput`](crate::input::UpdateModelPackageInput)
    pub fn builder() -> crate::input::update_model_package_input::Builder {
        crate::input::update_model_package_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateModelPackageOutput, crate::error::UpdateModelPackageError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::UpdateModelPackageError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_model_package_output::Builder::default();
        builder = crate::json_deser::update_model_package_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::UpdateModelPackageError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateModelPackage {
    type Output =
        Result<crate::output::UpdateModelPackageOutput, crate::error::UpdateModelPackageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates a previously created schedule.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMonitoringSchedule {
    _private: (),
}
impl UpdateMonitoringSchedule {
    /// Creates a new builder-style object to manufacture [`UpdateMonitoringScheduleInput`](crate::input::UpdateMonitoringScheduleInput)
    pub fn builder() -> crate::input::update_monitoring_schedule_input::Builder {
        crate::input::update_monitoring_schedule_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::UpdateMonitoringScheduleOutput,
        crate::error::UpdateMonitoringScheduleError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::UpdateMonitoringScheduleError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateMonitoringScheduleError {
                        kind:
                            crate::error::UpdateMonitoringScheduleErrorKind::ResourceLimitExceeded(
                                body,
                            ),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateMonitoringScheduleError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateMonitoringScheduleError {
                        kind: crate::error::UpdateMonitoringScheduleErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateMonitoringScheduleError::unhandled(e),
                },
                _ => crate::error::UpdateMonitoringScheduleError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_monitoring_schedule_output::Builder::default();
        builder = crate::json_deser::update_monitoring_schedule_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::UpdateMonitoringScheduleError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateMonitoringSchedule {
    type Output = Result<
        crate::output::UpdateMonitoringScheduleOutput,
        crate::error::UpdateMonitoringScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates a notebook instance. NotebookInstance updates include upgrading or
/// downgrading the ML compute instance used for your notebook instance to accommodate
/// changes in your workload requirements.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateNotebookInstance {
    _private: (),
}
impl UpdateNotebookInstance {
    /// Creates a new builder-style object to manufacture [`UpdateNotebookInstanceInput`](crate::input::UpdateNotebookInstanceInput)
    pub fn builder() -> crate::input::update_notebook_instance_input::Builder {
        crate::input::update_notebook_instance_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::UpdateNotebookInstanceOutput,
        crate::error::UpdateNotebookInstanceError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::UpdateNotebookInstanceError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateNotebookInstanceError {
                        kind: crate::error::UpdateNotebookInstanceErrorKind::ResourceLimitExceeded(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateNotebookInstanceError::unhandled(e),
                },
                _ => crate::error::UpdateNotebookInstanceError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_notebook_instance_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateNotebookInstance {
    type Output = Result<
        crate::output::UpdateNotebookInstanceOutput,
        crate::error::UpdateNotebookInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates a notebook instance lifecycle configuration created with the <a>CreateNotebookInstanceLifecycleConfig</a> API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateNotebookInstanceLifecycleConfig {
    _private: (),
}
impl UpdateNotebookInstanceLifecycleConfig {
    /// Creates a new builder-style object to manufacture [`UpdateNotebookInstanceLifecycleConfigInput`](crate::input::UpdateNotebookInstanceLifecycleConfigInput)
    pub fn builder() -> crate::input::update_notebook_instance_lifecycle_config_input::Builder {
        crate::input::update_notebook_instance_lifecycle_config_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::UpdateNotebookInstanceLifecycleConfigOutput,
        crate::error::UpdateNotebookInstanceLifecycleConfigError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(
                        crate::error::UpdateNotebookInstanceLifecycleConfigError::unhandled(
                            generic,
                        ),
                    )
                }
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateNotebookInstanceLifecycleConfigError { kind: crate::error::UpdateNotebookInstanceLifecycleConfigErrorKind::ResourceLimitExceeded(body), meta: generic },
                    Err(e) => crate::error::UpdateNotebookInstanceLifecycleConfigError::unhandled(e)
                }
                _ => crate::error::UpdateNotebookInstanceLifecycleConfigError::generic(generic)
            });
        }
        #[allow(unused_mut)]
        let mut builder =
            crate::output::update_notebook_instance_lifecycle_config_output::Builder::default();
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateNotebookInstanceLifecycleConfig {
    type Output = Result<
        crate::output::UpdateNotebookInstanceLifecycleConfigOutput,
        crate::error::UpdateNotebookInstanceLifecycleConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates a pipeline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePipeline {
    _private: (),
}
impl UpdatePipeline {
    /// Creates a new builder-style object to manufacture [`UpdatePipelineInput`](crate::input::UpdatePipelineInput)
    pub fn builder() -> crate::input::update_pipeline_input::Builder {
        crate::input::update_pipeline_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdatePipelineOutput, crate::error::UpdatePipelineError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdatePipelineError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdatePipelineError {
                        kind: crate::error::UpdatePipelineErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdatePipelineError::unhandled(e),
                },
                _ => crate::error::UpdatePipelineError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_pipeline_output::Builder::default();
        builder =
            crate::json_deser::update_pipeline_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdatePipelineError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePipeline {
    type Output = Result<crate::output::UpdatePipelineOutput, crate::error::UpdatePipelineError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates a pipeline execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePipelineExecution {
    _private: (),
}
impl UpdatePipelineExecution {
    /// Creates a new builder-style object to manufacture [`UpdatePipelineExecutionInput`](crate::input::UpdatePipelineExecutionInput)
    pub fn builder() -> crate::input::update_pipeline_execution_input::Builder {
        crate::input::update_pipeline_execution_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<
        crate::output::UpdatePipelineExecutionOutput,
        crate::error::UpdatePipelineExecutionError,
    > {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::UpdatePipelineExecutionError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdatePipelineExecutionError {
                        kind: crate::error::UpdatePipelineExecutionErrorKind::ResourceNotFound(
                            body,
                        ),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdatePipelineExecutionError::unhandled(e),
                },
                _ => crate::error::UpdatePipelineExecutionError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_pipeline_execution_output::Builder::default();
        builder = crate::json_deser::update_pipeline_execution_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::UpdatePipelineExecutionError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePipelineExecution {
    type Output = Result<
        crate::output::UpdatePipelineExecutionOutput,
        crate::error::UpdatePipelineExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Update a model training job to request a new Debugger profiling configuration.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTrainingJob {
    _private: (),
}
impl UpdateTrainingJob {
    /// Creates a new builder-style object to manufacture [`UpdateTrainingJobInput`](crate::input::UpdateTrainingJobInput)
    pub fn builder() -> crate::input::update_training_job_input::Builder {
        crate::input::update_training_job_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateTrainingJobOutput, crate::error::UpdateTrainingJobError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateTrainingJobError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateTrainingJobError {
                        kind: crate::error::UpdateTrainingJobErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateTrainingJobError::unhandled(e),
                },
                _ => crate::error::UpdateTrainingJobError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_training_job_output::Builder::default();
        builder = crate::json_deser::update_training_job_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::UpdateTrainingJobError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateTrainingJob {
    type Output =
        Result<crate::output::UpdateTrainingJobOutput, crate::error::UpdateTrainingJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates the display name of a trial.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTrial {
    _private: (),
}
impl UpdateTrial {
    /// Creates a new builder-style object to manufacture [`UpdateTrialInput`](crate::input::UpdateTrialInput)
    pub fn builder() -> crate::input::update_trial_input::Builder {
        crate::input::update_trial_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateTrialOutput, crate::error::UpdateTrialError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateTrialError::unhandled(generic)),
            };
            return Err(match error_code {
                "ConflictException" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateTrialError {
                        kind: crate::error::UpdateTrialErrorKind::ConflictError(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateTrialError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateTrialError {
                        kind: crate::error::UpdateTrialErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateTrialError::unhandled(e),
                },
                _ => crate::error::UpdateTrialError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_trial_output::Builder::default();
        builder =
            crate::json_deser::update_trial_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateTrialError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateTrial {
    type Output = Result<crate::output::UpdateTrialOutput, crate::error::UpdateTrialError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates one or more properties of a trial component.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTrialComponent {
    _private: (),
}
impl UpdateTrialComponent {
    /// Creates a new builder-style object to manufacture [`UpdateTrialComponentInput`](crate::input::UpdateTrialComponentInput)
    pub fn builder() -> crate::input::update_trial_component_input::Builder {
        crate::input::update_trial_component_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateTrialComponentOutput, crate::error::UpdateTrialComponentError>
    {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateTrialComponentError::unhandled(generic)),
            };
            return Err(match error_code {
                "ConflictException" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateTrialComponentError {
                        kind: crate::error::UpdateTrialComponentErrorKind::ConflictError(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateTrialComponentError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateTrialComponentError {
                        kind: crate::error::UpdateTrialComponentErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateTrialComponentError::unhandled(e),
                },
                _ => crate::error::UpdateTrialComponentError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_trial_component_output::Builder::default();
        builder = crate::json_deser::update_trial_component_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::UpdateTrialComponentError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateTrialComponent {
    type Output =
        Result<crate::output::UpdateTrialComponentOutput, crate::error::UpdateTrialComponentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates a user profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateUserProfile {
    _private: (),
}
impl UpdateUserProfile {
    /// Creates a new builder-style object to manufacture [`UpdateUserProfileInput`](crate::input::UpdateUserProfileInput)
    pub fn builder() -> crate::input::update_user_profile_input::Builder {
        crate::input::update_user_profile_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateUserProfileOutput, crate::error::UpdateUserProfileError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateUserProfileError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceInUse" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateUserProfileError {
                        kind: crate::error::UpdateUserProfileErrorKind::ResourceInUse(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateUserProfileError::unhandled(e),
                },
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateUserProfileError {
                        kind: crate::error::UpdateUserProfileErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateUserProfileError::unhandled(e),
                },
                "ResourceNotFound" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateUserProfileError {
                        kind: crate::error::UpdateUserProfileErrorKind::ResourceNotFound(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateUserProfileError::unhandled(e),
                },
                _ => crate::error::UpdateUserProfileError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_user_profile_output::Builder::default();
        builder = crate::json_deser::update_user_profile_deser_operation(
            response.body().as_ref(),
            builder,
        )
        .map_err(crate::error::UpdateUserProfileError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateUserProfile {
    type Output =
        Result<crate::output::UpdateUserProfileOutput, crate::error::UpdateUserProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Use this operation to update your workforce. You can use this operation to
/// require that workers use specific IP addresses to work on tasks
/// and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.</p>
/// <p> Use <code>SourceIpConfig</code> to restrict worker access to tasks to a specific range of IP addresses.
/// You specify allowed IP addresses by creating a list of up to ten <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>.
/// By default, a workforce isn't restricted to specific IP addresses. If you specify a
/// range of IP addresses, workers who attempt to access tasks using any IP address outside
/// the specified range are denied and get a <code>Not Found</code> error message on
/// the worker portal.</p>
/// <p>Use <code>OidcConfig</code> to update the configuration of a workforce created using
/// your own OIDC IdP. </p>
/// <important>
/// <p>You can only update your OIDC IdP configuration when there are no work teams
/// associated with your workforce. You can delete work teams using the  operation.</p>
/// </important>
/// <p>After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you
/// can view details about your update workforce using the
/// operation.</p>
/// <important>
/// <p>This operation only applies to private workforces.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkforce {
    _private: (),
}
impl UpdateWorkforce {
    /// Creates a new builder-style object to manufacture [`UpdateWorkforceInput`](crate::input::UpdateWorkforceInput)
    pub fn builder() -> crate::input::update_workforce_input::Builder {
        crate::input::update_workforce_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateWorkforceOutput, crate::error::UpdateWorkforceError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            return Err(crate::error::UpdateWorkforceError::generic(generic));
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_workforce_output::Builder::default();
        builder =
            crate::json_deser::update_workforce_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateWorkforceError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateWorkforce {
    type Output = Result<crate::output::UpdateWorkforceOutput, crate::error::UpdateWorkforceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Updates an existing work team with new member definitions or description.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkteam {
    _private: (),
}
impl UpdateWorkteam {
    /// Creates a new builder-style object to manufacture [`UpdateWorkteamInput`](crate::input::UpdateWorkteamInput)
    pub fn builder() -> crate::input::update_workteam_input::Builder {
        crate::input::update_workteam_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    #[allow(dead_code)]
    fn parse_response(
        &self,
        response: &http::response::Response<bytes::Bytes>,
    ) -> Result<crate::output::UpdateWorkteamOutput, crate::error::UpdateWorkteamError> {
        if crate::aws_json_errors::is_error(&response) {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);
            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::UpdateWorkteamError::unhandled(generic)),
            };
            return Err(match error_code {
                "ResourceLimitExceeded" => match serde_json::from_value(body) {
                    Ok(body) => crate::error::UpdateWorkteamError {
                        kind: crate::error::UpdateWorkteamErrorKind::ResourceLimitExceeded(body),
                        meta: generic,
                    },
                    Err(e) => crate::error::UpdateWorkteamError::unhandled(e),
                },
                _ => crate::error::UpdateWorkteamError::generic(generic),
            });
        }
        #[allow(unused_mut)]
        let mut builder = crate::output::update_workteam_output::Builder::default();
        builder =
            crate::json_deser::update_workteam_deser_operation(response.body().as_ref(), builder)
                .map_err(crate::error::UpdateWorkteamError::unhandled)?;
        Ok(builder.build())
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateWorkteam {
    type Output = Result<crate::output::UpdateWorkteamOutput, crate::error::UpdateWorkteamError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}
