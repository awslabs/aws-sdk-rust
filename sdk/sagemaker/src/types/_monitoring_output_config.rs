// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output configuration for monitoring jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitoringOutputConfig {
    /// <p>Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.</p>
    pub monitoring_outputs: ::std::option::Option<::std::vec::Vec<crate::types::MonitoringOutput>>,
    /// <p>The Key Management Service (KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl MonitoringOutputConfig {
    /// <p>Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.monitoring_outputs.is_none()`.
    pub fn monitoring_outputs(&self) -> &[crate::types::MonitoringOutput] {
        self.monitoring_outputs.as_deref().unwrap_or_default()
    }
    /// <p>The Key Management Service (KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl MonitoringOutputConfig {
    /// Creates a new builder-style object to manufacture [`MonitoringOutputConfig`](crate::types::MonitoringOutputConfig).
    pub fn builder() -> crate::types::builders::MonitoringOutputConfigBuilder {
        crate::types::builders::MonitoringOutputConfigBuilder::default()
    }
}

/// A builder for [`MonitoringOutputConfig`](crate::types::MonitoringOutputConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MonitoringOutputConfigBuilder {
    pub(crate) monitoring_outputs: ::std::option::Option<::std::vec::Vec<crate::types::MonitoringOutput>>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl MonitoringOutputConfigBuilder {
    /// Appends an item to `monitoring_outputs`.
    ///
    /// To override the contents of this collection use [`set_monitoring_outputs`](Self::set_monitoring_outputs).
    ///
    /// <p>Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.</p>
    pub fn monitoring_outputs(mut self, input: crate::types::MonitoringOutput) -> Self {
        let mut v = self.monitoring_outputs.unwrap_or_default();
        v.push(input);
        self.monitoring_outputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.</p>
    pub fn set_monitoring_outputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonitoringOutput>>) -> Self {
        self.monitoring_outputs = input;
        self
    }
    /// <p>Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.</p>
    pub fn get_monitoring_outputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonitoringOutput>> {
        &self.monitoring_outputs
    }
    /// <p>The Key Management Service (KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Key Management Service (KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Key Management Service (KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`MonitoringOutputConfig`](crate::types::MonitoringOutputConfig).
    pub fn build(self) -> crate::types::MonitoringOutputConfig {
        crate::types::MonitoringOutputConfig {
            monitoring_outputs: self.monitoring_outputs,
            kms_key_id: self.kms_key_id,
        }
    }
}
