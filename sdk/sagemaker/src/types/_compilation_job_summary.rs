// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a model compilation job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CompilationJobSummary {
    /// <p>The name of the model compilation job that you want a summary for.</p>
    #[doc(hidden)]
    pub compilation_job_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
    #[doc(hidden)]
    pub compilation_job_arn: std::option::Option<std::string::String>,
    /// <p>The time when the model compilation job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the model compilation job started.</p>
    #[doc(hidden)]
    pub compilation_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the model compilation job completed.</p>
    #[doc(hidden)]
    pub compilation_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The type of device that the model will run on after the compilation job has completed.</p>
    #[doc(hidden)]
    pub compilation_target_device: std::option::Option<crate::types::TargetDevice>,
    /// <p>The type of OS that the model will run on after the compilation job has completed.</p>
    #[doc(hidden)]
    pub compilation_target_platform_os: std::option::Option<crate::types::TargetPlatformOs>,
    /// <p>The type of architecture that the model will run on after the compilation job has completed.</p>
    #[doc(hidden)]
    pub compilation_target_platform_arch: std::option::Option<crate::types::TargetPlatformArch>,
    /// <p>The type of accelerator that the model will run on after the compilation job has completed.</p>
    #[doc(hidden)]
    pub compilation_target_platform_accelerator:
        std::option::Option<crate::types::TargetPlatformAccelerator>,
    /// <p>The time when the model compilation job was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the model compilation job.</p>
    #[doc(hidden)]
    pub compilation_job_status: std::option::Option<crate::types::CompilationJobStatus>,
}
impl CompilationJobSummary {
    /// <p>The name of the model compilation job that you want a summary for.</p>
    pub fn compilation_job_name(&self) -> std::option::Option<&str> {
        self.compilation_job_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
    pub fn compilation_job_arn(&self) -> std::option::Option<&str> {
        self.compilation_job_arn.as_deref()
    }
    /// <p>The time when the model compilation job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time when the model compilation job started.</p>
    pub fn compilation_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.compilation_start_time.as_ref()
    }
    /// <p>The time when the model compilation job completed.</p>
    pub fn compilation_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.compilation_end_time.as_ref()
    }
    /// <p>The type of device that the model will run on after the compilation job has completed.</p>
    pub fn compilation_target_device(&self) -> std::option::Option<&crate::types::TargetDevice> {
        self.compilation_target_device.as_ref()
    }
    /// <p>The type of OS that the model will run on after the compilation job has completed.</p>
    pub fn compilation_target_platform_os(
        &self,
    ) -> std::option::Option<&crate::types::TargetPlatformOs> {
        self.compilation_target_platform_os.as_ref()
    }
    /// <p>The type of architecture that the model will run on after the compilation job has completed.</p>
    pub fn compilation_target_platform_arch(
        &self,
    ) -> std::option::Option<&crate::types::TargetPlatformArch> {
        self.compilation_target_platform_arch.as_ref()
    }
    /// <p>The type of accelerator that the model will run on after the compilation job has completed.</p>
    pub fn compilation_target_platform_accelerator(
        &self,
    ) -> std::option::Option<&crate::types::TargetPlatformAccelerator> {
        self.compilation_target_platform_accelerator.as_ref()
    }
    /// <p>The time when the model compilation job was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The status of the model compilation job.</p>
    pub fn compilation_job_status(
        &self,
    ) -> std::option::Option<&crate::types::CompilationJobStatus> {
        self.compilation_job_status.as_ref()
    }
}
impl CompilationJobSummary {
    /// Creates a new builder-style object to manufacture [`CompilationJobSummary`](crate::types::CompilationJobSummary).
    pub fn builder() -> crate::types::builders::CompilationJobSummaryBuilder {
        crate::types::builders::CompilationJobSummaryBuilder::default()
    }
}

/// A builder for [`CompilationJobSummary`](crate::types::CompilationJobSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CompilationJobSummaryBuilder {
    pub(crate) compilation_job_name: std::option::Option<std::string::String>,
    pub(crate) compilation_job_arn: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) compilation_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) compilation_end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) compilation_target_device: std::option::Option<crate::types::TargetDevice>,
    pub(crate) compilation_target_platform_os: std::option::Option<crate::types::TargetPlatformOs>,
    pub(crate) compilation_target_platform_arch:
        std::option::Option<crate::types::TargetPlatformArch>,
    pub(crate) compilation_target_platform_accelerator:
        std::option::Option<crate::types::TargetPlatformAccelerator>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) compilation_job_status: std::option::Option<crate::types::CompilationJobStatus>,
}
impl CompilationJobSummaryBuilder {
    /// <p>The name of the model compilation job that you want a summary for.</p>
    pub fn compilation_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.compilation_job_name = Some(input.into());
        self
    }
    /// <p>The name of the model compilation job that you want a summary for.</p>
    pub fn set_compilation_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.compilation_job_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
    pub fn compilation_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.compilation_job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model compilation job.</p>
    pub fn set_compilation_job_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.compilation_job_arn = input;
        self
    }
    /// <p>The time when the model compilation job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time when the model compilation job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when the model compilation job started.</p>
    pub fn compilation_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.compilation_start_time = Some(input);
        self
    }
    /// <p>The time when the model compilation job started.</p>
    pub fn set_compilation_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.compilation_start_time = input;
        self
    }
    /// <p>The time when the model compilation job completed.</p>
    pub fn compilation_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.compilation_end_time = Some(input);
        self
    }
    /// <p>The time when the model compilation job completed.</p>
    pub fn set_compilation_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.compilation_end_time = input;
        self
    }
    /// <p>The type of device that the model will run on after the compilation job has completed.</p>
    pub fn compilation_target_device(mut self, input: crate::types::TargetDevice) -> Self {
        self.compilation_target_device = Some(input);
        self
    }
    /// <p>The type of device that the model will run on after the compilation job has completed.</p>
    pub fn set_compilation_target_device(
        mut self,
        input: std::option::Option<crate::types::TargetDevice>,
    ) -> Self {
        self.compilation_target_device = input;
        self
    }
    /// <p>The type of OS that the model will run on after the compilation job has completed.</p>
    pub fn compilation_target_platform_os(mut self, input: crate::types::TargetPlatformOs) -> Self {
        self.compilation_target_platform_os = Some(input);
        self
    }
    /// <p>The type of OS that the model will run on after the compilation job has completed.</p>
    pub fn set_compilation_target_platform_os(
        mut self,
        input: std::option::Option<crate::types::TargetPlatformOs>,
    ) -> Self {
        self.compilation_target_platform_os = input;
        self
    }
    /// <p>The type of architecture that the model will run on after the compilation job has completed.</p>
    pub fn compilation_target_platform_arch(
        mut self,
        input: crate::types::TargetPlatformArch,
    ) -> Self {
        self.compilation_target_platform_arch = Some(input);
        self
    }
    /// <p>The type of architecture that the model will run on after the compilation job has completed.</p>
    pub fn set_compilation_target_platform_arch(
        mut self,
        input: std::option::Option<crate::types::TargetPlatformArch>,
    ) -> Self {
        self.compilation_target_platform_arch = input;
        self
    }
    /// <p>The type of accelerator that the model will run on after the compilation job has completed.</p>
    pub fn compilation_target_platform_accelerator(
        mut self,
        input: crate::types::TargetPlatformAccelerator,
    ) -> Self {
        self.compilation_target_platform_accelerator = Some(input);
        self
    }
    /// <p>The type of accelerator that the model will run on after the compilation job has completed.</p>
    pub fn set_compilation_target_platform_accelerator(
        mut self,
        input: std::option::Option<crate::types::TargetPlatformAccelerator>,
    ) -> Self {
        self.compilation_target_platform_accelerator = input;
        self
    }
    /// <p>The time when the model compilation job was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The time when the model compilation job was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The status of the model compilation job.</p>
    pub fn compilation_job_status(mut self, input: crate::types::CompilationJobStatus) -> Self {
        self.compilation_job_status = Some(input);
        self
    }
    /// <p>The status of the model compilation job.</p>
    pub fn set_compilation_job_status(
        mut self,
        input: std::option::Option<crate::types::CompilationJobStatus>,
    ) -> Self {
        self.compilation_job_status = input;
        self
    }
    /// Consumes the builder and constructs a [`CompilationJobSummary`](crate::types::CompilationJobSummary).
    pub fn build(self) -> crate::types::CompilationJobSummary {
        crate::types::CompilationJobSummary {
            compilation_job_name: self.compilation_job_name,
            compilation_job_arn: self.compilation_job_arn,
            creation_time: self.creation_time,
            compilation_start_time: self.compilation_start_time,
            compilation_end_time: self.compilation_end_time,
            compilation_target_device: self.compilation_target_device,
            compilation_target_platform_os: self.compilation_target_platform_os,
            compilation_target_platform_arch: self.compilation_target_platform_arch,
            compilation_target_platform_accelerator: self.compilation_target_platform_accelerator,
            last_modified_time: self.last_modified_time,
            compilation_job_status: self.compilation_job_status,
        }
    }
}
