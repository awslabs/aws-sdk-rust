// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metrics for an existing endpoint compared in an Inference Recommender job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InferenceMetrics {
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub max_invocations: ::std::option::Option<i32>,
    /// <p>The expected model latency at maximum invocations per minute for the instance.</p>
    pub model_latency: ::std::option::Option<i32>,
}
impl InferenceMetrics {
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub fn max_invocations(&self) -> ::std::option::Option<i32> {
        self.max_invocations
    }
    /// <p>The expected model latency at maximum invocations per minute for the instance.</p>
    pub fn model_latency(&self) -> ::std::option::Option<i32> {
        self.model_latency
    }
}
impl InferenceMetrics {
    /// Creates a new builder-style object to manufacture [`InferenceMetrics`](crate::types::InferenceMetrics).
    pub fn builder() -> crate::types::builders::InferenceMetricsBuilder {
        crate::types::builders::InferenceMetricsBuilder::default()
    }
}

/// A builder for [`InferenceMetrics`](crate::types::InferenceMetrics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InferenceMetricsBuilder {
    pub(crate) max_invocations: ::std::option::Option<i32>,
    pub(crate) model_latency: ::std::option::Option<i32>,
}
impl InferenceMetricsBuilder {
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    /// This field is required.
    pub fn max_invocations(mut self, input: i32) -> Self {
        self.max_invocations = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub fn set_max_invocations(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_invocations = input;
        self
    }
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub fn get_max_invocations(&self) -> &::std::option::Option<i32> {
        &self.max_invocations
    }
    /// <p>The expected model latency at maximum invocations per minute for the instance.</p>
    /// This field is required.
    pub fn model_latency(mut self, input: i32) -> Self {
        self.model_latency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected model latency at maximum invocations per minute for the instance.</p>
    pub fn set_model_latency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.model_latency = input;
        self
    }
    /// <p>The expected model latency at maximum invocations per minute for the instance.</p>
    pub fn get_model_latency(&self) -> &::std::option::Option<i32> {
        &self.model_latency
    }
    /// Consumes the builder and constructs a [`InferenceMetrics`](crate::types::InferenceMetrics).
    pub fn build(self) -> crate::types::InferenceMetrics {
        crate::types::InferenceMetrics {
            max_invocations: self.max_invocations,
            model_latency: self.model_latency,
        }
    }
}
