// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains bias metrics for a model.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Bias {
    /// <p>The bias report for a model</p>
    #[doc(hidden)]
    pub report: std::option::Option<crate::types::MetricsSource>,
    /// <p>The pre-training bias report for a model.</p>
    #[doc(hidden)]
    pub pre_training_report: std::option::Option<crate::types::MetricsSource>,
    /// <p>The post-training bias report for a model.</p>
    #[doc(hidden)]
    pub post_training_report: std::option::Option<crate::types::MetricsSource>,
}
impl Bias {
    /// <p>The bias report for a model</p>
    pub fn report(&self) -> std::option::Option<&crate::types::MetricsSource> {
        self.report.as_ref()
    }
    /// <p>The pre-training bias report for a model.</p>
    pub fn pre_training_report(&self) -> std::option::Option<&crate::types::MetricsSource> {
        self.pre_training_report.as_ref()
    }
    /// <p>The post-training bias report for a model.</p>
    pub fn post_training_report(&self) -> std::option::Option<&crate::types::MetricsSource> {
        self.post_training_report.as_ref()
    }
}
impl Bias {
    /// Creates a new builder-style object to manufacture [`Bias`](crate::types::Bias).
    pub fn builder() -> crate::types::builders::BiasBuilder {
        crate::types::builders::BiasBuilder::default()
    }
}

/// A builder for [`Bias`](crate::types::Bias).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BiasBuilder {
    pub(crate) report: std::option::Option<crate::types::MetricsSource>,
    pub(crate) pre_training_report: std::option::Option<crate::types::MetricsSource>,
    pub(crate) post_training_report: std::option::Option<crate::types::MetricsSource>,
}
impl BiasBuilder {
    /// <p>The bias report for a model</p>
    pub fn report(mut self, input: crate::types::MetricsSource) -> Self {
        self.report = Some(input);
        self
    }
    /// <p>The bias report for a model</p>
    pub fn set_report(mut self, input: std::option::Option<crate::types::MetricsSource>) -> Self {
        self.report = input;
        self
    }
    /// <p>The pre-training bias report for a model.</p>
    pub fn pre_training_report(mut self, input: crate::types::MetricsSource) -> Self {
        self.pre_training_report = Some(input);
        self
    }
    /// <p>The pre-training bias report for a model.</p>
    pub fn set_pre_training_report(
        mut self,
        input: std::option::Option<crate::types::MetricsSource>,
    ) -> Self {
        self.pre_training_report = input;
        self
    }
    /// <p>The post-training bias report for a model.</p>
    pub fn post_training_report(mut self, input: crate::types::MetricsSource) -> Self {
        self.post_training_report = Some(input);
        self
    }
    /// <p>The post-training bias report for a model.</p>
    pub fn set_post_training_report(
        mut self,
        input: std::option::Option<crate::types::MetricsSource>,
    ) -> Self {
        self.post_training_report = input;
        self
    }
    /// Consumes the builder and constructs a [`Bias`](crate::types::Bias).
    pub fn build(self) -> crate::types::Bias {
        crate::types::Bias {
            report: self.report,
            pre_training_report: self.pre_training_report,
            post_training_report: self.post_training_report,
        }
    }
}
