// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BlueGreenUpdatePolicy {
    /// <p>Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment.</p>
    pub traffic_routing_configuration: ::std::option::Option<crate::types::TrafficRoutingConfig>,
    /// <p>Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0.</p>
    pub termination_wait_in_seconds: ::std::option::Option<i32>,
    /// <p>Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in <code>TerminationWaitInSeconds</code> and <code>WaitIntervalInSeconds</code>.</p>
    pub maximum_execution_timeout_in_seconds: ::std::option::Option<i32>,
}
impl BlueGreenUpdatePolicy {
    /// <p>Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment.</p>
    pub fn traffic_routing_configuration(&self) -> ::std::option::Option<&crate::types::TrafficRoutingConfig> {
        self.traffic_routing_configuration.as_ref()
    }
    /// <p>Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0.</p>
    pub fn termination_wait_in_seconds(&self) -> ::std::option::Option<i32> {
        self.termination_wait_in_seconds
    }
    /// <p>Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in <code>TerminationWaitInSeconds</code> and <code>WaitIntervalInSeconds</code>.</p>
    pub fn maximum_execution_timeout_in_seconds(&self) -> ::std::option::Option<i32> {
        self.maximum_execution_timeout_in_seconds
    }
}
impl BlueGreenUpdatePolicy {
    /// Creates a new builder-style object to manufacture [`BlueGreenUpdatePolicy`](crate::types::BlueGreenUpdatePolicy).
    pub fn builder() -> crate::types::builders::BlueGreenUpdatePolicyBuilder {
        crate::types::builders::BlueGreenUpdatePolicyBuilder::default()
    }
}

/// A builder for [`BlueGreenUpdatePolicy`](crate::types::BlueGreenUpdatePolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BlueGreenUpdatePolicyBuilder {
    pub(crate) traffic_routing_configuration: ::std::option::Option<crate::types::TrafficRoutingConfig>,
    pub(crate) termination_wait_in_seconds: ::std::option::Option<i32>,
    pub(crate) maximum_execution_timeout_in_seconds: ::std::option::Option<i32>,
}
impl BlueGreenUpdatePolicyBuilder {
    /// <p>Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment.</p>
    /// This field is required.
    pub fn traffic_routing_configuration(mut self, input: crate::types::TrafficRoutingConfig) -> Self {
        self.traffic_routing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment.</p>
    pub fn set_traffic_routing_configuration(mut self, input: ::std::option::Option<crate::types::TrafficRoutingConfig>) -> Self {
        self.traffic_routing_configuration = input;
        self
    }
    /// <p>Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment.</p>
    pub fn get_traffic_routing_configuration(&self) -> &::std::option::Option<crate::types::TrafficRoutingConfig> {
        &self.traffic_routing_configuration
    }
    /// <p>Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0.</p>
    pub fn termination_wait_in_seconds(mut self, input: i32) -> Self {
        self.termination_wait_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0.</p>
    pub fn set_termination_wait_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.termination_wait_in_seconds = input;
        self
    }
    /// <p>Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0.</p>
    pub fn get_termination_wait_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.termination_wait_in_seconds
    }
    /// <p>Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in <code>TerminationWaitInSeconds</code> and <code>WaitIntervalInSeconds</code>.</p>
    pub fn maximum_execution_timeout_in_seconds(mut self, input: i32) -> Self {
        self.maximum_execution_timeout_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in <code>TerminationWaitInSeconds</code> and <code>WaitIntervalInSeconds</code>.</p>
    pub fn set_maximum_execution_timeout_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_execution_timeout_in_seconds = input;
        self
    }
    /// <p>Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in <code>TerminationWaitInSeconds</code> and <code>WaitIntervalInSeconds</code>.</p>
    pub fn get_maximum_execution_timeout_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.maximum_execution_timeout_in_seconds
    }
    /// Consumes the builder and constructs a [`BlueGreenUpdatePolicy`](crate::types::BlueGreenUpdatePolicy).
    pub fn build(self) -> crate::types::BlueGreenUpdatePolicy {
        crate::types::BlueGreenUpdatePolicy {
            traffic_routing_configuration: self.traffic_routing_configuration,
            termination_wait_in_seconds: self.termination_wait_in_seconds,
            maximum_execution_timeout_in_seconds: self.maximum_execution_timeout_in_seconds,
        }
    }
}
