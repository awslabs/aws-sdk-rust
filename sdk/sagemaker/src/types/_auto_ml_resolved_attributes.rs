// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resolved attributes used to configure an AutoML job V2.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutoMlResolvedAttributes {
    /// <p>Specifies a metric to minimize or maximize as the objective of an AutoML job.</p>
    pub auto_ml_job_objective: ::std::option::Option<crate::types::AutoMlJobObjective>,
    /// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
    pub completion_criteria: ::std::option::Option<crate::types::AutoMlJobCompletionCriteria>,
    /// <p>Defines the resolved attributes specific to a problem type.</p>
    pub auto_ml_problem_type_resolved_attributes: ::std::option::Option<crate::types::AutoMlProblemTypeResolvedAttributes>,
}
impl AutoMlResolvedAttributes {
    /// <p>Specifies a metric to minimize or maximize as the objective of an AutoML job.</p>
    pub fn auto_ml_job_objective(&self) -> ::std::option::Option<&crate::types::AutoMlJobObjective> {
        self.auto_ml_job_objective.as_ref()
    }
    /// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
    pub fn completion_criteria(&self) -> ::std::option::Option<&crate::types::AutoMlJobCompletionCriteria> {
        self.completion_criteria.as_ref()
    }
    /// <p>Defines the resolved attributes specific to a problem type.</p>
    pub fn auto_ml_problem_type_resolved_attributes(&self) -> ::std::option::Option<&crate::types::AutoMlProblemTypeResolvedAttributes> {
        self.auto_ml_problem_type_resolved_attributes.as_ref()
    }
}
impl AutoMlResolvedAttributes {
    /// Creates a new builder-style object to manufacture [`AutoMlResolvedAttributes`](crate::types::AutoMlResolvedAttributes).
    pub fn builder() -> crate::types::builders::AutoMlResolvedAttributesBuilder {
        crate::types::builders::AutoMlResolvedAttributesBuilder::default()
    }
}

/// A builder for [`AutoMlResolvedAttributes`](crate::types::AutoMlResolvedAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AutoMlResolvedAttributesBuilder {
    pub(crate) auto_ml_job_objective: ::std::option::Option<crate::types::AutoMlJobObjective>,
    pub(crate) completion_criteria: ::std::option::Option<crate::types::AutoMlJobCompletionCriteria>,
    pub(crate) auto_ml_problem_type_resolved_attributes: ::std::option::Option<crate::types::AutoMlProblemTypeResolvedAttributes>,
}
impl AutoMlResolvedAttributesBuilder {
    /// <p>Specifies a metric to minimize or maximize as the objective of an AutoML job.</p>
    pub fn auto_ml_job_objective(mut self, input: crate::types::AutoMlJobObjective) -> Self {
        self.auto_ml_job_objective = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a metric to minimize or maximize as the objective of an AutoML job.</p>
    pub fn set_auto_ml_job_objective(mut self, input: ::std::option::Option<crate::types::AutoMlJobObjective>) -> Self {
        self.auto_ml_job_objective = input;
        self
    }
    /// <p>Specifies a metric to minimize or maximize as the objective of an AutoML job.</p>
    pub fn get_auto_ml_job_objective(&self) -> &::std::option::Option<crate::types::AutoMlJobObjective> {
        &self.auto_ml_job_objective
    }
    /// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
    pub fn completion_criteria(mut self, input: crate::types::AutoMlJobCompletionCriteria) -> Self {
        self.completion_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
    pub fn set_completion_criteria(mut self, input: ::std::option::Option<crate::types::AutoMlJobCompletionCriteria>) -> Self {
        self.completion_criteria = input;
        self
    }
    /// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
    pub fn get_completion_criteria(&self) -> &::std::option::Option<crate::types::AutoMlJobCompletionCriteria> {
        &self.completion_criteria
    }
    /// <p>Defines the resolved attributes specific to a problem type.</p>
    pub fn auto_ml_problem_type_resolved_attributes(mut self, input: crate::types::AutoMlProblemTypeResolvedAttributes) -> Self {
        self.auto_ml_problem_type_resolved_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the resolved attributes specific to a problem type.</p>
    pub fn set_auto_ml_problem_type_resolved_attributes(
        mut self,
        input: ::std::option::Option<crate::types::AutoMlProblemTypeResolvedAttributes>,
    ) -> Self {
        self.auto_ml_problem_type_resolved_attributes = input;
        self
    }
    /// <p>Defines the resolved attributes specific to a problem type.</p>
    pub fn get_auto_ml_problem_type_resolved_attributes(&self) -> &::std::option::Option<crate::types::AutoMlProblemTypeResolvedAttributes> {
        &self.auto_ml_problem_type_resolved_attributes
    }
    /// Consumes the builder and constructs a [`AutoMlResolvedAttributes`](crate::types::AutoMlResolvedAttributes).
    pub fn build(self) -> crate::types::AutoMlResolvedAttributes {
        crate::types::AutoMlResolvedAttributes {
            auto_ml_job_objective: self.auto_ml_job_objective,
            completion_criteria: self.completion_criteria,
            auto_ml_problem_type_resolved_attributes: self.auto_ml_problem_type_resolved_attributes,
        }
    }
}
