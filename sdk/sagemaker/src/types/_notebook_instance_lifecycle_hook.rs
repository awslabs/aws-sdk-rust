// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the notebook instance lifecycle configuration script.</p>
/// <p>Each lifecycle configuration script has a limit of 16384 characters.</p>
/// <p>The value of the <code>$PATH</code> environment variable that is available to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p>
/// <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p>
/// <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.</p>
/// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NotebookInstanceLifecycleHook {
    /// <p>A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
}
impl NotebookInstanceLifecycleHook {
    /// <p>A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
}
impl NotebookInstanceLifecycleHook {
    /// Creates a new builder-style object to manufacture [`NotebookInstanceLifecycleHook`](crate::types::NotebookInstanceLifecycleHook).
    pub fn builder() -> crate::types::builders::NotebookInstanceLifecycleHookBuilder {
        crate::types::builders::NotebookInstanceLifecycleHookBuilder::default()
    }
}

/// A builder for [`NotebookInstanceLifecycleHook`](crate::types::NotebookInstanceLifecycleHook).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NotebookInstanceLifecycleHookBuilder {
    pub(crate) content: std::option::Option<std::string::String>,
}
impl NotebookInstanceLifecycleHookBuilder {
    /// <p>A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// Consumes the builder and constructs a [`NotebookInstanceLifecycleHook`](crate::types::NotebookInstanceLifecycleHook).
    pub fn build(self) -> crate::types::NotebookInstanceLifecycleHook {
        crate::types::NotebookInstanceLifecycleHook {
            content: self.content,
        }
    }
}
