// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration that controls the parallelism of the pipeline. By default, the parallelism configuration specified applies to all executions of the pipeline unless overridden.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParallelismConfiguration {
    /// <p>The max number of steps that can be executed in parallel. </p>
    pub max_parallel_execution_steps: ::std::option::Option<i32>,
}
impl ParallelismConfiguration {
    /// <p>The max number of steps that can be executed in parallel. </p>
    pub fn max_parallel_execution_steps(&self) -> ::std::option::Option<i32> {
        self.max_parallel_execution_steps
    }
}
impl ParallelismConfiguration {
    /// Creates a new builder-style object to manufacture [`ParallelismConfiguration`](crate::types::ParallelismConfiguration).
    pub fn builder() -> crate::types::builders::ParallelismConfigurationBuilder {
        crate::types::builders::ParallelismConfigurationBuilder::default()
    }
}

/// A builder for [`ParallelismConfiguration`](crate::types::ParallelismConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParallelismConfigurationBuilder {
    pub(crate) max_parallel_execution_steps: ::std::option::Option<i32>,
}
impl ParallelismConfigurationBuilder {
    /// <p>The max number of steps that can be executed in parallel. </p>
    /// This field is required.
    pub fn max_parallel_execution_steps(mut self, input: i32) -> Self {
        self.max_parallel_execution_steps = ::std::option::Option::Some(input);
        self
    }
    /// <p>The max number of steps that can be executed in parallel. </p>
    pub fn set_max_parallel_execution_steps(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_parallel_execution_steps = input;
        self
    }
    /// <p>The max number of steps that can be executed in parallel. </p>
    pub fn get_max_parallel_execution_steps(&self) -> &::std::option::Option<i32> {
        &self.max_parallel_execution_steps
    }
    /// Consumes the builder and constructs a [`ParallelismConfiguration`](crate::types::ParallelismConfiguration).
    pub fn build(self) -> crate::types::ParallelismConfiguration {
        crate::types::ParallelismConfiguration {
            max_parallel_execution_steps: self.max_parallel_execution_steps,
        }
    }
}
