// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary of the device.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceSummary {
    /// <p>The unique identifier of the device.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the device.</p>
    #[doc(hidden)]
    pub device_arn: std::option::Option<std::string::String>,
    /// <p>A description of the device.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The name of the fleet the device belongs to.</p>
    #[doc(hidden)]
    pub device_fleet_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device..</p>
    #[doc(hidden)]
    pub iot_thing_name: std::option::Option<std::string::String>,
    /// <p>The timestamp of the last registration or de-reregistration.</p>
    #[doc(hidden)]
    pub registration_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last heartbeat received from the device.</p>
    #[doc(hidden)]
    pub latest_heartbeat: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Models on the device.</p>
    #[doc(hidden)]
    pub models: std::option::Option<std::vec::Vec<crate::types::EdgeModelSummary>>,
    /// <p>Edge Manager agent version.</p>
    #[doc(hidden)]
    pub agent_version: std::option::Option<std::string::String>,
}
impl DeviceSummary {
    /// <p>The unique identifier of the device.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of the device.</p>
    pub fn device_arn(&self) -> std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>A description of the device.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the fleet the device belongs to.</p>
    pub fn device_fleet_name(&self) -> std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
    /// <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device..</p>
    pub fn iot_thing_name(&self) -> std::option::Option<&str> {
        self.iot_thing_name.as_deref()
    }
    /// <p>The timestamp of the last registration or de-reregistration.</p>
    pub fn registration_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.registration_time.as_ref()
    }
    /// <p>The last heartbeat received from the device.</p>
    pub fn latest_heartbeat(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.latest_heartbeat.as_ref()
    }
    /// <p>Models on the device.</p>
    pub fn models(&self) -> std::option::Option<&[crate::types::EdgeModelSummary]> {
        self.models.as_deref()
    }
    /// <p>Edge Manager agent version.</p>
    pub fn agent_version(&self) -> std::option::Option<&str> {
        self.agent_version.as_deref()
    }
}
impl DeviceSummary {
    /// Creates a new builder-style object to manufacture [`DeviceSummary`](crate::types::DeviceSummary).
    pub fn builder() -> crate::types::builders::DeviceSummaryBuilder {
        crate::types::builders::DeviceSummaryBuilder::default()
    }
}

/// A builder for [`DeviceSummary`](crate::types::DeviceSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceSummaryBuilder {
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) device_arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) device_fleet_name: std::option::Option<std::string::String>,
    pub(crate) iot_thing_name: std::option::Option<std::string::String>,
    pub(crate) registration_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) latest_heartbeat: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) models: std::option::Option<std::vec::Vec<crate::types::EdgeModelSummary>>,
    pub(crate) agent_version: std::option::Option<std::string::String>,
}
impl DeviceSummaryBuilder {
    /// <p>The unique identifier of the device.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The unique identifier of the device.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the device.</p>
    pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the device.</p>
    pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    /// <p>A description of the device.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the device.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The name of the fleet the device belongs to.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_fleet_name = Some(input.into());
        self
    }
    /// <p>The name of the fleet the device belongs to.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device..</p>
    pub fn iot_thing_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.iot_thing_name = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device..</p>
    pub fn set_iot_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iot_thing_name = input;
        self
    }
    /// <p>The timestamp of the last registration or de-reregistration.</p>
    pub fn registration_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.registration_time = Some(input);
        self
    }
    /// <p>The timestamp of the last registration or de-reregistration.</p>
    pub fn set_registration_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.registration_time = input;
        self
    }
    /// <p>The last heartbeat received from the device.</p>
    pub fn latest_heartbeat(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.latest_heartbeat = Some(input);
        self
    }
    /// <p>The last heartbeat received from the device.</p>
    pub fn set_latest_heartbeat(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.latest_heartbeat = input;
        self
    }
    /// Appends an item to `models`.
    ///
    /// To override the contents of this collection use [`set_models`](Self::set_models).
    ///
    /// <p>Models on the device.</p>
    pub fn models(mut self, input: crate::types::EdgeModelSummary) -> Self {
        let mut v = self.models.unwrap_or_default();
        v.push(input);
        self.models = Some(v);
        self
    }
    /// <p>Models on the device.</p>
    pub fn set_models(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EdgeModelSummary>>,
    ) -> Self {
        self.models = input;
        self
    }
    /// <p>Edge Manager agent version.</p>
    pub fn agent_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.agent_version = Some(input.into());
        self
    }
    /// <p>Edge Manager agent version.</p>
    pub fn set_agent_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceSummary`](crate::types::DeviceSummary).
    pub fn build(self) -> crate::types::DeviceSummary {
        crate::types::DeviceSummary {
            device_name: self.device_name,
            device_arn: self.device_arn,
            description: self.description,
            device_fleet_name: self.device_fleet_name,
            iot_thing_name: self.iot_thing_name,
            registration_time: self.registration_time,
            latest_heartbeat: self.latest_heartbeat,
            models: self.models,
            agent_version: self.agent_version,
        }
    }
}
