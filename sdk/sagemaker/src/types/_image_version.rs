// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A version of a SageMaker <code>Image</code>. A version represents an existing container image.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageVersion {
    /// <p>When the version was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When a create or delete operation fails, the reason for the failure.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the image the version is based on.</p>
    pub image_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the version.</p>
    pub image_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the version.</p>
    pub image_version_status: ::std::option::Option<crate::types::ImageVersionStatus>,
    /// <p>When the version was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The version number.</p>
    pub version: ::std::option::Option<i32>,
}
impl ImageVersion {
    /// <p>When the version was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When a create or delete operation fails, the reason for the failure.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The ARN of the image the version is based on.</p>
    pub fn image_arn(&self) -> ::std::option::Option<&str> {
        self.image_arn.as_deref()
    }
    /// <p>The ARN of the version.</p>
    pub fn image_version_arn(&self) -> ::std::option::Option<&str> {
        self.image_version_arn.as_deref()
    }
    /// <p>The status of the version.</p>
    pub fn image_version_status(&self) -> ::std::option::Option<&crate::types::ImageVersionStatus> {
        self.image_version_status.as_ref()
    }
    /// <p>When the version was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The version number.</p>
    pub fn version(&self) -> ::std::option::Option<i32> {
        self.version
    }
}
impl ImageVersion {
    /// Creates a new builder-style object to manufacture [`ImageVersion`](crate::types::ImageVersion).
    pub fn builder() -> crate::types::builders::ImageVersionBuilder {
        crate::types::builders::ImageVersionBuilder::default()
    }
}

/// A builder for [`ImageVersion`](crate::types::ImageVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImageVersionBuilder {
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) image_arn: ::std::option::Option<::std::string::String>,
    pub(crate) image_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) image_version_status: ::std::option::Option<crate::types::ImageVersionStatus>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) version: ::std::option::Option<i32>,
}
impl ImageVersionBuilder {
    /// <p>When the version was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the version was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the version was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>When a create or delete operation fails, the reason for the failure.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When a create or delete operation fails, the reason for the failure.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>When a create or delete operation fails, the reason for the failure.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The ARN of the image the version is based on.</p>
    /// This field is required.
    pub fn image_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the image the version is based on.</p>
    pub fn set_image_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_arn = input;
        self
    }
    /// <p>The ARN of the image the version is based on.</p>
    pub fn get_image_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_arn
    }
    /// <p>The ARN of the version.</p>
    /// This field is required.
    pub fn image_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the version.</p>
    pub fn set_image_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_version_arn = input;
        self
    }
    /// <p>The ARN of the version.</p>
    pub fn get_image_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_version_arn
    }
    /// <p>The status of the version.</p>
    /// This field is required.
    pub fn image_version_status(mut self, input: crate::types::ImageVersionStatus) -> Self {
        self.image_version_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the version.</p>
    pub fn set_image_version_status(mut self, input: ::std::option::Option<crate::types::ImageVersionStatus>) -> Self {
        self.image_version_status = input;
        self
    }
    /// <p>The status of the version.</p>
    pub fn get_image_version_status(&self) -> &::std::option::Option<crate::types::ImageVersionStatus> {
        &self.image_version_status
    }
    /// <p>When the version was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the version was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>When the version was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The version number.</p>
    /// This field is required.
    pub fn version(mut self, input: i32) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number.</p>
    pub fn set_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version number.</p>
    pub fn get_version(&self) -> &::std::option::Option<i32> {
        &self.version
    }
    /// Consumes the builder and constructs a [`ImageVersion`](crate::types::ImageVersion).
    pub fn build(self) -> crate::types::ImageVersion {
        crate::types::ImageVersion {
            creation_time: self.creation_time,
            failure_reason: self.failure_reason,
            image_arn: self.image_arn,
            image_version_arn: self.image_version_arn,
            image_version_status: self.image_version_status,
            last_modified_time: self.last_modified_time,
            version: self.version,
        }
    }
}
