// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the configurations of selected devices.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceSelectionConfig {
    /// <p>Type of device subsets to deploy to the current stage.</p>
    pub device_subset_type: ::std::option::Option<crate::types::DeviceSubsetType>,
    /// <p>Percentage of devices in the fleet to deploy to the current stage.</p>
    pub percentage: ::std::option::Option<i32>,
    /// <p>List of devices chosen to deploy.</p>
    pub device_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A filter to select devices with names containing this name.</p>
    pub device_name_contains: ::std::option::Option<::std::string::String>,
}
impl DeviceSelectionConfig {
    /// <p>Type of device subsets to deploy to the current stage.</p>
    pub fn device_subset_type(&self) -> ::std::option::Option<&crate::types::DeviceSubsetType> {
        self.device_subset_type.as_ref()
    }
    /// <p>Percentage of devices in the fleet to deploy to the current stage.</p>
    pub fn percentage(&self) -> ::std::option::Option<i32> {
        self.percentage
    }
    /// <p>List of devices chosen to deploy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.device_names.is_none()`.
    pub fn device_names(&self) -> &[::std::string::String] {
        self.device_names.as_deref().unwrap_or_default()
    }
    /// <p>A filter to select devices with names containing this name.</p>
    pub fn device_name_contains(&self) -> ::std::option::Option<&str> {
        self.device_name_contains.as_deref()
    }
}
impl DeviceSelectionConfig {
    /// Creates a new builder-style object to manufacture [`DeviceSelectionConfig`](crate::types::DeviceSelectionConfig).
    pub fn builder() -> crate::types::builders::DeviceSelectionConfigBuilder {
        crate::types::builders::DeviceSelectionConfigBuilder::default()
    }
}

/// A builder for [`DeviceSelectionConfig`](crate::types::DeviceSelectionConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeviceSelectionConfigBuilder {
    pub(crate) device_subset_type: ::std::option::Option<crate::types::DeviceSubsetType>,
    pub(crate) percentage: ::std::option::Option<i32>,
    pub(crate) device_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) device_name_contains: ::std::option::Option<::std::string::String>,
}
impl DeviceSelectionConfigBuilder {
    /// <p>Type of device subsets to deploy to the current stage.</p>
    /// This field is required.
    pub fn device_subset_type(mut self, input: crate::types::DeviceSubsetType) -> Self {
        self.device_subset_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of device subsets to deploy to the current stage.</p>
    pub fn set_device_subset_type(mut self, input: ::std::option::Option<crate::types::DeviceSubsetType>) -> Self {
        self.device_subset_type = input;
        self
    }
    /// <p>Type of device subsets to deploy to the current stage.</p>
    pub fn get_device_subset_type(&self) -> &::std::option::Option<crate::types::DeviceSubsetType> {
        &self.device_subset_type
    }
    /// <p>Percentage of devices in the fleet to deploy to the current stage.</p>
    pub fn percentage(mut self, input: i32) -> Self {
        self.percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Percentage of devices in the fleet to deploy to the current stage.</p>
    pub fn set_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.percentage = input;
        self
    }
    /// <p>Percentage of devices in the fleet to deploy to the current stage.</p>
    pub fn get_percentage(&self) -> &::std::option::Option<i32> {
        &self.percentage
    }
    /// Appends an item to `device_names`.
    ///
    /// To override the contents of this collection use [`set_device_names`](Self::set_device_names).
    ///
    /// <p>List of devices chosen to deploy.</p>
    pub fn device_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.device_names.unwrap_or_default();
        v.push(input.into());
        self.device_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of devices chosen to deploy.</p>
    pub fn set_device_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.device_names = input;
        self
    }
    /// <p>List of devices chosen to deploy.</p>
    pub fn get_device_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.device_names
    }
    /// <p>A filter to select devices with names containing this name.</p>
    pub fn device_name_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_name_contains = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter to select devices with names containing this name.</p>
    pub fn set_device_name_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_name_contains = input;
        self
    }
    /// <p>A filter to select devices with names containing this name.</p>
    pub fn get_device_name_contains(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_name_contains
    }
    /// Consumes the builder and constructs a [`DeviceSelectionConfig`](crate::types::DeviceSelectionConfig).
    pub fn build(self) -> crate::types::DeviceSelectionConfig {
        crate::types::DeviceSelectionConfig {
            device_subset_type: self.device_subset_type,
            percentage: self.percentage,
            device_names: self.device_names,
            device_name_contains: self.device_name_contains,
        }
    }
}
