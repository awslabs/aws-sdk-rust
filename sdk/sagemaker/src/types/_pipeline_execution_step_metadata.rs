// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata for a step execution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PipelineExecutionStepMetadata {
    /// <p>The Amazon Resource Name (ARN) of the training job that was run by this step execution.</p>
    #[doc(hidden)]
    pub training_job: std::option::Option<crate::types::TrainingJobStepMetadata>,
    /// <p>The Amazon Resource Name (ARN) of the processing job that was run by this step execution.</p>
    #[doc(hidden)]
    pub processing_job: std::option::Option<crate::types::ProcessingJobStepMetadata>,
    /// <p>The Amazon Resource Name (ARN) of the transform job that was run by this step execution.</p>
    #[doc(hidden)]
    pub transform_job: std::option::Option<crate::types::TransformJobStepMetadata>,
    /// <p>The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.</p>
    #[doc(hidden)]
    pub tuning_job: std::option::Option<crate::types::TuningJobStepMetaData>,
    /// <p>The Amazon Resource Name (ARN) of the model that was created by this step execution.</p>
    #[doc(hidden)]
    pub model: std::option::Option<crate::types::ModelStepMetadata>,
    /// <p>The Amazon Resource Name (ARN) of the model package that the model was registered to by this step execution.</p>
    #[doc(hidden)]
    pub register_model: std::option::Option<crate::types::RegisterModelStepMetadata>,
    /// <p>The outcome of the condition evaluation that was run by this step execution.</p>
    #[doc(hidden)]
    pub condition: std::option::Option<crate::types::ConditionStepMetadata>,
    /// <p>The URL of the Amazon SQS queue used by this step execution, the pipeline generated token, and a list of output parameters.</p>
    #[doc(hidden)]
    pub callback: std::option::Option<crate::types::CallbackStepMetadata>,
    /// <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution and a list of output parameters.</p>
    #[doc(hidden)]
    pub lambda: std::option::Option<crate::types::LambdaStepMetadata>,
    /// <p>The configurations and outcomes of the check step execution. This includes: </p>
    /// <ul>
    /// <li> <p>The type of the check conducted.</p> </li>
    /// <li> <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p> </li>
    /// <li> <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p> </li>
    /// <li> <p>The model package group name provided.</p> </li>
    /// <li> <p>The Amazon S3 URI of the violation report if violations detected.</p> </li>
    /// <li> <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p> </li>
    /// <li> <p>The Boolean flags indicating if the drift check is skipped.</p> </li>
    /// <li> <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as <code>CalculatedBaseline</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub quality_check: std::option::Option<crate::types::QualityCheckStepMetadata>,
    /// <p>Container for the metadata for a Clarify check step. The configurations and outcomes of the check step execution. This includes: </p>
    /// <ul>
    /// <li> <p>The type of the check conducted,</p> </li>
    /// <li> <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p> </li>
    /// <li> <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p> </li>
    /// <li> <p>The model package group name provided.</p> </li>
    /// <li> <p>The Amazon S3 URI of the violation report if violations detected.</p> </li>
    /// <li> <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p> </li>
    /// <li> <p>The boolean flags indicating if the drift check is skipped.</p> </li>
    /// <li> <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as <code>CalculatedBaseline</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub clarify_check: std::option::Option<crate::types::ClarifyCheckStepMetadata>,
    /// <p>The configurations and outcomes of an Amazon EMR step execution.</p>
    #[doc(hidden)]
    pub emr: std::option::Option<crate::types::EmrStepMetadata>,
    /// <p>The configurations and outcomes of a Fail step execution.</p>
    #[doc(hidden)]
    pub fail: std::option::Option<crate::types::FailStepMetadata>,
    /// <p>The Amazon Resource Name (ARN) of the AutoML job that was run by this step.</p>
    #[doc(hidden)]
    pub auto_ml_job: std::option::Option<crate::types::AutoMlJobStepMetadata>,
}
impl PipelineExecutionStepMetadata {
    /// <p>The Amazon Resource Name (ARN) of the training job that was run by this step execution.</p>
    pub fn training_job(&self) -> std::option::Option<&crate::types::TrainingJobStepMetadata> {
        self.training_job.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the processing job that was run by this step execution.</p>
    pub fn processing_job(&self) -> std::option::Option<&crate::types::ProcessingJobStepMetadata> {
        self.processing_job.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the transform job that was run by this step execution.</p>
    pub fn transform_job(&self) -> std::option::Option<&crate::types::TransformJobStepMetadata> {
        self.transform_job.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.</p>
    pub fn tuning_job(&self) -> std::option::Option<&crate::types::TuningJobStepMetaData> {
        self.tuning_job.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model that was created by this step execution.</p>
    pub fn model(&self) -> std::option::Option<&crate::types::ModelStepMetadata> {
        self.model.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model package that the model was registered to by this step execution.</p>
    pub fn register_model(&self) -> std::option::Option<&crate::types::RegisterModelStepMetadata> {
        self.register_model.as_ref()
    }
    /// <p>The outcome of the condition evaluation that was run by this step execution.</p>
    pub fn condition(&self) -> std::option::Option<&crate::types::ConditionStepMetadata> {
        self.condition.as_ref()
    }
    /// <p>The URL of the Amazon SQS queue used by this step execution, the pipeline generated token, and a list of output parameters.</p>
    pub fn callback(&self) -> std::option::Option<&crate::types::CallbackStepMetadata> {
        self.callback.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution and a list of output parameters.</p>
    pub fn lambda(&self) -> std::option::Option<&crate::types::LambdaStepMetadata> {
        self.lambda.as_ref()
    }
    /// <p>The configurations and outcomes of the check step execution. This includes: </p>
    /// <ul>
    /// <li> <p>The type of the check conducted.</p> </li>
    /// <li> <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p> </li>
    /// <li> <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p> </li>
    /// <li> <p>The model package group name provided.</p> </li>
    /// <li> <p>The Amazon S3 URI of the violation report if violations detected.</p> </li>
    /// <li> <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p> </li>
    /// <li> <p>The Boolean flags indicating if the drift check is skipped.</p> </li>
    /// <li> <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as <code>CalculatedBaseline</code>.</p> </li>
    /// </ul>
    pub fn quality_check(&self) -> std::option::Option<&crate::types::QualityCheckStepMetadata> {
        self.quality_check.as_ref()
    }
    /// <p>Container for the metadata for a Clarify check step. The configurations and outcomes of the check step execution. This includes: </p>
    /// <ul>
    /// <li> <p>The type of the check conducted,</p> </li>
    /// <li> <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p> </li>
    /// <li> <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p> </li>
    /// <li> <p>The model package group name provided.</p> </li>
    /// <li> <p>The Amazon S3 URI of the violation report if violations detected.</p> </li>
    /// <li> <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p> </li>
    /// <li> <p>The boolean flags indicating if the drift check is skipped.</p> </li>
    /// <li> <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as <code>CalculatedBaseline</code>.</p> </li>
    /// </ul>
    pub fn clarify_check(&self) -> std::option::Option<&crate::types::ClarifyCheckStepMetadata> {
        self.clarify_check.as_ref()
    }
    /// <p>The configurations and outcomes of an Amazon EMR step execution.</p>
    pub fn emr(&self) -> std::option::Option<&crate::types::EmrStepMetadata> {
        self.emr.as_ref()
    }
    /// <p>The configurations and outcomes of a Fail step execution.</p>
    pub fn fail(&self) -> std::option::Option<&crate::types::FailStepMetadata> {
        self.fail.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AutoML job that was run by this step.</p>
    pub fn auto_ml_job(&self) -> std::option::Option<&crate::types::AutoMlJobStepMetadata> {
        self.auto_ml_job.as_ref()
    }
}
impl PipelineExecutionStepMetadata {
    /// Creates a new builder-style object to manufacture [`PipelineExecutionStepMetadata`](crate::types::PipelineExecutionStepMetadata).
    pub fn builder() -> crate::types::builders::PipelineExecutionStepMetadataBuilder {
        crate::types::builders::PipelineExecutionStepMetadataBuilder::default()
    }
}

/// A builder for [`PipelineExecutionStepMetadata`](crate::types::PipelineExecutionStepMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PipelineExecutionStepMetadataBuilder {
    pub(crate) training_job: std::option::Option<crate::types::TrainingJobStepMetadata>,
    pub(crate) processing_job: std::option::Option<crate::types::ProcessingJobStepMetadata>,
    pub(crate) transform_job: std::option::Option<crate::types::TransformJobStepMetadata>,
    pub(crate) tuning_job: std::option::Option<crate::types::TuningJobStepMetaData>,
    pub(crate) model: std::option::Option<crate::types::ModelStepMetadata>,
    pub(crate) register_model: std::option::Option<crate::types::RegisterModelStepMetadata>,
    pub(crate) condition: std::option::Option<crate::types::ConditionStepMetadata>,
    pub(crate) callback: std::option::Option<crate::types::CallbackStepMetadata>,
    pub(crate) lambda: std::option::Option<crate::types::LambdaStepMetadata>,
    pub(crate) quality_check: std::option::Option<crate::types::QualityCheckStepMetadata>,
    pub(crate) clarify_check: std::option::Option<crate::types::ClarifyCheckStepMetadata>,
    pub(crate) emr: std::option::Option<crate::types::EmrStepMetadata>,
    pub(crate) fail: std::option::Option<crate::types::FailStepMetadata>,
    pub(crate) auto_ml_job: std::option::Option<crate::types::AutoMlJobStepMetadata>,
}
impl PipelineExecutionStepMetadataBuilder {
    /// <p>The Amazon Resource Name (ARN) of the training job that was run by this step execution.</p>
    pub fn training_job(mut self, input: crate::types::TrainingJobStepMetadata) -> Self {
        self.training_job = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the training job that was run by this step execution.</p>
    pub fn set_training_job(
        mut self,
        input: std::option::Option<crate::types::TrainingJobStepMetadata>,
    ) -> Self {
        self.training_job = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the processing job that was run by this step execution.</p>
    pub fn processing_job(mut self, input: crate::types::ProcessingJobStepMetadata) -> Self {
        self.processing_job = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the processing job that was run by this step execution.</p>
    pub fn set_processing_job(
        mut self,
        input: std::option::Option<crate::types::ProcessingJobStepMetadata>,
    ) -> Self {
        self.processing_job = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the transform job that was run by this step execution.</p>
    pub fn transform_job(mut self, input: crate::types::TransformJobStepMetadata) -> Self {
        self.transform_job = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the transform job that was run by this step execution.</p>
    pub fn set_transform_job(
        mut self,
        input: std::option::Option<crate::types::TransformJobStepMetadata>,
    ) -> Self {
        self.transform_job = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.</p>
    pub fn tuning_job(mut self, input: crate::types::TuningJobStepMetaData) -> Self {
        self.tuning_job = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.</p>
    pub fn set_tuning_job(
        mut self,
        input: std::option::Option<crate::types::TuningJobStepMetaData>,
    ) -> Self {
        self.tuning_job = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model that was created by this step execution.</p>
    pub fn model(mut self, input: crate::types::ModelStepMetadata) -> Self {
        self.model = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model that was created by this step execution.</p>
    pub fn set_model(
        mut self,
        input: std::option::Option<crate::types::ModelStepMetadata>,
    ) -> Self {
        self.model = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model package that the model was registered to by this step execution.</p>
    pub fn register_model(mut self, input: crate::types::RegisterModelStepMetadata) -> Self {
        self.register_model = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model package that the model was registered to by this step execution.</p>
    pub fn set_register_model(
        mut self,
        input: std::option::Option<crate::types::RegisterModelStepMetadata>,
    ) -> Self {
        self.register_model = input;
        self
    }
    /// <p>The outcome of the condition evaluation that was run by this step execution.</p>
    pub fn condition(mut self, input: crate::types::ConditionStepMetadata) -> Self {
        self.condition = Some(input);
        self
    }
    /// <p>The outcome of the condition evaluation that was run by this step execution.</p>
    pub fn set_condition(
        mut self,
        input: std::option::Option<crate::types::ConditionStepMetadata>,
    ) -> Self {
        self.condition = input;
        self
    }
    /// <p>The URL of the Amazon SQS queue used by this step execution, the pipeline generated token, and a list of output parameters.</p>
    pub fn callback(mut self, input: crate::types::CallbackStepMetadata) -> Self {
        self.callback = Some(input);
        self
    }
    /// <p>The URL of the Amazon SQS queue used by this step execution, the pipeline generated token, and a list of output parameters.</p>
    pub fn set_callback(
        mut self,
        input: std::option::Option<crate::types::CallbackStepMetadata>,
    ) -> Self {
        self.callback = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution and a list of output parameters.</p>
    pub fn lambda(mut self, input: crate::types::LambdaStepMetadata) -> Self {
        self.lambda = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution and a list of output parameters.</p>
    pub fn set_lambda(
        mut self,
        input: std::option::Option<crate::types::LambdaStepMetadata>,
    ) -> Self {
        self.lambda = input;
        self
    }
    /// <p>The configurations and outcomes of the check step execution. This includes: </p>
    /// <ul>
    /// <li> <p>The type of the check conducted.</p> </li>
    /// <li> <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p> </li>
    /// <li> <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p> </li>
    /// <li> <p>The model package group name provided.</p> </li>
    /// <li> <p>The Amazon S3 URI of the violation report if violations detected.</p> </li>
    /// <li> <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p> </li>
    /// <li> <p>The Boolean flags indicating if the drift check is skipped.</p> </li>
    /// <li> <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as <code>CalculatedBaseline</code>.</p> </li>
    /// </ul>
    pub fn quality_check(mut self, input: crate::types::QualityCheckStepMetadata) -> Self {
        self.quality_check = Some(input);
        self
    }
    /// <p>The configurations and outcomes of the check step execution. This includes: </p>
    /// <ul>
    /// <li> <p>The type of the check conducted.</p> </li>
    /// <li> <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p> </li>
    /// <li> <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p> </li>
    /// <li> <p>The model package group name provided.</p> </li>
    /// <li> <p>The Amazon S3 URI of the violation report if violations detected.</p> </li>
    /// <li> <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p> </li>
    /// <li> <p>The Boolean flags indicating if the drift check is skipped.</p> </li>
    /// <li> <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as <code>CalculatedBaseline</code>.</p> </li>
    /// </ul>
    pub fn set_quality_check(
        mut self,
        input: std::option::Option<crate::types::QualityCheckStepMetadata>,
    ) -> Self {
        self.quality_check = input;
        self
    }
    /// <p>Container for the metadata for a Clarify check step. The configurations and outcomes of the check step execution. This includes: </p>
    /// <ul>
    /// <li> <p>The type of the check conducted,</p> </li>
    /// <li> <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p> </li>
    /// <li> <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p> </li>
    /// <li> <p>The model package group name provided.</p> </li>
    /// <li> <p>The Amazon S3 URI of the violation report if violations detected.</p> </li>
    /// <li> <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p> </li>
    /// <li> <p>The boolean flags indicating if the drift check is skipped.</p> </li>
    /// <li> <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as <code>CalculatedBaseline</code>.</p> </li>
    /// </ul>
    pub fn clarify_check(mut self, input: crate::types::ClarifyCheckStepMetadata) -> Self {
        self.clarify_check = Some(input);
        self
    }
    /// <p>Container for the metadata for a Clarify check step. The configurations and outcomes of the check step execution. This includes: </p>
    /// <ul>
    /// <li> <p>The type of the check conducted,</p> </li>
    /// <li> <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p> </li>
    /// <li> <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p> </li>
    /// <li> <p>The model package group name provided.</p> </li>
    /// <li> <p>The Amazon S3 URI of the violation report if violations detected.</p> </li>
    /// <li> <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p> </li>
    /// <li> <p>The boolean flags indicating if the drift check is skipped.</p> </li>
    /// <li> <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as <code>CalculatedBaseline</code>.</p> </li>
    /// </ul>
    pub fn set_clarify_check(
        mut self,
        input: std::option::Option<crate::types::ClarifyCheckStepMetadata>,
    ) -> Self {
        self.clarify_check = input;
        self
    }
    /// <p>The configurations and outcomes of an Amazon EMR step execution.</p>
    pub fn emr(mut self, input: crate::types::EmrStepMetadata) -> Self {
        self.emr = Some(input);
        self
    }
    /// <p>The configurations and outcomes of an Amazon EMR step execution.</p>
    pub fn set_emr(mut self, input: std::option::Option<crate::types::EmrStepMetadata>) -> Self {
        self.emr = input;
        self
    }
    /// <p>The configurations and outcomes of a Fail step execution.</p>
    pub fn fail(mut self, input: crate::types::FailStepMetadata) -> Self {
        self.fail = Some(input);
        self
    }
    /// <p>The configurations and outcomes of a Fail step execution.</p>
    pub fn set_fail(mut self, input: std::option::Option<crate::types::FailStepMetadata>) -> Self {
        self.fail = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AutoML job that was run by this step.</p>
    pub fn auto_ml_job(mut self, input: crate::types::AutoMlJobStepMetadata) -> Self {
        self.auto_ml_job = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AutoML job that was run by this step.</p>
    pub fn set_auto_ml_job(
        mut self,
        input: std::option::Option<crate::types::AutoMlJobStepMetadata>,
    ) -> Self {
        self.auto_ml_job = input;
        self
    }
    /// Consumes the builder and constructs a [`PipelineExecutionStepMetadata`](crate::types::PipelineExecutionStepMetadata).
    pub fn build(self) -> crate::types::PipelineExecutionStepMetadata {
        crate::types::PipelineExecutionStepMetadata {
            training_job: self.training_job,
            processing_job: self.processing_job,
            transform_job: self.transform_job,
            tuning_job: self.tuning_job,
            model: self.model,
            register_model: self.register_model,
            condition: self.condition,
            callback: self.callback,
            lambda: self.lambda,
            quality_check: self.quality_check,
            clarify_check: self.clarify_check,
            emr: self.emr,
            fail: self.fail,
            auto_ml_job: self.auto_ml_job,
        }
    }
}
