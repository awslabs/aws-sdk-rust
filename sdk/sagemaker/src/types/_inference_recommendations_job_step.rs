// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A returned array object for the <code>Steps</code> response field in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_InferenceRecommendationsJobStep.html">ListInferenceRecommendationsJobSteps</a> API command.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InferenceRecommendationsJobStep {
    /// <p>The type of the subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    #[doc(hidden)]
    pub step_type: std::option::Option<crate::types::RecommendationStepType>,
    /// <p>The name of the Inference Recommender job.</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>The current status of the benchmark.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::RecommendationJobStatus>,
    /// <p>The details for a specific benchmark.</p>
    #[doc(hidden)]
    pub inference_benchmark: std::option::Option<crate::types::RecommendationJobInferenceBenchmark>,
}
impl InferenceRecommendationsJobStep {
    /// <p>The type of the subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    pub fn step_type(&self) -> std::option::Option<&crate::types::RecommendationStepType> {
        self.step_type.as_ref()
    }
    /// <p>The name of the Inference Recommender job.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The current status of the benchmark.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::RecommendationJobStatus> {
        self.status.as_ref()
    }
    /// <p>The details for a specific benchmark.</p>
    pub fn inference_benchmark(
        &self,
    ) -> std::option::Option<&crate::types::RecommendationJobInferenceBenchmark> {
        self.inference_benchmark.as_ref()
    }
}
impl InferenceRecommendationsJobStep {
    /// Creates a new builder-style object to manufacture [`InferenceRecommendationsJobStep`](crate::types::InferenceRecommendationsJobStep).
    pub fn builder() -> crate::types::builders::InferenceRecommendationsJobStepBuilder {
        crate::types::builders::InferenceRecommendationsJobStepBuilder::default()
    }
}

/// A builder for [`InferenceRecommendationsJobStep`](crate::types::InferenceRecommendationsJobStep).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InferenceRecommendationsJobStepBuilder {
    pub(crate) step_type: std::option::Option<crate::types::RecommendationStepType>,
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::RecommendationJobStatus>,
    pub(crate) inference_benchmark:
        std::option::Option<crate::types::RecommendationJobInferenceBenchmark>,
}
impl InferenceRecommendationsJobStepBuilder {
    /// <p>The type of the subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    pub fn step_type(mut self, input: crate::types::RecommendationStepType) -> Self {
        self.step_type = Some(input);
        self
    }
    /// <p>The type of the subtask.</p>
    /// <p> <code>BENCHMARK</code>: Evaluate the performance of your model on different instance types.</p>
    pub fn set_step_type(
        mut self,
        input: std::option::Option<crate::types::RecommendationStepType>,
    ) -> Self {
        self.step_type = input;
        self
    }
    /// <p>The name of the Inference Recommender job.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>The name of the Inference Recommender job.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The current status of the benchmark.</p>
    pub fn status(mut self, input: crate::types::RecommendationJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the benchmark.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::RecommendationJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The details for a specific benchmark.</p>
    pub fn inference_benchmark(
        mut self,
        input: crate::types::RecommendationJobInferenceBenchmark,
    ) -> Self {
        self.inference_benchmark = Some(input);
        self
    }
    /// <p>The details for a specific benchmark.</p>
    pub fn set_inference_benchmark(
        mut self,
        input: std::option::Option<crate::types::RecommendationJobInferenceBenchmark>,
    ) -> Self {
        self.inference_benchmark = input;
        self
    }
    /// Consumes the builder and constructs a [`InferenceRecommendationsJobStep`](crate::types::InferenceRecommendationsJobStep).
    pub fn build(self) -> crate::types::InferenceRecommendationsJobStep {
        crate::types::InferenceRecommendationsJobStep {
            step_type: self.step_type,
            job_name: self.job_name,
            status: self.status,
            inference_benchmark: self.inference_benchmark,
        }
    }
}
