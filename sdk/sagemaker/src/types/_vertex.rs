// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A lineage entity connected to the starting entity(ies).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Vertex {
    /// <p>The Amazon Resource Name (ARN) of the lineage entity resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The type of the lineage entity resource. For example: <code>DataSet</code>, <code>Model</code>, <code>Endpoint</code>, etc...</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The type of resource of the lineage entity.</p>
    #[doc(hidden)]
    pub lineage_type: std::option::Option<crate::types::LineageType>,
}
impl Vertex {
    /// <p>The Amazon Resource Name (ARN) of the lineage entity resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The type of the lineage entity resource. For example: <code>DataSet</code>, <code>Model</code>, <code>Endpoint</code>, etc...</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The type of resource of the lineage entity.</p>
    pub fn lineage_type(&self) -> std::option::Option<&crate::types::LineageType> {
        self.lineage_type.as_ref()
    }
}
impl Vertex {
    /// Creates a new builder-style object to manufacture [`Vertex`](crate::types::Vertex).
    pub fn builder() -> crate::types::builders::VertexBuilder {
        crate::types::builders::VertexBuilder::default()
    }
}

/// A builder for [`Vertex`](crate::types::Vertex).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VertexBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) lineage_type: std::option::Option<crate::types::LineageType>,
}
impl VertexBuilder {
    /// <p>The Amazon Resource Name (ARN) of the lineage entity resource.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the lineage entity resource.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The type of the lineage entity resource. For example: <code>DataSet</code>, <code>Model</code>, <code>Endpoint</code>, etc...</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of the lineage entity resource. For example: <code>DataSet</code>, <code>Model</code>, <code>Endpoint</code>, etc...</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of resource of the lineage entity.</p>
    pub fn lineage_type(mut self, input: crate::types::LineageType) -> Self {
        self.lineage_type = Some(input);
        self
    }
    /// <p>The type of resource of the lineage entity.</p>
    pub fn set_lineage_type(
        mut self,
        input: std::option::Option<crate::types::LineageType>,
    ) -> Self {
        self.lineage_type = input;
        self
    }
    /// Consumes the builder and constructs a [`Vertex`](crate::types::Vertex).
    pub fn build(self) -> crate::types::Vertex {
        crate::types::Vertex {
            arn: self.arn,
            r#type: self.r#type,
            lineage_type: self.lineage_type,
        }
    }
}
