// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Stores the config information for how a candidate is generated (optional).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoMlCandidateGenerationConfig {
    /// <p>A URL to the Amazon S3 data source containing selected features from the input data source to run an Autopilot job. You can input <code>FeatureAttributeNames</code> (optional) in JSON format as shown below: </p>
    /// <p> <code>{ "FeatureAttributeNames":["col1", "col2", ...] }</code>.</p>
    /// <p>You can also specify the data type of the feature (optional) in the format shown below:</p>
    /// <p> <code>{ "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... } }</code> </p> <note>
    /// <p>These column keys may not include the target column.</p>
    /// </note>
    /// <p>In ensembling mode, Autopilot will only support the following data types: <code>numeric</code>, <code>categorical</code>, <code>text</code> and <code>datetime</code>. In HPO mode, Autopilot can support <code>numeric</code>, <code>categorical</code>, <code>text</code>, <code>datetime</code> and <code>sequence</code>.</p>
    /// <p>If only <code>FeatureDataTypes</code> is provided, the column keys (<code>col1</code>, <code>col2</code>,..) should be a subset of the column names in the input data. </p>
    /// <p>If both <code>FeatureDataTypes</code> and <code>FeatureAttributeNames</code> are provided, then the column keys should be a subset of the column names provided in <code>FeatureAttributeNames</code>. </p>
    /// <p>The key name <code>FeatureAttributeNames</code> is fixed. The values listed in <code>["col1", "col2", ...]</code> is case sensitive and should be a list of strings containing unique values that are a subset of the column names in the input data. The list of columns provided must not include the target column.</p>
    #[doc(hidden)]
    pub feature_specification_s3_uri: std::option::Option<std::string::String>,
}
impl AutoMlCandidateGenerationConfig {
    /// <p>A URL to the Amazon S3 data source containing selected features from the input data source to run an Autopilot job. You can input <code>FeatureAttributeNames</code> (optional) in JSON format as shown below: </p>
    /// <p> <code>{ "FeatureAttributeNames":["col1", "col2", ...] }</code>.</p>
    /// <p>You can also specify the data type of the feature (optional) in the format shown below:</p>
    /// <p> <code>{ "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... } }</code> </p> <note>
    /// <p>These column keys may not include the target column.</p>
    /// </note>
    /// <p>In ensembling mode, Autopilot will only support the following data types: <code>numeric</code>, <code>categorical</code>, <code>text</code> and <code>datetime</code>. In HPO mode, Autopilot can support <code>numeric</code>, <code>categorical</code>, <code>text</code>, <code>datetime</code> and <code>sequence</code>.</p>
    /// <p>If only <code>FeatureDataTypes</code> is provided, the column keys (<code>col1</code>, <code>col2</code>,..) should be a subset of the column names in the input data. </p>
    /// <p>If both <code>FeatureDataTypes</code> and <code>FeatureAttributeNames</code> are provided, then the column keys should be a subset of the column names provided in <code>FeatureAttributeNames</code>. </p>
    /// <p>The key name <code>FeatureAttributeNames</code> is fixed. The values listed in <code>["col1", "col2", ...]</code> is case sensitive and should be a list of strings containing unique values that are a subset of the column names in the input data. The list of columns provided must not include the target column.</p>
    pub fn feature_specification_s3_uri(&self) -> std::option::Option<&str> {
        self.feature_specification_s3_uri.as_deref()
    }
}
impl AutoMlCandidateGenerationConfig {
    /// Creates a new builder-style object to manufacture [`AutoMlCandidateGenerationConfig`](crate::types::AutoMlCandidateGenerationConfig).
    pub fn builder() -> crate::types::builders::AutoMlCandidateGenerationConfigBuilder {
        crate::types::builders::AutoMlCandidateGenerationConfigBuilder::default()
    }
}

/// A builder for [`AutoMlCandidateGenerationConfig`](crate::types::AutoMlCandidateGenerationConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoMlCandidateGenerationConfigBuilder {
    pub(crate) feature_specification_s3_uri: std::option::Option<std::string::String>,
}
impl AutoMlCandidateGenerationConfigBuilder {
    /// <p>A URL to the Amazon S3 data source containing selected features from the input data source to run an Autopilot job. You can input <code>FeatureAttributeNames</code> (optional) in JSON format as shown below: </p>
    /// <p> <code>{ "FeatureAttributeNames":["col1", "col2", ...] }</code>.</p>
    /// <p>You can also specify the data type of the feature (optional) in the format shown below:</p>
    /// <p> <code>{ "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... } }</code> </p> <note>
    /// <p>These column keys may not include the target column.</p>
    /// </note>
    /// <p>In ensembling mode, Autopilot will only support the following data types: <code>numeric</code>, <code>categorical</code>, <code>text</code> and <code>datetime</code>. In HPO mode, Autopilot can support <code>numeric</code>, <code>categorical</code>, <code>text</code>, <code>datetime</code> and <code>sequence</code>.</p>
    /// <p>If only <code>FeatureDataTypes</code> is provided, the column keys (<code>col1</code>, <code>col2</code>,..) should be a subset of the column names in the input data. </p>
    /// <p>If both <code>FeatureDataTypes</code> and <code>FeatureAttributeNames</code> are provided, then the column keys should be a subset of the column names provided in <code>FeatureAttributeNames</code>. </p>
    /// <p>The key name <code>FeatureAttributeNames</code> is fixed. The values listed in <code>["col1", "col2", ...]</code> is case sensitive and should be a list of strings containing unique values that are a subset of the column names in the input data. The list of columns provided must not include the target column.</p>
    pub fn feature_specification_s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.feature_specification_s3_uri = Some(input.into());
        self
    }
    /// <p>A URL to the Amazon S3 data source containing selected features from the input data source to run an Autopilot job. You can input <code>FeatureAttributeNames</code> (optional) in JSON format as shown below: </p>
    /// <p> <code>{ "FeatureAttributeNames":["col1", "col2", ...] }</code>.</p>
    /// <p>You can also specify the data type of the feature (optional) in the format shown below:</p>
    /// <p> <code>{ "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... } }</code> </p> <note>
    /// <p>These column keys may not include the target column.</p>
    /// </note>
    /// <p>In ensembling mode, Autopilot will only support the following data types: <code>numeric</code>, <code>categorical</code>, <code>text</code> and <code>datetime</code>. In HPO mode, Autopilot can support <code>numeric</code>, <code>categorical</code>, <code>text</code>, <code>datetime</code> and <code>sequence</code>.</p>
    /// <p>If only <code>FeatureDataTypes</code> is provided, the column keys (<code>col1</code>, <code>col2</code>,..) should be a subset of the column names in the input data. </p>
    /// <p>If both <code>FeatureDataTypes</code> and <code>FeatureAttributeNames</code> are provided, then the column keys should be a subset of the column names provided in <code>FeatureAttributeNames</code>. </p>
    /// <p>The key name <code>FeatureAttributeNames</code> is fixed. The values listed in <code>["col1", "col2", ...]</code> is case sensitive and should be a list of strings containing unique values that are a subset of the column names in the input data. The list of columns provided must not include the target column.</p>
    pub fn set_feature_specification_s3_uri(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.feature_specification_s3_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoMlCandidateGenerationConfig`](crate::types::AutoMlCandidateGenerationConfig).
    pub fn build(self) -> crate::types::AutoMlCandidateGenerationConfig {
        crate::types::AutoMlCandidateGenerationConfig {
            feature_specification_s3_uri: self.feature_specification_s3_uri,
        }
    }
}
