// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a breakdown of the number of objects labeled.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LabelCounters {
    /// <p>The total number of objects labeled.</p>
    #[doc(hidden)]
    pub total_labeled: i32,
    /// <p>The total number of objects labeled by a human worker.</p>
    #[doc(hidden)]
    pub human_labeled: i32,
    /// <p>The total number of objects labeled by automated data labeling.</p>
    #[doc(hidden)]
    pub machine_labeled: i32,
    /// <p>The total number of objects that could not be labeled due to an error.</p>
    #[doc(hidden)]
    pub failed_non_retryable_error: i32,
    /// <p>The total number of objects not yet labeled.</p>
    #[doc(hidden)]
    pub unlabeled: i32,
}
impl LabelCounters {
    /// <p>The total number of objects labeled.</p>
    pub fn total_labeled(&self) -> i32 {
        self.total_labeled
    }
    /// <p>The total number of objects labeled by a human worker.</p>
    pub fn human_labeled(&self) -> i32 {
        self.human_labeled
    }
    /// <p>The total number of objects labeled by automated data labeling.</p>
    pub fn machine_labeled(&self) -> i32 {
        self.machine_labeled
    }
    /// <p>The total number of objects that could not be labeled due to an error.</p>
    pub fn failed_non_retryable_error(&self) -> i32 {
        self.failed_non_retryable_error
    }
    /// <p>The total number of objects not yet labeled.</p>
    pub fn unlabeled(&self) -> i32 {
        self.unlabeled
    }
}
impl LabelCounters {
    /// Creates a new builder-style object to manufacture [`LabelCounters`](crate::types::LabelCounters).
    pub fn builder() -> crate::types::builders::LabelCountersBuilder {
        crate::types::builders::LabelCountersBuilder::default()
    }
}

/// A builder for [`LabelCounters`](crate::types::LabelCounters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LabelCountersBuilder {
    pub(crate) total_labeled: std::option::Option<i32>,
    pub(crate) human_labeled: std::option::Option<i32>,
    pub(crate) machine_labeled: std::option::Option<i32>,
    pub(crate) failed_non_retryable_error: std::option::Option<i32>,
    pub(crate) unlabeled: std::option::Option<i32>,
}
impl LabelCountersBuilder {
    /// <p>The total number of objects labeled.</p>
    pub fn total_labeled(mut self, input: i32) -> Self {
        self.total_labeled = Some(input);
        self
    }
    /// <p>The total number of objects labeled.</p>
    pub fn set_total_labeled(mut self, input: std::option::Option<i32>) -> Self {
        self.total_labeled = input;
        self
    }
    /// <p>The total number of objects labeled by a human worker.</p>
    pub fn human_labeled(mut self, input: i32) -> Self {
        self.human_labeled = Some(input);
        self
    }
    /// <p>The total number of objects labeled by a human worker.</p>
    pub fn set_human_labeled(mut self, input: std::option::Option<i32>) -> Self {
        self.human_labeled = input;
        self
    }
    /// <p>The total number of objects labeled by automated data labeling.</p>
    pub fn machine_labeled(mut self, input: i32) -> Self {
        self.machine_labeled = Some(input);
        self
    }
    /// <p>The total number of objects labeled by automated data labeling.</p>
    pub fn set_machine_labeled(mut self, input: std::option::Option<i32>) -> Self {
        self.machine_labeled = input;
        self
    }
    /// <p>The total number of objects that could not be labeled due to an error.</p>
    pub fn failed_non_retryable_error(mut self, input: i32) -> Self {
        self.failed_non_retryable_error = Some(input);
        self
    }
    /// <p>The total number of objects that could not be labeled due to an error.</p>
    pub fn set_failed_non_retryable_error(mut self, input: std::option::Option<i32>) -> Self {
        self.failed_non_retryable_error = input;
        self
    }
    /// <p>The total number of objects not yet labeled.</p>
    pub fn unlabeled(mut self, input: i32) -> Self {
        self.unlabeled = Some(input);
        self
    }
    /// <p>The total number of objects not yet labeled.</p>
    pub fn set_unlabeled(mut self, input: std::option::Option<i32>) -> Self {
        self.unlabeled = input;
        self
    }
    /// Consumes the builder and constructs a [`LabelCounters`](crate::types::LabelCounters).
    pub fn build(self) -> crate::types::LabelCounters {
        crate::types::LabelCounters {
            total_labeled: self.total_labeled.unwrap_or_default(),
            human_labeled: self.human_labeled.unwrap_or_default(),
            machine_labeled: self.machine_labeled.unwrap_or_default(),
            failed_non_retryable_error: self.failed_non_retryable_error.unwrap_or_default(),
            unlabeled: self.unlabeled.unwrap_or_default(),
        }
    }
}
