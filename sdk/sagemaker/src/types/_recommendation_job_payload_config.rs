// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the payload for a recommendation job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendationJobPayloadConfig {
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub sample_payload_url: ::std::option::Option<::std::string::String>,
    /// <p>The supported MIME types for the input data.</p>
    pub supported_content_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RecommendationJobPayloadConfig {
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn sample_payload_url(&self) -> ::std::option::Option<&str> {
        self.sample_payload_url.as_deref()
    }
    /// <p>The supported MIME types for the input data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_content_types.is_none()`.
    pub fn supported_content_types(&self) -> &[::std::string::String] {
        self.supported_content_types.as_deref().unwrap_or_default()
    }
}
impl RecommendationJobPayloadConfig {
    /// Creates a new builder-style object to manufacture [`RecommendationJobPayloadConfig`](crate::types::RecommendationJobPayloadConfig).
    pub fn builder() -> crate::types::builders::RecommendationJobPayloadConfigBuilder {
        crate::types::builders::RecommendationJobPayloadConfigBuilder::default()
    }
}

/// A builder for [`RecommendationJobPayloadConfig`](crate::types::RecommendationJobPayloadConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendationJobPayloadConfigBuilder {
    pub(crate) sample_payload_url: ::std::option::Option<::std::string::String>,
    pub(crate) supported_content_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RecommendationJobPayloadConfigBuilder {
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn sample_payload_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sample_payload_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn set_sample_payload_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sample_payload_url = input;
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn get_sample_payload_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.sample_payload_url
    }
    /// Appends an item to `supported_content_types`.
    ///
    /// To override the contents of this collection use [`set_supported_content_types`](Self::set_supported_content_types).
    ///
    /// <p>The supported MIME types for the input data.</p>
    pub fn supported_content_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.supported_content_types.unwrap_or_default();
        v.push(input.into());
        self.supported_content_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supported MIME types for the input data.</p>
    pub fn set_supported_content_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.supported_content_types = input;
        self
    }
    /// <p>The supported MIME types for the input data.</p>
    pub fn get_supported_content_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.supported_content_types
    }
    /// Consumes the builder and constructs a [`RecommendationJobPayloadConfig`](crate::types::RecommendationJobPayloadConfig).
    pub fn build(self) -> crate::types::RecommendationJobPayloadConfig {
        crate::types::RecommendationJobPayloadConfig {
            sample_payload_url: self.sample_payload_url,
            supported_content_types: self.supported_content_types,
        }
    }
}
