// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The infrastructure configuration for deploying the model to a real-time inference endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RealTimeInferenceConfig {
    /// <p>The instance type the model is deployed to.</p>
    pub instance_type: ::std::option::Option<crate::types::InstanceType>,
    /// <p>The number of instances of the type specified by <code>InstanceType</code>.</p>
    pub instance_count: ::std::option::Option<i32>,
}
impl RealTimeInferenceConfig {
    /// <p>The instance type the model is deployed to.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::InstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The number of instances of the type specified by <code>InstanceType</code>.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
}
impl RealTimeInferenceConfig {
    /// Creates a new builder-style object to manufacture [`RealTimeInferenceConfig`](crate::types::RealTimeInferenceConfig).
    pub fn builder() -> crate::types::builders::RealTimeInferenceConfigBuilder {
        crate::types::builders::RealTimeInferenceConfigBuilder::default()
    }
}

/// A builder for [`RealTimeInferenceConfig`](crate::types::RealTimeInferenceConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RealTimeInferenceConfigBuilder {
    pub(crate) instance_type: ::std::option::Option<crate::types::InstanceType>,
    pub(crate) instance_count: ::std::option::Option<i32>,
}
impl RealTimeInferenceConfigBuilder {
    /// <p>The instance type the model is deployed to.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance type the model is deployed to.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::InstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type the model is deployed to.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::InstanceType> {
        &self.instance_type
    }
    /// <p>The number of instances of the type specified by <code>InstanceType</code>.</p>
    /// This field is required.
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances of the type specified by <code>InstanceType</code>.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The number of instances of the type specified by <code>InstanceType</code>.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// Consumes the builder and constructs a [`RealTimeInferenceConfig`](crate::types::RealTimeInferenceConfig).
    pub fn build(self) -> crate::types::RealTimeInferenceConfig {
        crate::types::RealTimeInferenceConfig {
            instance_type: self.instance_type,
            instance_count: self.instance_count,
        }
    }
}
