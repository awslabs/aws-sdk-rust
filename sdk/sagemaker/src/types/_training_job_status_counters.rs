// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrainingJobStatusCounters {
    /// <p>The number of completed training jobs launched by the hyperparameter tuning job.</p>
    #[doc(hidden)]
    pub completed: i32,
    /// <p>The number of in-progress training jobs launched by a hyperparameter tuning job.</p>
    #[doc(hidden)]
    pub in_progress: i32,
    /// <p>The number of training jobs that failed, but can be retried. A failed training job can be retried only if it failed because an internal service error occurred.</p>
    #[doc(hidden)]
    pub retryable_error: i32,
    /// <p>The number of training jobs that failed and can't be retried. A failed training job can't be retried if it failed because a client error occurred.</p>
    #[doc(hidden)]
    pub non_retryable_error: i32,
    /// <p>The number of training jobs launched by a hyperparameter tuning job that were manually stopped.</p>
    #[doc(hidden)]
    pub stopped: i32,
}
impl TrainingJobStatusCounters {
    /// <p>The number of completed training jobs launched by the hyperparameter tuning job.</p>
    pub fn completed(&self) -> i32 {
        self.completed
    }
    /// <p>The number of in-progress training jobs launched by a hyperparameter tuning job.</p>
    pub fn in_progress(&self) -> i32 {
        self.in_progress
    }
    /// <p>The number of training jobs that failed, but can be retried. A failed training job can be retried only if it failed because an internal service error occurred.</p>
    pub fn retryable_error(&self) -> i32 {
        self.retryable_error
    }
    /// <p>The number of training jobs that failed and can't be retried. A failed training job can't be retried if it failed because a client error occurred.</p>
    pub fn non_retryable_error(&self) -> i32 {
        self.non_retryable_error
    }
    /// <p>The number of training jobs launched by a hyperparameter tuning job that were manually stopped.</p>
    pub fn stopped(&self) -> i32 {
        self.stopped
    }
}
impl TrainingJobStatusCounters {
    /// Creates a new builder-style object to manufacture [`TrainingJobStatusCounters`](crate::types::TrainingJobStatusCounters).
    pub fn builder() -> crate::types::builders::TrainingJobStatusCountersBuilder {
        crate::types::builders::TrainingJobStatusCountersBuilder::default()
    }
}

/// A builder for [`TrainingJobStatusCounters`](crate::types::TrainingJobStatusCounters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrainingJobStatusCountersBuilder {
    pub(crate) completed: std::option::Option<i32>,
    pub(crate) in_progress: std::option::Option<i32>,
    pub(crate) retryable_error: std::option::Option<i32>,
    pub(crate) non_retryable_error: std::option::Option<i32>,
    pub(crate) stopped: std::option::Option<i32>,
}
impl TrainingJobStatusCountersBuilder {
    /// <p>The number of completed training jobs launched by the hyperparameter tuning job.</p>
    pub fn completed(mut self, input: i32) -> Self {
        self.completed = Some(input);
        self
    }
    /// <p>The number of completed training jobs launched by the hyperparameter tuning job.</p>
    pub fn set_completed(mut self, input: std::option::Option<i32>) -> Self {
        self.completed = input;
        self
    }
    /// <p>The number of in-progress training jobs launched by a hyperparameter tuning job.</p>
    pub fn in_progress(mut self, input: i32) -> Self {
        self.in_progress = Some(input);
        self
    }
    /// <p>The number of in-progress training jobs launched by a hyperparameter tuning job.</p>
    pub fn set_in_progress(mut self, input: std::option::Option<i32>) -> Self {
        self.in_progress = input;
        self
    }
    /// <p>The number of training jobs that failed, but can be retried. A failed training job can be retried only if it failed because an internal service error occurred.</p>
    pub fn retryable_error(mut self, input: i32) -> Self {
        self.retryable_error = Some(input);
        self
    }
    /// <p>The number of training jobs that failed, but can be retried. A failed training job can be retried only if it failed because an internal service error occurred.</p>
    pub fn set_retryable_error(mut self, input: std::option::Option<i32>) -> Self {
        self.retryable_error = input;
        self
    }
    /// <p>The number of training jobs that failed and can't be retried. A failed training job can't be retried if it failed because a client error occurred.</p>
    pub fn non_retryable_error(mut self, input: i32) -> Self {
        self.non_retryable_error = Some(input);
        self
    }
    /// <p>The number of training jobs that failed and can't be retried. A failed training job can't be retried if it failed because a client error occurred.</p>
    pub fn set_non_retryable_error(mut self, input: std::option::Option<i32>) -> Self {
        self.non_retryable_error = input;
        self
    }
    /// <p>The number of training jobs launched by a hyperparameter tuning job that were manually stopped.</p>
    pub fn stopped(mut self, input: i32) -> Self {
        self.stopped = Some(input);
        self
    }
    /// <p>The number of training jobs launched by a hyperparameter tuning job that were manually stopped.</p>
    pub fn set_stopped(mut self, input: std::option::Option<i32>) -> Self {
        self.stopped = input;
        self
    }
    /// Consumes the builder and constructs a [`TrainingJobStatusCounters`](crate::types::TrainingJobStatusCounters).
    pub fn build(self) -> crate::types::TrainingJobStatusCounters {
        crate::types::TrainingJobStatusCounters {
            completed: self.completed.unwrap_or_default(),
            in_progress: self.in_progress.unwrap_or_default(),
            retryable_error: self.retryable_error.unwrap_or_default(),
            non_retryable_error: self.non_retryable_error.unwrap_or_default(),
            stopped: self.stopped.unwrap_or_default(),
        }
    }
}
