// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. </p>
/// <p>Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.</p>
/// <ul>
/// <li> <p>0.036</p> </li>
/// <li> <p>0.048</p> </li>
/// <li> <p>0.060</p> </li>
/// <li> <p>0.072</p> </li>
/// <li> <p>0.120</p> </li>
/// <li> <p>0.240</p> </li>
/// <li> <p>0.360</p> </li>
/// <li> <p>0.480</p> </li>
/// <li> <p>0.600</p> </li>
/// <li> <p>0.720</p> </li>
/// <li> <p>0.840</p> </li>
/// <li> <p>0.960</p> </li>
/// <li> <p>1.080</p> </li>
/// <li> <p>1.200</p> </li>
/// </ul>
/// <p>Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.</p>
/// <ul>
/// <li> <p>0.012</p> </li>
/// <li> <p>0.024</p> </li>
/// <li> <p>0.036</p> </li>
/// <li> <p>0.048</p> </li>
/// <li> <p>0.060</p> </li>
/// <li> <p>0.072</p> </li>
/// <li> <p>0.120</p> </li>
/// <li> <p>0.240</p> </li>
/// <li> <p>0.360</p> </li>
/// <li> <p>0.480</p> </li>
/// <li> <p>0.600</p> </li>
/// <li> <p>0.720</p> </li>
/// <li> <p>0.840</p> </li>
/// <li> <p>0.960</p> </li>
/// <li> <p>1.080</p> </li>
/// <li> <p>1.200</p> </li>
/// </ul>
/// <p>Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.</p>
/// <ul>
/// <li> <p>0.840</p> </li>
/// <li> <p>0.960</p> </li>
/// <li> <p>1.080</p> </li>
/// <li> <p>1.200</p> </li>
/// </ul>
/// <p>Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.</p>
/// <ul>
/// <li> <p>2.400 </p> </li>
/// <li> <p>2.280 </p> </li>
/// <li> <p>2.160 </p> </li>
/// <li> <p>2.040 </p> </li>
/// <li> <p>1.920 </p> </li>
/// <li> <p>1.800 </p> </li>
/// <li> <p>1.680 </p> </li>
/// <li> <p>1.560 </p> </li>
/// <li> <p>1.440 </p> </li>
/// <li> <p>1.320 </p> </li>
/// <li> <p>1.200 </p> </li>
/// <li> <p>1.080 </p> </li>
/// <li> <p>0.960 </p> </li>
/// <li> <p>0.840 </p> </li>
/// <li> <p>0.720 </p> </li>
/// <li> <p>0.600 </p> </li>
/// <li> <p>0.480 </p> </li>
/// <li> <p>0.360 </p> </li>
/// <li> <p>0.240 </p> </li>
/// <li> <p>0.120 </p> </li>
/// <li> <p>0.072 </p> </li>
/// <li> <p>0.060 </p> </li>
/// <li> <p>0.048 </p> </li>
/// <li> <p>0.036 </p> </li>
/// <li> <p>0.024 </p> </li>
/// <li> <p>0.012 </p> </li>
/// </ul>
/// <p>Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.</p>
/// <ul>
/// <li> <p>1.200 </p> </li>
/// <li> <p>1.080 </p> </li>
/// <li> <p>0.960 </p> </li>
/// <li> <p>0.840 </p> </li>
/// <li> <p>0.720 </p> </li>
/// <li> <p>0.600 </p> </li>
/// <li> <p>0.480 </p> </li>
/// <li> <p>0.360 </p> </li>
/// <li> <p>0.240 </p> </li>
/// <li> <p>0.120 </p> </li>
/// <li> <p>0.072 </p> </li>
/// <li> <p>0.060 </p> </li>
/// <li> <p>0.048 </p> </li>
/// <li> <p>0.036 </p> </li>
/// <li> <p>0.024 </p> </li>
/// <li> <p>0.012 </p> </li>
/// </ul>
/// <p>Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.</p>
/// <ul>
/// <li> <p>1.200 </p> </li>
/// <li> <p>1.080 </p> </li>
/// <li> <p>0.960 </p> </li>
/// <li> <p>0.840 </p> </li>
/// <li> <p>0.720 </p> </li>
/// <li> <p>0.600 </p> </li>
/// <li> <p>0.480 </p> </li>
/// <li> <p>0.360 </p> </li>
/// <li> <p>0.240 </p> </li>
/// <li> <p>0.120 </p> </li>
/// <li> <p>0.072 </p> </li>
/// <li> <p>0.060 </p> </li>
/// <li> <p>0.048 </p> </li>
/// <li> <p>0.036 </p> </li>
/// <li> <p>0.024 </p> </li>
/// <li> <p>0.012 </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PublicWorkforceTaskPrice {
    /// <p>Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars.</p>
    #[doc(hidden)]
    pub amount_in_usd: std::option::Option<crate::types::Usd>,
}
impl PublicWorkforceTaskPrice {
    /// <p>Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars.</p>
    pub fn amount_in_usd(&self) -> std::option::Option<&crate::types::Usd> {
        self.amount_in_usd.as_ref()
    }
}
impl PublicWorkforceTaskPrice {
    /// Creates a new builder-style object to manufacture [`PublicWorkforceTaskPrice`](crate::types::PublicWorkforceTaskPrice).
    pub fn builder() -> crate::types::builders::PublicWorkforceTaskPriceBuilder {
        crate::types::builders::PublicWorkforceTaskPriceBuilder::default()
    }
}

/// A builder for [`PublicWorkforceTaskPrice`](crate::types::PublicWorkforceTaskPrice).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PublicWorkforceTaskPriceBuilder {
    pub(crate) amount_in_usd: std::option::Option<crate::types::Usd>,
}
impl PublicWorkforceTaskPriceBuilder {
    /// <p>Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars.</p>
    pub fn amount_in_usd(mut self, input: crate::types::Usd) -> Self {
        self.amount_in_usd = Some(input);
        self
    }
    /// <p>Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars.</p>
    pub fn set_amount_in_usd(mut self, input: std::option::Option<crate::types::Usd>) -> Self {
        self.amount_in_usd = input;
        self
    }
    /// Consumes the builder and constructs a [`PublicWorkforceTaskPrice`](crate::types::PublicWorkforceTaskPrice).
    pub fn build(self) -> crate::types::PublicWorkforceTaskPrice {
        crate::types::PublicWorkforceTaskPrice {
            amount_in_usd: self.amount_in_usd,
        }
    }
}
