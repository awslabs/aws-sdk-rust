// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The performance results from running an Inference Recommender job on an existing endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EndpointPerformance {
    /// <p>The metrics for an existing endpoint.</p>
    pub metrics: ::std::option::Option<crate::types::InferenceMetrics>,
    /// <p>Details about a customer endpoint that was compared in an Inference Recommender job.</p>
    pub endpoint_info: ::std::option::Option<crate::types::EndpointInfo>,
}
impl EndpointPerformance {
    /// <p>The metrics for an existing endpoint.</p>
    pub fn metrics(&self) -> ::std::option::Option<&crate::types::InferenceMetrics> {
        self.metrics.as_ref()
    }
    /// <p>Details about a customer endpoint that was compared in an Inference Recommender job.</p>
    pub fn endpoint_info(&self) -> ::std::option::Option<&crate::types::EndpointInfo> {
        self.endpoint_info.as_ref()
    }
}
impl EndpointPerformance {
    /// Creates a new builder-style object to manufacture [`EndpointPerformance`](crate::types::EndpointPerformance).
    pub fn builder() -> crate::types::builders::EndpointPerformanceBuilder {
        crate::types::builders::EndpointPerformanceBuilder::default()
    }
}

/// A builder for [`EndpointPerformance`](crate::types::EndpointPerformance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EndpointPerformanceBuilder {
    pub(crate) metrics: ::std::option::Option<crate::types::InferenceMetrics>,
    pub(crate) endpoint_info: ::std::option::Option<crate::types::EndpointInfo>,
}
impl EndpointPerformanceBuilder {
    /// <p>The metrics for an existing endpoint.</p>
    /// This field is required.
    pub fn metrics(mut self, input: crate::types::InferenceMetrics) -> Self {
        self.metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metrics for an existing endpoint.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<crate::types::InferenceMetrics>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>The metrics for an existing endpoint.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<crate::types::InferenceMetrics> {
        &self.metrics
    }
    /// <p>Details about a customer endpoint that was compared in an Inference Recommender job.</p>
    /// This field is required.
    pub fn endpoint_info(mut self, input: crate::types::EndpointInfo) -> Self {
        self.endpoint_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about a customer endpoint that was compared in an Inference Recommender job.</p>
    pub fn set_endpoint_info(mut self, input: ::std::option::Option<crate::types::EndpointInfo>) -> Self {
        self.endpoint_info = input;
        self
    }
    /// <p>Details about a customer endpoint that was compared in an Inference Recommender job.</p>
    pub fn get_endpoint_info(&self) -> &::std::option::Option<crate::types::EndpointInfo> {
        &self.endpoint_info
    }
    /// Consumes the builder and constructs a [`EndpointPerformance`](crate::types::EndpointPerformance).
    pub fn build(self) -> crate::types::EndpointPerformance {
        crate::types::EndpointPerformance {
            metrics: self.metrics,
            endpoint_info: self.endpoint_info,
        }
    }
}
