// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the drift check baselines that can be used when the model monitor is set using the model package. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DriftCheckBaselines {
    /// <p>Represents the drift check bias baselines that can be used when the model monitor is set using the model package. </p>
    #[doc(hidden)]
    pub bias: std::option::Option<crate::types::DriftCheckBias>,
    /// <p>Represents the drift check explainability baselines that can be used when the model monitor is set using the model package. </p>
    #[doc(hidden)]
    pub explainability: std::option::Option<crate::types::DriftCheckExplainability>,
    /// <p>Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.</p>
    #[doc(hidden)]
    pub model_quality: std::option::Option<crate::types::DriftCheckModelQuality>,
    /// <p>Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package.</p>
    #[doc(hidden)]
    pub model_data_quality: std::option::Option<crate::types::DriftCheckModelDataQuality>,
}
impl DriftCheckBaselines {
    /// <p>Represents the drift check bias baselines that can be used when the model monitor is set using the model package. </p>
    pub fn bias(&self) -> std::option::Option<&crate::types::DriftCheckBias> {
        self.bias.as_ref()
    }
    /// <p>Represents the drift check explainability baselines that can be used when the model monitor is set using the model package. </p>
    pub fn explainability(&self) -> std::option::Option<&crate::types::DriftCheckExplainability> {
        self.explainability.as_ref()
    }
    /// <p>Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.</p>
    pub fn model_quality(&self) -> std::option::Option<&crate::types::DriftCheckModelQuality> {
        self.model_quality.as_ref()
    }
    /// <p>Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package.</p>
    pub fn model_data_quality(
        &self,
    ) -> std::option::Option<&crate::types::DriftCheckModelDataQuality> {
        self.model_data_quality.as_ref()
    }
}
impl DriftCheckBaselines {
    /// Creates a new builder-style object to manufacture [`DriftCheckBaselines`](crate::types::DriftCheckBaselines).
    pub fn builder() -> crate::types::builders::DriftCheckBaselinesBuilder {
        crate::types::builders::DriftCheckBaselinesBuilder::default()
    }
}

/// A builder for [`DriftCheckBaselines`](crate::types::DriftCheckBaselines).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DriftCheckBaselinesBuilder {
    pub(crate) bias: std::option::Option<crate::types::DriftCheckBias>,
    pub(crate) explainability: std::option::Option<crate::types::DriftCheckExplainability>,
    pub(crate) model_quality: std::option::Option<crate::types::DriftCheckModelQuality>,
    pub(crate) model_data_quality: std::option::Option<crate::types::DriftCheckModelDataQuality>,
}
impl DriftCheckBaselinesBuilder {
    /// <p>Represents the drift check bias baselines that can be used when the model monitor is set using the model package. </p>
    pub fn bias(mut self, input: crate::types::DriftCheckBias) -> Self {
        self.bias = Some(input);
        self
    }
    /// <p>Represents the drift check bias baselines that can be used when the model monitor is set using the model package. </p>
    pub fn set_bias(mut self, input: std::option::Option<crate::types::DriftCheckBias>) -> Self {
        self.bias = input;
        self
    }
    /// <p>Represents the drift check explainability baselines that can be used when the model monitor is set using the model package. </p>
    pub fn explainability(mut self, input: crate::types::DriftCheckExplainability) -> Self {
        self.explainability = Some(input);
        self
    }
    /// <p>Represents the drift check explainability baselines that can be used when the model monitor is set using the model package. </p>
    pub fn set_explainability(
        mut self,
        input: std::option::Option<crate::types::DriftCheckExplainability>,
    ) -> Self {
        self.explainability = input;
        self
    }
    /// <p>Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.</p>
    pub fn model_quality(mut self, input: crate::types::DriftCheckModelQuality) -> Self {
        self.model_quality = Some(input);
        self
    }
    /// <p>Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.</p>
    pub fn set_model_quality(
        mut self,
        input: std::option::Option<crate::types::DriftCheckModelQuality>,
    ) -> Self {
        self.model_quality = input;
        self
    }
    /// <p>Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package.</p>
    pub fn model_data_quality(mut self, input: crate::types::DriftCheckModelDataQuality) -> Self {
        self.model_data_quality = Some(input);
        self
    }
    /// <p>Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package.</p>
    pub fn set_model_data_quality(
        mut self,
        input: std::option::Option<crate::types::DriftCheckModelDataQuality>,
    ) -> Self {
        self.model_data_quality = input;
        self
    }
    /// Consumes the builder and constructs a [`DriftCheckBaselines`](crate::types::DriftCheckBaselines).
    pub fn build(self) -> crate::types::DriftCheckBaselines {
        crate::types::DriftCheckBaselines {
            bias: self.bias,
            explainability: self.explainability,
            model_quality: self.model_quality,
            model_data_quality: self.model_data_quality,
        }
    }
}
