// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserContext {
    /// <p>The Amazon Resource Name (ARN) of the user's profile.</p>
    #[doc(hidden)]
    pub user_profile_arn: std::option::Option<std::string::String>,
    /// <p>The name of the user's profile.</p>
    #[doc(hidden)]
    pub user_profile_name: std::option::Option<std::string::String>,
    /// <p>The domain associated with the user.</p>
    #[doc(hidden)]
    pub domain_id: std::option::Option<std::string::String>,
}
impl UserContext {
    /// <p>The Amazon Resource Name (ARN) of the user's profile.</p>
    pub fn user_profile_arn(&self) -> std::option::Option<&str> {
        self.user_profile_arn.as_deref()
    }
    /// <p>The name of the user's profile.</p>
    pub fn user_profile_name(&self) -> std::option::Option<&str> {
        self.user_profile_name.as_deref()
    }
    /// <p>The domain associated with the user.</p>
    pub fn domain_id(&self) -> std::option::Option<&str> {
        self.domain_id.as_deref()
    }
}
impl UserContext {
    /// Creates a new builder-style object to manufacture [`UserContext`](crate::types::UserContext).
    pub fn builder() -> crate::types::builders::UserContextBuilder {
        crate::types::builders::UserContextBuilder::default()
    }
}

/// A builder for [`UserContext`](crate::types::UserContext).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserContextBuilder {
    pub(crate) user_profile_arn: std::option::Option<std::string::String>,
    pub(crate) user_profile_name: std::option::Option<std::string::String>,
    pub(crate) domain_id: std::option::Option<std::string::String>,
}
impl UserContextBuilder {
    /// <p>The Amazon Resource Name (ARN) of the user's profile.</p>
    pub fn user_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_profile_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user's profile.</p>
    pub fn set_user_profile_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_profile_arn = input;
        self
    }
    /// <p>The name of the user's profile.</p>
    pub fn user_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_profile_name = Some(input.into());
        self
    }
    /// <p>The name of the user's profile.</p>
    pub fn set_user_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_profile_name = input;
        self
    }
    /// <p>The domain associated with the user.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_id = Some(input.into());
        self
    }
    /// <p>The domain associated with the user.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// Consumes the builder and constructs a [`UserContext`](crate::types::UserContext).
    pub fn build(self) -> crate::types::UserContext {
        crate::types::UserContext {
            user_profile_arn: self.user_profile_arn,
            user_profile_name: self.user_profile_name,
            domain_id: self.domain_id,
        }
    }
}
