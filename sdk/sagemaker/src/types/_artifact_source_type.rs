// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The ID and ID type of an artifact source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ArtifactSourceType {
    /// <p>The type of ID.</p>
    pub source_id_type: ::std::option::Option<crate::types::ArtifactSourceIdType>,
    /// <p>The ID.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl ArtifactSourceType {
    /// <p>The type of ID.</p>
    pub fn source_id_type(&self) -> ::std::option::Option<&crate::types::ArtifactSourceIdType> {
        self.source_id_type.as_ref()
    }
    /// <p>The ID.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ArtifactSourceType {
    /// Creates a new builder-style object to manufacture [`ArtifactSourceType`](crate::types::ArtifactSourceType).
    pub fn builder() -> crate::types::builders::ArtifactSourceTypeBuilder {
        crate::types::builders::ArtifactSourceTypeBuilder::default()
    }
}

/// A builder for [`ArtifactSourceType`](crate::types::ArtifactSourceType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ArtifactSourceTypeBuilder {
    pub(crate) source_id_type: ::std::option::Option<crate::types::ArtifactSourceIdType>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl ArtifactSourceTypeBuilder {
    /// <p>The type of ID.</p>
    /// This field is required.
    pub fn source_id_type(mut self, input: crate::types::ArtifactSourceIdType) -> Self {
        self.source_id_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of ID.</p>
    pub fn set_source_id_type(mut self, input: ::std::option::Option<crate::types::ArtifactSourceIdType>) -> Self {
        self.source_id_type = input;
        self
    }
    /// <p>The type of ID.</p>
    pub fn get_source_id_type(&self) -> &::std::option::Option<crate::types::ArtifactSourceIdType> {
        &self.source_id_type
    }
    /// <p>The ID.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The ID.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`ArtifactSourceType`](crate::types::ArtifactSourceType).
    pub fn build(self) -> crate::types::ArtifactSourceType {
        crate::types::ArtifactSourceType {
            source_id_type: self.source_id_type,
            value: self.value,
        }
    }
}
