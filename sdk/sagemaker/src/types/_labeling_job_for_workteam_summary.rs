// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides summary information for a work team.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LabelingJobForWorkteamSummary {
    /// <p>The name of the labeling job that the work team is assigned to.</p>
    #[doc(hidden)]
    pub labeling_job_name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for a labeling job. You can use this to refer to a specific labeling job.</p>
    #[doc(hidden)]
    pub job_reference_code: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID of the account used to start the labeling job.</p>
    #[doc(hidden)]
    pub work_requester_account_id: std::option::Option<std::string::String>,
    /// <p>The date and time that the labeling job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Provides information about the progress of a labeling job.</p>
    #[doc(hidden)]
    pub label_counters: std::option::Option<crate::types::LabelCountersForWorkteam>,
    /// <p>The configured number of workers per data object.</p>
    #[doc(hidden)]
    pub number_of_human_workers_per_data_object: std::option::Option<i32>,
}
impl LabelingJobForWorkteamSummary {
    /// <p>The name of the labeling job that the work team is assigned to.</p>
    pub fn labeling_job_name(&self) -> std::option::Option<&str> {
        self.labeling_job_name.as_deref()
    }
    /// <p>A unique identifier for a labeling job. You can use this to refer to a specific labeling job.</p>
    pub fn job_reference_code(&self) -> std::option::Option<&str> {
        self.job_reference_code.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the account used to start the labeling job.</p>
    pub fn work_requester_account_id(&self) -> std::option::Option<&str> {
        self.work_requester_account_id.as_deref()
    }
    /// <p>The date and time that the labeling job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Provides information about the progress of a labeling job.</p>
    pub fn label_counters(&self) -> std::option::Option<&crate::types::LabelCountersForWorkteam> {
        self.label_counters.as_ref()
    }
    /// <p>The configured number of workers per data object.</p>
    pub fn number_of_human_workers_per_data_object(&self) -> std::option::Option<i32> {
        self.number_of_human_workers_per_data_object
    }
}
impl LabelingJobForWorkteamSummary {
    /// Creates a new builder-style object to manufacture [`LabelingJobForWorkteamSummary`](crate::types::LabelingJobForWorkteamSummary).
    pub fn builder() -> crate::types::builders::LabelingJobForWorkteamSummaryBuilder {
        crate::types::builders::LabelingJobForWorkteamSummaryBuilder::default()
    }
}

/// A builder for [`LabelingJobForWorkteamSummary`](crate::types::LabelingJobForWorkteamSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LabelingJobForWorkteamSummaryBuilder {
    pub(crate) labeling_job_name: std::option::Option<std::string::String>,
    pub(crate) job_reference_code: std::option::Option<std::string::String>,
    pub(crate) work_requester_account_id: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) label_counters: std::option::Option<crate::types::LabelCountersForWorkteam>,
    pub(crate) number_of_human_workers_per_data_object: std::option::Option<i32>,
}
impl LabelingJobForWorkteamSummaryBuilder {
    /// <p>The name of the labeling job that the work team is assigned to.</p>
    pub fn labeling_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.labeling_job_name = Some(input.into());
        self
    }
    /// <p>The name of the labeling job that the work team is assigned to.</p>
    pub fn set_labeling_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.labeling_job_name = input;
        self
    }
    /// <p>A unique identifier for a labeling job. You can use this to refer to a specific labeling job.</p>
    pub fn job_reference_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_reference_code = Some(input.into());
        self
    }
    /// <p>A unique identifier for a labeling job. You can use this to refer to a specific labeling job.</p>
    pub fn set_job_reference_code(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.job_reference_code = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the account used to start the labeling job.</p>
    pub fn work_requester_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.work_requester_account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the account used to start the labeling job.</p>
    pub fn set_work_requester_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.work_requester_account_id = input;
        self
    }
    /// <p>The date and time that the labeling job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The date and time that the labeling job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Provides information about the progress of a labeling job.</p>
    pub fn label_counters(mut self, input: crate::types::LabelCountersForWorkteam) -> Self {
        self.label_counters = Some(input);
        self
    }
    /// <p>Provides information about the progress of a labeling job.</p>
    pub fn set_label_counters(
        mut self,
        input: std::option::Option<crate::types::LabelCountersForWorkteam>,
    ) -> Self {
        self.label_counters = input;
        self
    }
    /// <p>The configured number of workers per data object.</p>
    pub fn number_of_human_workers_per_data_object(mut self, input: i32) -> Self {
        self.number_of_human_workers_per_data_object = Some(input);
        self
    }
    /// <p>The configured number of workers per data object.</p>
    pub fn set_number_of_human_workers_per_data_object(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.number_of_human_workers_per_data_object = input;
        self
    }
    /// Consumes the builder and constructs a [`LabelingJobForWorkteamSummary`](crate::types::LabelingJobForWorkteamSummary).
    pub fn build(self) -> crate::types::LabelingJobForWorkteamSummary {
        crate::types::LabelingJobForWorkteamSummary {
            labeling_job_name: self.labeling_job_name,
            job_reference_code: self.job_reference_code,
            work_requester_account_id: self.work_requester_account_id,
            creation_time: self.creation_time,
            label_counters: self.label_counters,
            number_of_human_workers_per_data_object: self.number_of_human_workers_per_data_object,
        }
    }
}
