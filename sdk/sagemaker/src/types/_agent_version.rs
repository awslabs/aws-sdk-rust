// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Edge Manager agent version.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentVersion {
    /// <p>Version of the agent.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The number of Edge Manager agents.</p>
    pub agent_count: ::std::option::Option<i64>,
}
impl AgentVersion {
    /// <p>Version of the agent.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The number of Edge Manager agents.</p>
    pub fn agent_count(&self) -> ::std::option::Option<i64> {
        self.agent_count
    }
}
impl AgentVersion {
    /// Creates a new builder-style object to manufacture [`AgentVersion`](crate::types::AgentVersion).
    pub fn builder() -> crate::types::builders::AgentVersionBuilder {
        crate::types::builders::AgentVersionBuilder::default()
    }
}

/// A builder for [`AgentVersion`](crate::types::AgentVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AgentVersionBuilder {
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) agent_count: ::std::option::Option<i64>,
}
impl AgentVersionBuilder {
    /// <p>Version of the agent.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version of the agent.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>Version of the agent.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The number of Edge Manager agents.</p>
    /// This field is required.
    pub fn agent_count(mut self, input: i64) -> Self {
        self.agent_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of Edge Manager agents.</p>
    pub fn set_agent_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.agent_count = input;
        self
    }
    /// <p>The number of Edge Manager agents.</p>
    pub fn get_agent_count(&self) -> &::std::option::Option<i64> {
        &self.agent_count
    }
    /// Consumes the builder and constructs a [`AgentVersion`](crate::types::AgentVersion).
    pub fn build(self) -> crate::types::AgentVersion {
        crate::types::AgentVersion {
            version: self.version,
            agent_count: self.agent_count,
        }
    }
}
