// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the dataset format used when running a monitoring job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitoringDatasetFormat {
    /// <p>The CSV dataset used in the monitoring job.</p>
    #[doc(hidden)]
    pub csv: std::option::Option<crate::types::MonitoringCsvDatasetFormat>,
    /// <p>The JSON dataset used in the monitoring job</p>
    #[doc(hidden)]
    pub json: std::option::Option<crate::types::MonitoringJsonDatasetFormat>,
    /// <p>The Parquet dataset used in the monitoring job</p>
    #[doc(hidden)]
    pub parquet: std::option::Option<crate::types::MonitoringParquetDatasetFormat>,
}
impl MonitoringDatasetFormat {
    /// <p>The CSV dataset used in the monitoring job.</p>
    pub fn csv(&self) -> std::option::Option<&crate::types::MonitoringCsvDatasetFormat> {
        self.csv.as_ref()
    }
    /// <p>The JSON dataset used in the monitoring job</p>
    pub fn json(&self) -> std::option::Option<&crate::types::MonitoringJsonDatasetFormat> {
        self.json.as_ref()
    }
    /// <p>The Parquet dataset used in the monitoring job</p>
    pub fn parquet(&self) -> std::option::Option<&crate::types::MonitoringParquetDatasetFormat> {
        self.parquet.as_ref()
    }
}
impl MonitoringDatasetFormat {
    /// Creates a new builder-style object to manufacture [`MonitoringDatasetFormat`](crate::types::MonitoringDatasetFormat).
    pub fn builder() -> crate::types::builders::MonitoringDatasetFormatBuilder {
        crate::types::builders::MonitoringDatasetFormatBuilder::default()
    }
}

/// A builder for [`MonitoringDatasetFormat`](crate::types::MonitoringDatasetFormat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringDatasetFormatBuilder {
    pub(crate) csv: std::option::Option<crate::types::MonitoringCsvDatasetFormat>,
    pub(crate) json: std::option::Option<crate::types::MonitoringJsonDatasetFormat>,
    pub(crate) parquet: std::option::Option<crate::types::MonitoringParquetDatasetFormat>,
}
impl MonitoringDatasetFormatBuilder {
    /// <p>The CSV dataset used in the monitoring job.</p>
    pub fn csv(mut self, input: crate::types::MonitoringCsvDatasetFormat) -> Self {
        self.csv = Some(input);
        self
    }
    /// <p>The CSV dataset used in the monitoring job.</p>
    pub fn set_csv(
        mut self,
        input: std::option::Option<crate::types::MonitoringCsvDatasetFormat>,
    ) -> Self {
        self.csv = input;
        self
    }
    /// <p>The JSON dataset used in the monitoring job</p>
    pub fn json(mut self, input: crate::types::MonitoringJsonDatasetFormat) -> Self {
        self.json = Some(input);
        self
    }
    /// <p>The JSON dataset used in the monitoring job</p>
    pub fn set_json(
        mut self,
        input: std::option::Option<crate::types::MonitoringJsonDatasetFormat>,
    ) -> Self {
        self.json = input;
        self
    }
    /// <p>The Parquet dataset used in the monitoring job</p>
    pub fn parquet(mut self, input: crate::types::MonitoringParquetDatasetFormat) -> Self {
        self.parquet = Some(input);
        self
    }
    /// <p>The Parquet dataset used in the monitoring job</p>
    pub fn set_parquet(
        mut self,
        input: std::option::Option<crate::types::MonitoringParquetDatasetFormat>,
    ) -> Self {
        self.parquet = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitoringDatasetFormat`](crate::types::MonitoringDatasetFormat).
    pub fn build(self) -> crate::types::MonitoringDatasetFormat {
        crate::types::MonitoringDatasetFormat {
            csv: self.csv,
            json: self.json,
            parquet: self.parquet,
        }
    }
}
