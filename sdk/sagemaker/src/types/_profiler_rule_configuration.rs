// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for profiling rules.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProfilerRuleConfiguration {
    /// <p>The name of the rule configuration. It must be unique relative to other rule configuration names.</p>
    #[doc(hidden)]
    pub rule_configuration_name: std::option::Option<std::string::String>,
    /// <p>Path to local storage location for output of rules. Defaults to <code>/opt/ml/processing/output/rule/</code>. </p>
    #[doc(hidden)]
    pub local_path: std::option::Option<std::string::String>,
    /// <p>Path to Amazon S3 storage location for rules.</p>
    #[doc(hidden)]
    pub s3_output_path: std::option::Option<std::string::String>,
    /// <p>The Amazon Elastic Container Registry Image for the managed rule evaluation.</p>
    #[doc(hidden)]
    pub rule_evaluator_image: std::option::Option<std::string::String>,
    /// <p>The instance type to deploy a custom rule for profiling a training job.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<crate::types::ProcessingInstanceType>,
    /// <p>The size, in GB, of the ML storage volume attached to the processing instance.</p>
    #[doc(hidden)]
    pub volume_size_in_gb: i32,
    /// <p>Runtime configuration for rule container.</p>
    #[doc(hidden)]
    pub rule_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ProfilerRuleConfiguration {
    /// <p>The name of the rule configuration. It must be unique relative to other rule configuration names.</p>
    pub fn rule_configuration_name(&self) -> std::option::Option<&str> {
        self.rule_configuration_name.as_deref()
    }
    /// <p>Path to local storage location for output of rules. Defaults to <code>/opt/ml/processing/output/rule/</code>. </p>
    pub fn local_path(&self) -> std::option::Option<&str> {
        self.local_path.as_deref()
    }
    /// <p>Path to Amazon S3 storage location for rules.</p>
    pub fn s3_output_path(&self) -> std::option::Option<&str> {
        self.s3_output_path.as_deref()
    }
    /// <p>The Amazon Elastic Container Registry Image for the managed rule evaluation.</p>
    pub fn rule_evaluator_image(&self) -> std::option::Option<&str> {
        self.rule_evaluator_image.as_deref()
    }
    /// <p>The instance type to deploy a custom rule for profiling a training job.</p>
    pub fn instance_type(&self) -> std::option::Option<&crate::types::ProcessingInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The size, in GB, of the ML storage volume attached to the processing instance.</p>
    pub fn volume_size_in_gb(&self) -> i32 {
        self.volume_size_in_gb
    }
    /// <p>Runtime configuration for rule container.</p>
    pub fn rule_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.rule_parameters.as_ref()
    }
}
impl ProfilerRuleConfiguration {
    /// Creates a new builder-style object to manufacture [`ProfilerRuleConfiguration`](crate::types::ProfilerRuleConfiguration).
    pub fn builder() -> crate::types::builders::ProfilerRuleConfigurationBuilder {
        crate::types::builders::ProfilerRuleConfigurationBuilder::default()
    }
}

/// A builder for [`ProfilerRuleConfiguration`](crate::types::ProfilerRuleConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProfilerRuleConfigurationBuilder {
    pub(crate) rule_configuration_name: std::option::Option<std::string::String>,
    pub(crate) local_path: std::option::Option<std::string::String>,
    pub(crate) s3_output_path: std::option::Option<std::string::String>,
    pub(crate) rule_evaluator_image: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<crate::types::ProcessingInstanceType>,
    pub(crate) volume_size_in_gb: std::option::Option<i32>,
    pub(crate) rule_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ProfilerRuleConfigurationBuilder {
    /// <p>The name of the rule configuration. It must be unique relative to other rule configuration names.</p>
    pub fn rule_configuration_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_configuration_name = Some(input.into());
        self
    }
    /// <p>The name of the rule configuration. It must be unique relative to other rule configuration names.</p>
    pub fn set_rule_configuration_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.rule_configuration_name = input;
        self
    }
    /// <p>Path to local storage location for output of rules. Defaults to <code>/opt/ml/processing/output/rule/</code>. </p>
    pub fn local_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.local_path = Some(input.into());
        self
    }
    /// <p>Path to local storage location for output of rules. Defaults to <code>/opt/ml/processing/output/rule/</code>. </p>
    pub fn set_local_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.local_path = input;
        self
    }
    /// <p>Path to Amazon S3 storage location for rules.</p>
    pub fn s3_output_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_output_path = Some(input.into());
        self
    }
    /// <p>Path to Amazon S3 storage location for rules.</p>
    pub fn set_s3_output_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_output_path = input;
        self
    }
    /// <p>The Amazon Elastic Container Registry Image for the managed rule evaluation.</p>
    pub fn rule_evaluator_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_evaluator_image = Some(input.into());
        self
    }
    /// <p>The Amazon Elastic Container Registry Image for the managed rule evaluation.</p>
    pub fn set_rule_evaluator_image(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.rule_evaluator_image = input;
        self
    }
    /// <p>The instance type to deploy a custom rule for profiling a training job.</p>
    pub fn instance_type(mut self, input: crate::types::ProcessingInstanceType) -> Self {
        self.instance_type = Some(input);
        self
    }
    /// <p>The instance type to deploy a custom rule for profiling a training job.</p>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::types::ProcessingInstanceType>,
    ) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The size, in GB, of the ML storage volume attached to the processing instance.</p>
    pub fn volume_size_in_gb(mut self, input: i32) -> Self {
        self.volume_size_in_gb = Some(input);
        self
    }
    /// <p>The size, in GB, of the ML storage volume attached to the processing instance.</p>
    pub fn set_volume_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_size_in_gb = input;
        self
    }
    /// Adds a key-value pair to `rule_parameters`.
    ///
    /// To override the contents of this collection use [`set_rule_parameters`](Self::set_rule_parameters).
    ///
    /// <p>Runtime configuration for rule container.</p>
    pub fn rule_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.rule_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.rule_parameters = Some(hash_map);
        self
    }
    /// <p>Runtime configuration for rule container.</p>
    pub fn set_rule_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.rule_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`ProfilerRuleConfiguration`](crate::types::ProfilerRuleConfiguration).
    pub fn build(self) -> crate::types::ProfilerRuleConfiguration {
        crate::types::ProfilerRuleConfiguration {
            rule_configuration_name: self.rule_configuration_name,
            local_path: self.local_path,
            s3_output_path: self.s3_output_path,
            rule_evaluator_image: self.rule_evaluator_image,
            instance_type: self.instance_type,
            volume_size_in_gb: self.volume_size_in_gb.unwrap_or_default(),
            rule_parameters: self.rule_parameters,
        }
    }
}
