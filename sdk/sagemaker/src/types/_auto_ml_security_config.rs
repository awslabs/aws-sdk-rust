// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Security options.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoMlSecurityConfig {
    /// <p>The key used to encrypt stored data.</p>
    #[doc(hidden)]
    pub volume_kms_key_id: std::option::Option<std::string::String>,
    /// <p>Whether to use traffic encryption between the container layers.</p>
    #[doc(hidden)]
    pub enable_inter_container_traffic_encryption: bool,
    /// <p>The VPC configuration.</p>
    #[doc(hidden)]
    pub vpc_config: std::option::Option<crate::types::VpcConfig>,
}
impl AutoMlSecurityConfig {
    /// <p>The key used to encrypt stored data.</p>
    pub fn volume_kms_key_id(&self) -> std::option::Option<&str> {
        self.volume_kms_key_id.as_deref()
    }
    /// <p>Whether to use traffic encryption between the container layers.</p>
    pub fn enable_inter_container_traffic_encryption(&self) -> bool {
        self.enable_inter_container_traffic_encryption
    }
    /// <p>The VPC configuration.</p>
    pub fn vpc_config(&self) -> std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
}
impl AutoMlSecurityConfig {
    /// Creates a new builder-style object to manufacture [`AutoMlSecurityConfig`](crate::types::AutoMlSecurityConfig).
    pub fn builder() -> crate::types::builders::AutoMlSecurityConfigBuilder {
        crate::types::builders::AutoMlSecurityConfigBuilder::default()
    }
}

/// A builder for [`AutoMlSecurityConfig`](crate::types::AutoMlSecurityConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoMlSecurityConfigBuilder {
    pub(crate) volume_kms_key_id: std::option::Option<std::string::String>,
    pub(crate) enable_inter_container_traffic_encryption: std::option::Option<bool>,
    pub(crate) vpc_config: std::option::Option<crate::types::VpcConfig>,
}
impl AutoMlSecurityConfigBuilder {
    /// <p>The key used to encrypt stored data.</p>
    pub fn volume_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_kms_key_id = Some(input.into());
        self
    }
    /// <p>The key used to encrypt stored data.</p>
    pub fn set_volume_kms_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.volume_kms_key_id = input;
        self
    }
    /// <p>Whether to use traffic encryption between the container layers.</p>
    pub fn enable_inter_container_traffic_encryption(mut self, input: bool) -> Self {
        self.enable_inter_container_traffic_encryption = Some(input);
        self
    }
    /// <p>Whether to use traffic encryption between the container layers.</p>
    pub fn set_enable_inter_container_traffic_encryption(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.enable_inter_container_traffic_encryption = input;
        self
    }
    /// <p>The VPC configuration.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = Some(input);
        self
    }
    /// <p>The VPC configuration.</p>
    pub fn set_vpc_config(mut self, input: std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoMlSecurityConfig`](crate::types::AutoMlSecurityConfig).
    pub fn build(self) -> crate::types::AutoMlSecurityConfig {
        crate::types::AutoMlSecurityConfig {
            volume_kms_key_id: self.volume_kms_key_id,
            enable_inter_container_traffic_encryption: self
                .enable_inter_container_traffic_encryption
                .unwrap_or_default(),
            vpc_config: self.vpc_config,
        }
    }
}
