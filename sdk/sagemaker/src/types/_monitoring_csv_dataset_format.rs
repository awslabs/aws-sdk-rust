// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the CSV dataset format used when running a monitoring job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitoringCsvDatasetFormat {
    /// <p>Indicates if the CSV data has a header.</p>
    #[doc(hidden)]
    pub header: bool,
}
impl MonitoringCsvDatasetFormat {
    /// <p>Indicates if the CSV data has a header.</p>
    pub fn header(&self) -> bool {
        self.header
    }
}
impl MonitoringCsvDatasetFormat {
    /// Creates a new builder-style object to manufacture [`MonitoringCsvDatasetFormat`](crate::types::MonitoringCsvDatasetFormat).
    pub fn builder() -> crate::types::builders::MonitoringCsvDatasetFormatBuilder {
        crate::types::builders::MonitoringCsvDatasetFormatBuilder::default()
    }
}

/// A builder for [`MonitoringCsvDatasetFormat`](crate::types::MonitoringCsvDatasetFormat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringCsvDatasetFormatBuilder {
    pub(crate) header: std::option::Option<bool>,
}
impl MonitoringCsvDatasetFormatBuilder {
    /// <p>Indicates if the CSV data has a header.</p>
    pub fn header(mut self, input: bool) -> Self {
        self.header = Some(input);
        self
    }
    /// <p>Indicates if the CSV data has a header.</p>
    pub fn set_header(mut self, input: std::option::Option<bool>) -> Self {
        self.header = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitoringCsvDatasetFormat`](crate::types::MonitoringCsvDatasetFormat).
    pub fn build(self) -> crate::types::MonitoringCsvDatasetFormat {
        crate::types::MonitoringCsvDatasetFormat {
            header: self.header.unwrap_or_default(),
        }
    }
}
