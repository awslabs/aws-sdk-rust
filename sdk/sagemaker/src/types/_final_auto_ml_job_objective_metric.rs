// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The best candidate result from an AutoML training job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FinalAutoMlJobObjectiveMetric {
    /// <p>The type of metric with the best result.</p>
    pub r#type: ::std::option::Option<crate::types::AutoMlJobObjectiveType>,
    /// <p>The name of the metric with the best result. For a description of the possible objective metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html">AutoMLJobObjective$MetricName</a>.</p>
    pub metric_name: ::std::option::Option<crate::types::AutoMlMetricEnum>,
    /// <p>The value of the metric with the best result.</p>
    pub value: ::std::option::Option<f32>,
    /// <p>The name of the standard metric. For a description of the standard metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html#autopilot-metrics">Autopilot candidate metrics</a>.</p>
    pub standard_metric_name: ::std::option::Option<crate::types::AutoMlMetricEnum>,
}
impl FinalAutoMlJobObjectiveMetric {
    /// <p>The type of metric with the best result.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::AutoMlJobObjectiveType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the metric with the best result. For a description of the possible objective metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html">AutoMLJobObjective$MetricName</a>.</p>
    pub fn metric_name(&self) -> ::std::option::Option<&crate::types::AutoMlMetricEnum> {
        self.metric_name.as_ref()
    }
    /// <p>The value of the metric with the best result.</p>
    pub fn value(&self) -> ::std::option::Option<f32> {
        self.value
    }
    /// <p>The name of the standard metric. For a description of the standard metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html#autopilot-metrics">Autopilot candidate metrics</a>.</p>
    pub fn standard_metric_name(&self) -> ::std::option::Option<&crate::types::AutoMlMetricEnum> {
        self.standard_metric_name.as_ref()
    }
}
impl FinalAutoMlJobObjectiveMetric {
    /// Creates a new builder-style object to manufacture [`FinalAutoMlJobObjectiveMetric`](crate::types::FinalAutoMlJobObjectiveMetric).
    pub fn builder() -> crate::types::builders::FinalAutoMlJobObjectiveMetricBuilder {
        crate::types::builders::FinalAutoMlJobObjectiveMetricBuilder::default()
    }
}

/// A builder for [`FinalAutoMlJobObjectiveMetric`](crate::types::FinalAutoMlJobObjectiveMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FinalAutoMlJobObjectiveMetricBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AutoMlJobObjectiveType>,
    pub(crate) metric_name: ::std::option::Option<crate::types::AutoMlMetricEnum>,
    pub(crate) value: ::std::option::Option<f32>,
    pub(crate) standard_metric_name: ::std::option::Option<crate::types::AutoMlMetricEnum>,
}
impl FinalAutoMlJobObjectiveMetricBuilder {
    /// <p>The type of metric with the best result.</p>
    pub fn r#type(mut self, input: crate::types::AutoMlJobObjectiveType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of metric with the best result.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AutoMlJobObjectiveType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of metric with the best result.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AutoMlJobObjectiveType> {
        &self.r#type
    }
    /// <p>The name of the metric with the best result. For a description of the possible objective metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html">AutoMLJobObjective$MetricName</a>.</p>
    /// This field is required.
    pub fn metric_name(mut self, input: crate::types::AutoMlMetricEnum) -> Self {
        self.metric_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the metric with the best result. For a description of the possible objective metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html">AutoMLJobObjective$MetricName</a>.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<crate::types::AutoMlMetricEnum>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the metric with the best result. For a description of the possible objective metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html">AutoMLJobObjective$MetricName</a>.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<crate::types::AutoMlMetricEnum> {
        &self.metric_name
    }
    /// <p>The value of the metric with the best result.</p>
    /// This field is required.
    pub fn value(mut self, input: f32) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the metric with the best result.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f32>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the metric with the best result.</p>
    pub fn get_value(&self) -> &::std::option::Option<f32> {
        &self.value
    }
    /// <p>The name of the standard metric. For a description of the standard metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html#autopilot-metrics">Autopilot candidate metrics</a>.</p>
    pub fn standard_metric_name(mut self, input: crate::types::AutoMlMetricEnum) -> Self {
        self.standard_metric_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the standard metric. For a description of the standard metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html#autopilot-metrics">Autopilot candidate metrics</a>.</p>
    pub fn set_standard_metric_name(mut self, input: ::std::option::Option<crate::types::AutoMlMetricEnum>) -> Self {
        self.standard_metric_name = input;
        self
    }
    /// <p>The name of the standard metric. For a description of the standard metrics, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html#autopilot-metrics">Autopilot candidate metrics</a>.</p>
    pub fn get_standard_metric_name(&self) -> &::std::option::Option<crate::types::AutoMlMetricEnum> {
        &self.standard_metric_name
    }
    /// Consumes the builder and constructs a [`FinalAutoMlJobObjectiveMetric`](crate::types::FinalAutoMlJobObjectiveMetric).
    pub fn build(self) -> crate::types::FinalAutoMlJobObjectiveMetric {
        crate::types::FinalAutoMlJobObjectiveMetric {
            r#type: self.r#type,
            metric_name: self.metric_name,
            value: self.value,
            standard_metric_name: self.standard_metric_name,
        }
    }
}
