// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides summary information for an SageMaker notebook instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotebookInstanceSummary {
    /// <p>The name of the notebook instance that you want a summary for.</p>
    pub notebook_instance_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the notebook instance.</p>
    pub notebook_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the notebook instance.</p>
    pub notebook_instance_status: ::std::option::Option<crate::types::NotebookInstanceStatus>,
    /// <p>The URL that you use to connect to the Jupyter notebook running in your notebook instance. </p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>The type of ML compute instance that the notebook instance is running on.</p>
    pub instance_type: ::std::option::Option<crate::types::InstanceType>,
    /// <p>A timestamp that shows when the notebook instance was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp that shows when the notebook instance was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of a notebook instance lifecycle configuration associated with this notebook instance.</p>
    /// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    pub notebook_instance_lifecycle_config_name: ::std::option::Option<::std::string::String>,
    /// <p>The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub default_code_repository: ::std::option::Option<::std::string::String>,
    /// <p>An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub additional_code_repositories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NotebookInstanceSummary {
    /// <p>The name of the notebook instance that you want a summary for.</p>
    pub fn notebook_instance_name(&self) -> ::std::option::Option<&str> {
        self.notebook_instance_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the notebook instance.</p>
    pub fn notebook_instance_arn(&self) -> ::std::option::Option<&str> {
        self.notebook_instance_arn.as_deref()
    }
    /// <p>The status of the notebook instance.</p>
    pub fn notebook_instance_status(&self) -> ::std::option::Option<&crate::types::NotebookInstanceStatus> {
        self.notebook_instance_status.as_ref()
    }
    /// <p>The URL that you use to connect to the Jupyter notebook running in your notebook instance. </p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The type of ML compute instance that the notebook instance is running on.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::InstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>A timestamp that shows when the notebook instance was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>A timestamp that shows when the notebook instance was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The name of a notebook instance lifecycle configuration associated with this notebook instance.</p>
    /// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    pub fn notebook_instance_lifecycle_config_name(&self) -> ::std::option::Option<&str> {
        self.notebook_instance_lifecycle_config_name.as_deref()
    }
    /// <p>The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn default_code_repository(&self) -> ::std::option::Option<&str> {
        self.default_code_repository.as_deref()
    }
    /// <p>An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_code_repositories.is_none()`.
    pub fn additional_code_repositories(&self) -> &[::std::string::String] {
        self.additional_code_repositories.as_deref().unwrap_or_default()
    }
}
impl NotebookInstanceSummary {
    /// Creates a new builder-style object to manufacture [`NotebookInstanceSummary`](crate::types::NotebookInstanceSummary).
    pub fn builder() -> crate::types::builders::NotebookInstanceSummaryBuilder {
        crate::types::builders::NotebookInstanceSummaryBuilder::default()
    }
}

/// A builder for [`NotebookInstanceSummary`](crate::types::NotebookInstanceSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NotebookInstanceSummaryBuilder {
    pub(crate) notebook_instance_name: ::std::option::Option<::std::string::String>,
    pub(crate) notebook_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) notebook_instance_status: ::std::option::Option<crate::types::NotebookInstanceStatus>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<crate::types::InstanceType>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) notebook_instance_lifecycle_config_name: ::std::option::Option<::std::string::String>,
    pub(crate) default_code_repository: ::std::option::Option<::std::string::String>,
    pub(crate) additional_code_repositories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NotebookInstanceSummaryBuilder {
    /// <p>The name of the notebook instance that you want a summary for.</p>
    /// This field is required.
    pub fn notebook_instance_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notebook_instance_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the notebook instance that you want a summary for.</p>
    pub fn set_notebook_instance_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notebook_instance_name = input;
        self
    }
    /// <p>The name of the notebook instance that you want a summary for.</p>
    pub fn get_notebook_instance_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.notebook_instance_name
    }
    /// <p>The Amazon Resource Name (ARN) of the notebook instance.</p>
    /// This field is required.
    pub fn notebook_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notebook_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the notebook instance.</p>
    pub fn set_notebook_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notebook_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the notebook instance.</p>
    pub fn get_notebook_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.notebook_instance_arn
    }
    /// <p>The status of the notebook instance.</p>
    pub fn notebook_instance_status(mut self, input: crate::types::NotebookInstanceStatus) -> Self {
        self.notebook_instance_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the notebook instance.</p>
    pub fn set_notebook_instance_status(mut self, input: ::std::option::Option<crate::types::NotebookInstanceStatus>) -> Self {
        self.notebook_instance_status = input;
        self
    }
    /// <p>The status of the notebook instance.</p>
    pub fn get_notebook_instance_status(&self) -> &::std::option::Option<crate::types::NotebookInstanceStatus> {
        &self.notebook_instance_status
    }
    /// <p>The URL that you use to connect to the Jupyter notebook running in your notebook instance. </p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL that you use to connect to the Jupyter notebook running in your notebook instance. </p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL that you use to connect to the Jupyter notebook running in your notebook instance. </p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The type of ML compute instance that the notebook instance is running on.</p>
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of ML compute instance that the notebook instance is running on.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::InstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The type of ML compute instance that the notebook instance is running on.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::InstanceType> {
        &self.instance_type
    }
    /// <p>A timestamp that shows when the notebook instance was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that shows when the notebook instance was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A timestamp that shows when the notebook instance was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>A timestamp that shows when the notebook instance was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that shows when the notebook instance was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>A timestamp that shows when the notebook instance was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The name of a notebook instance lifecycle configuration associated with this notebook instance.</p>
    /// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    pub fn notebook_instance_lifecycle_config_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notebook_instance_lifecycle_config_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a notebook instance lifecycle configuration associated with this notebook instance.</p>
    /// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    pub fn set_notebook_instance_lifecycle_config_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notebook_instance_lifecycle_config_name = input;
        self
    }
    /// <p>The name of a notebook instance lifecycle configuration associated with this notebook instance.</p>
    /// <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    pub fn get_notebook_instance_lifecycle_config_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.notebook_instance_lifecycle_config_name
    }
    /// <p>The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn default_code_repository(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_code_repository = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn set_default_code_repository(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_code_repository = input;
        self
    }
    /// <p>The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn get_default_code_repository(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_code_repository
    }
    /// Appends an item to `additional_code_repositories`.
    ///
    /// To override the contents of this collection use [`set_additional_code_repositories`](Self::set_additional_code_repositories).
    ///
    /// <p>An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn additional_code_repositories(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.additional_code_repositories.unwrap_or_default();
        v.push(input.into());
        self.additional_code_repositories = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn set_additional_code_repositories(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.additional_code_repositories = input;
        self
    }
    /// <p>An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker Notebook Instances</a>.</p>
    pub fn get_additional_code_repositories(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.additional_code_repositories
    }
    /// Consumes the builder and constructs a [`NotebookInstanceSummary`](crate::types::NotebookInstanceSummary).
    pub fn build(self) -> crate::types::NotebookInstanceSummary {
        crate::types::NotebookInstanceSummary {
            notebook_instance_name: self.notebook_instance_name,
            notebook_instance_arn: self.notebook_instance_arn,
            notebook_instance_status: self.notebook_instance_status,
            url: self.url,
            instance_type: self.instance_type,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            notebook_instance_lifecycle_config_name: self.notebook_instance_lifecycle_config_name,
            default_code_repository: self.default_code_repository,
            additional_code_repositories: self.additional_code_repositories,
        }
    }
}
