// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The currently active data capture configuration used by your Endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataCaptureConfigSummary {
    /// <p>Whether data capture is enabled or disabled.</p>
    pub enable_capture: ::std::option::Option<bool>,
    /// <p>Whether data capture is currently functional.</p>
    pub capture_status: ::std::option::Option<crate::types::CaptureStatus>,
    /// <p>The percentage of requests being captured by your Endpoint.</p>
    pub current_sampling_percentage: ::std::option::Option<i32>,
    /// <p>The Amazon S3 location being used to capture the data.</p>
    pub destination_s3_uri: ::std::option::Option<::std::string::String>,
    /// <p>The KMS key being used to encrypt the data in Amazon S3.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl DataCaptureConfigSummary {
    /// <p>Whether data capture is enabled or disabled.</p>
    pub fn enable_capture(&self) -> ::std::option::Option<bool> {
        self.enable_capture
    }
    /// <p>Whether data capture is currently functional.</p>
    pub fn capture_status(&self) -> ::std::option::Option<&crate::types::CaptureStatus> {
        self.capture_status.as_ref()
    }
    /// <p>The percentage of requests being captured by your Endpoint.</p>
    pub fn current_sampling_percentage(&self) -> ::std::option::Option<i32> {
        self.current_sampling_percentage
    }
    /// <p>The Amazon S3 location being used to capture the data.</p>
    pub fn destination_s3_uri(&self) -> ::std::option::Option<&str> {
        self.destination_s3_uri.as_deref()
    }
    /// <p>The KMS key being used to encrypt the data in Amazon S3.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl DataCaptureConfigSummary {
    /// Creates a new builder-style object to manufacture [`DataCaptureConfigSummary`](crate::types::DataCaptureConfigSummary).
    pub fn builder() -> crate::types::builders::DataCaptureConfigSummaryBuilder {
        crate::types::builders::DataCaptureConfigSummaryBuilder::default()
    }
}

/// A builder for [`DataCaptureConfigSummary`](crate::types::DataCaptureConfigSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataCaptureConfigSummaryBuilder {
    pub(crate) enable_capture: ::std::option::Option<bool>,
    pub(crate) capture_status: ::std::option::Option<crate::types::CaptureStatus>,
    pub(crate) current_sampling_percentage: ::std::option::Option<i32>,
    pub(crate) destination_s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl DataCaptureConfigSummaryBuilder {
    /// <p>Whether data capture is enabled or disabled.</p>
    /// This field is required.
    pub fn enable_capture(mut self, input: bool) -> Self {
        self.enable_capture = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether data capture is enabled or disabled.</p>
    pub fn set_enable_capture(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_capture = input;
        self
    }
    /// <p>Whether data capture is enabled or disabled.</p>
    pub fn get_enable_capture(&self) -> &::std::option::Option<bool> {
        &self.enable_capture
    }
    /// <p>Whether data capture is currently functional.</p>
    /// This field is required.
    pub fn capture_status(mut self, input: crate::types::CaptureStatus) -> Self {
        self.capture_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether data capture is currently functional.</p>
    pub fn set_capture_status(mut self, input: ::std::option::Option<crate::types::CaptureStatus>) -> Self {
        self.capture_status = input;
        self
    }
    /// <p>Whether data capture is currently functional.</p>
    pub fn get_capture_status(&self) -> &::std::option::Option<crate::types::CaptureStatus> {
        &self.capture_status
    }
    /// <p>The percentage of requests being captured by your Endpoint.</p>
    /// This field is required.
    pub fn current_sampling_percentage(mut self, input: i32) -> Self {
        self.current_sampling_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of requests being captured by your Endpoint.</p>
    pub fn set_current_sampling_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.current_sampling_percentage = input;
        self
    }
    /// <p>The percentage of requests being captured by your Endpoint.</p>
    pub fn get_current_sampling_percentage(&self) -> &::std::option::Option<i32> {
        &self.current_sampling_percentage
    }
    /// <p>The Amazon S3 location being used to capture the data.</p>
    /// This field is required.
    pub fn destination_s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 location being used to capture the data.</p>
    pub fn set_destination_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_s3_uri = input;
        self
    }
    /// <p>The Amazon S3 location being used to capture the data.</p>
    pub fn get_destination_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_s3_uri
    }
    /// <p>The KMS key being used to encrypt the data in Amazon S3.</p>
    /// This field is required.
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS key being used to encrypt the data in Amazon S3.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The KMS key being used to encrypt the data in Amazon S3.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`DataCaptureConfigSummary`](crate::types::DataCaptureConfigSummary).
    pub fn build(self) -> crate::types::DataCaptureConfigSummary {
        crate::types::DataCaptureConfigSummary {
            enable_capture: self.enable_capture,
            capture_status: self.capture_status,
            current_sampling_percentage: self.current_sampling_percentage,
            destination_s3_uri: self.destination_s3_uri,
            kms_key_id: self.kms_key_id,
        }
    }
}
