// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides summary information about the model package.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDescribeModelPackageSummary {
    /// <p>The group name for the model package</p>
    pub model_package_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The version number of a versioned model.</p>
    pub model_package_version: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub model_package_arn: ::std::option::Option<::std::string::String>,
    /// <p>The description of the model package.</p>
    pub model_package_description: ::std::option::Option<::std::string::String>,
    /// <p>The creation time of the mortgage package summary.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Defines how to perform inference generation after a training job is run.</p>
    pub inference_specification: ::std::option::Option<crate::types::InferenceSpecification>,
    /// <p>The status of the mortgage package.</p>
    pub model_package_status: ::std::option::Option<crate::types::ModelPackageStatus>,
    /// <p>The approval status of the model.</p>
    pub model_approval_status: ::std::option::Option<crate::types::ModelApprovalStatus>,
}
impl BatchDescribeModelPackageSummary {
    /// <p>The group name for the model package</p>
    pub fn model_package_group_name(&self) -> ::std::option::Option<&str> {
        self.model_package_group_name.as_deref()
    }
    /// <p>The version number of a versioned model.</p>
    pub fn model_package_version(&self) -> ::std::option::Option<i32> {
        self.model_package_version
    }
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub fn model_package_arn(&self) -> ::std::option::Option<&str> {
        self.model_package_arn.as_deref()
    }
    /// <p>The description of the model package.</p>
    pub fn model_package_description(&self) -> ::std::option::Option<&str> {
        self.model_package_description.as_deref()
    }
    /// <p>The creation time of the mortgage package summary.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Defines how to perform inference generation after a training job is run.</p>
    pub fn inference_specification(&self) -> ::std::option::Option<&crate::types::InferenceSpecification> {
        self.inference_specification.as_ref()
    }
    /// <p>The status of the mortgage package.</p>
    pub fn model_package_status(&self) -> ::std::option::Option<&crate::types::ModelPackageStatus> {
        self.model_package_status.as_ref()
    }
    /// <p>The approval status of the model.</p>
    pub fn model_approval_status(&self) -> ::std::option::Option<&crate::types::ModelApprovalStatus> {
        self.model_approval_status.as_ref()
    }
}
impl BatchDescribeModelPackageSummary {
    /// Creates a new builder-style object to manufacture [`BatchDescribeModelPackageSummary`](crate::types::BatchDescribeModelPackageSummary).
    pub fn builder() -> crate::types::builders::BatchDescribeModelPackageSummaryBuilder {
        crate::types::builders::BatchDescribeModelPackageSummaryBuilder::default()
    }
}

/// A builder for [`BatchDescribeModelPackageSummary`](crate::types::BatchDescribeModelPackageSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDescribeModelPackageSummaryBuilder {
    pub(crate) model_package_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_package_version: ::std::option::Option<i32>,
    pub(crate) model_package_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_package_description: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) inference_specification: ::std::option::Option<crate::types::InferenceSpecification>,
    pub(crate) model_package_status: ::std::option::Option<crate::types::ModelPackageStatus>,
    pub(crate) model_approval_status: ::std::option::Option<crate::types::ModelApprovalStatus>,
}
impl BatchDescribeModelPackageSummaryBuilder {
    /// <p>The group name for the model package</p>
    /// This field is required.
    pub fn model_package_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_package_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The group name for the model package</p>
    pub fn set_model_package_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_package_group_name = input;
        self
    }
    /// <p>The group name for the model package</p>
    pub fn get_model_package_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_package_group_name
    }
    /// <p>The version number of a versioned model.</p>
    pub fn model_package_version(mut self, input: i32) -> Self {
        self.model_package_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of a versioned model.</p>
    pub fn set_model_package_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.model_package_version = input;
        self
    }
    /// <p>The version number of a versioned model.</p>
    pub fn get_model_package_version(&self) -> &::std::option::Option<i32> {
        &self.model_package_version
    }
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    /// This field is required.
    pub fn model_package_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_package_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub fn set_model_package_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_package_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub fn get_model_package_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_package_arn
    }
    /// <p>The description of the model package.</p>
    pub fn model_package_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_package_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the model package.</p>
    pub fn set_model_package_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_package_description = input;
        self
    }
    /// <p>The description of the model package.</p>
    pub fn get_model_package_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_package_description
    }
    /// <p>The creation time of the mortgage package summary.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the mortgage package summary.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the mortgage package summary.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Defines how to perform inference generation after a training job is run.</p>
    /// This field is required.
    pub fn inference_specification(mut self, input: crate::types::InferenceSpecification) -> Self {
        self.inference_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines how to perform inference generation after a training job is run.</p>
    pub fn set_inference_specification(mut self, input: ::std::option::Option<crate::types::InferenceSpecification>) -> Self {
        self.inference_specification = input;
        self
    }
    /// <p>Defines how to perform inference generation after a training job is run.</p>
    pub fn get_inference_specification(&self) -> &::std::option::Option<crate::types::InferenceSpecification> {
        &self.inference_specification
    }
    /// <p>The status of the mortgage package.</p>
    /// This field is required.
    pub fn model_package_status(mut self, input: crate::types::ModelPackageStatus) -> Self {
        self.model_package_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the mortgage package.</p>
    pub fn set_model_package_status(mut self, input: ::std::option::Option<crate::types::ModelPackageStatus>) -> Self {
        self.model_package_status = input;
        self
    }
    /// <p>The status of the mortgage package.</p>
    pub fn get_model_package_status(&self) -> &::std::option::Option<crate::types::ModelPackageStatus> {
        &self.model_package_status
    }
    /// <p>The approval status of the model.</p>
    pub fn model_approval_status(mut self, input: crate::types::ModelApprovalStatus) -> Self {
        self.model_approval_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The approval status of the model.</p>
    pub fn set_model_approval_status(mut self, input: ::std::option::Option<crate::types::ModelApprovalStatus>) -> Self {
        self.model_approval_status = input;
        self
    }
    /// <p>The approval status of the model.</p>
    pub fn get_model_approval_status(&self) -> &::std::option::Option<crate::types::ModelApprovalStatus> {
        &self.model_approval_status
    }
    /// Consumes the builder and constructs a [`BatchDescribeModelPackageSummary`](crate::types::BatchDescribeModelPackageSummary).
    pub fn build(self) -> crate::types::BatchDescribeModelPackageSummary {
        crate::types::BatchDescribeModelPackageSummary {
            model_package_group_name: self.model_package_group_name,
            model_package_version: self.model_package_version,
            model_package_arn: self.model_package_arn,
            model_package_description: self.model_package_description,
            creation_time: self.creation_time,
            inference_specification: self.inference_specification,
            model_package_status: self.model_package_status,
            model_approval_status: self.model_approval_status,
        }
    }
}
