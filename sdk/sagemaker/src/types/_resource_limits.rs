// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the maximum number of training jobs and parallel training jobs that a hyperparameter tuning job can launch.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceLimits {
    /// <p>The maximum number of training jobs that a hyperparameter tuning job can launch.</p>
    #[doc(hidden)]
    pub max_number_of_training_jobs: std::option::Option<i32>,
    /// <p>The maximum number of concurrent training jobs that a hyperparameter tuning job can launch.</p>
    #[doc(hidden)]
    pub max_parallel_training_jobs: i32,
}
impl ResourceLimits {
    /// <p>The maximum number of training jobs that a hyperparameter tuning job can launch.</p>
    pub fn max_number_of_training_jobs(&self) -> std::option::Option<i32> {
        self.max_number_of_training_jobs
    }
    /// <p>The maximum number of concurrent training jobs that a hyperparameter tuning job can launch.</p>
    pub fn max_parallel_training_jobs(&self) -> i32 {
        self.max_parallel_training_jobs
    }
}
impl ResourceLimits {
    /// Creates a new builder-style object to manufacture [`ResourceLimits`](crate::types::ResourceLimits).
    pub fn builder() -> crate::types::builders::ResourceLimitsBuilder {
        crate::types::builders::ResourceLimitsBuilder::default()
    }
}

/// A builder for [`ResourceLimits`](crate::types::ResourceLimits).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceLimitsBuilder {
    pub(crate) max_number_of_training_jobs: std::option::Option<i32>,
    pub(crate) max_parallel_training_jobs: std::option::Option<i32>,
}
impl ResourceLimitsBuilder {
    /// <p>The maximum number of training jobs that a hyperparameter tuning job can launch.</p>
    pub fn max_number_of_training_jobs(mut self, input: i32) -> Self {
        self.max_number_of_training_jobs = Some(input);
        self
    }
    /// <p>The maximum number of training jobs that a hyperparameter tuning job can launch.</p>
    pub fn set_max_number_of_training_jobs(mut self, input: std::option::Option<i32>) -> Self {
        self.max_number_of_training_jobs = input;
        self
    }
    /// <p>The maximum number of concurrent training jobs that a hyperparameter tuning job can launch.</p>
    pub fn max_parallel_training_jobs(mut self, input: i32) -> Self {
        self.max_parallel_training_jobs = Some(input);
        self
    }
    /// <p>The maximum number of concurrent training jobs that a hyperparameter tuning job can launch.</p>
    pub fn set_max_parallel_training_jobs(mut self, input: std::option::Option<i32>) -> Self {
        self.max_parallel_training_jobs = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceLimits`](crate::types::ResourceLimits).
    pub fn build(self) -> crate::types::ResourceLimits {
        crate::types::ResourceLimits {
            max_number_of_training_jobs: self.max_number_of_training_jobs,
            max_parallel_training_jobs: self.max_parallel_training_jobs.unwrap_or_default(),
        }
    }
}
