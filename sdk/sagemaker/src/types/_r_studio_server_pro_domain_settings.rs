// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RStudioServerProDomainSettings {
    /// <p>The ARN of the execution role for the <code>RStudioServerPro</code> Domain-level app.</p>
    pub domain_execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A URL pointing to an RStudio Connect server.</p>
    pub r_studio_connect_url: ::std::option::Option<::std::string::String>,
    /// <p>A URL pointing to an RStudio Package Manager server.</p>
    pub r_studio_package_manager_url: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.</p>
    pub default_resource_spec: ::std::option::Option<crate::types::ResourceSpec>,
}
impl RStudioServerProDomainSettings {
    /// <p>The ARN of the execution role for the <code>RStudioServerPro</code> Domain-level app.</p>
    pub fn domain_execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.domain_execution_role_arn.as_deref()
    }
    /// <p>A URL pointing to an RStudio Connect server.</p>
    pub fn r_studio_connect_url(&self) -> ::std::option::Option<&str> {
        self.r_studio_connect_url.as_deref()
    }
    /// <p>A URL pointing to an RStudio Package Manager server.</p>
    pub fn r_studio_package_manager_url(&self) -> ::std::option::Option<&str> {
        self.r_studio_package_manager_url.as_deref()
    }
    /// <p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.</p>
    pub fn default_resource_spec(&self) -> ::std::option::Option<&crate::types::ResourceSpec> {
        self.default_resource_spec.as_ref()
    }
}
impl RStudioServerProDomainSettings {
    /// Creates a new builder-style object to manufacture [`RStudioServerProDomainSettings`](crate::types::RStudioServerProDomainSettings).
    pub fn builder() -> crate::types::builders::RStudioServerProDomainSettingsBuilder {
        crate::types::builders::RStudioServerProDomainSettingsBuilder::default()
    }
}

/// A builder for [`RStudioServerProDomainSettings`](crate::types::RStudioServerProDomainSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RStudioServerProDomainSettingsBuilder {
    pub(crate) domain_execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) r_studio_connect_url: ::std::option::Option<::std::string::String>,
    pub(crate) r_studio_package_manager_url: ::std::option::Option<::std::string::String>,
    pub(crate) default_resource_spec: ::std::option::Option<crate::types::ResourceSpec>,
}
impl RStudioServerProDomainSettingsBuilder {
    /// <p>The ARN of the execution role for the <code>RStudioServerPro</code> Domain-level app.</p>
    /// This field is required.
    pub fn domain_execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the execution role for the <code>RStudioServerPro</code> Domain-level app.</p>
    pub fn set_domain_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_execution_role_arn = input;
        self
    }
    /// <p>The ARN of the execution role for the <code>RStudioServerPro</code> Domain-level app.</p>
    pub fn get_domain_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_execution_role_arn
    }
    /// <p>A URL pointing to an RStudio Connect server.</p>
    pub fn r_studio_connect_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r_studio_connect_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL pointing to an RStudio Connect server.</p>
    pub fn set_r_studio_connect_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r_studio_connect_url = input;
        self
    }
    /// <p>A URL pointing to an RStudio Connect server.</p>
    pub fn get_r_studio_connect_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.r_studio_connect_url
    }
    /// <p>A URL pointing to an RStudio Package Manager server.</p>
    pub fn r_studio_package_manager_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r_studio_package_manager_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL pointing to an RStudio Package Manager server.</p>
    pub fn set_r_studio_package_manager_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r_studio_package_manager_url = input;
        self
    }
    /// <p>A URL pointing to an RStudio Package Manager server.</p>
    pub fn get_r_studio_package_manager_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.r_studio_package_manager_url
    }
    /// <p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.</p>
    pub fn default_resource_spec(mut self, input: crate::types::ResourceSpec) -> Self {
        self.default_resource_spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.</p>
    pub fn set_default_resource_spec(mut self, input: ::std::option::Option<crate::types::ResourceSpec>) -> Self {
        self.default_resource_spec = input;
        self
    }
    /// <p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.</p>
    pub fn get_default_resource_spec(&self) -> &::std::option::Option<crate::types::ResourceSpec> {
        &self.default_resource_spec
    }
    /// Consumes the builder and constructs a [`RStudioServerProDomainSettings`](crate::types::RStudioServerProDomainSettings).
    pub fn build(self) -> crate::types::RStudioServerProDomainSettings {
        crate::types::RStudioServerProDomainSettings {
            domain_execution_role_arn: self.domain_execution_role_arn,
            r_studio_connect_url: self.r_studio_connect_url,
            r_studio_package_manager_url: self.r_studio_package_manager_url,
            default_resource_spec: self.default_resource_spec,
        }
    }
}
