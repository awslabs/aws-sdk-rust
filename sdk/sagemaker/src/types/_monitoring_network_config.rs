// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The networking configuration for the monitoring job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitoringNetworkConfig {
    /// <p>Whether to encrypt all communications between the instances used for the monitoring jobs. Choose <code>True</code> to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.</p>
    #[doc(hidden)]
    pub enable_inter_container_traffic_encryption: bool,
    /// <p>Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.</p>
    #[doc(hidden)]
    pub enable_network_isolation: bool,
    /// <p>Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. </p>
    #[doc(hidden)]
    pub vpc_config: std::option::Option<crate::types::VpcConfig>,
}
impl MonitoringNetworkConfig {
    /// <p>Whether to encrypt all communications between the instances used for the monitoring jobs. Choose <code>True</code> to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.</p>
    pub fn enable_inter_container_traffic_encryption(&self) -> bool {
        self.enable_inter_container_traffic_encryption
    }
    /// <p>Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.</p>
    pub fn enable_network_isolation(&self) -> bool {
        self.enable_network_isolation
    }
    /// <p>Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. </p>
    pub fn vpc_config(&self) -> std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
}
impl MonitoringNetworkConfig {
    /// Creates a new builder-style object to manufacture [`MonitoringNetworkConfig`](crate::types::MonitoringNetworkConfig).
    pub fn builder() -> crate::types::builders::MonitoringNetworkConfigBuilder {
        crate::types::builders::MonitoringNetworkConfigBuilder::default()
    }
}

/// A builder for [`MonitoringNetworkConfig`](crate::types::MonitoringNetworkConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringNetworkConfigBuilder {
    pub(crate) enable_inter_container_traffic_encryption: std::option::Option<bool>,
    pub(crate) enable_network_isolation: std::option::Option<bool>,
    pub(crate) vpc_config: std::option::Option<crate::types::VpcConfig>,
}
impl MonitoringNetworkConfigBuilder {
    /// <p>Whether to encrypt all communications between the instances used for the monitoring jobs. Choose <code>True</code> to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.</p>
    pub fn enable_inter_container_traffic_encryption(mut self, input: bool) -> Self {
        self.enable_inter_container_traffic_encryption = Some(input);
        self
    }
    /// <p>Whether to encrypt all communications between the instances used for the monitoring jobs. Choose <code>True</code> to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.</p>
    pub fn set_enable_inter_container_traffic_encryption(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.enable_inter_container_traffic_encryption = input;
        self
    }
    /// <p>Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.</p>
    pub fn enable_network_isolation(mut self, input: bool) -> Self {
        self.enable_network_isolation = Some(input);
        self
    }
    /// <p>Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.</p>
    pub fn set_enable_network_isolation(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_network_isolation = input;
        self
    }
    /// <p>Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. </p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = Some(input);
        self
    }
    /// <p>Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. </p>
    pub fn set_vpc_config(mut self, input: std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitoringNetworkConfig`](crate::types::MonitoringNetworkConfig).
    pub fn build(self) -> crate::types::MonitoringNetworkConfig {
        crate::types::MonitoringNetworkConfig {
            enable_inter_container_traffic_encryption: self
                .enable_inter_container_traffic_encryption
                .unwrap_or_default(),
            enable_network_isolation: self.enable_network_isolation.unwrap_or_default(),
            vpc_config: self.vpc_config,
        }
    }
}
