// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures Amazon SNS notifications of available or expiring work items for work teams.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NotificationConfiguration {
    /// <p>The ARN for the Amazon SNS topic to which notifications should be published.</p>
    #[doc(hidden)]
    pub notification_topic_arn: std::option::Option<std::string::String>,
}
impl NotificationConfiguration {
    /// <p>The ARN for the Amazon SNS topic to which notifications should be published.</p>
    pub fn notification_topic_arn(&self) -> std::option::Option<&str> {
        self.notification_topic_arn.as_deref()
    }
}
impl NotificationConfiguration {
    /// Creates a new builder-style object to manufacture [`NotificationConfiguration`](crate::types::NotificationConfiguration).
    pub fn builder() -> crate::types::builders::NotificationConfigurationBuilder {
        crate::types::builders::NotificationConfigurationBuilder::default()
    }
}

/// A builder for [`NotificationConfiguration`](crate::types::NotificationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NotificationConfigurationBuilder {
    pub(crate) notification_topic_arn: std::option::Option<std::string::String>,
}
impl NotificationConfigurationBuilder {
    /// <p>The ARN for the Amazon SNS topic to which notifications should be published.</p>
    pub fn notification_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.notification_topic_arn = Some(input.into());
        self
    }
    /// <p>The ARN for the Amazon SNS topic to which notifications should be published.</p>
    pub fn set_notification_topic_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notification_topic_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`NotificationConfiguration`](crate::types::NotificationConfiguration).
    pub fn build(self) -> crate::types::NotificationConfiguration {
        crate::types::NotificationConfiguration {
            notification_topic_arn: self.notification_topic_arn,
        }
    }
}
