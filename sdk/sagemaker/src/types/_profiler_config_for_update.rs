// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for updating the Amazon SageMaker Debugger profile parameters, system and framework metrics configurations, and storage paths.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProfilerConfigForUpdate {
    /// <p>Path to Amazon S3 storage location for system and framework metrics.</p>
    #[doc(hidden)]
    pub s3_output_path: std::option::Option<std::string::String>,
    /// <p>A time interval for capturing system metrics in milliseconds. Available values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.</p>
    #[doc(hidden)]
    pub profiling_interval_in_milliseconds: std::option::Option<i64>,
    /// <p>Configuration information for capturing framework metrics. Available key strings for different profiling options are <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>, and <code>DataLoaderProfilingConfig</code>. The following codes are configuration structures for the <code>ProfilingParameters</code> parameter. To learn more about how to configure the <code>ProfilingParameters</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. </p>
    #[doc(hidden)]
    pub profiling_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>To turn off Amazon SageMaker Debugger monitoring and profiling while a training job is in progress, set to <code>True</code>.</p>
    #[doc(hidden)]
    pub disable_profiler: bool,
}
impl ProfilerConfigForUpdate {
    /// <p>Path to Amazon S3 storage location for system and framework metrics.</p>
    pub fn s3_output_path(&self) -> std::option::Option<&str> {
        self.s3_output_path.as_deref()
    }
    /// <p>A time interval for capturing system metrics in milliseconds. Available values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.</p>
    pub fn profiling_interval_in_milliseconds(&self) -> std::option::Option<i64> {
        self.profiling_interval_in_milliseconds
    }
    /// <p>Configuration information for capturing framework metrics. Available key strings for different profiling options are <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>, and <code>DataLoaderProfilingConfig</code>. The following codes are configuration structures for the <code>ProfilingParameters</code> parameter. To learn more about how to configure the <code>ProfilingParameters</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. </p>
    pub fn profiling_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.profiling_parameters.as_ref()
    }
    /// <p>To turn off Amazon SageMaker Debugger monitoring and profiling while a training job is in progress, set to <code>True</code>.</p>
    pub fn disable_profiler(&self) -> bool {
        self.disable_profiler
    }
}
impl ProfilerConfigForUpdate {
    /// Creates a new builder-style object to manufacture [`ProfilerConfigForUpdate`](crate::types::ProfilerConfigForUpdate).
    pub fn builder() -> crate::types::builders::ProfilerConfigForUpdateBuilder {
        crate::types::builders::ProfilerConfigForUpdateBuilder::default()
    }
}

/// A builder for [`ProfilerConfigForUpdate`](crate::types::ProfilerConfigForUpdate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProfilerConfigForUpdateBuilder {
    pub(crate) s3_output_path: std::option::Option<std::string::String>,
    pub(crate) profiling_interval_in_milliseconds: std::option::Option<i64>,
    pub(crate) profiling_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) disable_profiler: std::option::Option<bool>,
}
impl ProfilerConfigForUpdateBuilder {
    /// <p>Path to Amazon S3 storage location for system and framework metrics.</p>
    pub fn s3_output_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_output_path = Some(input.into());
        self
    }
    /// <p>Path to Amazon S3 storage location for system and framework metrics.</p>
    pub fn set_s3_output_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_output_path = input;
        self
    }
    /// <p>A time interval for capturing system metrics in milliseconds. Available values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.</p>
    pub fn profiling_interval_in_milliseconds(mut self, input: i64) -> Self {
        self.profiling_interval_in_milliseconds = Some(input);
        self
    }
    /// <p>A time interval for capturing system metrics in milliseconds. Available values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.</p>
    pub fn set_profiling_interval_in_milliseconds(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.profiling_interval_in_milliseconds = input;
        self
    }
    /// Adds a key-value pair to `profiling_parameters`.
    ///
    /// To override the contents of this collection use [`set_profiling_parameters`](Self::set_profiling_parameters).
    ///
    /// <p>Configuration information for capturing framework metrics. Available key strings for different profiling options are <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>, and <code>DataLoaderProfilingConfig</code>. The following codes are configuration structures for the <code>ProfilingParameters</code> parameter. To learn more about how to configure the <code>ProfilingParameters</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. </p>
    pub fn profiling_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.profiling_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.profiling_parameters = Some(hash_map);
        self
    }
    /// <p>Configuration information for capturing framework metrics. Available key strings for different profiling options are <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>, and <code>DataLoaderProfilingConfig</code>. The following codes are configuration structures for the <code>ProfilingParameters</code> parameter. To learn more about how to configure the <code>ProfilingParameters</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. </p>
    pub fn set_profiling_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.profiling_parameters = input;
        self
    }
    /// <p>To turn off Amazon SageMaker Debugger monitoring and profiling while a training job is in progress, set to <code>True</code>.</p>
    pub fn disable_profiler(mut self, input: bool) -> Self {
        self.disable_profiler = Some(input);
        self
    }
    /// <p>To turn off Amazon SageMaker Debugger monitoring and profiling while a training job is in progress, set to <code>True</code>.</p>
    pub fn set_disable_profiler(mut self, input: std::option::Option<bool>) -> Self {
        self.disable_profiler = input;
        self
    }
    /// Consumes the builder and constructs a [`ProfilerConfigForUpdate`](crate::types::ProfilerConfigForUpdate).
    pub fn build(self) -> crate::types::ProfilerConfigForUpdate {
        crate::types::ProfilerConfigForUpdate {
            s3_output_path: self.s3_output_path,
            profiling_interval_in_milliseconds: self.profiling_interval_in_milliseconds,
            profiling_parameters: self.profiling_parameters,
            disable_profiler: self.disable_profiler.unwrap_or_default(),
        }
    }
}
