// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about hub content.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HubContentInfo {
    /// <p>The name of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_arn: std::option::Option<std::string::String>,
    /// <p>The version of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_version: std::option::Option<std::string::String>,
    /// <p>The type of hub content.</p>
    #[doc(hidden)]
    pub hub_content_type: std::option::Option<crate::types::HubContentType>,
    /// <p>The version of the hub content document schema.</p>
    #[doc(hidden)]
    pub document_schema_version: std::option::Option<std::string::String>,
    /// <p>The display name of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_display_name: std::option::Option<std::string::String>,
    /// <p>A description of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_description: std::option::Option<std::string::String>,
    /// <p>The searchable keywords for the hub content.</p>
    #[doc(hidden)]
    pub hub_content_search_keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The status of the hub content.</p>
    #[doc(hidden)]
    pub hub_content_status: std::option::Option<crate::types::HubContentStatus>,
    /// <p>The date and time that the hub content was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl HubContentInfo {
    /// <p>The name of the hub content.</p>
    pub fn hub_content_name(&self) -> std::option::Option<&str> {
        self.hub_content_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the hub content.</p>
    pub fn hub_content_arn(&self) -> std::option::Option<&str> {
        self.hub_content_arn.as_deref()
    }
    /// <p>The version of the hub content.</p>
    pub fn hub_content_version(&self) -> std::option::Option<&str> {
        self.hub_content_version.as_deref()
    }
    /// <p>The type of hub content.</p>
    pub fn hub_content_type(&self) -> std::option::Option<&crate::types::HubContentType> {
        self.hub_content_type.as_ref()
    }
    /// <p>The version of the hub content document schema.</p>
    pub fn document_schema_version(&self) -> std::option::Option<&str> {
        self.document_schema_version.as_deref()
    }
    /// <p>The display name of the hub content.</p>
    pub fn hub_content_display_name(&self) -> std::option::Option<&str> {
        self.hub_content_display_name.as_deref()
    }
    /// <p>A description of the hub content.</p>
    pub fn hub_content_description(&self) -> std::option::Option<&str> {
        self.hub_content_description.as_deref()
    }
    /// <p>The searchable keywords for the hub content.</p>
    pub fn hub_content_search_keywords(&self) -> std::option::Option<&[std::string::String]> {
        self.hub_content_search_keywords.as_deref()
    }
    /// <p>The status of the hub content.</p>
    pub fn hub_content_status(&self) -> std::option::Option<&crate::types::HubContentStatus> {
        self.hub_content_status.as_ref()
    }
    /// <p>The date and time that the hub content was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl HubContentInfo {
    /// Creates a new builder-style object to manufacture [`HubContentInfo`](crate::types::HubContentInfo).
    pub fn builder() -> crate::types::builders::HubContentInfoBuilder {
        crate::types::builders::HubContentInfoBuilder::default()
    }
}

/// A builder for [`HubContentInfo`](crate::types::HubContentInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HubContentInfoBuilder {
    pub(crate) hub_content_name: std::option::Option<std::string::String>,
    pub(crate) hub_content_arn: std::option::Option<std::string::String>,
    pub(crate) hub_content_version: std::option::Option<std::string::String>,
    pub(crate) hub_content_type: std::option::Option<crate::types::HubContentType>,
    pub(crate) document_schema_version: std::option::Option<std::string::String>,
    pub(crate) hub_content_display_name: std::option::Option<std::string::String>,
    pub(crate) hub_content_description: std::option::Option<std::string::String>,
    pub(crate) hub_content_search_keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) hub_content_status: std::option::Option<crate::types::HubContentStatus>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl HubContentInfoBuilder {
    /// <p>The name of the hub content.</p>
    pub fn hub_content_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_name = Some(input.into());
        self
    }
    /// <p>The name of the hub content.</p>
    pub fn set_hub_content_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_content_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub content.</p>
    pub fn hub_content_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub content.</p>
    pub fn set_hub_content_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_content_arn = input;
        self
    }
    /// <p>The version of the hub content.</p>
    pub fn hub_content_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_version = Some(input.into());
        self
    }
    /// <p>The version of the hub content.</p>
    pub fn set_hub_content_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.hub_content_version = input;
        self
    }
    /// <p>The type of hub content.</p>
    pub fn hub_content_type(mut self, input: crate::types::HubContentType) -> Self {
        self.hub_content_type = Some(input);
        self
    }
    /// <p>The type of hub content.</p>
    pub fn set_hub_content_type(
        mut self,
        input: std::option::Option<crate::types::HubContentType>,
    ) -> Self {
        self.hub_content_type = input;
        self
    }
    /// <p>The version of the hub content document schema.</p>
    pub fn document_schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_schema_version = Some(input.into());
        self
    }
    /// <p>The version of the hub content document schema.</p>
    pub fn set_document_schema_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.document_schema_version = input;
        self
    }
    /// <p>The display name of the hub content.</p>
    pub fn hub_content_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_display_name = Some(input.into());
        self
    }
    /// <p>The display name of the hub content.</p>
    pub fn set_hub_content_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.hub_content_display_name = input;
        self
    }
    /// <p>A description of the hub content.</p>
    pub fn hub_content_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_content_description = Some(input.into());
        self
    }
    /// <p>A description of the hub content.</p>
    pub fn set_hub_content_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.hub_content_description = input;
        self
    }
    /// Appends an item to `hub_content_search_keywords`.
    ///
    /// To override the contents of this collection use [`set_hub_content_search_keywords`](Self::set_hub_content_search_keywords).
    ///
    /// <p>The searchable keywords for the hub content.</p>
    pub fn hub_content_search_keywords(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.hub_content_search_keywords.unwrap_or_default();
        v.push(input.into());
        self.hub_content_search_keywords = Some(v);
        self
    }
    /// <p>The searchable keywords for the hub content.</p>
    pub fn set_hub_content_search_keywords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.hub_content_search_keywords = input;
        self
    }
    /// <p>The status of the hub content.</p>
    pub fn hub_content_status(mut self, input: crate::types::HubContentStatus) -> Self {
        self.hub_content_status = Some(input);
        self
    }
    /// <p>The status of the hub content.</p>
    pub fn set_hub_content_status(
        mut self,
        input: std::option::Option<crate::types::HubContentStatus>,
    ) -> Self {
        self.hub_content_status = input;
        self
    }
    /// <p>The date and time that the hub content was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The date and time that the hub content was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// Consumes the builder and constructs a [`HubContentInfo`](crate::types::HubContentInfo).
    pub fn build(self) -> crate::types::HubContentInfo {
        crate::types::HubContentInfo {
            hub_content_name: self.hub_content_name,
            hub_content_arn: self.hub_content_arn,
            hub_content_version: self.hub_content_version,
            hub_content_type: self.hub_content_type,
            document_schema_version: self.document_schema_version,
            hub_content_display_name: self.hub_content_display_name,
            hub_content_description: self.hub_content_description,
            hub_content_search_keywords: self.hub_content_search_keywords,
            hub_content_status: self.hub_content_status,
            creation_time: self.creation_time,
        }
    }
}
