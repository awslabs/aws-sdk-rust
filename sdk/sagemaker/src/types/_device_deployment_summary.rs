// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information summarizing device details and deployment status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceDeploymentSummary {
    /// <p>The ARN of the edge deployment plan.</p>
    pub edge_deployment_plan_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the edge deployment plan.</p>
    pub edge_deployment_plan_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the stage in the edge deployment plan.</p>
    pub stage_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the deployed stage.</p>
    pub deployed_stage_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the fleet to which the device belongs to.</p>
    pub device_fleet_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the device.</p>
    pub device_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the device.</p>
    pub device_arn: ::std::option::Option<::std::string::String>,
    /// <p>The deployment status of the device.</p>
    pub device_deployment_status: ::std::option::Option<crate::types::DeviceDeploymentStatus>,
    /// <p>The detailed error message for the deployoment status result.</p>
    pub device_deployment_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The description of the device.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The time when the deployment on the device started.</p>
    pub deployment_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DeviceDeploymentSummary {
    /// <p>The ARN of the edge deployment plan.</p>
    pub fn edge_deployment_plan_arn(&self) -> ::std::option::Option<&str> {
        self.edge_deployment_plan_arn.as_deref()
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn edge_deployment_plan_name(&self) -> ::std::option::Option<&str> {
        self.edge_deployment_plan_name.as_deref()
    }
    /// <p>The name of the stage in the edge deployment plan.</p>
    pub fn stage_name(&self) -> ::std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>The name of the deployed stage.</p>
    pub fn deployed_stage_name(&self) -> ::std::option::Option<&str> {
        self.deployed_stage_name.as_deref()
    }
    /// <p>The name of the fleet to which the device belongs to.</p>
    pub fn device_fleet_name(&self) -> ::std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
    /// <p>The name of the device.</p>
    pub fn device_name(&self) -> ::std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>The ARN of the device.</p>
    pub fn device_arn(&self) -> ::std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>The deployment status of the device.</p>
    pub fn device_deployment_status(&self) -> ::std::option::Option<&crate::types::DeviceDeploymentStatus> {
        self.device_deployment_status.as_ref()
    }
    /// <p>The detailed error message for the deployoment status result.</p>
    pub fn device_deployment_status_message(&self) -> ::std::option::Option<&str> {
        self.device_deployment_status_message.as_deref()
    }
    /// <p>The description of the device.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The time when the deployment on the device started.</p>
    pub fn deployment_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.deployment_start_time.as_ref()
    }
}
impl DeviceDeploymentSummary {
    /// Creates a new builder-style object to manufacture [`DeviceDeploymentSummary`](crate::types::DeviceDeploymentSummary).
    pub fn builder() -> crate::types::builders::DeviceDeploymentSummaryBuilder {
        crate::types::builders::DeviceDeploymentSummaryBuilder::default()
    }
}

/// A builder for [`DeviceDeploymentSummary`](crate::types::DeviceDeploymentSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeviceDeploymentSummaryBuilder {
    pub(crate) edge_deployment_plan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) edge_deployment_plan_name: ::std::option::Option<::std::string::String>,
    pub(crate) stage_name: ::std::option::Option<::std::string::String>,
    pub(crate) deployed_stage_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_fleet_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_arn: ::std::option::Option<::std::string::String>,
    pub(crate) device_deployment_status: ::std::option::Option<crate::types::DeviceDeploymentStatus>,
    pub(crate) device_deployment_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DeviceDeploymentSummaryBuilder {
    /// <p>The ARN of the edge deployment plan.</p>
    /// This field is required.
    pub fn edge_deployment_plan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.edge_deployment_plan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the edge deployment plan.</p>
    pub fn set_edge_deployment_plan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.edge_deployment_plan_arn = input;
        self
    }
    /// <p>The ARN of the edge deployment plan.</p>
    pub fn get_edge_deployment_plan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.edge_deployment_plan_arn
    }
    /// <p>The name of the edge deployment plan.</p>
    /// This field is required.
    pub fn edge_deployment_plan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.edge_deployment_plan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn set_edge_deployment_plan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.edge_deployment_plan_name = input;
        self
    }
    /// <p>The name of the edge deployment plan.</p>
    pub fn get_edge_deployment_plan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.edge_deployment_plan_name
    }
    /// <p>The name of the stage in the edge deployment plan.</p>
    /// This field is required.
    pub fn stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stage in the edge deployment plan.</p>
    pub fn set_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// <p>The name of the stage in the edge deployment plan.</p>
    pub fn get_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_name
    }
    /// <p>The name of the deployed stage.</p>
    pub fn deployed_stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployed_stage_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the deployed stage.</p>
    pub fn set_deployed_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployed_stage_name = input;
        self
    }
    /// <p>The name of the deployed stage.</p>
    pub fn get_deployed_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployed_stage_name
    }
    /// <p>The name of the fleet to which the device belongs to.</p>
    pub fn device_fleet_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_fleet_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the fleet to which the device belongs to.</p>
    pub fn set_device_fleet_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// <p>The name of the fleet to which the device belongs to.</p>
    pub fn get_device_fleet_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_fleet_name
    }
    /// <p>The name of the device.</p>
    /// This field is required.
    pub fn device_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the device.</p>
    pub fn set_device_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The name of the device.</p>
    pub fn get_device_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_name
    }
    /// <p>The ARN of the device.</p>
    /// This field is required.
    pub fn device_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn set_device_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn get_device_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_arn
    }
    /// <p>The deployment status of the device.</p>
    pub fn device_deployment_status(mut self, input: crate::types::DeviceDeploymentStatus) -> Self {
        self.device_deployment_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment status of the device.</p>
    pub fn set_device_deployment_status(mut self, input: ::std::option::Option<crate::types::DeviceDeploymentStatus>) -> Self {
        self.device_deployment_status = input;
        self
    }
    /// <p>The deployment status of the device.</p>
    pub fn get_device_deployment_status(&self) -> &::std::option::Option<crate::types::DeviceDeploymentStatus> {
        &self.device_deployment_status
    }
    /// <p>The detailed error message for the deployoment status result.</p>
    pub fn device_deployment_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_deployment_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detailed error message for the deployoment status result.</p>
    pub fn set_device_deployment_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_deployment_status_message = input;
        self
    }
    /// <p>The detailed error message for the deployoment status result.</p>
    pub fn get_device_deployment_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_deployment_status_message
    }
    /// <p>The description of the device.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the device.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the device.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The time when the deployment on the device started.</p>
    pub fn deployment_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.deployment_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the deployment on the device started.</p>
    pub fn set_deployment_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.deployment_start_time = input;
        self
    }
    /// <p>The time when the deployment on the device started.</p>
    pub fn get_deployment_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.deployment_start_time
    }
    /// Consumes the builder and constructs a [`DeviceDeploymentSummary`](crate::types::DeviceDeploymentSummary).
    pub fn build(self) -> crate::types::DeviceDeploymentSummary {
        crate::types::DeviceDeploymentSummary {
            edge_deployment_plan_arn: self.edge_deployment_plan_arn,
            edge_deployment_plan_name: self.edge_deployment_plan_name,
            stage_name: self.stage_name,
            deployed_stage_name: self.deployed_stage_name,
            device_fleet_name: self.device_fleet_name,
            device_name: self.device_name,
            device_arn: self.device_arn,
            device_deployment_status: self.device_deployment_status,
            device_deployment_status_message: self.device_deployment_status_message,
            description: self.description,
            deployment_start_time: self.deployment_start_time,
        }
    }
}
