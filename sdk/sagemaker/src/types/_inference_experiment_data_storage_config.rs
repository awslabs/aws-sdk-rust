// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 location and configuration for storing inference request and response data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InferenceExperimentDataStorageConfig {
    /// <p>The Amazon S3 bucket where the inference request and response data is stored. </p>
    pub destination: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption. </p>
    pub kms_key: ::std::option::Option<::std::string::String>,
    /// <p>Configuration specifying how to treat different headers. If no headers are specified Amazon SageMaker will by default base64 encode when capturing the data.</p>
    pub content_type: ::std::option::Option<crate::types::CaptureContentTypeHeader>,
}
impl InferenceExperimentDataStorageConfig {
    /// <p>The Amazon S3 bucket where the inference request and response data is stored. </p>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p> The Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption. </p>
    pub fn kms_key(&self) -> ::std::option::Option<&str> {
        self.kms_key.as_deref()
    }
    /// <p>Configuration specifying how to treat different headers. If no headers are specified Amazon SageMaker will by default base64 encode when capturing the data.</p>
    pub fn content_type(&self) -> ::std::option::Option<&crate::types::CaptureContentTypeHeader> {
        self.content_type.as_ref()
    }
}
impl InferenceExperimentDataStorageConfig {
    /// Creates a new builder-style object to manufacture [`InferenceExperimentDataStorageConfig`](crate::types::InferenceExperimentDataStorageConfig).
    pub fn builder() -> crate::types::builders::InferenceExperimentDataStorageConfigBuilder {
        crate::types::builders::InferenceExperimentDataStorageConfigBuilder::default()
    }
}

/// A builder for [`InferenceExperimentDataStorageConfig`](crate::types::InferenceExperimentDataStorageConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InferenceExperimentDataStorageConfigBuilder {
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<crate::types::CaptureContentTypeHeader>,
}
impl InferenceExperimentDataStorageConfigBuilder {
    /// <p>The Amazon S3 bucket where the inference request and response data is stored. </p>
    /// This field is required.
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket where the inference request and response data is stored. </p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The Amazon S3 bucket where the inference request and response data is stored. </p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p> The Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption. </p>
    pub fn kms_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption. </p>
    pub fn set_kms_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key = input;
        self
    }
    /// <p> The Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption. </p>
    pub fn get_kms_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key
    }
    /// <p>Configuration specifying how to treat different headers. If no headers are specified Amazon SageMaker will by default base64 encode when capturing the data.</p>
    pub fn content_type(mut self, input: crate::types::CaptureContentTypeHeader) -> Self {
        self.content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration specifying how to treat different headers. If no headers are specified Amazon SageMaker will by default base64 encode when capturing the data.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<crate::types::CaptureContentTypeHeader>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>Configuration specifying how to treat different headers. If no headers are specified Amazon SageMaker will by default base64 encode when capturing the data.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<crate::types::CaptureContentTypeHeader> {
        &self.content_type
    }
    /// Consumes the builder and constructs a [`InferenceExperimentDataStorageConfig`](crate::types::InferenceExperimentDataStorageConfig).
    pub fn build(self) -> crate::types::InferenceExperimentDataStorageConfig {
        crate::types::InferenceExperimentDataStorageConfig {
            destination: self.destination,
            kms_key: self.kms_key,
            content_type: self.content_type,
        }
    }
}
