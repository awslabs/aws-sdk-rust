// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a candidate produced by an AutoML training job, including its status, steps, and other properties.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoMlCandidate {
    /// <p>The name of the candidate.</p>
    #[doc(hidden)]
    pub candidate_name: std::option::Option<std::string::String>,
    /// <p>The best candidate result from an AutoML training job.</p>
    #[doc(hidden)]
    pub final_auto_ml_job_objective_metric:
        std::option::Option<crate::types::FinalAutoMlJobObjectiveMetric>,
    /// <p>The objective's status.</p>
    #[doc(hidden)]
    pub objective_status: std::option::Option<crate::types::ObjectiveStatus>,
    /// <p>Information about the candidate's steps.</p>
    #[doc(hidden)]
    pub candidate_steps: std::option::Option<std::vec::Vec<crate::types::AutoMlCandidateStep>>,
    /// <p>The candidate's status.</p>
    #[doc(hidden)]
    pub candidate_status: std::option::Option<crate::types::CandidateStatus>,
    /// <p>Information about the inference container definitions.</p>
    #[doc(hidden)]
    pub inference_containers:
        std::option::Option<std::vec::Vec<crate::types::AutoMlContainerDefinition>>,
    /// <p>The creation time.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end time.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last modified time.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The failure reason.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The properties of an AutoML candidate job.</p>
    #[doc(hidden)]
    pub candidate_properties: std::option::Option<crate::types::CandidateProperties>,
}
impl AutoMlCandidate {
    /// <p>The name of the candidate.</p>
    pub fn candidate_name(&self) -> std::option::Option<&str> {
        self.candidate_name.as_deref()
    }
    /// <p>The best candidate result from an AutoML training job.</p>
    pub fn final_auto_ml_job_objective_metric(
        &self,
    ) -> std::option::Option<&crate::types::FinalAutoMlJobObjectiveMetric> {
        self.final_auto_ml_job_objective_metric.as_ref()
    }
    /// <p>The objective's status.</p>
    pub fn objective_status(&self) -> std::option::Option<&crate::types::ObjectiveStatus> {
        self.objective_status.as_ref()
    }
    /// <p>Information about the candidate's steps.</p>
    pub fn candidate_steps(&self) -> std::option::Option<&[crate::types::AutoMlCandidateStep]> {
        self.candidate_steps.as_deref()
    }
    /// <p>The candidate's status.</p>
    pub fn candidate_status(&self) -> std::option::Option<&crate::types::CandidateStatus> {
        self.candidate_status.as_ref()
    }
    /// <p>Information about the inference container definitions.</p>
    pub fn inference_containers(
        &self,
    ) -> std::option::Option<&[crate::types::AutoMlContainerDefinition]> {
        self.inference_containers.as_deref()
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The end time.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The last modified time.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The failure reason.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The properties of an AutoML candidate job.</p>
    pub fn candidate_properties(&self) -> std::option::Option<&crate::types::CandidateProperties> {
        self.candidate_properties.as_ref()
    }
}
impl AutoMlCandidate {
    /// Creates a new builder-style object to manufacture [`AutoMlCandidate`](crate::types::AutoMlCandidate).
    pub fn builder() -> crate::types::builders::AutoMlCandidateBuilder {
        crate::types::builders::AutoMlCandidateBuilder::default()
    }
}

/// A builder for [`AutoMlCandidate`](crate::types::AutoMlCandidate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoMlCandidateBuilder {
    pub(crate) candidate_name: std::option::Option<std::string::String>,
    pub(crate) final_auto_ml_job_objective_metric:
        std::option::Option<crate::types::FinalAutoMlJobObjectiveMetric>,
    pub(crate) objective_status: std::option::Option<crate::types::ObjectiveStatus>,
    pub(crate) candidate_steps:
        std::option::Option<std::vec::Vec<crate::types::AutoMlCandidateStep>>,
    pub(crate) candidate_status: std::option::Option<crate::types::CandidateStatus>,
    pub(crate) inference_containers:
        std::option::Option<std::vec::Vec<crate::types::AutoMlContainerDefinition>>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) candidate_properties: std::option::Option<crate::types::CandidateProperties>,
}
impl AutoMlCandidateBuilder {
    /// <p>The name of the candidate.</p>
    pub fn candidate_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.candidate_name = Some(input.into());
        self
    }
    /// <p>The name of the candidate.</p>
    pub fn set_candidate_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.candidate_name = input;
        self
    }
    /// <p>The best candidate result from an AutoML training job.</p>
    pub fn final_auto_ml_job_objective_metric(
        mut self,
        input: crate::types::FinalAutoMlJobObjectiveMetric,
    ) -> Self {
        self.final_auto_ml_job_objective_metric = Some(input);
        self
    }
    /// <p>The best candidate result from an AutoML training job.</p>
    pub fn set_final_auto_ml_job_objective_metric(
        mut self,
        input: std::option::Option<crate::types::FinalAutoMlJobObjectiveMetric>,
    ) -> Self {
        self.final_auto_ml_job_objective_metric = input;
        self
    }
    /// <p>The objective's status.</p>
    pub fn objective_status(mut self, input: crate::types::ObjectiveStatus) -> Self {
        self.objective_status = Some(input);
        self
    }
    /// <p>The objective's status.</p>
    pub fn set_objective_status(
        mut self,
        input: std::option::Option<crate::types::ObjectiveStatus>,
    ) -> Self {
        self.objective_status = input;
        self
    }
    /// Appends an item to `candidate_steps`.
    ///
    /// To override the contents of this collection use [`set_candidate_steps`](Self::set_candidate_steps).
    ///
    /// <p>Information about the candidate's steps.</p>
    pub fn candidate_steps(mut self, input: crate::types::AutoMlCandidateStep) -> Self {
        let mut v = self.candidate_steps.unwrap_or_default();
        v.push(input);
        self.candidate_steps = Some(v);
        self
    }
    /// <p>Information about the candidate's steps.</p>
    pub fn set_candidate_steps(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AutoMlCandidateStep>>,
    ) -> Self {
        self.candidate_steps = input;
        self
    }
    /// <p>The candidate's status.</p>
    pub fn candidate_status(mut self, input: crate::types::CandidateStatus) -> Self {
        self.candidate_status = Some(input);
        self
    }
    /// <p>The candidate's status.</p>
    pub fn set_candidate_status(
        mut self,
        input: std::option::Option<crate::types::CandidateStatus>,
    ) -> Self {
        self.candidate_status = input;
        self
    }
    /// Appends an item to `inference_containers`.
    ///
    /// To override the contents of this collection use [`set_inference_containers`](Self::set_inference_containers).
    ///
    /// <p>Information about the inference container definitions.</p>
    pub fn inference_containers(mut self, input: crate::types::AutoMlContainerDefinition) -> Self {
        let mut v = self.inference_containers.unwrap_or_default();
        v.push(input);
        self.inference_containers = Some(v);
        self
    }
    /// <p>Information about the inference container definitions.</p>
    pub fn set_inference_containers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AutoMlContainerDefinition>>,
    ) -> Self {
        self.inference_containers = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The end time.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The end time.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The last modified time.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The last modified time.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The failure reason.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The failure reason.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The properties of an AutoML candidate job.</p>
    pub fn candidate_properties(mut self, input: crate::types::CandidateProperties) -> Self {
        self.candidate_properties = Some(input);
        self
    }
    /// <p>The properties of an AutoML candidate job.</p>
    pub fn set_candidate_properties(
        mut self,
        input: std::option::Option<crate::types::CandidateProperties>,
    ) -> Self {
        self.candidate_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoMlCandidate`](crate::types::AutoMlCandidate).
    pub fn build(self) -> crate::types::AutoMlCandidate {
        crate::types::AutoMlCandidate {
            candidate_name: self.candidate_name,
            final_auto_ml_job_objective_metric: self.final_auto_ml_job_objective_metric,
            objective_status: self.objective_status,
            candidate_steps: self.candidate_steps,
            candidate_status: self.candidate_status,
            inference_containers: self.inference_containers,
            creation_time: self.creation_time,
            end_time: self.end_time,
            last_modified_time: self.last_modified_time,
            failure_reason: self.failure_reason,
            candidate_properties: self.candidate_properties,
        }
    }
}
