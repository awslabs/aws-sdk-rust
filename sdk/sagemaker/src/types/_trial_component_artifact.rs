// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an input or output artifact of a trial component. You specify <code>TrialComponentArtifact</code> as part of the <code>InputArtifacts</code> and <code>OutputArtifacts</code> parameters in the <code>CreateTrialComponent</code> request.</p>
/// <p>Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types. Examples of output artifacts are metrics, snapshots, logs, and images.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrialComponentArtifact {
    /// <p>The media type of the artifact, which indicates the type of data in the artifact file. The media type consists of a <i>type</i> and a <i>subtype</i> concatenated with a slash (/) character, for example, text/csv, image/jpeg, and s3/uri. The type specifies the category of the media. The subtype specifies the kind of data.</p>
    #[doc(hidden)]
    pub media_type: std::option::Option<std::string::String>,
    /// <p>The location of the artifact.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl TrialComponentArtifact {
    /// <p>The media type of the artifact, which indicates the type of data in the artifact file. The media type consists of a <i>type</i> and a <i>subtype</i> concatenated with a slash (/) character, for example, text/csv, image/jpeg, and s3/uri. The type specifies the category of the media. The subtype specifies the kind of data.</p>
    pub fn media_type(&self) -> std::option::Option<&str> {
        self.media_type.as_deref()
    }
    /// <p>The location of the artifact.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl TrialComponentArtifact {
    /// Creates a new builder-style object to manufacture [`TrialComponentArtifact`](crate::types::TrialComponentArtifact).
    pub fn builder() -> crate::types::builders::TrialComponentArtifactBuilder {
        crate::types::builders::TrialComponentArtifactBuilder::default()
    }
}

/// A builder for [`TrialComponentArtifact`](crate::types::TrialComponentArtifact).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrialComponentArtifactBuilder {
    pub(crate) media_type: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl TrialComponentArtifactBuilder {
    /// <p>The media type of the artifact, which indicates the type of data in the artifact file. The media type consists of a <i>type</i> and a <i>subtype</i> concatenated with a slash (/) character, for example, text/csv, image/jpeg, and s3/uri. The type specifies the category of the media. The subtype specifies the kind of data.</p>
    pub fn media_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.media_type = Some(input.into());
        self
    }
    /// <p>The media type of the artifact, which indicates the type of data in the artifact file. The media type consists of a <i>type</i> and a <i>subtype</i> concatenated with a slash (/) character, for example, text/csv, image/jpeg, and s3/uri. The type specifies the category of the media. The subtype specifies the kind of data.</p>
    pub fn set_media_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.media_type = input;
        self
    }
    /// <p>The location of the artifact.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The location of the artifact.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`TrialComponentArtifact`](crate::types::TrialComponentArtifact).
    pub fn build(self) -> crate::types::TrialComponentArtifact {
        crate::types::TrialComponentArtifact {
            media_type: self.media_type,
            value: self.value,
        }
    }
}
