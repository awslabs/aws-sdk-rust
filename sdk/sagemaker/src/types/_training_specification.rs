// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines how the algorithm is used for a training job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrainingSpecification {
    /// <p>The Amazon ECR registry path of the Docker image that contains the training algorithm.</p>
    #[doc(hidden)]
    pub training_image: std::option::Option<std::string::String>,
    /// <p>An MD5 hash of the training algorithm that identifies the Docker image used for training.</p>
    #[doc(hidden)]
    pub training_image_digest: std::option::Option<std::string::String>,
    /// <p>A list of the <code>HyperParameterSpecification</code> objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.&gt;</p>
    #[doc(hidden)]
    pub supported_hyper_parameters:
        std::option::Option<std::vec::Vec<crate::types::HyperParameterSpecification>>,
    /// <p>A list of the instance types that this algorithm can use for training.</p>
    #[doc(hidden)]
    pub supported_training_instance_types:
        std::option::Option<std::vec::Vec<crate::types::TrainingInstanceType>>,
    /// <p>Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.</p>
    #[doc(hidden)]
    pub supports_distributed_training: bool,
    /// <p>A list of <code>MetricDefinition</code> objects, which are used for parsing metrics generated by the algorithm.</p>
    #[doc(hidden)]
    pub metric_definitions: std::option::Option<std::vec::Vec<crate::types::MetricDefinition>>,
    /// <p>A list of <code>ChannelSpecification</code> objects, which specify the input sources to be used by the algorithm.</p>
    #[doc(hidden)]
    pub training_channels: std::option::Option<std::vec::Vec<crate::types::ChannelSpecification>>,
    /// <p>A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.</p>
    #[doc(hidden)]
    pub supported_tuning_job_objective_metrics:
        std::option::Option<std::vec::Vec<crate::types::HyperParameterTuningJobObjective>>,
}
impl TrainingSpecification {
    /// <p>The Amazon ECR registry path of the Docker image that contains the training algorithm.</p>
    pub fn training_image(&self) -> std::option::Option<&str> {
        self.training_image.as_deref()
    }
    /// <p>An MD5 hash of the training algorithm that identifies the Docker image used for training.</p>
    pub fn training_image_digest(&self) -> std::option::Option<&str> {
        self.training_image_digest.as_deref()
    }
    /// <p>A list of the <code>HyperParameterSpecification</code> objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.&gt;</p>
    pub fn supported_hyper_parameters(
        &self,
    ) -> std::option::Option<&[crate::types::HyperParameterSpecification]> {
        self.supported_hyper_parameters.as_deref()
    }
    /// <p>A list of the instance types that this algorithm can use for training.</p>
    pub fn supported_training_instance_types(
        &self,
    ) -> std::option::Option<&[crate::types::TrainingInstanceType]> {
        self.supported_training_instance_types.as_deref()
    }
    /// <p>Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.</p>
    pub fn supports_distributed_training(&self) -> bool {
        self.supports_distributed_training
    }
    /// <p>A list of <code>MetricDefinition</code> objects, which are used for parsing metrics generated by the algorithm.</p>
    pub fn metric_definitions(&self) -> std::option::Option<&[crate::types::MetricDefinition]> {
        self.metric_definitions.as_deref()
    }
    /// <p>A list of <code>ChannelSpecification</code> objects, which specify the input sources to be used by the algorithm.</p>
    pub fn training_channels(&self) -> std::option::Option<&[crate::types::ChannelSpecification]> {
        self.training_channels.as_deref()
    }
    /// <p>A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.</p>
    pub fn supported_tuning_job_objective_metrics(
        &self,
    ) -> std::option::Option<&[crate::types::HyperParameterTuningJobObjective]> {
        self.supported_tuning_job_objective_metrics.as_deref()
    }
}
impl TrainingSpecification {
    /// Creates a new builder-style object to manufacture [`TrainingSpecification`](crate::types::TrainingSpecification).
    pub fn builder() -> crate::types::builders::TrainingSpecificationBuilder {
        crate::types::builders::TrainingSpecificationBuilder::default()
    }
}

/// A builder for [`TrainingSpecification`](crate::types::TrainingSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrainingSpecificationBuilder {
    pub(crate) training_image: std::option::Option<std::string::String>,
    pub(crate) training_image_digest: std::option::Option<std::string::String>,
    pub(crate) supported_hyper_parameters:
        std::option::Option<std::vec::Vec<crate::types::HyperParameterSpecification>>,
    pub(crate) supported_training_instance_types:
        std::option::Option<std::vec::Vec<crate::types::TrainingInstanceType>>,
    pub(crate) supports_distributed_training: std::option::Option<bool>,
    pub(crate) metric_definitions:
        std::option::Option<std::vec::Vec<crate::types::MetricDefinition>>,
    pub(crate) training_channels:
        std::option::Option<std::vec::Vec<crate::types::ChannelSpecification>>,
    pub(crate) supported_tuning_job_objective_metrics:
        std::option::Option<std::vec::Vec<crate::types::HyperParameterTuningJobObjective>>,
}
impl TrainingSpecificationBuilder {
    /// <p>The Amazon ECR registry path of the Docker image that contains the training algorithm.</p>
    pub fn training_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.training_image = Some(input.into());
        self
    }
    /// <p>The Amazon ECR registry path of the Docker image that contains the training algorithm.</p>
    pub fn set_training_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.training_image = input;
        self
    }
    /// <p>An MD5 hash of the training algorithm that identifies the Docker image used for training.</p>
    pub fn training_image_digest(mut self, input: impl Into<std::string::String>) -> Self {
        self.training_image_digest = Some(input.into());
        self
    }
    /// <p>An MD5 hash of the training algorithm that identifies the Docker image used for training.</p>
    pub fn set_training_image_digest(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.training_image_digest = input;
        self
    }
    /// Appends an item to `supported_hyper_parameters`.
    ///
    /// To override the contents of this collection use [`set_supported_hyper_parameters`](Self::set_supported_hyper_parameters).
    ///
    /// <p>A list of the <code>HyperParameterSpecification</code> objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.&gt;</p>
    pub fn supported_hyper_parameters(
        mut self,
        input: crate::types::HyperParameterSpecification,
    ) -> Self {
        let mut v = self.supported_hyper_parameters.unwrap_or_default();
        v.push(input);
        self.supported_hyper_parameters = Some(v);
        self
    }
    /// <p>A list of the <code>HyperParameterSpecification</code> objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.&gt;</p>
    pub fn set_supported_hyper_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HyperParameterSpecification>>,
    ) -> Self {
        self.supported_hyper_parameters = input;
        self
    }
    /// Appends an item to `supported_training_instance_types`.
    ///
    /// To override the contents of this collection use [`set_supported_training_instance_types`](Self::set_supported_training_instance_types).
    ///
    /// <p>A list of the instance types that this algorithm can use for training.</p>
    pub fn supported_training_instance_types(
        mut self,
        input: crate::types::TrainingInstanceType,
    ) -> Self {
        let mut v = self.supported_training_instance_types.unwrap_or_default();
        v.push(input);
        self.supported_training_instance_types = Some(v);
        self
    }
    /// <p>A list of the instance types that this algorithm can use for training.</p>
    pub fn set_supported_training_instance_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TrainingInstanceType>>,
    ) -> Self {
        self.supported_training_instance_types = input;
        self
    }
    /// <p>Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.</p>
    pub fn supports_distributed_training(mut self, input: bool) -> Self {
        self.supports_distributed_training = Some(input);
        self
    }
    /// <p>Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.</p>
    pub fn set_supports_distributed_training(mut self, input: std::option::Option<bool>) -> Self {
        self.supports_distributed_training = input;
        self
    }
    /// Appends an item to `metric_definitions`.
    ///
    /// To override the contents of this collection use [`set_metric_definitions`](Self::set_metric_definitions).
    ///
    /// <p>A list of <code>MetricDefinition</code> objects, which are used for parsing metrics generated by the algorithm.</p>
    pub fn metric_definitions(mut self, input: crate::types::MetricDefinition) -> Self {
        let mut v = self.metric_definitions.unwrap_or_default();
        v.push(input);
        self.metric_definitions = Some(v);
        self
    }
    /// <p>A list of <code>MetricDefinition</code> objects, which are used for parsing metrics generated by the algorithm.</p>
    pub fn set_metric_definitions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricDefinition>>,
    ) -> Self {
        self.metric_definitions = input;
        self
    }
    /// Appends an item to `training_channels`.
    ///
    /// To override the contents of this collection use [`set_training_channels`](Self::set_training_channels).
    ///
    /// <p>A list of <code>ChannelSpecification</code> objects, which specify the input sources to be used by the algorithm.</p>
    pub fn training_channels(mut self, input: crate::types::ChannelSpecification) -> Self {
        let mut v = self.training_channels.unwrap_or_default();
        v.push(input);
        self.training_channels = Some(v);
        self
    }
    /// <p>A list of <code>ChannelSpecification</code> objects, which specify the input sources to be used by the algorithm.</p>
    pub fn set_training_channels(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ChannelSpecification>>,
    ) -> Self {
        self.training_channels = input;
        self
    }
    /// Appends an item to `supported_tuning_job_objective_metrics`.
    ///
    /// To override the contents of this collection use [`set_supported_tuning_job_objective_metrics`](Self::set_supported_tuning_job_objective_metrics).
    ///
    /// <p>A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.</p>
    pub fn supported_tuning_job_objective_metrics(
        mut self,
        input: crate::types::HyperParameterTuningJobObjective,
    ) -> Self {
        let mut v = self
            .supported_tuning_job_objective_metrics
            .unwrap_or_default();
        v.push(input);
        self.supported_tuning_job_objective_metrics = Some(v);
        self
    }
    /// <p>A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.</p>
    pub fn set_supported_tuning_job_objective_metrics(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HyperParameterTuningJobObjective>>,
    ) -> Self {
        self.supported_tuning_job_objective_metrics = input;
        self
    }
    /// Consumes the builder and constructs a [`TrainingSpecification`](crate::types::TrainingSpecification).
    pub fn build(self) -> crate::types::TrainingSpecification {
        crate::types::TrainingSpecification {
            training_image: self.training_image,
            training_image_digest: self.training_image_digest,
            supported_hyper_parameters: self.supported_hyper_parameters,
            supported_training_instance_types: self.supported_training_instance_types,
            supports_distributed_training: self.supports_distributed_training.unwrap_or_default(),
            metric_definitions: self.metric_definitions,
            training_channels: self.training_channels,
            supported_tuning_job_objective_metrics: self.supported_tuning_job_objective_metrics,
        }
    }
}
