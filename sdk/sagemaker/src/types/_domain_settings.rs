// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of settings that apply to the <code>SageMaker Domain</code>. These settings are specified through the <code>CreateDomain</code> API call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainSettings {
    /// <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.</p>
    #[doc(hidden)]
    pub r_studio_server_pro_domain_settings:
        std::option::Option<crate::types::RStudioServerProDomainSettings>,
    /// <p>The configuration for attaching a SageMaker user profile name to the execution role as a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity key</a>.</p>
    #[doc(hidden)]
    pub execution_role_identity_config:
        std::option::Option<crate::types::ExecutionRoleIdentityConfig>,
}
impl DomainSettings {
    /// <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.</p>
    pub fn r_studio_server_pro_domain_settings(
        &self,
    ) -> std::option::Option<&crate::types::RStudioServerProDomainSettings> {
        self.r_studio_server_pro_domain_settings.as_ref()
    }
    /// <p>The configuration for attaching a SageMaker user profile name to the execution role as a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity key</a>.</p>
    pub fn execution_role_identity_config(
        &self,
    ) -> std::option::Option<&crate::types::ExecutionRoleIdentityConfig> {
        self.execution_role_identity_config.as_ref()
    }
}
impl DomainSettings {
    /// Creates a new builder-style object to manufacture [`DomainSettings`](crate::types::DomainSettings).
    pub fn builder() -> crate::types::builders::DomainSettingsBuilder {
        crate::types::builders::DomainSettingsBuilder::default()
    }
}

/// A builder for [`DomainSettings`](crate::types::DomainSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainSettingsBuilder {
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) r_studio_server_pro_domain_settings:
        std::option::Option<crate::types::RStudioServerProDomainSettings>,
    pub(crate) execution_role_identity_config:
        std::option::Option<crate::types::ExecutionRoleIdentityConfig>,
}
impl DomainSettingsBuilder {
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.</p>
    pub fn r_studio_server_pro_domain_settings(
        mut self,
        input: crate::types::RStudioServerProDomainSettings,
    ) -> Self {
        self.r_studio_server_pro_domain_settings = Some(input);
        self
    }
    /// <p>A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.</p>
    pub fn set_r_studio_server_pro_domain_settings(
        mut self,
        input: std::option::Option<crate::types::RStudioServerProDomainSettings>,
    ) -> Self {
        self.r_studio_server_pro_domain_settings = input;
        self
    }
    /// <p>The configuration for attaching a SageMaker user profile name to the execution role as a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity key</a>.</p>
    pub fn execution_role_identity_config(
        mut self,
        input: crate::types::ExecutionRoleIdentityConfig,
    ) -> Self {
        self.execution_role_identity_config = Some(input);
        self
    }
    /// <p>The configuration for attaching a SageMaker user profile name to the execution role as a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity key</a>.</p>
    pub fn set_execution_role_identity_config(
        mut self,
        input: std::option::Option<crate::types::ExecutionRoleIdentityConfig>,
    ) -> Self {
        self.execution_role_identity_config = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainSettings`](crate::types::DomainSettings).
    pub fn build(self) -> crate::types::DomainSettings {
        crate::types::DomainSettings {
            security_group_ids: self.security_group_ids,
            r_studio_server_pro_domain_settings: self.r_studio_server_pro_domain_settings,
            execution_role_identity_config: self.execution_role_identity_config,
        }
    }
}
