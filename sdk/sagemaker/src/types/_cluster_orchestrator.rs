// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type of orchestrator used for the SageMaker HyperPod cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterOrchestrator {
    /// <p>The Amazon EKS cluster used as the orchestrator for the SageMaker HyperPod cluster.</p>
    pub eks: ::std::option::Option<crate::types::ClusterOrchestratorEksConfig>,
}
impl ClusterOrchestrator {
    /// <p>The Amazon EKS cluster used as the orchestrator for the SageMaker HyperPod cluster.</p>
    pub fn eks(&self) -> ::std::option::Option<&crate::types::ClusterOrchestratorEksConfig> {
        self.eks.as_ref()
    }
}
impl ClusterOrchestrator {
    /// Creates a new builder-style object to manufacture [`ClusterOrchestrator`](crate::types::ClusterOrchestrator).
    pub fn builder() -> crate::types::builders::ClusterOrchestratorBuilder {
        crate::types::builders::ClusterOrchestratorBuilder::default()
    }
}

/// A builder for [`ClusterOrchestrator`](crate::types::ClusterOrchestrator).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterOrchestratorBuilder {
    pub(crate) eks: ::std::option::Option<crate::types::ClusterOrchestratorEksConfig>,
}
impl ClusterOrchestratorBuilder {
    /// <p>The Amazon EKS cluster used as the orchestrator for the SageMaker HyperPod cluster.</p>
    /// This field is required.
    pub fn eks(mut self, input: crate::types::ClusterOrchestratorEksConfig) -> Self {
        self.eks = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon EKS cluster used as the orchestrator for the SageMaker HyperPod cluster.</p>
    pub fn set_eks(mut self, input: ::std::option::Option<crate::types::ClusterOrchestratorEksConfig>) -> Self {
        self.eks = input;
        self
    }
    /// <p>The Amazon EKS cluster used as the orchestrator for the SageMaker HyperPod cluster.</p>
    pub fn get_eks(&self) -> &::std::option::Option<crate::types::ClusterOrchestratorEksConfig> {
        &self.eks
    }
    /// Consumes the builder and constructs a [`ClusterOrchestrator`](crate::types::ClusterOrchestrator).
    pub fn build(self) -> crate::types::ClusterOrchestrator {
        crate::types::ClusterOrchestrator { eks: self.eks }
    }
}
