// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides counts for human-labeled tasks in the labeling job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LabelCountersForWorkteam {
    /// <p>The total number of data objects labeled by a human worker.</p>
    #[doc(hidden)]
    pub human_labeled: i32,
    /// <p>The total number of data objects that need to be labeled by a human worker.</p>
    #[doc(hidden)]
    pub pending_human: i32,
    /// <p>The total number of tasks in the labeling job.</p>
    #[doc(hidden)]
    pub total: i32,
}
impl LabelCountersForWorkteam {
    /// <p>The total number of data objects labeled by a human worker.</p>
    pub fn human_labeled(&self) -> i32 {
        self.human_labeled
    }
    /// <p>The total number of data objects that need to be labeled by a human worker.</p>
    pub fn pending_human(&self) -> i32 {
        self.pending_human
    }
    /// <p>The total number of tasks in the labeling job.</p>
    pub fn total(&self) -> i32 {
        self.total
    }
}
impl LabelCountersForWorkteam {
    /// Creates a new builder-style object to manufacture [`LabelCountersForWorkteam`](crate::types::LabelCountersForWorkteam).
    pub fn builder() -> crate::types::builders::LabelCountersForWorkteamBuilder {
        crate::types::builders::LabelCountersForWorkteamBuilder::default()
    }
}

/// A builder for [`LabelCountersForWorkteam`](crate::types::LabelCountersForWorkteam).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LabelCountersForWorkteamBuilder {
    pub(crate) human_labeled: std::option::Option<i32>,
    pub(crate) pending_human: std::option::Option<i32>,
    pub(crate) total: std::option::Option<i32>,
}
impl LabelCountersForWorkteamBuilder {
    /// <p>The total number of data objects labeled by a human worker.</p>
    pub fn human_labeled(mut self, input: i32) -> Self {
        self.human_labeled = Some(input);
        self
    }
    /// <p>The total number of data objects labeled by a human worker.</p>
    pub fn set_human_labeled(mut self, input: std::option::Option<i32>) -> Self {
        self.human_labeled = input;
        self
    }
    /// <p>The total number of data objects that need to be labeled by a human worker.</p>
    pub fn pending_human(mut self, input: i32) -> Self {
        self.pending_human = Some(input);
        self
    }
    /// <p>The total number of data objects that need to be labeled by a human worker.</p>
    pub fn set_pending_human(mut self, input: std::option::Option<i32>) -> Self {
        self.pending_human = input;
        self
    }
    /// <p>The total number of tasks in the labeling job.</p>
    pub fn total(mut self, input: i32) -> Self {
        self.total = Some(input);
        self
    }
    /// <p>The total number of tasks in the labeling job.</p>
    pub fn set_total(mut self, input: std::option::Option<i32>) -> Self {
        self.total = input;
        self
    }
    /// Consumes the builder and constructs a [`LabelCountersForWorkteam`](crate::types::LabelCountersForWorkteam).
    pub fn build(self) -> crate::types::LabelCountersForWorkteam {
        crate::types::LabelCountersForWorkteam {
            human_labeled: self.human_labeled.unwrap_or_default(),
            pending_human: self.pending_human.unwrap_or_default(),
            total: self.total.unwrap_or_default(),
        }
    }
}
