// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a file system data source for a channel.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileSystemDataSource {
    /// <p>The file system id.</p>
    pub file_system_id: ::std::option::Option<::std::string::String>,
    /// <p>The access mode of the mount of the directory associated with the channel. A directory can be mounted either in <code>ro</code> (read-only) or <code>rw</code> (read-write) mode.</p>
    pub file_system_access_mode: ::std::option::Option<crate::types::FileSystemAccessMode>,
    /// <p>The file system type. </p>
    pub file_system_type: ::std::option::Option<crate::types::FileSystemType>,
    /// <p>The full path to the directory to associate with the channel.</p>
    pub directory_path: ::std::option::Option<::std::string::String>,
}
impl FileSystemDataSource {
    /// <p>The file system id.</p>
    pub fn file_system_id(&self) -> ::std::option::Option<&str> {
        self.file_system_id.as_deref()
    }
    /// <p>The access mode of the mount of the directory associated with the channel. A directory can be mounted either in <code>ro</code> (read-only) or <code>rw</code> (read-write) mode.</p>
    pub fn file_system_access_mode(&self) -> ::std::option::Option<&crate::types::FileSystemAccessMode> {
        self.file_system_access_mode.as_ref()
    }
    /// <p>The file system type. </p>
    pub fn file_system_type(&self) -> ::std::option::Option<&crate::types::FileSystemType> {
        self.file_system_type.as_ref()
    }
    /// <p>The full path to the directory to associate with the channel.</p>
    pub fn directory_path(&self) -> ::std::option::Option<&str> {
        self.directory_path.as_deref()
    }
}
impl FileSystemDataSource {
    /// Creates a new builder-style object to manufacture [`FileSystemDataSource`](crate::types::FileSystemDataSource).
    pub fn builder() -> crate::types::builders::FileSystemDataSourceBuilder {
        crate::types::builders::FileSystemDataSourceBuilder::default()
    }
}

/// A builder for [`FileSystemDataSource`](crate::types::FileSystemDataSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FileSystemDataSourceBuilder {
    pub(crate) file_system_id: ::std::option::Option<::std::string::String>,
    pub(crate) file_system_access_mode: ::std::option::Option<crate::types::FileSystemAccessMode>,
    pub(crate) file_system_type: ::std::option::Option<crate::types::FileSystemType>,
    pub(crate) directory_path: ::std::option::Option<::std::string::String>,
}
impl FileSystemDataSourceBuilder {
    /// <p>The file system id.</p>
    /// This field is required.
    pub fn file_system_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_system_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file system id.</p>
    pub fn set_file_system_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_system_id = input;
        self
    }
    /// <p>The file system id.</p>
    pub fn get_file_system_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_system_id
    }
    /// <p>The access mode of the mount of the directory associated with the channel. A directory can be mounted either in <code>ro</code> (read-only) or <code>rw</code> (read-write) mode.</p>
    /// This field is required.
    pub fn file_system_access_mode(mut self, input: crate::types::FileSystemAccessMode) -> Self {
        self.file_system_access_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The access mode of the mount of the directory associated with the channel. A directory can be mounted either in <code>ro</code> (read-only) or <code>rw</code> (read-write) mode.</p>
    pub fn set_file_system_access_mode(mut self, input: ::std::option::Option<crate::types::FileSystemAccessMode>) -> Self {
        self.file_system_access_mode = input;
        self
    }
    /// <p>The access mode of the mount of the directory associated with the channel. A directory can be mounted either in <code>ro</code> (read-only) or <code>rw</code> (read-write) mode.</p>
    pub fn get_file_system_access_mode(&self) -> &::std::option::Option<crate::types::FileSystemAccessMode> {
        &self.file_system_access_mode
    }
    /// <p>The file system type. </p>
    /// This field is required.
    pub fn file_system_type(mut self, input: crate::types::FileSystemType) -> Self {
        self.file_system_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file system type. </p>
    pub fn set_file_system_type(mut self, input: ::std::option::Option<crate::types::FileSystemType>) -> Self {
        self.file_system_type = input;
        self
    }
    /// <p>The file system type. </p>
    pub fn get_file_system_type(&self) -> &::std::option::Option<crate::types::FileSystemType> {
        &self.file_system_type
    }
    /// <p>The full path to the directory to associate with the channel.</p>
    /// This field is required.
    pub fn directory_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full path to the directory to associate with the channel.</p>
    pub fn set_directory_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_path = input;
        self
    }
    /// <p>The full path to the directory to associate with the channel.</p>
    pub fn get_directory_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_path
    }
    /// Consumes the builder and constructs a [`FileSystemDataSource`](crate::types::FileSystemDataSource).
    pub fn build(self) -> crate::types::FileSystemDataSource {
        crate::types::FileSystemDataSource {
            file_system_id: self.file_system_id,
            file_system_access_mode: self.file_system_access_mode,
            file_system_type: self.file_system_type,
            directory_path: self.directory_path,
        }
    }
}
