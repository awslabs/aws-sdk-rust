// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resolved attributes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResolvedAttributes {
    /// <p>Specifies a metric to minimize or maximize as the objective of a job.</p>
    #[doc(hidden)]
    pub auto_ml_job_objective: std::option::Option<crate::types::AutoMlJobObjective>,
    /// <p>The problem type.</p>
    #[doc(hidden)]
    pub problem_type: std::option::Option<crate::types::ProblemType>,
    /// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
    #[doc(hidden)]
    pub completion_criteria: std::option::Option<crate::types::AutoMlJobCompletionCriteria>,
}
impl ResolvedAttributes {
    /// <p>Specifies a metric to minimize or maximize as the objective of a job.</p>
    pub fn auto_ml_job_objective(&self) -> std::option::Option<&crate::types::AutoMlJobObjective> {
        self.auto_ml_job_objective.as_ref()
    }
    /// <p>The problem type.</p>
    pub fn problem_type(&self) -> std::option::Option<&crate::types::ProblemType> {
        self.problem_type.as_ref()
    }
    /// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
    pub fn completion_criteria(
        &self,
    ) -> std::option::Option<&crate::types::AutoMlJobCompletionCriteria> {
        self.completion_criteria.as_ref()
    }
}
impl ResolvedAttributes {
    /// Creates a new builder-style object to manufacture [`ResolvedAttributes`](crate::types::ResolvedAttributes).
    pub fn builder() -> crate::types::builders::ResolvedAttributesBuilder {
        crate::types::builders::ResolvedAttributesBuilder::default()
    }
}

/// A builder for [`ResolvedAttributes`](crate::types::ResolvedAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResolvedAttributesBuilder {
    pub(crate) auto_ml_job_objective: std::option::Option<crate::types::AutoMlJobObjective>,
    pub(crate) problem_type: std::option::Option<crate::types::ProblemType>,
    pub(crate) completion_criteria: std::option::Option<crate::types::AutoMlJobCompletionCriteria>,
}
impl ResolvedAttributesBuilder {
    /// <p>Specifies a metric to minimize or maximize as the objective of a job.</p>
    pub fn auto_ml_job_objective(mut self, input: crate::types::AutoMlJobObjective) -> Self {
        self.auto_ml_job_objective = Some(input);
        self
    }
    /// <p>Specifies a metric to minimize or maximize as the objective of a job.</p>
    pub fn set_auto_ml_job_objective(
        mut self,
        input: std::option::Option<crate::types::AutoMlJobObjective>,
    ) -> Self {
        self.auto_ml_job_objective = input;
        self
    }
    /// <p>The problem type.</p>
    pub fn problem_type(mut self, input: crate::types::ProblemType) -> Self {
        self.problem_type = Some(input);
        self
    }
    /// <p>The problem type.</p>
    pub fn set_problem_type(
        mut self,
        input: std::option::Option<crate::types::ProblemType>,
    ) -> Self {
        self.problem_type = input;
        self
    }
    /// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
    pub fn completion_criteria(mut self, input: crate::types::AutoMlJobCompletionCriteria) -> Self {
        self.completion_criteria = Some(input);
        self
    }
    /// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
    pub fn set_completion_criteria(
        mut self,
        input: std::option::Option<crate::types::AutoMlJobCompletionCriteria>,
    ) -> Self {
        self.completion_criteria = input;
        self
    }
    /// Consumes the builder and constructs a [`ResolvedAttributes`](crate::types::ResolvedAttributes).
    pub fn build(self) -> crate::types::ResolvedAttributes {
        crate::types::ResolvedAttributes {
            auto_ml_job_objective: self.auto_ml_job_objective,
            problem_type: self.problem_type,
            completion_criteria: self.completion_criteria,
        }
    }
}
