// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of algorithms that were used to create a model package.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceAlgorithmSpecification {
    /// <p>A list of the algorithms that were used to create a model package.</p>
    pub source_algorithms: ::std::option::Option<::std::vec::Vec<crate::types::SourceAlgorithm>>,
}
impl SourceAlgorithmSpecification {
    /// <p>A list of the algorithms that were used to create a model package.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_algorithms.is_none()`.
    pub fn source_algorithms(&self) -> &[crate::types::SourceAlgorithm] {
        self.source_algorithms.as_deref().unwrap_or_default()
    }
}
impl SourceAlgorithmSpecification {
    /// Creates a new builder-style object to manufacture [`SourceAlgorithmSpecification`](crate::types::SourceAlgorithmSpecification).
    pub fn builder() -> crate::types::builders::SourceAlgorithmSpecificationBuilder {
        crate::types::builders::SourceAlgorithmSpecificationBuilder::default()
    }
}

/// A builder for [`SourceAlgorithmSpecification`](crate::types::SourceAlgorithmSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SourceAlgorithmSpecificationBuilder {
    pub(crate) source_algorithms: ::std::option::Option<::std::vec::Vec<crate::types::SourceAlgorithm>>,
}
impl SourceAlgorithmSpecificationBuilder {
    /// Appends an item to `source_algorithms`.
    ///
    /// To override the contents of this collection use [`set_source_algorithms`](Self::set_source_algorithms).
    ///
    /// <p>A list of the algorithms that were used to create a model package.</p>
    pub fn source_algorithms(mut self, input: crate::types::SourceAlgorithm) -> Self {
        let mut v = self.source_algorithms.unwrap_or_default();
        v.push(input);
        self.source_algorithms = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the algorithms that were used to create a model package.</p>
    pub fn set_source_algorithms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SourceAlgorithm>>) -> Self {
        self.source_algorithms = input;
        self
    }
    /// <p>A list of the algorithms that were used to create a model package.</p>
    pub fn get_source_algorithms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SourceAlgorithm>> {
        &self.source_algorithms
    }
    /// Consumes the builder and constructs a [`SourceAlgorithmSpecification`](crate::types::SourceAlgorithmSpecification).
    pub fn build(self) -> crate::types::SourceAlgorithmSpecification {
        crate::types::SourceAlgorithmSpecification {
            source_algorithms: self.source_algorithms,
        }
    }
}
