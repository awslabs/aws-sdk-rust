// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of features. You must include <code>FeatureName</code> and <code>FeatureType</code>. Valid feature <code>FeatureType</code>s are <code>Integral</code>, <code>Fractional</code> and <code>String</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FeatureDefinition {
    /// <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code>.</p>
    #[doc(hidden)]
    pub feature_name: std::option::Option<std::string::String>,
    /// <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
    #[doc(hidden)]
    pub feature_type: std::option::Option<crate::types::FeatureType>,
}
impl FeatureDefinition {
    /// <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code>.</p>
    pub fn feature_name(&self) -> std::option::Option<&str> {
        self.feature_name.as_deref()
    }
    /// <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
    pub fn feature_type(&self) -> std::option::Option<&crate::types::FeatureType> {
        self.feature_type.as_ref()
    }
}
impl FeatureDefinition {
    /// Creates a new builder-style object to manufacture [`FeatureDefinition`](crate::types::FeatureDefinition).
    pub fn builder() -> crate::types::builders::FeatureDefinitionBuilder {
        crate::types::builders::FeatureDefinitionBuilder::default()
    }
}

/// A builder for [`FeatureDefinition`](crate::types::FeatureDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FeatureDefinitionBuilder {
    pub(crate) feature_name: std::option::Option<std::string::String>,
    pub(crate) feature_type: std::option::Option<crate::types::FeatureType>,
}
impl FeatureDefinitionBuilder {
    /// <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code>.</p>
    pub fn feature_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.feature_name = Some(input.into());
        self
    }
    /// <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code>.</p>
    pub fn set_feature_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.feature_name = input;
        self
    }
    /// <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
    pub fn feature_type(mut self, input: crate::types::FeatureType) -> Self {
        self.feature_type = Some(input);
        self
    }
    /// <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
    pub fn set_feature_type(
        mut self,
        input: std::option::Option<crate::types::FeatureType>,
    ) -> Self {
        self.feature_type = input;
        self
    }
    /// Consumes the builder and constructs a [`FeatureDefinition`](crate::types::FeatureDefinition).
    pub fn build(self) -> crate::types::FeatureDefinition {
        crate::types::FeatureDefinition {
            feature_name: self.feature_name,
            feature_type: self.feature_type,
        }
    }
}
