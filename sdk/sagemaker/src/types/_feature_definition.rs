// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of features. You must include <code>FeatureName</code> and <code>FeatureType</code>. Valid feature <code>FeatureType</code>s are <code>Integral</code>, <code>Fractional</code> and <code>String</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FeatureDefinition {
    /// <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code>.</p>
    /// <p>The name:</p>
    /// <ul>
    /// <li>
    /// <p>Must start with an alphanumeric character.</p></li>
    /// <li>
    /// <p>Can only include alphanumeric characters, underscores, and hyphens. Spaces are not allowed.</p></li>
    /// </ul>
    pub feature_name: ::std::option::Option<::std::string::String>,
    /// <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
    pub feature_type: ::std::option::Option<crate::types::FeatureType>,
    /// <p>A grouping of elements where each element within the collection must have the same feature type (<code>String</code>, <code>Integral</code>, or <code>Fractional</code>).</p>
    /// <ul>
    /// <li>
    /// <p><code>List</code>: An ordered collection of elements.</p></li>
    /// <li>
    /// <p><code>Set</code>: An unordered collection of unique elements.</p></li>
    /// <li>
    /// <p><code>Vector</code>: A specialized list that represents a fixed-size array of elements. The vector dimension is determined by you. Must have elements with fractional feature types.</p></li>
    /// </ul>
    pub collection_type: ::std::option::Option<crate::types::CollectionType>,
    /// <p>Configuration for your collection.</p>
    pub collection_config: ::std::option::Option<crate::types::CollectionConfig>,
}
impl FeatureDefinition {
    /// <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code>.</p>
    /// <p>The name:</p>
    /// <ul>
    /// <li>
    /// <p>Must start with an alphanumeric character.</p></li>
    /// <li>
    /// <p>Can only include alphanumeric characters, underscores, and hyphens. Spaces are not allowed.</p></li>
    /// </ul>
    pub fn feature_name(&self) -> ::std::option::Option<&str> {
        self.feature_name.as_deref()
    }
    /// <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
    pub fn feature_type(&self) -> ::std::option::Option<&crate::types::FeatureType> {
        self.feature_type.as_ref()
    }
    /// <p>A grouping of elements where each element within the collection must have the same feature type (<code>String</code>, <code>Integral</code>, or <code>Fractional</code>).</p>
    /// <ul>
    /// <li>
    /// <p><code>List</code>: An ordered collection of elements.</p></li>
    /// <li>
    /// <p><code>Set</code>: An unordered collection of unique elements.</p></li>
    /// <li>
    /// <p><code>Vector</code>: A specialized list that represents a fixed-size array of elements. The vector dimension is determined by you. Must have elements with fractional feature types.</p></li>
    /// </ul>
    pub fn collection_type(&self) -> ::std::option::Option<&crate::types::CollectionType> {
        self.collection_type.as_ref()
    }
    /// <p>Configuration for your collection.</p>
    pub fn collection_config(&self) -> ::std::option::Option<&crate::types::CollectionConfig> {
        self.collection_config.as_ref()
    }
}
impl FeatureDefinition {
    /// Creates a new builder-style object to manufacture [`FeatureDefinition`](crate::types::FeatureDefinition).
    pub fn builder() -> crate::types::builders::FeatureDefinitionBuilder {
        crate::types::builders::FeatureDefinitionBuilder::default()
    }
}

/// A builder for [`FeatureDefinition`](crate::types::FeatureDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FeatureDefinitionBuilder {
    pub(crate) feature_name: ::std::option::Option<::std::string::String>,
    pub(crate) feature_type: ::std::option::Option<crate::types::FeatureType>,
    pub(crate) collection_type: ::std::option::Option<crate::types::CollectionType>,
    pub(crate) collection_config: ::std::option::Option<crate::types::CollectionConfig>,
}
impl FeatureDefinitionBuilder {
    /// <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code>.</p>
    /// <p>The name:</p>
    /// <ul>
    /// <li>
    /// <p>Must start with an alphanumeric character.</p></li>
    /// <li>
    /// <p>Can only include alphanumeric characters, underscores, and hyphens. Spaces are not allowed.</p></li>
    /// </ul>
    /// This field is required.
    pub fn feature_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feature_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code>.</p>
    /// <p>The name:</p>
    /// <ul>
    /// <li>
    /// <p>Must start with an alphanumeric character.</p></li>
    /// <li>
    /// <p>Can only include alphanumeric characters, underscores, and hyphens. Spaces are not allowed.</p></li>
    /// </ul>
    pub fn set_feature_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feature_name = input;
        self
    }
    /// <p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any of the following: <code>is_deleted</code>, <code>write_time</code>, <code>api_invocation_time</code>.</p>
    /// <p>The name:</p>
    /// <ul>
    /// <li>
    /// <p>Must start with an alphanumeric character.</p></li>
    /// <li>
    /// <p>Can only include alphanumeric characters, underscores, and hyphens. Spaces are not allowed.</p></li>
    /// </ul>
    pub fn get_feature_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.feature_name
    }
    /// <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
    /// This field is required.
    pub fn feature_type(mut self, input: crate::types::FeatureType) -> Self {
        self.feature_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
    pub fn set_feature_type(mut self, input: ::std::option::Option<crate::types::FeatureType>) -> Self {
        self.feature_type = input;
        self
    }
    /// <p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>
    pub fn get_feature_type(&self) -> &::std::option::Option<crate::types::FeatureType> {
        &self.feature_type
    }
    /// <p>A grouping of elements where each element within the collection must have the same feature type (<code>String</code>, <code>Integral</code>, or <code>Fractional</code>).</p>
    /// <ul>
    /// <li>
    /// <p><code>List</code>: An ordered collection of elements.</p></li>
    /// <li>
    /// <p><code>Set</code>: An unordered collection of unique elements.</p></li>
    /// <li>
    /// <p><code>Vector</code>: A specialized list that represents a fixed-size array of elements. The vector dimension is determined by you. Must have elements with fractional feature types.</p></li>
    /// </ul>
    pub fn collection_type(mut self, input: crate::types::CollectionType) -> Self {
        self.collection_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>A grouping of elements where each element within the collection must have the same feature type (<code>String</code>, <code>Integral</code>, or <code>Fractional</code>).</p>
    /// <ul>
    /// <li>
    /// <p><code>List</code>: An ordered collection of elements.</p></li>
    /// <li>
    /// <p><code>Set</code>: An unordered collection of unique elements.</p></li>
    /// <li>
    /// <p><code>Vector</code>: A specialized list that represents a fixed-size array of elements. The vector dimension is determined by you. Must have elements with fractional feature types.</p></li>
    /// </ul>
    pub fn set_collection_type(mut self, input: ::std::option::Option<crate::types::CollectionType>) -> Self {
        self.collection_type = input;
        self
    }
    /// <p>A grouping of elements where each element within the collection must have the same feature type (<code>String</code>, <code>Integral</code>, or <code>Fractional</code>).</p>
    /// <ul>
    /// <li>
    /// <p><code>List</code>: An ordered collection of elements.</p></li>
    /// <li>
    /// <p><code>Set</code>: An unordered collection of unique elements.</p></li>
    /// <li>
    /// <p><code>Vector</code>: A specialized list that represents a fixed-size array of elements. The vector dimension is determined by you. Must have elements with fractional feature types.</p></li>
    /// </ul>
    pub fn get_collection_type(&self) -> &::std::option::Option<crate::types::CollectionType> {
        &self.collection_type
    }
    /// <p>Configuration for your collection.</p>
    pub fn collection_config(mut self, input: crate::types::CollectionConfig) -> Self {
        self.collection_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for your collection.</p>
    pub fn set_collection_config(mut self, input: ::std::option::Option<crate::types::CollectionConfig>) -> Self {
        self.collection_config = input;
        self
    }
    /// <p>Configuration for your collection.</p>
    pub fn get_collection_config(&self) -> &::std::option::Option<crate::types::CollectionConfig> {
        &self.collection_config
    }
    /// Consumes the builder and constructs a [`FeatureDefinition`](crate::types::FeatureDefinition).
    pub fn build(self) -> crate::types::FeatureDefinition {
        crate::types::FeatureDefinition {
            feature_name: self.feature_name,
            feature_type: self.feature_type,
            collection_type: self.collection_type,
            collection_config: self.collection_config,
        }
    }
}
