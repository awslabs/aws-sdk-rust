// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies additional configuration for hosting multi-model endpoints.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MultiModelConfig {
    /// <p>Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to <code>Disabled</code>.</p>
    #[doc(hidden)]
    pub model_cache_setting: std::option::Option<crate::types::ModelCacheSetting>,
}
impl MultiModelConfig {
    /// <p>Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to <code>Disabled</code>.</p>
    pub fn model_cache_setting(&self) -> std::option::Option<&crate::types::ModelCacheSetting> {
        self.model_cache_setting.as_ref()
    }
}
impl MultiModelConfig {
    /// Creates a new builder-style object to manufacture [`MultiModelConfig`](crate::types::MultiModelConfig).
    pub fn builder() -> crate::types::builders::MultiModelConfigBuilder {
        crate::types::builders::MultiModelConfigBuilder::default()
    }
}

/// A builder for [`MultiModelConfig`](crate::types::MultiModelConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MultiModelConfigBuilder {
    pub(crate) model_cache_setting: std::option::Option<crate::types::ModelCacheSetting>,
}
impl MultiModelConfigBuilder {
    /// <p>Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to <code>Disabled</code>.</p>
    pub fn model_cache_setting(mut self, input: crate::types::ModelCacheSetting) -> Self {
        self.model_cache_setting = Some(input);
        self
    }
    /// <p>Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to <code>Disabled</code>.</p>
    pub fn set_model_cache_setting(
        mut self,
        input: std::option::Option<crate::types::ModelCacheSetting>,
    ) -> Self {
        self.model_cache_setting = input;
        self
    }
    /// Consumes the builder and constructs a [`MultiModelConfig`](crate::types::MultiModelConfig).
    pub fn build(self) -> crate::types::MultiModelConfig {
        crate::types::MultiModelConfig {
            model_cache_setting: self.model_cache_setting,
        }
    }
}
