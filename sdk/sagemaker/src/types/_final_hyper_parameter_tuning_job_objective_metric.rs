// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Shows the latest objective metric emitted by a training job that was launched by a hyperparameter tuning job. You define the objective metric in the <code>HyperParameterTuningJobObjective</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">HyperParameterTuningJobConfig</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FinalHyperParameterTuningJobObjectiveMetric {
    /// <p>Select if you want to minimize or maximize the objective metric during hyperparameter tuning. </p>
    pub r#type: ::std::option::Option<crate::types::HyperParameterTuningJobObjectiveType>,
    /// <p>The name of the objective metric. For SageMaker built-in algorithms, metrics are defined per algorithm. See the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xgboost-tuning.html">metrics for XGBoost</a> as an example. You can also use a custom algorithm for training and define your own metrics. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html">Define metrics and environment variables</a>.</p>
    pub metric_name: ::std::option::Option<::std::string::String>,
    /// <p>The value of the objective metric.</p>
    pub value: ::std::option::Option<f32>,
}
impl FinalHyperParameterTuningJobObjectiveMetric {
    /// <p>Select if you want to minimize or maximize the objective metric during hyperparameter tuning. </p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::HyperParameterTuningJobObjectiveType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the objective metric. For SageMaker built-in algorithms, metrics are defined per algorithm. See the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xgboost-tuning.html">metrics for XGBoost</a> as an example. You can also use a custom algorithm for training and define your own metrics. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html">Define metrics and environment variables</a>.</p>
    pub fn metric_name(&self) -> ::std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The value of the objective metric.</p>
    pub fn value(&self) -> ::std::option::Option<f32> {
        self.value
    }
}
impl FinalHyperParameterTuningJobObjectiveMetric {
    /// Creates a new builder-style object to manufacture [`FinalHyperParameterTuningJobObjectiveMetric`](crate::types::FinalHyperParameterTuningJobObjectiveMetric).
    pub fn builder() -> crate::types::builders::FinalHyperParameterTuningJobObjectiveMetricBuilder {
        crate::types::builders::FinalHyperParameterTuningJobObjectiveMetricBuilder::default()
    }
}

/// A builder for [`FinalHyperParameterTuningJobObjectiveMetric`](crate::types::FinalHyperParameterTuningJobObjectiveMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FinalHyperParameterTuningJobObjectiveMetricBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::HyperParameterTuningJobObjectiveType>,
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<f32>,
}
impl FinalHyperParameterTuningJobObjectiveMetricBuilder {
    /// <p>Select if you want to minimize or maximize the objective metric during hyperparameter tuning. </p>
    pub fn r#type(mut self, input: crate::types::HyperParameterTuningJobObjectiveType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Select if you want to minimize or maximize the objective metric during hyperparameter tuning. </p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::HyperParameterTuningJobObjectiveType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Select if you want to minimize or maximize the objective metric during hyperparameter tuning. </p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::HyperParameterTuningJobObjectiveType> {
        &self.r#type
    }
    /// <p>The name of the objective metric. For SageMaker built-in algorithms, metrics are defined per algorithm. See the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xgboost-tuning.html">metrics for XGBoost</a> as an example. You can also use a custom algorithm for training and define your own metrics. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html">Define metrics and environment variables</a>.</p>
    /// This field is required.
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the objective metric. For SageMaker built-in algorithms, metrics are defined per algorithm. See the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xgboost-tuning.html">metrics for XGBoost</a> as an example. You can also use a custom algorithm for training and define your own metrics. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html">Define metrics and environment variables</a>.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the objective metric. For SageMaker built-in algorithms, metrics are defined per algorithm. See the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xgboost-tuning.html">metrics for XGBoost</a> as an example. You can also use a custom algorithm for training and define your own metrics. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html">Define metrics and environment variables</a>.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// <p>The value of the objective metric.</p>
    /// This field is required.
    pub fn value(mut self, input: f32) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the objective metric.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f32>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the objective metric.</p>
    pub fn get_value(&self) -> &::std::option::Option<f32> {
        &self.value
    }
    /// Consumes the builder and constructs a [`FinalHyperParameterTuningJobObjectiveMetric`](crate::types::FinalHyperParameterTuningJobObjectiveMetric).
    pub fn build(self) -> crate::types::FinalHyperParameterTuningJobObjectiveMetric {
        crate::types::FinalHyperParameterTuningJobObjectiveMetric {
            r#type: self.r#type,
            metric_name: self.metric_name,
            value: self.value,
        }
    }
}
