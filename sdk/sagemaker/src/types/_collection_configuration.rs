// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for the Amazon SageMaker Debugger output tensor collections.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CollectionConfiguration {
    /// <p>The name of the tensor collection. The name must be unique relative to other rule configuration names.</p>
    #[doc(hidden)]
    pub collection_name: std::option::Option<std::string::String>,
    /// <p>Parameter values for the tensor collection. The allowed parameters are <code>"name"</code>, <code>"include_regex"</code>, <code>"reduction_config"</code>, <code>"save_config"</code>, <code>"tensor_names"</code>, and <code>"save_histogram"</code>.</p>
    #[doc(hidden)]
    pub collection_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CollectionConfiguration {
    /// <p>The name of the tensor collection. The name must be unique relative to other rule configuration names.</p>
    pub fn collection_name(&self) -> std::option::Option<&str> {
        self.collection_name.as_deref()
    }
    /// <p>Parameter values for the tensor collection. The allowed parameters are <code>"name"</code>, <code>"include_regex"</code>, <code>"reduction_config"</code>, <code>"save_config"</code>, <code>"tensor_names"</code>, and <code>"save_histogram"</code>.</p>
    pub fn collection_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.collection_parameters.as_ref()
    }
}
impl CollectionConfiguration {
    /// Creates a new builder-style object to manufacture [`CollectionConfiguration`](crate::types::CollectionConfiguration).
    pub fn builder() -> crate::types::builders::CollectionConfigurationBuilder {
        crate::types::builders::CollectionConfigurationBuilder::default()
    }
}

/// A builder for [`CollectionConfiguration`](crate::types::CollectionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CollectionConfigurationBuilder {
    pub(crate) collection_name: std::option::Option<std::string::String>,
    pub(crate) collection_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CollectionConfigurationBuilder {
    /// <p>The name of the tensor collection. The name must be unique relative to other rule configuration names.</p>
    pub fn collection_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.collection_name = Some(input.into());
        self
    }
    /// <p>The name of the tensor collection. The name must be unique relative to other rule configuration names.</p>
    pub fn set_collection_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.collection_name = input;
        self
    }
    /// Adds a key-value pair to `collection_parameters`.
    ///
    /// To override the contents of this collection use [`set_collection_parameters`](Self::set_collection_parameters).
    ///
    /// <p>Parameter values for the tensor collection. The allowed parameters are <code>"name"</code>, <code>"include_regex"</code>, <code>"reduction_config"</code>, <code>"save_config"</code>, <code>"tensor_names"</code>, and <code>"save_histogram"</code>.</p>
    pub fn collection_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.collection_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.collection_parameters = Some(hash_map);
        self
    }
    /// <p>Parameter values for the tensor collection. The allowed parameters are <code>"name"</code>, <code>"include_regex"</code>, <code>"reduction_config"</code>, <code>"save_config"</code>, <code>"tensor_names"</code>, and <code>"save_histogram"</code>.</p>
    pub fn set_collection_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.collection_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`CollectionConfiguration`](crate::types::CollectionConfiguration).
    pub fn build(self) -> crate::types::CollectionConfiguration {
        crate::types::CollectionConfiguration {
            collection_name: self.collection_name,
            collection_parameters: self.collection_parameters,
        }
    }
}
