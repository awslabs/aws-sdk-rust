// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies data Model Monitor will capture.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CaptureOption {
    /// <p>Specify the boundary of data to capture.</p>
    pub capture_mode: ::std::option::Option<crate::types::CaptureMode>,
}
impl CaptureOption {
    /// <p>Specify the boundary of data to capture.</p>
    pub fn capture_mode(&self) -> ::std::option::Option<&crate::types::CaptureMode> {
        self.capture_mode.as_ref()
    }
}
impl CaptureOption {
    /// Creates a new builder-style object to manufacture [`CaptureOption`](crate::types::CaptureOption).
    pub fn builder() -> crate::types::builders::CaptureOptionBuilder {
        crate::types::builders::CaptureOptionBuilder::default()
    }
}

/// A builder for [`CaptureOption`](crate::types::CaptureOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CaptureOptionBuilder {
    pub(crate) capture_mode: ::std::option::Option<crate::types::CaptureMode>,
}
impl CaptureOptionBuilder {
    /// <p>Specify the boundary of data to capture.</p>
    /// This field is required.
    pub fn capture_mode(mut self, input: crate::types::CaptureMode) -> Self {
        self.capture_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the boundary of data to capture.</p>
    pub fn set_capture_mode(mut self, input: ::std::option::Option<crate::types::CaptureMode>) -> Self {
        self.capture_mode = input;
        self
    }
    /// <p>Specify the boundary of data to capture.</p>
    pub fn get_capture_mode(&self) -> &::std::option::Option<crate::types::CaptureMode> {
        &self.capture_mode
    }
    /// Consumes the builder and constructs a [`CaptureOption`](crate::types::CaptureOption).
    pub fn build(self) -> crate::types::CaptureOption {
        crate::types::CaptureOption {
            capture_mode: self.capture_mode,
        }
    }
}
