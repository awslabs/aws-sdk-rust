// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies configuration for how an endpoint performs asynchronous inference.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AsyncInferenceConfig {
    /// <p>Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.</p>
    pub client_config: ::std::option::Option<crate::types::AsyncInferenceClientConfig>,
    /// <p>Specifies the configuration for asynchronous inference invocation outputs.</p>
    pub output_config: ::std::option::Option<crate::types::AsyncInferenceOutputConfig>,
}
impl AsyncInferenceConfig {
    /// <p>Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.</p>
    pub fn client_config(&self) -> ::std::option::Option<&crate::types::AsyncInferenceClientConfig> {
        self.client_config.as_ref()
    }
    /// <p>Specifies the configuration for asynchronous inference invocation outputs.</p>
    pub fn output_config(&self) -> ::std::option::Option<&crate::types::AsyncInferenceOutputConfig> {
        self.output_config.as_ref()
    }
}
impl AsyncInferenceConfig {
    /// Creates a new builder-style object to manufacture [`AsyncInferenceConfig`](crate::types::AsyncInferenceConfig).
    pub fn builder() -> crate::types::builders::AsyncInferenceConfigBuilder {
        crate::types::builders::AsyncInferenceConfigBuilder::default()
    }
}

/// A builder for [`AsyncInferenceConfig`](crate::types::AsyncInferenceConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AsyncInferenceConfigBuilder {
    pub(crate) client_config: ::std::option::Option<crate::types::AsyncInferenceClientConfig>,
    pub(crate) output_config: ::std::option::Option<crate::types::AsyncInferenceOutputConfig>,
}
impl AsyncInferenceConfigBuilder {
    /// <p>Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.</p>
    pub fn client_config(mut self, input: crate::types::AsyncInferenceClientConfig) -> Self {
        self.client_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.</p>
    pub fn set_client_config(mut self, input: ::std::option::Option<crate::types::AsyncInferenceClientConfig>) -> Self {
        self.client_config = input;
        self
    }
    /// <p>Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.</p>
    pub fn get_client_config(&self) -> &::std::option::Option<crate::types::AsyncInferenceClientConfig> {
        &self.client_config
    }
    /// <p>Specifies the configuration for asynchronous inference invocation outputs.</p>
    /// This field is required.
    pub fn output_config(mut self, input: crate::types::AsyncInferenceOutputConfig) -> Self {
        self.output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the configuration for asynchronous inference invocation outputs.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::AsyncInferenceOutputConfig>) -> Self {
        self.output_config = input;
        self
    }
    /// <p>Specifies the configuration for asynchronous inference invocation outputs.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::AsyncInferenceOutputConfig> {
        &self.output_config
    }
    /// Consumes the builder and constructs a [`AsyncInferenceConfig`](crate::types::AsyncInferenceConfig).
    pub fn build(self) -> crate::types::AsyncInferenceConfig {
        crate::types::AsyncInferenceConfig {
            client_config: self.client_config,
            output_config: self.output_config,
        }
    }
}
