// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An execution of a step in a pipeline.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PipelineExecutionStep {
    /// <p>The name of the step that is executed.</p>
    #[doc(hidden)]
    pub step_name: std::option::Option<std::string::String>,
    /// <p>The display name of the step.</p>
    #[doc(hidden)]
    pub step_display_name: std::option::Option<std::string::String>,
    /// <p>The description of the step.</p>
    #[doc(hidden)]
    pub step_description: std::option::Option<std::string::String>,
    /// <p>The time that the step started executing.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time that the step stopped executing.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the step execution.</p>
    #[doc(hidden)]
    pub step_status: std::option::Option<crate::types::StepStatus>,
    /// <p>If this pipeline execution step was cached, details on the cache hit.</p>
    #[doc(hidden)]
    pub cache_hit_result: std::option::Option<crate::types::CacheHitResult>,
    /// <p>The current attempt of the execution step. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-retry-policy.html">Retry Policy for SageMaker Pipelines steps</a>.</p>
    #[doc(hidden)]
    pub attempt_count: i32,
    /// <p>The reason why the step failed execution. This is only returned if the step failed its execution.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>Metadata to run the pipeline step.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<crate::types::PipelineExecutionStepMetadata>,
}
impl PipelineExecutionStep {
    /// <p>The name of the step that is executed.</p>
    pub fn step_name(&self) -> std::option::Option<&str> {
        self.step_name.as_deref()
    }
    /// <p>The display name of the step.</p>
    pub fn step_display_name(&self) -> std::option::Option<&str> {
        self.step_display_name.as_deref()
    }
    /// <p>The description of the step.</p>
    pub fn step_description(&self) -> std::option::Option<&str> {
        self.step_description.as_deref()
    }
    /// <p>The time that the step started executing.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time that the step stopped executing.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The status of the step execution.</p>
    pub fn step_status(&self) -> std::option::Option<&crate::types::StepStatus> {
        self.step_status.as_ref()
    }
    /// <p>If this pipeline execution step was cached, details on the cache hit.</p>
    pub fn cache_hit_result(&self) -> std::option::Option<&crate::types::CacheHitResult> {
        self.cache_hit_result.as_ref()
    }
    /// <p>The current attempt of the execution step. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-retry-policy.html">Retry Policy for SageMaker Pipelines steps</a>.</p>
    pub fn attempt_count(&self) -> i32 {
        self.attempt_count
    }
    /// <p>The reason why the step failed execution. This is only returned if the step failed its execution.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>Metadata to run the pipeline step.</p>
    pub fn metadata(&self) -> std::option::Option<&crate::types::PipelineExecutionStepMetadata> {
        self.metadata.as_ref()
    }
}
impl PipelineExecutionStep {
    /// Creates a new builder-style object to manufacture [`PipelineExecutionStep`](crate::types::PipelineExecutionStep).
    pub fn builder() -> crate::types::builders::PipelineExecutionStepBuilder {
        crate::types::builders::PipelineExecutionStepBuilder::default()
    }
}

/// A builder for [`PipelineExecutionStep`](crate::types::PipelineExecutionStep).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PipelineExecutionStepBuilder {
    pub(crate) step_name: std::option::Option<std::string::String>,
    pub(crate) step_display_name: std::option::Option<std::string::String>,
    pub(crate) step_description: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) step_status: std::option::Option<crate::types::StepStatus>,
    pub(crate) cache_hit_result: std::option::Option<crate::types::CacheHitResult>,
    pub(crate) attempt_count: std::option::Option<i32>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) metadata: std::option::Option<crate::types::PipelineExecutionStepMetadata>,
}
impl PipelineExecutionStepBuilder {
    /// <p>The name of the step that is executed.</p>
    pub fn step_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.step_name = Some(input.into());
        self
    }
    /// <p>The name of the step that is executed.</p>
    pub fn set_step_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.step_name = input;
        self
    }
    /// <p>The display name of the step.</p>
    pub fn step_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.step_display_name = Some(input.into());
        self
    }
    /// <p>The display name of the step.</p>
    pub fn set_step_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.step_display_name = input;
        self
    }
    /// <p>The description of the step.</p>
    pub fn step_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.step_description = Some(input.into());
        self
    }
    /// <p>The description of the step.</p>
    pub fn set_step_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.step_description = input;
        self
    }
    /// <p>The time that the step started executing.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time that the step started executing.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time that the step stopped executing.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The time that the step stopped executing.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The status of the step execution.</p>
    pub fn step_status(mut self, input: crate::types::StepStatus) -> Self {
        self.step_status = Some(input);
        self
    }
    /// <p>The status of the step execution.</p>
    pub fn set_step_status(mut self, input: std::option::Option<crate::types::StepStatus>) -> Self {
        self.step_status = input;
        self
    }
    /// <p>If this pipeline execution step was cached, details on the cache hit.</p>
    pub fn cache_hit_result(mut self, input: crate::types::CacheHitResult) -> Self {
        self.cache_hit_result = Some(input);
        self
    }
    /// <p>If this pipeline execution step was cached, details on the cache hit.</p>
    pub fn set_cache_hit_result(
        mut self,
        input: std::option::Option<crate::types::CacheHitResult>,
    ) -> Self {
        self.cache_hit_result = input;
        self
    }
    /// <p>The current attempt of the execution step. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-retry-policy.html">Retry Policy for SageMaker Pipelines steps</a>.</p>
    pub fn attempt_count(mut self, input: i32) -> Self {
        self.attempt_count = Some(input);
        self
    }
    /// <p>The current attempt of the execution step. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-retry-policy.html">Retry Policy for SageMaker Pipelines steps</a>.</p>
    pub fn set_attempt_count(mut self, input: std::option::Option<i32>) -> Self {
        self.attempt_count = input;
        self
    }
    /// <p>The reason why the step failed execution. This is only returned if the step failed its execution.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The reason why the step failed execution. This is only returned if the step failed its execution.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>Metadata to run the pipeline step.</p>
    pub fn metadata(mut self, input: crate::types::PipelineExecutionStepMetadata) -> Self {
        self.metadata = Some(input);
        self
    }
    /// <p>Metadata to run the pipeline step.</p>
    pub fn set_metadata(
        mut self,
        input: std::option::Option<crate::types::PipelineExecutionStepMetadata>,
    ) -> Self {
        self.metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`PipelineExecutionStep`](crate::types::PipelineExecutionStep).
    pub fn build(self) -> crate::types::PipelineExecutionStep {
        crate::types::PipelineExecutionStep {
            step_name: self.step_name,
            step_display_name: self.step_display_name,
            step_description: self.step_description,
            start_time: self.start_time,
            end_time: self.end_time,
            step_status: self.step_status,
            cache_hit_result: self.cache_hit_result,
            attempt_count: self.attempt_count.unwrap_or_default(),
            failure_reason: self.failure_reason,
            metadata: self.metadata,
        }
    }
}
