// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of default EBS storage settings that apply to spaces created within a domain or user profile.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultEbsStorageSettings {
    /// <p>The default size of the EBS storage volume for a space.</p>
    pub default_ebs_volume_size_in_gb: ::std::option::Option<i32>,
    /// <p>The maximum size of the EBS storage volume for a space.</p>
    pub maximum_ebs_volume_size_in_gb: ::std::option::Option<i32>,
}
impl DefaultEbsStorageSettings {
    /// <p>The default size of the EBS storage volume for a space.</p>
    pub fn default_ebs_volume_size_in_gb(&self) -> ::std::option::Option<i32> {
        self.default_ebs_volume_size_in_gb
    }
    /// <p>The maximum size of the EBS storage volume for a space.</p>
    pub fn maximum_ebs_volume_size_in_gb(&self) -> ::std::option::Option<i32> {
        self.maximum_ebs_volume_size_in_gb
    }
}
impl DefaultEbsStorageSettings {
    /// Creates a new builder-style object to manufacture [`DefaultEbsStorageSettings`](crate::types::DefaultEbsStorageSettings).
    pub fn builder() -> crate::types::builders::DefaultEbsStorageSettingsBuilder {
        crate::types::builders::DefaultEbsStorageSettingsBuilder::default()
    }
}

/// A builder for [`DefaultEbsStorageSettings`](crate::types::DefaultEbsStorageSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultEbsStorageSettingsBuilder {
    pub(crate) default_ebs_volume_size_in_gb: ::std::option::Option<i32>,
    pub(crate) maximum_ebs_volume_size_in_gb: ::std::option::Option<i32>,
}
impl DefaultEbsStorageSettingsBuilder {
    /// <p>The default size of the EBS storage volume for a space.</p>
    /// This field is required.
    pub fn default_ebs_volume_size_in_gb(mut self, input: i32) -> Self {
        self.default_ebs_volume_size_in_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default size of the EBS storage volume for a space.</p>
    pub fn set_default_ebs_volume_size_in_gb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.default_ebs_volume_size_in_gb = input;
        self
    }
    /// <p>The default size of the EBS storage volume for a space.</p>
    pub fn get_default_ebs_volume_size_in_gb(&self) -> &::std::option::Option<i32> {
        &self.default_ebs_volume_size_in_gb
    }
    /// <p>The maximum size of the EBS storage volume for a space.</p>
    /// This field is required.
    pub fn maximum_ebs_volume_size_in_gb(mut self, input: i32) -> Self {
        self.maximum_ebs_volume_size_in_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum size of the EBS storage volume for a space.</p>
    pub fn set_maximum_ebs_volume_size_in_gb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_ebs_volume_size_in_gb = input;
        self
    }
    /// <p>The maximum size of the EBS storage volume for a space.</p>
    pub fn get_maximum_ebs_volume_size_in_gb(&self) -> &::std::option::Option<i32> {
        &self.maximum_ebs_volume_size_in_gb
    }
    /// Consumes the builder and constructs a [`DefaultEbsStorageSettings`](crate::types::DefaultEbsStorageSettings).
    pub fn build(self) -> crate::types::DefaultEbsStorageSettings {
        crate::types::DefaultEbsStorageSettings {
            default_ebs_volume_size_in_gb: self.default_ebs_volume_size_in_gb,
            maximum_ebs_volume_size_in_gb: self.maximum_ebs_volume_size_in_gb,
        }
    }
}
