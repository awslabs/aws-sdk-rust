// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides summary information of an alert's history.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitoringAlertHistorySummary {
    /// <p>The name of a monitoring schedule.</p>
    pub monitoring_schedule_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of a monitoring alert.</p>
    pub monitoring_alert_name: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp that indicates when the first alert transition occurred in an alert history. An alert transition can be from status <code>InAlert</code> to <code>OK</code>, or from <code>OK</code> to <code>InAlert</code>.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current alert status of an alert.</p>
    pub alert_status: ::std::option::Option<crate::types::MonitoringAlertStatus>,
}
impl MonitoringAlertHistorySummary {
    /// <p>The name of a monitoring schedule.</p>
    pub fn monitoring_schedule_name(&self) -> ::std::option::Option<&str> {
        self.monitoring_schedule_name.as_deref()
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn monitoring_alert_name(&self) -> ::std::option::Option<&str> {
        self.monitoring_alert_name.as_deref()
    }
    /// <p>A timestamp that indicates when the first alert transition occurred in an alert history. An alert transition can be from status <code>InAlert</code> to <code>OK</code>, or from <code>OK</code> to <code>InAlert</code>.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The current alert status of an alert.</p>
    pub fn alert_status(&self) -> ::std::option::Option<&crate::types::MonitoringAlertStatus> {
        self.alert_status.as_ref()
    }
}
impl MonitoringAlertHistorySummary {
    /// Creates a new builder-style object to manufacture [`MonitoringAlertHistorySummary`](crate::types::MonitoringAlertHistorySummary).
    pub fn builder() -> crate::types::builders::MonitoringAlertHistorySummaryBuilder {
        crate::types::builders::MonitoringAlertHistorySummaryBuilder::default()
    }
}

/// A builder for [`MonitoringAlertHistorySummary`](crate::types::MonitoringAlertHistorySummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MonitoringAlertHistorySummaryBuilder {
    pub(crate) monitoring_schedule_name: ::std::option::Option<::std::string::String>,
    pub(crate) monitoring_alert_name: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) alert_status: ::std::option::Option<crate::types::MonitoringAlertStatus>,
}
impl MonitoringAlertHistorySummaryBuilder {
    /// <p>The name of a monitoring schedule.</p>
    /// This field is required.
    pub fn monitoring_schedule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitoring_schedule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitoring_schedule_name = input;
        self
    }
    /// <p>The name of a monitoring schedule.</p>
    pub fn get_monitoring_schedule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitoring_schedule_name
    }
    /// <p>The name of a monitoring alert.</p>
    /// This field is required.
    pub fn monitoring_alert_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitoring_alert_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn set_monitoring_alert_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitoring_alert_name = input;
        self
    }
    /// <p>The name of a monitoring alert.</p>
    pub fn get_monitoring_alert_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitoring_alert_name
    }
    /// <p>A timestamp that indicates when the first alert transition occurred in an alert history. An alert transition can be from status <code>InAlert</code> to <code>OK</code>, or from <code>OK</code> to <code>InAlert</code>.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when the first alert transition occurred in an alert history. An alert transition can be from status <code>InAlert</code> to <code>OK</code>, or from <code>OK</code> to <code>InAlert</code>.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A timestamp that indicates when the first alert transition occurred in an alert history. An alert transition can be from status <code>InAlert</code> to <code>OK</code>, or from <code>OK</code> to <code>InAlert</code>.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The current alert status of an alert.</p>
    /// This field is required.
    pub fn alert_status(mut self, input: crate::types::MonitoringAlertStatus) -> Self {
        self.alert_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current alert status of an alert.</p>
    pub fn set_alert_status(mut self, input: ::std::option::Option<crate::types::MonitoringAlertStatus>) -> Self {
        self.alert_status = input;
        self
    }
    /// <p>The current alert status of an alert.</p>
    pub fn get_alert_status(&self) -> &::std::option::Option<crate::types::MonitoringAlertStatus> {
        &self.alert_status
    }
    /// Consumes the builder and constructs a [`MonitoringAlertHistorySummary`](crate::types::MonitoringAlertHistorySummary).
    pub fn build(self) -> crate::types::MonitoringAlertHistorySummary {
        crate::types::MonitoringAlertHistorySummary {
            monitoring_schedule_name: self.monitoring_schedule_name,
            monitoring_alert_name: self.monitoring_alert_name,
            creation_time: self.creation_time,
            alert_status: self.alert_status,
        }
    }
}
