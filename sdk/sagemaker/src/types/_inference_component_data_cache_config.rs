// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings that affect how the inference component caches data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InferenceComponentDataCacheConfig {
    /// <p>Sets whether the endpoint that hosts the inference component caches the model artifacts and container image.</p>
    /// <p>With caching enabled, the endpoint caches this data in each instance that it provisions for the inference component. That way, the inference component deploys faster during the auto scaling process. If caching isn't enabled, the inference component takes longer to deploy because of the time it spends downloading the data.</p>
    pub enable_caching: ::std::option::Option<bool>,
}
impl InferenceComponentDataCacheConfig {
    /// <p>Sets whether the endpoint that hosts the inference component caches the model artifacts and container image.</p>
    /// <p>With caching enabled, the endpoint caches this data in each instance that it provisions for the inference component. That way, the inference component deploys faster during the auto scaling process. If caching isn't enabled, the inference component takes longer to deploy because of the time it spends downloading the data.</p>
    pub fn enable_caching(&self) -> ::std::option::Option<bool> {
        self.enable_caching
    }
}
impl InferenceComponentDataCacheConfig {
    /// Creates a new builder-style object to manufacture [`InferenceComponentDataCacheConfig`](crate::types::InferenceComponentDataCacheConfig).
    pub fn builder() -> crate::types::builders::InferenceComponentDataCacheConfigBuilder {
        crate::types::builders::InferenceComponentDataCacheConfigBuilder::default()
    }
}

/// A builder for [`InferenceComponentDataCacheConfig`](crate::types::InferenceComponentDataCacheConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InferenceComponentDataCacheConfigBuilder {
    pub(crate) enable_caching: ::std::option::Option<bool>,
}
impl InferenceComponentDataCacheConfigBuilder {
    /// <p>Sets whether the endpoint that hosts the inference component caches the model artifacts and container image.</p>
    /// <p>With caching enabled, the endpoint caches this data in each instance that it provisions for the inference component. That way, the inference component deploys faster during the auto scaling process. If caching isn't enabled, the inference component takes longer to deploy because of the time it spends downloading the data.</p>
    /// This field is required.
    pub fn enable_caching(mut self, input: bool) -> Self {
        self.enable_caching = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets whether the endpoint that hosts the inference component caches the model artifacts and container image.</p>
    /// <p>With caching enabled, the endpoint caches this data in each instance that it provisions for the inference component. That way, the inference component deploys faster during the auto scaling process. If caching isn't enabled, the inference component takes longer to deploy because of the time it spends downloading the data.</p>
    pub fn set_enable_caching(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_caching = input;
        self
    }
    /// <p>Sets whether the endpoint that hosts the inference component caches the model artifacts and container image.</p>
    /// <p>With caching enabled, the endpoint caches this data in each instance that it provisions for the inference component. That way, the inference component deploys faster during the auto scaling process. If caching isn't enabled, the inference component takes longer to deploy because of the time it spends downloading the data.</p>
    pub fn get_enable_caching(&self) -> &::std::option::Option<bool> {
        &self.enable_caching
    }
    /// Consumes the builder and constructs a [`InferenceComponentDataCacheConfig`](crate::types::InferenceComponentDataCacheConfig).
    pub fn build(self) -> crate::types::InferenceComponentDataCacheConfig {
        crate::types::InferenceComponentDataCacheConfig {
            enable_caching: self.enable_caching,
        }
    }
}
