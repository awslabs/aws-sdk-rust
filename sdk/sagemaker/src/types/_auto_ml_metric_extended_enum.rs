// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AutoMlMetricExtendedEnum`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let automlmetricextendedenum = unimplemented!();
/// match automlmetricextendedenum {
///     AutoMlMetricExtendedEnum::Auc => { /* ... */ },
///     AutoMlMetricExtendedEnum::Accuracy => { /* ... */ },
///     AutoMlMetricExtendedEnum::AverageWeightedQuantileLoss => { /* ... */ },
///     AutoMlMetricExtendedEnum::BalancedAccuracy => { /* ... */ },
///     AutoMlMetricExtendedEnum::F1 => { /* ... */ },
///     AutoMlMetricExtendedEnum::F1Macro => { /* ... */ },
///     AutoMlMetricExtendedEnum::InferenceLatency => { /* ... */ },
///     AutoMlMetricExtendedEnum::LogLoss => { /* ... */ },
///     AutoMlMetricExtendedEnum::Mae => { /* ... */ },
///     AutoMlMetricExtendedEnum::Mape => { /* ... */ },
///     AutoMlMetricExtendedEnum::Mase => { /* ... */ },
///     AutoMlMetricExtendedEnum::Mse => { /* ... */ },
///     AutoMlMetricExtendedEnum::Perplexity => { /* ... */ },
///     AutoMlMetricExtendedEnum::Precision => { /* ... */ },
///     AutoMlMetricExtendedEnum::PrecisionMacro => { /* ... */ },
///     AutoMlMetricExtendedEnum::R2 => { /* ... */ },
///     AutoMlMetricExtendedEnum::Rmse => { /* ... */ },
///     AutoMlMetricExtendedEnum::Recall => { /* ... */ },
///     AutoMlMetricExtendedEnum::RecallMacro => { /* ... */ },
///     AutoMlMetricExtendedEnum::Rouge1 => { /* ... */ },
///     AutoMlMetricExtendedEnum::Rouge2 => { /* ... */ },
///     AutoMlMetricExtendedEnum::Rougel => { /* ... */ },
///     AutoMlMetricExtendedEnum::RougelSum => { /* ... */ },
///     AutoMlMetricExtendedEnum::TrainingLoss => { /* ... */ },
///     AutoMlMetricExtendedEnum::ValidationLoss => { /* ... */ },
///     AutoMlMetricExtendedEnum::Wape => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `automlmetricextendedenum` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AutoMlMetricExtendedEnum::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AutoMlMetricExtendedEnum::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AutoMlMetricExtendedEnum::NewFeature` is defined.
/// Specifically, when `automlmetricextendedenum` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AutoMlMetricExtendedEnum::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum AutoMlMetricExtendedEnum {
    #[allow(missing_docs)] // documentation missing in model
    Auc,
    #[allow(missing_docs)] // documentation missing in model
    Accuracy,
    #[allow(missing_docs)] // documentation missing in model
    AverageWeightedQuantileLoss,
    #[allow(missing_docs)] // documentation missing in model
    BalancedAccuracy,
    #[allow(missing_docs)] // documentation missing in model
    F1,
    #[allow(missing_docs)] // documentation missing in model
    F1Macro,
    #[allow(missing_docs)] // documentation missing in model
    InferenceLatency,
    #[allow(missing_docs)] // documentation missing in model
    LogLoss,
    #[allow(missing_docs)] // documentation missing in model
    Mae,
    #[allow(missing_docs)] // documentation missing in model
    Mape,
    #[allow(missing_docs)] // documentation missing in model
    Mase,
    #[allow(missing_docs)] // documentation missing in model
    Mse,
    #[allow(missing_docs)] // documentation missing in model
    Perplexity,
    #[allow(missing_docs)] // documentation missing in model
    Precision,
    #[allow(missing_docs)] // documentation missing in model
    PrecisionMacro,
    #[allow(missing_docs)] // documentation missing in model
    R2,
    #[allow(missing_docs)] // documentation missing in model
    Rmse,
    #[allow(missing_docs)] // documentation missing in model
    Recall,
    #[allow(missing_docs)] // documentation missing in model
    RecallMacro,
    #[allow(missing_docs)] // documentation missing in model
    Rouge1,
    #[allow(missing_docs)] // documentation missing in model
    Rouge2,
    #[allow(missing_docs)] // documentation missing in model
    Rougel,
    #[allow(missing_docs)] // documentation missing in model
    RougelSum,
    #[allow(missing_docs)] // documentation missing in model
    TrainingLoss,
    #[allow(missing_docs)] // documentation missing in model
    ValidationLoss,
    #[allow(missing_docs)] // documentation missing in model
    Wape,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl ::std::convert::From<&str> for AutoMlMetricExtendedEnum {
    fn from(s: &str) -> Self {
        match s {
            "AUC" => AutoMlMetricExtendedEnum::Auc,
            "Accuracy" => AutoMlMetricExtendedEnum::Accuracy,
            "AverageWeightedQuantileLoss" => AutoMlMetricExtendedEnum::AverageWeightedQuantileLoss,
            "BalancedAccuracy" => AutoMlMetricExtendedEnum::BalancedAccuracy,
            "F1" => AutoMlMetricExtendedEnum::F1,
            "F1macro" => AutoMlMetricExtendedEnum::F1Macro,
            "InferenceLatency" => AutoMlMetricExtendedEnum::InferenceLatency,
            "LogLoss" => AutoMlMetricExtendedEnum::LogLoss,
            "MAE" => AutoMlMetricExtendedEnum::Mae,
            "MAPE" => AutoMlMetricExtendedEnum::Mape,
            "MASE" => AutoMlMetricExtendedEnum::Mase,
            "MSE" => AutoMlMetricExtendedEnum::Mse,
            "Perplexity" => AutoMlMetricExtendedEnum::Perplexity,
            "Precision" => AutoMlMetricExtendedEnum::Precision,
            "PrecisionMacro" => AutoMlMetricExtendedEnum::PrecisionMacro,
            "R2" => AutoMlMetricExtendedEnum::R2,
            "RMSE" => AutoMlMetricExtendedEnum::Rmse,
            "Recall" => AutoMlMetricExtendedEnum::Recall,
            "RecallMacro" => AutoMlMetricExtendedEnum::RecallMacro,
            "Rouge1" => AutoMlMetricExtendedEnum::Rouge1,
            "Rouge2" => AutoMlMetricExtendedEnum::Rouge2,
            "RougeL" => AutoMlMetricExtendedEnum::Rougel,
            "RougeLSum" => AutoMlMetricExtendedEnum::RougelSum,
            "TrainingLoss" => AutoMlMetricExtendedEnum::TrainingLoss,
            "ValidationLoss" => AutoMlMetricExtendedEnum::ValidationLoss,
            "WAPE" => AutoMlMetricExtendedEnum::Wape,
            other => AutoMlMetricExtendedEnum::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for AutoMlMetricExtendedEnum {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(AutoMlMetricExtendedEnum::from(s))
    }
}
impl AutoMlMetricExtendedEnum {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AutoMlMetricExtendedEnum::Auc => "AUC",
            AutoMlMetricExtendedEnum::Accuracy => "Accuracy",
            AutoMlMetricExtendedEnum::AverageWeightedQuantileLoss => "AverageWeightedQuantileLoss",
            AutoMlMetricExtendedEnum::BalancedAccuracy => "BalancedAccuracy",
            AutoMlMetricExtendedEnum::F1 => "F1",
            AutoMlMetricExtendedEnum::F1Macro => "F1macro",
            AutoMlMetricExtendedEnum::InferenceLatency => "InferenceLatency",
            AutoMlMetricExtendedEnum::LogLoss => "LogLoss",
            AutoMlMetricExtendedEnum::Mae => "MAE",
            AutoMlMetricExtendedEnum::Mape => "MAPE",
            AutoMlMetricExtendedEnum::Mase => "MASE",
            AutoMlMetricExtendedEnum::Mse => "MSE",
            AutoMlMetricExtendedEnum::Perplexity => "Perplexity",
            AutoMlMetricExtendedEnum::Precision => "Precision",
            AutoMlMetricExtendedEnum::PrecisionMacro => "PrecisionMacro",
            AutoMlMetricExtendedEnum::R2 => "R2",
            AutoMlMetricExtendedEnum::Rmse => "RMSE",
            AutoMlMetricExtendedEnum::Recall => "Recall",
            AutoMlMetricExtendedEnum::RecallMacro => "RecallMacro",
            AutoMlMetricExtendedEnum::Rouge1 => "Rouge1",
            AutoMlMetricExtendedEnum::Rouge2 => "Rouge2",
            AutoMlMetricExtendedEnum::Rougel => "RougeL",
            AutoMlMetricExtendedEnum::RougelSum => "RougeLSum",
            AutoMlMetricExtendedEnum::TrainingLoss => "TrainingLoss",
            AutoMlMetricExtendedEnum::ValidationLoss => "ValidationLoss",
            AutoMlMetricExtendedEnum::Wape => "WAPE",
            AutoMlMetricExtendedEnum::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AUC",
            "Accuracy",
            "AverageWeightedQuantileLoss",
            "BalancedAccuracy",
            "F1",
            "F1macro",
            "InferenceLatency",
            "LogLoss",
            "MAE",
            "MAPE",
            "MASE",
            "MSE",
            "Perplexity",
            "Precision",
            "PrecisionMacro",
            "R2",
            "RMSE",
            "Recall",
            "RecallMacro",
            "Rouge1",
            "Rouge2",
            "RougeL",
            "RougeLSum",
            "TrainingLoss",
            "ValidationLoss",
            "WAPE",
        ]
    }
}
impl ::std::convert::AsRef<str> for AutoMlMetricExtendedEnum {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
