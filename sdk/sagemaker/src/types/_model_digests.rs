// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information to verify the integrity of stored model artifacts. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModelDigests {
    /// <p>Provides a hash value that uniquely identifies the stored model artifacts.</p>
    #[doc(hidden)]
    pub artifact_digest: std::option::Option<std::string::String>,
}
impl ModelDigests {
    /// <p>Provides a hash value that uniquely identifies the stored model artifacts.</p>
    pub fn artifact_digest(&self) -> std::option::Option<&str> {
        self.artifact_digest.as_deref()
    }
}
impl ModelDigests {
    /// Creates a new builder-style object to manufacture [`ModelDigests`](crate::types::ModelDigests).
    pub fn builder() -> crate::types::builders::ModelDigestsBuilder {
        crate::types::builders::ModelDigestsBuilder::default()
    }
}

/// A builder for [`ModelDigests`](crate::types::ModelDigests).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModelDigestsBuilder {
    pub(crate) artifact_digest: std::option::Option<std::string::String>,
}
impl ModelDigestsBuilder {
    /// <p>Provides a hash value that uniquely identifies the stored model artifacts.</p>
    pub fn artifact_digest(mut self, input: impl Into<std::string::String>) -> Self {
        self.artifact_digest = Some(input.into());
        self
    }
    /// <p>Provides a hash value that uniquely identifies the stored model artifacts.</p>
    pub fn set_artifact_digest(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.artifact_digest = input;
        self
    }
    /// Consumes the builder and constructs a [`ModelDigests`](crate::types::ModelDigests).
    pub fn build(self) -> crate::types::ModelDigests {
        crate::types::ModelDigests {
            artifact_digest: self.artifact_digest,
        }
    }
}
