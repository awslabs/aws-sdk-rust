// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 data source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoMls3DataSource {
    /// <p>The data type.</p>
    /// <p>A ManifestFile should have the format shown below:</p>
    /// <p> <code>[ {"prefix": "s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER/DOC-EXAMPLE-PREFIX/"}, </code> </p>
    /// <p> <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-1",</code> </p>
    /// <p> <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-2",</code> </p>
    /// <p> <code>... "DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-N" ]</code> </p>
    /// <p>An S3Prefix should have the following format: </p>
    /// <p> <code>s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER-OR-FILE</code> </p>
    #[doc(hidden)]
    pub s3_data_type: std::option::Option<crate::types::AutoMls3DataType>,
    /// <p>The URL to the Amazon S3 data source.</p>
    #[doc(hidden)]
    pub s3_uri: std::option::Option<std::string::String>,
}
impl AutoMls3DataSource {
    /// <p>The data type.</p>
    /// <p>A ManifestFile should have the format shown below:</p>
    /// <p> <code>[ {"prefix": "s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER/DOC-EXAMPLE-PREFIX/"}, </code> </p>
    /// <p> <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-1",</code> </p>
    /// <p> <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-2",</code> </p>
    /// <p> <code>... "DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-N" ]</code> </p>
    /// <p>An S3Prefix should have the following format: </p>
    /// <p> <code>s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER-OR-FILE</code> </p>
    pub fn s3_data_type(&self) -> std::option::Option<&crate::types::AutoMls3DataType> {
        self.s3_data_type.as_ref()
    }
    /// <p>The URL to the Amazon S3 data source.</p>
    pub fn s3_uri(&self) -> std::option::Option<&str> {
        self.s3_uri.as_deref()
    }
}
impl AutoMls3DataSource {
    /// Creates a new builder-style object to manufacture [`AutoMls3DataSource`](crate::types::AutoMls3DataSource).
    pub fn builder() -> crate::types::builders::AutoMls3DataSourceBuilder {
        crate::types::builders::AutoMls3DataSourceBuilder::default()
    }
}

/// A builder for [`AutoMls3DataSource`](crate::types::AutoMls3DataSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoMls3DataSourceBuilder {
    pub(crate) s3_data_type: std::option::Option<crate::types::AutoMls3DataType>,
    pub(crate) s3_uri: std::option::Option<std::string::String>,
}
impl AutoMls3DataSourceBuilder {
    /// <p>The data type.</p>
    /// <p>A ManifestFile should have the format shown below:</p>
    /// <p> <code>[ {"prefix": "s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER/DOC-EXAMPLE-PREFIX/"}, </code> </p>
    /// <p> <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-1",</code> </p>
    /// <p> <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-2",</code> </p>
    /// <p> <code>... "DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-N" ]</code> </p>
    /// <p>An S3Prefix should have the following format: </p>
    /// <p> <code>s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER-OR-FILE</code> </p>
    pub fn s3_data_type(mut self, input: crate::types::AutoMls3DataType) -> Self {
        self.s3_data_type = Some(input);
        self
    }
    /// <p>The data type.</p>
    /// <p>A ManifestFile should have the format shown below:</p>
    /// <p> <code>[ {"prefix": "s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER/DOC-EXAMPLE-PREFIX/"}, </code> </p>
    /// <p> <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-1",</code> </p>
    /// <p> <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-2",</code> </p>
    /// <p> <code>... "DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-N" ]</code> </p>
    /// <p>An S3Prefix should have the following format: </p>
    /// <p> <code>s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER-OR-FILE</code> </p>
    pub fn set_s3_data_type(
        mut self,
        input: std::option::Option<crate::types::AutoMls3DataType>,
    ) -> Self {
        self.s3_data_type = input;
        self
    }
    /// <p>The URL to the Amazon S3 data source.</p>
    pub fn s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_uri = Some(input.into());
        self
    }
    /// <p>The URL to the Amazon S3 data source.</p>
    pub fn set_s3_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoMls3DataSource`](crate::types::AutoMls3DataSource).
    pub fn build(self) -> crate::types::AutoMls3DataSource {
        crate::types::AutoMls3DataSource {
            s3_data_type: self.s3_data_type,
            s3_uri: self.s3_uri,
        }
    }
}
