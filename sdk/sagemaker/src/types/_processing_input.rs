// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The inputs for a processing job. The processing input must specify exactly one of either <code>S3Input</code> or <code>DatasetDefinition</code> types.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProcessingInput {
    /// <p>The name for the processing job input.</p>
    #[doc(hidden)]
    pub input_name: std::option::Option<std::string::String>,
    /// <p>When <code>True</code>, input operations such as data download are managed natively by the processing job application. When <code>False</code> (default), input operations are managed by Amazon SageMaker.</p>
    #[doc(hidden)]
    pub app_managed: bool,
    /// <p>Configuration for downloading input data from Amazon S3 into the processing container.</p>
    #[doc(hidden)]
    pub s3_input: std::option::Option<crate::types::ProcessingS3Input>,
    /// <p>Configuration for a Dataset Definition input. </p>
    #[doc(hidden)]
    pub dataset_definition: std::option::Option<crate::types::DatasetDefinition>,
}
impl ProcessingInput {
    /// <p>The name for the processing job input.</p>
    pub fn input_name(&self) -> std::option::Option<&str> {
        self.input_name.as_deref()
    }
    /// <p>When <code>True</code>, input operations such as data download are managed natively by the processing job application. When <code>False</code> (default), input operations are managed by Amazon SageMaker.</p>
    pub fn app_managed(&self) -> bool {
        self.app_managed
    }
    /// <p>Configuration for downloading input data from Amazon S3 into the processing container.</p>
    pub fn s3_input(&self) -> std::option::Option<&crate::types::ProcessingS3Input> {
        self.s3_input.as_ref()
    }
    /// <p>Configuration for a Dataset Definition input. </p>
    pub fn dataset_definition(&self) -> std::option::Option<&crate::types::DatasetDefinition> {
        self.dataset_definition.as_ref()
    }
}
impl ProcessingInput {
    /// Creates a new builder-style object to manufacture [`ProcessingInput`](crate::types::ProcessingInput).
    pub fn builder() -> crate::types::builders::ProcessingInputBuilder {
        crate::types::builders::ProcessingInputBuilder::default()
    }
}

/// A builder for [`ProcessingInput`](crate::types::ProcessingInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProcessingInputBuilder {
    pub(crate) input_name: std::option::Option<std::string::String>,
    pub(crate) app_managed: std::option::Option<bool>,
    pub(crate) s3_input: std::option::Option<crate::types::ProcessingS3Input>,
    pub(crate) dataset_definition: std::option::Option<crate::types::DatasetDefinition>,
}
impl ProcessingInputBuilder {
    /// <p>The name for the processing job input.</p>
    pub fn input_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_name = Some(input.into());
        self
    }
    /// <p>The name for the processing job input.</p>
    pub fn set_input_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input_name = input;
        self
    }
    /// <p>When <code>True</code>, input operations such as data download are managed natively by the processing job application. When <code>False</code> (default), input operations are managed by Amazon SageMaker.</p>
    pub fn app_managed(mut self, input: bool) -> Self {
        self.app_managed = Some(input);
        self
    }
    /// <p>When <code>True</code>, input operations such as data download are managed natively by the processing job application. When <code>False</code> (default), input operations are managed by Amazon SageMaker.</p>
    pub fn set_app_managed(mut self, input: std::option::Option<bool>) -> Self {
        self.app_managed = input;
        self
    }
    /// <p>Configuration for downloading input data from Amazon S3 into the processing container.</p>
    pub fn s3_input(mut self, input: crate::types::ProcessingS3Input) -> Self {
        self.s3_input = Some(input);
        self
    }
    /// <p>Configuration for downloading input data from Amazon S3 into the processing container.</p>
    pub fn set_s3_input(
        mut self,
        input: std::option::Option<crate::types::ProcessingS3Input>,
    ) -> Self {
        self.s3_input = input;
        self
    }
    /// <p>Configuration for a Dataset Definition input. </p>
    pub fn dataset_definition(mut self, input: crate::types::DatasetDefinition) -> Self {
        self.dataset_definition = Some(input);
        self
    }
    /// <p>Configuration for a Dataset Definition input. </p>
    pub fn set_dataset_definition(
        mut self,
        input: std::option::Option<crate::types::DatasetDefinition>,
    ) -> Self {
        self.dataset_definition = input;
        self
    }
    /// Consumes the builder and constructs a [`ProcessingInput`](crate::types::ProcessingInput).
    pub fn build(self) -> crate::types::ProcessingInput {
        crate::types::ProcessingInput {
            input_name: self.input_name,
            app_managed: self.app_managed.unwrap_or_default(),
            s3_input: self.s3_input,
            dataset_definition: self.dataset_definition,
        }
    }
}
