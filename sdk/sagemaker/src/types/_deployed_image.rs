// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this <code>ProductionVariant</code>.</p>
/// <p>If you used the <code>registry/repository[:tag]</code> form to specify the image path of the primary container when you created the model hosted in this <code>ProductionVariant</code>, the path resolves to a path of the form <code>registry/repository[@digest]</code>. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html">Pulling an Image</a> in the <i>Amazon ECR User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeployedImage {
    /// <p>The image path you specified when you created the model.</p>
    #[doc(hidden)]
    pub specified_image: std::option::Option<std::string::String>,
    /// <p>The specific digest path of the image hosted in this <code>ProductionVariant</code>.</p>
    #[doc(hidden)]
    pub resolved_image: std::option::Option<std::string::String>,
    /// <p>The date and time when the image path for the model resolved to the <code>ResolvedImage</code> </p>
    #[doc(hidden)]
    pub resolution_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl DeployedImage {
    /// <p>The image path you specified when you created the model.</p>
    pub fn specified_image(&self) -> std::option::Option<&str> {
        self.specified_image.as_deref()
    }
    /// <p>The specific digest path of the image hosted in this <code>ProductionVariant</code>.</p>
    pub fn resolved_image(&self) -> std::option::Option<&str> {
        self.resolved_image.as_deref()
    }
    /// <p>The date and time when the image path for the model resolved to the <code>ResolvedImage</code> </p>
    pub fn resolution_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.resolution_time.as_ref()
    }
}
impl DeployedImage {
    /// Creates a new builder-style object to manufacture [`DeployedImage`](crate::types::DeployedImage).
    pub fn builder() -> crate::types::builders::DeployedImageBuilder {
        crate::types::builders::DeployedImageBuilder::default()
    }
}

/// A builder for [`DeployedImage`](crate::types::DeployedImage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeployedImageBuilder {
    pub(crate) specified_image: std::option::Option<std::string::String>,
    pub(crate) resolved_image: std::option::Option<std::string::String>,
    pub(crate) resolution_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl DeployedImageBuilder {
    /// <p>The image path you specified when you created the model.</p>
    pub fn specified_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.specified_image = Some(input.into());
        self
    }
    /// <p>The image path you specified when you created the model.</p>
    pub fn set_specified_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.specified_image = input;
        self
    }
    /// <p>The specific digest path of the image hosted in this <code>ProductionVariant</code>.</p>
    pub fn resolved_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.resolved_image = Some(input.into());
        self
    }
    /// <p>The specific digest path of the image hosted in this <code>ProductionVariant</code>.</p>
    pub fn set_resolved_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resolved_image = input;
        self
    }
    /// <p>The date and time when the image path for the model resolved to the <code>ResolvedImage</code> </p>
    pub fn resolution_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.resolution_time = Some(input);
        self
    }
    /// <p>The date and time when the image path for the model resolved to the <code>ResolvedImage</code> </p>
    pub fn set_resolution_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.resolution_time = input;
        self
    }
    /// Consumes the builder and constructs a [`DeployedImage`](crate::types::DeployedImage).
    pub fn build(self) -> crate::types::DeployedImage {
        crate::types::DeployedImage {
            specified_image: self.specified_image,
            resolved_image: self.resolved_image,
            resolution_time: self.resolution_time,
        }
    }
}
