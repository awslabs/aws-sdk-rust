// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata for a Lambda step.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LambdaStepMetadata {
    /// <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of the output parameters of the Lambda step.</p>
    pub output_parameters: ::std::option::Option<::std::vec::Vec<crate::types::OutputParameter>>,
}
impl LambdaStepMetadata {
    /// <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A list of the output parameters of the Lambda step.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.output_parameters.is_none()`.
    pub fn output_parameters(&self) -> &[crate::types::OutputParameter] {
        self.output_parameters.as_deref().unwrap_or_default()
    }
}
impl LambdaStepMetadata {
    /// Creates a new builder-style object to manufacture [`LambdaStepMetadata`](crate::types::LambdaStepMetadata).
    pub fn builder() -> crate::types::builders::LambdaStepMetadataBuilder {
        crate::types::builders::LambdaStepMetadataBuilder::default()
    }
}

/// A builder for [`LambdaStepMetadata`](crate::types::LambdaStepMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LambdaStepMetadataBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) output_parameters: ::std::option::Option<::std::vec::Vec<crate::types::OutputParameter>>,
}
impl LambdaStepMetadataBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `output_parameters`.
    ///
    /// To override the contents of this collection use [`set_output_parameters`](Self::set_output_parameters).
    ///
    /// <p>A list of the output parameters of the Lambda step.</p>
    pub fn output_parameters(mut self, input: crate::types::OutputParameter) -> Self {
        let mut v = self.output_parameters.unwrap_or_default();
        v.push(input);
        self.output_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the output parameters of the Lambda step.</p>
    pub fn set_output_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OutputParameter>>) -> Self {
        self.output_parameters = input;
        self
    }
    /// <p>A list of the output parameters of the Lambda step.</p>
    pub fn get_output_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OutputParameter>> {
        &self.output_parameters
    }
    /// Consumes the builder and constructs a [`LambdaStepMetadata`](crate::types::LambdaStepMetadata).
    pub fn build(self) -> crate::types::LambdaStepMetadata {
        crate::types::LambdaStepMetadata {
            arn: self.arn,
            output_parameters: self.output_parameters,
        }
    }
}
