// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AutoMlJobSecondaryStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let automljobsecondarystatus = unimplemented!();
/// match automljobsecondarystatus {
///     AutoMlJobSecondaryStatus::AnalyzingData => { /* ... */ },
///     AutoMlJobSecondaryStatus::CandidateDefinitionsGenerated => { /* ... */ },
///     AutoMlJobSecondaryStatus::Completed => { /* ... */ },
///     AutoMlJobSecondaryStatus::DeployingModel => { /* ... */ },
///     AutoMlJobSecondaryStatus::ExplainabilityError => { /* ... */ },
///     AutoMlJobSecondaryStatus::Failed => { /* ... */ },
///     AutoMlJobSecondaryStatus::FeatureEngineering => { /* ... */ },
///     AutoMlJobSecondaryStatus::GeneratingExplainabilityReport => { /* ... */ },
///     AutoMlJobSecondaryStatus::GeneratingModelInsightsReport => { /* ... */ },
///     AutoMlJobSecondaryStatus::MaxAutoMlJobRuntimeReached => { /* ... */ },
///     AutoMlJobSecondaryStatus::MaxCandidatesReached => { /* ... */ },
///     AutoMlJobSecondaryStatus::ModelDeploymentError => { /* ... */ },
///     AutoMlJobSecondaryStatus::ModelInsightsError => { /* ... */ },
///     AutoMlJobSecondaryStatus::ModelTuning => { /* ... */ },
///     AutoMlJobSecondaryStatus::PreTraining => { /* ... */ },
///     AutoMlJobSecondaryStatus::Starting => { /* ... */ },
///     AutoMlJobSecondaryStatus::Stopped => { /* ... */ },
///     AutoMlJobSecondaryStatus::Stopping => { /* ... */ },
///     AutoMlJobSecondaryStatus::TrainingModels => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `automljobsecondarystatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AutoMlJobSecondaryStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AutoMlJobSecondaryStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AutoMlJobSecondaryStatus::NewFeature` is defined.
/// Specifically, when `automljobsecondarystatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AutoMlJobSecondaryStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum AutoMlJobSecondaryStatus {
    #[allow(missing_docs)] // documentation missing in model
    AnalyzingData,
    #[allow(missing_docs)] // documentation missing in model
    CandidateDefinitionsGenerated,
    #[allow(missing_docs)] // documentation missing in model
    Completed,
    #[allow(missing_docs)] // documentation missing in model
    DeployingModel,
    #[allow(missing_docs)] // documentation missing in model
    ExplainabilityError,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    FeatureEngineering,
    #[allow(missing_docs)] // documentation missing in model
    GeneratingExplainabilityReport,
    #[allow(missing_docs)] // documentation missing in model
    GeneratingModelInsightsReport,
    #[allow(missing_docs)] // documentation missing in model
    MaxAutoMlJobRuntimeReached,
    #[allow(missing_docs)] // documentation missing in model
    MaxCandidatesReached,
    #[allow(missing_docs)] // documentation missing in model
    ModelDeploymentError,
    #[allow(missing_docs)] // documentation missing in model
    ModelInsightsError,
    #[allow(missing_docs)] // documentation missing in model
    ModelTuning,
    #[allow(missing_docs)] // documentation missing in model
    PreTraining,
    #[allow(missing_docs)] // documentation missing in model
    Starting,
    #[allow(missing_docs)] // documentation missing in model
    Stopped,
    #[allow(missing_docs)] // documentation missing in model
    Stopping,
    #[allow(missing_docs)] // documentation missing in model
    TrainingModels,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for AutoMlJobSecondaryStatus {
    fn from(s: &str) -> Self {
        match s {
            "AnalyzingData" => AutoMlJobSecondaryStatus::AnalyzingData,
            "CandidateDefinitionsGenerated" => AutoMlJobSecondaryStatus::CandidateDefinitionsGenerated,
            "Completed" => AutoMlJobSecondaryStatus::Completed,
            "DeployingModel" => AutoMlJobSecondaryStatus::DeployingModel,
            "ExplainabilityError" => AutoMlJobSecondaryStatus::ExplainabilityError,
            "Failed" => AutoMlJobSecondaryStatus::Failed,
            "FeatureEngineering" => AutoMlJobSecondaryStatus::FeatureEngineering,
            "GeneratingExplainabilityReport" => AutoMlJobSecondaryStatus::GeneratingExplainabilityReport,
            "GeneratingModelInsightsReport" => AutoMlJobSecondaryStatus::GeneratingModelInsightsReport,
            "MaxAutoMLJobRuntimeReached" => AutoMlJobSecondaryStatus::MaxAutoMlJobRuntimeReached,
            "MaxCandidatesReached" => AutoMlJobSecondaryStatus::MaxCandidatesReached,
            "ModelDeploymentError" => AutoMlJobSecondaryStatus::ModelDeploymentError,
            "ModelInsightsError" => AutoMlJobSecondaryStatus::ModelInsightsError,
            "ModelTuning" => AutoMlJobSecondaryStatus::ModelTuning,
            "PreTraining" => AutoMlJobSecondaryStatus::PreTraining,
            "Starting" => AutoMlJobSecondaryStatus::Starting,
            "Stopped" => AutoMlJobSecondaryStatus::Stopped,
            "Stopping" => AutoMlJobSecondaryStatus::Stopping,
            "TrainingModels" => AutoMlJobSecondaryStatus::TrainingModels,
            other => AutoMlJobSecondaryStatus::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for AutoMlJobSecondaryStatus {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(AutoMlJobSecondaryStatus::from(s))
    }
}
impl AutoMlJobSecondaryStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AutoMlJobSecondaryStatus::AnalyzingData => "AnalyzingData",
            AutoMlJobSecondaryStatus::CandidateDefinitionsGenerated => "CandidateDefinitionsGenerated",
            AutoMlJobSecondaryStatus::Completed => "Completed",
            AutoMlJobSecondaryStatus::DeployingModel => "DeployingModel",
            AutoMlJobSecondaryStatus::ExplainabilityError => "ExplainabilityError",
            AutoMlJobSecondaryStatus::Failed => "Failed",
            AutoMlJobSecondaryStatus::FeatureEngineering => "FeatureEngineering",
            AutoMlJobSecondaryStatus::GeneratingExplainabilityReport => "GeneratingExplainabilityReport",
            AutoMlJobSecondaryStatus::GeneratingModelInsightsReport => "GeneratingModelInsightsReport",
            AutoMlJobSecondaryStatus::MaxAutoMlJobRuntimeReached => "MaxAutoMLJobRuntimeReached",
            AutoMlJobSecondaryStatus::MaxCandidatesReached => "MaxCandidatesReached",
            AutoMlJobSecondaryStatus::ModelDeploymentError => "ModelDeploymentError",
            AutoMlJobSecondaryStatus::ModelInsightsError => "ModelInsightsError",
            AutoMlJobSecondaryStatus::ModelTuning => "ModelTuning",
            AutoMlJobSecondaryStatus::PreTraining => "PreTraining",
            AutoMlJobSecondaryStatus::Starting => "Starting",
            AutoMlJobSecondaryStatus::Stopped => "Stopped",
            AutoMlJobSecondaryStatus::Stopping => "Stopping",
            AutoMlJobSecondaryStatus::TrainingModels => "TrainingModels",
            AutoMlJobSecondaryStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AnalyzingData",
            "CandidateDefinitionsGenerated",
            "Completed",
            "DeployingModel",
            "ExplainabilityError",
            "Failed",
            "FeatureEngineering",
            "GeneratingExplainabilityReport",
            "GeneratingModelInsightsReport",
            "MaxAutoMLJobRuntimeReached",
            "MaxCandidatesReached",
            "ModelDeploymentError",
            "ModelInsightsError",
            "ModelTuning",
            "PreTraining",
            "Starting",
            "Stopped",
            "Stopping",
            "TrainingModels",
        ]
    }
}
impl ::std::convert::AsRef<str> for AutoMlJobSecondaryStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl AutoMlJobSecondaryStatus {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for AutoMlJobSecondaryStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            AutoMlJobSecondaryStatus::AnalyzingData => write!(f, "AnalyzingData"),
            AutoMlJobSecondaryStatus::CandidateDefinitionsGenerated => write!(f, "CandidateDefinitionsGenerated"),
            AutoMlJobSecondaryStatus::Completed => write!(f, "Completed"),
            AutoMlJobSecondaryStatus::DeployingModel => write!(f, "DeployingModel"),
            AutoMlJobSecondaryStatus::ExplainabilityError => write!(f, "ExplainabilityError"),
            AutoMlJobSecondaryStatus::Failed => write!(f, "Failed"),
            AutoMlJobSecondaryStatus::FeatureEngineering => write!(f, "FeatureEngineering"),
            AutoMlJobSecondaryStatus::GeneratingExplainabilityReport => write!(f, "GeneratingExplainabilityReport"),
            AutoMlJobSecondaryStatus::GeneratingModelInsightsReport => write!(f, "GeneratingModelInsightsReport"),
            AutoMlJobSecondaryStatus::MaxAutoMlJobRuntimeReached => write!(f, "MaxAutoMLJobRuntimeReached"),
            AutoMlJobSecondaryStatus::MaxCandidatesReached => write!(f, "MaxCandidatesReached"),
            AutoMlJobSecondaryStatus::ModelDeploymentError => write!(f, "ModelDeploymentError"),
            AutoMlJobSecondaryStatus::ModelInsightsError => write!(f, "ModelInsightsError"),
            AutoMlJobSecondaryStatus::ModelTuning => write!(f, "ModelTuning"),
            AutoMlJobSecondaryStatus::PreTraining => write!(f, "PreTraining"),
            AutoMlJobSecondaryStatus::Starting => write!(f, "Starting"),
            AutoMlJobSecondaryStatus::Stopped => write!(f, "Stopped"),
            AutoMlJobSecondaryStatus::Stopping => write!(f, "Stopping"),
            AutoMlJobSecondaryStatus::TrainingModels => write!(f, "TrainingModels"),
            AutoMlJobSecondaryStatus::Unknown(value) => write!(f, "{value}"),
        }
    }
}
