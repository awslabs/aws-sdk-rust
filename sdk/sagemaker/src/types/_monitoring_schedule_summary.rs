// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summarizes the monitoring schedule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitoringScheduleSummary {
    /// <p>The name of the monitoring schedule.</p>
    #[doc(hidden)]
    pub monitoring_schedule_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
    #[doc(hidden)]
    pub monitoring_schedule_arn: std::option::Option<std::string::String>,
    /// <p>The creation time of the monitoring schedule.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time the monitoring schedule was modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the monitoring schedule.</p>
    #[doc(hidden)]
    pub monitoring_schedule_status: std::option::Option<crate::types::ScheduleStatus>,
    /// <p>The name of the endpoint using the monitoring schedule.</p>
    #[doc(hidden)]
    pub endpoint_name: std::option::Option<std::string::String>,
    /// <p>The name of the monitoring job definition that the schedule is for.</p>
    #[doc(hidden)]
    pub monitoring_job_definition_name: std::option::Option<std::string::String>,
    /// <p>The type of the monitoring job definition that the schedule is for.</p>
    #[doc(hidden)]
    pub monitoring_type: std::option::Option<crate::types::MonitoringType>,
}
impl MonitoringScheduleSummary {
    /// <p>The name of the monitoring schedule.</p>
    pub fn monitoring_schedule_name(&self) -> std::option::Option<&str> {
        self.monitoring_schedule_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
    pub fn monitoring_schedule_arn(&self) -> std::option::Option<&str> {
        self.monitoring_schedule_arn.as_deref()
    }
    /// <p>The creation time of the monitoring schedule.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the monitoring schedule was modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The status of the monitoring schedule.</p>
    pub fn monitoring_schedule_status(&self) -> std::option::Option<&crate::types::ScheduleStatus> {
        self.monitoring_schedule_status.as_ref()
    }
    /// <p>The name of the endpoint using the monitoring schedule.</p>
    pub fn endpoint_name(&self) -> std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>The name of the monitoring job definition that the schedule is for.</p>
    pub fn monitoring_job_definition_name(&self) -> std::option::Option<&str> {
        self.monitoring_job_definition_name.as_deref()
    }
    /// <p>The type of the monitoring job definition that the schedule is for.</p>
    pub fn monitoring_type(&self) -> std::option::Option<&crate::types::MonitoringType> {
        self.monitoring_type.as_ref()
    }
}
impl MonitoringScheduleSummary {
    /// Creates a new builder-style object to manufacture [`MonitoringScheduleSummary`](crate::types::MonitoringScheduleSummary).
    pub fn builder() -> crate::types::builders::MonitoringScheduleSummaryBuilder {
        crate::types::builders::MonitoringScheduleSummaryBuilder::default()
    }
}

/// A builder for [`MonitoringScheduleSummary`](crate::types::MonitoringScheduleSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringScheduleSummaryBuilder {
    pub(crate) monitoring_schedule_name: std::option::Option<std::string::String>,
    pub(crate) monitoring_schedule_arn: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) monitoring_schedule_status: std::option::Option<crate::types::ScheduleStatus>,
    pub(crate) endpoint_name: std::option::Option<std::string::String>,
    pub(crate) monitoring_job_definition_name: std::option::Option<std::string::String>,
    pub(crate) monitoring_type: std::option::Option<crate::types::MonitoringType>,
}
impl MonitoringScheduleSummaryBuilder {
    /// <p>The name of the monitoring schedule.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitoring_schedule_name = Some(input.into());
        self
    }
    /// <p>The name of the monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monitoring_schedule_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
    pub fn monitoring_schedule_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitoring_schedule_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>
    pub fn set_monitoring_schedule_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monitoring_schedule_arn = input;
        self
    }
    /// <p>The creation time of the monitoring schedule.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The creation time of the monitoring schedule.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The last time the monitoring schedule was modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The last time the monitoring schedule was modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The status of the monitoring schedule.</p>
    pub fn monitoring_schedule_status(mut self, input: crate::types::ScheduleStatus) -> Self {
        self.monitoring_schedule_status = Some(input);
        self
    }
    /// <p>The status of the monitoring schedule.</p>
    pub fn set_monitoring_schedule_status(
        mut self,
        input: std::option::Option<crate::types::ScheduleStatus>,
    ) -> Self {
        self.monitoring_schedule_status = input;
        self
    }
    /// <p>The name of the endpoint using the monitoring schedule.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_name = Some(input.into());
        self
    }
    /// <p>The name of the endpoint using the monitoring schedule.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name of the monitoring job definition that the schedule is for.</p>
    pub fn monitoring_job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitoring_job_definition_name = Some(input.into());
        self
    }
    /// <p>The name of the monitoring job definition that the schedule is for.</p>
    pub fn set_monitoring_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monitoring_job_definition_name = input;
        self
    }
    /// <p>The type of the monitoring job definition that the schedule is for.</p>
    pub fn monitoring_type(mut self, input: crate::types::MonitoringType) -> Self {
        self.monitoring_type = Some(input);
        self
    }
    /// <p>The type of the monitoring job definition that the schedule is for.</p>
    pub fn set_monitoring_type(
        mut self,
        input: std::option::Option<crate::types::MonitoringType>,
    ) -> Self {
        self.monitoring_type = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitoringScheduleSummary`](crate::types::MonitoringScheduleSummary).
    pub fn build(self) -> crate::types::MonitoringScheduleSummary {
        crate::types::MonitoringScheduleSummary {
            monitoring_schedule_name: self.monitoring_schedule_name,
            monitoring_schedule_arn: self.monitoring_schedule_arn,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            monitoring_schedule_status: self.monitoring_schedule_status,
            endpoint_name: self.endpoint_name,
            monitoring_job_definition_name: self.monitoring_job_definition_name,
            monitoring_type: self.monitoring_type,
        }
    }
}
