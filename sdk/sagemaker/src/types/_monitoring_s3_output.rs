// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about where and how you want to store the results of a monitoring job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitoringS3Output {
    /// <p>A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.</p>
    pub s3_uri: ::std::option::Option<::std::string::String>,
    /// <p>The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.</p>
    pub local_path: ::std::option::Option<::std::string::String>,
    /// <p>Whether to upload the results of the monitoring job continuously or after the job completes.</p>
    pub s3_upload_mode: ::std::option::Option<crate::types::ProcessingS3UploadMode>,
}
impl MonitoringS3Output {
    /// <p>A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.</p>
    pub fn s3_uri(&self) -> ::std::option::Option<&str> {
        self.s3_uri.as_deref()
    }
    /// <p>The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.</p>
    pub fn local_path(&self) -> ::std::option::Option<&str> {
        self.local_path.as_deref()
    }
    /// <p>Whether to upload the results of the monitoring job continuously or after the job completes.</p>
    pub fn s3_upload_mode(&self) -> ::std::option::Option<&crate::types::ProcessingS3UploadMode> {
        self.s3_upload_mode.as_ref()
    }
}
impl MonitoringS3Output {
    /// Creates a new builder-style object to manufacture [`MonitoringS3Output`](crate::types::MonitoringS3Output).
    pub fn builder() -> crate::types::builders::MonitoringS3OutputBuilder {
        crate::types::builders::MonitoringS3OutputBuilder::default()
    }
}

/// A builder for [`MonitoringS3Output`](crate::types::MonitoringS3Output).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MonitoringS3OutputBuilder {
    pub(crate) s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) local_path: ::std::option::Option<::std::string::String>,
    pub(crate) s3_upload_mode: ::std::option::Option<crate::types::ProcessingS3UploadMode>,
}
impl MonitoringS3OutputBuilder {
    /// <p>A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.</p>
    /// This field is required.
    pub fn s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.</p>
    pub fn set_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p>A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.</p>
    pub fn get_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_uri
    }
    /// <p>The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.</p>
    /// This field is required.
    pub fn local_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.</p>
    pub fn set_local_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_path = input;
        self
    }
    /// <p>The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.</p>
    pub fn get_local_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_path
    }
    /// <p>Whether to upload the results of the monitoring job continuously or after the job completes.</p>
    pub fn s3_upload_mode(mut self, input: crate::types::ProcessingS3UploadMode) -> Self {
        self.s3_upload_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to upload the results of the monitoring job continuously or after the job completes.</p>
    pub fn set_s3_upload_mode(mut self, input: ::std::option::Option<crate::types::ProcessingS3UploadMode>) -> Self {
        self.s3_upload_mode = input;
        self
    }
    /// <p>Whether to upload the results of the monitoring job continuously or after the job completes.</p>
    pub fn get_s3_upload_mode(&self) -> &::std::option::Option<crate::types::ProcessingS3UploadMode> {
        &self.s3_upload_mode
    }
    /// Consumes the builder and constructs a [`MonitoringS3Output`](crate::types::MonitoringS3Output).
    pub fn build(self) -> crate::types::MonitoringS3Output {
        crate::types::MonitoringS3Output {
            s3_uri: self.s3_uri,
            local_path: self.local_path,
            s3_upload_mode: self.s3_upload_mode,
        }
    }
}
