// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Lists a summary of properties of an inference experiment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InferenceExperimentSummary {
    /// <p>The name of the inference experiment.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the inference experiment.</p>
    pub r#type: ::std::option::Option<crate::types::InferenceExperimentType>,
    /// <p>The duration for which the inference experiment ran or will run.</p>
    /// <p>The maximum duration that you can set for an inference experiment is 30 days.</p>
    pub schedule: ::std::option::Option<crate::types::InferenceExperimentSchedule>,
    /// <p>The status of the inference experiment.</p>
    pub status: ::std::option::Option<crate::types::InferenceExperimentStatus>,
    /// <p>The error message for the inference experiment status result.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The description of the inference experiment.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the inference experiment was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp at which the inference experiment was completed.</p>
    pub completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when you last modified the inference experiment.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment. </p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl InferenceExperimentSummary {
    /// <p>The name of the inference experiment.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of the inference experiment.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::InferenceExperimentType> {
        self.r#type.as_ref()
    }
    /// <p>The duration for which the inference experiment ran or will run.</p>
    /// <p>The maximum duration that you can set for an inference experiment is 30 days.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::InferenceExperimentSchedule> {
        self.schedule.as_ref()
    }
    /// <p>The status of the inference experiment.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::InferenceExperimentStatus> {
        self.status.as_ref()
    }
    /// <p>The error message for the inference experiment status result.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The description of the inference experiment.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timestamp at which the inference experiment was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The timestamp at which the inference experiment was completed.</p>
    pub fn completion_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The timestamp when you last modified the inference experiment.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p> The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment. </p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl InferenceExperimentSummary {
    /// Creates a new builder-style object to manufacture [`InferenceExperimentSummary`](crate::types::InferenceExperimentSummary).
    pub fn builder() -> crate::types::builders::InferenceExperimentSummaryBuilder {
        crate::types::builders::InferenceExperimentSummaryBuilder::default()
    }
}

/// A builder for [`InferenceExperimentSummary`](crate::types::InferenceExperimentSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InferenceExperimentSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::InferenceExperimentType>,
    pub(crate) schedule: ::std::option::Option<crate::types::InferenceExperimentSchedule>,
    pub(crate) status: ::std::option::Option<crate::types::InferenceExperimentStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl InferenceExperimentSummaryBuilder {
    /// <p>The name of the inference experiment.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the inference experiment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the inference experiment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the inference experiment.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::InferenceExperimentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the inference experiment.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::InferenceExperimentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the inference experiment.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::InferenceExperimentType> {
        &self.r#type
    }
    /// <p>The duration for which the inference experiment ran or will run.</p>
    /// <p>The maximum duration that you can set for an inference experiment is 30 days.</p>
    pub fn schedule(mut self, input: crate::types::InferenceExperimentSchedule) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration for which the inference experiment ran or will run.</p>
    /// <p>The maximum duration that you can set for an inference experiment is 30 days.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::InferenceExperimentSchedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The duration for which the inference experiment ran or will run.</p>
    /// <p>The maximum duration that you can set for an inference experiment is 30 days.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::InferenceExperimentSchedule> {
        &self.schedule
    }
    /// <p>The status of the inference experiment.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::InferenceExperimentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the inference experiment.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::InferenceExperimentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the inference experiment.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::InferenceExperimentStatus> {
        &self.status
    }
    /// <p>The error message for the inference experiment status result.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message for the inference experiment status result.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The error message for the inference experiment status result.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The description of the inference experiment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the inference experiment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the inference experiment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The timestamp at which the inference experiment was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the inference experiment was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The timestamp at which the inference experiment was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The timestamp at which the inference experiment was completed.</p>
    pub fn completion_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the inference experiment was completed.</p>
    pub fn set_completion_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_time = input;
        self
    }
    /// <p>The timestamp at which the inference experiment was completed.</p>
    pub fn get_completion_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_time
    }
    /// <p>The timestamp when you last modified the inference experiment.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when you last modified the inference experiment.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp when you last modified the inference experiment.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p> The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment. </p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment. </p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p> The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment. </p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`InferenceExperimentSummary`](crate::types::InferenceExperimentSummary).
    pub fn build(self) -> crate::types::InferenceExperimentSummary {
        crate::types::InferenceExperimentSummary {
            name: self.name,
            r#type: self.r#type,
            schedule: self.schedule,
            status: self.status,
            status_reason: self.status_reason,
            description: self.description,
            creation_time: self.creation_time,
            completion_time: self.completion_time,
            last_modified_time: self.last_modified_time,
            role_arn: self.role_arn,
        }
    }
}
