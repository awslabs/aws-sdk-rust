// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies weight and capacity values for a production variant.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DesiredWeightAndCapacity {
    /// <p>The name of the variant to update.</p>
    #[doc(hidden)]
    pub variant_name: std::option::Option<std::string::String>,
    /// <p>The variant's weight.</p>
    #[doc(hidden)]
    pub desired_weight: std::option::Option<f32>,
    /// <p>The variant's capacity.</p>
    #[doc(hidden)]
    pub desired_instance_count: std::option::Option<i32>,
}
impl DesiredWeightAndCapacity {
    /// <p>The name of the variant to update.</p>
    pub fn variant_name(&self) -> std::option::Option<&str> {
        self.variant_name.as_deref()
    }
    /// <p>The variant's weight.</p>
    pub fn desired_weight(&self) -> std::option::Option<f32> {
        self.desired_weight
    }
    /// <p>The variant's capacity.</p>
    pub fn desired_instance_count(&self) -> std::option::Option<i32> {
        self.desired_instance_count
    }
}
impl DesiredWeightAndCapacity {
    /// Creates a new builder-style object to manufacture [`DesiredWeightAndCapacity`](crate::types::DesiredWeightAndCapacity).
    pub fn builder() -> crate::types::builders::DesiredWeightAndCapacityBuilder {
        crate::types::builders::DesiredWeightAndCapacityBuilder::default()
    }
}

/// A builder for [`DesiredWeightAndCapacity`](crate::types::DesiredWeightAndCapacity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DesiredWeightAndCapacityBuilder {
    pub(crate) variant_name: std::option::Option<std::string::String>,
    pub(crate) desired_weight: std::option::Option<f32>,
    pub(crate) desired_instance_count: std::option::Option<i32>,
}
impl DesiredWeightAndCapacityBuilder {
    /// <p>The name of the variant to update.</p>
    pub fn variant_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.variant_name = Some(input.into());
        self
    }
    /// <p>The name of the variant to update.</p>
    pub fn set_variant_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.variant_name = input;
        self
    }
    /// <p>The variant's weight.</p>
    pub fn desired_weight(mut self, input: f32) -> Self {
        self.desired_weight = Some(input);
        self
    }
    /// <p>The variant's weight.</p>
    pub fn set_desired_weight(mut self, input: std::option::Option<f32>) -> Self {
        self.desired_weight = input;
        self
    }
    /// <p>The variant's capacity.</p>
    pub fn desired_instance_count(mut self, input: i32) -> Self {
        self.desired_instance_count = Some(input);
        self
    }
    /// <p>The variant's capacity.</p>
    pub fn set_desired_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.desired_instance_count = input;
        self
    }
    /// Consumes the builder and constructs a [`DesiredWeightAndCapacity`](crate::types::DesiredWeightAndCapacity).
    pub fn build(self) -> crate::types::DesiredWeightAndCapacity {
        crate::types::DesiredWeightAndCapacity {
            variant_name: self.variant_name,
            desired_weight: self.desired_weight,
            desired_instance_count: self.desired_instance_count,
        }
    }
}
