// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The configuration of <code>ShadowMode</code> inference experiment type, which specifies a production variant to take all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant it also specifies the percentage of requests that Amazon SageMaker replicates. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ShadowModeConfig {
    /// <p> The name of the production variant, which takes all the inference requests. </p>
    pub source_model_variant_name: ::std::option::Option<::std::string::String>,
    /// <p>List of shadow variant configurations.</p>
    pub shadow_model_variants: ::std::option::Option<::std::vec::Vec<crate::types::ShadowModelVariantConfig>>,
}
impl ShadowModeConfig {
    /// <p> The name of the production variant, which takes all the inference requests. </p>
    pub fn source_model_variant_name(&self) -> ::std::option::Option<&str> {
        self.source_model_variant_name.as_deref()
    }
    /// <p>List of shadow variant configurations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.shadow_model_variants.is_none()`.
    pub fn shadow_model_variants(&self) -> &[crate::types::ShadowModelVariantConfig] {
        self.shadow_model_variants.as_deref().unwrap_or_default()
    }
}
impl ShadowModeConfig {
    /// Creates a new builder-style object to manufacture [`ShadowModeConfig`](crate::types::ShadowModeConfig).
    pub fn builder() -> crate::types::builders::ShadowModeConfigBuilder {
        crate::types::builders::ShadowModeConfigBuilder::default()
    }
}

/// A builder for [`ShadowModeConfig`](crate::types::ShadowModeConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ShadowModeConfigBuilder {
    pub(crate) source_model_variant_name: ::std::option::Option<::std::string::String>,
    pub(crate) shadow_model_variants: ::std::option::Option<::std::vec::Vec<crate::types::ShadowModelVariantConfig>>,
}
impl ShadowModeConfigBuilder {
    /// <p> The name of the production variant, which takes all the inference requests. </p>
    /// This field is required.
    pub fn source_model_variant_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_model_variant_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the production variant, which takes all the inference requests. </p>
    pub fn set_source_model_variant_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_model_variant_name = input;
        self
    }
    /// <p> The name of the production variant, which takes all the inference requests. </p>
    pub fn get_source_model_variant_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_model_variant_name
    }
    /// Appends an item to `shadow_model_variants`.
    ///
    /// To override the contents of this collection use [`set_shadow_model_variants`](Self::set_shadow_model_variants).
    ///
    /// <p>List of shadow variant configurations.</p>
    pub fn shadow_model_variants(mut self, input: crate::types::ShadowModelVariantConfig) -> Self {
        let mut v = self.shadow_model_variants.unwrap_or_default();
        v.push(input);
        self.shadow_model_variants = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of shadow variant configurations.</p>
    pub fn set_shadow_model_variants(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ShadowModelVariantConfig>>) -> Self {
        self.shadow_model_variants = input;
        self
    }
    /// <p>List of shadow variant configurations.</p>
    pub fn get_shadow_model_variants(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ShadowModelVariantConfig>> {
        &self.shadow_model_variants
    }
    /// Consumes the builder and constructs a [`ShadowModeConfig`](crate::types::ShadowModeConfig).
    pub fn build(self) -> crate::types::ShadowModeConfig {
        crate::types::ShadowModeConfig {
            source_model_variant_name: self.source_model_variant_name,
            shadow_model_variants: self.shadow_model_variants,
        }
    }
}
