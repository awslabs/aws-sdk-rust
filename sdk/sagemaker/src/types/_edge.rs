// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A directed edge connecting two lineage entities.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Edge {
    /// <p>The Amazon Resource Name (ARN) of the source lineage entity of the directed edge.</p>
    #[doc(hidden)]
    pub source_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the destination lineage entity of the directed edge.</p>
    #[doc(hidden)]
    pub destination_arn: std::option::Option<std::string::String>,
    /// <p>The type of the Association(Edge) between the source and destination. For example <code>ContributedTo</code>, <code>Produced</code>, or <code>DerivedFrom</code>.</p>
    #[doc(hidden)]
    pub association_type: std::option::Option<crate::types::AssociationEdgeType>,
}
impl Edge {
    /// <p>The Amazon Resource Name (ARN) of the source lineage entity of the directed edge.</p>
    pub fn source_arn(&self) -> std::option::Option<&str> {
        self.source_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the destination lineage entity of the directed edge.</p>
    pub fn destination_arn(&self) -> std::option::Option<&str> {
        self.destination_arn.as_deref()
    }
    /// <p>The type of the Association(Edge) between the source and destination. For example <code>ContributedTo</code>, <code>Produced</code>, or <code>DerivedFrom</code>.</p>
    pub fn association_type(&self) -> std::option::Option<&crate::types::AssociationEdgeType> {
        self.association_type.as_ref()
    }
}
impl Edge {
    /// Creates a new builder-style object to manufacture [`Edge`](crate::types::Edge).
    pub fn builder() -> crate::types::builders::EdgeBuilder {
        crate::types::builders::EdgeBuilder::default()
    }
}

/// A builder for [`Edge`](crate::types::Edge).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EdgeBuilder {
    pub(crate) source_arn: std::option::Option<std::string::String>,
    pub(crate) destination_arn: std::option::Option<std::string::String>,
    pub(crate) association_type: std::option::Option<crate::types::AssociationEdgeType>,
}
impl EdgeBuilder {
    /// <p>The Amazon Resource Name (ARN) of the source lineage entity of the directed edge.</p>
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source lineage entity of the directed edge.</p>
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the destination lineage entity of the directed edge.</p>
    pub fn destination_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the destination lineage entity of the directed edge.</p>
    pub fn set_destination_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_arn = input;
        self
    }
    /// <p>The type of the Association(Edge) between the source and destination. For example <code>ContributedTo</code>, <code>Produced</code>, or <code>DerivedFrom</code>.</p>
    pub fn association_type(mut self, input: crate::types::AssociationEdgeType) -> Self {
        self.association_type = Some(input);
        self
    }
    /// <p>The type of the Association(Edge) between the source and destination. For example <code>ContributedTo</code>, <code>Produced</code>, or <code>DerivedFrom</code>.</p>
    pub fn set_association_type(
        mut self,
        input: std::option::Option<crate::types::AssociationEdgeType>,
    ) -> Self {
        self.association_type = input;
        self
    }
    /// Consumes the builder and constructs a [`Edge`](crate::types::Edge).
    pub fn build(self) -> crate::types::Edge {
        crate::types::Edge {
            source_arn: self.source_arn,
            destination_arn: self.destination_arn,
            association_type: self.association_type,
        }
    }
}
