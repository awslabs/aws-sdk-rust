// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for <code>Hyperband</code>, a multi-fidelity based hyperparameter tuning strategy. <code>Hyperband</code> uses the final and intermediate results of a training job to dynamically allocate resources to utilized hyperparameter configurations while automatically stopping under-performing configurations. This parameter should be provided only if <code>Hyperband</code> is selected as the <code>StrategyConfig</code> under the <code>HyperParameterTuningJobConfig</code> API.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HyperbandStrategyConfig {
    /// <p>The minimum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. If the value for <code>MinResource</code> has not been reached, the training job will not be stopped by <code>Hyperband</code>.</p>
    #[doc(hidden)]
    pub min_resource: std::option::Option<i32>,
    /// <p>The maximum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. Once a job reaches the <code>MaxResource</code> value, it is stopped. If a value for <code>MaxResource</code> is not provided, and <code>Hyperband</code> is selected as the hyperparameter tuning strategy, <code>HyperbandTrainingJ</code> attempts to infer <code>MaxResource</code> from the following keys (if present) in <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-StaticHyperParameters">StaticsHyperParameters</a>:</p>
    /// <ul>
    /// <li> <p> <code>epochs</code> </p> </li>
    /// <li> <p> <code>numepochs</code> </p> </li>
    /// <li> <p> <code>n-epochs</code> </p> </li>
    /// <li> <p> <code>n_epochs</code> </p> </li>
    /// <li> <p> <code>num_epochs</code> </p> </li>
    /// </ul>
    /// <p>If <code>HyperbandStrategyConfig</code> is unable to infer a value for <code>MaxResource</code>, it generates a validation error. The maximum value is 20,000 epochs. All metrics that correspond to an objective metric are used to derive <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html">early stopping decisions</a>. For <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/distributed-training.html">distributive</a> training jobs, ensure that duplicate metrics are not printed in the logs across the individual nodes in a training job. If multiple nodes are publishing duplicate or incorrect metrics, training jobs may make an incorrect stopping decision and stop the job prematurely. </p>
    #[doc(hidden)]
    pub max_resource: std::option::Option<i32>,
}
impl HyperbandStrategyConfig {
    /// <p>The minimum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. If the value for <code>MinResource</code> has not been reached, the training job will not be stopped by <code>Hyperband</code>.</p>
    pub fn min_resource(&self) -> std::option::Option<i32> {
        self.min_resource
    }
    /// <p>The maximum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. Once a job reaches the <code>MaxResource</code> value, it is stopped. If a value for <code>MaxResource</code> is not provided, and <code>Hyperband</code> is selected as the hyperparameter tuning strategy, <code>HyperbandTrainingJ</code> attempts to infer <code>MaxResource</code> from the following keys (if present) in <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-StaticHyperParameters">StaticsHyperParameters</a>:</p>
    /// <ul>
    /// <li> <p> <code>epochs</code> </p> </li>
    /// <li> <p> <code>numepochs</code> </p> </li>
    /// <li> <p> <code>n-epochs</code> </p> </li>
    /// <li> <p> <code>n_epochs</code> </p> </li>
    /// <li> <p> <code>num_epochs</code> </p> </li>
    /// </ul>
    /// <p>If <code>HyperbandStrategyConfig</code> is unable to infer a value for <code>MaxResource</code>, it generates a validation error. The maximum value is 20,000 epochs. All metrics that correspond to an objective metric are used to derive <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html">early stopping decisions</a>. For <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/distributed-training.html">distributive</a> training jobs, ensure that duplicate metrics are not printed in the logs across the individual nodes in a training job. If multiple nodes are publishing duplicate or incorrect metrics, training jobs may make an incorrect stopping decision and stop the job prematurely. </p>
    pub fn max_resource(&self) -> std::option::Option<i32> {
        self.max_resource
    }
}
impl HyperbandStrategyConfig {
    /// Creates a new builder-style object to manufacture [`HyperbandStrategyConfig`](crate::types::HyperbandStrategyConfig).
    pub fn builder() -> crate::types::builders::HyperbandStrategyConfigBuilder {
        crate::types::builders::HyperbandStrategyConfigBuilder::default()
    }
}

/// A builder for [`HyperbandStrategyConfig`](crate::types::HyperbandStrategyConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HyperbandStrategyConfigBuilder {
    pub(crate) min_resource: std::option::Option<i32>,
    pub(crate) max_resource: std::option::Option<i32>,
}
impl HyperbandStrategyConfigBuilder {
    /// <p>The minimum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. If the value for <code>MinResource</code> has not been reached, the training job will not be stopped by <code>Hyperband</code>.</p>
    pub fn min_resource(mut self, input: i32) -> Self {
        self.min_resource = Some(input);
        self
    }
    /// <p>The minimum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. If the value for <code>MinResource</code> has not been reached, the training job will not be stopped by <code>Hyperband</code>.</p>
    pub fn set_min_resource(mut self, input: std::option::Option<i32>) -> Self {
        self.min_resource = input;
        self
    }
    /// <p>The maximum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. Once a job reaches the <code>MaxResource</code> value, it is stopped. If a value for <code>MaxResource</code> is not provided, and <code>Hyperband</code> is selected as the hyperparameter tuning strategy, <code>HyperbandTrainingJ</code> attempts to infer <code>MaxResource</code> from the following keys (if present) in <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-StaticHyperParameters">StaticsHyperParameters</a>:</p>
    /// <ul>
    /// <li> <p> <code>epochs</code> </p> </li>
    /// <li> <p> <code>numepochs</code> </p> </li>
    /// <li> <p> <code>n-epochs</code> </p> </li>
    /// <li> <p> <code>n_epochs</code> </p> </li>
    /// <li> <p> <code>num_epochs</code> </p> </li>
    /// </ul>
    /// <p>If <code>HyperbandStrategyConfig</code> is unable to infer a value for <code>MaxResource</code>, it generates a validation error. The maximum value is 20,000 epochs. All metrics that correspond to an objective metric are used to derive <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html">early stopping decisions</a>. For <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/distributed-training.html">distributive</a> training jobs, ensure that duplicate metrics are not printed in the logs across the individual nodes in a training job. If multiple nodes are publishing duplicate or incorrect metrics, training jobs may make an incorrect stopping decision and stop the job prematurely. </p>
    pub fn max_resource(mut self, input: i32) -> Self {
        self.max_resource = Some(input);
        self
    }
    /// <p>The maximum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. Once a job reaches the <code>MaxResource</code> value, it is stopped. If a value for <code>MaxResource</code> is not provided, and <code>Hyperband</code> is selected as the hyperparameter tuning strategy, <code>HyperbandTrainingJ</code> attempts to infer <code>MaxResource</code> from the following keys (if present) in <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-StaticHyperParameters">StaticsHyperParameters</a>:</p>
    /// <ul>
    /// <li> <p> <code>epochs</code> </p> </li>
    /// <li> <p> <code>numepochs</code> </p> </li>
    /// <li> <p> <code>n-epochs</code> </p> </li>
    /// <li> <p> <code>n_epochs</code> </p> </li>
    /// <li> <p> <code>num_epochs</code> </p> </li>
    /// </ul>
    /// <p>If <code>HyperbandStrategyConfig</code> is unable to infer a value for <code>MaxResource</code>, it generates a validation error. The maximum value is 20,000 epochs. All metrics that correspond to an objective metric are used to derive <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html">early stopping decisions</a>. For <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/distributed-training.html">distributive</a> training jobs, ensure that duplicate metrics are not printed in the logs across the individual nodes in a training job. If multiple nodes are publishing duplicate or incorrect metrics, training jobs may make an incorrect stopping decision and stop the job prematurely. </p>
    pub fn set_max_resource(mut self, input: std::option::Option<i32>) -> Self {
        self.max_resource = input;
        self
    }
    /// Consumes the builder and constructs a [`HyperbandStrategyConfig`](crate::types::HyperbandStrategyConfig).
    pub fn build(self) -> crate::types::HyperbandStrategyConfig {
        crate::types::HyperbandStrategyConfig {
            min_resource: self.min_resource,
            max_resource: self.max_resource,
        }
    }
}
