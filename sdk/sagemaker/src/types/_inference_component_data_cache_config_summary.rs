// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings that affect how the inference component caches data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InferenceComponentDataCacheConfigSummary {
    /// <p>Indicates whether the inference component caches model artifacts as part of the auto scaling process.</p>
    pub enable_caching: ::std::option::Option<bool>,
}
impl InferenceComponentDataCacheConfigSummary {
    /// <p>Indicates whether the inference component caches model artifacts as part of the auto scaling process.</p>
    pub fn enable_caching(&self) -> ::std::option::Option<bool> {
        self.enable_caching
    }
}
impl InferenceComponentDataCacheConfigSummary {
    /// Creates a new builder-style object to manufacture [`InferenceComponentDataCacheConfigSummary`](crate::types::InferenceComponentDataCacheConfigSummary).
    pub fn builder() -> crate::types::builders::InferenceComponentDataCacheConfigSummaryBuilder {
        crate::types::builders::InferenceComponentDataCacheConfigSummaryBuilder::default()
    }
}

/// A builder for [`InferenceComponentDataCacheConfigSummary`](crate::types::InferenceComponentDataCacheConfigSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InferenceComponentDataCacheConfigSummaryBuilder {
    pub(crate) enable_caching: ::std::option::Option<bool>,
}
impl InferenceComponentDataCacheConfigSummaryBuilder {
    /// <p>Indicates whether the inference component caches model artifacts as part of the auto scaling process.</p>
    /// This field is required.
    pub fn enable_caching(mut self, input: bool) -> Self {
        self.enable_caching = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the inference component caches model artifacts as part of the auto scaling process.</p>
    pub fn set_enable_caching(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_caching = input;
        self
    }
    /// <p>Indicates whether the inference component caches model artifacts as part of the auto scaling process.</p>
    pub fn get_enable_caching(&self) -> &::std::option::Option<bool> {
        &self.enable_caching
    }
    /// Consumes the builder and constructs a [`InferenceComponentDataCacheConfigSummary`](crate::types::InferenceComponentDataCacheConfigSummary).
    pub fn build(self) -> crate::types::InferenceComponentDataCacheConfigSummary {
        crate::types::InferenceComponentDataCacheConfigSummary {
            enable_caching: self.enable_caching,
        }
    }
}
