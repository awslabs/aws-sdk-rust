// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProcessingStoppingCondition {
    /// <p>Specifies the maximum runtime in seconds.</p>
    #[doc(hidden)]
    pub max_runtime_in_seconds: i32,
}
impl ProcessingStoppingCondition {
    /// <p>Specifies the maximum runtime in seconds.</p>
    pub fn max_runtime_in_seconds(&self) -> i32 {
        self.max_runtime_in_seconds
    }
}
impl ProcessingStoppingCondition {
    /// Creates a new builder-style object to manufacture [`ProcessingStoppingCondition`](crate::types::ProcessingStoppingCondition).
    pub fn builder() -> crate::types::builders::ProcessingStoppingConditionBuilder {
        crate::types::builders::ProcessingStoppingConditionBuilder::default()
    }
}

/// A builder for [`ProcessingStoppingCondition`](crate::types::ProcessingStoppingCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProcessingStoppingConditionBuilder {
    pub(crate) max_runtime_in_seconds: std::option::Option<i32>,
}
impl ProcessingStoppingConditionBuilder {
    /// <p>Specifies the maximum runtime in seconds.</p>
    pub fn max_runtime_in_seconds(mut self, input: i32) -> Self {
        self.max_runtime_in_seconds = Some(input);
        self
    }
    /// <p>Specifies the maximum runtime in seconds.</p>
    pub fn set_max_runtime_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.max_runtime_in_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`ProcessingStoppingCondition`](crate::types::ProcessingStoppingCondition).
    pub fn build(self) -> crate::types::ProcessingStoppingCondition {
        crate::types::ProcessingStoppingCondition {
            max_runtime_in_seconds: self.max_runtime_in_seconds.unwrap_or_default(),
        }
    }
}
