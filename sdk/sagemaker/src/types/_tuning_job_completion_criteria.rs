// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The job completion criteria.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TuningJobCompletionCriteria {
    /// <p>The value of the objective metric.</p>
    #[doc(hidden)]
    pub target_objective_metric_value: std::option::Option<f32>,
}
impl TuningJobCompletionCriteria {
    /// <p>The value of the objective metric.</p>
    pub fn target_objective_metric_value(&self) -> std::option::Option<f32> {
        self.target_objective_metric_value
    }
}
impl TuningJobCompletionCriteria {
    /// Creates a new builder-style object to manufacture [`TuningJobCompletionCriteria`](crate::types::TuningJobCompletionCriteria).
    pub fn builder() -> crate::types::builders::TuningJobCompletionCriteriaBuilder {
        crate::types::builders::TuningJobCompletionCriteriaBuilder::default()
    }
}

/// A builder for [`TuningJobCompletionCriteria`](crate::types::TuningJobCompletionCriteria).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TuningJobCompletionCriteriaBuilder {
    pub(crate) target_objective_metric_value: std::option::Option<f32>,
}
impl TuningJobCompletionCriteriaBuilder {
    /// <p>The value of the objective metric.</p>
    pub fn target_objective_metric_value(mut self, input: f32) -> Self {
        self.target_objective_metric_value = Some(input);
        self
    }
    /// <p>The value of the objective metric.</p>
    pub fn set_target_objective_metric_value(mut self, input: std::option::Option<f32>) -> Self {
        self.target_objective_metric_value = input;
        self
    }
    /// Consumes the builder and constructs a [`TuningJobCompletionCriteria`](crate::types::TuningJobCompletionCriteria).
    pub fn build(self) -> crate::types::TuningJobCompletionCriteria {
        crate::types::TuningJobCompletionCriteria {
            target_objective_metric_value: self.target_objective_metric_value,
        }
    }
}
