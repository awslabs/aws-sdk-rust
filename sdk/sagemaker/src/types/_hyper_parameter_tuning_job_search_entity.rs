// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An entity returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html">SearchRecord</a> API containing the properties of a hyperparameter tuning job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HyperParameterTuningJobSearchEntity {
    /// <p>The name of a hyperparameter tuning job.</p>
    pub hyper_parameter_tuning_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a hyperparameter tuning job.</p>
    pub hyper_parameter_tuning_job_arn: ::std::option::Option<::std::string::String>,
    /// <p>Configures a hyperparameter tuning job.</p>
    pub hyper_parameter_tuning_job_config: ::std::option::Option<crate::types::HyperParameterTuningJobConfig>,
    /// <p>Defines the training jobs launched by a hyperparameter tuning job.</p>
    pub training_job_definition: ::std::option::Option<crate::types::HyperParameterTrainingJobDefinition>,
    /// <p>The job definitions included in a hyperparameter tuning job.</p>
    pub training_job_definitions: ::std::option::Option<::std::vec::Vec<crate::types::HyperParameterTrainingJobDefinition>>,
    /// <p>The status of a hyperparameter tuning job.</p>
    pub hyper_parameter_tuning_job_status: ::std::option::Option<crate::types::HyperParameterTuningJobStatus>,
    /// <p>The time that a hyperparameter tuning job was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that a hyperparameter tuning job ended.</p>
    pub hyper_parameter_tuning_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that a hyperparameter tuning job was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.</p>
    pub training_job_status_counters: ::std::option::Option<crate::types::TrainingJobStatusCounters>,
    /// <p>Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.</p>
    pub objective_status_counters: ::std::option::Option<crate::types::ObjectiveStatusCounters>,
    /// <p>The container for the summary information about a training job.</p>
    pub best_training_job: ::std::option::Option<crate::types::HyperParameterTrainingJobSummary>,
    /// <p>The container for the summary information about a training job.</p>
    pub overall_best_training_job: ::std::option::Option<crate::types::HyperParameterTrainingJobSummary>,
    /// <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p>
    /// <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note>
    /// <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p>
    /// </note>
    pub warm_start_config: ::std::option::Option<crate::types::HyperParameterTuningJobWarmStartConfig>,
    /// <p>The error that was created when a hyperparameter tuning job failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The tags associated with a hyperparameter tuning job. For more information see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Information about either a current or completed hyperparameter tuning job.</p>
    pub tuning_job_completion_details: ::std::option::Option<crate::types::HyperParameterTuningJobCompletionDetails>,
    /// <p>The total amount of resources consumed by a hyperparameter tuning job.</p>
    pub consumed_resources: ::std::option::Option<crate::types::HyperParameterTuningJobConsumedResources>,
}
impl HyperParameterTuningJobSearchEntity {
    /// <p>The name of a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job_name(&self) -> ::std::option::Option<&str> {
        self.hyper_parameter_tuning_job_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job_arn(&self) -> ::std::option::Option<&str> {
        self.hyper_parameter_tuning_job_arn.as_deref()
    }
    /// <p>Configures a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job_config(&self) -> ::std::option::Option<&crate::types::HyperParameterTuningJobConfig> {
        self.hyper_parameter_tuning_job_config.as_ref()
    }
    /// <p>Defines the training jobs launched by a hyperparameter tuning job.</p>
    pub fn training_job_definition(&self) -> ::std::option::Option<&crate::types::HyperParameterTrainingJobDefinition> {
        self.training_job_definition.as_ref()
    }
    /// <p>The job definitions included in a hyperparameter tuning job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.training_job_definitions.is_none()`.
    pub fn training_job_definitions(&self) -> &[crate::types::HyperParameterTrainingJobDefinition] {
        self.training_job_definitions.as_deref().unwrap_or_default()
    }
    /// <p>The status of a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job_status(&self) -> ::std::option::Option<&crate::types::HyperParameterTuningJobStatus> {
        self.hyper_parameter_tuning_job_status.as_ref()
    }
    /// <p>The time that a hyperparameter tuning job was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time that a hyperparameter tuning job ended.</p>
    pub fn hyper_parameter_tuning_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.hyper_parameter_tuning_end_time.as_ref()
    }
    /// <p>The time that a hyperparameter tuning job was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.</p>
    pub fn training_job_status_counters(&self) -> ::std::option::Option<&crate::types::TrainingJobStatusCounters> {
        self.training_job_status_counters.as_ref()
    }
    /// <p>Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.</p>
    pub fn objective_status_counters(&self) -> ::std::option::Option<&crate::types::ObjectiveStatusCounters> {
        self.objective_status_counters.as_ref()
    }
    /// <p>The container for the summary information about a training job.</p>
    pub fn best_training_job(&self) -> ::std::option::Option<&crate::types::HyperParameterTrainingJobSummary> {
        self.best_training_job.as_ref()
    }
    /// <p>The container for the summary information about a training job.</p>
    pub fn overall_best_training_job(&self) -> ::std::option::Option<&crate::types::HyperParameterTrainingJobSummary> {
        self.overall_best_training_job.as_ref()
    }
    /// <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p>
    /// <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note>
    /// <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p>
    /// </note>
    pub fn warm_start_config(&self) -> ::std::option::Option<&crate::types::HyperParameterTuningJobWarmStartConfig> {
        self.warm_start_config.as_ref()
    }
    /// <p>The error that was created when a hyperparameter tuning job failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The tags associated with a hyperparameter tuning job. For more information see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Information about either a current or completed hyperparameter tuning job.</p>
    pub fn tuning_job_completion_details(&self) -> ::std::option::Option<&crate::types::HyperParameterTuningJobCompletionDetails> {
        self.tuning_job_completion_details.as_ref()
    }
    /// <p>The total amount of resources consumed by a hyperparameter tuning job.</p>
    pub fn consumed_resources(&self) -> ::std::option::Option<&crate::types::HyperParameterTuningJobConsumedResources> {
        self.consumed_resources.as_ref()
    }
}
impl HyperParameterTuningJobSearchEntity {
    /// Creates a new builder-style object to manufacture [`HyperParameterTuningJobSearchEntity`](crate::types::HyperParameterTuningJobSearchEntity).
    pub fn builder() -> crate::types::builders::HyperParameterTuningJobSearchEntityBuilder {
        crate::types::builders::HyperParameterTuningJobSearchEntityBuilder::default()
    }
}

/// A builder for [`HyperParameterTuningJobSearchEntity`](crate::types::HyperParameterTuningJobSearchEntity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HyperParameterTuningJobSearchEntityBuilder {
    pub(crate) hyper_parameter_tuning_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) hyper_parameter_tuning_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) hyper_parameter_tuning_job_config: ::std::option::Option<crate::types::HyperParameterTuningJobConfig>,
    pub(crate) training_job_definition: ::std::option::Option<crate::types::HyperParameterTrainingJobDefinition>,
    pub(crate) training_job_definitions: ::std::option::Option<::std::vec::Vec<crate::types::HyperParameterTrainingJobDefinition>>,
    pub(crate) hyper_parameter_tuning_job_status: ::std::option::Option<crate::types::HyperParameterTuningJobStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) hyper_parameter_tuning_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) training_job_status_counters: ::std::option::Option<crate::types::TrainingJobStatusCounters>,
    pub(crate) objective_status_counters: ::std::option::Option<crate::types::ObjectiveStatusCounters>,
    pub(crate) best_training_job: ::std::option::Option<crate::types::HyperParameterTrainingJobSummary>,
    pub(crate) overall_best_training_job: ::std::option::Option<crate::types::HyperParameterTrainingJobSummary>,
    pub(crate) warm_start_config: ::std::option::Option<crate::types::HyperParameterTuningJobWarmStartConfig>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) tuning_job_completion_details: ::std::option::Option<crate::types::HyperParameterTuningJobCompletionDetails>,
    pub(crate) consumed_resources: ::std::option::Option<crate::types::HyperParameterTuningJobConsumedResources>,
}
impl HyperParameterTuningJobSearchEntityBuilder {
    /// <p>The name of a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hyper_parameter_tuning_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a hyperparameter tuning job.</p>
    pub fn set_hyper_parameter_tuning_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hyper_parameter_tuning_job_name = input;
        self
    }
    /// <p>The name of a hyperparameter tuning job.</p>
    pub fn get_hyper_parameter_tuning_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hyper_parameter_tuning_job_name
    }
    /// <p>The Amazon Resource Name (ARN) of a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hyper_parameter_tuning_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a hyperparameter tuning job.</p>
    pub fn set_hyper_parameter_tuning_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hyper_parameter_tuning_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a hyperparameter tuning job.</p>
    pub fn get_hyper_parameter_tuning_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.hyper_parameter_tuning_job_arn
    }
    /// <p>Configures a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job_config(mut self, input: crate::types::HyperParameterTuningJobConfig) -> Self {
        self.hyper_parameter_tuning_job_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures a hyperparameter tuning job.</p>
    pub fn set_hyper_parameter_tuning_job_config(mut self, input: ::std::option::Option<crate::types::HyperParameterTuningJobConfig>) -> Self {
        self.hyper_parameter_tuning_job_config = input;
        self
    }
    /// <p>Configures a hyperparameter tuning job.</p>
    pub fn get_hyper_parameter_tuning_job_config(&self) -> &::std::option::Option<crate::types::HyperParameterTuningJobConfig> {
        &self.hyper_parameter_tuning_job_config
    }
    /// <p>Defines the training jobs launched by a hyperparameter tuning job.</p>
    pub fn training_job_definition(mut self, input: crate::types::HyperParameterTrainingJobDefinition) -> Self {
        self.training_job_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the training jobs launched by a hyperparameter tuning job.</p>
    pub fn set_training_job_definition(mut self, input: ::std::option::Option<crate::types::HyperParameterTrainingJobDefinition>) -> Self {
        self.training_job_definition = input;
        self
    }
    /// <p>Defines the training jobs launched by a hyperparameter tuning job.</p>
    pub fn get_training_job_definition(&self) -> &::std::option::Option<crate::types::HyperParameterTrainingJobDefinition> {
        &self.training_job_definition
    }
    /// Appends an item to `training_job_definitions`.
    ///
    /// To override the contents of this collection use [`set_training_job_definitions`](Self::set_training_job_definitions).
    ///
    /// <p>The job definitions included in a hyperparameter tuning job.</p>
    pub fn training_job_definitions(mut self, input: crate::types::HyperParameterTrainingJobDefinition) -> Self {
        let mut v = self.training_job_definitions.unwrap_or_default();
        v.push(input);
        self.training_job_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The job definitions included in a hyperparameter tuning job.</p>
    pub fn set_training_job_definitions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::HyperParameterTrainingJobDefinition>>,
    ) -> Self {
        self.training_job_definitions = input;
        self
    }
    /// <p>The job definitions included in a hyperparameter tuning job.</p>
    pub fn get_training_job_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HyperParameterTrainingJobDefinition>> {
        &self.training_job_definitions
    }
    /// <p>The status of a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job_status(mut self, input: crate::types::HyperParameterTuningJobStatus) -> Self {
        self.hyper_parameter_tuning_job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a hyperparameter tuning job.</p>
    pub fn set_hyper_parameter_tuning_job_status(mut self, input: ::std::option::Option<crate::types::HyperParameterTuningJobStatus>) -> Self {
        self.hyper_parameter_tuning_job_status = input;
        self
    }
    /// <p>The status of a hyperparameter tuning job.</p>
    pub fn get_hyper_parameter_tuning_job_status(&self) -> &::std::option::Option<crate::types::HyperParameterTuningJobStatus> {
        &self.hyper_parameter_tuning_job_status
    }
    /// <p>The time that a hyperparameter tuning job was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that a hyperparameter tuning job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that a hyperparameter tuning job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time that a hyperparameter tuning job ended.</p>
    pub fn hyper_parameter_tuning_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.hyper_parameter_tuning_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that a hyperparameter tuning job ended.</p>
    pub fn set_hyper_parameter_tuning_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.hyper_parameter_tuning_end_time = input;
        self
    }
    /// <p>The time that a hyperparameter tuning job ended.</p>
    pub fn get_hyper_parameter_tuning_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.hyper_parameter_tuning_end_time
    }
    /// <p>The time that a hyperparameter tuning job was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that a hyperparameter tuning job was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The time that a hyperparameter tuning job was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.</p>
    pub fn training_job_status_counters(mut self, input: crate::types::TrainingJobStatusCounters) -> Self {
        self.training_job_status_counters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.</p>
    pub fn set_training_job_status_counters(mut self, input: ::std::option::Option<crate::types::TrainingJobStatusCounters>) -> Self {
        self.training_job_status_counters = input;
        self
    }
    /// <p>The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.</p>
    pub fn get_training_job_status_counters(&self) -> &::std::option::Option<crate::types::TrainingJobStatusCounters> {
        &self.training_job_status_counters
    }
    /// <p>Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.</p>
    pub fn objective_status_counters(mut self, input: crate::types::ObjectiveStatusCounters) -> Self {
        self.objective_status_counters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.</p>
    pub fn set_objective_status_counters(mut self, input: ::std::option::Option<crate::types::ObjectiveStatusCounters>) -> Self {
        self.objective_status_counters = input;
        self
    }
    /// <p>Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.</p>
    pub fn get_objective_status_counters(&self) -> &::std::option::Option<crate::types::ObjectiveStatusCounters> {
        &self.objective_status_counters
    }
    /// <p>The container for the summary information about a training job.</p>
    pub fn best_training_job(mut self, input: crate::types::HyperParameterTrainingJobSummary) -> Self {
        self.best_training_job = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the summary information about a training job.</p>
    pub fn set_best_training_job(mut self, input: ::std::option::Option<crate::types::HyperParameterTrainingJobSummary>) -> Self {
        self.best_training_job = input;
        self
    }
    /// <p>The container for the summary information about a training job.</p>
    pub fn get_best_training_job(&self) -> &::std::option::Option<crate::types::HyperParameterTrainingJobSummary> {
        &self.best_training_job
    }
    /// <p>The container for the summary information about a training job.</p>
    pub fn overall_best_training_job(mut self, input: crate::types::HyperParameterTrainingJobSummary) -> Self {
        self.overall_best_training_job = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the summary information about a training job.</p>
    pub fn set_overall_best_training_job(mut self, input: ::std::option::Option<crate::types::HyperParameterTrainingJobSummary>) -> Self {
        self.overall_best_training_job = input;
        self
    }
    /// <p>The container for the summary information about a training job.</p>
    pub fn get_overall_best_training_job(&self) -> &::std::option::Option<crate::types::HyperParameterTrainingJobSummary> {
        &self.overall_best_training_job
    }
    /// <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p>
    /// <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note>
    /// <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p>
    /// </note>
    pub fn warm_start_config(mut self, input: crate::types::HyperParameterTuningJobWarmStartConfig) -> Self {
        self.warm_start_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p>
    /// <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note>
    /// <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p>
    /// </note>
    pub fn set_warm_start_config(mut self, input: ::std::option::Option<crate::types::HyperParameterTuningJobWarmStartConfig>) -> Self {
        self.warm_start_config = input;
        self
    }
    /// <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p>
    /// <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note>
    /// <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p>
    /// </note>
    pub fn get_warm_start_config(&self) -> &::std::option::Option<crate::types::HyperParameterTuningJobWarmStartConfig> {
        &self.warm_start_config
    }
    /// <p>The error that was created when a hyperparameter tuning job failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error that was created when a hyperparameter tuning job failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The error that was created when a hyperparameter tuning job failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with a hyperparameter tuning job. For more information see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with a hyperparameter tuning job. For more information see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with a hyperparameter tuning job. For more information see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Information about either a current or completed hyperparameter tuning job.</p>
    pub fn tuning_job_completion_details(mut self, input: crate::types::HyperParameterTuningJobCompletionDetails) -> Self {
        self.tuning_job_completion_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about either a current or completed hyperparameter tuning job.</p>
    pub fn set_tuning_job_completion_details(mut self, input: ::std::option::Option<crate::types::HyperParameterTuningJobCompletionDetails>) -> Self {
        self.tuning_job_completion_details = input;
        self
    }
    /// <p>Information about either a current or completed hyperparameter tuning job.</p>
    pub fn get_tuning_job_completion_details(&self) -> &::std::option::Option<crate::types::HyperParameterTuningJobCompletionDetails> {
        &self.tuning_job_completion_details
    }
    /// <p>The total amount of resources consumed by a hyperparameter tuning job.</p>
    pub fn consumed_resources(mut self, input: crate::types::HyperParameterTuningJobConsumedResources) -> Self {
        self.consumed_resources = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total amount of resources consumed by a hyperparameter tuning job.</p>
    pub fn set_consumed_resources(mut self, input: ::std::option::Option<crate::types::HyperParameterTuningJobConsumedResources>) -> Self {
        self.consumed_resources = input;
        self
    }
    /// <p>The total amount of resources consumed by a hyperparameter tuning job.</p>
    pub fn get_consumed_resources(&self) -> &::std::option::Option<crate::types::HyperParameterTuningJobConsumedResources> {
        &self.consumed_resources
    }
    /// Consumes the builder and constructs a [`HyperParameterTuningJobSearchEntity`](crate::types::HyperParameterTuningJobSearchEntity).
    pub fn build(self) -> crate::types::HyperParameterTuningJobSearchEntity {
        crate::types::HyperParameterTuningJobSearchEntity {
            hyper_parameter_tuning_job_name: self.hyper_parameter_tuning_job_name,
            hyper_parameter_tuning_job_arn: self.hyper_parameter_tuning_job_arn,
            hyper_parameter_tuning_job_config: self.hyper_parameter_tuning_job_config,
            training_job_definition: self.training_job_definition,
            training_job_definitions: self.training_job_definitions,
            hyper_parameter_tuning_job_status: self.hyper_parameter_tuning_job_status,
            creation_time: self.creation_time,
            hyper_parameter_tuning_end_time: self.hyper_parameter_tuning_end_time,
            last_modified_time: self.last_modified_time,
            training_job_status_counters: self.training_job_status_counters,
            objective_status_counters: self.objective_status_counters,
            best_training_job: self.best_training_job,
            overall_best_training_job: self.overall_best_training_job,
            warm_start_config: self.warm_start_config,
            failure_reason: self.failure_reason,
            tags: self.tags,
            tuning_job_completion_details: self.tuning_job_completion_details,
            consumed_resources: self.consumed_resources,
        }
    }
}
