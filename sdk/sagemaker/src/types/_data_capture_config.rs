// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration to control how SageMaker captures inference data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataCaptureConfig {
    /// <p>Whether data capture should be enabled or disabled (defaults to enabled).</p>
    pub enable_capture: ::std::option::Option<bool>,
    /// <p>The percentage of requests SageMaker will capture. A lower value is recommended for Endpoints with high traffic.</p>
    pub initial_sampling_percentage: ::std::option::Option<i32>,
    /// <p>The Amazon S3 location used to capture the data.</p>
    pub destination_s3_uri: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an Key Management Service key that SageMaker uses to encrypt the captured data at rest using Amazon S3 server-side encryption.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies data Model Monitor will capture. You can configure whether to collect only input, only output, or both</p>
    pub capture_options: ::std::option::Option<::std::vec::Vec<crate::types::CaptureOption>>,
    /// <p>Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.</p>
    pub capture_content_type_header: ::std::option::Option<crate::types::CaptureContentTypeHeader>,
}
impl DataCaptureConfig {
    /// <p>Whether data capture should be enabled or disabled (defaults to enabled).</p>
    pub fn enable_capture(&self) -> ::std::option::Option<bool> {
        self.enable_capture
    }
    /// <p>The percentage of requests SageMaker will capture. A lower value is recommended for Endpoints with high traffic.</p>
    pub fn initial_sampling_percentage(&self) -> ::std::option::Option<i32> {
        self.initial_sampling_percentage
    }
    /// <p>The Amazon S3 location used to capture the data.</p>
    pub fn destination_s3_uri(&self) -> ::std::option::Option<&str> {
        self.destination_s3_uri.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an Key Management Service key that SageMaker uses to encrypt the captured data at rest using Amazon S3 server-side encryption.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Specifies data Model Monitor will capture. You can configure whether to collect only input, only output, or both</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capture_options.is_none()`.
    pub fn capture_options(&self) -> &[crate::types::CaptureOption] {
        self.capture_options.as_deref().unwrap_or_default()
    }
    /// <p>Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.</p>
    pub fn capture_content_type_header(&self) -> ::std::option::Option<&crate::types::CaptureContentTypeHeader> {
        self.capture_content_type_header.as_ref()
    }
}
impl DataCaptureConfig {
    /// Creates a new builder-style object to manufacture [`DataCaptureConfig`](crate::types::DataCaptureConfig).
    pub fn builder() -> crate::types::builders::DataCaptureConfigBuilder {
        crate::types::builders::DataCaptureConfigBuilder::default()
    }
}

/// A builder for [`DataCaptureConfig`](crate::types::DataCaptureConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataCaptureConfigBuilder {
    pub(crate) enable_capture: ::std::option::Option<bool>,
    pub(crate) initial_sampling_percentage: ::std::option::Option<i32>,
    pub(crate) destination_s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) capture_options: ::std::option::Option<::std::vec::Vec<crate::types::CaptureOption>>,
    pub(crate) capture_content_type_header: ::std::option::Option<crate::types::CaptureContentTypeHeader>,
}
impl DataCaptureConfigBuilder {
    /// <p>Whether data capture should be enabled or disabled (defaults to enabled).</p>
    pub fn enable_capture(mut self, input: bool) -> Self {
        self.enable_capture = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether data capture should be enabled or disabled (defaults to enabled).</p>
    pub fn set_enable_capture(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_capture = input;
        self
    }
    /// <p>Whether data capture should be enabled or disabled (defaults to enabled).</p>
    pub fn get_enable_capture(&self) -> &::std::option::Option<bool> {
        &self.enable_capture
    }
    /// <p>The percentage of requests SageMaker will capture. A lower value is recommended for Endpoints with high traffic.</p>
    /// This field is required.
    pub fn initial_sampling_percentage(mut self, input: i32) -> Self {
        self.initial_sampling_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of requests SageMaker will capture. A lower value is recommended for Endpoints with high traffic.</p>
    pub fn set_initial_sampling_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.initial_sampling_percentage = input;
        self
    }
    /// <p>The percentage of requests SageMaker will capture. A lower value is recommended for Endpoints with high traffic.</p>
    pub fn get_initial_sampling_percentage(&self) -> &::std::option::Option<i32> {
        &self.initial_sampling_percentage
    }
    /// <p>The Amazon S3 location used to capture the data.</p>
    /// This field is required.
    pub fn destination_s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 location used to capture the data.</p>
    pub fn set_destination_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_s3_uri = input;
        self
    }
    /// <p>The Amazon S3 location used to capture the data.</p>
    pub fn get_destination_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_s3_uri
    }
    /// <p>The Amazon Resource Name (ARN) of an Key Management Service key that SageMaker uses to encrypt the captured data at rest using Amazon S3 server-side encryption.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Key Management Service key that SageMaker uses to encrypt the captured data at rest using Amazon S3 server-side encryption.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Key Management Service key that SageMaker uses to encrypt the captured data at rest using Amazon S3 server-side encryption.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Appends an item to `capture_options`.
    ///
    /// To override the contents of this collection use [`set_capture_options`](Self::set_capture_options).
    ///
    /// <p>Specifies data Model Monitor will capture. You can configure whether to collect only input, only output, or both</p>
    pub fn capture_options(mut self, input: crate::types::CaptureOption) -> Self {
        let mut v = self.capture_options.unwrap_or_default();
        v.push(input);
        self.capture_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies data Model Monitor will capture. You can configure whether to collect only input, only output, or both</p>
    pub fn set_capture_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CaptureOption>>) -> Self {
        self.capture_options = input;
        self
    }
    /// <p>Specifies data Model Monitor will capture. You can configure whether to collect only input, only output, or both</p>
    pub fn get_capture_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CaptureOption>> {
        &self.capture_options
    }
    /// <p>Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.</p>
    pub fn capture_content_type_header(mut self, input: crate::types::CaptureContentTypeHeader) -> Self {
        self.capture_content_type_header = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.</p>
    pub fn set_capture_content_type_header(mut self, input: ::std::option::Option<crate::types::CaptureContentTypeHeader>) -> Self {
        self.capture_content_type_header = input;
        self
    }
    /// <p>Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.</p>
    pub fn get_capture_content_type_header(&self) -> &::std::option::Option<crate::types::CaptureContentTypeHeader> {
        &self.capture_content_type_header
    }
    /// Consumes the builder and constructs a [`DataCaptureConfig`](crate::types::DataCaptureConfig).
    pub fn build(self) -> crate::types::DataCaptureConfig {
        crate::types::DataCaptureConfig {
            enable_capture: self.enable_capture,
            initial_sampling_percentage: self.initial_sampling_percentage,
            destination_s3_uri: self.destination_s3_uri,
            kms_key_id: self.kms_key_id,
            capture_options: self.capture_options,
            capture_content_type_header: self.capture_content_type_header,
        }
    }
}
