// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single resource returned as part of the <code>Search</code> API response.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchRecord {
    /// <p>The properties of a training job.</p>
    #[doc(hidden)]
    pub training_job: std::option::Option<crate::types::TrainingJob>,
    /// <p>The properties of an experiment.</p>
    #[doc(hidden)]
    pub experiment: std::option::Option<crate::types::Experiment>,
    /// <p>The properties of a trial.</p>
    #[doc(hidden)]
    pub trial: std::option::Option<crate::types::Trial>,
    /// <p>The properties of a trial component.</p>
    #[doc(hidden)]
    pub trial_component: std::option::Option<crate::types::TrialComponent>,
    /// <p>A hosted endpoint for real-time inference.</p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<crate::types::Endpoint>,
    /// <p>A versioned model that can be deployed for SageMaker inference.</p>
    #[doc(hidden)]
    pub model_package: std::option::Option<crate::types::ModelPackage>,
    /// <p>A group of versioned models in the model registry.</p>
    #[doc(hidden)]
    pub model_package_group: std::option::Option<crate::types::ModelPackageGroup>,
    /// <p>A SageMaker Model Building Pipeline instance.</p>
    #[doc(hidden)]
    pub pipeline: std::option::Option<crate::types::Pipeline>,
    /// <p>An execution of a pipeline.</p>
    #[doc(hidden)]
    pub pipeline_execution: std::option::Option<crate::types::PipelineExecution>,
    /// <p>Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.</p>
    #[doc(hidden)]
    pub feature_group: std::option::Option<crate::types::FeatureGroup>,
    /// <p>The properties of a project.</p>
    #[doc(hidden)]
    pub project: std::option::Option<crate::types::Project>,
    /// <p>The feature metadata used to search through the features.</p>
    #[doc(hidden)]
    pub feature_metadata: std::option::Option<crate::types::FeatureMetadata>,
    /// <p>The properties of a hyperparameter tuning job.</p>
    #[doc(hidden)]
    pub hyper_parameter_tuning_job:
        std::option::Option<crate::types::HyperParameterTuningJobSearchEntity>,
    /// <p>A model displayed in the Amazon SageMaker Model Dashboard.</p>
    #[doc(hidden)]
    pub model: std::option::Option<crate::types::ModelDashboardModel>,
    /// <p>An Amazon SageMaker Model Card that documents details about a machine learning model.</p>
    #[doc(hidden)]
    pub model_card: std::option::Option<crate::types::ModelCard>,
}
impl SearchRecord {
    /// <p>The properties of a training job.</p>
    pub fn training_job(&self) -> std::option::Option<&crate::types::TrainingJob> {
        self.training_job.as_ref()
    }
    /// <p>The properties of an experiment.</p>
    pub fn experiment(&self) -> std::option::Option<&crate::types::Experiment> {
        self.experiment.as_ref()
    }
    /// <p>The properties of a trial.</p>
    pub fn trial(&self) -> std::option::Option<&crate::types::Trial> {
        self.trial.as_ref()
    }
    /// <p>The properties of a trial component.</p>
    pub fn trial_component(&self) -> std::option::Option<&crate::types::TrialComponent> {
        self.trial_component.as_ref()
    }
    /// <p>A hosted endpoint for real-time inference.</p>
    pub fn endpoint(&self) -> std::option::Option<&crate::types::Endpoint> {
        self.endpoint.as_ref()
    }
    /// <p>A versioned model that can be deployed for SageMaker inference.</p>
    pub fn model_package(&self) -> std::option::Option<&crate::types::ModelPackage> {
        self.model_package.as_ref()
    }
    /// <p>A group of versioned models in the model registry.</p>
    pub fn model_package_group(&self) -> std::option::Option<&crate::types::ModelPackageGroup> {
        self.model_package_group.as_ref()
    }
    /// <p>A SageMaker Model Building Pipeline instance.</p>
    pub fn pipeline(&self) -> std::option::Option<&crate::types::Pipeline> {
        self.pipeline.as_ref()
    }
    /// <p>An execution of a pipeline.</p>
    pub fn pipeline_execution(&self) -> std::option::Option<&crate::types::PipelineExecution> {
        self.pipeline_execution.as_ref()
    }
    /// <p>Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.</p>
    pub fn feature_group(&self) -> std::option::Option<&crate::types::FeatureGroup> {
        self.feature_group.as_ref()
    }
    /// <p>The properties of a project.</p>
    pub fn project(&self) -> std::option::Option<&crate::types::Project> {
        self.project.as_ref()
    }
    /// <p>The feature metadata used to search through the features.</p>
    pub fn feature_metadata(&self) -> std::option::Option<&crate::types::FeatureMetadata> {
        self.feature_metadata.as_ref()
    }
    /// <p>The properties of a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job(
        &self,
    ) -> std::option::Option<&crate::types::HyperParameterTuningJobSearchEntity> {
        self.hyper_parameter_tuning_job.as_ref()
    }
    /// <p>A model displayed in the Amazon SageMaker Model Dashboard.</p>
    pub fn model(&self) -> std::option::Option<&crate::types::ModelDashboardModel> {
        self.model.as_ref()
    }
    /// <p>An Amazon SageMaker Model Card that documents details about a machine learning model.</p>
    pub fn model_card(&self) -> std::option::Option<&crate::types::ModelCard> {
        self.model_card.as_ref()
    }
}
impl SearchRecord {
    /// Creates a new builder-style object to manufacture [`SearchRecord`](crate::types::SearchRecord).
    pub fn builder() -> crate::types::builders::SearchRecordBuilder {
        crate::types::builders::SearchRecordBuilder::default()
    }
}

/// A builder for [`SearchRecord`](crate::types::SearchRecord).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchRecordBuilder {
    pub(crate) training_job: std::option::Option<crate::types::TrainingJob>,
    pub(crate) experiment: std::option::Option<crate::types::Experiment>,
    pub(crate) trial: std::option::Option<crate::types::Trial>,
    pub(crate) trial_component: std::option::Option<crate::types::TrialComponent>,
    pub(crate) endpoint: std::option::Option<crate::types::Endpoint>,
    pub(crate) model_package: std::option::Option<crate::types::ModelPackage>,
    pub(crate) model_package_group: std::option::Option<crate::types::ModelPackageGroup>,
    pub(crate) pipeline: std::option::Option<crate::types::Pipeline>,
    pub(crate) pipeline_execution: std::option::Option<crate::types::PipelineExecution>,
    pub(crate) feature_group: std::option::Option<crate::types::FeatureGroup>,
    pub(crate) project: std::option::Option<crate::types::Project>,
    pub(crate) feature_metadata: std::option::Option<crate::types::FeatureMetadata>,
    pub(crate) hyper_parameter_tuning_job:
        std::option::Option<crate::types::HyperParameterTuningJobSearchEntity>,
    pub(crate) model: std::option::Option<crate::types::ModelDashboardModel>,
    pub(crate) model_card: std::option::Option<crate::types::ModelCard>,
}
impl SearchRecordBuilder {
    /// <p>The properties of a training job.</p>
    pub fn training_job(mut self, input: crate::types::TrainingJob) -> Self {
        self.training_job = Some(input);
        self
    }
    /// <p>The properties of a training job.</p>
    pub fn set_training_job(
        mut self,
        input: std::option::Option<crate::types::TrainingJob>,
    ) -> Self {
        self.training_job = input;
        self
    }
    /// <p>The properties of an experiment.</p>
    pub fn experiment(mut self, input: crate::types::Experiment) -> Self {
        self.experiment = Some(input);
        self
    }
    /// <p>The properties of an experiment.</p>
    pub fn set_experiment(mut self, input: std::option::Option<crate::types::Experiment>) -> Self {
        self.experiment = input;
        self
    }
    /// <p>The properties of a trial.</p>
    pub fn trial(mut self, input: crate::types::Trial) -> Self {
        self.trial = Some(input);
        self
    }
    /// <p>The properties of a trial.</p>
    pub fn set_trial(mut self, input: std::option::Option<crate::types::Trial>) -> Self {
        self.trial = input;
        self
    }
    /// <p>The properties of a trial component.</p>
    pub fn trial_component(mut self, input: crate::types::TrialComponent) -> Self {
        self.trial_component = Some(input);
        self
    }
    /// <p>The properties of a trial component.</p>
    pub fn set_trial_component(
        mut self,
        input: std::option::Option<crate::types::TrialComponent>,
    ) -> Self {
        self.trial_component = input;
        self
    }
    /// <p>A hosted endpoint for real-time inference.</p>
    pub fn endpoint(mut self, input: crate::types::Endpoint) -> Self {
        self.endpoint = Some(input);
        self
    }
    /// <p>A hosted endpoint for real-time inference.</p>
    pub fn set_endpoint(mut self, input: std::option::Option<crate::types::Endpoint>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>A versioned model that can be deployed for SageMaker inference.</p>
    pub fn model_package(mut self, input: crate::types::ModelPackage) -> Self {
        self.model_package = Some(input);
        self
    }
    /// <p>A versioned model that can be deployed for SageMaker inference.</p>
    pub fn set_model_package(
        mut self,
        input: std::option::Option<crate::types::ModelPackage>,
    ) -> Self {
        self.model_package = input;
        self
    }
    /// <p>A group of versioned models in the model registry.</p>
    pub fn model_package_group(mut self, input: crate::types::ModelPackageGroup) -> Self {
        self.model_package_group = Some(input);
        self
    }
    /// <p>A group of versioned models in the model registry.</p>
    pub fn set_model_package_group(
        mut self,
        input: std::option::Option<crate::types::ModelPackageGroup>,
    ) -> Self {
        self.model_package_group = input;
        self
    }
    /// <p>A SageMaker Model Building Pipeline instance.</p>
    pub fn pipeline(mut self, input: crate::types::Pipeline) -> Self {
        self.pipeline = Some(input);
        self
    }
    /// <p>A SageMaker Model Building Pipeline instance.</p>
    pub fn set_pipeline(mut self, input: std::option::Option<crate::types::Pipeline>) -> Self {
        self.pipeline = input;
        self
    }
    /// <p>An execution of a pipeline.</p>
    pub fn pipeline_execution(mut self, input: crate::types::PipelineExecution) -> Self {
        self.pipeline_execution = Some(input);
        self
    }
    /// <p>An execution of a pipeline.</p>
    pub fn set_pipeline_execution(
        mut self,
        input: std::option::Option<crate::types::PipelineExecution>,
    ) -> Self {
        self.pipeline_execution = input;
        self
    }
    /// <p>Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.</p>
    pub fn feature_group(mut self, input: crate::types::FeatureGroup) -> Self {
        self.feature_group = Some(input);
        self
    }
    /// <p>Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.</p>
    pub fn set_feature_group(
        mut self,
        input: std::option::Option<crate::types::FeatureGroup>,
    ) -> Self {
        self.feature_group = input;
        self
    }
    /// <p>The properties of a project.</p>
    pub fn project(mut self, input: crate::types::Project) -> Self {
        self.project = Some(input);
        self
    }
    /// <p>The properties of a project.</p>
    pub fn set_project(mut self, input: std::option::Option<crate::types::Project>) -> Self {
        self.project = input;
        self
    }
    /// <p>The feature metadata used to search through the features.</p>
    pub fn feature_metadata(mut self, input: crate::types::FeatureMetadata) -> Self {
        self.feature_metadata = Some(input);
        self
    }
    /// <p>The feature metadata used to search through the features.</p>
    pub fn set_feature_metadata(
        mut self,
        input: std::option::Option<crate::types::FeatureMetadata>,
    ) -> Self {
        self.feature_metadata = input;
        self
    }
    /// <p>The properties of a hyperparameter tuning job.</p>
    pub fn hyper_parameter_tuning_job(
        mut self,
        input: crate::types::HyperParameterTuningJobSearchEntity,
    ) -> Self {
        self.hyper_parameter_tuning_job = Some(input);
        self
    }
    /// <p>The properties of a hyperparameter tuning job.</p>
    pub fn set_hyper_parameter_tuning_job(
        mut self,
        input: std::option::Option<crate::types::HyperParameterTuningJobSearchEntity>,
    ) -> Self {
        self.hyper_parameter_tuning_job = input;
        self
    }
    /// <p>A model displayed in the Amazon SageMaker Model Dashboard.</p>
    pub fn model(mut self, input: crate::types::ModelDashboardModel) -> Self {
        self.model = Some(input);
        self
    }
    /// <p>A model displayed in the Amazon SageMaker Model Dashboard.</p>
    pub fn set_model(
        mut self,
        input: std::option::Option<crate::types::ModelDashboardModel>,
    ) -> Self {
        self.model = input;
        self
    }
    /// <p>An Amazon SageMaker Model Card that documents details about a machine learning model.</p>
    pub fn model_card(mut self, input: crate::types::ModelCard) -> Self {
        self.model_card = Some(input);
        self
    }
    /// <p>An Amazon SageMaker Model Card that documents details about a machine learning model.</p>
    pub fn set_model_card(mut self, input: std::option::Option<crate::types::ModelCard>) -> Self {
        self.model_card = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchRecord`](crate::types::SearchRecord).
    pub fn build(self) -> crate::types::SearchRecord {
        crate::types::SearchRecord {
            training_job: self.training_job,
            experiment: self.experiment,
            trial: self.trial,
            trial_component: self.trial_component,
            endpoint: self.endpoint,
            model_package: self.model_package,
            model_package_group: self.model_package_group,
            pipeline: self.pipeline,
            pipeline_execution: self.pipeline_execution,
            feature_group: self.feature_group,
            project: self.project,
            feature_metadata: self.feature_metadata,
            hyper_parameter_tuning_job: self.hyper_parameter_tuning_job,
            model: self.model,
            model_card: self.model_card,
        }
    }
}
