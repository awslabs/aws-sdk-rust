// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Liquid template for the worker user interface.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UiTemplate {
    /// <p>The content of the Liquid template for the worker user interface.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
}
impl UiTemplate {
    /// <p>The content of the Liquid template for the worker user interface.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
}
impl UiTemplate {
    /// Creates a new builder-style object to manufacture [`UiTemplate`](crate::types::UiTemplate).
    pub fn builder() -> crate::types::builders::UiTemplateBuilder {
        crate::types::builders::UiTemplateBuilder::default()
    }
}

/// A builder for [`UiTemplate`](crate::types::UiTemplate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UiTemplateBuilder {
    pub(crate) content: std::option::Option<std::string::String>,
}
impl UiTemplateBuilder {
    /// <p>The content of the Liquid template for the worker user interface.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The content of the Liquid template for the worker user interface.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// Consumes the builder and constructs a [`UiTemplate`](crate::types::UiTemplate).
    pub fn build(self) -> crate::types::UiTemplate {
        crate::types::UiTemplate {
            content: self.content,
        }
    }
}
