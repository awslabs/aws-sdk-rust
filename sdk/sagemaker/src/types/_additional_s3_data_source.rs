// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A data source used for training or inference that is in addition to the input dataset or model data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdditionalS3DataSource {
    /// <p>The data type of the additional data source that you specify for use in inference or training. </p>
    pub s3_data_type: ::std::option::Option<crate::types::AdditionalS3DataSourceDataType>,
    /// <p>The uniform resource identifier (URI) used to identify an additional data source used in inference or training.</p>
    pub s3_uri: ::std::option::Option<::std::string::String>,
    /// <p>The type of compression used for an additional data source used in inference or training. Specify <code>None</code> if your additional data source is not compressed.</p>
    pub compression_type: ::std::option::Option<crate::types::CompressionType>,
}
impl AdditionalS3DataSource {
    /// <p>The data type of the additional data source that you specify for use in inference or training. </p>
    pub fn s3_data_type(&self) -> ::std::option::Option<&crate::types::AdditionalS3DataSourceDataType> {
        self.s3_data_type.as_ref()
    }
    /// <p>The uniform resource identifier (URI) used to identify an additional data source used in inference or training.</p>
    pub fn s3_uri(&self) -> ::std::option::Option<&str> {
        self.s3_uri.as_deref()
    }
    /// <p>The type of compression used for an additional data source used in inference or training. Specify <code>None</code> if your additional data source is not compressed.</p>
    pub fn compression_type(&self) -> ::std::option::Option<&crate::types::CompressionType> {
        self.compression_type.as_ref()
    }
}
impl AdditionalS3DataSource {
    /// Creates a new builder-style object to manufacture [`AdditionalS3DataSource`](crate::types::AdditionalS3DataSource).
    pub fn builder() -> crate::types::builders::AdditionalS3DataSourceBuilder {
        crate::types::builders::AdditionalS3DataSourceBuilder::default()
    }
}

/// A builder for [`AdditionalS3DataSource`](crate::types::AdditionalS3DataSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AdditionalS3DataSourceBuilder {
    pub(crate) s3_data_type: ::std::option::Option<crate::types::AdditionalS3DataSourceDataType>,
    pub(crate) s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) compression_type: ::std::option::Option<crate::types::CompressionType>,
}
impl AdditionalS3DataSourceBuilder {
    /// <p>The data type of the additional data source that you specify for use in inference or training. </p>
    /// This field is required.
    pub fn s3_data_type(mut self, input: crate::types::AdditionalS3DataSourceDataType) -> Self {
        self.s3_data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the additional data source that you specify for use in inference or training. </p>
    pub fn set_s3_data_type(mut self, input: ::std::option::Option<crate::types::AdditionalS3DataSourceDataType>) -> Self {
        self.s3_data_type = input;
        self
    }
    /// <p>The data type of the additional data source that you specify for use in inference or training. </p>
    pub fn get_s3_data_type(&self) -> &::std::option::Option<crate::types::AdditionalS3DataSourceDataType> {
        &self.s3_data_type
    }
    /// <p>The uniform resource identifier (URI) used to identify an additional data source used in inference or training.</p>
    /// This field is required.
    pub fn s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The uniform resource identifier (URI) used to identify an additional data source used in inference or training.</p>
    pub fn set_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p>The uniform resource identifier (URI) used to identify an additional data source used in inference or training.</p>
    pub fn get_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_uri
    }
    /// <p>The type of compression used for an additional data source used in inference or training. Specify <code>None</code> if your additional data source is not compressed.</p>
    pub fn compression_type(mut self, input: crate::types::CompressionType) -> Self {
        self.compression_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of compression used for an additional data source used in inference or training. Specify <code>None</code> if your additional data source is not compressed.</p>
    pub fn set_compression_type(mut self, input: ::std::option::Option<crate::types::CompressionType>) -> Self {
        self.compression_type = input;
        self
    }
    /// <p>The type of compression used for an additional data source used in inference or training. Specify <code>None</code> if your additional data source is not compressed.</p>
    pub fn get_compression_type(&self) -> &::std::option::Option<crate::types::CompressionType> {
        &self.compression_type
    }
    /// Consumes the builder and constructs a [`AdditionalS3DataSource`](crate::types::AdditionalS3DataSource).
    pub fn build(self) -> crate::types::AdditionalS3DataSource {
        crate::types::AdditionalS3DataSource {
            s3_data_type: self.s3_data_type,
            s3_uri: self.s3_uri,
            compression_type: self.compression_type,
        }
    }
}
