// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container for the metadata for the ClarifyCheck step. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check">ClarifyCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClarifyCheckStepMetadata {
    /// <p>The type of the Clarify Check step</p>
    #[doc(hidden)]
    pub check_type: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 URI of baseline constraints file to be used for the drift check.</p>
    #[doc(hidden)]
    pub baseline_used_for_drift_check_constraints: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 URI of the newly calculated baseline constraints file.</p>
    #[doc(hidden)]
    pub calculated_baseline_constraints: std::option::Option<std::string::String>,
    /// <p>The model package group name.</p>
    #[doc(hidden)]
    pub model_package_group_name: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 URI of the violation report if violations are detected.</p>
    #[doc(hidden)]
    pub violation_report: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the check processing job that was run by this step's execution.</p>
    #[doc(hidden)]
    pub check_job_arn: std::option::Option<std::string::String>,
    /// <p>This flag indicates if the drift check against the previous baseline will be skipped or not. If it is set to <code>False</code>, the previous baseline of the configured check type must be available.</p>
    #[doc(hidden)]
    pub skip_check: bool,
    /// <p>This flag indicates if a newly calculated baseline can be accessed through step properties <code>BaselineUsedForDriftCheckConstraints</code> and <code>BaselineUsedForDriftCheckStatistics</code>. If it is set to <code>False</code>, the previous baseline of the configured check type must also be available. These can be accessed through the <code>BaselineUsedForDriftCheckConstraints</code> property. </p>
    #[doc(hidden)]
    pub register_new_baseline: bool,
}
impl ClarifyCheckStepMetadata {
    /// <p>The type of the Clarify Check step</p>
    pub fn check_type(&self) -> std::option::Option<&str> {
        self.check_type.as_deref()
    }
    /// <p>The Amazon S3 URI of baseline constraints file to be used for the drift check.</p>
    pub fn baseline_used_for_drift_check_constraints(&self) -> std::option::Option<&str> {
        self.baseline_used_for_drift_check_constraints.as_deref()
    }
    /// <p>The Amazon S3 URI of the newly calculated baseline constraints file.</p>
    pub fn calculated_baseline_constraints(&self) -> std::option::Option<&str> {
        self.calculated_baseline_constraints.as_deref()
    }
    /// <p>The model package group name.</p>
    pub fn model_package_group_name(&self) -> std::option::Option<&str> {
        self.model_package_group_name.as_deref()
    }
    /// <p>The Amazon S3 URI of the violation report if violations are detected.</p>
    pub fn violation_report(&self) -> std::option::Option<&str> {
        self.violation_report.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the check processing job that was run by this step's execution.</p>
    pub fn check_job_arn(&self) -> std::option::Option<&str> {
        self.check_job_arn.as_deref()
    }
    /// <p>This flag indicates if the drift check against the previous baseline will be skipped or not. If it is set to <code>False</code>, the previous baseline of the configured check type must be available.</p>
    pub fn skip_check(&self) -> bool {
        self.skip_check
    }
    /// <p>This flag indicates if a newly calculated baseline can be accessed through step properties <code>BaselineUsedForDriftCheckConstraints</code> and <code>BaselineUsedForDriftCheckStatistics</code>. If it is set to <code>False</code>, the previous baseline of the configured check type must also be available. These can be accessed through the <code>BaselineUsedForDriftCheckConstraints</code> property. </p>
    pub fn register_new_baseline(&self) -> bool {
        self.register_new_baseline
    }
}
impl ClarifyCheckStepMetadata {
    /// Creates a new builder-style object to manufacture [`ClarifyCheckStepMetadata`](crate::types::ClarifyCheckStepMetadata).
    pub fn builder() -> crate::types::builders::ClarifyCheckStepMetadataBuilder {
        crate::types::builders::ClarifyCheckStepMetadataBuilder::default()
    }
}

/// A builder for [`ClarifyCheckStepMetadata`](crate::types::ClarifyCheckStepMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClarifyCheckStepMetadataBuilder {
    pub(crate) check_type: std::option::Option<std::string::String>,
    pub(crate) baseline_used_for_drift_check_constraints: std::option::Option<std::string::String>,
    pub(crate) calculated_baseline_constraints: std::option::Option<std::string::String>,
    pub(crate) model_package_group_name: std::option::Option<std::string::String>,
    pub(crate) violation_report: std::option::Option<std::string::String>,
    pub(crate) check_job_arn: std::option::Option<std::string::String>,
    pub(crate) skip_check: std::option::Option<bool>,
    pub(crate) register_new_baseline: std::option::Option<bool>,
}
impl ClarifyCheckStepMetadataBuilder {
    /// <p>The type of the Clarify Check step</p>
    pub fn check_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.check_type = Some(input.into());
        self
    }
    /// <p>The type of the Clarify Check step</p>
    pub fn set_check_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.check_type = input;
        self
    }
    /// <p>The Amazon S3 URI of baseline constraints file to be used for the drift check.</p>
    pub fn baseline_used_for_drift_check_constraints(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.baseline_used_for_drift_check_constraints = Some(input.into());
        self
    }
    /// <p>The Amazon S3 URI of baseline constraints file to be used for the drift check.</p>
    pub fn set_baseline_used_for_drift_check_constraints(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.baseline_used_for_drift_check_constraints = input;
        self
    }
    /// <p>The Amazon S3 URI of the newly calculated baseline constraints file.</p>
    pub fn calculated_baseline_constraints(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.calculated_baseline_constraints = Some(input.into());
        self
    }
    /// <p>The Amazon S3 URI of the newly calculated baseline constraints file.</p>
    pub fn set_calculated_baseline_constraints(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.calculated_baseline_constraints = input;
        self
    }
    /// <p>The model package group name.</p>
    pub fn model_package_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_package_group_name = Some(input.into());
        self
    }
    /// <p>The model package group name.</p>
    pub fn set_model_package_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_package_group_name = input;
        self
    }
    /// <p>The Amazon S3 URI of the violation report if violations are detected.</p>
    pub fn violation_report(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_report = Some(input.into());
        self
    }
    /// <p>The Amazon S3 URI of the violation report if violations are detected.</p>
    pub fn set_violation_report(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.violation_report = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the check processing job that was run by this step's execution.</p>
    pub fn check_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.check_job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the check processing job that was run by this step's execution.</p>
    pub fn set_check_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.check_job_arn = input;
        self
    }
    /// <p>This flag indicates if the drift check against the previous baseline will be skipped or not. If it is set to <code>False</code>, the previous baseline of the configured check type must be available.</p>
    pub fn skip_check(mut self, input: bool) -> Self {
        self.skip_check = Some(input);
        self
    }
    /// <p>This flag indicates if the drift check against the previous baseline will be skipped or not. If it is set to <code>False</code>, the previous baseline of the configured check type must be available.</p>
    pub fn set_skip_check(mut self, input: std::option::Option<bool>) -> Self {
        self.skip_check = input;
        self
    }
    /// <p>This flag indicates if a newly calculated baseline can be accessed through step properties <code>BaselineUsedForDriftCheckConstraints</code> and <code>BaselineUsedForDriftCheckStatistics</code>. If it is set to <code>False</code>, the previous baseline of the configured check type must also be available. These can be accessed through the <code>BaselineUsedForDriftCheckConstraints</code> property. </p>
    pub fn register_new_baseline(mut self, input: bool) -> Self {
        self.register_new_baseline = Some(input);
        self
    }
    /// <p>This flag indicates if a newly calculated baseline can be accessed through step properties <code>BaselineUsedForDriftCheckConstraints</code> and <code>BaselineUsedForDriftCheckStatistics</code>. If it is set to <code>False</code>, the previous baseline of the configured check type must also be available. These can be accessed through the <code>BaselineUsedForDriftCheckConstraints</code> property. </p>
    pub fn set_register_new_baseline(mut self, input: std::option::Option<bool>) -> Self {
        self.register_new_baseline = input;
        self
    }
    /// Consumes the builder and constructs a [`ClarifyCheckStepMetadata`](crate::types::ClarifyCheckStepMetadata).
    pub fn build(self) -> crate::types::ClarifyCheckStepMetadata {
        crate::types::ClarifyCheckStepMetadata {
            check_type: self.check_type,
            baseline_used_for_drift_check_constraints: self
                .baseline_used_for_drift_check_constraints,
            calculated_baseline_constraints: self.calculated_baseline_constraints,
            model_package_group_name: self.model_package_group_name,
            violation_report: self.violation_report,
            check_job_arn: self.check_job_arn,
            skip_check: self.skip_check.unwrap_or_default(),
            register_new_baseline: self.register_new_baseline.unwrap_or_default(),
        }
    }
}
