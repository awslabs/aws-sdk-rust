// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>How long a job is allowed to run, or how many candidates a job is allowed to generate.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutoMlJobCompletionCriteria {
    /// <p>The maximum number of times a training job is allowed to run.</p>
    /// <p>For text and image classification, time-series forecasting, as well as text generation (LLMs fine-tuning) problem types, the supported value is 1. For tabular problem types, the maximum value is 750.</p>
    pub max_candidates: ::std::option::Option<i32>,
    /// <p>The maximum time, in seconds, that each training job executed inside hyperparameter tuning is allowed to run as part of a hyperparameter tuning job. For more information, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StoppingCondition.html">StoppingCondition</a> used by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a> action.</p>
    /// <p>For job V2s (jobs created by calling <code>CreateAutoMLJobV2</code>), this field controls the runtime of the job candidate.</p>
    pub max_runtime_per_training_job_in_seconds: ::std::option::Option<i32>,
    /// <p>The maximum runtime, in seconds, an AutoML job has to complete.</p>
    /// <p>If an AutoML job exceeds the maximum runtime, the job is stopped automatically and its processing is ended gracefully. The AutoML job identifies the best model whose training was completed and marks it as the best-performing model. Any unfinished steps of the job, such as automatic one-click Autopilot model deployment, are not completed.</p>
    pub max_auto_ml_job_runtime_in_seconds: ::std::option::Option<i32>,
}
impl AutoMlJobCompletionCriteria {
    /// <p>The maximum number of times a training job is allowed to run.</p>
    /// <p>For text and image classification, time-series forecasting, as well as text generation (LLMs fine-tuning) problem types, the supported value is 1. For tabular problem types, the maximum value is 750.</p>
    pub fn max_candidates(&self) -> ::std::option::Option<i32> {
        self.max_candidates
    }
    /// <p>The maximum time, in seconds, that each training job executed inside hyperparameter tuning is allowed to run as part of a hyperparameter tuning job. For more information, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StoppingCondition.html">StoppingCondition</a> used by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a> action.</p>
    /// <p>For job V2s (jobs created by calling <code>CreateAutoMLJobV2</code>), this field controls the runtime of the job candidate.</p>
    pub fn max_runtime_per_training_job_in_seconds(&self) -> ::std::option::Option<i32> {
        self.max_runtime_per_training_job_in_seconds
    }
    /// <p>The maximum runtime, in seconds, an AutoML job has to complete.</p>
    /// <p>If an AutoML job exceeds the maximum runtime, the job is stopped automatically and its processing is ended gracefully. The AutoML job identifies the best model whose training was completed and marks it as the best-performing model. Any unfinished steps of the job, such as automatic one-click Autopilot model deployment, are not completed.</p>
    pub fn max_auto_ml_job_runtime_in_seconds(&self) -> ::std::option::Option<i32> {
        self.max_auto_ml_job_runtime_in_seconds
    }
}
impl AutoMlJobCompletionCriteria {
    /// Creates a new builder-style object to manufacture [`AutoMlJobCompletionCriteria`](crate::types::AutoMlJobCompletionCriteria).
    pub fn builder() -> crate::types::builders::AutoMlJobCompletionCriteriaBuilder {
        crate::types::builders::AutoMlJobCompletionCriteriaBuilder::default()
    }
}

/// A builder for [`AutoMlJobCompletionCriteria`](crate::types::AutoMlJobCompletionCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AutoMlJobCompletionCriteriaBuilder {
    pub(crate) max_candidates: ::std::option::Option<i32>,
    pub(crate) max_runtime_per_training_job_in_seconds: ::std::option::Option<i32>,
    pub(crate) max_auto_ml_job_runtime_in_seconds: ::std::option::Option<i32>,
}
impl AutoMlJobCompletionCriteriaBuilder {
    /// <p>The maximum number of times a training job is allowed to run.</p>
    /// <p>For text and image classification, time-series forecasting, as well as text generation (LLMs fine-tuning) problem types, the supported value is 1. For tabular problem types, the maximum value is 750.</p>
    pub fn max_candidates(mut self, input: i32) -> Self {
        self.max_candidates = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of times a training job is allowed to run.</p>
    /// <p>For text and image classification, time-series forecasting, as well as text generation (LLMs fine-tuning) problem types, the supported value is 1. For tabular problem types, the maximum value is 750.</p>
    pub fn set_max_candidates(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_candidates = input;
        self
    }
    /// <p>The maximum number of times a training job is allowed to run.</p>
    /// <p>For text and image classification, time-series forecasting, as well as text generation (LLMs fine-tuning) problem types, the supported value is 1. For tabular problem types, the maximum value is 750.</p>
    pub fn get_max_candidates(&self) -> &::std::option::Option<i32> {
        &self.max_candidates
    }
    /// <p>The maximum time, in seconds, that each training job executed inside hyperparameter tuning is allowed to run as part of a hyperparameter tuning job. For more information, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StoppingCondition.html">StoppingCondition</a> used by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a> action.</p>
    /// <p>For job V2s (jobs created by calling <code>CreateAutoMLJobV2</code>), this field controls the runtime of the job candidate.</p>
    pub fn max_runtime_per_training_job_in_seconds(mut self, input: i32) -> Self {
        self.max_runtime_per_training_job_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum time, in seconds, that each training job executed inside hyperparameter tuning is allowed to run as part of a hyperparameter tuning job. For more information, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StoppingCondition.html">StoppingCondition</a> used by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a> action.</p>
    /// <p>For job V2s (jobs created by calling <code>CreateAutoMLJobV2</code>), this field controls the runtime of the job candidate.</p>
    pub fn set_max_runtime_per_training_job_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_runtime_per_training_job_in_seconds = input;
        self
    }
    /// <p>The maximum time, in seconds, that each training job executed inside hyperparameter tuning is allowed to run as part of a hyperparameter tuning job. For more information, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StoppingCondition.html">StoppingCondition</a> used by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a> action.</p>
    /// <p>For job V2s (jobs created by calling <code>CreateAutoMLJobV2</code>), this field controls the runtime of the job candidate.</p>
    pub fn get_max_runtime_per_training_job_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.max_runtime_per_training_job_in_seconds
    }
    /// <p>The maximum runtime, in seconds, an AutoML job has to complete.</p>
    /// <p>If an AutoML job exceeds the maximum runtime, the job is stopped automatically and its processing is ended gracefully. The AutoML job identifies the best model whose training was completed and marks it as the best-performing model. Any unfinished steps of the job, such as automatic one-click Autopilot model deployment, are not completed.</p>
    pub fn max_auto_ml_job_runtime_in_seconds(mut self, input: i32) -> Self {
        self.max_auto_ml_job_runtime_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum runtime, in seconds, an AutoML job has to complete.</p>
    /// <p>If an AutoML job exceeds the maximum runtime, the job is stopped automatically and its processing is ended gracefully. The AutoML job identifies the best model whose training was completed and marks it as the best-performing model. Any unfinished steps of the job, such as automatic one-click Autopilot model deployment, are not completed.</p>
    pub fn set_max_auto_ml_job_runtime_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_auto_ml_job_runtime_in_seconds = input;
        self
    }
    /// <p>The maximum runtime, in seconds, an AutoML job has to complete.</p>
    /// <p>If an AutoML job exceeds the maximum runtime, the job is stopped automatically and its processing is ended gracefully. The AutoML job identifies the best model whose training was completed and marks it as the best-performing model. Any unfinished steps of the job, such as automatic one-click Autopilot model deployment, are not completed.</p>
    pub fn get_max_auto_ml_job_runtime_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.max_auto_ml_job_runtime_in_seconds
    }
    /// Consumes the builder and constructs a [`AutoMlJobCompletionCriteria`](crate::types::AutoMlJobCompletionCriteria).
    pub fn build(self) -> crate::types::AutoMlJobCompletionCriteria {
        crate::types::AutoMlJobCompletionCriteria {
            max_candidates: self.max_candidates,
            max_runtime_per_training_job_in_seconds: self.max_runtime_per_training_job_in_seconds,
            max_auto_ml_job_runtime_in_seconds: self.max_auto_ml_job_runtime_in_seconds,
        }
    }
}
