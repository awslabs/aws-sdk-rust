// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure describing the source of an artifact.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ArtifactSource {
    /// <p>The URI of the source.</p>
    pub source_uri: ::std::option::Option<::std::string::String>,
    /// <p>A list of source types.</p>
    pub source_types: ::std::option::Option<::std::vec::Vec<crate::types::ArtifactSourceType>>,
}
impl ArtifactSource {
    /// <p>The URI of the source.</p>
    pub fn source_uri(&self) -> ::std::option::Option<&str> {
        self.source_uri.as_deref()
    }
    /// <p>A list of source types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_types.is_none()`.
    pub fn source_types(&self) -> &[crate::types::ArtifactSourceType] {
        self.source_types.as_deref().unwrap_or_default()
    }
}
impl ArtifactSource {
    /// Creates a new builder-style object to manufacture [`ArtifactSource`](crate::types::ArtifactSource).
    pub fn builder() -> crate::types::builders::ArtifactSourceBuilder {
        crate::types::builders::ArtifactSourceBuilder::default()
    }
}

/// A builder for [`ArtifactSource`](crate::types::ArtifactSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ArtifactSourceBuilder {
    pub(crate) source_uri: ::std::option::Option<::std::string::String>,
    pub(crate) source_types: ::std::option::Option<::std::vec::Vec<crate::types::ArtifactSourceType>>,
}
impl ArtifactSourceBuilder {
    /// <p>The URI of the source.</p>
    /// This field is required.
    pub fn source_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the source.</p>
    pub fn set_source_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_uri = input;
        self
    }
    /// <p>The URI of the source.</p>
    pub fn get_source_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_uri
    }
    /// Appends an item to `source_types`.
    ///
    /// To override the contents of this collection use [`set_source_types`](Self::set_source_types).
    ///
    /// <p>A list of source types.</p>
    pub fn source_types(mut self, input: crate::types::ArtifactSourceType) -> Self {
        let mut v = self.source_types.unwrap_or_default();
        v.push(input);
        self.source_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of source types.</p>
    pub fn set_source_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ArtifactSourceType>>) -> Self {
        self.source_types = input;
        self
    }
    /// <p>A list of source types.</p>
    pub fn get_source_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ArtifactSourceType>> {
        &self.source_types
    }
    /// Consumes the builder and constructs a [`ArtifactSource`](crate::types::ArtifactSource).
    pub fn build(self) -> crate::types::ArtifactSource {
        crate::types::ArtifactSource {
            source_uri: self.source_uri,
            source_types: self.source_types,
        }
    }
}
