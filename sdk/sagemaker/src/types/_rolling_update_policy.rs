// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a rolling deployment strategy for updating a SageMaker endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RollingUpdatePolicy {
    /// <p>Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count.</p>
    pub maximum_batch_size: ::std::option::Option<crate::types::CapacitySize>,
    /// <p>The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet.</p>
    pub wait_interval_in_seconds: ::std::option::Option<i32>,
    /// <p>The time limit for the total deployment. Exceeding this limit causes a timeout.</p>
    pub maximum_execution_timeout_in_seconds: ::std::option::Option<i32>,
    /// <p>Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback.</p>
    pub rollback_maximum_batch_size: ::std::option::Option<crate::types::CapacitySize>,
}
impl RollingUpdatePolicy {
    /// <p>Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count.</p>
    pub fn maximum_batch_size(&self) -> ::std::option::Option<&crate::types::CapacitySize> {
        self.maximum_batch_size.as_ref()
    }
    /// <p>The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet.</p>
    pub fn wait_interval_in_seconds(&self) -> ::std::option::Option<i32> {
        self.wait_interval_in_seconds
    }
    /// <p>The time limit for the total deployment. Exceeding this limit causes a timeout.</p>
    pub fn maximum_execution_timeout_in_seconds(&self) -> ::std::option::Option<i32> {
        self.maximum_execution_timeout_in_seconds
    }
    /// <p>Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback.</p>
    pub fn rollback_maximum_batch_size(&self) -> ::std::option::Option<&crate::types::CapacitySize> {
        self.rollback_maximum_batch_size.as_ref()
    }
}
impl RollingUpdatePolicy {
    /// Creates a new builder-style object to manufacture [`RollingUpdatePolicy`](crate::types::RollingUpdatePolicy).
    pub fn builder() -> crate::types::builders::RollingUpdatePolicyBuilder {
        crate::types::builders::RollingUpdatePolicyBuilder::default()
    }
}

/// A builder for [`RollingUpdatePolicy`](crate::types::RollingUpdatePolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RollingUpdatePolicyBuilder {
    pub(crate) maximum_batch_size: ::std::option::Option<crate::types::CapacitySize>,
    pub(crate) wait_interval_in_seconds: ::std::option::Option<i32>,
    pub(crate) maximum_execution_timeout_in_seconds: ::std::option::Option<i32>,
    pub(crate) rollback_maximum_batch_size: ::std::option::Option<crate::types::CapacitySize>,
}
impl RollingUpdatePolicyBuilder {
    /// <p>Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count.</p>
    /// This field is required.
    pub fn maximum_batch_size(mut self, input: crate::types::CapacitySize) -> Self {
        self.maximum_batch_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count.</p>
    pub fn set_maximum_batch_size(mut self, input: ::std::option::Option<crate::types::CapacitySize>) -> Self {
        self.maximum_batch_size = input;
        self
    }
    /// <p>Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count.</p>
    pub fn get_maximum_batch_size(&self) -> &::std::option::Option<crate::types::CapacitySize> {
        &self.maximum_batch_size
    }
    /// <p>The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet.</p>
    /// This field is required.
    pub fn wait_interval_in_seconds(mut self, input: i32) -> Self {
        self.wait_interval_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet.</p>
    pub fn set_wait_interval_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.wait_interval_in_seconds = input;
        self
    }
    /// <p>The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet.</p>
    pub fn get_wait_interval_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.wait_interval_in_seconds
    }
    /// <p>The time limit for the total deployment. Exceeding this limit causes a timeout.</p>
    pub fn maximum_execution_timeout_in_seconds(mut self, input: i32) -> Self {
        self.maximum_execution_timeout_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time limit for the total deployment. Exceeding this limit causes a timeout.</p>
    pub fn set_maximum_execution_timeout_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_execution_timeout_in_seconds = input;
        self
    }
    /// <p>The time limit for the total deployment. Exceeding this limit causes a timeout.</p>
    pub fn get_maximum_execution_timeout_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.maximum_execution_timeout_in_seconds
    }
    /// <p>Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback.</p>
    pub fn rollback_maximum_batch_size(mut self, input: crate::types::CapacitySize) -> Self {
        self.rollback_maximum_batch_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback.</p>
    pub fn set_rollback_maximum_batch_size(mut self, input: ::std::option::Option<crate::types::CapacitySize>) -> Self {
        self.rollback_maximum_batch_size = input;
        self
    }
    /// <p>Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback.</p>
    pub fn get_rollback_maximum_batch_size(&self) -> &::std::option::Option<crate::types::CapacitySize> {
        &self.rollback_maximum_batch_size
    }
    /// Consumes the builder and constructs a [`RollingUpdatePolicy`](crate::types::RollingUpdatePolicy).
    pub fn build(self) -> crate::types::RollingUpdatePolicy {
        crate::types::RollingUpdatePolicy {
            maximum_batch_size: self.maximum_batch_size,
            wait_interval_in_seconds: self.wait_interval_in_seconds,
            maximum_execution_timeout_in_seconds: self.maximum_execution_timeout_in_seconds,
            rollback_maximum_batch_size: self.rollback_maximum_batch_size,
        }
    }
}
