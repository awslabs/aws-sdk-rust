// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a hub.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HubInfo {
    /// <p>The name of the hub.</p>
    #[doc(hidden)]
    pub hub_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the hub.</p>
    #[doc(hidden)]
    pub hub_arn: std::option::Option<std::string::String>,
    /// <p>The display name of the hub.</p>
    #[doc(hidden)]
    pub hub_display_name: std::option::Option<std::string::String>,
    /// <p>A description of the hub.</p>
    #[doc(hidden)]
    pub hub_description: std::option::Option<std::string::String>,
    /// <p>The searchable keywords for the hub.</p>
    #[doc(hidden)]
    pub hub_search_keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The status of the hub.</p>
    #[doc(hidden)]
    pub hub_status: std::option::Option<crate::types::HubStatus>,
    /// <p>The date and time that the hub was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the hub was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl HubInfo {
    /// <p>The name of the hub.</p>
    pub fn hub_name(&self) -> std::option::Option<&str> {
        self.hub_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the hub.</p>
    pub fn hub_arn(&self) -> std::option::Option<&str> {
        self.hub_arn.as_deref()
    }
    /// <p>The display name of the hub.</p>
    pub fn hub_display_name(&self) -> std::option::Option<&str> {
        self.hub_display_name.as_deref()
    }
    /// <p>A description of the hub.</p>
    pub fn hub_description(&self) -> std::option::Option<&str> {
        self.hub_description.as_deref()
    }
    /// <p>The searchable keywords for the hub.</p>
    pub fn hub_search_keywords(&self) -> std::option::Option<&[std::string::String]> {
        self.hub_search_keywords.as_deref()
    }
    /// <p>The status of the hub.</p>
    pub fn hub_status(&self) -> std::option::Option<&crate::types::HubStatus> {
        self.hub_status.as_ref()
    }
    /// <p>The date and time that the hub was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time that the hub was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl HubInfo {
    /// Creates a new builder-style object to manufacture [`HubInfo`](crate::types::HubInfo).
    pub fn builder() -> crate::types::builders::HubInfoBuilder {
        crate::types::builders::HubInfoBuilder::default()
    }
}

/// A builder for [`HubInfo`](crate::types::HubInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HubInfoBuilder {
    pub(crate) hub_name: std::option::Option<std::string::String>,
    pub(crate) hub_arn: std::option::Option<std::string::String>,
    pub(crate) hub_display_name: std::option::Option<std::string::String>,
    pub(crate) hub_description: std::option::Option<std::string::String>,
    pub(crate) hub_search_keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) hub_status: std::option::Option<crate::types::HubStatus>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl HubInfoBuilder {
    /// <p>The name of the hub.</p>
    pub fn hub_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_name = Some(input.into());
        self
    }
    /// <p>The name of the hub.</p>
    pub fn set_hub_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub.</p>
    pub fn hub_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hub.</p>
    pub fn set_hub_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_arn = input;
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn hub_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_display_name = Some(input.into());
        self
    }
    /// <p>The display name of the hub.</p>
    pub fn set_hub_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_display_name = input;
        self
    }
    /// <p>A description of the hub.</p>
    pub fn hub_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_description = Some(input.into());
        self
    }
    /// <p>A description of the hub.</p>
    pub fn set_hub_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_description = input;
        self
    }
    /// Appends an item to `hub_search_keywords`.
    ///
    /// To override the contents of this collection use [`set_hub_search_keywords`](Self::set_hub_search_keywords).
    ///
    /// <p>The searchable keywords for the hub.</p>
    pub fn hub_search_keywords(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.hub_search_keywords.unwrap_or_default();
        v.push(input.into());
        self.hub_search_keywords = Some(v);
        self
    }
    /// <p>The searchable keywords for the hub.</p>
    pub fn set_hub_search_keywords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.hub_search_keywords = input;
        self
    }
    /// <p>The status of the hub.</p>
    pub fn hub_status(mut self, input: crate::types::HubStatus) -> Self {
        self.hub_status = Some(input);
        self
    }
    /// <p>The status of the hub.</p>
    pub fn set_hub_status(mut self, input: std::option::Option<crate::types::HubStatus>) -> Self {
        self.hub_status = input;
        self
    }
    /// <p>The date and time that the hub was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The date and time that the hub was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the hub was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The date and time that the hub was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// Consumes the builder and constructs a [`HubInfo`](crate::types::HubInfo).
    pub fn build(self) -> crate::types::HubInfo {
        crate::types::HubInfo {
            hub_name: self.hub_name,
            hub_arn: self.hub_arn,
            hub_display_name: self.hub_display_name,
            hub_description: self.hub_description,
            hub_search_keywords: self.hub_search_keywords,
            hub_status: self.hub_status,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
        }
    }
}
