// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `TrainingInputMode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let traininginputmode = unimplemented!();
/// match traininginputmode {
///     TrainingInputMode::Fastfile => { /* ... */ },
///     TrainingInputMode::File => { /* ... */ },
///     TrainingInputMode::Pipe => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `traininginputmode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `TrainingInputMode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `TrainingInputMode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `TrainingInputMode::NewFeature` is defined.
/// Specifically, when `traininginputmode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `TrainingInputMode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// <p>The training input mode that the algorithm supports. For more information about input
/// modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p>
/// <p>
/// <b>Pipe mode</b>
/// </p>
/// <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from
/// Amazon S3 to the container.</p>
/// <p>
/// <b>File mode</b>
/// </p>
/// <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from
/// S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume
/// for the training container.</p>
/// <p>You must provision the ML storage volume with sufficient capacity to accommodate the
/// data downloaded from S3. In addition to the training data, the ML storage volume also
/// stores the output model. The algorithm container uses the ML storage volume to also
/// store intermediate information, if any.</p>
/// <p>For distributed algorithms, training data is distributed uniformly. Your training
/// duration is predictable if the input data objects sizes are approximately the same. SageMaker
/// does not split the files any further for model training. If the object sizes are skewed,
/// training won't be optimal as the data distribution is also skewed when one host in a
/// training cluster is overloaded, thus becoming a bottleneck in training.</p>
/// <p>
/// <b>FastFile mode</b>
/// </p>
/// <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from
/// S3 to the container with no code changes, and provides file system access to the data.
/// Users can author their training script to interact with these files as if they were
/// stored on disk.</p>
/// <p>
/// <code>FastFile</code> mode works best when the data is read sequentially. Augmented
/// manifest files aren't supported. The startup time is lower when there are fewer files in
/// the S3 bucket provided.</p>
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum TrainingInputMode {
    #[allow(missing_docs)] // documentation missing in model
    Fastfile,
    #[allow(missing_docs)] // documentation missing in model
    File,
    #[allow(missing_docs)] // documentation missing in model
    Pipe,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for TrainingInputMode {
    fn from(s: &str) -> Self {
        match s {
            "FastFile" => TrainingInputMode::Fastfile,
            "File" => TrainingInputMode::File,
            "Pipe" => TrainingInputMode::Pipe,
            other => {
                TrainingInputMode::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for TrainingInputMode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(TrainingInputMode::from(s))
    }
}
impl TrainingInputMode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            TrainingInputMode::Fastfile => "FastFile",
            TrainingInputMode::File => "File",
            TrainingInputMode::Pipe => "Pipe",
            TrainingInputMode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["FastFile", "File", "Pipe"]
    }
}
impl AsRef<str> for TrainingInputMode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
