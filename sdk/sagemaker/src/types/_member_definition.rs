// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines an Amazon Cognito or your own OIDC IdP user group that is part of a work team.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MemberDefinition {
    /// <p>The Amazon Cognito user group that is part of the work team.</p>
    #[doc(hidden)]
    pub cognito_member_definition: std::option::Option<crate::types::CognitoMemberDefinition>,
    /// <p>A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.</p>
    #[doc(hidden)]
    pub oidc_member_definition: std::option::Option<crate::types::OidcMemberDefinition>,
}
impl MemberDefinition {
    /// <p>The Amazon Cognito user group that is part of the work team.</p>
    pub fn cognito_member_definition(
        &self,
    ) -> std::option::Option<&crate::types::CognitoMemberDefinition> {
        self.cognito_member_definition.as_ref()
    }
    /// <p>A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.</p>
    pub fn oidc_member_definition(
        &self,
    ) -> std::option::Option<&crate::types::OidcMemberDefinition> {
        self.oidc_member_definition.as_ref()
    }
}
impl MemberDefinition {
    /// Creates a new builder-style object to manufacture [`MemberDefinition`](crate::types::MemberDefinition).
    pub fn builder() -> crate::types::builders::MemberDefinitionBuilder {
        crate::types::builders::MemberDefinitionBuilder::default()
    }
}

/// A builder for [`MemberDefinition`](crate::types::MemberDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MemberDefinitionBuilder {
    pub(crate) cognito_member_definition:
        std::option::Option<crate::types::CognitoMemberDefinition>,
    pub(crate) oidc_member_definition: std::option::Option<crate::types::OidcMemberDefinition>,
}
impl MemberDefinitionBuilder {
    /// <p>The Amazon Cognito user group that is part of the work team.</p>
    pub fn cognito_member_definition(
        mut self,
        input: crate::types::CognitoMemberDefinition,
    ) -> Self {
        self.cognito_member_definition = Some(input);
        self
    }
    /// <p>The Amazon Cognito user group that is part of the work team.</p>
    pub fn set_cognito_member_definition(
        mut self,
        input: std::option::Option<crate::types::CognitoMemberDefinition>,
    ) -> Self {
        self.cognito_member_definition = input;
        self
    }
    /// <p>A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.</p>
    pub fn oidc_member_definition(mut self, input: crate::types::OidcMemberDefinition) -> Self {
        self.oidc_member_definition = Some(input);
        self
    }
    /// <p>A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.</p>
    pub fn set_oidc_member_definition(
        mut self,
        input: std::option::Option<crate::types::OidcMemberDefinition>,
    ) -> Self {
        self.oidc_member_definition = input;
        self
    }
    /// Consumes the builder and constructs a [`MemberDefinition`](crate::types::MemberDefinition).
    pub fn build(self) -> crate::types::MemberDefinition {
        crate::types::MemberDefinition {
            cognito_member_definition: self.cognito_member_definition,
            oidc_member_definition: self.oidc_member_definition,
        }
    }
}
