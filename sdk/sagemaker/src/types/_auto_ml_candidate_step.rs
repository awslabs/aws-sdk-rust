// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the steps for a candidate and what step it is working on.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoMlCandidateStep {
    /// <p>Whether the candidate is at the transform, training, or processing step.</p>
    #[doc(hidden)]
    pub candidate_step_type: std::option::Option<crate::types::CandidateStepType>,
    /// <p>The ARN for the candidate's step.</p>
    #[doc(hidden)]
    pub candidate_step_arn: std::option::Option<std::string::String>,
    /// <p>The name for the candidate's step.</p>
    #[doc(hidden)]
    pub candidate_step_name: std::option::Option<std::string::String>,
}
impl AutoMlCandidateStep {
    /// <p>Whether the candidate is at the transform, training, or processing step.</p>
    pub fn candidate_step_type(&self) -> std::option::Option<&crate::types::CandidateStepType> {
        self.candidate_step_type.as_ref()
    }
    /// <p>The ARN for the candidate's step.</p>
    pub fn candidate_step_arn(&self) -> std::option::Option<&str> {
        self.candidate_step_arn.as_deref()
    }
    /// <p>The name for the candidate's step.</p>
    pub fn candidate_step_name(&self) -> std::option::Option<&str> {
        self.candidate_step_name.as_deref()
    }
}
impl AutoMlCandidateStep {
    /// Creates a new builder-style object to manufacture [`AutoMlCandidateStep`](crate::types::AutoMlCandidateStep).
    pub fn builder() -> crate::types::builders::AutoMlCandidateStepBuilder {
        crate::types::builders::AutoMlCandidateStepBuilder::default()
    }
}

/// A builder for [`AutoMlCandidateStep`](crate::types::AutoMlCandidateStep).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoMlCandidateStepBuilder {
    pub(crate) candidate_step_type: std::option::Option<crate::types::CandidateStepType>,
    pub(crate) candidate_step_arn: std::option::Option<std::string::String>,
    pub(crate) candidate_step_name: std::option::Option<std::string::String>,
}
impl AutoMlCandidateStepBuilder {
    /// <p>Whether the candidate is at the transform, training, or processing step.</p>
    pub fn candidate_step_type(mut self, input: crate::types::CandidateStepType) -> Self {
        self.candidate_step_type = Some(input);
        self
    }
    /// <p>Whether the candidate is at the transform, training, or processing step.</p>
    pub fn set_candidate_step_type(
        mut self,
        input: std::option::Option<crate::types::CandidateStepType>,
    ) -> Self {
        self.candidate_step_type = input;
        self
    }
    /// <p>The ARN for the candidate's step.</p>
    pub fn candidate_step_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.candidate_step_arn = Some(input.into());
        self
    }
    /// <p>The ARN for the candidate's step.</p>
    pub fn set_candidate_step_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.candidate_step_arn = input;
        self
    }
    /// <p>The name for the candidate's step.</p>
    pub fn candidate_step_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.candidate_step_name = Some(input.into());
        self
    }
    /// <p>The name for the candidate's step.</p>
    pub fn set_candidate_step_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.candidate_step_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoMlCandidateStep`](crate::types::AutoMlCandidateStep).
    pub fn build(self) -> crate::types::AutoMlCandidateStep {
        crate::types::AutoMlCandidateStep {
            candidate_step_type: self.candidate_step_type,
            candidate_step_arn: self.candidate_step_arn,
            candidate_step_name: self.candidate_step_name,
        }
    }
}
