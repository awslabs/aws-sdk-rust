// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DebugHookConfig {
    /// <p>Path to local storage location for metrics and tensors. Defaults to <code>/opt/ml/output/tensors/</code>.</p>
    pub local_path: ::std::option::Option<::std::string::String>,
    /// <p>Path to Amazon S3 storage location for metrics and tensors.</p>
    pub s3_output_path: ::std::option::Option<::std::string::String>,
    /// <p>Configuration information for the Amazon SageMaker Debugger hook parameters.</p>
    pub hook_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Configuration information for Amazon SageMaker Debugger tensor collections. To learn more about how to configure the <code>CollectionConfiguration</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. </p>
    pub collection_configurations: ::std::option::Option<::std::vec::Vec<crate::types::CollectionConfiguration>>,
}
impl DebugHookConfig {
    /// <p>Path to local storage location for metrics and tensors. Defaults to <code>/opt/ml/output/tensors/</code>.</p>
    pub fn local_path(&self) -> ::std::option::Option<&str> {
        self.local_path.as_deref()
    }
    /// <p>Path to Amazon S3 storage location for metrics and tensors.</p>
    pub fn s3_output_path(&self) -> ::std::option::Option<&str> {
        self.s3_output_path.as_deref()
    }
    /// <p>Configuration information for the Amazon SageMaker Debugger hook parameters.</p>
    pub fn hook_parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.hook_parameters.as_ref()
    }
    /// <p>Configuration information for Amazon SageMaker Debugger tensor collections. To learn more about how to configure the <code>CollectionConfiguration</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.collection_configurations.is_none()`.
    pub fn collection_configurations(&self) -> &[crate::types::CollectionConfiguration] {
        self.collection_configurations.as_deref().unwrap_or_default()
    }
}
impl DebugHookConfig {
    /// Creates a new builder-style object to manufacture [`DebugHookConfig`](crate::types::DebugHookConfig).
    pub fn builder() -> crate::types::builders::DebugHookConfigBuilder {
        crate::types::builders::DebugHookConfigBuilder::default()
    }
}

/// A builder for [`DebugHookConfig`](crate::types::DebugHookConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DebugHookConfigBuilder {
    pub(crate) local_path: ::std::option::Option<::std::string::String>,
    pub(crate) s3_output_path: ::std::option::Option<::std::string::String>,
    pub(crate) hook_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) collection_configurations: ::std::option::Option<::std::vec::Vec<crate::types::CollectionConfiguration>>,
}
impl DebugHookConfigBuilder {
    /// <p>Path to local storage location for metrics and tensors. Defaults to <code>/opt/ml/output/tensors/</code>.</p>
    pub fn local_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Path to local storage location for metrics and tensors. Defaults to <code>/opt/ml/output/tensors/</code>.</p>
    pub fn set_local_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_path = input;
        self
    }
    /// <p>Path to local storage location for metrics and tensors. Defaults to <code>/opt/ml/output/tensors/</code>.</p>
    pub fn get_local_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_path
    }
    /// <p>Path to Amazon S3 storage location for metrics and tensors.</p>
    /// This field is required.
    pub fn s3_output_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_output_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Path to Amazon S3 storage location for metrics and tensors.</p>
    pub fn set_s3_output_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_output_path = input;
        self
    }
    /// <p>Path to Amazon S3 storage location for metrics and tensors.</p>
    pub fn get_s3_output_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_output_path
    }
    /// Adds a key-value pair to `hook_parameters`.
    ///
    /// To override the contents of this collection use [`set_hook_parameters`](Self::set_hook_parameters).
    ///
    /// <p>Configuration information for the Amazon SageMaker Debugger hook parameters.</p>
    pub fn hook_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.hook_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.hook_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Configuration information for the Amazon SageMaker Debugger hook parameters.</p>
    pub fn set_hook_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.hook_parameters = input;
        self
    }
    /// <p>Configuration information for the Amazon SageMaker Debugger hook parameters.</p>
    pub fn get_hook_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.hook_parameters
    }
    /// Appends an item to `collection_configurations`.
    ///
    /// To override the contents of this collection use [`set_collection_configurations`](Self::set_collection_configurations).
    ///
    /// <p>Configuration information for Amazon SageMaker Debugger tensor collections. To learn more about how to configure the <code>CollectionConfiguration</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. </p>
    pub fn collection_configurations(mut self, input: crate::types::CollectionConfiguration) -> Self {
        let mut v = self.collection_configurations.unwrap_or_default();
        v.push(input);
        self.collection_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configuration information for Amazon SageMaker Debugger tensor collections. To learn more about how to configure the <code>CollectionConfiguration</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. </p>
    pub fn set_collection_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CollectionConfiguration>>) -> Self {
        self.collection_configurations = input;
        self
    }
    /// <p>Configuration information for Amazon SageMaker Debugger tensor collections. To learn more about how to configure the <code>CollectionConfiguration</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. </p>
    pub fn get_collection_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CollectionConfiguration>> {
        &self.collection_configurations
    }
    /// Consumes the builder and constructs a [`DebugHookConfig`](crate::types::DebugHookConfig).
    pub fn build(self) -> crate::types::DebugHookConfig {
        crate::types::DebugHookConfig {
            local_path: self.local_path,
            s3_output_path: self.s3_output_path,
            hook_parameters: self.hook_parameters,
            collection_configurations: self.collection_configurations,
        }
    }
}
