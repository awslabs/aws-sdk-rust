// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of a provisioned service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceCatalogProvisionedProductDetails {
    /// <p>The ID of the provisioned product.</p>
    #[doc(hidden)]
    pub provisioned_product_id: std::option::Option<std::string::String>,
    /// <p>The current status of the product.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - Stable state, ready to perform any operation. The most recent operation succeeded and completed.</p> </li>
    /// <li> <p> <code>UNDER_CHANGE</code> - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.</p> </li>
    /// <li> <p> <code>TAINTED</code> - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.</p> </li>
    /// <li> <p> <code>ERROR</code> - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.</p> </li>
    /// <li> <p> <code>PLAN_IN_PROGRESS</code> - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub provisioned_product_status_message: std::option::Option<std::string::String>,
}
impl ServiceCatalogProvisionedProductDetails {
    /// <p>The ID of the provisioned product.</p>
    pub fn provisioned_product_id(&self) -> std::option::Option<&str> {
        self.provisioned_product_id.as_deref()
    }
    /// <p>The current status of the product.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - Stable state, ready to perform any operation. The most recent operation succeeded and completed.</p> </li>
    /// <li> <p> <code>UNDER_CHANGE</code> - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.</p> </li>
    /// <li> <p> <code>TAINTED</code> - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.</p> </li>
    /// <li> <p> <code>ERROR</code> - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.</p> </li>
    /// <li> <p> <code>PLAN_IN_PROGRESS</code> - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.</p> </li>
    /// </ul>
    pub fn provisioned_product_status_message(&self) -> std::option::Option<&str> {
        self.provisioned_product_status_message.as_deref()
    }
}
impl ServiceCatalogProvisionedProductDetails {
    /// Creates a new builder-style object to manufacture [`ServiceCatalogProvisionedProductDetails`](crate::types::ServiceCatalogProvisionedProductDetails).
    pub fn builder() -> crate::types::builders::ServiceCatalogProvisionedProductDetailsBuilder {
        crate::types::builders::ServiceCatalogProvisionedProductDetailsBuilder::default()
    }
}

/// A builder for [`ServiceCatalogProvisionedProductDetails`](crate::types::ServiceCatalogProvisionedProductDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceCatalogProvisionedProductDetailsBuilder {
    pub(crate) provisioned_product_id: std::option::Option<std::string::String>,
    pub(crate) provisioned_product_status_message: std::option::Option<std::string::String>,
}
impl ServiceCatalogProvisionedProductDetailsBuilder {
    /// <p>The ID of the provisioned product.</p>
    pub fn provisioned_product_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.provisioned_product_id = Some(input.into());
        self
    }
    /// <p>The ID of the provisioned product.</p>
    pub fn set_provisioned_product_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provisioned_product_id = input;
        self
    }
    /// <p>The current status of the product.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - Stable state, ready to perform any operation. The most recent operation succeeded and completed.</p> </li>
    /// <li> <p> <code>UNDER_CHANGE</code> - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.</p> </li>
    /// <li> <p> <code>TAINTED</code> - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.</p> </li>
    /// <li> <p> <code>ERROR</code> - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.</p> </li>
    /// <li> <p> <code>PLAN_IN_PROGRESS</code> - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.</p> </li>
    /// </ul>
    pub fn provisioned_product_status_message(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.provisioned_product_status_message = Some(input.into());
        self
    }
    /// <p>The current status of the product.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - Stable state, ready to perform any operation. The most recent operation succeeded and completed.</p> </li>
    /// <li> <p> <code>UNDER_CHANGE</code> - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.</p> </li>
    /// <li> <p> <code>TAINTED</code> - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.</p> </li>
    /// <li> <p> <code>ERROR</code> - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.</p> </li>
    /// <li> <p> <code>PLAN_IN_PROGRESS</code> - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.</p> </li>
    /// </ul>
    pub fn set_provisioned_product_status_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provisioned_product_status_message = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceCatalogProvisionedProductDetails`](crate::types::ServiceCatalogProvisionedProductDetails).
    pub fn build(self) -> crate::types::ServiceCatalogProvisionedProductDetails {
        crate::types::ServiceCatalogProvisionedProductDetails {
            provisioned_product_id: self.provisioned_product_id,
            provisioned_product_status_message: self.provisioned_product_status_message,
        }
    }
}
