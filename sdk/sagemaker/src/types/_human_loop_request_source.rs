// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for configuring the source of human task requests.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HumanLoopRequestSource {
    /// <p>Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. The default field settings and JSON parsing rules are different based on the integration source. Valid values:</p>
    pub aws_managed_human_loop_request_source: ::std::option::Option<crate::types::AwsManagedHumanLoopRequestSource>,
}
impl HumanLoopRequestSource {
    /// <p>Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. The default field settings and JSON parsing rules are different based on the integration source. Valid values:</p>
    pub fn aws_managed_human_loop_request_source(&self) -> ::std::option::Option<&crate::types::AwsManagedHumanLoopRequestSource> {
        self.aws_managed_human_loop_request_source.as_ref()
    }
}
impl HumanLoopRequestSource {
    /// Creates a new builder-style object to manufacture [`HumanLoopRequestSource`](crate::types::HumanLoopRequestSource).
    pub fn builder() -> crate::types::builders::HumanLoopRequestSourceBuilder {
        crate::types::builders::HumanLoopRequestSourceBuilder::default()
    }
}

/// A builder for [`HumanLoopRequestSource`](crate::types::HumanLoopRequestSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HumanLoopRequestSourceBuilder {
    pub(crate) aws_managed_human_loop_request_source: ::std::option::Option<crate::types::AwsManagedHumanLoopRequestSource>,
}
impl HumanLoopRequestSourceBuilder {
    /// <p>Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. The default field settings and JSON parsing rules are different based on the integration source. Valid values:</p>
    /// This field is required.
    pub fn aws_managed_human_loop_request_source(mut self, input: crate::types::AwsManagedHumanLoopRequestSource) -> Self {
        self.aws_managed_human_loop_request_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. The default field settings and JSON parsing rules are different based on the integration source. Valid values:</p>
    pub fn set_aws_managed_human_loop_request_source(mut self, input: ::std::option::Option<crate::types::AwsManagedHumanLoopRequestSource>) -> Self {
        self.aws_managed_human_loop_request_source = input;
        self
    }
    /// <p>Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. The default field settings and JSON parsing rules are different based on the integration source. Valid values:</p>
    pub fn get_aws_managed_human_loop_request_source(&self) -> &::std::option::Option<crate::types::AwsManagedHumanLoopRequestSource> {
        &self.aws_managed_human_loop_request_source
    }
    /// Consumes the builder and constructs a [`HumanLoopRequestSource`](crate::types::HumanLoopRequestSource).
    pub fn build(self) -> crate::types::HumanLoopRequestSource {
        crate::types::HumanLoopRequestSource {
            aws_managed_human_loop_request_source: self.aws_managed_human_loop_request_source,
        }
    }
}
