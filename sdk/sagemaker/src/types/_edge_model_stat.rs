// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Status of edge devices with this model.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EdgeModelStat {
    /// <p>The name of the model.</p>
    #[doc(hidden)]
    pub model_name: std::option::Option<std::string::String>,
    /// <p>The model version.</p>
    #[doc(hidden)]
    pub model_version: std::option::Option<std::string::String>,
    /// <p>The number of devices that have this model version and do not have a heart beat.</p>
    #[doc(hidden)]
    pub offline_device_count: i64,
    /// <p>The number of devices that have this model version and have a heart beat. </p>
    #[doc(hidden)]
    pub connected_device_count: i64,
    /// <p>The number of devices that have this model version, a heart beat, and are currently running.</p>
    #[doc(hidden)]
    pub active_device_count: i64,
    /// <p>The number of devices with this model version and are producing sample data.</p>
    #[doc(hidden)]
    pub sampling_device_count: i64,
}
impl EdgeModelStat {
    /// <p>The name of the model.</p>
    pub fn model_name(&self) -> std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>The model version.</p>
    pub fn model_version(&self) -> std::option::Option<&str> {
        self.model_version.as_deref()
    }
    /// <p>The number of devices that have this model version and do not have a heart beat.</p>
    pub fn offline_device_count(&self) -> i64 {
        self.offline_device_count
    }
    /// <p>The number of devices that have this model version and have a heart beat. </p>
    pub fn connected_device_count(&self) -> i64 {
        self.connected_device_count
    }
    /// <p>The number of devices that have this model version, a heart beat, and are currently running.</p>
    pub fn active_device_count(&self) -> i64 {
        self.active_device_count
    }
    /// <p>The number of devices with this model version and are producing sample data.</p>
    pub fn sampling_device_count(&self) -> i64 {
        self.sampling_device_count
    }
}
impl EdgeModelStat {
    /// Creates a new builder-style object to manufacture [`EdgeModelStat`](crate::types::EdgeModelStat).
    pub fn builder() -> crate::types::builders::EdgeModelStatBuilder {
        crate::types::builders::EdgeModelStatBuilder::default()
    }
}

/// A builder for [`EdgeModelStat`](crate::types::EdgeModelStat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EdgeModelStatBuilder {
    pub(crate) model_name: std::option::Option<std::string::String>,
    pub(crate) model_version: std::option::Option<std::string::String>,
    pub(crate) offline_device_count: std::option::Option<i64>,
    pub(crate) connected_device_count: std::option::Option<i64>,
    pub(crate) active_device_count: std::option::Option<i64>,
    pub(crate) sampling_device_count: std::option::Option<i64>,
}
impl EdgeModelStatBuilder {
    /// <p>The name of the model.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_name = Some(input.into());
        self
    }
    /// <p>The name of the model.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>The model version.</p>
    pub fn model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_version = Some(input.into());
        self
    }
    /// <p>The model version.</p>
    pub fn set_model_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_version = input;
        self
    }
    /// <p>The number of devices that have this model version and do not have a heart beat.</p>
    pub fn offline_device_count(mut self, input: i64) -> Self {
        self.offline_device_count = Some(input);
        self
    }
    /// <p>The number of devices that have this model version and do not have a heart beat.</p>
    pub fn set_offline_device_count(mut self, input: std::option::Option<i64>) -> Self {
        self.offline_device_count = input;
        self
    }
    /// <p>The number of devices that have this model version and have a heart beat. </p>
    pub fn connected_device_count(mut self, input: i64) -> Self {
        self.connected_device_count = Some(input);
        self
    }
    /// <p>The number of devices that have this model version and have a heart beat. </p>
    pub fn set_connected_device_count(mut self, input: std::option::Option<i64>) -> Self {
        self.connected_device_count = input;
        self
    }
    /// <p>The number of devices that have this model version, a heart beat, and are currently running.</p>
    pub fn active_device_count(mut self, input: i64) -> Self {
        self.active_device_count = Some(input);
        self
    }
    /// <p>The number of devices that have this model version, a heart beat, and are currently running.</p>
    pub fn set_active_device_count(mut self, input: std::option::Option<i64>) -> Self {
        self.active_device_count = input;
        self
    }
    /// <p>The number of devices with this model version and are producing sample data.</p>
    pub fn sampling_device_count(mut self, input: i64) -> Self {
        self.sampling_device_count = Some(input);
        self
    }
    /// <p>The number of devices with this model version and are producing sample data.</p>
    pub fn set_sampling_device_count(mut self, input: std::option::Option<i64>) -> Self {
        self.sampling_device_count = input;
        self
    }
    /// Consumes the builder and constructs a [`EdgeModelStat`](crate::types::EdgeModelStat).
    pub fn build(self) -> crate::types::EdgeModelStat {
        crate::types::EdgeModelStat {
            model_name: self.model_name,
            model_version: self.model_version,
            offline_device_count: self.offline_device_count.unwrap_or_default(),
            connected_device_count: self.connected_device_count.unwrap_or_default(),
            active_device_count: self.active_device_count.unwrap_or_default(),
            sampling_device_count: self.sampling_device_count.unwrap_or_default(),
        }
    }
}
