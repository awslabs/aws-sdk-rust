// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the traffic routing strategy during an endpoint deployment to shift traffic from the old fleet to the new fleet.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrafficRoutingConfig {
    /// <p>Traffic routing strategy type.</p>
    /// <ul>
    /// <li> <p> <code>ALL_AT_ONCE</code>: Endpoint traffic shifts to the new fleet in a single step. </p> </li>
    /// <li> <p> <code>CANARY</code>: Endpoint traffic shifts to the new fleet in two steps. The first step is the canary, which is a small portion of the traffic. The second step is the remainder of the traffic. </p> </li>
    /// <li> <p> <code>LINEAR</code>: Endpoint traffic shifts to the new fleet in n steps of a configurable size. </p> </li>
    /// </ul>
    pub r#type: ::std::option::Option<crate::types::TrafficRoutingConfigType>,
    /// <p>The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet.</p>
    pub wait_interval_in_seconds: ::std::option::Option<i32>,
    /// <p>Batch size for the first step to turn on traffic on the new endpoint fleet. <code>Value</code> must be less than or equal to 50% of the variant's total instance count.</p>
    pub canary_size: ::std::option::Option<crate::types::CapacitySize>,
    /// <p>Batch size for each step to turn on traffic on the new endpoint fleet. <code>Value</code> must be 10-50% of the variant's total instance count.</p>
    pub linear_step_size: ::std::option::Option<crate::types::CapacitySize>,
}
impl TrafficRoutingConfig {
    /// <p>Traffic routing strategy type.</p>
    /// <ul>
    /// <li> <p> <code>ALL_AT_ONCE</code>: Endpoint traffic shifts to the new fleet in a single step. </p> </li>
    /// <li> <p> <code>CANARY</code>: Endpoint traffic shifts to the new fleet in two steps. The first step is the canary, which is a small portion of the traffic. The second step is the remainder of the traffic. </p> </li>
    /// <li> <p> <code>LINEAR</code>: Endpoint traffic shifts to the new fleet in n steps of a configurable size. </p> </li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::TrafficRoutingConfigType> {
        self.r#type.as_ref()
    }
    /// <p>The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet.</p>
    pub fn wait_interval_in_seconds(&self) -> ::std::option::Option<i32> {
        self.wait_interval_in_seconds
    }
    /// <p>Batch size for the first step to turn on traffic on the new endpoint fleet. <code>Value</code> must be less than or equal to 50% of the variant's total instance count.</p>
    pub fn canary_size(&self) -> ::std::option::Option<&crate::types::CapacitySize> {
        self.canary_size.as_ref()
    }
    /// <p>Batch size for each step to turn on traffic on the new endpoint fleet. <code>Value</code> must be 10-50% of the variant's total instance count.</p>
    pub fn linear_step_size(&self) -> ::std::option::Option<&crate::types::CapacitySize> {
        self.linear_step_size.as_ref()
    }
}
impl TrafficRoutingConfig {
    /// Creates a new builder-style object to manufacture [`TrafficRoutingConfig`](crate::types::TrafficRoutingConfig).
    pub fn builder() -> crate::types::builders::TrafficRoutingConfigBuilder {
        crate::types::builders::TrafficRoutingConfigBuilder::default()
    }
}

/// A builder for [`TrafficRoutingConfig`](crate::types::TrafficRoutingConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TrafficRoutingConfigBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::TrafficRoutingConfigType>,
    pub(crate) wait_interval_in_seconds: ::std::option::Option<i32>,
    pub(crate) canary_size: ::std::option::Option<crate::types::CapacitySize>,
    pub(crate) linear_step_size: ::std::option::Option<crate::types::CapacitySize>,
}
impl TrafficRoutingConfigBuilder {
    /// <p>Traffic routing strategy type.</p>
    /// <ul>
    /// <li> <p> <code>ALL_AT_ONCE</code>: Endpoint traffic shifts to the new fleet in a single step. </p> </li>
    /// <li> <p> <code>CANARY</code>: Endpoint traffic shifts to the new fleet in two steps. The first step is the canary, which is a small portion of the traffic. The second step is the remainder of the traffic. </p> </li>
    /// <li> <p> <code>LINEAR</code>: Endpoint traffic shifts to the new fleet in n steps of a configurable size. </p> </li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::TrafficRoutingConfigType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Traffic routing strategy type.</p>
    /// <ul>
    /// <li> <p> <code>ALL_AT_ONCE</code>: Endpoint traffic shifts to the new fleet in a single step. </p> </li>
    /// <li> <p> <code>CANARY</code>: Endpoint traffic shifts to the new fleet in two steps. The first step is the canary, which is a small portion of the traffic. The second step is the remainder of the traffic. </p> </li>
    /// <li> <p> <code>LINEAR</code>: Endpoint traffic shifts to the new fleet in n steps of a configurable size. </p> </li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TrafficRoutingConfigType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Traffic routing strategy type.</p>
    /// <ul>
    /// <li> <p> <code>ALL_AT_ONCE</code>: Endpoint traffic shifts to the new fleet in a single step. </p> </li>
    /// <li> <p> <code>CANARY</code>: Endpoint traffic shifts to the new fleet in two steps. The first step is the canary, which is a small portion of the traffic. The second step is the remainder of the traffic. </p> </li>
    /// <li> <p> <code>LINEAR</code>: Endpoint traffic shifts to the new fleet in n steps of a configurable size. </p> </li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TrafficRoutingConfigType> {
        &self.r#type
    }
    /// <p>The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet.</p>
    /// This field is required.
    pub fn wait_interval_in_seconds(mut self, input: i32) -> Self {
        self.wait_interval_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet.</p>
    pub fn set_wait_interval_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.wait_interval_in_seconds = input;
        self
    }
    /// <p>The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet.</p>
    pub fn get_wait_interval_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.wait_interval_in_seconds
    }
    /// <p>Batch size for the first step to turn on traffic on the new endpoint fleet. <code>Value</code> must be less than or equal to 50% of the variant's total instance count.</p>
    pub fn canary_size(mut self, input: crate::types::CapacitySize) -> Self {
        self.canary_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Batch size for the first step to turn on traffic on the new endpoint fleet. <code>Value</code> must be less than or equal to 50% of the variant's total instance count.</p>
    pub fn set_canary_size(mut self, input: ::std::option::Option<crate::types::CapacitySize>) -> Self {
        self.canary_size = input;
        self
    }
    /// <p>Batch size for the first step to turn on traffic on the new endpoint fleet. <code>Value</code> must be less than or equal to 50% of the variant's total instance count.</p>
    pub fn get_canary_size(&self) -> &::std::option::Option<crate::types::CapacitySize> {
        &self.canary_size
    }
    /// <p>Batch size for each step to turn on traffic on the new endpoint fleet. <code>Value</code> must be 10-50% of the variant's total instance count.</p>
    pub fn linear_step_size(mut self, input: crate::types::CapacitySize) -> Self {
        self.linear_step_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Batch size for each step to turn on traffic on the new endpoint fleet. <code>Value</code> must be 10-50% of the variant's total instance count.</p>
    pub fn set_linear_step_size(mut self, input: ::std::option::Option<crate::types::CapacitySize>) -> Self {
        self.linear_step_size = input;
        self
    }
    /// <p>Batch size for each step to turn on traffic on the new endpoint fleet. <code>Value</code> must be 10-50% of the variant's total instance count.</p>
    pub fn get_linear_step_size(&self) -> &::std::option::Option<crate::types::CapacitySize> {
        &self.linear_step_size
    }
    /// Consumes the builder and constructs a [`TrafficRoutingConfig`](crate::types::TrafficRoutingConfig).
    pub fn build(self) -> crate::types::TrafficRoutingConfig {
        crate::types::TrafficRoutingConfig {
            r#type: self.r#type,
            wait_interval_in_seconds: self.wait_interval_in_seconds,
            canary_size: self.canary_size,
            linear_step_size: self.linear_step_size,
        }
    }
}
