// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ObjectiveStatusCounters {
    /// <p>The number of training jobs whose final objective metric was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.</p>
    #[doc(hidden)]
    pub succeeded: i32,
    /// <p>The number of training jobs that are in progress and pending evaluation of their final objective metric.</p>
    #[doc(hidden)]
    pub pending: i32,
    /// <p>The number of training jobs whose final objective metric was not evaluated and used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.</p>
    #[doc(hidden)]
    pub failed: i32,
}
impl ObjectiveStatusCounters {
    /// <p>The number of training jobs whose final objective metric was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.</p>
    pub fn succeeded(&self) -> i32 {
        self.succeeded
    }
    /// <p>The number of training jobs that are in progress and pending evaluation of their final objective metric.</p>
    pub fn pending(&self) -> i32 {
        self.pending
    }
    /// <p>The number of training jobs whose final objective metric was not evaluated and used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.</p>
    pub fn failed(&self) -> i32 {
        self.failed
    }
}
impl ObjectiveStatusCounters {
    /// Creates a new builder-style object to manufacture [`ObjectiveStatusCounters`](crate::types::ObjectiveStatusCounters).
    pub fn builder() -> crate::types::builders::ObjectiveStatusCountersBuilder {
        crate::types::builders::ObjectiveStatusCountersBuilder::default()
    }
}

/// A builder for [`ObjectiveStatusCounters`](crate::types::ObjectiveStatusCounters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ObjectiveStatusCountersBuilder {
    pub(crate) succeeded: std::option::Option<i32>,
    pub(crate) pending: std::option::Option<i32>,
    pub(crate) failed: std::option::Option<i32>,
}
impl ObjectiveStatusCountersBuilder {
    /// <p>The number of training jobs whose final objective metric was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.</p>
    pub fn succeeded(mut self, input: i32) -> Self {
        self.succeeded = Some(input);
        self
    }
    /// <p>The number of training jobs whose final objective metric was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.</p>
    pub fn set_succeeded(mut self, input: std::option::Option<i32>) -> Self {
        self.succeeded = input;
        self
    }
    /// <p>The number of training jobs that are in progress and pending evaluation of their final objective metric.</p>
    pub fn pending(mut self, input: i32) -> Self {
        self.pending = Some(input);
        self
    }
    /// <p>The number of training jobs that are in progress and pending evaluation of their final objective metric.</p>
    pub fn set_pending(mut self, input: std::option::Option<i32>) -> Self {
        self.pending = input;
        self
    }
    /// <p>The number of training jobs whose final objective metric was not evaluated and used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.</p>
    pub fn failed(mut self, input: i32) -> Self {
        self.failed = Some(input);
        self
    }
    /// <p>The number of training jobs whose final objective metric was not evaluated and used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.</p>
    pub fn set_failed(mut self, input: std::option::Option<i32>) -> Self {
        self.failed = input;
        self
    }
    /// Consumes the builder and constructs a [`ObjectiveStatusCounters`](crate::types::ObjectiveStatusCounters).
    pub fn build(self) -> crate::types::ObjectiveStatusCounters {
        crate::types::ObjectiveStatusCounters {
            succeeded: self.succeeded.unwrap_or_default(),
            pending: self.pending.unwrap_or_default(),
            failed: self.failed.unwrap_or_default(),
        }
    }
}
