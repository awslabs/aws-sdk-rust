// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the status of the production variant.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProductionVariantStatus {
    /// <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
    /// <ul>
    /// <li> <p> <code>Creating</code>: Creating inference resources for the production variant.</p> </li>
    /// <li> <p> <code>Deleting</code>: Terminating inference resources for the production variant.</p> </li>
    /// <li> <p> <code>Updating</code>: Updating capacity for the production variant.</p> </li>
    /// <li> <p> <code>ActivatingTraffic</code>: Turning on traffic for the production variant.</p> </li>
    /// <li> <p> <code>Baking</code>: Waiting period to monitor the CloudWatch alarms in the automatic rollback configuration.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::VariantStatus>,
    /// <p>A message that describes the status of the production variant.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The start time of the current status change.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ProductionVariantStatus {
    /// <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
    /// <ul>
    /// <li> <p> <code>Creating</code>: Creating inference resources for the production variant.</p> </li>
    /// <li> <p> <code>Deleting</code>: Terminating inference resources for the production variant.</p> </li>
    /// <li> <p> <code>Updating</code>: Updating capacity for the production variant.</p> </li>
    /// <li> <p> <code>ActivatingTraffic</code>: Turning on traffic for the production variant.</p> </li>
    /// <li> <p> <code>Baking</code>: Waiting period to monitor the CloudWatch alarms in the automatic rollback configuration.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::VariantStatus> {
        self.status.as_ref()
    }
    /// <p>A message that describes the status of the production variant.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The start time of the current status change.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
}
impl ProductionVariantStatus {
    /// Creates a new builder-style object to manufacture [`ProductionVariantStatus`](crate::types::ProductionVariantStatus).
    pub fn builder() -> crate::types::builders::ProductionVariantStatusBuilder {
        crate::types::builders::ProductionVariantStatusBuilder::default()
    }
}

/// A builder for [`ProductionVariantStatus`](crate::types::ProductionVariantStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProductionVariantStatusBuilder {
    pub(crate) status: std::option::Option<crate::types::VariantStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ProductionVariantStatusBuilder {
    /// <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
    /// <ul>
    /// <li> <p> <code>Creating</code>: Creating inference resources for the production variant.</p> </li>
    /// <li> <p> <code>Deleting</code>: Terminating inference resources for the production variant.</p> </li>
    /// <li> <p> <code>Updating</code>: Updating capacity for the production variant.</p> </li>
    /// <li> <p> <code>ActivatingTraffic</code>: Turning on traffic for the production variant.</p> </li>
    /// <li> <p> <code>Baking</code>: Waiting period to monitor the CloudWatch alarms in the automatic rollback configuration.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::VariantStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
    /// <ul>
    /// <li> <p> <code>Creating</code>: Creating inference resources for the production variant.</p> </li>
    /// <li> <p> <code>Deleting</code>: Terminating inference resources for the production variant.</p> </li>
    /// <li> <p> <code>Updating</code>: Updating capacity for the production variant.</p> </li>
    /// <li> <p> <code>ActivatingTraffic</code>: Turning on traffic for the production variant.</p> </li>
    /// <li> <p> <code>Baking</code>: Waiting period to monitor the CloudWatch alarms in the automatic rollback configuration.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::VariantStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>A message that describes the status of the production variant.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>A message that describes the status of the production variant.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The start time of the current status change.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The start time of the current status change.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ProductionVariantStatus`](crate::types::ProductionVariantStatus).
    pub fn build(self) -> crate::types::ProductionVariantStatus {
        crate::types::ProductionVariantStatus {
            status: self.status,
            status_message: self.status_message,
            start_time: self.start_time,
        }
    }
}
