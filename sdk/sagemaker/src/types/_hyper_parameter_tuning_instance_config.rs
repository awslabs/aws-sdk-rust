// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for hyperparameter tuning resources for use in training jobs launched by the tuning job. These resources include compute instances and storage volumes. Specify one or more compute instance configurations and allocation strategies to select resources (optional).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HyperParameterTuningInstanceConfig {
    /// <p>The instance type used for processing of hyperparameter optimization jobs. Choose from general purpose (no GPUs) instance types: ml.m5.xlarge, ml.m5.2xlarge, and ml.m5.4xlarge or compute optimized (no GPUs) instance types: ml.c5.xlarge and ml.c5.2xlarge. For more information about instance types, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html">instance type descriptions</a>.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<crate::types::TrainingInstanceType>,
    /// <p>The number of instances of the type specified by <code>InstanceType</code>. Choose an instance count larger than 1 for distributed training algorithms. See <a href="https://docs.aws.amazon.com/data-parallel-use-api.html">SageMaker distributed training jobs</a> for more information.</p>
    #[doc(hidden)]
    pub instance_count: i32,
    /// <p>The volume size in GB of the data to be processed for hyperparameter optimization (optional).</p>
    #[doc(hidden)]
    pub volume_size_in_gb: i32,
}
impl HyperParameterTuningInstanceConfig {
    /// <p>The instance type used for processing of hyperparameter optimization jobs. Choose from general purpose (no GPUs) instance types: ml.m5.xlarge, ml.m5.2xlarge, and ml.m5.4xlarge or compute optimized (no GPUs) instance types: ml.c5.xlarge and ml.c5.2xlarge. For more information about instance types, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html">instance type descriptions</a>.</p>
    pub fn instance_type(&self) -> std::option::Option<&crate::types::TrainingInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The number of instances of the type specified by <code>InstanceType</code>. Choose an instance count larger than 1 for distributed training algorithms. See <a href="https://docs.aws.amazon.com/data-parallel-use-api.html">SageMaker distributed training jobs</a> for more information.</p>
    pub fn instance_count(&self) -> i32 {
        self.instance_count
    }
    /// <p>The volume size in GB of the data to be processed for hyperparameter optimization (optional).</p>
    pub fn volume_size_in_gb(&self) -> i32 {
        self.volume_size_in_gb
    }
}
impl HyperParameterTuningInstanceConfig {
    /// Creates a new builder-style object to manufacture [`HyperParameterTuningInstanceConfig`](crate::types::HyperParameterTuningInstanceConfig).
    pub fn builder() -> crate::types::builders::HyperParameterTuningInstanceConfigBuilder {
        crate::types::builders::HyperParameterTuningInstanceConfigBuilder::default()
    }
}

/// A builder for [`HyperParameterTuningInstanceConfig`](crate::types::HyperParameterTuningInstanceConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HyperParameterTuningInstanceConfigBuilder {
    pub(crate) instance_type: std::option::Option<crate::types::TrainingInstanceType>,
    pub(crate) instance_count: std::option::Option<i32>,
    pub(crate) volume_size_in_gb: std::option::Option<i32>,
}
impl HyperParameterTuningInstanceConfigBuilder {
    /// <p>The instance type used for processing of hyperparameter optimization jobs. Choose from general purpose (no GPUs) instance types: ml.m5.xlarge, ml.m5.2xlarge, and ml.m5.4xlarge or compute optimized (no GPUs) instance types: ml.c5.xlarge and ml.c5.2xlarge. For more information about instance types, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html">instance type descriptions</a>.</p>
    pub fn instance_type(mut self, input: crate::types::TrainingInstanceType) -> Self {
        self.instance_type = Some(input);
        self
    }
    /// <p>The instance type used for processing of hyperparameter optimization jobs. Choose from general purpose (no GPUs) instance types: ml.m5.xlarge, ml.m5.2xlarge, and ml.m5.4xlarge or compute optimized (no GPUs) instance types: ml.c5.xlarge and ml.c5.2xlarge. For more information about instance types, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html">instance type descriptions</a>.</p>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::types::TrainingInstanceType>,
    ) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The number of instances of the type specified by <code>InstanceType</code>. Choose an instance count larger than 1 for distributed training algorithms. See <a href="https://docs.aws.amazon.com/data-parallel-use-api.html">SageMaker distributed training jobs</a> for more information.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = Some(input);
        self
    }
    /// <p>The number of instances of the type specified by <code>InstanceType</code>. Choose an instance count larger than 1 for distributed training algorithms. See <a href="https://docs.aws.amazon.com/data-parallel-use-api.html">SageMaker distributed training jobs</a> for more information.</p>
    pub fn set_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The volume size in GB of the data to be processed for hyperparameter optimization (optional).</p>
    pub fn volume_size_in_gb(mut self, input: i32) -> Self {
        self.volume_size_in_gb = Some(input);
        self
    }
    /// <p>The volume size in GB of the data to be processed for hyperparameter optimization (optional).</p>
    pub fn set_volume_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_size_in_gb = input;
        self
    }
    /// Consumes the builder and constructs a [`HyperParameterTuningInstanceConfig`](crate::types::HyperParameterTuningInstanceConfig).
    pub fn build(self) -> crate::types::HyperParameterTuningInstanceConfig {
        crate::types::HyperParameterTuningInstanceConfig {
            instance_type: self.instance_type,
            instance_count: self.instance_count.unwrap_or_default(),
            volume_size_in_gb: self.volume_size_in_gb.unwrap_or_default(),
        }
    }
}
