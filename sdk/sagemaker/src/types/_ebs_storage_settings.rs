// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of EBS storage settings that apply to both private and shared spaces.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EbsStorageSettings {
    /// <p>The size of an EBS storage volume for a space.</p>
    pub ebs_volume_size_in_gb: ::std::option::Option<i32>,
}
impl EbsStorageSettings {
    /// <p>The size of an EBS storage volume for a space.</p>
    pub fn ebs_volume_size_in_gb(&self) -> ::std::option::Option<i32> {
        self.ebs_volume_size_in_gb
    }
}
impl EbsStorageSettings {
    /// Creates a new builder-style object to manufacture [`EbsStorageSettings`](crate::types::EbsStorageSettings).
    pub fn builder() -> crate::types::builders::EbsStorageSettingsBuilder {
        crate::types::builders::EbsStorageSettingsBuilder::default()
    }
}

/// A builder for [`EbsStorageSettings`](crate::types::EbsStorageSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EbsStorageSettingsBuilder {
    pub(crate) ebs_volume_size_in_gb: ::std::option::Option<i32>,
}
impl EbsStorageSettingsBuilder {
    /// <p>The size of an EBS storage volume for a space.</p>
    /// This field is required.
    pub fn ebs_volume_size_in_gb(mut self, input: i32) -> Self {
        self.ebs_volume_size_in_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of an EBS storage volume for a space.</p>
    pub fn set_ebs_volume_size_in_gb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ebs_volume_size_in_gb = input;
        self
    }
    /// <p>The size of an EBS storage volume for a space.</p>
    pub fn get_ebs_volume_size_in_gb(&self) -> &::std::option::Option<i32> {
        &self.ebs_volume_size_in_gb
    }
    /// Consumes the builder and constructs a [`EbsStorageSettings`](crate::types::EbsStorageSettings).
    pub fn build(self) -> crate::types::EbsStorageSettings {
        crate::types::EbsStorageSettings {
            ebs_volume_size_in_gb: self.ebs_volume_size_in_gb,
        }
    }
}
