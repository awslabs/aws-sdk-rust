// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains a list of recommendation jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InferenceRecommendationsJob {
    /// <p>The name of the job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The job description.</p>
    pub job_description: ::std::option::Option<::std::string::String>,
    /// <p>The recommendation job type.</p>
    pub job_type: ::std::option::Option<crate::types::RecommendationJobType>,
    /// <p>The Amazon Resource Name (ARN) of the recommendation job.</p>
    pub job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the job.</p>
    pub status: ::std::option::Option<crate::types::RecommendationJobStatus>,
    /// <p>A timestamp that shows when the job was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp that shows when the job completed.</p>
    pub completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp that shows when the job was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If the job fails, provides information why the job failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The name of the created model.</p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub sample_payload_url: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a versioned model package.</p>
    pub model_package_version_arn: ::std::option::Option<::std::string::String>,
}
impl InferenceRecommendationsJob {
    /// <p>The name of the job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The job description.</p>
    pub fn job_description(&self) -> ::std::option::Option<&str> {
        self.job_description.as_deref()
    }
    /// <p>The recommendation job type.</p>
    pub fn job_type(&self) -> ::std::option::Option<&crate::types::RecommendationJobType> {
        self.job_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the recommendation job.</p>
    pub fn job_arn(&self) -> ::std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The status of the job.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RecommendationJobStatus> {
        self.status.as_ref()
    }
    /// <p>A timestamp that shows when the job was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>A timestamp that shows when the job completed.</p>
    pub fn completion_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A timestamp that shows when the job was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>If the job fails, provides information why the job failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The name of the created model.</p>
    pub fn model_name(&self) -> ::std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn sample_payload_url(&self) -> ::std::option::Option<&str> {
        self.sample_payload_url.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a versioned model package.</p>
    pub fn model_package_version_arn(&self) -> ::std::option::Option<&str> {
        self.model_package_version_arn.as_deref()
    }
}
impl InferenceRecommendationsJob {
    /// Creates a new builder-style object to manufacture [`InferenceRecommendationsJob`](crate::types::InferenceRecommendationsJob).
    pub fn builder() -> crate::types::builders::InferenceRecommendationsJobBuilder {
        crate::types::builders::InferenceRecommendationsJobBuilder::default()
    }
}

/// A builder for [`InferenceRecommendationsJob`](crate::types::InferenceRecommendationsJob).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InferenceRecommendationsJobBuilder {
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_description: ::std::option::Option<::std::string::String>,
    pub(crate) job_type: ::std::option::Option<crate::types::RecommendationJobType>,
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RecommendationJobStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) sample_payload_url: ::std::option::Option<::std::string::String>,
    pub(crate) model_package_version_arn: ::std::option::Option<::std::string::String>,
}
impl InferenceRecommendationsJobBuilder {
    /// <p>The name of the job.</p>
    /// This field is required.
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of the job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The job description.</p>
    /// This field is required.
    pub fn job_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job description.</p>
    pub fn set_job_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_description = input;
        self
    }
    /// <p>The job description.</p>
    pub fn get_job_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_description
    }
    /// <p>The recommendation job type.</p>
    /// This field is required.
    pub fn job_type(mut self, input: crate::types::RecommendationJobType) -> Self {
        self.job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recommendation job type.</p>
    pub fn set_job_type(mut self, input: ::std::option::Option<crate::types::RecommendationJobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p>The recommendation job type.</p>
    pub fn get_job_type(&self) -> &::std::option::Option<crate::types::RecommendationJobType> {
        &self.job_type
    }
    /// <p>The Amazon Resource Name (ARN) of the recommendation job.</p>
    /// This field is required.
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recommendation job.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recommendation job.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>The status of the job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::RecommendationJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RecommendationJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RecommendationJobStatus> {
        &self.status
    }
    /// <p>A timestamp that shows when the job was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that shows when the job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A timestamp that shows when the job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>A timestamp that shows when the job completed.</p>
    pub fn completion_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that shows when the job completed.</p>
    pub fn set_completion_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_time = input;
        self
    }
    /// <p>A timestamp that shows when the job completed.</p>
    pub fn get_completion_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_time
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>A timestamp that shows when the job was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that shows when the job was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>A timestamp that shows when the job was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>If the job fails, provides information why the job failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the job fails, provides information why the job failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>If the job fails, provides information why the job failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The name of the created model.</p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the created model.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>The name of the created model.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn sample_payload_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sample_payload_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn set_sample_payload_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sample_payload_url = input;
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>
    pub fn get_sample_payload_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.sample_payload_url
    }
    /// <p>The Amazon Resource Name (ARN) of a versioned model package.</p>
    pub fn model_package_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_package_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a versioned model package.</p>
    pub fn set_model_package_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_package_version_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a versioned model package.</p>
    pub fn get_model_package_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_package_version_arn
    }
    /// Consumes the builder and constructs a [`InferenceRecommendationsJob`](crate::types::InferenceRecommendationsJob).
    pub fn build(self) -> crate::types::InferenceRecommendationsJob {
        crate::types::InferenceRecommendationsJob {
            job_name: self.job_name,
            job_description: self.job_description,
            job_type: self.job_type,
            job_arn: self.job_arn,
            status: self.status,
            creation_time: self.creation_time,
            completion_time: self.completion_time,
            role_arn: self.role_arn,
            last_modified_time: self.last_modified_time,
            failure_reason: self.failure_reason,
            model_name: self.model_name,
            sample_payload_url: self.sample_payload_url,
            model_package_version_arn: self.model_package_version_arn,
        }
    }
}
