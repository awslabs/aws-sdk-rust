// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration to control how SageMaker captures inference data for batch transform jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDataCaptureConfig {
    /// <p>The Amazon S3 location being used to capture the data.</p>
    pub destination_s3_uri: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the batch transform job.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Flag that indicates whether to append inference id to the output.</p>
    pub generate_inference_id: ::std::option::Option<bool>,
}
impl BatchDataCaptureConfig {
    /// <p>The Amazon S3 location being used to capture the data.</p>
    pub fn destination_s3_uri(&self) -> ::std::option::Option<&str> {
        self.destination_s3_uri.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the batch transform job.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Flag that indicates whether to append inference id to the output.</p>
    pub fn generate_inference_id(&self) -> ::std::option::Option<bool> {
        self.generate_inference_id
    }
}
impl BatchDataCaptureConfig {
    /// Creates a new builder-style object to manufacture [`BatchDataCaptureConfig`](crate::types::BatchDataCaptureConfig).
    pub fn builder() -> crate::types::builders::BatchDataCaptureConfigBuilder {
        crate::types::builders::BatchDataCaptureConfigBuilder::default()
    }
}

/// A builder for [`BatchDataCaptureConfig`](crate::types::BatchDataCaptureConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDataCaptureConfigBuilder {
    pub(crate) destination_s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) generate_inference_id: ::std::option::Option<bool>,
}
impl BatchDataCaptureConfigBuilder {
    /// <p>The Amazon S3 location being used to capture the data.</p>
    /// This field is required.
    pub fn destination_s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 location being used to capture the data.</p>
    pub fn set_destination_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_s3_uri = input;
        self
    }
    /// <p>The Amazon S3 location being used to capture the data.</p>
    pub fn get_destination_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_s3_uri
    }
    /// <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the batch transform job.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the batch transform job.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the batch transform job.</p>
    /// <p>The KmsKeyId can be any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>
    /// <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>
    /// <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li>
    /// </ul>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Flag that indicates whether to append inference id to the output.</p>
    pub fn generate_inference_id(mut self, input: bool) -> Self {
        self.generate_inference_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Flag that indicates whether to append inference id to the output.</p>
    pub fn set_generate_inference_id(mut self, input: ::std::option::Option<bool>) -> Self {
        self.generate_inference_id = input;
        self
    }
    /// <p>Flag that indicates whether to append inference id to the output.</p>
    pub fn get_generate_inference_id(&self) -> &::std::option::Option<bool> {
        &self.generate_inference_id
    }
    /// Consumes the builder and constructs a [`BatchDataCaptureConfig`](crate::types::BatchDataCaptureConfig).
    pub fn build(self) -> crate::types::BatchDataCaptureConfig {
        crate::types::BatchDataCaptureConfig {
            destination_s3_uri: self.destination_s3_uri,
            kms_key_id: self.kms_key_id,
            generate_inference_id: self.generate_inference_id,
        }
    }
}
