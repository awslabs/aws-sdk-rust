// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes weight and capacities for a production variant associated with an endpoint. If you sent a request to the <code>UpdateEndpointWeightsAndCapacities</code> API and the endpoint status is <code>Updating</code>, you get different desired and current values. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProductionVariantSummary {
    /// <p>The name of the variant.</p>
    #[doc(hidden)]
    pub variant_name: std::option::Option<std::string::String>,
    /// <p>An array of <code>DeployedImage</code> objects that specify the Amazon EC2 Container Registry paths of the inference images deployed on instances of this <code>ProductionVariant</code>.</p>
    #[doc(hidden)]
    pub deployed_images: std::option::Option<std::vec::Vec<crate::types::DeployedImage>>,
    /// <p>The weight associated with the variant.</p>
    #[doc(hidden)]
    pub current_weight: std::option::Option<f32>,
    /// <p>The requested weight, as specified in the <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
    #[doc(hidden)]
    pub desired_weight: std::option::Option<f32>,
    /// <p>The number of instances associated with the variant.</p>
    #[doc(hidden)]
    pub current_instance_count: std::option::Option<i32>,
    /// <p>The number of instances requested in the <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
    #[doc(hidden)]
    pub desired_instance_count: std::option::Option<i32>,
    /// <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
    #[doc(hidden)]
    pub variant_status: std::option::Option<std::vec::Vec<crate::types::ProductionVariantStatus>>,
    /// <p>The serverless configuration for the endpoint.</p>
    #[doc(hidden)]
    pub current_serverless_config:
        std::option::Option<crate::types::ProductionVariantServerlessConfig>,
    /// <p>The serverless configuration requested for the endpoint update.</p>
    #[doc(hidden)]
    pub desired_serverless_config:
        std::option::Option<crate::types::ProductionVariantServerlessConfig>,
}
impl ProductionVariantSummary {
    /// <p>The name of the variant.</p>
    pub fn variant_name(&self) -> std::option::Option<&str> {
        self.variant_name.as_deref()
    }
    /// <p>An array of <code>DeployedImage</code> objects that specify the Amazon EC2 Container Registry paths of the inference images deployed on instances of this <code>ProductionVariant</code>.</p>
    pub fn deployed_images(&self) -> std::option::Option<&[crate::types::DeployedImage]> {
        self.deployed_images.as_deref()
    }
    /// <p>The weight associated with the variant.</p>
    pub fn current_weight(&self) -> std::option::Option<f32> {
        self.current_weight
    }
    /// <p>The requested weight, as specified in the <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
    pub fn desired_weight(&self) -> std::option::Option<f32> {
        self.desired_weight
    }
    /// <p>The number of instances associated with the variant.</p>
    pub fn current_instance_count(&self) -> std::option::Option<i32> {
        self.current_instance_count
    }
    /// <p>The number of instances requested in the <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
    pub fn desired_instance_count(&self) -> std::option::Option<i32> {
        self.desired_instance_count
    }
    /// <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
    pub fn variant_status(&self) -> std::option::Option<&[crate::types::ProductionVariantStatus]> {
        self.variant_status.as_deref()
    }
    /// <p>The serverless configuration for the endpoint.</p>
    pub fn current_serverless_config(
        &self,
    ) -> std::option::Option<&crate::types::ProductionVariantServerlessConfig> {
        self.current_serverless_config.as_ref()
    }
    /// <p>The serverless configuration requested for the endpoint update.</p>
    pub fn desired_serverless_config(
        &self,
    ) -> std::option::Option<&crate::types::ProductionVariantServerlessConfig> {
        self.desired_serverless_config.as_ref()
    }
}
impl ProductionVariantSummary {
    /// Creates a new builder-style object to manufacture [`ProductionVariantSummary`](crate::types::ProductionVariantSummary).
    pub fn builder() -> crate::types::builders::ProductionVariantSummaryBuilder {
        crate::types::builders::ProductionVariantSummaryBuilder::default()
    }
}

/// A builder for [`ProductionVariantSummary`](crate::types::ProductionVariantSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProductionVariantSummaryBuilder {
    pub(crate) variant_name: std::option::Option<std::string::String>,
    pub(crate) deployed_images: std::option::Option<std::vec::Vec<crate::types::DeployedImage>>,
    pub(crate) current_weight: std::option::Option<f32>,
    pub(crate) desired_weight: std::option::Option<f32>,
    pub(crate) current_instance_count: std::option::Option<i32>,
    pub(crate) desired_instance_count: std::option::Option<i32>,
    pub(crate) variant_status:
        std::option::Option<std::vec::Vec<crate::types::ProductionVariantStatus>>,
    pub(crate) current_serverless_config:
        std::option::Option<crate::types::ProductionVariantServerlessConfig>,
    pub(crate) desired_serverless_config:
        std::option::Option<crate::types::ProductionVariantServerlessConfig>,
}
impl ProductionVariantSummaryBuilder {
    /// <p>The name of the variant.</p>
    pub fn variant_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.variant_name = Some(input.into());
        self
    }
    /// <p>The name of the variant.</p>
    pub fn set_variant_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.variant_name = input;
        self
    }
    /// Appends an item to `deployed_images`.
    ///
    /// To override the contents of this collection use [`set_deployed_images`](Self::set_deployed_images).
    ///
    /// <p>An array of <code>DeployedImage</code> objects that specify the Amazon EC2 Container Registry paths of the inference images deployed on instances of this <code>ProductionVariant</code>.</p>
    pub fn deployed_images(mut self, input: crate::types::DeployedImage) -> Self {
        let mut v = self.deployed_images.unwrap_or_default();
        v.push(input);
        self.deployed_images = Some(v);
        self
    }
    /// <p>An array of <code>DeployedImage</code> objects that specify the Amazon EC2 Container Registry paths of the inference images deployed on instances of this <code>ProductionVariant</code>.</p>
    pub fn set_deployed_images(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeployedImage>>,
    ) -> Self {
        self.deployed_images = input;
        self
    }
    /// <p>The weight associated with the variant.</p>
    pub fn current_weight(mut self, input: f32) -> Self {
        self.current_weight = Some(input);
        self
    }
    /// <p>The weight associated with the variant.</p>
    pub fn set_current_weight(mut self, input: std::option::Option<f32>) -> Self {
        self.current_weight = input;
        self
    }
    /// <p>The requested weight, as specified in the <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
    pub fn desired_weight(mut self, input: f32) -> Self {
        self.desired_weight = Some(input);
        self
    }
    /// <p>The requested weight, as specified in the <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
    pub fn set_desired_weight(mut self, input: std::option::Option<f32>) -> Self {
        self.desired_weight = input;
        self
    }
    /// <p>The number of instances associated with the variant.</p>
    pub fn current_instance_count(mut self, input: i32) -> Self {
        self.current_instance_count = Some(input);
        self
    }
    /// <p>The number of instances associated with the variant.</p>
    pub fn set_current_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.current_instance_count = input;
        self
    }
    /// <p>The number of instances requested in the <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
    pub fn desired_instance_count(mut self, input: i32) -> Self {
        self.desired_instance_count = Some(input);
        self
    }
    /// <p>The number of instances requested in the <code>UpdateEndpointWeightsAndCapacities</code> request. </p>
    pub fn set_desired_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.desired_instance_count = input;
        self
    }
    /// Appends an item to `variant_status`.
    ///
    /// To override the contents of this collection use [`set_variant_status`](Self::set_variant_status).
    ///
    /// <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
    pub fn variant_status(mut self, input: crate::types::ProductionVariantStatus) -> Self {
        let mut v = self.variant_status.unwrap_or_default();
        v.push(input);
        self.variant_status = Some(v);
        self
    }
    /// <p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
    pub fn set_variant_status(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProductionVariantStatus>>,
    ) -> Self {
        self.variant_status = input;
        self
    }
    /// <p>The serverless configuration for the endpoint.</p>
    pub fn current_serverless_config(
        mut self,
        input: crate::types::ProductionVariantServerlessConfig,
    ) -> Self {
        self.current_serverless_config = Some(input);
        self
    }
    /// <p>The serverless configuration for the endpoint.</p>
    pub fn set_current_serverless_config(
        mut self,
        input: std::option::Option<crate::types::ProductionVariantServerlessConfig>,
    ) -> Self {
        self.current_serverless_config = input;
        self
    }
    /// <p>The serverless configuration requested for the endpoint update.</p>
    pub fn desired_serverless_config(
        mut self,
        input: crate::types::ProductionVariantServerlessConfig,
    ) -> Self {
        self.desired_serverless_config = Some(input);
        self
    }
    /// <p>The serverless configuration requested for the endpoint update.</p>
    pub fn set_desired_serverless_config(
        mut self,
        input: std::option::Option<crate::types::ProductionVariantServerlessConfig>,
    ) -> Self {
        self.desired_serverless_config = input;
        self
    }
    /// Consumes the builder and constructs a [`ProductionVariantSummary`](crate::types::ProductionVariantSummary).
    pub fn build(self) -> crate::types::ProductionVariantSummary {
        crate::types::ProductionVariantSummary {
            variant_name: self.variant_name,
            deployed_images: self.deployed_images,
            current_weight: self.current_weight,
            desired_weight: self.desired_weight,
            current_instance_count: self.current_instance_count,
            desired_instance_count: self.desired_instance_count,
            variant_status: self.variant_status,
            current_serverless_config: self.current_serverless_config,
            desired_serverless_config: self.desired_serverless_config,
        }
    }
}
