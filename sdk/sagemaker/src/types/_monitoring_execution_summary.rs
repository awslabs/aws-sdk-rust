// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary of information about the last monitoring job to run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitoringExecutionSummary {
    /// <p>The name of the monitoring schedule.</p>
    #[doc(hidden)]
    pub monitoring_schedule_name: std::option::Option<std::string::String>,
    /// <p>The time the monitoring job was scheduled.</p>
    #[doc(hidden)]
    pub scheduled_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the monitoring job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A timestamp that indicates the last time the monitoring job was modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the monitoring job.</p>
    #[doc(hidden)]
    pub monitoring_execution_status: std::option::Option<crate::types::ExecutionStatus>,
    /// <p>The Amazon Resource Name (ARN) of the monitoring job.</p>
    #[doc(hidden)]
    pub processing_job_arn: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint used to run the monitoring job.</p>
    #[doc(hidden)]
    pub endpoint_name: std::option::Option<std::string::String>,
    /// <p>Contains the reason a monitoring job failed, if it failed.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The name of the monitoring job.</p>
    #[doc(hidden)]
    pub monitoring_job_definition_name: std::option::Option<std::string::String>,
    /// <p>The type of the monitoring job.</p>
    #[doc(hidden)]
    pub monitoring_type: std::option::Option<crate::types::MonitoringType>,
}
impl MonitoringExecutionSummary {
    /// <p>The name of the monitoring schedule.</p>
    pub fn monitoring_schedule_name(&self) -> std::option::Option<&str> {
        self.monitoring_schedule_name.as_deref()
    }
    /// <p>The time the monitoring job was scheduled.</p>
    pub fn scheduled_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.scheduled_time.as_ref()
    }
    /// <p>The time at which the monitoring job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>A timestamp that indicates the last time the monitoring job was modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The status of the monitoring job.</p>
    pub fn monitoring_execution_status(
        &self,
    ) -> std::option::Option<&crate::types::ExecutionStatus> {
        self.monitoring_execution_status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the monitoring job.</p>
    pub fn processing_job_arn(&self) -> std::option::Option<&str> {
        self.processing_job_arn.as_deref()
    }
    /// <p>The name of the endpoint used to run the monitoring job.</p>
    pub fn endpoint_name(&self) -> std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>Contains the reason a monitoring job failed, if it failed.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The name of the monitoring job.</p>
    pub fn monitoring_job_definition_name(&self) -> std::option::Option<&str> {
        self.monitoring_job_definition_name.as_deref()
    }
    /// <p>The type of the monitoring job.</p>
    pub fn monitoring_type(&self) -> std::option::Option<&crate::types::MonitoringType> {
        self.monitoring_type.as_ref()
    }
}
impl MonitoringExecutionSummary {
    /// Creates a new builder-style object to manufacture [`MonitoringExecutionSummary`](crate::types::MonitoringExecutionSummary).
    pub fn builder() -> crate::types::builders::MonitoringExecutionSummaryBuilder {
        crate::types::builders::MonitoringExecutionSummaryBuilder::default()
    }
}

/// A builder for [`MonitoringExecutionSummary`](crate::types::MonitoringExecutionSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringExecutionSummaryBuilder {
    pub(crate) monitoring_schedule_name: std::option::Option<std::string::String>,
    pub(crate) scheduled_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) monitoring_execution_status: std::option::Option<crate::types::ExecutionStatus>,
    pub(crate) processing_job_arn: std::option::Option<std::string::String>,
    pub(crate) endpoint_name: std::option::Option<std::string::String>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) monitoring_job_definition_name: std::option::Option<std::string::String>,
    pub(crate) monitoring_type: std::option::Option<crate::types::MonitoringType>,
}
impl MonitoringExecutionSummaryBuilder {
    /// <p>The name of the monitoring schedule.</p>
    pub fn monitoring_schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitoring_schedule_name = Some(input.into());
        self
    }
    /// <p>The name of the monitoring schedule.</p>
    pub fn set_monitoring_schedule_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monitoring_schedule_name = input;
        self
    }
    /// <p>The time the monitoring job was scheduled.</p>
    pub fn scheduled_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.scheduled_time = Some(input);
        self
    }
    /// <p>The time the monitoring job was scheduled.</p>
    pub fn set_scheduled_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.scheduled_time = input;
        self
    }
    /// <p>The time at which the monitoring job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time at which the monitoring job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A timestamp that indicates the last time the monitoring job was modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>A timestamp that indicates the last time the monitoring job was modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The status of the monitoring job.</p>
    pub fn monitoring_execution_status(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.monitoring_execution_status = Some(input);
        self
    }
    /// <p>The status of the monitoring job.</p>
    pub fn set_monitoring_execution_status(
        mut self,
        input: std::option::Option<crate::types::ExecutionStatus>,
    ) -> Self {
        self.monitoring_execution_status = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitoring job.</p>
    pub fn processing_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.processing_job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitoring job.</p>
    pub fn set_processing_job_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.processing_job_arn = input;
        self
    }
    /// <p>The name of the endpoint used to run the monitoring job.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_name = Some(input.into());
        self
    }
    /// <p>The name of the endpoint used to run the monitoring job.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>Contains the reason a monitoring job failed, if it failed.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>Contains the reason a monitoring job failed, if it failed.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The name of the monitoring job.</p>
    pub fn monitoring_job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitoring_job_definition_name = Some(input.into());
        self
    }
    /// <p>The name of the monitoring job.</p>
    pub fn set_monitoring_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monitoring_job_definition_name = input;
        self
    }
    /// <p>The type of the monitoring job.</p>
    pub fn monitoring_type(mut self, input: crate::types::MonitoringType) -> Self {
        self.monitoring_type = Some(input);
        self
    }
    /// <p>The type of the monitoring job.</p>
    pub fn set_monitoring_type(
        mut self,
        input: std::option::Option<crate::types::MonitoringType>,
    ) -> Self {
        self.monitoring_type = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitoringExecutionSummary`](crate::types::MonitoringExecutionSummary).
    pub fn build(self) -> crate::types::MonitoringExecutionSummary {
        crate::types::MonitoringExecutionSummary {
            monitoring_schedule_name: self.monitoring_schedule_name,
            scheduled_time: self.scheduled_time,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            monitoring_execution_status: self.monitoring_execution_status,
            processing_job_arn: self.processing_job_arn,
            endpoint_name: self.endpoint_name,
            failure_reason: self.failure_reason,
            monitoring_job_definition_name: self.monitoring_job_definition_name,
            monitoring_type: self.monitoring_type,
        }
    }
}
