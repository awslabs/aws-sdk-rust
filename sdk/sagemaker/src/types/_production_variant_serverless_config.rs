// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the serverless configuration for an endpoint variant.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductionVariantServerlessConfig {
    /// <p>The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.</p>
    pub memory_size_in_mb: ::std::option::Option<i32>,
    /// <p>The maximum number of concurrent invocations your serverless endpoint can process.</p>
    pub max_concurrency: ::std::option::Option<i32>,
    /// <p>The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p> <note>
    /// <p>This field is not supported for serverless endpoint recommendations for Inference Recommender jobs. For more information about creating an Inference Recommender job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJobs</a>.</p>
    /// </note>
    pub provisioned_concurrency: ::std::option::Option<i32>,
}
impl ProductionVariantServerlessConfig {
    /// <p>The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.</p>
    pub fn memory_size_in_mb(&self) -> ::std::option::Option<i32> {
        self.memory_size_in_mb
    }
    /// <p>The maximum number of concurrent invocations your serverless endpoint can process.</p>
    pub fn max_concurrency(&self) -> ::std::option::Option<i32> {
        self.max_concurrency
    }
    /// <p>The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p> <note>
    /// <p>This field is not supported for serverless endpoint recommendations for Inference Recommender jobs. For more information about creating an Inference Recommender job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJobs</a>.</p>
    /// </note>
    pub fn provisioned_concurrency(&self) -> ::std::option::Option<i32> {
        self.provisioned_concurrency
    }
}
impl ProductionVariantServerlessConfig {
    /// Creates a new builder-style object to manufacture [`ProductionVariantServerlessConfig`](crate::types::ProductionVariantServerlessConfig).
    pub fn builder() -> crate::types::builders::ProductionVariantServerlessConfigBuilder {
        crate::types::builders::ProductionVariantServerlessConfigBuilder::default()
    }
}

/// A builder for [`ProductionVariantServerlessConfig`](crate::types::ProductionVariantServerlessConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProductionVariantServerlessConfigBuilder {
    pub(crate) memory_size_in_mb: ::std::option::Option<i32>,
    pub(crate) max_concurrency: ::std::option::Option<i32>,
    pub(crate) provisioned_concurrency: ::std::option::Option<i32>,
}
impl ProductionVariantServerlessConfigBuilder {
    /// <p>The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.</p>
    /// This field is required.
    pub fn memory_size_in_mb(mut self, input: i32) -> Self {
        self.memory_size_in_mb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.</p>
    pub fn set_memory_size_in_mb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory_size_in_mb = input;
        self
    }
    /// <p>The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.</p>
    pub fn get_memory_size_in_mb(&self) -> &::std::option::Option<i32> {
        &self.memory_size_in_mb
    }
    /// <p>The maximum number of concurrent invocations your serverless endpoint can process.</p>
    /// This field is required.
    pub fn max_concurrency(mut self, input: i32) -> Self {
        self.max_concurrency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of concurrent invocations your serverless endpoint can process.</p>
    pub fn set_max_concurrency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_concurrency = input;
        self
    }
    /// <p>The maximum number of concurrent invocations your serverless endpoint can process.</p>
    pub fn get_max_concurrency(&self) -> &::std::option::Option<i32> {
        &self.max_concurrency
    }
    /// <p>The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p> <note>
    /// <p>This field is not supported for serverless endpoint recommendations for Inference Recommender jobs. For more information about creating an Inference Recommender job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJobs</a>.</p>
    /// </note>
    pub fn provisioned_concurrency(mut self, input: i32) -> Self {
        self.provisioned_concurrency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p> <note>
    /// <p>This field is not supported for serverless endpoint recommendations for Inference Recommender jobs. For more information about creating an Inference Recommender job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJobs</a>.</p>
    /// </note>
    pub fn set_provisioned_concurrency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.provisioned_concurrency = input;
        self
    }
    /// <p>The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p> <note>
    /// <p>This field is not supported for serverless endpoint recommendations for Inference Recommender jobs. For more information about creating an Inference Recommender job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJobs</a>.</p>
    /// </note>
    pub fn get_provisioned_concurrency(&self) -> &::std::option::Option<i32> {
        &self.provisioned_concurrency
    }
    /// Consumes the builder and constructs a [`ProductionVariantServerlessConfig`](crate::types::ProductionVariantServerlessConfig).
    pub fn build(self) -> crate::types::ProductionVariantServerlessConfig {
        crate::types::ProductionVariantServerlessConfig {
            memory_size_in_mb: self.memory_size_in_mb,
            max_concurrency: self.max_concurrency,
            provisioned_concurrency: self.provisioned_concurrency,
        }
    }
}
