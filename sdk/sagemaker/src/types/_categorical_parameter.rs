// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Environment parameters you want to benchmark your load test against.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CategoricalParameter {
    /// <p>The Name of the environment variable.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The list of values you can pass.</p>
    pub value: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CategoricalParameter {
    /// <p>The Name of the environment variable.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The list of values you can pass.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.value.is_none()`.
    pub fn value(&self) -> &[::std::string::String] {
        self.value.as_deref().unwrap_or_default()
    }
}
impl CategoricalParameter {
    /// Creates a new builder-style object to manufacture [`CategoricalParameter`](crate::types::CategoricalParameter).
    pub fn builder() -> crate::types::builders::CategoricalParameterBuilder {
        crate::types::builders::CategoricalParameterBuilder::default()
    }
}

/// A builder for [`CategoricalParameter`](crate::types::CategoricalParameter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CategoricalParameterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CategoricalParameterBuilder {
    /// <p>The Name of the environment variable.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Name of the environment variable.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Name of the environment variable.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `value`.
    ///
    /// To override the contents of this collection use [`set_value`](Self::set_value).
    ///
    /// <p>The list of values you can pass.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.value.unwrap_or_default();
        v.push(input.into());
        self.value = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of values you can pass.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.value = input;
        self
    }
    /// <p>The list of values you can pass.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.value
    }
    /// Consumes the builder and constructs a [`CategoricalParameter`](crate::types::CategoricalParameter).
    pub fn build(self) -> crate::types::CategoricalParameter {
        crate::types::CategoricalParameter {
            name: self.name,
            value: self.value,
        }
    }
}
