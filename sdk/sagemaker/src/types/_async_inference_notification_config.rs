// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration for notifications of inference results for asynchronous inference.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AsyncInferenceNotificationConfig {
    /// <p>Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.</p>
    pub success_topic: ::std::option::Option<::std::string::String>,
    /// <p>Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.</p>
    pub error_topic: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon SNS topics where you want the inference response to be included.</p> <note>
    /// <p>The inference response is included only if the response size is less than or equal to 128 KB.</p>
    /// </note>
    pub include_inference_response_in: ::std::option::Option<::std::vec::Vec<crate::types::AsyncNotificationTopicTypes>>,
}
impl AsyncInferenceNotificationConfig {
    /// <p>Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.</p>
    pub fn success_topic(&self) -> ::std::option::Option<&str> {
        self.success_topic.as_deref()
    }
    /// <p>Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.</p>
    pub fn error_topic(&self) -> ::std::option::Option<&str> {
        self.error_topic.as_deref()
    }
    /// <p>The Amazon SNS topics where you want the inference response to be included.</p> <note>
    /// <p>The inference response is included only if the response size is less than or equal to 128 KB.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include_inference_response_in.is_none()`.
    pub fn include_inference_response_in(&self) -> &[crate::types::AsyncNotificationTopicTypes] {
        self.include_inference_response_in.as_deref().unwrap_or_default()
    }
}
impl AsyncInferenceNotificationConfig {
    /// Creates a new builder-style object to manufacture [`AsyncInferenceNotificationConfig`](crate::types::AsyncInferenceNotificationConfig).
    pub fn builder() -> crate::types::builders::AsyncInferenceNotificationConfigBuilder {
        crate::types::builders::AsyncInferenceNotificationConfigBuilder::default()
    }
}

/// A builder for [`AsyncInferenceNotificationConfig`](crate::types::AsyncInferenceNotificationConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AsyncInferenceNotificationConfigBuilder {
    pub(crate) success_topic: ::std::option::Option<::std::string::String>,
    pub(crate) error_topic: ::std::option::Option<::std::string::String>,
    pub(crate) include_inference_response_in: ::std::option::Option<::std::vec::Vec<crate::types::AsyncNotificationTopicTypes>>,
}
impl AsyncInferenceNotificationConfigBuilder {
    /// <p>Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.</p>
    pub fn success_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.success_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.</p>
    pub fn set_success_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.success_topic = input;
        self
    }
    /// <p>Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.</p>
    pub fn get_success_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.success_topic
    }
    /// <p>Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.</p>
    pub fn error_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.</p>
    pub fn set_error_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_topic = input;
        self
    }
    /// <p>Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.</p>
    pub fn get_error_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_topic
    }
    /// Appends an item to `include_inference_response_in`.
    ///
    /// To override the contents of this collection use [`set_include_inference_response_in`](Self::set_include_inference_response_in).
    ///
    /// <p>The Amazon SNS topics where you want the inference response to be included.</p> <note>
    /// <p>The inference response is included only if the response size is less than or equal to 128 KB.</p>
    /// </note>
    pub fn include_inference_response_in(mut self, input: crate::types::AsyncNotificationTopicTypes) -> Self {
        let mut v = self.include_inference_response_in.unwrap_or_default();
        v.push(input);
        self.include_inference_response_in = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon SNS topics where you want the inference response to be included.</p> <note>
    /// <p>The inference response is included only if the response size is less than or equal to 128 KB.</p>
    /// </note>
    pub fn set_include_inference_response_in(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AsyncNotificationTopicTypes>>,
    ) -> Self {
        self.include_inference_response_in = input;
        self
    }
    /// <p>The Amazon SNS topics where you want the inference response to be included.</p> <note>
    /// <p>The inference response is included only if the response size is less than or equal to 128 KB.</p>
    /// </note>
    pub fn get_include_inference_response_in(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AsyncNotificationTopicTypes>> {
        &self.include_inference_response_in
    }
    /// Consumes the builder and constructs a [`AsyncInferenceNotificationConfig`](crate::types::AsyncInferenceNotificationConfig).
    pub fn build(self) -> crate::types::AsyncInferenceNotificationConfig {
        crate::types::AsyncInferenceNotificationConfig {
            success_topic: self.success_topic,
            error_topic: self.error_topic,
            include_inference_response_in: self.include_inference_response_in,
        }
    }
}
