// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this parameter to configure your Amazon Cognito workforce. A single Cognito workforce is created using and corresponds to a single <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> Amazon Cognito user pool</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CognitoConfig {
    /// <p>A <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> user pool</a> is a user directory in Amazon Cognito. With a user pool, your users can sign in to your web or mobile app through Amazon Cognito. Your users can also sign in through social identity providers like Google, Facebook, Amazon, or Apple, and through SAML identity providers.</p>
    #[doc(hidden)]
    pub user_pool: std::option::Option<std::string::String>,
    /// <p>The client ID for your Amazon Cognito user pool.</p>
    #[doc(hidden)]
    pub client_id: std::option::Option<std::string::String>,
}
impl CognitoConfig {
    /// <p>A <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> user pool</a> is a user directory in Amazon Cognito. With a user pool, your users can sign in to your web or mobile app through Amazon Cognito. Your users can also sign in through social identity providers like Google, Facebook, Amazon, or Apple, and through SAML identity providers.</p>
    pub fn user_pool(&self) -> std::option::Option<&str> {
        self.user_pool.as_deref()
    }
    /// <p>The client ID for your Amazon Cognito user pool.</p>
    pub fn client_id(&self) -> std::option::Option<&str> {
        self.client_id.as_deref()
    }
}
impl CognitoConfig {
    /// Creates a new builder-style object to manufacture [`CognitoConfig`](crate::types::CognitoConfig).
    pub fn builder() -> crate::types::builders::CognitoConfigBuilder {
        crate::types::builders::CognitoConfigBuilder::default()
    }
}

/// A builder for [`CognitoConfig`](crate::types::CognitoConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CognitoConfigBuilder {
    pub(crate) user_pool: std::option::Option<std::string::String>,
    pub(crate) client_id: std::option::Option<std::string::String>,
}
impl CognitoConfigBuilder {
    /// <p>A <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> user pool</a> is a user directory in Amazon Cognito. With a user pool, your users can sign in to your web or mobile app through Amazon Cognito. Your users can also sign in through social identity providers like Google, Facebook, Amazon, or Apple, and through SAML identity providers.</p>
    pub fn user_pool(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool = Some(input.into());
        self
    }
    /// <p>A <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> user pool</a> is a user directory in Amazon Cognito. With a user pool, your users can sign in to your web or mobile app through Amazon Cognito. Your users can also sign in through social identity providers like Google, Facebook, Amazon, or Apple, and through SAML identity providers.</p>
    pub fn set_user_pool(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool = input;
        self
    }
    /// <p>The client ID for your Amazon Cognito user pool.</p>
    pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_id = Some(input.into());
        self
    }
    /// <p>The client ID for your Amazon Cognito user pool.</p>
    pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CognitoConfig`](crate::types::CognitoConfig).
    pub fn build(self) -> crate::types::CognitoConfig {
        crate::types::CognitoConfig {
            user_pool: self.user_pool,
            client_id: self.client_id,
        }
    }
}
