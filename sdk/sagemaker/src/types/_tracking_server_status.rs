// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `TrackingServerStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let trackingserverstatus = unimplemented!();
/// match trackingserverstatus {
///     TrackingServerStatus::CreateFailed => { /* ... */ },
///     TrackingServerStatus::Created => { /* ... */ },
///     TrackingServerStatus::Creating => { /* ... */ },
///     TrackingServerStatus::DeleteFailed => { /* ... */ },
///     TrackingServerStatus::Deleting => { /* ... */ },
///     TrackingServerStatus::MaintenanceComplete => { /* ... */ },
///     TrackingServerStatus::MaintenanceFailed => { /* ... */ },
///     TrackingServerStatus::MaintenanceInProgress => { /* ... */ },
///     TrackingServerStatus::StartFailed => { /* ... */ },
///     TrackingServerStatus::Started => { /* ... */ },
///     TrackingServerStatus::Starting => { /* ... */ },
///     TrackingServerStatus::StopFailed => { /* ... */ },
///     TrackingServerStatus::Stopped => { /* ... */ },
///     TrackingServerStatus::Stopping => { /* ... */ },
///     TrackingServerStatus::UpdateFailed => { /* ... */ },
///     TrackingServerStatus::Updated => { /* ... */ },
///     TrackingServerStatus::Updating => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `trackingserverstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `TrackingServerStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `TrackingServerStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `TrackingServerStatus::NewFeature` is defined.
/// Specifically, when `trackingserverstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `TrackingServerStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum TrackingServerStatus {
    #[allow(missing_docs)] // documentation missing in model
    CreateFailed,
    #[allow(missing_docs)] // documentation missing in model
    Created,
    #[allow(missing_docs)] // documentation missing in model
    Creating,
    #[allow(missing_docs)] // documentation missing in model
    DeleteFailed,
    #[allow(missing_docs)] // documentation missing in model
    Deleting,
    #[allow(missing_docs)] // documentation missing in model
    MaintenanceComplete,
    #[allow(missing_docs)] // documentation missing in model
    MaintenanceFailed,
    #[allow(missing_docs)] // documentation missing in model
    MaintenanceInProgress,
    #[allow(missing_docs)] // documentation missing in model
    StartFailed,
    #[allow(missing_docs)] // documentation missing in model
    Started,
    #[allow(missing_docs)] // documentation missing in model
    Starting,
    #[allow(missing_docs)] // documentation missing in model
    StopFailed,
    #[allow(missing_docs)] // documentation missing in model
    Stopped,
    #[allow(missing_docs)] // documentation missing in model
    Stopping,
    #[allow(missing_docs)] // documentation missing in model
    UpdateFailed,
    #[allow(missing_docs)] // documentation missing in model
    Updated,
    #[allow(missing_docs)] // documentation missing in model
    Updating,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for TrackingServerStatus {
    fn from(s: &str) -> Self {
        match s {
            "CreateFailed" => TrackingServerStatus::CreateFailed,
            "Created" => TrackingServerStatus::Created,
            "Creating" => TrackingServerStatus::Creating,
            "DeleteFailed" => TrackingServerStatus::DeleteFailed,
            "Deleting" => TrackingServerStatus::Deleting,
            "MaintenanceComplete" => TrackingServerStatus::MaintenanceComplete,
            "MaintenanceFailed" => TrackingServerStatus::MaintenanceFailed,
            "MaintenanceInProgress" => TrackingServerStatus::MaintenanceInProgress,
            "StartFailed" => TrackingServerStatus::StartFailed,
            "Started" => TrackingServerStatus::Started,
            "Starting" => TrackingServerStatus::Starting,
            "StopFailed" => TrackingServerStatus::StopFailed,
            "Stopped" => TrackingServerStatus::Stopped,
            "Stopping" => TrackingServerStatus::Stopping,
            "UpdateFailed" => TrackingServerStatus::UpdateFailed,
            "Updated" => TrackingServerStatus::Updated,
            "Updating" => TrackingServerStatus::Updating,
            other => TrackingServerStatus::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for TrackingServerStatus {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(TrackingServerStatus::from(s))
    }
}
impl TrackingServerStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            TrackingServerStatus::CreateFailed => "CreateFailed",
            TrackingServerStatus::Created => "Created",
            TrackingServerStatus::Creating => "Creating",
            TrackingServerStatus::DeleteFailed => "DeleteFailed",
            TrackingServerStatus::Deleting => "Deleting",
            TrackingServerStatus::MaintenanceComplete => "MaintenanceComplete",
            TrackingServerStatus::MaintenanceFailed => "MaintenanceFailed",
            TrackingServerStatus::MaintenanceInProgress => "MaintenanceInProgress",
            TrackingServerStatus::StartFailed => "StartFailed",
            TrackingServerStatus::Started => "Started",
            TrackingServerStatus::Starting => "Starting",
            TrackingServerStatus::StopFailed => "StopFailed",
            TrackingServerStatus::Stopped => "Stopped",
            TrackingServerStatus::Stopping => "Stopping",
            TrackingServerStatus::UpdateFailed => "UpdateFailed",
            TrackingServerStatus::Updated => "Updated",
            TrackingServerStatus::Updating => "Updating",
            TrackingServerStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CreateFailed",
            "Created",
            "Creating",
            "DeleteFailed",
            "Deleting",
            "MaintenanceComplete",
            "MaintenanceFailed",
            "MaintenanceInProgress",
            "StartFailed",
            "Started",
            "Starting",
            "StopFailed",
            "Stopped",
            "Stopping",
            "UpdateFailed",
            "Updated",
            "Updating",
        ]
    }
}
impl ::std::convert::AsRef<str> for TrackingServerStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl TrackingServerStatus {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for TrackingServerStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            TrackingServerStatus::CreateFailed => write!(f, "CreateFailed"),
            TrackingServerStatus::Created => write!(f, "Created"),
            TrackingServerStatus::Creating => write!(f, "Creating"),
            TrackingServerStatus::DeleteFailed => write!(f, "DeleteFailed"),
            TrackingServerStatus::Deleting => write!(f, "Deleting"),
            TrackingServerStatus::MaintenanceComplete => write!(f, "MaintenanceComplete"),
            TrackingServerStatus::MaintenanceFailed => write!(f, "MaintenanceFailed"),
            TrackingServerStatus::MaintenanceInProgress => write!(f, "MaintenanceInProgress"),
            TrackingServerStatus::StartFailed => write!(f, "StartFailed"),
            TrackingServerStatus::Started => write!(f, "Started"),
            TrackingServerStatus::Starting => write!(f, "Starting"),
            TrackingServerStatus::StopFailed => write!(f, "StopFailed"),
            TrackingServerStatus::Stopped => write!(f, "Stopped"),
            TrackingServerStatus::Stopping => write!(f, "Stopping"),
            TrackingServerStatus::UpdateFailed => write!(f, "UpdateFailed"),
            TrackingServerStatus::Updated => write!(f, "Updated"),
            TrackingServerStatus::Updating => write!(f, "Updating"),
            TrackingServerStatus::Unknown(value) => write!(f, "{value}"),
        }
    }
}
