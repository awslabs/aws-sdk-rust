// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The retry strategy to use when a training job fails due to an <code>InternalServerError</code>. <code>RetryStrategy</code> is specified as part of the <code>CreateTrainingJob</code> and <code>CreateHyperParameterTuningJob</code> requests. You can add the <code>StoppingCondition</code> parameter to the request to limit the training time for the complete job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RetryStrategy {
    /// <p>The number of times to retry the job. When the job is retried, it's <code>SecondaryStatus</code> is changed to <code>STARTING</code>.</p>
    #[doc(hidden)]
    pub maximum_retry_attempts: i32,
}
impl RetryStrategy {
    /// <p>The number of times to retry the job. When the job is retried, it's <code>SecondaryStatus</code> is changed to <code>STARTING</code>.</p>
    pub fn maximum_retry_attempts(&self) -> i32 {
        self.maximum_retry_attempts
    }
}
impl RetryStrategy {
    /// Creates a new builder-style object to manufacture [`RetryStrategy`](crate::types::RetryStrategy).
    pub fn builder() -> crate::types::builders::RetryStrategyBuilder {
        crate::types::builders::RetryStrategyBuilder::default()
    }
}

/// A builder for [`RetryStrategy`](crate::types::RetryStrategy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RetryStrategyBuilder {
    pub(crate) maximum_retry_attempts: std::option::Option<i32>,
}
impl RetryStrategyBuilder {
    /// <p>The number of times to retry the job. When the job is retried, it's <code>SecondaryStatus</code> is changed to <code>STARTING</code>.</p>
    pub fn maximum_retry_attempts(mut self, input: i32) -> Self {
        self.maximum_retry_attempts = Some(input);
        self
    }
    /// <p>The number of times to retry the job. When the job is retried, it's <code>SecondaryStatus</code> is changed to <code>STARTING</code>.</p>
    pub fn set_maximum_retry_attempts(mut self, input: std::option::Option<i32>) -> Self {
        self.maximum_retry_attempts = input;
        self
    }
    /// Consumes the builder and constructs a [`RetryStrategy`](crate::types::RetryStrategy).
    pub fn build(self) -> crate::types::RetryStrategy {
        crate::types::RetryStrategy {
            maximum_retry_attempts: self.maximum_retry_attempts.unwrap_or_default(),
        }
    }
}
