// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the maximum number of jobs that can run in parallel and the maximum number of jobs that can run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecommendationJobResourceLimit {
    /// <p>Defines the maximum number of load tests.</p>
    #[doc(hidden)]
    pub max_number_of_tests: std::option::Option<i32>,
    /// <p>Defines the maximum number of parallel load tests.</p>
    #[doc(hidden)]
    pub max_parallel_of_tests: std::option::Option<i32>,
}
impl RecommendationJobResourceLimit {
    /// <p>Defines the maximum number of load tests.</p>
    pub fn max_number_of_tests(&self) -> std::option::Option<i32> {
        self.max_number_of_tests
    }
    /// <p>Defines the maximum number of parallel load tests.</p>
    pub fn max_parallel_of_tests(&self) -> std::option::Option<i32> {
        self.max_parallel_of_tests
    }
}
impl RecommendationJobResourceLimit {
    /// Creates a new builder-style object to manufacture [`RecommendationJobResourceLimit`](crate::types::RecommendationJobResourceLimit).
    pub fn builder() -> crate::types::builders::RecommendationJobResourceLimitBuilder {
        crate::types::builders::RecommendationJobResourceLimitBuilder::default()
    }
}

/// A builder for [`RecommendationJobResourceLimit`](crate::types::RecommendationJobResourceLimit).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecommendationJobResourceLimitBuilder {
    pub(crate) max_number_of_tests: std::option::Option<i32>,
    pub(crate) max_parallel_of_tests: std::option::Option<i32>,
}
impl RecommendationJobResourceLimitBuilder {
    /// <p>Defines the maximum number of load tests.</p>
    pub fn max_number_of_tests(mut self, input: i32) -> Self {
        self.max_number_of_tests = Some(input);
        self
    }
    /// <p>Defines the maximum number of load tests.</p>
    pub fn set_max_number_of_tests(mut self, input: std::option::Option<i32>) -> Self {
        self.max_number_of_tests = input;
        self
    }
    /// <p>Defines the maximum number of parallel load tests.</p>
    pub fn max_parallel_of_tests(mut self, input: i32) -> Self {
        self.max_parallel_of_tests = Some(input);
        self
    }
    /// <p>Defines the maximum number of parallel load tests.</p>
    pub fn set_max_parallel_of_tests(mut self, input: std::option::Option<i32>) -> Self {
        self.max_parallel_of_tests = input;
        self
    }
    /// Consumes the builder and constructs a [`RecommendationJobResourceLimit`](crate::types::RecommendationJobResourceLimit).
    pub fn build(self) -> crate::types::RecommendationJobResourceLimit {
        crate::types::RecommendationJobResourceLimit {
            max_number_of_tests: self.max_number_of_tests,
            max_parallel_of_tests: self.max_parallel_of_tests,
        }
    }
}
