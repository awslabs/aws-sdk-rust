// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for your vector collection type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VectorConfig {
    /// <p>The number of elements in your vector.</p>
    pub dimension: ::std::option::Option<i32>,
}
impl VectorConfig {
    /// <p>The number of elements in your vector.</p>
    pub fn dimension(&self) -> ::std::option::Option<i32> {
        self.dimension
    }
}
impl VectorConfig {
    /// Creates a new builder-style object to manufacture [`VectorConfig`](crate::types::VectorConfig).
    pub fn builder() -> crate::types::builders::VectorConfigBuilder {
        crate::types::builders::VectorConfigBuilder::default()
    }
}

/// A builder for [`VectorConfig`](crate::types::VectorConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VectorConfigBuilder {
    pub(crate) dimension: ::std::option::Option<i32>,
}
impl VectorConfigBuilder {
    /// <p>The number of elements in your vector.</p>
    /// This field is required.
    pub fn dimension(mut self, input: i32) -> Self {
        self.dimension = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of elements in your vector.</p>
    pub fn set_dimension(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dimension = input;
        self
    }
    /// <p>The number of elements in your vector.</p>
    pub fn get_dimension(&self) -> &::std::option::Option<i32> {
        &self.dimension
    }
    /// Consumes the builder and constructs a [`VectorConfig`](crate::types::VectorConfig).
    pub fn build(self) -> crate::types::VectorConfig {
        crate::types::VectorConfig { dimension: self.dimension }
    }
}
