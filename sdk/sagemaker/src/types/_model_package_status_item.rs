// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the overall status of a model package.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelPackageStatusItem {
    /// <p>The name of the model package for which the overall status is being reported.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The current status.</p>
    pub status: ::std::option::Option<crate::types::DetailedModelPackageStatus>,
    /// <p>if the overall status is <code>Failed</code>, the reason for the failure.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
}
impl ModelPackageStatusItem {
    /// <p>The name of the model package for which the overall status is being reported.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DetailedModelPackageStatus> {
        self.status.as_ref()
    }
    /// <p>if the overall status is <code>Failed</code>, the reason for the failure.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl ModelPackageStatusItem {
    /// Creates a new builder-style object to manufacture [`ModelPackageStatusItem`](crate::types::ModelPackageStatusItem).
    pub fn builder() -> crate::types::builders::ModelPackageStatusItemBuilder {
        crate::types::builders::ModelPackageStatusItemBuilder::default()
    }
}

/// A builder for [`ModelPackageStatusItem`](crate::types::ModelPackageStatusItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ModelPackageStatusItemBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DetailedModelPackageStatus>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
}
impl ModelPackageStatusItemBuilder {
    /// <p>The name of the model package for which the overall status is being reported.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the model package for which the overall status is being reported.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the model package for which the overall status is being reported.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The current status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::DetailedModelPackageStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DetailedModelPackageStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DetailedModelPackageStatus> {
        &self.status
    }
    /// <p>if the overall status is <code>Failed</code>, the reason for the failure.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>if the overall status is <code>Failed</code>, the reason for the failure.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>if the overall status is <code>Failed</code>, the reason for the failure.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Consumes the builder and constructs a [`ModelPackageStatusItem`](crate::types::ModelPackageStatusItem).
    pub fn build(self) -> crate::types::ModelPackageStatusItem {
        crate::types::ModelPackageStatusItem {
            name: self.name,
            status: self.status,
            failure_reason: self.failure_reason,
        }
    }
}
