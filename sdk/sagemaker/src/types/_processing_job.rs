// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Amazon SageMaker processing job that is used to analyze data and evaluate models. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html">Process Data and Evaluate Models</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProcessingJob {
    /// <p>List of input configurations for the processing job.</p>
    #[doc(hidden)]
    pub processing_inputs: std::option::Option<std::vec::Vec<crate::types::ProcessingInput>>,
    /// <p>Configuration for uploading output from the processing container.</p>
    #[doc(hidden)]
    pub processing_output_config: std::option::Option<crate::types::ProcessingOutputConfig>,
    /// <p>The name of the processing job.</p>
    #[doc(hidden)]
    pub processing_job_name: std::option::Option<std::string::String>,
    /// <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.</p>
    #[doc(hidden)]
    pub processing_resources: std::option::Option<crate::types::ProcessingResources>,
    /// <p>Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.</p>
    #[doc(hidden)]
    pub stopping_condition: std::option::Option<crate::types::ProcessingStoppingCondition>,
    /// <p>Configuration to run a processing job in a specified container image.</p>
    #[doc(hidden)]
    pub app_specification: std::option::Option<crate::types::AppSpecification>,
    /// <p>Sets the environment variables in the Docker container.</p>
    #[doc(hidden)]
    pub environment:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.</p>
    #[doc(hidden)]
    pub network_config: std::option::Option<crate::types::NetworkConfig>,
    /// <p>The ARN of the role used to create the processing job.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub experiment_config: std::option::Option<crate::types::ExperimentConfig>,
    /// <p>The ARN of the processing job.</p>
    #[doc(hidden)]
    pub processing_job_arn: std::option::Option<std::string::String>,
    /// <p>The status of the processing job.</p>
    #[doc(hidden)]
    pub processing_job_status: std::option::Option<crate::types::ProcessingJobStatus>,
    /// <p>A string, up to one KB in size, that contains metadata from the processing container when the processing job exits.</p>
    #[doc(hidden)]
    pub exit_message: std::option::Option<std::string::String>,
    /// <p>A string, up to one KB in size, that contains the reason a processing job failed, if it failed.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The time that the processing job ended.</p>
    #[doc(hidden)]
    pub processing_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time that the processing job started.</p>
    #[doc(hidden)]
    pub processing_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the processing job was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the processing job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ARN of a monitoring schedule for an endpoint associated with this processing job.</p>
    #[doc(hidden)]
    pub monitoring_schedule_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the AutoML job associated with this processing job.</p>
    #[doc(hidden)]
    pub auto_ml_job_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the training job associated with this processing job.</p>
    #[doc(hidden)]
    pub training_job_arn: std::option::Option<std::string::String>,
    /// <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ProcessingJob {
    /// <p>List of input configurations for the processing job.</p>
    pub fn processing_inputs(&self) -> std::option::Option<&[crate::types::ProcessingInput]> {
        self.processing_inputs.as_deref()
    }
    /// <p>Configuration for uploading output from the processing container.</p>
    pub fn processing_output_config(
        &self,
    ) -> std::option::Option<&crate::types::ProcessingOutputConfig> {
        self.processing_output_config.as_ref()
    }
    /// <p>The name of the processing job.</p>
    pub fn processing_job_name(&self) -> std::option::Option<&str> {
        self.processing_job_name.as_deref()
    }
    /// <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.</p>
    pub fn processing_resources(&self) -> std::option::Option<&crate::types::ProcessingResources> {
        self.processing_resources.as_ref()
    }
    /// <p>Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.</p>
    pub fn stopping_condition(
        &self,
    ) -> std::option::Option<&crate::types::ProcessingStoppingCondition> {
        self.stopping_condition.as_ref()
    }
    /// <p>Configuration to run a processing job in a specified container image.</p>
    pub fn app_specification(&self) -> std::option::Option<&crate::types::AppSpecification> {
        self.app_specification.as_ref()
    }
    /// <p>Sets the environment variables in the Docker container.</p>
    pub fn environment(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.environment.as_ref()
    }
    /// <p>Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.</p>
    pub fn network_config(&self) -> std::option::Option<&crate::types::NetworkConfig> {
        self.network_config.as_ref()
    }
    /// <p>The ARN of the role used to create the processing job.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn experiment_config(&self) -> std::option::Option<&crate::types::ExperimentConfig> {
        self.experiment_config.as_ref()
    }
    /// <p>The ARN of the processing job.</p>
    pub fn processing_job_arn(&self) -> std::option::Option<&str> {
        self.processing_job_arn.as_deref()
    }
    /// <p>The status of the processing job.</p>
    pub fn processing_job_status(&self) -> std::option::Option<&crate::types::ProcessingJobStatus> {
        self.processing_job_status.as_ref()
    }
    /// <p>A string, up to one KB in size, that contains metadata from the processing container when the processing job exits.</p>
    pub fn exit_message(&self) -> std::option::Option<&str> {
        self.exit_message.as_deref()
    }
    /// <p>A string, up to one KB in size, that contains the reason a processing job failed, if it failed.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The time that the processing job ended.</p>
    pub fn processing_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.processing_end_time.as_ref()
    }
    /// <p>The time that the processing job started.</p>
    pub fn processing_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.processing_start_time.as_ref()
    }
    /// <p>The time the processing job was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The time the processing job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The ARN of a monitoring schedule for an endpoint associated with this processing job.</p>
    pub fn monitoring_schedule_arn(&self) -> std::option::Option<&str> {
        self.monitoring_schedule_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AutoML job associated with this processing job.</p>
    pub fn auto_ml_job_arn(&self) -> std::option::Option<&str> {
        self.auto_ml_job_arn.as_deref()
    }
    /// <p>The ARN of the training job associated with this processing job.</p>
    pub fn training_job_arn(&self) -> std::option::Option<&str> {
        self.training_job_arn.as_deref()
    }
    /// <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl ProcessingJob {
    /// Creates a new builder-style object to manufacture [`ProcessingJob`](crate::types::ProcessingJob).
    pub fn builder() -> crate::types::builders::ProcessingJobBuilder {
        crate::types::builders::ProcessingJobBuilder::default()
    }
}

/// A builder for [`ProcessingJob`](crate::types::ProcessingJob).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProcessingJobBuilder {
    pub(crate) processing_inputs: std::option::Option<std::vec::Vec<crate::types::ProcessingInput>>,
    pub(crate) processing_output_config: std::option::Option<crate::types::ProcessingOutputConfig>,
    pub(crate) processing_job_name: std::option::Option<std::string::String>,
    pub(crate) processing_resources: std::option::Option<crate::types::ProcessingResources>,
    pub(crate) stopping_condition: std::option::Option<crate::types::ProcessingStoppingCondition>,
    pub(crate) app_specification: std::option::Option<crate::types::AppSpecification>,
    pub(crate) environment:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) network_config: std::option::Option<crate::types::NetworkConfig>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) experiment_config: std::option::Option<crate::types::ExperimentConfig>,
    pub(crate) processing_job_arn: std::option::Option<std::string::String>,
    pub(crate) processing_job_status: std::option::Option<crate::types::ProcessingJobStatus>,
    pub(crate) exit_message: std::option::Option<std::string::String>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) processing_end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) processing_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) monitoring_schedule_arn: std::option::Option<std::string::String>,
    pub(crate) auto_ml_job_arn: std::option::Option<std::string::String>,
    pub(crate) training_job_arn: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ProcessingJobBuilder {
    /// Appends an item to `processing_inputs`.
    ///
    /// To override the contents of this collection use [`set_processing_inputs`](Self::set_processing_inputs).
    ///
    /// <p>List of input configurations for the processing job.</p>
    pub fn processing_inputs(mut self, input: crate::types::ProcessingInput) -> Self {
        let mut v = self.processing_inputs.unwrap_or_default();
        v.push(input);
        self.processing_inputs = Some(v);
        self
    }
    /// <p>List of input configurations for the processing job.</p>
    pub fn set_processing_inputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProcessingInput>>,
    ) -> Self {
        self.processing_inputs = input;
        self
    }
    /// <p>Configuration for uploading output from the processing container.</p>
    pub fn processing_output_config(mut self, input: crate::types::ProcessingOutputConfig) -> Self {
        self.processing_output_config = Some(input);
        self
    }
    /// <p>Configuration for uploading output from the processing container.</p>
    pub fn set_processing_output_config(
        mut self,
        input: std::option::Option<crate::types::ProcessingOutputConfig>,
    ) -> Self {
        self.processing_output_config = input;
        self
    }
    /// <p>The name of the processing job.</p>
    pub fn processing_job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.processing_job_name = Some(input.into());
        self
    }
    /// <p>The name of the processing job.</p>
    pub fn set_processing_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.processing_job_name = input;
        self
    }
    /// <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.</p>
    pub fn processing_resources(mut self, input: crate::types::ProcessingResources) -> Self {
        self.processing_resources = Some(input);
        self
    }
    /// <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.</p>
    pub fn set_processing_resources(
        mut self,
        input: std::option::Option<crate::types::ProcessingResources>,
    ) -> Self {
        self.processing_resources = input;
        self
    }
    /// <p>Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.</p>
    pub fn stopping_condition(mut self, input: crate::types::ProcessingStoppingCondition) -> Self {
        self.stopping_condition = Some(input);
        self
    }
    /// <p>Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.</p>
    pub fn set_stopping_condition(
        mut self,
        input: std::option::Option<crate::types::ProcessingStoppingCondition>,
    ) -> Self {
        self.stopping_condition = input;
        self
    }
    /// <p>Configuration to run a processing job in a specified container image.</p>
    pub fn app_specification(mut self, input: crate::types::AppSpecification) -> Self {
        self.app_specification = Some(input);
        self
    }
    /// <p>Configuration to run a processing job in a specified container image.</p>
    pub fn set_app_specification(
        mut self,
        input: std::option::Option<crate::types::AppSpecification>,
    ) -> Self {
        self.app_specification = input;
        self
    }
    /// Adds a key-value pair to `environment`.
    ///
    /// To override the contents of this collection use [`set_environment`](Self::set_environment).
    ///
    /// <p>Sets the environment variables in the Docker container.</p>
    pub fn environment(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.environment.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.environment = Some(hash_map);
        self
    }
    /// <p>Sets the environment variables in the Docker container.</p>
    pub fn set_environment(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.environment = input;
        self
    }
    /// <p>Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.</p>
    pub fn network_config(mut self, input: crate::types::NetworkConfig) -> Self {
        self.network_config = Some(input);
        self
    }
    /// <p>Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.</p>
    pub fn set_network_config(
        mut self,
        input: std::option::Option<crate::types::NetworkConfig>,
    ) -> Self {
        self.network_config = input;
        self
    }
    /// <p>The ARN of the role used to create the processing job.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the role used to create the processing job.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn experiment_config(mut self, input: crate::types::ExperimentConfig) -> Self {
        self.experiment_config = Some(input);
        self
    }
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
    /// <ul>
    /// <li> <p> <code>CreateProcessingJob</code> </p> </li>
    /// <li> <p> <code>CreateTrainingJob</code> </p> </li>
    /// <li> <p> <code>CreateTransformJob</code> </p> </li>
    /// </ul>
    pub fn set_experiment_config(
        mut self,
        input: std::option::Option<crate::types::ExperimentConfig>,
    ) -> Self {
        self.experiment_config = input;
        self
    }
    /// <p>The ARN of the processing job.</p>
    pub fn processing_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.processing_job_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the processing job.</p>
    pub fn set_processing_job_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.processing_job_arn = input;
        self
    }
    /// <p>The status of the processing job.</p>
    pub fn processing_job_status(mut self, input: crate::types::ProcessingJobStatus) -> Self {
        self.processing_job_status = Some(input);
        self
    }
    /// <p>The status of the processing job.</p>
    pub fn set_processing_job_status(
        mut self,
        input: std::option::Option<crate::types::ProcessingJobStatus>,
    ) -> Self {
        self.processing_job_status = input;
        self
    }
    /// <p>A string, up to one KB in size, that contains metadata from the processing container when the processing job exits.</p>
    pub fn exit_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.exit_message = Some(input.into());
        self
    }
    /// <p>A string, up to one KB in size, that contains metadata from the processing container when the processing job exits.</p>
    pub fn set_exit_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.exit_message = input;
        self
    }
    /// <p>A string, up to one KB in size, that contains the reason a processing job failed, if it failed.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>A string, up to one KB in size, that contains the reason a processing job failed, if it failed.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The time that the processing job ended.</p>
    pub fn processing_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.processing_end_time = Some(input);
        self
    }
    /// <p>The time that the processing job ended.</p>
    pub fn set_processing_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.processing_end_time = input;
        self
    }
    /// <p>The time that the processing job started.</p>
    pub fn processing_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.processing_start_time = Some(input);
        self
    }
    /// <p>The time that the processing job started.</p>
    pub fn set_processing_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.processing_start_time = input;
        self
    }
    /// <p>The time the processing job was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The time the processing job was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The time the processing job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time the processing job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The ARN of a monitoring schedule for an endpoint associated with this processing job.</p>
    pub fn monitoring_schedule_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitoring_schedule_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a monitoring schedule for an endpoint associated with this processing job.</p>
    pub fn set_monitoring_schedule_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monitoring_schedule_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AutoML job associated with this processing job.</p>
    pub fn auto_ml_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_ml_job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AutoML job associated with this processing job.</p>
    pub fn set_auto_ml_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.auto_ml_job_arn = input;
        self
    }
    /// <p>The ARN of the training job associated with this processing job.</p>
    pub fn training_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.training_job_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the training job associated with this processing job.</p>
    pub fn set_training_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.training_job_arn = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ProcessingJob`](crate::types::ProcessingJob).
    pub fn build(self) -> crate::types::ProcessingJob {
        crate::types::ProcessingJob {
            processing_inputs: self.processing_inputs,
            processing_output_config: self.processing_output_config,
            processing_job_name: self.processing_job_name,
            processing_resources: self.processing_resources,
            stopping_condition: self.stopping_condition,
            app_specification: self.app_specification,
            environment: self.environment,
            network_config: self.network_config,
            role_arn: self.role_arn,
            experiment_config: self.experiment_config,
            processing_job_arn: self.processing_job_arn,
            processing_job_status: self.processing_job_status,
            exit_message: self.exit_message,
            failure_reason: self.failure_reason,
            processing_end_time: self.processing_end_time,
            processing_start_time: self.processing_start_time,
            last_modified_time: self.last_modified_time,
            creation_time: self.creation_time,
            monitoring_schedule_arn: self.monitoring_schedule_arn,
            auto_ml_job_arn: self.auto_ml_job_arn,
            training_job_arn: self.training_job_arn,
            tags: self.tags,
        }
    }
}
