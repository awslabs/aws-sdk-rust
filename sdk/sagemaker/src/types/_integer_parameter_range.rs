// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For a hyperparameter of the integer type, specifies the range that a hyperparameter tuning job searches.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IntegerParameterRange {
    /// <p>The name of the hyperparameter to search.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The minimum value of the hyperparameter to search.</p>
    #[doc(hidden)]
    pub min_value: std::option::Option<std::string::String>,
    /// <p>The maximum value of the hyperparameter to search.</p>
    #[doc(hidden)]
    pub max_value: std::option::Option<std::string::String>,
    /// <p>The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
    /// <dl>
    /// <dt>
    /// Auto
    /// </dt>
    /// <dd>
    /// <p>SageMaker hyperparameter tuning chooses the best scale for the hyperparameter.</p>
    /// </dd>
    /// <dt>
    /// Linear
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.</p>
    /// </dd>
    /// <dt>
    /// Logarithmic
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale.</p>
    /// <p>Logarithmic scaling works only for ranges that have only values greater than 0.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub scaling_type: std::option::Option<crate::types::HyperParameterScalingType>,
}
impl IntegerParameterRange {
    /// <p>The name of the hyperparameter to search.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The minimum value of the hyperparameter to search.</p>
    pub fn min_value(&self) -> std::option::Option<&str> {
        self.min_value.as_deref()
    }
    /// <p>The maximum value of the hyperparameter to search.</p>
    pub fn max_value(&self) -> std::option::Option<&str> {
        self.max_value.as_deref()
    }
    /// <p>The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
    /// <dl>
    /// <dt>
    /// Auto
    /// </dt>
    /// <dd>
    /// <p>SageMaker hyperparameter tuning chooses the best scale for the hyperparameter.</p>
    /// </dd>
    /// <dt>
    /// Linear
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.</p>
    /// </dd>
    /// <dt>
    /// Logarithmic
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale.</p>
    /// <p>Logarithmic scaling works only for ranges that have only values greater than 0.</p>
    /// </dd>
    /// </dl>
    pub fn scaling_type(&self) -> std::option::Option<&crate::types::HyperParameterScalingType> {
        self.scaling_type.as_ref()
    }
}
impl IntegerParameterRange {
    /// Creates a new builder-style object to manufacture [`IntegerParameterRange`](crate::types::IntegerParameterRange).
    pub fn builder() -> crate::types::builders::IntegerParameterRangeBuilder {
        crate::types::builders::IntegerParameterRangeBuilder::default()
    }
}

/// A builder for [`IntegerParameterRange`](crate::types::IntegerParameterRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IntegerParameterRangeBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) min_value: std::option::Option<std::string::String>,
    pub(crate) max_value: std::option::Option<std::string::String>,
    pub(crate) scaling_type: std::option::Option<crate::types::HyperParameterScalingType>,
}
impl IntegerParameterRangeBuilder {
    /// <p>The name of the hyperparameter to search.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the hyperparameter to search.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The minimum value of the hyperparameter to search.</p>
    pub fn min_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.min_value = Some(input.into());
        self
    }
    /// <p>The minimum value of the hyperparameter to search.</p>
    pub fn set_min_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.min_value = input;
        self
    }
    /// <p>The maximum value of the hyperparameter to search.</p>
    pub fn max_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_value = Some(input.into());
        self
    }
    /// <p>The maximum value of the hyperparameter to search.</p>
    pub fn set_max_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_value = input;
        self
    }
    /// <p>The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
    /// <dl>
    /// <dt>
    /// Auto
    /// </dt>
    /// <dd>
    /// <p>SageMaker hyperparameter tuning chooses the best scale for the hyperparameter.</p>
    /// </dd>
    /// <dt>
    /// Linear
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.</p>
    /// </dd>
    /// <dt>
    /// Logarithmic
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale.</p>
    /// <p>Logarithmic scaling works only for ranges that have only values greater than 0.</p>
    /// </dd>
    /// </dl>
    pub fn scaling_type(mut self, input: crate::types::HyperParameterScalingType) -> Self {
        self.scaling_type = Some(input);
        self
    }
    /// <p>The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
    /// <dl>
    /// <dt>
    /// Auto
    /// </dt>
    /// <dd>
    /// <p>SageMaker hyperparameter tuning chooses the best scale for the hyperparameter.</p>
    /// </dd>
    /// <dt>
    /// Linear
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.</p>
    /// </dd>
    /// <dt>
    /// Logarithmic
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale.</p>
    /// <p>Logarithmic scaling works only for ranges that have only values greater than 0.</p>
    /// </dd>
    /// </dl>
    pub fn set_scaling_type(
        mut self,
        input: std::option::Option<crate::types::HyperParameterScalingType>,
    ) -> Self {
        self.scaling_type = input;
        self
    }
    /// Consumes the builder and constructs a [`IntegerParameterRange`](crate::types::IntegerParameterRange).
    pub fn build(self) -> crate::types::IntegerParameterRange {
        crate::types::IntegerParameterRange {
            name: self.name,
            min_value: self.min_value,
            max_value: self.max_value,
            scaling_type: self.scaling_type,
        }
    }
}
