// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of the trial component.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrialComponentStatus {
    /// <p>The status of the trial component.</p>
    #[doc(hidden)]
    pub primary_status: std::option::Option<crate::types::TrialComponentPrimaryStatus>,
    /// <p>If the component failed, a message describing why.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl TrialComponentStatus {
    /// <p>The status of the trial component.</p>
    pub fn primary_status(
        &self,
    ) -> std::option::Option<&crate::types::TrialComponentPrimaryStatus> {
        self.primary_status.as_ref()
    }
    /// <p>If the component failed, a message describing why.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl TrialComponentStatus {
    /// Creates a new builder-style object to manufacture [`TrialComponentStatus`](crate::types::TrialComponentStatus).
    pub fn builder() -> crate::types::builders::TrialComponentStatusBuilder {
        crate::types::builders::TrialComponentStatusBuilder::default()
    }
}

/// A builder for [`TrialComponentStatus`](crate::types::TrialComponentStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrialComponentStatusBuilder {
    pub(crate) primary_status: std::option::Option<crate::types::TrialComponentPrimaryStatus>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl TrialComponentStatusBuilder {
    /// <p>The status of the trial component.</p>
    pub fn primary_status(mut self, input: crate::types::TrialComponentPrimaryStatus) -> Self {
        self.primary_status = Some(input);
        self
    }
    /// <p>The status of the trial component.</p>
    pub fn set_primary_status(
        mut self,
        input: std::option::Option<crate::types::TrialComponentPrimaryStatus>,
    ) -> Self {
        self.primary_status = input;
        self
    }
    /// <p>If the component failed, a message describing why.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>If the component failed, a message describing why.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`TrialComponentStatus`](crate::types::TrialComponentStatus).
    pub fn build(self) -> crate::types::TrialComponentStatus {
        crate::types::TrialComponentStatus {
            primary_status: self.primary_status,
            message: self.message,
        }
    }
}
