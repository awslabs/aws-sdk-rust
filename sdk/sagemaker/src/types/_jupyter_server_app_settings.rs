// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The JupyterServer app settings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JupyterServerAppSettings {
    /// <p>The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app. If you use the <code>LifecycleConfigArns</code> parameter, then this parameter is also required.</p>
    #[doc(hidden)]
    pub default_resource_spec: std::option::Option<crate::types::ResourceSpec>,
    /// <p> The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the JupyterServerApp. If you use this parameter, the <code>DefaultResourceSpec</code> parameter is also required.</p> <note>
    /// <p>To remove a Lifecycle Config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
    /// </note>
    #[doc(hidden)]
    pub lifecycle_config_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application.</p>
    #[doc(hidden)]
    pub code_repositories: std::option::Option<std::vec::Vec<crate::types::CodeRepository>>,
}
impl JupyterServerAppSettings {
    /// <p>The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app. If you use the <code>LifecycleConfigArns</code> parameter, then this parameter is also required.</p>
    pub fn default_resource_spec(&self) -> std::option::Option<&crate::types::ResourceSpec> {
        self.default_resource_spec.as_ref()
    }
    /// <p> The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the JupyterServerApp. If you use this parameter, the <code>DefaultResourceSpec</code> parameter is also required.</p> <note>
    /// <p>To remove a Lifecycle Config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
    /// </note>
    pub fn lifecycle_config_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.lifecycle_config_arns.as_deref()
    }
    /// <p>A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application.</p>
    pub fn code_repositories(&self) -> std::option::Option<&[crate::types::CodeRepository]> {
        self.code_repositories.as_deref()
    }
}
impl JupyterServerAppSettings {
    /// Creates a new builder-style object to manufacture [`JupyterServerAppSettings`](crate::types::JupyterServerAppSettings).
    pub fn builder() -> crate::types::builders::JupyterServerAppSettingsBuilder {
        crate::types::builders::JupyterServerAppSettingsBuilder::default()
    }
}

/// A builder for [`JupyterServerAppSettings`](crate::types::JupyterServerAppSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JupyterServerAppSettingsBuilder {
    pub(crate) default_resource_spec: std::option::Option<crate::types::ResourceSpec>,
    pub(crate) lifecycle_config_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) code_repositories: std::option::Option<std::vec::Vec<crate::types::CodeRepository>>,
}
impl JupyterServerAppSettingsBuilder {
    /// <p>The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app. If you use the <code>LifecycleConfigArns</code> parameter, then this parameter is also required.</p>
    pub fn default_resource_spec(mut self, input: crate::types::ResourceSpec) -> Self {
        self.default_resource_spec = Some(input);
        self
    }
    /// <p>The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app. If you use the <code>LifecycleConfigArns</code> parameter, then this parameter is also required.</p>
    pub fn set_default_resource_spec(
        mut self,
        input: std::option::Option<crate::types::ResourceSpec>,
    ) -> Self {
        self.default_resource_spec = input;
        self
    }
    /// Appends an item to `lifecycle_config_arns`.
    ///
    /// To override the contents of this collection use [`set_lifecycle_config_arns`](Self::set_lifecycle_config_arns).
    ///
    /// <p> The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the JupyterServerApp. If you use this parameter, the <code>DefaultResourceSpec</code> parameter is also required.</p> <note>
    /// <p>To remove a Lifecycle Config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
    /// </note>
    pub fn lifecycle_config_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.lifecycle_config_arns.unwrap_or_default();
        v.push(input.into());
        self.lifecycle_config_arns = Some(v);
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the JupyterServerApp. If you use this parameter, the <code>DefaultResourceSpec</code> parameter is also required.</p> <note>
    /// <p>To remove a Lifecycle Config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
    /// </note>
    pub fn set_lifecycle_config_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.lifecycle_config_arns = input;
        self
    }
    /// Appends an item to `code_repositories`.
    ///
    /// To override the contents of this collection use [`set_code_repositories`](Self::set_code_repositories).
    ///
    /// <p>A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application.</p>
    pub fn code_repositories(mut self, input: crate::types::CodeRepository) -> Self {
        let mut v = self.code_repositories.unwrap_or_default();
        v.push(input);
        self.code_repositories = Some(v);
        self
    }
    /// <p>A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application.</p>
    pub fn set_code_repositories(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CodeRepository>>,
    ) -> Self {
        self.code_repositories = input;
        self
    }
    /// Consumes the builder and constructs a [`JupyterServerAppSettings`](crate::types::JupyterServerAppSettings).
    pub fn build(self) -> crate::types::JupyterServerAppSettings {
        crate::types::JupyterServerAppSettings {
            default_resource_spec: self.default_resource_spec,
            lifecycle_config_arns: self.lifecycle_config_arns,
            code_repositories: self.code_repositories,
        }
    }
}
