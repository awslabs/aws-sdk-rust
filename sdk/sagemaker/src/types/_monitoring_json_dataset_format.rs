// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the JSON dataset format used when running a monitoring job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitoringJsonDatasetFormat {
    /// <p>Indicates if the file should be read as a json object per line. </p>
    #[doc(hidden)]
    pub line: bool,
}
impl MonitoringJsonDatasetFormat {
    /// <p>Indicates if the file should be read as a json object per line. </p>
    pub fn line(&self) -> bool {
        self.line
    }
}
impl MonitoringJsonDatasetFormat {
    /// Creates a new builder-style object to manufacture [`MonitoringJsonDatasetFormat`](crate::types::MonitoringJsonDatasetFormat).
    pub fn builder() -> crate::types::builders::MonitoringJsonDatasetFormatBuilder {
        crate::types::builders::MonitoringJsonDatasetFormatBuilder::default()
    }
}

/// A builder for [`MonitoringJsonDatasetFormat`](crate::types::MonitoringJsonDatasetFormat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringJsonDatasetFormatBuilder {
    pub(crate) line: std::option::Option<bool>,
}
impl MonitoringJsonDatasetFormatBuilder {
    /// <p>Indicates if the file should be read as a json object per line. </p>
    pub fn line(mut self, input: bool) -> Self {
        self.line = Some(input);
        self
    }
    /// <p>Indicates if the file should be read as a json object per line. </p>
    pub fn set_line(mut self, input: std::option::Option<bool>) -> Self {
        self.line = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitoringJsonDatasetFormat`](crate::types::MonitoringJsonDatasetFormat).
    pub fn build(self) -> crate::types::MonitoringJsonDatasetFormat {
        crate::types::MonitoringJsonDatasetFormat {
            line: self.line.unwrap_or_default(),
        }
    }
}
