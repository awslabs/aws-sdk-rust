// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the <code>CreateUserProfile</code> API is called, and as <code>DefaultUserSettings</code> when the <code>CreateDomain</code> API is called.</p>
/// <p> <code>SecurityGroups</code> is aggregated when specified in both calls. For all other settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code> take precedence over those specified in <code>CreateDomain</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserSettings {
    /// <p>The execution role for the user.</p>
    #[doc(hidden)]
    pub execution_role: std::option::Option<std::string::String>,
    /// <p>The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
    /// <p>Optional when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to <code>PublicInternetOnly</code>.</p>
    /// <p>Required when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to <code>VpcOnly</code>.</p>
    /// <p>Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.</p>
    #[doc(hidden)]
    pub security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies options for sharing SageMaker Studio notebooks.</p>
    #[doc(hidden)]
    pub sharing_settings: std::option::Option<crate::types::SharingSettings>,
    /// <p>The Jupyter server's app settings.</p>
    #[doc(hidden)]
    pub jupyter_server_app_settings: std::option::Option<crate::types::JupyterServerAppSettings>,
    /// <p>The kernel gateway app settings.</p>
    #[doc(hidden)]
    pub kernel_gateway_app_settings: std::option::Option<crate::types::KernelGatewayAppSettings>,
    /// <p>The TensorBoard app settings.</p>
    #[doc(hidden)]
    pub tensor_board_app_settings: std::option::Option<crate::types::TensorBoardAppSettings>,
    /// <p>A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app.</p>
    #[doc(hidden)]
    pub r_studio_server_pro_app_settings:
        std::option::Option<crate::types::RStudioServerProAppSettings>,
    /// <p>A collection of settings that configure the <code>RSessionGateway</code> app.</p>
    #[doc(hidden)]
    pub r_session_app_settings: std::option::Option<crate::types::RSessionAppSettings>,
    /// <p>The Canvas app settings.</p>
    #[doc(hidden)]
    pub canvas_app_settings: std::option::Option<crate::types::CanvasAppSettings>,
}
impl UserSettings {
    /// <p>The execution role for the user.</p>
    pub fn execution_role(&self) -> std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
    /// <p>Optional when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to <code>PublicInternetOnly</code>.</p>
    /// <p>Required when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to <code>VpcOnly</code>.</p>
    /// <p>Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.</p>
    pub fn security_groups(&self) -> std::option::Option<&[std::string::String]> {
        self.security_groups.as_deref()
    }
    /// <p>Specifies options for sharing SageMaker Studio notebooks.</p>
    pub fn sharing_settings(&self) -> std::option::Option<&crate::types::SharingSettings> {
        self.sharing_settings.as_ref()
    }
    /// <p>The Jupyter server's app settings.</p>
    pub fn jupyter_server_app_settings(
        &self,
    ) -> std::option::Option<&crate::types::JupyterServerAppSettings> {
        self.jupyter_server_app_settings.as_ref()
    }
    /// <p>The kernel gateway app settings.</p>
    pub fn kernel_gateway_app_settings(
        &self,
    ) -> std::option::Option<&crate::types::KernelGatewayAppSettings> {
        self.kernel_gateway_app_settings.as_ref()
    }
    /// <p>The TensorBoard app settings.</p>
    pub fn tensor_board_app_settings(
        &self,
    ) -> std::option::Option<&crate::types::TensorBoardAppSettings> {
        self.tensor_board_app_settings.as_ref()
    }
    /// <p>A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app.</p>
    pub fn r_studio_server_pro_app_settings(
        &self,
    ) -> std::option::Option<&crate::types::RStudioServerProAppSettings> {
        self.r_studio_server_pro_app_settings.as_ref()
    }
    /// <p>A collection of settings that configure the <code>RSessionGateway</code> app.</p>
    pub fn r_session_app_settings(
        &self,
    ) -> std::option::Option<&crate::types::RSessionAppSettings> {
        self.r_session_app_settings.as_ref()
    }
    /// <p>The Canvas app settings.</p>
    pub fn canvas_app_settings(&self) -> std::option::Option<&crate::types::CanvasAppSettings> {
        self.canvas_app_settings.as_ref()
    }
}
impl UserSettings {
    /// Creates a new builder-style object to manufacture [`UserSettings`](crate::types::UserSettings).
    pub fn builder() -> crate::types::builders::UserSettingsBuilder {
        crate::types::builders::UserSettingsBuilder::default()
    }
}

/// A builder for [`UserSettings`](crate::types::UserSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserSettingsBuilder {
    pub(crate) execution_role: std::option::Option<std::string::String>,
    pub(crate) security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) sharing_settings: std::option::Option<crate::types::SharingSettings>,
    pub(crate) jupyter_server_app_settings:
        std::option::Option<crate::types::JupyterServerAppSettings>,
    pub(crate) kernel_gateway_app_settings:
        std::option::Option<crate::types::KernelGatewayAppSettings>,
    pub(crate) tensor_board_app_settings: std::option::Option<crate::types::TensorBoardAppSettings>,
    pub(crate) r_studio_server_pro_app_settings:
        std::option::Option<crate::types::RStudioServerProAppSettings>,
    pub(crate) r_session_app_settings: std::option::Option<crate::types::RSessionAppSettings>,
    pub(crate) canvas_app_settings: std::option::Option<crate::types::CanvasAppSettings>,
}
impl UserSettingsBuilder {
    /// <p>The execution role for the user.</p>
    pub fn execution_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_role = Some(input.into());
        self
    }
    /// <p>The execution role for the user.</p>
    pub fn set_execution_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
    /// <p>Optional when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to <code>PublicInternetOnly</code>.</p>
    /// <p>Required when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to <code>VpcOnly</code>.</p>
    /// <p>Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.</p>
    pub fn security_groups(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input.into());
        self.security_groups = Some(v);
        self
    }
    /// <p>The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
    /// <p>Optional when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to <code>PublicInternetOnly</code>.</p>
    /// <p>Required when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to <code>VpcOnly</code>.</p>
    /// <p>Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.</p>
    pub fn set_security_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_groups = input;
        self
    }
    /// <p>Specifies options for sharing SageMaker Studio notebooks.</p>
    pub fn sharing_settings(mut self, input: crate::types::SharingSettings) -> Self {
        self.sharing_settings = Some(input);
        self
    }
    /// <p>Specifies options for sharing SageMaker Studio notebooks.</p>
    pub fn set_sharing_settings(
        mut self,
        input: std::option::Option<crate::types::SharingSettings>,
    ) -> Self {
        self.sharing_settings = input;
        self
    }
    /// <p>The Jupyter server's app settings.</p>
    pub fn jupyter_server_app_settings(
        mut self,
        input: crate::types::JupyterServerAppSettings,
    ) -> Self {
        self.jupyter_server_app_settings = Some(input);
        self
    }
    /// <p>The Jupyter server's app settings.</p>
    pub fn set_jupyter_server_app_settings(
        mut self,
        input: std::option::Option<crate::types::JupyterServerAppSettings>,
    ) -> Self {
        self.jupyter_server_app_settings = input;
        self
    }
    /// <p>The kernel gateway app settings.</p>
    pub fn kernel_gateway_app_settings(
        mut self,
        input: crate::types::KernelGatewayAppSettings,
    ) -> Self {
        self.kernel_gateway_app_settings = Some(input);
        self
    }
    /// <p>The kernel gateway app settings.</p>
    pub fn set_kernel_gateway_app_settings(
        mut self,
        input: std::option::Option<crate::types::KernelGatewayAppSettings>,
    ) -> Self {
        self.kernel_gateway_app_settings = input;
        self
    }
    /// <p>The TensorBoard app settings.</p>
    pub fn tensor_board_app_settings(
        mut self,
        input: crate::types::TensorBoardAppSettings,
    ) -> Self {
        self.tensor_board_app_settings = Some(input);
        self
    }
    /// <p>The TensorBoard app settings.</p>
    pub fn set_tensor_board_app_settings(
        mut self,
        input: std::option::Option<crate::types::TensorBoardAppSettings>,
    ) -> Self {
        self.tensor_board_app_settings = input;
        self
    }
    /// <p>A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app.</p>
    pub fn r_studio_server_pro_app_settings(
        mut self,
        input: crate::types::RStudioServerProAppSettings,
    ) -> Self {
        self.r_studio_server_pro_app_settings = Some(input);
        self
    }
    /// <p>A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app.</p>
    pub fn set_r_studio_server_pro_app_settings(
        mut self,
        input: std::option::Option<crate::types::RStudioServerProAppSettings>,
    ) -> Self {
        self.r_studio_server_pro_app_settings = input;
        self
    }
    /// <p>A collection of settings that configure the <code>RSessionGateway</code> app.</p>
    pub fn r_session_app_settings(mut self, input: crate::types::RSessionAppSettings) -> Self {
        self.r_session_app_settings = Some(input);
        self
    }
    /// <p>A collection of settings that configure the <code>RSessionGateway</code> app.</p>
    pub fn set_r_session_app_settings(
        mut self,
        input: std::option::Option<crate::types::RSessionAppSettings>,
    ) -> Self {
        self.r_session_app_settings = input;
        self
    }
    /// <p>The Canvas app settings.</p>
    pub fn canvas_app_settings(mut self, input: crate::types::CanvasAppSettings) -> Self {
        self.canvas_app_settings = Some(input);
        self
    }
    /// <p>The Canvas app settings.</p>
    pub fn set_canvas_app_settings(
        mut self,
        input: std::option::Option<crate::types::CanvasAppSettings>,
    ) -> Self {
        self.canvas_app_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`UserSettings`](crate::types::UserSettings).
    pub fn build(self) -> crate::types::UserSettings {
        crate::types::UserSettings {
            execution_role: self.execution_role,
            security_groups: self.security_groups,
            sharing_settings: self.sharing_settings,
            jupyter_server_app_settings: self.jupyter_server_app_settings,
            kernel_gateway_app_settings: self.kernel_gateway_app_settings,
            tensor_board_app_settings: self.tensor_board_app_settings,
            r_studio_server_pro_app_settings: self.r_studio_server_pro_app_settings,
            r_session_app_settings: self.r_session_app_settings,
            canvas_app_settings: self.canvas_app_settings,
        }
    }
}
