// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains explainability metrics for a model.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Explainability {
    /// <p>The explainability report for a model.</p>
    #[doc(hidden)]
    pub report: std::option::Option<crate::types::MetricsSource>,
}
impl Explainability {
    /// <p>The explainability report for a model.</p>
    pub fn report(&self) -> std::option::Option<&crate::types::MetricsSource> {
        self.report.as_ref()
    }
}
impl Explainability {
    /// Creates a new builder-style object to manufacture [`Explainability`](crate::types::Explainability).
    pub fn builder() -> crate::types::builders::ExplainabilityBuilder {
        crate::types::builders::ExplainabilityBuilder::default()
    }
}

/// A builder for [`Explainability`](crate::types::Explainability).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExplainabilityBuilder {
    pub(crate) report: std::option::Option<crate::types::MetricsSource>,
}
impl ExplainabilityBuilder {
    /// <p>The explainability report for a model.</p>
    pub fn report(mut self, input: crate::types::MetricsSource) -> Self {
        self.report = Some(input);
        self
    }
    /// <p>The explainability report for a model.</p>
    pub fn set_report(mut self, input: std::option::Option<crate::types::MetricsSource>) -> Self {
        self.report = input;
        self
    }
    /// Consumes the builder and constructs a [`Explainability`](crate::types::Explainability).
    pub fn build(self) -> crate::types::Explainability {
        crate::types::Explainability {
            report: self.report,
        }
    }
}
