// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies conditions for stopping a job. When a job reaches a stopping condition limit, SageMaker ends the job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecommendationJobStoppingConditions {
    /// <p>The maximum number of requests per minute expected for the endpoint.</p>
    #[doc(hidden)]
    pub max_invocations: i32,
    /// <p>The interval of time taken by a model to respond as viewed from SageMaker. The interval includes the local communication time taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.</p>
    #[doc(hidden)]
    pub model_latency_thresholds:
        std::option::Option<std::vec::Vec<crate::types::ModelLatencyThreshold>>,
}
impl RecommendationJobStoppingConditions {
    /// <p>The maximum number of requests per minute expected for the endpoint.</p>
    pub fn max_invocations(&self) -> i32 {
        self.max_invocations
    }
    /// <p>The interval of time taken by a model to respond as viewed from SageMaker. The interval includes the local communication time taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.</p>
    pub fn model_latency_thresholds(
        &self,
    ) -> std::option::Option<&[crate::types::ModelLatencyThreshold]> {
        self.model_latency_thresholds.as_deref()
    }
}
impl RecommendationJobStoppingConditions {
    /// Creates a new builder-style object to manufacture [`RecommendationJobStoppingConditions`](crate::types::RecommendationJobStoppingConditions).
    pub fn builder() -> crate::types::builders::RecommendationJobStoppingConditionsBuilder {
        crate::types::builders::RecommendationJobStoppingConditionsBuilder::default()
    }
}

/// A builder for [`RecommendationJobStoppingConditions`](crate::types::RecommendationJobStoppingConditions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecommendationJobStoppingConditionsBuilder {
    pub(crate) max_invocations: std::option::Option<i32>,
    pub(crate) model_latency_thresholds:
        std::option::Option<std::vec::Vec<crate::types::ModelLatencyThreshold>>,
}
impl RecommendationJobStoppingConditionsBuilder {
    /// <p>The maximum number of requests per minute expected for the endpoint.</p>
    pub fn max_invocations(mut self, input: i32) -> Self {
        self.max_invocations = Some(input);
        self
    }
    /// <p>The maximum number of requests per minute expected for the endpoint.</p>
    pub fn set_max_invocations(mut self, input: std::option::Option<i32>) -> Self {
        self.max_invocations = input;
        self
    }
    /// Appends an item to `model_latency_thresholds`.
    ///
    /// To override the contents of this collection use [`set_model_latency_thresholds`](Self::set_model_latency_thresholds).
    ///
    /// <p>The interval of time taken by a model to respond as viewed from SageMaker. The interval includes the local communication time taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.</p>
    pub fn model_latency_thresholds(mut self, input: crate::types::ModelLatencyThreshold) -> Self {
        let mut v = self.model_latency_thresholds.unwrap_or_default();
        v.push(input);
        self.model_latency_thresholds = Some(v);
        self
    }
    /// <p>The interval of time taken by a model to respond as viewed from SageMaker. The interval includes the local communication time taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.</p>
    pub fn set_model_latency_thresholds(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ModelLatencyThreshold>>,
    ) -> Self {
        self.model_latency_thresholds = input;
        self
    }
    /// Consumes the builder and constructs a [`RecommendationJobStoppingConditions`](crate::types::RecommendationJobStoppingConditions).
    pub fn build(self) -> crate::types::RecommendationJobStoppingConditions {
        crate::types::RecommendationJobStoppingConditions {
            max_invocations: self.max_invocations.unwrap_or_default(),
            model_latency_thresholds: self.model_latency_thresholds,
        }
    }
}
