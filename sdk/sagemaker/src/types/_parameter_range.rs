// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the possible values for categorical, continuous, and integer hyperparameters to be used by an algorithm.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParameterRange {
    /// <p>A <code>IntegerParameterRangeSpecification</code> object that defines the possible values for an integer hyperparameter.</p>
    #[doc(hidden)]
    pub integer_parameter_range_specification:
        std::option::Option<crate::types::IntegerParameterRangeSpecification>,
    /// <p>A <code>ContinuousParameterRangeSpecification</code> object that defines the possible values for a continuous hyperparameter.</p>
    #[doc(hidden)]
    pub continuous_parameter_range_specification:
        std::option::Option<crate::types::ContinuousParameterRangeSpecification>,
    /// <p>A <code>CategoricalParameterRangeSpecification</code> object that defines the possible values for a categorical hyperparameter.</p>
    #[doc(hidden)]
    pub categorical_parameter_range_specification:
        std::option::Option<crate::types::CategoricalParameterRangeSpecification>,
}
impl ParameterRange {
    /// <p>A <code>IntegerParameterRangeSpecification</code> object that defines the possible values for an integer hyperparameter.</p>
    pub fn integer_parameter_range_specification(
        &self,
    ) -> std::option::Option<&crate::types::IntegerParameterRangeSpecification> {
        self.integer_parameter_range_specification.as_ref()
    }
    /// <p>A <code>ContinuousParameterRangeSpecification</code> object that defines the possible values for a continuous hyperparameter.</p>
    pub fn continuous_parameter_range_specification(
        &self,
    ) -> std::option::Option<&crate::types::ContinuousParameterRangeSpecification> {
        self.continuous_parameter_range_specification.as_ref()
    }
    /// <p>A <code>CategoricalParameterRangeSpecification</code> object that defines the possible values for a categorical hyperparameter.</p>
    pub fn categorical_parameter_range_specification(
        &self,
    ) -> std::option::Option<&crate::types::CategoricalParameterRangeSpecification> {
        self.categorical_parameter_range_specification.as_ref()
    }
}
impl ParameterRange {
    /// Creates a new builder-style object to manufacture [`ParameterRange`](crate::types::ParameterRange).
    pub fn builder() -> crate::types::builders::ParameterRangeBuilder {
        crate::types::builders::ParameterRangeBuilder::default()
    }
}

/// A builder for [`ParameterRange`](crate::types::ParameterRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParameterRangeBuilder {
    pub(crate) integer_parameter_range_specification:
        std::option::Option<crate::types::IntegerParameterRangeSpecification>,
    pub(crate) continuous_parameter_range_specification:
        std::option::Option<crate::types::ContinuousParameterRangeSpecification>,
    pub(crate) categorical_parameter_range_specification:
        std::option::Option<crate::types::CategoricalParameterRangeSpecification>,
}
impl ParameterRangeBuilder {
    /// <p>A <code>IntegerParameterRangeSpecification</code> object that defines the possible values for an integer hyperparameter.</p>
    pub fn integer_parameter_range_specification(
        mut self,
        input: crate::types::IntegerParameterRangeSpecification,
    ) -> Self {
        self.integer_parameter_range_specification = Some(input);
        self
    }
    /// <p>A <code>IntegerParameterRangeSpecification</code> object that defines the possible values for an integer hyperparameter.</p>
    pub fn set_integer_parameter_range_specification(
        mut self,
        input: std::option::Option<crate::types::IntegerParameterRangeSpecification>,
    ) -> Self {
        self.integer_parameter_range_specification = input;
        self
    }
    /// <p>A <code>ContinuousParameterRangeSpecification</code> object that defines the possible values for a continuous hyperparameter.</p>
    pub fn continuous_parameter_range_specification(
        mut self,
        input: crate::types::ContinuousParameterRangeSpecification,
    ) -> Self {
        self.continuous_parameter_range_specification = Some(input);
        self
    }
    /// <p>A <code>ContinuousParameterRangeSpecification</code> object that defines the possible values for a continuous hyperparameter.</p>
    pub fn set_continuous_parameter_range_specification(
        mut self,
        input: std::option::Option<crate::types::ContinuousParameterRangeSpecification>,
    ) -> Self {
        self.continuous_parameter_range_specification = input;
        self
    }
    /// <p>A <code>CategoricalParameterRangeSpecification</code> object that defines the possible values for a categorical hyperparameter.</p>
    pub fn categorical_parameter_range_specification(
        mut self,
        input: crate::types::CategoricalParameterRangeSpecification,
    ) -> Self {
        self.categorical_parameter_range_specification = Some(input);
        self
    }
    /// <p>A <code>CategoricalParameterRangeSpecification</code> object that defines the possible values for a categorical hyperparameter.</p>
    pub fn set_categorical_parameter_range_specification(
        mut self,
        input: std::option::Option<crate::types::CategoricalParameterRangeSpecification>,
    ) -> Self {
        self.categorical_parameter_range_specification = input;
        self
    }
    /// Consumes the builder and constructs a [`ParameterRange`](crate::types::ParameterRange).
    pub fn build(self) -> crate::types::ParameterRange {
        crate::types::ParameterRange {
            integer_parameter_range_specification: self.integer_parameter_range_specification,
            continuous_parameter_range_specification: self.continuous_parameter_range_specification,
            categorical_parameter_range_specification: self
                .categorical_parameter_range_specification,
        }
    }
}
