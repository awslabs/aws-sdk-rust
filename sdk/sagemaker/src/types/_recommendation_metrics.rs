// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metrics of recommendations.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecommendationMetrics {
    /// <p>Defines the cost per hour for the instance. </p>
    #[doc(hidden)]
    pub cost_per_hour: f32,
    /// <p>Defines the cost per inference for the instance .</p>
    #[doc(hidden)]
    pub cost_per_inference: f32,
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    #[doc(hidden)]
    pub max_invocations: i32,
    /// <p>The expected model latency at maximum invocation per minute for the instance.</p>
    #[doc(hidden)]
    pub model_latency: i32,
}
impl RecommendationMetrics {
    /// <p>Defines the cost per hour for the instance. </p>
    pub fn cost_per_hour(&self) -> f32 {
        self.cost_per_hour
    }
    /// <p>Defines the cost per inference for the instance .</p>
    pub fn cost_per_inference(&self) -> f32 {
        self.cost_per_inference
    }
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub fn max_invocations(&self) -> i32 {
        self.max_invocations
    }
    /// <p>The expected model latency at maximum invocation per minute for the instance.</p>
    pub fn model_latency(&self) -> i32 {
        self.model_latency
    }
}
impl RecommendationMetrics {
    /// Creates a new builder-style object to manufacture [`RecommendationMetrics`](crate::types::RecommendationMetrics).
    pub fn builder() -> crate::types::builders::RecommendationMetricsBuilder {
        crate::types::builders::RecommendationMetricsBuilder::default()
    }
}

/// A builder for [`RecommendationMetrics`](crate::types::RecommendationMetrics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecommendationMetricsBuilder {
    pub(crate) cost_per_hour: std::option::Option<f32>,
    pub(crate) cost_per_inference: std::option::Option<f32>,
    pub(crate) max_invocations: std::option::Option<i32>,
    pub(crate) model_latency: std::option::Option<i32>,
}
impl RecommendationMetricsBuilder {
    /// <p>Defines the cost per hour for the instance. </p>
    pub fn cost_per_hour(mut self, input: f32) -> Self {
        self.cost_per_hour = Some(input);
        self
    }
    /// <p>Defines the cost per hour for the instance. </p>
    pub fn set_cost_per_hour(mut self, input: std::option::Option<f32>) -> Self {
        self.cost_per_hour = input;
        self
    }
    /// <p>Defines the cost per inference for the instance .</p>
    pub fn cost_per_inference(mut self, input: f32) -> Self {
        self.cost_per_inference = Some(input);
        self
    }
    /// <p>Defines the cost per inference for the instance .</p>
    pub fn set_cost_per_inference(mut self, input: std::option::Option<f32>) -> Self {
        self.cost_per_inference = input;
        self
    }
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub fn max_invocations(mut self, input: i32) -> Self {
        self.max_invocations = Some(input);
        self
    }
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub fn set_max_invocations(mut self, input: std::option::Option<i32>) -> Self {
        self.max_invocations = input;
        self
    }
    /// <p>The expected model latency at maximum invocation per minute for the instance.</p>
    pub fn model_latency(mut self, input: i32) -> Self {
        self.model_latency = Some(input);
        self
    }
    /// <p>The expected model latency at maximum invocation per minute for the instance.</p>
    pub fn set_model_latency(mut self, input: std::option::Option<i32>) -> Self {
        self.model_latency = input;
        self
    }
    /// Consumes the builder and constructs a [`RecommendationMetrics`](crate::types::RecommendationMetrics).
    pub fn build(self) -> crate::types::RecommendationMetrics {
        crate::types::RecommendationMetrics {
            cost_per_hour: self.cost_per_hour.unwrap_or_default(),
            cost_per_inference: self.cost_per_inference.unwrap_or_default(),
            max_invocations: self.max_invocations.unwrap_or_default(),
            model_latency: self.model_latency.unwrap_or_default(),
        }
    }
}
