// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metrics of recommendations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendationMetrics {
    /// <p>Defines the cost per hour for the instance. </p>
    pub cost_per_hour: ::std::option::Option<f32>,
    /// <p>Defines the cost per inference for the instance .</p>
    pub cost_per_inference: ::std::option::Option<f32>,
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub max_invocations: ::std::option::Option<i32>,
    /// <p>The expected model latency at maximum invocation per minute for the instance.</p>
    pub model_latency: ::std::option::Option<i32>,
    /// <p>The expected CPU utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub cpu_utilization: ::std::option::Option<f32>,
    /// <p>The expected memory utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub memory_utilization: ::std::option::Option<f32>,
    /// <p>The time it takes to launch new compute resources for a serverless endpoint. The time can vary depending on the model size, how long it takes to download the model, and the start-up time of the container.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub model_setup_time: ::std::option::Option<i32>,
}
impl RecommendationMetrics {
    /// <p>Defines the cost per hour for the instance. </p>
    pub fn cost_per_hour(&self) -> ::std::option::Option<f32> {
        self.cost_per_hour
    }
    /// <p>Defines the cost per inference for the instance .</p>
    pub fn cost_per_inference(&self) -> ::std::option::Option<f32> {
        self.cost_per_inference
    }
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub fn max_invocations(&self) -> ::std::option::Option<i32> {
        self.max_invocations
    }
    /// <p>The expected model latency at maximum invocation per minute for the instance.</p>
    pub fn model_latency(&self) -> ::std::option::Option<i32> {
        self.model_latency
    }
    /// <p>The expected CPU utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn cpu_utilization(&self) -> ::std::option::Option<f32> {
        self.cpu_utilization
    }
    /// <p>The expected memory utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn memory_utilization(&self) -> ::std::option::Option<f32> {
        self.memory_utilization
    }
    /// <p>The time it takes to launch new compute resources for a serverless endpoint. The time can vary depending on the model size, how long it takes to download the model, and the start-up time of the container.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn model_setup_time(&self) -> ::std::option::Option<i32> {
        self.model_setup_time
    }
}
impl RecommendationMetrics {
    /// Creates a new builder-style object to manufacture [`RecommendationMetrics`](crate::types::RecommendationMetrics).
    pub fn builder() -> crate::types::builders::RecommendationMetricsBuilder {
        crate::types::builders::RecommendationMetricsBuilder::default()
    }
}

/// A builder for [`RecommendationMetrics`](crate::types::RecommendationMetrics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendationMetricsBuilder {
    pub(crate) cost_per_hour: ::std::option::Option<f32>,
    pub(crate) cost_per_inference: ::std::option::Option<f32>,
    pub(crate) max_invocations: ::std::option::Option<i32>,
    pub(crate) model_latency: ::std::option::Option<i32>,
    pub(crate) cpu_utilization: ::std::option::Option<f32>,
    pub(crate) memory_utilization: ::std::option::Option<f32>,
    pub(crate) model_setup_time: ::std::option::Option<i32>,
}
impl RecommendationMetricsBuilder {
    /// <p>Defines the cost per hour for the instance. </p>
    /// This field is required.
    pub fn cost_per_hour(mut self, input: f32) -> Self {
        self.cost_per_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the cost per hour for the instance. </p>
    pub fn set_cost_per_hour(mut self, input: ::std::option::Option<f32>) -> Self {
        self.cost_per_hour = input;
        self
    }
    /// <p>Defines the cost per hour for the instance. </p>
    pub fn get_cost_per_hour(&self) -> &::std::option::Option<f32> {
        &self.cost_per_hour
    }
    /// <p>Defines the cost per inference for the instance .</p>
    /// This field is required.
    pub fn cost_per_inference(mut self, input: f32) -> Self {
        self.cost_per_inference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the cost per inference for the instance .</p>
    pub fn set_cost_per_inference(mut self, input: ::std::option::Option<f32>) -> Self {
        self.cost_per_inference = input;
        self
    }
    /// <p>Defines the cost per inference for the instance .</p>
    pub fn get_cost_per_inference(&self) -> &::std::option::Option<f32> {
        &self.cost_per_inference
    }
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    /// This field is required.
    pub fn max_invocations(mut self, input: i32) -> Self {
        self.max_invocations = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub fn set_max_invocations(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_invocations = input;
        self
    }
    /// <p>The expected maximum number of requests per minute for the instance.</p>
    pub fn get_max_invocations(&self) -> &::std::option::Option<i32> {
        &self.max_invocations
    }
    /// <p>The expected model latency at maximum invocation per minute for the instance.</p>
    /// This field is required.
    pub fn model_latency(mut self, input: i32) -> Self {
        self.model_latency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected model latency at maximum invocation per minute for the instance.</p>
    pub fn set_model_latency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.model_latency = input;
        self
    }
    /// <p>The expected model latency at maximum invocation per minute for the instance.</p>
    pub fn get_model_latency(&self) -> &::std::option::Option<i32> {
        &self.model_latency
    }
    /// <p>The expected CPU utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn cpu_utilization(mut self, input: f32) -> Self {
        self.cpu_utilization = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected CPU utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn set_cpu_utilization(mut self, input: ::std::option::Option<f32>) -> Self {
        self.cpu_utilization = input;
        self
    }
    /// <p>The expected CPU utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn get_cpu_utilization(&self) -> &::std::option::Option<f32> {
        &self.cpu_utilization
    }
    /// <p>The expected memory utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn memory_utilization(mut self, input: f32) -> Self {
        self.memory_utilization = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected memory utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn set_memory_utilization(mut self, input: ::std::option::Option<f32>) -> Self {
        self.memory_utilization = input;
        self
    }
    /// <p>The expected memory utilization at maximum invocations per minute for the instance.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn get_memory_utilization(&self) -> &::std::option::Option<f32> {
        &self.memory_utilization
    }
    /// <p>The time it takes to launch new compute resources for a serverless endpoint. The time can vary depending on the model size, how long it takes to download the model, and the start-up time of the container.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn model_setup_time(mut self, input: i32) -> Self {
        self.model_setup_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time it takes to launch new compute resources for a serverless endpoint. The time can vary depending on the model size, how long it takes to download the model, and the start-up time of the container.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn set_model_setup_time(mut self, input: ::std::option::Option<i32>) -> Self {
        self.model_setup_time = input;
        self
    }
    /// <p>The time it takes to launch new compute resources for a serverless endpoint. The time can vary depending on the model size, how long it takes to download the model, and the start-up time of the container.</p>
    /// <p> <code>NaN</code> indicates that the value is not available.</p>
    pub fn get_model_setup_time(&self) -> &::std::option::Option<i32> {
        &self.model_setup_time
    }
    /// Consumes the builder and constructs a [`RecommendationMetrics`](crate::types::RecommendationMetrics).
    pub fn build(self) -> crate::types::RecommendationMetrics {
        crate::types::RecommendationMetrics {
            cost_per_hour: self.cost_per_hour,
            cost_per_inference: self.cost_per_inference,
            max_invocations: self.max_invocations,
            model_latency: self.model_latency,
            cpu_utilization: self.cpu_utilization,
            memory_utilization: self.memory_utilization,
            model_setup_time: self.model_setup_time,
        }
    }
}
