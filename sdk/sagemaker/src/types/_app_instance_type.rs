// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AppInstanceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let appinstancetype = unimplemented!();
/// match appinstancetype {
///     AppInstanceType::MlC512Xlarge => { /* ... */ },
///     AppInstanceType::MlC518Xlarge => { /* ... */ },
///     AppInstanceType::MlC524Xlarge => { /* ... */ },
///     AppInstanceType::MlC52Xlarge => { /* ... */ },
///     AppInstanceType::MlC54Xlarge => { /* ... */ },
///     AppInstanceType::MlC59Xlarge => { /* ... */ },
///     AppInstanceType::MlC5Large => { /* ... */ },
///     AppInstanceType::MlC5Xlarge => { /* ... */ },
///     AppInstanceType::MlG4Dn12Xlarge => { /* ... */ },
///     AppInstanceType::MlG4Dn16Xlarge => { /* ... */ },
///     AppInstanceType::MlG4Dn2Xlarge => { /* ... */ },
///     AppInstanceType::MlG4Dn4Xlarge => { /* ... */ },
///     AppInstanceType::MlG4Dn8Xlarge => { /* ... */ },
///     AppInstanceType::MlG4DnXlarge => { /* ... */ },
///     AppInstanceType::MlG512Xlarge => { /* ... */ },
///     AppInstanceType::MlG516Xlarge => { /* ... */ },
///     AppInstanceType::MlG524Xlarge => { /* ... */ },
///     AppInstanceType::MlG52Xlarge => { /* ... */ },
///     AppInstanceType::MlG548Xlarge => { /* ... */ },
///     AppInstanceType::MlG54Xlarge => { /* ... */ },
///     AppInstanceType::MlG58Xlarge => { /* ... */ },
///     AppInstanceType::MlG5Xlarge => { /* ... */ },
///     AppInstanceType::MlM512Xlarge => { /* ... */ },
///     AppInstanceType::MlM516Xlarge => { /* ... */ },
///     AppInstanceType::MlM524Xlarge => { /* ... */ },
///     AppInstanceType::MlM52Xlarge => { /* ... */ },
///     AppInstanceType::MlM54Xlarge => { /* ... */ },
///     AppInstanceType::MlM58Xlarge => { /* ... */ },
///     AppInstanceType::MlM5Large => { /* ... */ },
///     AppInstanceType::MlM5Xlarge => { /* ... */ },
///     AppInstanceType::MlM5D12Xlarge => { /* ... */ },
///     AppInstanceType::MlM5D16Xlarge => { /* ... */ },
///     AppInstanceType::MlM5D24Xlarge => { /* ... */ },
///     AppInstanceType::MlM5D2Xlarge => { /* ... */ },
///     AppInstanceType::MlM5D4Xlarge => { /* ... */ },
///     AppInstanceType::MlM5D8Xlarge => { /* ... */ },
///     AppInstanceType::MlM5DLarge => { /* ... */ },
///     AppInstanceType::MlM5DXlarge => { /* ... */ },
///     AppInstanceType::MlP316Xlarge => { /* ... */ },
///     AppInstanceType::MlP32Xlarge => { /* ... */ },
///     AppInstanceType::MlP38Xlarge => { /* ... */ },
///     AppInstanceType::MlP3Dn24Xlarge => { /* ... */ },
///     AppInstanceType::MlR512Xlarge => { /* ... */ },
///     AppInstanceType::MlR516Xlarge => { /* ... */ },
///     AppInstanceType::MlR524Xlarge => { /* ... */ },
///     AppInstanceType::MlR52Xlarge => { /* ... */ },
///     AppInstanceType::MlR54Xlarge => { /* ... */ },
///     AppInstanceType::MlR58Xlarge => { /* ... */ },
///     AppInstanceType::MlR5Large => { /* ... */ },
///     AppInstanceType::MlR5Xlarge => { /* ... */ },
///     AppInstanceType::MlT32Xlarge => { /* ... */ },
///     AppInstanceType::MlT3Large => { /* ... */ },
///     AppInstanceType::MlT3Medium => { /* ... */ },
///     AppInstanceType::MlT3Micro => { /* ... */ },
///     AppInstanceType::MlT3Small => { /* ... */ },
///     AppInstanceType::MlT3Xlarge => { /* ... */ },
///     AppInstanceType::System => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `appinstancetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AppInstanceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AppInstanceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AppInstanceType::NewFeature` is defined.
/// Specifically, when `appinstancetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AppInstanceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AppInstanceType {
    #[allow(missing_docs)] // documentation missing in model
    MlC512Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC518Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC524Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC52Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC54Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC59Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC5Large,
    #[allow(missing_docs)] // documentation missing in model
    MlC5Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG4Dn12Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG4Dn16Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG4Dn2Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG4Dn4Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG4Dn8Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG4DnXlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG512Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG516Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG524Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG52Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG548Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG54Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG58Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG5Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM512Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM516Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM524Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM52Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM54Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM58Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5Large,
    #[allow(missing_docs)] // documentation missing in model
    MlM5Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5D12Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5D16Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5D24Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5D2Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5D4Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5D8Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5DLarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5DXlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlP316Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlP32Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlP38Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlP3Dn24Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlR512Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlR516Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlR524Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlR52Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlR54Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlR58Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlR5Large,
    #[allow(missing_docs)] // documentation missing in model
    MlR5Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlT32Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlT3Large,
    #[allow(missing_docs)] // documentation missing in model
    MlT3Medium,
    #[allow(missing_docs)] // documentation missing in model
    MlT3Micro,
    #[allow(missing_docs)] // documentation missing in model
    MlT3Small,
    #[allow(missing_docs)] // documentation missing in model
    MlT3Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    System,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AppInstanceType {
    fn from(s: &str) -> Self {
        match s {
            "ml.c5.12xlarge" => AppInstanceType::MlC512Xlarge,
            "ml.c5.18xlarge" => AppInstanceType::MlC518Xlarge,
            "ml.c5.24xlarge" => AppInstanceType::MlC524Xlarge,
            "ml.c5.2xlarge" => AppInstanceType::MlC52Xlarge,
            "ml.c5.4xlarge" => AppInstanceType::MlC54Xlarge,
            "ml.c5.9xlarge" => AppInstanceType::MlC59Xlarge,
            "ml.c5.large" => AppInstanceType::MlC5Large,
            "ml.c5.xlarge" => AppInstanceType::MlC5Xlarge,
            "ml.g4dn.12xlarge" => AppInstanceType::MlG4Dn12Xlarge,
            "ml.g4dn.16xlarge" => AppInstanceType::MlG4Dn16Xlarge,
            "ml.g4dn.2xlarge" => AppInstanceType::MlG4Dn2Xlarge,
            "ml.g4dn.4xlarge" => AppInstanceType::MlG4Dn4Xlarge,
            "ml.g4dn.8xlarge" => AppInstanceType::MlG4Dn8Xlarge,
            "ml.g4dn.xlarge" => AppInstanceType::MlG4DnXlarge,
            "ml.g5.12xlarge" => AppInstanceType::MlG512Xlarge,
            "ml.g5.16xlarge" => AppInstanceType::MlG516Xlarge,
            "ml.g5.24xlarge" => AppInstanceType::MlG524Xlarge,
            "ml.g5.2xlarge" => AppInstanceType::MlG52Xlarge,
            "ml.g5.48xlarge" => AppInstanceType::MlG548Xlarge,
            "ml.g5.4xlarge" => AppInstanceType::MlG54Xlarge,
            "ml.g5.8xlarge" => AppInstanceType::MlG58Xlarge,
            "ml.g5.xlarge" => AppInstanceType::MlG5Xlarge,
            "ml.m5.12xlarge" => AppInstanceType::MlM512Xlarge,
            "ml.m5.16xlarge" => AppInstanceType::MlM516Xlarge,
            "ml.m5.24xlarge" => AppInstanceType::MlM524Xlarge,
            "ml.m5.2xlarge" => AppInstanceType::MlM52Xlarge,
            "ml.m5.4xlarge" => AppInstanceType::MlM54Xlarge,
            "ml.m5.8xlarge" => AppInstanceType::MlM58Xlarge,
            "ml.m5.large" => AppInstanceType::MlM5Large,
            "ml.m5.xlarge" => AppInstanceType::MlM5Xlarge,
            "ml.m5d.12xlarge" => AppInstanceType::MlM5D12Xlarge,
            "ml.m5d.16xlarge" => AppInstanceType::MlM5D16Xlarge,
            "ml.m5d.24xlarge" => AppInstanceType::MlM5D24Xlarge,
            "ml.m5d.2xlarge" => AppInstanceType::MlM5D2Xlarge,
            "ml.m5d.4xlarge" => AppInstanceType::MlM5D4Xlarge,
            "ml.m5d.8xlarge" => AppInstanceType::MlM5D8Xlarge,
            "ml.m5d.large" => AppInstanceType::MlM5DLarge,
            "ml.m5d.xlarge" => AppInstanceType::MlM5DXlarge,
            "ml.p3.16xlarge" => AppInstanceType::MlP316Xlarge,
            "ml.p3.2xlarge" => AppInstanceType::MlP32Xlarge,
            "ml.p3.8xlarge" => AppInstanceType::MlP38Xlarge,
            "ml.p3dn.24xlarge" => AppInstanceType::MlP3Dn24Xlarge,
            "ml.r5.12xlarge" => AppInstanceType::MlR512Xlarge,
            "ml.r5.16xlarge" => AppInstanceType::MlR516Xlarge,
            "ml.r5.24xlarge" => AppInstanceType::MlR524Xlarge,
            "ml.r5.2xlarge" => AppInstanceType::MlR52Xlarge,
            "ml.r5.4xlarge" => AppInstanceType::MlR54Xlarge,
            "ml.r5.8xlarge" => AppInstanceType::MlR58Xlarge,
            "ml.r5.large" => AppInstanceType::MlR5Large,
            "ml.r5.xlarge" => AppInstanceType::MlR5Xlarge,
            "ml.t3.2xlarge" => AppInstanceType::MlT32Xlarge,
            "ml.t3.large" => AppInstanceType::MlT3Large,
            "ml.t3.medium" => AppInstanceType::MlT3Medium,
            "ml.t3.micro" => AppInstanceType::MlT3Micro,
            "ml.t3.small" => AppInstanceType::MlT3Small,
            "ml.t3.xlarge" => AppInstanceType::MlT3Xlarge,
            "system" => AppInstanceType::System,
            other => {
                AppInstanceType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for AppInstanceType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AppInstanceType::from(s))
    }
}
impl AppInstanceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AppInstanceType::MlC512Xlarge => "ml.c5.12xlarge",
            AppInstanceType::MlC518Xlarge => "ml.c5.18xlarge",
            AppInstanceType::MlC524Xlarge => "ml.c5.24xlarge",
            AppInstanceType::MlC52Xlarge => "ml.c5.2xlarge",
            AppInstanceType::MlC54Xlarge => "ml.c5.4xlarge",
            AppInstanceType::MlC59Xlarge => "ml.c5.9xlarge",
            AppInstanceType::MlC5Large => "ml.c5.large",
            AppInstanceType::MlC5Xlarge => "ml.c5.xlarge",
            AppInstanceType::MlG4Dn12Xlarge => "ml.g4dn.12xlarge",
            AppInstanceType::MlG4Dn16Xlarge => "ml.g4dn.16xlarge",
            AppInstanceType::MlG4Dn2Xlarge => "ml.g4dn.2xlarge",
            AppInstanceType::MlG4Dn4Xlarge => "ml.g4dn.4xlarge",
            AppInstanceType::MlG4Dn8Xlarge => "ml.g4dn.8xlarge",
            AppInstanceType::MlG4DnXlarge => "ml.g4dn.xlarge",
            AppInstanceType::MlG512Xlarge => "ml.g5.12xlarge",
            AppInstanceType::MlG516Xlarge => "ml.g5.16xlarge",
            AppInstanceType::MlG524Xlarge => "ml.g5.24xlarge",
            AppInstanceType::MlG52Xlarge => "ml.g5.2xlarge",
            AppInstanceType::MlG548Xlarge => "ml.g5.48xlarge",
            AppInstanceType::MlG54Xlarge => "ml.g5.4xlarge",
            AppInstanceType::MlG58Xlarge => "ml.g5.8xlarge",
            AppInstanceType::MlG5Xlarge => "ml.g5.xlarge",
            AppInstanceType::MlM512Xlarge => "ml.m5.12xlarge",
            AppInstanceType::MlM516Xlarge => "ml.m5.16xlarge",
            AppInstanceType::MlM524Xlarge => "ml.m5.24xlarge",
            AppInstanceType::MlM52Xlarge => "ml.m5.2xlarge",
            AppInstanceType::MlM54Xlarge => "ml.m5.4xlarge",
            AppInstanceType::MlM58Xlarge => "ml.m5.8xlarge",
            AppInstanceType::MlM5Large => "ml.m5.large",
            AppInstanceType::MlM5Xlarge => "ml.m5.xlarge",
            AppInstanceType::MlM5D12Xlarge => "ml.m5d.12xlarge",
            AppInstanceType::MlM5D16Xlarge => "ml.m5d.16xlarge",
            AppInstanceType::MlM5D24Xlarge => "ml.m5d.24xlarge",
            AppInstanceType::MlM5D2Xlarge => "ml.m5d.2xlarge",
            AppInstanceType::MlM5D4Xlarge => "ml.m5d.4xlarge",
            AppInstanceType::MlM5D8Xlarge => "ml.m5d.8xlarge",
            AppInstanceType::MlM5DLarge => "ml.m5d.large",
            AppInstanceType::MlM5DXlarge => "ml.m5d.xlarge",
            AppInstanceType::MlP316Xlarge => "ml.p3.16xlarge",
            AppInstanceType::MlP32Xlarge => "ml.p3.2xlarge",
            AppInstanceType::MlP38Xlarge => "ml.p3.8xlarge",
            AppInstanceType::MlP3Dn24Xlarge => "ml.p3dn.24xlarge",
            AppInstanceType::MlR512Xlarge => "ml.r5.12xlarge",
            AppInstanceType::MlR516Xlarge => "ml.r5.16xlarge",
            AppInstanceType::MlR524Xlarge => "ml.r5.24xlarge",
            AppInstanceType::MlR52Xlarge => "ml.r5.2xlarge",
            AppInstanceType::MlR54Xlarge => "ml.r5.4xlarge",
            AppInstanceType::MlR58Xlarge => "ml.r5.8xlarge",
            AppInstanceType::MlR5Large => "ml.r5.large",
            AppInstanceType::MlR5Xlarge => "ml.r5.xlarge",
            AppInstanceType::MlT32Xlarge => "ml.t3.2xlarge",
            AppInstanceType::MlT3Large => "ml.t3.large",
            AppInstanceType::MlT3Medium => "ml.t3.medium",
            AppInstanceType::MlT3Micro => "ml.t3.micro",
            AppInstanceType::MlT3Small => "ml.t3.small",
            AppInstanceType::MlT3Xlarge => "ml.t3.xlarge",
            AppInstanceType::System => "system",
            AppInstanceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ml.c5.12xlarge",
            "ml.c5.18xlarge",
            "ml.c5.24xlarge",
            "ml.c5.2xlarge",
            "ml.c5.4xlarge",
            "ml.c5.9xlarge",
            "ml.c5.large",
            "ml.c5.xlarge",
            "ml.g4dn.12xlarge",
            "ml.g4dn.16xlarge",
            "ml.g4dn.2xlarge",
            "ml.g4dn.4xlarge",
            "ml.g4dn.8xlarge",
            "ml.g4dn.xlarge",
            "ml.g5.12xlarge",
            "ml.g5.16xlarge",
            "ml.g5.24xlarge",
            "ml.g5.2xlarge",
            "ml.g5.48xlarge",
            "ml.g5.4xlarge",
            "ml.g5.8xlarge",
            "ml.g5.xlarge",
            "ml.m5.12xlarge",
            "ml.m5.16xlarge",
            "ml.m5.24xlarge",
            "ml.m5.2xlarge",
            "ml.m5.4xlarge",
            "ml.m5.8xlarge",
            "ml.m5.large",
            "ml.m5.xlarge",
            "ml.m5d.12xlarge",
            "ml.m5d.16xlarge",
            "ml.m5d.24xlarge",
            "ml.m5d.2xlarge",
            "ml.m5d.4xlarge",
            "ml.m5d.8xlarge",
            "ml.m5d.large",
            "ml.m5d.xlarge",
            "ml.p3.16xlarge",
            "ml.p3.2xlarge",
            "ml.p3.8xlarge",
            "ml.p3dn.24xlarge",
            "ml.r5.12xlarge",
            "ml.r5.16xlarge",
            "ml.r5.24xlarge",
            "ml.r5.2xlarge",
            "ml.r5.4xlarge",
            "ml.r5.8xlarge",
            "ml.r5.large",
            "ml.r5.xlarge",
            "ml.t3.2xlarge",
            "ml.t3.large",
            "ml.t3.medium",
            "ml.t3.micro",
            "ml.t3.small",
            "ml.t3.xlarge",
            "system",
        ]
    }
}
impl AsRef<str> for AppInstanceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
