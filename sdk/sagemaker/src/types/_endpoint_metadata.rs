// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata of the endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EndpointMetadata {
    /// <p>The name of the endpoint.</p>
    #[doc(hidden)]
    pub endpoint_name: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint configuration.</p>
    #[doc(hidden)]
    pub endpoint_config_name: std::option::Option<std::string::String>,
    /// <p> The status of the endpoint. For possible values of the status of an endpoint, see <code>EndpointSummary$EndpointStatus</code>. </p>
    #[doc(hidden)]
    pub endpoint_status: std::option::Option<crate::types::EndpointStatus>,
    /// <p> If the status of the endpoint is <code>Failed</code>, or the status is <code>InService</code> but update operation fails, this provides the reason why it failed. </p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
}
impl EndpointMetadata {
    /// <p>The name of the endpoint.</p>
    pub fn endpoint_name(&self) -> std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>The name of the endpoint configuration.</p>
    pub fn endpoint_config_name(&self) -> std::option::Option<&str> {
        self.endpoint_config_name.as_deref()
    }
    /// <p> The status of the endpoint. For possible values of the status of an endpoint, see <code>EndpointSummary$EndpointStatus</code>. </p>
    pub fn endpoint_status(&self) -> std::option::Option<&crate::types::EndpointStatus> {
        self.endpoint_status.as_ref()
    }
    /// <p> If the status of the endpoint is <code>Failed</code>, or the status is <code>InService</code> but update operation fails, this provides the reason why it failed. </p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl EndpointMetadata {
    /// Creates a new builder-style object to manufacture [`EndpointMetadata`](crate::types::EndpointMetadata).
    pub fn builder() -> crate::types::builders::EndpointMetadataBuilder {
        crate::types::builders::EndpointMetadataBuilder::default()
    }
}

/// A builder for [`EndpointMetadata`](crate::types::EndpointMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EndpointMetadataBuilder {
    pub(crate) endpoint_name: std::option::Option<std::string::String>,
    pub(crate) endpoint_config_name: std::option::Option<std::string::String>,
    pub(crate) endpoint_status: std::option::Option<crate::types::EndpointStatus>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
}
impl EndpointMetadataBuilder {
    /// <p>The name of the endpoint.</p>
    pub fn endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_name = Some(input.into());
        self
    }
    /// <p>The name of the endpoint.</p>
    pub fn set_endpoint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name of the endpoint configuration.</p>
    pub fn endpoint_config_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_config_name = Some(input.into());
        self
    }
    /// <p>The name of the endpoint configuration.</p>
    pub fn set_endpoint_config_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.endpoint_config_name = input;
        self
    }
    /// <p> The status of the endpoint. For possible values of the status of an endpoint, see <code>EndpointSummary$EndpointStatus</code>. </p>
    pub fn endpoint_status(mut self, input: crate::types::EndpointStatus) -> Self {
        self.endpoint_status = Some(input);
        self
    }
    /// <p> The status of the endpoint. For possible values of the status of an endpoint, see <code>EndpointSummary$EndpointStatus</code>. </p>
    pub fn set_endpoint_status(
        mut self,
        input: std::option::Option<crate::types::EndpointStatus>,
    ) -> Self {
        self.endpoint_status = input;
        self
    }
    /// <p> If the status of the endpoint is <code>Failed</code>, or the status is <code>InService</code> but update operation fails, this provides the reason why it failed. </p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p> If the status of the endpoint is <code>Failed</code>, or the status is <code>InService</code> but update operation fails, this provides the reason why it failed. </p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`EndpointMetadata`](crate::types::EndpointMetadata).
    pub fn build(self) -> crate::types::EndpointMetadata {
        crate::types::EndpointMetadata {
            endpoint_name: self.endpoint_name,
            endpoint_config_name: self.endpoint_config_name,
            endpoint_status: self.endpoint_status,
            failure_reason: self.failure_reason,
        }
    }
}
