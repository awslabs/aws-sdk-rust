// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for Dataset Definition inputs. The Dataset Definition input must specify exactly one of either <code>AthenaDatasetDefinition</code> or <code>RedshiftDatasetDefinition</code> types.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatasetDefinition {
    /// <p>Configuration for Athena Dataset Definition input.</p>
    #[doc(hidden)]
    pub athena_dataset_definition: std::option::Option<crate::types::AthenaDatasetDefinition>,
    /// <p>Configuration for Redshift Dataset Definition input.</p>
    #[doc(hidden)]
    pub redshift_dataset_definition: std::option::Option<crate::types::RedshiftDatasetDefinition>,
    /// <p>The local path where you want Amazon SageMaker to download the Dataset Definition inputs to run a processing job. <code>LocalPath</code> is an absolute path to the input data. This is a required parameter when <code>AppManaged</code> is <code>False</code> (default).</p>
    #[doc(hidden)]
    pub local_path: std::option::Option<std::string::String>,
    /// <p>Whether the generated dataset is <code>FullyReplicated</code> or <code>ShardedByS3Key</code> (default).</p>
    #[doc(hidden)]
    pub data_distribution_type: std::option::Option<crate::types::DataDistributionType>,
    /// <p>Whether to use <code>File</code> or <code>Pipe</code> input mode. In <code>File</code> (default) mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In <code>Pipe</code> mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.</p>
    #[doc(hidden)]
    pub input_mode: std::option::Option<crate::types::InputMode>,
}
impl DatasetDefinition {
    /// <p>Configuration for Athena Dataset Definition input.</p>
    pub fn athena_dataset_definition(
        &self,
    ) -> std::option::Option<&crate::types::AthenaDatasetDefinition> {
        self.athena_dataset_definition.as_ref()
    }
    /// <p>Configuration for Redshift Dataset Definition input.</p>
    pub fn redshift_dataset_definition(
        &self,
    ) -> std::option::Option<&crate::types::RedshiftDatasetDefinition> {
        self.redshift_dataset_definition.as_ref()
    }
    /// <p>The local path where you want Amazon SageMaker to download the Dataset Definition inputs to run a processing job. <code>LocalPath</code> is an absolute path to the input data. This is a required parameter when <code>AppManaged</code> is <code>False</code> (default).</p>
    pub fn local_path(&self) -> std::option::Option<&str> {
        self.local_path.as_deref()
    }
    /// <p>Whether the generated dataset is <code>FullyReplicated</code> or <code>ShardedByS3Key</code> (default).</p>
    pub fn data_distribution_type(
        &self,
    ) -> std::option::Option<&crate::types::DataDistributionType> {
        self.data_distribution_type.as_ref()
    }
    /// <p>Whether to use <code>File</code> or <code>Pipe</code> input mode. In <code>File</code> (default) mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In <code>Pipe</code> mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.</p>
    pub fn input_mode(&self) -> std::option::Option<&crate::types::InputMode> {
        self.input_mode.as_ref()
    }
}
impl DatasetDefinition {
    /// Creates a new builder-style object to manufacture [`DatasetDefinition`](crate::types::DatasetDefinition).
    pub fn builder() -> crate::types::builders::DatasetDefinitionBuilder {
        crate::types::builders::DatasetDefinitionBuilder::default()
    }
}

/// A builder for [`DatasetDefinition`](crate::types::DatasetDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatasetDefinitionBuilder {
    pub(crate) athena_dataset_definition:
        std::option::Option<crate::types::AthenaDatasetDefinition>,
    pub(crate) redshift_dataset_definition:
        std::option::Option<crate::types::RedshiftDatasetDefinition>,
    pub(crate) local_path: std::option::Option<std::string::String>,
    pub(crate) data_distribution_type: std::option::Option<crate::types::DataDistributionType>,
    pub(crate) input_mode: std::option::Option<crate::types::InputMode>,
}
impl DatasetDefinitionBuilder {
    /// <p>Configuration for Athena Dataset Definition input.</p>
    pub fn athena_dataset_definition(
        mut self,
        input: crate::types::AthenaDatasetDefinition,
    ) -> Self {
        self.athena_dataset_definition = Some(input);
        self
    }
    /// <p>Configuration for Athena Dataset Definition input.</p>
    pub fn set_athena_dataset_definition(
        mut self,
        input: std::option::Option<crate::types::AthenaDatasetDefinition>,
    ) -> Self {
        self.athena_dataset_definition = input;
        self
    }
    /// <p>Configuration for Redshift Dataset Definition input.</p>
    pub fn redshift_dataset_definition(
        mut self,
        input: crate::types::RedshiftDatasetDefinition,
    ) -> Self {
        self.redshift_dataset_definition = Some(input);
        self
    }
    /// <p>Configuration for Redshift Dataset Definition input.</p>
    pub fn set_redshift_dataset_definition(
        mut self,
        input: std::option::Option<crate::types::RedshiftDatasetDefinition>,
    ) -> Self {
        self.redshift_dataset_definition = input;
        self
    }
    /// <p>The local path where you want Amazon SageMaker to download the Dataset Definition inputs to run a processing job. <code>LocalPath</code> is an absolute path to the input data. This is a required parameter when <code>AppManaged</code> is <code>False</code> (default).</p>
    pub fn local_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.local_path = Some(input.into());
        self
    }
    /// <p>The local path where you want Amazon SageMaker to download the Dataset Definition inputs to run a processing job. <code>LocalPath</code> is an absolute path to the input data. This is a required parameter when <code>AppManaged</code> is <code>False</code> (default).</p>
    pub fn set_local_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.local_path = input;
        self
    }
    /// <p>Whether the generated dataset is <code>FullyReplicated</code> or <code>ShardedByS3Key</code> (default).</p>
    pub fn data_distribution_type(mut self, input: crate::types::DataDistributionType) -> Self {
        self.data_distribution_type = Some(input);
        self
    }
    /// <p>Whether the generated dataset is <code>FullyReplicated</code> or <code>ShardedByS3Key</code> (default).</p>
    pub fn set_data_distribution_type(
        mut self,
        input: std::option::Option<crate::types::DataDistributionType>,
    ) -> Self {
        self.data_distribution_type = input;
        self
    }
    /// <p>Whether to use <code>File</code> or <code>Pipe</code> input mode. In <code>File</code> (default) mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In <code>Pipe</code> mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.</p>
    pub fn input_mode(mut self, input: crate::types::InputMode) -> Self {
        self.input_mode = Some(input);
        self
    }
    /// <p>Whether to use <code>File</code> or <code>Pipe</code> input mode. In <code>File</code> (default) mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In <code>Pipe</code> mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.</p>
    pub fn set_input_mode(mut self, input: std::option::Option<crate::types::InputMode>) -> Self {
        self.input_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`DatasetDefinition`](crate::types::DatasetDefinition).
    pub fn build(self) -> crate::types::DatasetDefinition {
        crate::types::DatasetDefinition {
            athena_dataset_definition: self.athena_dataset_definition,
            redshift_dataset_definition: self.redshift_dataset_definition,
            local_path: self.local_path,
            data_distribution_type: self.data_distribution_type,
            input_mode: self.input_mode,
        }
    }
}
