// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A parameter used to configure the SageMaker Clarify explainer to treat text features as text so that explanations are provided for individual units of text. Required only for natural language processing (NLP) explainability. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClarifyTextConfig {
    /// <p>Specifies the language of the text features in <a href=" https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a> or <a href="https://en.wikipedia.org/wiki/ISO_639-3">ISO 639-3</a> code of a supported language. </p> <note>
    /// <p>For a mix of multiple languages, use code <code>'xx'</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub language: std::option::Option<crate::types::ClarifyTextLanguage>,
    /// <p>The unit of granularity for the analysis of text features. For example, if the unit is <code>'token'</code>, then each token (like a word in English) of the text is treated as a feature. SHAP values are computed for each unit/feature.</p>
    #[doc(hidden)]
    pub granularity: std::option::Option<crate::types::ClarifyTextGranularity>,
}
impl ClarifyTextConfig {
    /// <p>Specifies the language of the text features in <a href=" https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a> or <a href="https://en.wikipedia.org/wiki/ISO_639-3">ISO 639-3</a> code of a supported language. </p> <note>
    /// <p>For a mix of multiple languages, use code <code>'xx'</code>.</p>
    /// </note>
    pub fn language(&self) -> std::option::Option<&crate::types::ClarifyTextLanguage> {
        self.language.as_ref()
    }
    /// <p>The unit of granularity for the analysis of text features. For example, if the unit is <code>'token'</code>, then each token (like a word in English) of the text is treated as a feature. SHAP values are computed for each unit/feature.</p>
    pub fn granularity(&self) -> std::option::Option<&crate::types::ClarifyTextGranularity> {
        self.granularity.as_ref()
    }
}
impl ClarifyTextConfig {
    /// Creates a new builder-style object to manufacture [`ClarifyTextConfig`](crate::types::ClarifyTextConfig).
    pub fn builder() -> crate::types::builders::ClarifyTextConfigBuilder {
        crate::types::builders::ClarifyTextConfigBuilder::default()
    }
}

/// A builder for [`ClarifyTextConfig`](crate::types::ClarifyTextConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClarifyTextConfigBuilder {
    pub(crate) language: std::option::Option<crate::types::ClarifyTextLanguage>,
    pub(crate) granularity: std::option::Option<crate::types::ClarifyTextGranularity>,
}
impl ClarifyTextConfigBuilder {
    /// <p>Specifies the language of the text features in <a href=" https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a> or <a href="https://en.wikipedia.org/wiki/ISO_639-3">ISO 639-3</a> code of a supported language. </p> <note>
    /// <p>For a mix of multiple languages, use code <code>'xx'</code>.</p>
    /// </note>
    pub fn language(mut self, input: crate::types::ClarifyTextLanguage) -> Self {
        self.language = Some(input);
        self
    }
    /// <p>Specifies the language of the text features in <a href=" https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a> or <a href="https://en.wikipedia.org/wiki/ISO_639-3">ISO 639-3</a> code of a supported language. </p> <note>
    /// <p>For a mix of multiple languages, use code <code>'xx'</code>.</p>
    /// </note>
    pub fn set_language(
        mut self,
        input: std::option::Option<crate::types::ClarifyTextLanguage>,
    ) -> Self {
        self.language = input;
        self
    }
    /// <p>The unit of granularity for the analysis of text features. For example, if the unit is <code>'token'</code>, then each token (like a word in English) of the text is treated as a feature. SHAP values are computed for each unit/feature.</p>
    pub fn granularity(mut self, input: crate::types::ClarifyTextGranularity) -> Self {
        self.granularity = Some(input);
        self
    }
    /// <p>The unit of granularity for the analysis of text features. For example, if the unit is <code>'token'</code>, then each token (like a word in English) of the text is treated as a feature. SHAP values are computed for each unit/feature.</p>
    pub fn set_granularity(
        mut self,
        input: std::option::Option<crate::types::ClarifyTextGranularity>,
    ) -> Self {
        self.granularity = input;
        self
    }
    /// Consumes the builder and constructs a [`ClarifyTextConfig`](crate::types::ClarifyTextConfig).
    pub fn build(self) -> crate::types::ClarifyTextConfig {
        crate::types::ClarifyTextConfig {
            language: self.language,
            granularity: self.granularity,
        }
    }
}
