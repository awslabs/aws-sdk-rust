// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the output location for managed spot training checkpoint data. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CheckpointConfig {
    /// <p>Identifies the S3 path where you want SageMaker to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    #[doc(hidden)]
    pub s3_uri: std::option::Option<std::string::String>,
    /// <p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/ml/checkpoints/</code>. </p>
    #[doc(hidden)]
    pub local_path: std::option::Option<std::string::String>,
}
impl CheckpointConfig {
    /// <p>Identifies the S3 path where you want SageMaker to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub fn s3_uri(&self) -> std::option::Option<&str> {
        self.s3_uri.as_deref()
    }
    /// <p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/ml/checkpoints/</code>. </p>
    pub fn local_path(&self) -> std::option::Option<&str> {
        self.local_path.as_deref()
    }
}
impl CheckpointConfig {
    /// Creates a new builder-style object to manufacture [`CheckpointConfig`](crate::types::CheckpointConfig).
    pub fn builder() -> crate::types::builders::CheckpointConfigBuilder {
        crate::types::builders::CheckpointConfigBuilder::default()
    }
}

/// A builder for [`CheckpointConfig`](crate::types::CheckpointConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CheckpointConfigBuilder {
    pub(crate) s3_uri: std::option::Option<std::string::String>,
    pub(crate) local_path: std::option::Option<std::string::String>,
}
impl CheckpointConfigBuilder {
    /// <p>Identifies the S3 path where you want SageMaker to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub fn s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_uri = Some(input.into());
        self
    }
    /// <p>Identifies the S3 path where you want SageMaker to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub fn set_s3_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/ml/checkpoints/</code>. </p>
    pub fn local_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.local_path = Some(input.into());
        self
    }
    /// <p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/ml/checkpoints/</code>. </p>
    pub fn set_local_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.local_path = input;
        self
    }
    /// Consumes the builder and constructs a [`CheckpointConfig`](crate::types::CheckpointConfig).
    pub fn build(self) -> crate::types::CheckpointConfig {
        crate::types::CheckpointConfig {
            s3_uri: self.s3_uri,
            local_path: self.local_path,
        }
    }
}
