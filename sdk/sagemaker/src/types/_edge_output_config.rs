// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EdgeOutputConfig {
    /// <p>The Amazon Simple Storage (S3) bucker URI.</p>
    pub s3_output_location: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The deployment type SageMaker Edge Manager will create. Currently only supports Amazon Web Services IoT Greengrass Version 2 components.</p>
    pub preset_deployment_type: ::std::option::Option<crate::types::EdgePresetDeploymentType>,
    /// <p>The configuration used to create deployment artifacts. Specify configuration options with a JSON string. The available configuration options for each type are:</p>
    /// <ul>
    /// <li> <p> <code>ComponentName</code> (optional) - Name of the GreenGrass V2 component. If not specified, the default name generated consists of "SagemakerEdgeManager" and the name of your SageMaker Edge Manager packaging job.</p> </li>
    /// <li> <p> <code>ComponentDescription</code> (optional) - Description of the component.</p> </li>
    /// <li> <p> <code>ComponentVersion</code> (optional) - The version of the component.</p> <note>
    /// <p>Amazon Web Services IoT Greengrass uses semantic versions for components. Semantic versions follow a<i> major.minor.patch</i> number system. For example, version 1.0.0 represents the first major release for a component. For more information, see the <a href="https://semver.org/">semantic version specification</a>.</p>
    /// </note> </li>
    /// <li> <p> <code>PlatformOS</code> (optional) - The name of the operating system for the platform. Supported platforms include Windows and Linux.</p> </li>
    /// <li> <p> <code>PlatformArchitecture</code> (optional) - The processor architecture for the platform. </p> <p>Supported architectures Windows include: Windows32_x86, Windows64_x64.</p> <p>Supported architectures for Linux include: Linux x86_64, Linux ARMV8.</p> </li>
    /// </ul>
    pub preset_deployment_config: ::std::option::Option<::std::string::String>,
}
impl EdgeOutputConfig {
    /// <p>The Amazon Simple Storage (S3) bucker URI.</p>
    pub fn s3_output_location(&self) -> ::std::option::Option<&str> {
        self.s3_output_location.as_deref()
    }
    /// <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The deployment type SageMaker Edge Manager will create. Currently only supports Amazon Web Services IoT Greengrass Version 2 components.</p>
    pub fn preset_deployment_type(&self) -> ::std::option::Option<&crate::types::EdgePresetDeploymentType> {
        self.preset_deployment_type.as_ref()
    }
    /// <p>The configuration used to create deployment artifacts. Specify configuration options with a JSON string. The available configuration options for each type are:</p>
    /// <ul>
    /// <li> <p> <code>ComponentName</code> (optional) - Name of the GreenGrass V2 component. If not specified, the default name generated consists of "SagemakerEdgeManager" and the name of your SageMaker Edge Manager packaging job.</p> </li>
    /// <li> <p> <code>ComponentDescription</code> (optional) - Description of the component.</p> </li>
    /// <li> <p> <code>ComponentVersion</code> (optional) - The version of the component.</p> <note>
    /// <p>Amazon Web Services IoT Greengrass uses semantic versions for components. Semantic versions follow a<i> major.minor.patch</i> number system. For example, version 1.0.0 represents the first major release for a component. For more information, see the <a href="https://semver.org/">semantic version specification</a>.</p>
    /// </note> </li>
    /// <li> <p> <code>PlatformOS</code> (optional) - The name of the operating system for the platform. Supported platforms include Windows and Linux.</p> </li>
    /// <li> <p> <code>PlatformArchitecture</code> (optional) - The processor architecture for the platform. </p> <p>Supported architectures Windows include: Windows32_x86, Windows64_x64.</p> <p>Supported architectures for Linux include: Linux x86_64, Linux ARMV8.</p> </li>
    /// </ul>
    pub fn preset_deployment_config(&self) -> ::std::option::Option<&str> {
        self.preset_deployment_config.as_deref()
    }
}
impl EdgeOutputConfig {
    /// Creates a new builder-style object to manufacture [`EdgeOutputConfig`](crate::types::EdgeOutputConfig).
    pub fn builder() -> crate::types::builders::EdgeOutputConfigBuilder {
        crate::types::builders::EdgeOutputConfigBuilder::default()
    }
}

/// A builder for [`EdgeOutputConfig`](crate::types::EdgeOutputConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EdgeOutputConfigBuilder {
    pub(crate) s3_output_location: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) preset_deployment_type: ::std::option::Option<crate::types::EdgePresetDeploymentType>,
    pub(crate) preset_deployment_config: ::std::option::Option<::std::string::String>,
}
impl EdgeOutputConfigBuilder {
    /// <p>The Amazon Simple Storage (S3) bucker URI.</p>
    /// This field is required.
    pub fn s3_output_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_output_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Simple Storage (S3) bucker URI.</p>
    pub fn set_s3_output_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_output_location = input;
        self
    }
    /// <p>The Amazon Simple Storage (S3) bucker URI.</p>
    pub fn get_s3_output_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_output_location
    }
    /// <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The deployment type SageMaker Edge Manager will create. Currently only supports Amazon Web Services IoT Greengrass Version 2 components.</p>
    pub fn preset_deployment_type(mut self, input: crate::types::EdgePresetDeploymentType) -> Self {
        self.preset_deployment_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment type SageMaker Edge Manager will create. Currently only supports Amazon Web Services IoT Greengrass Version 2 components.</p>
    pub fn set_preset_deployment_type(mut self, input: ::std::option::Option<crate::types::EdgePresetDeploymentType>) -> Self {
        self.preset_deployment_type = input;
        self
    }
    /// <p>The deployment type SageMaker Edge Manager will create. Currently only supports Amazon Web Services IoT Greengrass Version 2 components.</p>
    pub fn get_preset_deployment_type(&self) -> &::std::option::Option<crate::types::EdgePresetDeploymentType> {
        &self.preset_deployment_type
    }
    /// <p>The configuration used to create deployment artifacts. Specify configuration options with a JSON string. The available configuration options for each type are:</p>
    /// <ul>
    /// <li> <p> <code>ComponentName</code> (optional) - Name of the GreenGrass V2 component. If not specified, the default name generated consists of "SagemakerEdgeManager" and the name of your SageMaker Edge Manager packaging job.</p> </li>
    /// <li> <p> <code>ComponentDescription</code> (optional) - Description of the component.</p> </li>
    /// <li> <p> <code>ComponentVersion</code> (optional) - The version of the component.</p> <note>
    /// <p>Amazon Web Services IoT Greengrass uses semantic versions for components. Semantic versions follow a<i> major.minor.patch</i> number system. For example, version 1.0.0 represents the first major release for a component. For more information, see the <a href="https://semver.org/">semantic version specification</a>.</p>
    /// </note> </li>
    /// <li> <p> <code>PlatformOS</code> (optional) - The name of the operating system for the platform. Supported platforms include Windows and Linux.</p> </li>
    /// <li> <p> <code>PlatformArchitecture</code> (optional) - The processor architecture for the platform. </p> <p>Supported architectures Windows include: Windows32_x86, Windows64_x64.</p> <p>Supported architectures for Linux include: Linux x86_64, Linux ARMV8.</p> </li>
    /// </ul>
    pub fn preset_deployment_config(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preset_deployment_config = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The configuration used to create deployment artifacts. Specify configuration options with a JSON string. The available configuration options for each type are:</p>
    /// <ul>
    /// <li> <p> <code>ComponentName</code> (optional) - Name of the GreenGrass V2 component. If not specified, the default name generated consists of "SagemakerEdgeManager" and the name of your SageMaker Edge Manager packaging job.</p> </li>
    /// <li> <p> <code>ComponentDescription</code> (optional) - Description of the component.</p> </li>
    /// <li> <p> <code>ComponentVersion</code> (optional) - The version of the component.</p> <note>
    /// <p>Amazon Web Services IoT Greengrass uses semantic versions for components. Semantic versions follow a<i> major.minor.patch</i> number system. For example, version 1.0.0 represents the first major release for a component. For more information, see the <a href="https://semver.org/">semantic version specification</a>.</p>
    /// </note> </li>
    /// <li> <p> <code>PlatformOS</code> (optional) - The name of the operating system for the platform. Supported platforms include Windows and Linux.</p> </li>
    /// <li> <p> <code>PlatformArchitecture</code> (optional) - The processor architecture for the platform. </p> <p>Supported architectures Windows include: Windows32_x86, Windows64_x64.</p> <p>Supported architectures for Linux include: Linux x86_64, Linux ARMV8.</p> </li>
    /// </ul>
    pub fn set_preset_deployment_config(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preset_deployment_config = input;
        self
    }
    /// <p>The configuration used to create deployment artifacts. Specify configuration options with a JSON string. The available configuration options for each type are:</p>
    /// <ul>
    /// <li> <p> <code>ComponentName</code> (optional) - Name of the GreenGrass V2 component. If not specified, the default name generated consists of "SagemakerEdgeManager" and the name of your SageMaker Edge Manager packaging job.</p> </li>
    /// <li> <p> <code>ComponentDescription</code> (optional) - Description of the component.</p> </li>
    /// <li> <p> <code>ComponentVersion</code> (optional) - The version of the component.</p> <note>
    /// <p>Amazon Web Services IoT Greengrass uses semantic versions for components. Semantic versions follow a<i> major.minor.patch</i> number system. For example, version 1.0.0 represents the first major release for a component. For more information, see the <a href="https://semver.org/">semantic version specification</a>.</p>
    /// </note> </li>
    /// <li> <p> <code>PlatformOS</code> (optional) - The name of the operating system for the platform. Supported platforms include Windows and Linux.</p> </li>
    /// <li> <p> <code>PlatformArchitecture</code> (optional) - The processor architecture for the platform. </p> <p>Supported architectures Windows include: Windows32_x86, Windows64_x64.</p> <p>Supported architectures for Linux include: Linux x86_64, Linux ARMV8.</p> </li>
    /// </ul>
    pub fn get_preset_deployment_config(&self) -> &::std::option::Option<::std::string::String> {
        &self.preset_deployment_config
    }
    /// Consumes the builder and constructs a [`EdgeOutputConfig`](crate::types::EdgeOutputConfig).
    pub fn build(self) -> crate::types::EdgeOutputConfig {
        crate::types::EdgeOutputConfig {
            s3_output_location: self.s3_output_location,
            kms_key_id: self.kms_key_id,
            preset_deployment_type: self.preset_deployment_type,
            preset_deployment_config: self.preset_deployment_config,
        }
    }
}
