// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `SecondaryStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let secondarystatus = unimplemented!();
/// match secondarystatus {
///     SecondaryStatus::Completed => { /* ... */ },
///     SecondaryStatus::Downloading => { /* ... */ },
///     SecondaryStatus::DownloadingTrainingImage => { /* ... */ },
///     SecondaryStatus::Failed => { /* ... */ },
///     SecondaryStatus::Interrupted => { /* ... */ },
///     SecondaryStatus::LaunchingMlInstances => { /* ... */ },
///     SecondaryStatus::MaxRuntimeExceeded => { /* ... */ },
///     SecondaryStatus::MaxWaitTimeExceeded => { /* ... */ },
///     SecondaryStatus::PreparingTrainingStack => { /* ... */ },
///     SecondaryStatus::Restarting => { /* ... */ },
///     SecondaryStatus::Starting => { /* ... */ },
///     SecondaryStatus::Stopped => { /* ... */ },
///     SecondaryStatus::Stopping => { /* ... */ },
///     SecondaryStatus::Training => { /* ... */ },
///     SecondaryStatus::Updating => { /* ... */ },
///     SecondaryStatus::Uploading => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `secondarystatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SecondaryStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SecondaryStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SecondaryStatus::NewFeature` is defined.
/// Specifically, when `secondarystatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SecondaryStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum SecondaryStatus {
    #[allow(missing_docs)] // documentation missing in model
    Completed,
    #[allow(missing_docs)] // documentation missing in model
    Downloading,
    #[allow(missing_docs)] // documentation missing in model
    DownloadingTrainingImage,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    Interrupted,
    #[allow(missing_docs)] // documentation missing in model
    LaunchingMlInstances,
    #[allow(missing_docs)] // documentation missing in model
    MaxRuntimeExceeded,
    #[allow(missing_docs)] // documentation missing in model
    MaxWaitTimeExceeded,
    #[allow(missing_docs)] // documentation missing in model
    PreparingTrainingStack,
    #[allow(missing_docs)] // documentation missing in model
    Restarting,
    #[allow(missing_docs)] // documentation missing in model
    Starting,
    #[allow(missing_docs)] // documentation missing in model
    Stopped,
    #[allow(missing_docs)] // documentation missing in model
    Stopping,
    #[allow(missing_docs)] // documentation missing in model
    Training,
    #[allow(missing_docs)] // documentation missing in model
    Updating,
    #[allow(missing_docs)] // documentation missing in model
    Uploading,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for SecondaryStatus {
    fn from(s: &str) -> Self {
        match s {
            "Completed" => SecondaryStatus::Completed,
            "Downloading" => SecondaryStatus::Downloading,
            "DownloadingTrainingImage" => SecondaryStatus::DownloadingTrainingImage,
            "Failed" => SecondaryStatus::Failed,
            "Interrupted" => SecondaryStatus::Interrupted,
            "LaunchingMLInstances" => SecondaryStatus::LaunchingMlInstances,
            "MaxRuntimeExceeded" => SecondaryStatus::MaxRuntimeExceeded,
            "MaxWaitTimeExceeded" => SecondaryStatus::MaxWaitTimeExceeded,
            "PreparingTrainingStack" => SecondaryStatus::PreparingTrainingStack,
            "Restarting" => SecondaryStatus::Restarting,
            "Starting" => SecondaryStatus::Starting,
            "Stopped" => SecondaryStatus::Stopped,
            "Stopping" => SecondaryStatus::Stopping,
            "Training" => SecondaryStatus::Training,
            "Updating" => SecondaryStatus::Updating,
            "Uploading" => SecondaryStatus::Uploading,
            other => {
                SecondaryStatus::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for SecondaryStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(SecondaryStatus::from(s))
    }
}
impl SecondaryStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SecondaryStatus::Completed => "Completed",
            SecondaryStatus::Downloading => "Downloading",
            SecondaryStatus::DownloadingTrainingImage => "DownloadingTrainingImage",
            SecondaryStatus::Failed => "Failed",
            SecondaryStatus::Interrupted => "Interrupted",
            SecondaryStatus::LaunchingMlInstances => "LaunchingMLInstances",
            SecondaryStatus::MaxRuntimeExceeded => "MaxRuntimeExceeded",
            SecondaryStatus::MaxWaitTimeExceeded => "MaxWaitTimeExceeded",
            SecondaryStatus::PreparingTrainingStack => "PreparingTrainingStack",
            SecondaryStatus::Restarting => "Restarting",
            SecondaryStatus::Starting => "Starting",
            SecondaryStatus::Stopped => "Stopped",
            SecondaryStatus::Stopping => "Stopping",
            SecondaryStatus::Training => "Training",
            SecondaryStatus::Updating => "Updating",
            SecondaryStatus::Uploading => "Uploading",
            SecondaryStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Completed",
            "Downloading",
            "DownloadingTrainingImage",
            "Failed",
            "Interrupted",
            "LaunchingMLInstances",
            "MaxRuntimeExceeded",
            "MaxWaitTimeExceeded",
            "PreparingTrainingStack",
            "Restarting",
            "Starting",
            "Stopped",
            "Stopping",
            "Training",
            "Updating",
            "Uploading",
        ]
    }
}
impl AsRef<str> for SecondaryStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
