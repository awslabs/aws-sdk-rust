// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or <code>KMSKeyId</code>, for at rest data encryption. You can turn <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag at General Assembly; the default value is <code>False</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OnlineStoreConfig {
    /// <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your <code>OnlineStore</code>.</p>
    #[doc(hidden)]
    pub security_config: std::option::Option<crate::types::OnlineStoreSecurityConfig>,
    /// <p>Turn <code>OnlineStore</code> off by specifying <code>False</code> for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag. </p>
    /// <p>The default value is <code>False</code>.</p>
    #[doc(hidden)]
    pub enable_online_store: bool,
}
impl OnlineStoreConfig {
    /// <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your <code>OnlineStore</code>.</p>
    pub fn security_config(&self) -> std::option::Option<&crate::types::OnlineStoreSecurityConfig> {
        self.security_config.as_ref()
    }
    /// <p>Turn <code>OnlineStore</code> off by specifying <code>False</code> for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag. </p>
    /// <p>The default value is <code>False</code>.</p>
    pub fn enable_online_store(&self) -> bool {
        self.enable_online_store
    }
}
impl OnlineStoreConfig {
    /// Creates a new builder-style object to manufacture [`OnlineStoreConfig`](crate::types::OnlineStoreConfig).
    pub fn builder() -> crate::types::builders::OnlineStoreConfigBuilder {
        crate::types::builders::OnlineStoreConfigBuilder::default()
    }
}

/// A builder for [`OnlineStoreConfig`](crate::types::OnlineStoreConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OnlineStoreConfigBuilder {
    pub(crate) security_config: std::option::Option<crate::types::OnlineStoreSecurityConfig>,
    pub(crate) enable_online_store: std::option::Option<bool>,
}
impl OnlineStoreConfigBuilder {
    /// <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your <code>OnlineStore</code>.</p>
    pub fn security_config(mut self, input: crate::types::OnlineStoreSecurityConfig) -> Self {
        self.security_config = Some(input);
        self
    }
    /// <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your <code>OnlineStore</code>.</p>
    pub fn set_security_config(
        mut self,
        input: std::option::Option<crate::types::OnlineStoreSecurityConfig>,
    ) -> Self {
        self.security_config = input;
        self
    }
    /// <p>Turn <code>OnlineStore</code> off by specifying <code>False</code> for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag. </p>
    /// <p>The default value is <code>False</code>.</p>
    pub fn enable_online_store(mut self, input: bool) -> Self {
        self.enable_online_store = Some(input);
        self
    }
    /// <p>Turn <code>OnlineStore</code> off by specifying <code>False</code> for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag. </p>
    /// <p>The default value is <code>False</code>.</p>
    pub fn set_enable_online_store(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_online_store = input;
        self
    }
    /// Consumes the builder and constructs a [`OnlineStoreConfig`](crate::types::OnlineStoreConfig).
    pub fn build(self) -> crate::types::OnlineStoreConfig {
        crate::types::OnlineStoreConfig {
            security_config: self.security_config,
            enable_online_store: self.enable_online_store.unwrap_or_default(),
        }
    }
}
