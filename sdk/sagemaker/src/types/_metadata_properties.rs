// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata properties of the tracking entity, trial, or trial component.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetadataProperties {
    /// <p>The commit ID.</p>
    #[doc(hidden)]
    pub commit_id: std::option::Option<std::string::String>,
    /// <p>The repository.</p>
    #[doc(hidden)]
    pub repository: std::option::Option<std::string::String>,
    /// <p>The entity this entity was generated by.</p>
    #[doc(hidden)]
    pub generated_by: std::option::Option<std::string::String>,
    /// <p>The project ID.</p>
    #[doc(hidden)]
    pub project_id: std::option::Option<std::string::String>,
}
impl MetadataProperties {
    /// <p>The commit ID.</p>
    pub fn commit_id(&self) -> std::option::Option<&str> {
        self.commit_id.as_deref()
    }
    /// <p>The repository.</p>
    pub fn repository(&self) -> std::option::Option<&str> {
        self.repository.as_deref()
    }
    /// <p>The entity this entity was generated by.</p>
    pub fn generated_by(&self) -> std::option::Option<&str> {
        self.generated_by.as_deref()
    }
    /// <p>The project ID.</p>
    pub fn project_id(&self) -> std::option::Option<&str> {
        self.project_id.as_deref()
    }
}
impl MetadataProperties {
    /// Creates a new builder-style object to manufacture [`MetadataProperties`](crate::types::MetadataProperties).
    pub fn builder() -> crate::types::builders::MetadataPropertiesBuilder {
        crate::types::builders::MetadataPropertiesBuilder::default()
    }
}

/// A builder for [`MetadataProperties`](crate::types::MetadataProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetadataPropertiesBuilder {
    pub(crate) commit_id: std::option::Option<std::string::String>,
    pub(crate) repository: std::option::Option<std::string::String>,
    pub(crate) generated_by: std::option::Option<std::string::String>,
    pub(crate) project_id: std::option::Option<std::string::String>,
}
impl MetadataPropertiesBuilder {
    /// <p>The commit ID.</p>
    pub fn commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.commit_id = Some(input.into());
        self
    }
    /// <p>The commit ID.</p>
    pub fn set_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.commit_id = input;
        self
    }
    /// <p>The repository.</p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository = Some(input.into());
        self
    }
    /// <p>The repository.</p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository = input;
        self
    }
    /// <p>The entity this entity was generated by.</p>
    pub fn generated_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.generated_by = Some(input.into());
        self
    }
    /// <p>The entity this entity was generated by.</p>
    pub fn set_generated_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.generated_by = input;
        self
    }
    /// <p>The project ID.</p>
    pub fn project_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_id = Some(input.into());
        self
    }
    /// <p>The project ID.</p>
    pub fn set_project_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// Consumes the builder and constructs a [`MetadataProperties`](crate::types::MetadataProperties).
    pub fn build(self) -> crate::types::MetadataProperties {
        crate::types::MetadataProperties {
            commit_id: self.commit_id,
            repository: self.repository,
            generated_by: self.generated_by,
            project_id: self.project_id,
        }
    }
}
