// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListEventTrackers`](crate::client::fluent_builders::ListEventTrackers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEventTrackers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_group_arn(impl Into<String>)`](crate::client::fluent_builders::ListEventTrackers::dataset_group_arn) / [`set_dataset_group_arn(Option<String>)`](crate::client::fluent_builders::ListEventTrackers::set_dataset_group_arn): <p>The ARN of a dataset group used to filter the response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEventTrackers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEventTrackers::set_next_token): <p>A token returned from the previous call to <code>ListEventTrackers</code> for getting the next set of event trackers (if they exist).</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEventTrackers::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEventTrackers::set_max_results): <p>The maximum number of event trackers to return.</p>
    /// - On success, responds with [`ListEventTrackersOutput`](crate::output::ListEventTrackersOutput) with field(s):
    ///   - [`event_trackers(Option<Vec<EventTrackerSummary>>)`](crate::output::ListEventTrackersOutput::event_trackers): <p>A list of event trackers.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEventTrackersOutput::next_token): <p>A token for getting the next set of event trackers (if they exist).</p>
    /// - On failure, responds with [`SdkError<ListEventTrackersError>`](crate::error::ListEventTrackersError)
    pub fn list_event_trackers(&self) -> crate::client::fluent_builders::ListEventTrackers {
        crate::client::fluent_builders::ListEventTrackers::new(self.handle.clone())
    }
}
