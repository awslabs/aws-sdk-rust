// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateSolution`](crate::client::fluent_builders::CreateSolution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateSolution::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateSolution::set_name): <p>The name for the solution.</p>
    ///   - [`perform_hpo(bool)`](crate::client::fluent_builders::CreateSolution::perform_hpo) / [`set_perform_hpo(Option<bool>)`](crate::client::fluent_builders::CreateSolution::set_perform_hpo): <p>Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is <code>false</code>.</p>  <p>When performing AutoML, this parameter is always <code>true</code> and you should not set it to <code>false</code>.</p>
    ///   - [`perform_auto_ml(bool)`](crate::client::fluent_builders::CreateSolution::perform_auto_ml) / [`set_perform_auto_ml(bool)`](crate::client::fluent_builders::CreateSolution::set_perform_auto_ml): <p>Whether to perform automated machine learning (AutoML). The default is <code>false</code>. For this case, you must specify <code>recipeArn</code>.</p>  <p>When set to <code>true</code>, Amazon Personalize analyzes your training data and selects the optimal USER_PERSONALIZATION recipe and hyperparameters. In this case, you must omit <code>recipeArn</code>. Amazon Personalize determines the optimal recipe by running tests with different values for the hyperparameters. AutoML lengthens the training process as compared to selecting a specific recipe.</p>
    ///   - [`recipe_arn(impl Into<String>)`](crate::client::fluent_builders::CreateSolution::recipe_arn) / [`set_recipe_arn(Option<String>)`](crate::client::fluent_builders::CreateSolution::set_recipe_arn): <p>The ARN of the recipe to use for model training. Only specified when <code>performAutoML</code> is false.</p>
    ///   - [`dataset_group_arn(impl Into<String>)`](crate::client::fluent_builders::CreateSolution::dataset_group_arn) / [`set_dataset_group_arn(Option<String>)`](crate::client::fluent_builders::CreateSolution::set_dataset_group_arn): <p>The Amazon Resource Name (ARN) of the dataset group that provides the training data.</p>
    ///   - [`event_type(impl Into<String>)`](crate::client::fluent_builders::CreateSolution::event_type) / [`set_event_type(Option<String>)`](crate::client::fluent_builders::CreateSolution::set_event_type): <p>When your have multiple event types (using an <code>EVENT_TYPE</code> schema field), this parameter specifies which event type (for example, 'click' or 'like') is used for training the model.</p>  <p>If you do not provide an <code>eventType</code>, Amazon Personalize will use all interactions for training with equal weight regardless of type.</p>
    ///   - [`solution_config(SolutionConfig)`](crate::client::fluent_builders::CreateSolution::solution_config) / [`set_solution_config(Option<SolutionConfig>)`](crate::client::fluent_builders::CreateSolution::set_solution_config): <p>The configuration to use with the solution. When <code>performAutoML</code> is set to true, Amazon Personalize only evaluates the <code>autoMLConfig</code> section of the solution configuration.</p> <note>   <p>Amazon Personalize doesn't support configuring the <code>hpoObjective</code> at this time.</p>  </note>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateSolution::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateSolution::set_tags): <p>A list of <a href="https://docs.aws.amazon.com/personalize/latest/dev/tagging-resources.html">tags</a> to apply to the solution.</p>
    /// - On success, responds with [`CreateSolutionOutput`](crate::output::CreateSolutionOutput) with field(s):
    ///   - [`solution_arn(Option<String>)`](crate::output::CreateSolutionOutput::solution_arn): <p>The ARN of the solution.</p>
    /// - On failure, responds with [`SdkError<CreateSolutionError>`](crate::error::CreateSolutionError)
    pub fn create_solution(&self) -> crate::client::fluent_builders::CreateSolution {
        crate::client::fluent_builders::CreateSolution::new(self.handle.clone())
    }
}
