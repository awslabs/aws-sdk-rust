// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn algorithm_image_correct_errors(
    mut builder: crate::types::builders::AlgorithmImageBuilder,
) -> crate::types::builders::AlgorithmImageBuilder {
    if builder.docker_uri.is_none() {
        builder.docker_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_inference_job_input_correct_errors(
    mut builder: crate::types::builders::BatchInferenceJobInputBuilder,
) -> crate::types::builders::BatchInferenceJobInputBuilder {
    if builder.s3_data_source.is_none() {
        builder.s3_data_source = {
            let builder = crate::types::builders::S3DataConfigBuilder::default();
            crate::serde_util::s3_data_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn batch_inference_job_output_correct_errors(
    mut builder: crate::types::builders::BatchInferenceJobOutputBuilder,
) -> crate::types::builders::BatchInferenceJobOutputBuilder {
    if builder.s3_data_destination.is_none() {
        builder.s3_data_destination = {
            let builder = crate::types::builders::S3DataConfigBuilder::default();
            crate::serde_util::s3_data_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn batch_segment_job_input_correct_errors(
    mut builder: crate::types::builders::BatchSegmentJobInputBuilder,
) -> crate::types::builders::BatchSegmentJobInputBuilder {
    if builder.s3_data_source.is_none() {
        builder.s3_data_source = {
            let builder = crate::types::builders::S3DataConfigBuilder::default();
            crate::serde_util::s3_data_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn batch_segment_job_output_correct_errors(
    mut builder: crate::types::builders::BatchSegmentJobOutputBuilder,
) -> crate::types::builders::BatchSegmentJobOutputBuilder {
    if builder.s3_data_destination.is_none() {
        builder.s3_data_destination = {
            let builder = crate::types::builders::S3DataConfigBuilder::default();
            crate::serde_util::s3_data_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn dataset_export_job_output_correct_errors(
    mut builder: crate::types::builders::DatasetExportJobOutputBuilder,
) -> crate::types::builders::DatasetExportJobOutputBuilder {
    if builder.s3_data_destination.is_none() {
        builder.s3_data_destination = {
            let builder = crate::types::builders::S3DataConfigBuilder::default();
            crate::serde_util::s3_data_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn metric_attribute_correct_errors(
    mut builder: crate::types::builders::MetricAttributeBuilder,
) -> crate::types::builders::MetricAttributeBuilder {
    if builder.event_type.is_none() {
        builder.event_type = Some(Default::default())
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_attribution_output_correct_errors(
    mut builder: crate::types::builders::MetricAttributionOutputBuilder,
) -> crate::types::builders::MetricAttributionOutputBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.tag_key.is_none() {
        builder.tag_key = Some(Default::default())
    }
    if builder.tag_value.is_none() {
        builder.tag_value = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_data_config_correct_errors(mut builder: crate::types::builders::S3DataConfigBuilder) -> crate::types::builders::S3DataConfigBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    builder
}
