// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_batch_inference_jobs_output_next_token(
    input: &crate::output::ListBatchInferenceJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_batch_segment_jobs_output_next_token(
    input: &crate::output::ListBatchSegmentJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_campaigns_output_next_token(
    input: &crate::output::ListCampaignsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_dataset_export_jobs_output_next_token(
    input: &crate::output::ListDatasetExportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_dataset_groups_output_next_token(
    input: &crate::output::ListDatasetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_dataset_import_jobs_output_next_token(
    input: &crate::output::ListDatasetImportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_datasets_output_next_token(
    input: &crate::output::ListDatasetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_event_trackers_output_next_token(
    input: &crate::output::ListEventTrackersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_filters_output_next_token(
    input: &crate::output::ListFiltersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_recipes_output_next_token(
    input: &crate::output::ListRecipesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_recommenders_output_next_token(
    input: &crate::output::ListRecommendersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_schemas_output_next_token(
    input: &crate::output::ListSchemasOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_solutions_output_next_token(
    input: &crate::output::ListSolutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_solution_versions_output_next_token(
    input: &crate::output::ListSolutionVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_batch_inference_jobs_output_batch_inference_jobs(
    input: crate::output::ListBatchInferenceJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::BatchInferenceJobSummary>> {
    let input = match input.batch_inference_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_batch_segment_jobs_output_batch_segment_jobs(
    input: crate::output::ListBatchSegmentJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::BatchSegmentJobSummary>> {
    let input = match input.batch_segment_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_campaigns_output_campaigns(
    input: crate::output::ListCampaignsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CampaignSummary>> {
    let input = match input.campaigns {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_dataset_export_jobs_output_dataset_export_jobs(
    input: crate::output::ListDatasetExportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DatasetExportJobSummary>> {
    let input = match input.dataset_export_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_dataset_groups_output_dataset_groups(
    input: crate::output::ListDatasetGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DatasetGroupSummary>> {
    let input = match input.dataset_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_dataset_import_jobs_output_dataset_import_jobs(
    input: crate::output::ListDatasetImportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DatasetImportJobSummary>> {
    let input = match input.dataset_import_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_datasets_output_datasets(
    input: crate::output::ListDatasetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DatasetSummary>> {
    let input = match input.datasets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_event_trackers_output_event_trackers(
    input: crate::output::ListEventTrackersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EventTrackerSummary>> {
    let input = match input.event_trackers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_filters_output_filters(
    input: crate::output::ListFiltersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FilterSummary>> {
    let input = match input.filters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_recipes_output_recipes(
    input: crate::output::ListRecipesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RecipeSummary>> {
    let input = match input.recipes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_recommenders_output_recommenders(
    input: crate::output::ListRecommendersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RecommenderSummary>> {
    let input = match input.recommenders {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_schemas_output_schemas(
    input: crate::output::ListSchemasOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DatasetSchemaSummary>> {
    let input = match input.schemas {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_solutions_output_solutions(
    input: crate::output::ListSolutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SolutionSummary>> {
    let input = match input.solutions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_solution_versions_output_solution_versions(
    input: crate::output::ListSolutionVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SolutionVersionSummary>> {
    let input = match input.solution_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
