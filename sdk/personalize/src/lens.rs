// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_batch_inference_jobs_output_next_token(
    input: &crate::operation::list_batch_inference_jobs::ListBatchInferenceJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_batch_segment_jobs_output_next_token(
    input: &crate::operation::list_batch_segment_jobs::ListBatchSegmentJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_campaigns_output_next_token(
    input: &crate::operation::list_campaigns::ListCampaignsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dataset_export_jobs_output_next_token(
    input: &crate::operation::list_dataset_export_jobs::ListDatasetExportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dataset_groups_output_next_token(
    input: &crate::operation::list_dataset_groups::ListDatasetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dataset_import_jobs_output_next_token(
    input: &crate::operation::list_dataset_import_jobs::ListDatasetImportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_datasets_output_next_token(
    input: &crate::operation::list_datasets::ListDatasetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_event_trackers_output_next_token(
    input: &crate::operation::list_event_trackers::ListEventTrackersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_filters_output_next_token(
    input: &crate::operation::list_filters::ListFiltersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_metric_attribution_metrics_output_next_token(
    input: &crate::operation::list_metric_attribution_metrics::ListMetricAttributionMetricsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_metric_attributions_output_next_token(
    input: &crate::operation::list_metric_attributions::ListMetricAttributionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_recipes_output_next_token(
    input: &crate::operation::list_recipes::ListRecipesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_recommenders_output_next_token(
    input: &crate::operation::list_recommenders::ListRecommendersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_schemas_output_next_token(
    input: &crate::operation::list_schemas::ListSchemasOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_solution_versions_output_next_token(
    input: &crate::operation::list_solution_versions::ListSolutionVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_solutions_output_next_token(
    input: &crate::operation::list_solutions::ListSolutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_batch_inference_jobs_output_batch_inference_jobs(
    input: crate::operation::list_batch_inference_jobs::ListBatchInferenceJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BatchInferenceJobSummary>> {
    let input = match input.batch_inference_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_batch_segment_jobs_output_batch_segment_jobs(
    input: crate::operation::list_batch_segment_jobs::ListBatchSegmentJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BatchSegmentJobSummary>> {
    let input = match input.batch_segment_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_campaigns_output_campaigns(
    input: crate::operation::list_campaigns::ListCampaignsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CampaignSummary>> {
    let input = match input.campaigns {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dataset_export_jobs_output_dataset_export_jobs(
    input: crate::operation::list_dataset_export_jobs::ListDatasetExportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DatasetExportJobSummary>> {
    let input = match input.dataset_export_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dataset_groups_output_dataset_groups(
    input: crate::operation::list_dataset_groups::ListDatasetGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DatasetGroupSummary>> {
    let input = match input.dataset_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dataset_import_jobs_output_dataset_import_jobs(
    input: crate::operation::list_dataset_import_jobs::ListDatasetImportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DatasetImportJobSummary>> {
    let input = match input.dataset_import_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_datasets_output_datasets(
    input: crate::operation::list_datasets::ListDatasetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DatasetSummary>> {
    let input = match input.datasets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_event_trackers_output_event_trackers(
    input: crate::operation::list_event_trackers::ListEventTrackersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EventTrackerSummary>> {
    let input = match input.event_trackers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_filters_output_filters(
    input: crate::operation::list_filters::ListFiltersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FilterSummary>> {
    let input = match input.filters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_metric_attribution_metrics_output_metrics(
    input: crate::operation::list_metric_attribution_metrics::ListMetricAttributionMetricsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MetricAttribute>> {
    let input = match input.metrics {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_metric_attributions_output_metric_attributions(
    input: crate::operation::list_metric_attributions::ListMetricAttributionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MetricAttributionSummary>> {
    let input = match input.metric_attributions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_recipes_output_recipes(
    input: crate::operation::list_recipes::ListRecipesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RecipeSummary>> {
    let input = match input.recipes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_recommenders_output_recommenders(
    input: crate::operation::list_recommenders::ListRecommendersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RecommenderSummary>> {
    let input = match input.recommenders {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_schemas_output_schemas(
    input: crate::operation::list_schemas::ListSchemasOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DatasetSchemaSummary>> {
    let input = match input.schemas {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_solution_versions_output_solution_versions(
    input: crate::operation::list_solution_versions::ListSolutionVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SolutionVersionSummary>> {
    let input = match input.solution_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_solutions_output_solutions(
    input: crate::operation::list_solutions::ListSolutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SolutionSummary>> {
    let input = match input.solutions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
