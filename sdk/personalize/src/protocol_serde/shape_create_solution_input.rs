// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_solution_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_solution::CreateSolutionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.perform_hpo {
        object.key("performHPO").boolean(*var_2);
    }
    if let Some(var_3) = &input.perform_auto_ml {
        object.key("performAutoML").boolean(*var_3);
    }
    if let Some(var_4) = &input.perform_auto_training {
        object.key("performAutoTraining").boolean(*var_4);
    }
    if let Some(var_5) = &input.recipe_arn {
        object.key("recipeArn").string(var_5.as_str());
    }
    if let Some(var_6) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.event_type {
        object.key("eventType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.solution_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("solutionConfig").start_object();
        crate::protocol_serde::shape_solution_config::ser_solution_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.tags {
        let mut array_11 = object.key("tags").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}
