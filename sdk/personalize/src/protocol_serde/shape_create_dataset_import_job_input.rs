// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_dataset_import_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_dataset_import_job::CreateDatasetImportJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.job_name {
        object.key("jobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.dataset_arn {
        object.key("datasetArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_4 = object.key("dataSource").start_object();
        crate::protocol_serde::shape_data_source::ser_data_source(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.role_arn {
        object.key("roleArn").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tags {
        let mut array_7 = object.key("tags").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.import_mode {
        object.key("importMode").string(var_10.as_str());
    }
    if let Some(var_11) = &input.publish_attribution_metrics_to_s3 {
        object.key("publishAttributionMetricsToS3").boolean(*var_11);
    }
    Ok(())
}
