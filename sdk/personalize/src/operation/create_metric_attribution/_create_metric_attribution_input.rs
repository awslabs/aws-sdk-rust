// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMetricAttributionInput {
    /// <p>A name for the metric attribution.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the destination dataset group for the metric attribution.</p>
    pub dataset_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of metric attributes for the metric attribution. Each metric attribute specifies an event type to track and a function. Available functions are <code>SUM()</code> or <code>SAMPLECOUNT()</code>. For SUM() functions, provide the dataset type (either Interactions or Items) and column to sum as a parameter. For example SUM(Items.PRICE).</p>
    pub metrics: ::std::option::Option<::std::vec::Vec<crate::types::MetricAttribute>>,
    /// <p>The output configuration details for the metric attribution.</p>
    pub metrics_output_config: ::std::option::Option<crate::types::MetricAttributionOutput>,
}
impl CreateMetricAttributionInput {
    /// <p>A name for the metric attribution.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the destination dataset group for the metric attribution.</p>
    pub fn dataset_group_arn(&self) -> ::std::option::Option<&str> {
        self.dataset_group_arn.as_deref()
    }
    /// <p>A list of metric attributes for the metric attribution. Each metric attribute specifies an event type to track and a function. Available functions are <code>SUM()</code> or <code>SAMPLECOUNT()</code>. For SUM() functions, provide the dataset type (either Interactions or Items) and column to sum as a parameter. For example SUM(Items.PRICE).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metrics.is_none()`.
    pub fn metrics(&self) -> &[crate::types::MetricAttribute] {
        self.metrics.as_deref().unwrap_or_default()
    }
    /// <p>The output configuration details for the metric attribution.</p>
    pub fn metrics_output_config(&self) -> ::std::option::Option<&crate::types::MetricAttributionOutput> {
        self.metrics_output_config.as_ref()
    }
}
impl CreateMetricAttributionInput {
    /// Creates a new builder-style object to manufacture [`CreateMetricAttributionInput`](crate::operation::create_metric_attribution::CreateMetricAttributionInput).
    pub fn builder() -> crate::operation::create_metric_attribution::builders::CreateMetricAttributionInputBuilder {
        crate::operation::create_metric_attribution::builders::CreateMetricAttributionInputBuilder::default()
    }
}

/// A builder for [`CreateMetricAttributionInput`](crate::operation::create_metric_attribution::CreateMetricAttributionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateMetricAttributionInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) metrics: ::std::option::Option<::std::vec::Vec<crate::types::MetricAttribute>>,
    pub(crate) metrics_output_config: ::std::option::Option<crate::types::MetricAttributionOutput>,
}
impl CreateMetricAttributionInputBuilder {
    /// <p>A name for the metric attribution.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the metric attribution.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the metric attribution.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the destination dataset group for the metric attribution.</p>
    /// This field is required.
    pub fn dataset_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the destination dataset group for the metric attribution.</p>
    pub fn set_dataset_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the destination dataset group for the metric attribution.</p>
    pub fn get_dataset_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_group_arn
    }
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>A list of metric attributes for the metric attribution. Each metric attribute specifies an event type to track and a function. Available functions are <code>SUM()</code> or <code>SAMPLECOUNT()</code>. For SUM() functions, provide the dataset type (either Interactions or Items) and column to sum as a parameter. For example SUM(Items.PRICE).</p>
    pub fn metrics(mut self, input: crate::types::MetricAttribute) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input);
        self.metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of metric attributes for the metric attribution. Each metric attribute specifies an event type to track and a function. Available functions are <code>SUM()</code> or <code>SAMPLECOUNT()</code>. For SUM() functions, provide the dataset type (either Interactions or Items) and column to sum as a parameter. For example SUM(Items.PRICE).</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricAttribute>>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>A list of metric attributes for the metric attribution. Each metric attribute specifies an event type to track and a function. Available functions are <code>SUM()</code> or <code>SAMPLECOUNT()</code>. For SUM() functions, provide the dataset type (either Interactions or Items) and column to sum as a parameter. For example SUM(Items.PRICE).</p>
    pub fn get_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricAttribute>> {
        &self.metrics
    }
    /// <p>The output configuration details for the metric attribution.</p>
    /// This field is required.
    pub fn metrics_output_config(mut self, input: crate::types::MetricAttributionOutput) -> Self {
        self.metrics_output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output configuration details for the metric attribution.</p>
    pub fn set_metrics_output_config(mut self, input: ::std::option::Option<crate::types::MetricAttributionOutput>) -> Self {
        self.metrics_output_config = input;
        self
    }
    /// <p>The output configuration details for the metric attribution.</p>
    pub fn get_metrics_output_config(&self) -> &::std::option::Option<crate::types::MetricAttributionOutput> {
        &self.metrics_output_config
    }
    /// Consumes the builder and constructs a [`CreateMetricAttributionInput`](crate::operation::create_metric_attribution::CreateMetricAttributionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_metric_attribution::CreateMetricAttributionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_metric_attribution::CreateMetricAttributionInput {
            name: self.name,
            dataset_group_arn: self.dataset_group_arn,
            metrics: self.metrics,
            metrics_output_config: self.metrics_output_config,
        })
    }
}
