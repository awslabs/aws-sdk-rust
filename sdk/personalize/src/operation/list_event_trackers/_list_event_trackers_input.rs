// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEventTrackersInput {
    /// <p>The ARN of a dataset group used to filter the response.</p>
    #[doc(hidden)]
    pub dataset_group_arn: std::option::Option<std::string::String>,
    /// <p>A token returned from the previous call to <code>ListEventTrackers</code> for getting the next set of event trackers (if they exist).</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of event trackers to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListEventTrackersInput {
    /// <p>The ARN of a dataset group used to filter the response.</p>
    pub fn dataset_group_arn(&self) -> std::option::Option<&str> {
        self.dataset_group_arn.as_deref()
    }
    /// <p>A token returned from the previous call to <code>ListEventTrackers</code> for getting the next set of event trackers (if they exist).</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of event trackers to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListEventTrackersInput {
    /// Creates a new builder-style object to manufacture [`ListEventTrackersInput`](crate::operation::list_event_trackers::ListEventTrackersInput).
    pub fn builder(
    ) -> crate::operation::list_event_trackers::builders::ListEventTrackersInputBuilder {
        crate::operation::list_event_trackers::builders::ListEventTrackersInputBuilder::default()
    }
}

/// A builder for [`ListEventTrackersInput`](crate::operation::list_event_trackers::ListEventTrackersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListEventTrackersInputBuilder {
    pub(crate) dataset_group_arn: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListEventTrackersInputBuilder {
    /// <p>The ARN of a dataset group used to filter the response.</p>
    pub fn dataset_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_group_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a dataset group used to filter the response.</p>
    pub fn set_dataset_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dataset_group_arn = input;
        self
    }
    /// <p>A token returned from the previous call to <code>ListEventTrackers</code> for getting the next set of event trackers (if they exist).</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token returned from the previous call to <code>ListEventTrackers</code> for getting the next set of event trackers (if they exist).</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of event trackers to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of event trackers to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListEventTrackersInput`](crate::operation::list_event_trackers::ListEventTrackersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_event_trackers::ListEventTrackersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_event_trackers::ListEventTrackersInput {
                dataset_group_arn: self.dataset_group_arn,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
