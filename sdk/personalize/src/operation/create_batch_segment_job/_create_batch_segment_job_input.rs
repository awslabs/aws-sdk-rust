// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateBatchSegmentJobInput {
    /// <p>The name of the batch segment job to create.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the solution version you want the batch segment job to use to generate batch segments.</p>
    pub solution_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the filter to apply to the batch segment job. For more information on using filters, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter-batch.html">Filtering batch recommendations</a>.</p>
    pub filter_arn: ::std::option::Option<::std::string::String>,
    /// <p>The number of predicted users generated by the batch segment job for each line of input data. The maximum number of users per segment is 5 million.</p>
    pub num_results: ::std::option::Option<i32>,
    /// <p>The Amazon S3 path for the input data used to generate the batch segment job.</p>
    pub job_input: ::std::option::Option<crate::types::BatchSegmentJobInput>,
    /// <p>The Amazon S3 path for the bucket where the job's output will be stored.</p>
    pub job_output: ::std::option::Option<crate::types::BatchSegmentJobOutput>,
    /// <p>The ARN of the Amazon Identity and Access Management role that has permissions to read and write to your input and output Amazon S3 buckets respectively.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of <a href="https://docs.aws.amazon.com/personalize/latest/dg/tagging-resources.html">tags</a> to apply to the batch segment job.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateBatchSegmentJobInput {
    /// <p>The name of the batch segment job to create.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the solution version you want the batch segment job to use to generate batch segments.</p>
    pub fn solution_version_arn(&self) -> ::std::option::Option<&str> {
        self.solution_version_arn.as_deref()
    }
    /// <p>The ARN of the filter to apply to the batch segment job. For more information on using filters, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter-batch.html">Filtering batch recommendations</a>.</p>
    pub fn filter_arn(&self) -> ::std::option::Option<&str> {
        self.filter_arn.as_deref()
    }
    /// <p>The number of predicted users generated by the batch segment job for each line of input data. The maximum number of users per segment is 5 million.</p>
    pub fn num_results(&self) -> ::std::option::Option<i32> {
        self.num_results
    }
    /// <p>The Amazon S3 path for the input data used to generate the batch segment job.</p>
    pub fn job_input(&self) -> ::std::option::Option<&crate::types::BatchSegmentJobInput> {
        self.job_input.as_ref()
    }
    /// <p>The Amazon S3 path for the bucket where the job's output will be stored.</p>
    pub fn job_output(&self) -> ::std::option::Option<&crate::types::BatchSegmentJobOutput> {
        self.job_output.as_ref()
    }
    /// <p>The ARN of the Amazon Identity and Access Management role that has permissions to read and write to your input and output Amazon S3 buckets respectively.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/personalize/latest/dg/tagging-resources.html">tags</a> to apply to the batch segment job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateBatchSegmentJobInput {
    /// Creates a new builder-style object to manufacture [`CreateBatchSegmentJobInput`](crate::operation::create_batch_segment_job::CreateBatchSegmentJobInput).
    pub fn builder() -> crate::operation::create_batch_segment_job::builders::CreateBatchSegmentJobInputBuilder {
        crate::operation::create_batch_segment_job::builders::CreateBatchSegmentJobInputBuilder::default()
    }
}

/// A builder for [`CreateBatchSegmentJobInput`](crate::operation::create_batch_segment_job::CreateBatchSegmentJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateBatchSegmentJobInputBuilder {
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) solution_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) filter_arn: ::std::option::Option<::std::string::String>,
    pub(crate) num_results: ::std::option::Option<i32>,
    pub(crate) job_input: ::std::option::Option<crate::types::BatchSegmentJobInput>,
    pub(crate) job_output: ::std::option::Option<crate::types::BatchSegmentJobOutput>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateBatchSegmentJobInputBuilder {
    /// <p>The name of the batch segment job to create.</p>
    /// This field is required.
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the batch segment job to create.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of the batch segment job to create.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The Amazon Resource Name (ARN) of the solution version you want the batch segment job to use to generate batch segments.</p>
    /// This field is required.
    pub fn solution_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.solution_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the solution version you want the batch segment job to use to generate batch segments.</p>
    pub fn set_solution_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.solution_version_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the solution version you want the batch segment job to use to generate batch segments.</p>
    pub fn get_solution_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.solution_version_arn
    }
    /// <p>The ARN of the filter to apply to the batch segment job. For more information on using filters, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter-batch.html">Filtering batch recommendations</a>.</p>
    pub fn filter_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the filter to apply to the batch segment job. For more information on using filters, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter-batch.html">Filtering batch recommendations</a>.</p>
    pub fn set_filter_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_arn = input;
        self
    }
    /// <p>The ARN of the filter to apply to the batch segment job. For more information on using filters, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter-batch.html">Filtering batch recommendations</a>.</p>
    pub fn get_filter_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_arn
    }
    /// <p>The number of predicted users generated by the batch segment job for each line of input data. The maximum number of users per segment is 5 million.</p>
    pub fn num_results(mut self, input: i32) -> Self {
        self.num_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of predicted users generated by the batch segment job for each line of input data. The maximum number of users per segment is 5 million.</p>
    pub fn set_num_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_results = input;
        self
    }
    /// <p>The number of predicted users generated by the batch segment job for each line of input data. The maximum number of users per segment is 5 million.</p>
    pub fn get_num_results(&self) -> &::std::option::Option<i32> {
        &self.num_results
    }
    /// <p>The Amazon S3 path for the input data used to generate the batch segment job.</p>
    /// This field is required.
    pub fn job_input(mut self, input: crate::types::BatchSegmentJobInput) -> Self {
        self.job_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 path for the input data used to generate the batch segment job.</p>
    pub fn set_job_input(mut self, input: ::std::option::Option<crate::types::BatchSegmentJobInput>) -> Self {
        self.job_input = input;
        self
    }
    /// <p>The Amazon S3 path for the input data used to generate the batch segment job.</p>
    pub fn get_job_input(&self) -> &::std::option::Option<crate::types::BatchSegmentJobInput> {
        &self.job_input
    }
    /// <p>The Amazon S3 path for the bucket where the job's output will be stored.</p>
    /// This field is required.
    pub fn job_output(mut self, input: crate::types::BatchSegmentJobOutput) -> Self {
        self.job_output = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 path for the bucket where the job's output will be stored.</p>
    pub fn set_job_output(mut self, input: ::std::option::Option<crate::types::BatchSegmentJobOutput>) -> Self {
        self.job_output = input;
        self
    }
    /// <p>The Amazon S3 path for the bucket where the job's output will be stored.</p>
    pub fn get_job_output(&self) -> &::std::option::Option<crate::types::BatchSegmentJobOutput> {
        &self.job_output
    }
    /// <p>The ARN of the Amazon Identity and Access Management role that has permissions to read and write to your input and output Amazon S3 buckets respectively.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon Identity and Access Management role that has permissions to read and write to your input and output Amazon S3 buckets respectively.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the Amazon Identity and Access Management role that has permissions to read and write to your input and output Amazon S3 buckets respectively.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <a href="https://docs.aws.amazon.com/personalize/latest/dg/tagging-resources.html">tags</a> to apply to the batch segment job.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/personalize/latest/dg/tagging-resources.html">tags</a> to apply to the batch segment job.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/personalize/latest/dg/tagging-resources.html">tags</a> to apply to the batch segment job.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateBatchSegmentJobInput`](crate::operation::create_batch_segment_job::CreateBatchSegmentJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_batch_segment_job::CreateBatchSegmentJobInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_batch_segment_job::CreateBatchSegmentJobInput {
            job_name: self.job_name,
            solution_version_arn: self.solution_version_arn,
            filter_arn: self.filter_arn,
            num_results: self.num_results,
            job_input: self.job_input,
            job_output: self.job_output,
            role_arn: self.role_arn,
            tags: self.tags,
        })
    }
}
