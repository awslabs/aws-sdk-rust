// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the resource configuration for hyperparameter optimization (HPO).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HpoResourceConfig {
    /// <p>The maximum number of training jobs when you create a solution version. The maximum value for <code>maxNumberOfTrainingJobs</code> is <code>40</code>.</p>
    #[doc(hidden)]
    pub max_number_of_training_jobs: std::option::Option<std::string::String>,
    /// <p>The maximum number of parallel training jobs when you create a solution version. The maximum value for <code>maxParallelTrainingJobs</code> is <code>10</code>.</p>
    #[doc(hidden)]
    pub max_parallel_training_jobs: std::option::Option<std::string::String>,
}
impl HpoResourceConfig {
    /// <p>The maximum number of training jobs when you create a solution version. The maximum value for <code>maxNumberOfTrainingJobs</code> is <code>40</code>.</p>
    pub fn max_number_of_training_jobs(&self) -> std::option::Option<&str> {
        self.max_number_of_training_jobs.as_deref()
    }
    /// <p>The maximum number of parallel training jobs when you create a solution version. The maximum value for <code>maxParallelTrainingJobs</code> is <code>10</code>.</p>
    pub fn max_parallel_training_jobs(&self) -> std::option::Option<&str> {
        self.max_parallel_training_jobs.as_deref()
    }
}
impl HpoResourceConfig {
    /// Creates a new builder-style object to manufacture [`HpoResourceConfig`](crate::types::HpoResourceConfig).
    pub fn builder() -> crate::types::builders::HpoResourceConfigBuilder {
        crate::types::builders::HpoResourceConfigBuilder::default()
    }
}

/// A builder for [`HpoResourceConfig`](crate::types::HpoResourceConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HpoResourceConfigBuilder {
    pub(crate) max_number_of_training_jobs: std::option::Option<std::string::String>,
    pub(crate) max_parallel_training_jobs: std::option::Option<std::string::String>,
}
impl HpoResourceConfigBuilder {
    /// <p>The maximum number of training jobs when you create a solution version. The maximum value for <code>maxNumberOfTrainingJobs</code> is <code>40</code>.</p>
    pub fn max_number_of_training_jobs(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_number_of_training_jobs = Some(input.into());
        self
    }
    /// <p>The maximum number of training jobs when you create a solution version. The maximum value for <code>maxNumberOfTrainingJobs</code> is <code>40</code>.</p>
    pub fn set_max_number_of_training_jobs(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.max_number_of_training_jobs = input;
        self
    }
    /// <p>The maximum number of parallel training jobs when you create a solution version. The maximum value for <code>maxParallelTrainingJobs</code> is <code>10</code>.</p>
    pub fn max_parallel_training_jobs(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_parallel_training_jobs = Some(input.into());
        self
    }
    /// <p>The maximum number of parallel training jobs when you create a solution version. The maximum value for <code>maxParallelTrainingJobs</code> is <code>10</code>.</p>
    pub fn set_max_parallel_training_jobs(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.max_parallel_training_jobs = input;
        self
    }
    /// Consumes the builder and constructs a [`HpoResourceConfig`](crate::types::HpoResourceConfig).
    pub fn build(self) -> crate::types::HpoResourceConfig {
        crate::types::HpoResourceConfig {
            max_number_of_training_jobs: self.max_number_of_training_jobs,
            max_parallel_training_jobs: self.max_parallel_training_jobs,
        }
    }
}
