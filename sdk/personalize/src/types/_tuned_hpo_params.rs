// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>If hyperparameter optimization (HPO) was performed, contains the hyperparameter values of the best performing model.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TunedHpoParams {
    /// <p>A list of the hyperparameter values of the best performing model.</p>
    #[doc(hidden)]
    pub algorithm_hyper_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl TunedHpoParams {
    /// <p>A list of the hyperparameter values of the best performing model.</p>
    pub fn algorithm_hyper_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.algorithm_hyper_parameters.as_ref()
    }
}
impl TunedHpoParams {
    /// Creates a new builder-style object to manufacture [`TunedHpoParams`](crate::types::TunedHpoParams).
    pub fn builder() -> crate::types::builders::TunedHpoParamsBuilder {
        crate::types::builders::TunedHpoParamsBuilder::default()
    }
}

/// A builder for [`TunedHpoParams`](crate::types::TunedHpoParams).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TunedHpoParamsBuilder {
    pub(crate) algorithm_hyper_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl TunedHpoParamsBuilder {
    /// Adds a key-value pair to `algorithm_hyper_parameters`.
    ///
    /// To override the contents of this collection use [`set_algorithm_hyper_parameters`](Self::set_algorithm_hyper_parameters).
    ///
    /// <p>A list of the hyperparameter values of the best performing model.</p>
    pub fn algorithm_hyper_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.algorithm_hyper_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.algorithm_hyper_parameters = Some(hash_map);
        self
    }
    /// <p>A list of the hyperparameter values of the best performing model.</p>
    pub fn set_algorithm_hyper_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.algorithm_hyper_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`TunedHpoParams`](crate::types::TunedHpoParams).
    pub fn build(self) -> crate::types::TunedHpoParams {
        crate::types::TunedHpoParams {
            algorithm_hyper_parameters: self.algorithm_hyper_parameters,
        }
    }
}
