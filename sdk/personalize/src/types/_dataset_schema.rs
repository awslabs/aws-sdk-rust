// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the schema for a dataset. For more information on schemas, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateSchema.html">CreateSchema</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatasetSchema {
    /// <p>The name of the schema.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    #[doc(hidden)]
    pub schema_arn: std::option::Option<std::string::String>,
    /// <p>The schema.</p>
    #[doc(hidden)]
    pub schema: std::option::Option<std::string::String>,
    /// <p>The date and time (in Unix time) that the schema was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time (in Unix time) that the schema was last updated.</p>
    #[doc(hidden)]
    pub last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The domain of a schema that you created for a dataset in a Domain dataset group.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<crate::types::Domain>,
}
impl DatasetSchema {
    /// <p>The name of the schema.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    pub fn schema_arn(&self) -> std::option::Option<&str> {
        self.schema_arn.as_deref()
    }
    /// <p>The schema.</p>
    pub fn schema(&self) -> std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// <p>The date and time (in Unix time) that the schema was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time (in Unix time) that the schema was last updated.</p>
    pub fn last_updated_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>The domain of a schema that you created for a dataset in a Domain dataset group.</p>
    pub fn domain(&self) -> std::option::Option<&crate::types::Domain> {
        self.domain.as_ref()
    }
}
impl DatasetSchema {
    /// Creates a new builder-style object to manufacture [`DatasetSchema`](crate::types::DatasetSchema).
    pub fn builder() -> crate::types::builders::DatasetSchemaBuilder {
        crate::types::builders::DatasetSchemaBuilder::default()
    }
}

/// A builder for [`DatasetSchema`](crate::types::DatasetSchema).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatasetSchemaBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) schema_arn: std::option::Option<std::string::String>,
    pub(crate) schema: std::option::Option<std::string::String>,
    pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) domain: std::option::Option<crate::types::Domain>,
}
impl DatasetSchemaBuilder {
    /// <p>The name of the schema.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the schema.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    pub fn schema_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    pub fn set_schema_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_arn = input;
        self
    }
    /// <p>The schema.</p>
    pub fn schema(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema = Some(input.into());
        self
    }
    /// <p>The schema.</p>
    pub fn set_schema(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The date and time (in Unix time) that the schema was created.</p>
    pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = Some(input);
        self
    }
    /// <p>The date and time (in Unix time) that the schema was created.</p>
    pub fn set_creation_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time (in Unix time) that the schema was last updated.</p>
    pub fn last_updated_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = Some(input);
        self
    }
    /// <p>The date and time (in Unix time) that the schema was last updated.</p>
    pub fn set_last_updated_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>The domain of a schema that you created for a dataset in a Domain dataset group.</p>
    pub fn domain(mut self, input: crate::types::Domain) -> Self {
        self.domain = Some(input);
        self
    }
    /// <p>The domain of a schema that you created for a dataset in a Domain dataset group.</p>
    pub fn set_domain(mut self, input: std::option::Option<crate::types::Domain>) -> Self {
        self.domain = input;
        self
    }
    /// Consumes the builder and constructs a [`DatasetSchema`](crate::types::DatasetSchema).
    pub fn build(self) -> crate::types::DatasetSchema {
        crate::types::DatasetSchema {
            name: self.name,
            schema_arn: self.schema_arn,
            schema: self.schema,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
            domain: self.domain,
        }
    }
}
