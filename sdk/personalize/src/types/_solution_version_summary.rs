// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of the properties of a solution version. For a complete listing, call the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_DescribeSolutionVersion.html">DescribeSolutionVersion</a> API.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SolutionVersionSummary {
    /// <p>The Amazon Resource Name (ARN) of the solution version.</p>
    pub solution_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the solution version.</p>
    /// <p>A solution version can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p></li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The scope of training to be performed when creating the solution version. A <code>FULL</code> training considers all of the data in your dataset group. An <code>UPDATE</code> processes only the data that has changed since the latest training. Only solution versions created with the User-Personalization recipe can use <code>UPDATE</code>.</p>
    pub training_mode: ::std::option::Option<crate::types::TrainingMode>,
    /// <p>Whether the solution version was created automatically or manually.</p>
    pub training_type: ::std::option::Option<crate::types::TrainingType>,
    /// <p>The date and time (in Unix time) that this version of a solution was created.</p>
    pub creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time (in Unix time) that the solution version was last updated.</p>
    pub last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If a solution version fails, the reason behind the failure.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
}
impl SolutionVersionSummary {
    /// <p>The Amazon Resource Name (ARN) of the solution version.</p>
    pub fn solution_version_arn(&self) -> ::std::option::Option<&str> {
        self.solution_version_arn.as_deref()
    }
    /// <p>The status of the solution version.</p>
    /// <p>A solution version can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The scope of training to be performed when creating the solution version. A <code>FULL</code> training considers all of the data in your dataset group. An <code>UPDATE</code> processes only the data that has changed since the latest training. Only solution versions created with the User-Personalization recipe can use <code>UPDATE</code>.</p>
    pub fn training_mode(&self) -> ::std::option::Option<&crate::types::TrainingMode> {
        self.training_mode.as_ref()
    }
    /// <p>Whether the solution version was created automatically or manually.</p>
    pub fn training_type(&self) -> ::std::option::Option<&crate::types::TrainingType> {
        self.training_type.as_ref()
    }
    /// <p>The date and time (in Unix time) that this version of a solution was created.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time (in Unix time) that the solution version was last updated.</p>
    pub fn last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>If a solution version fails, the reason behind the failure.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl SolutionVersionSummary {
    /// Creates a new builder-style object to manufacture [`SolutionVersionSummary`](crate::types::SolutionVersionSummary).
    pub fn builder() -> crate::types::builders::SolutionVersionSummaryBuilder {
        crate::types::builders::SolutionVersionSummaryBuilder::default()
    }
}

/// A builder for [`SolutionVersionSummary`](crate::types::SolutionVersionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SolutionVersionSummaryBuilder {
    pub(crate) solution_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) training_mode: ::std::option::Option<crate::types::TrainingMode>,
    pub(crate) training_type: ::std::option::Option<crate::types::TrainingType>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
}
impl SolutionVersionSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the solution version.</p>
    pub fn solution_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.solution_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the solution version.</p>
    pub fn set_solution_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.solution_version_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the solution version.</p>
    pub fn get_solution_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.solution_version_arn
    }
    /// <p>The status of the solution version.</p>
    /// <p>A solution version can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p></li>
    /// </ul>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the solution version.</p>
    /// <p>A solution version can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the solution version.</p>
    /// <p>A solution version can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The scope of training to be performed when creating the solution version. A <code>FULL</code> training considers all of the data in your dataset group. An <code>UPDATE</code> processes only the data that has changed since the latest training. Only solution versions created with the User-Personalization recipe can use <code>UPDATE</code>.</p>
    pub fn training_mode(mut self, input: crate::types::TrainingMode) -> Self {
        self.training_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of training to be performed when creating the solution version. A <code>FULL</code> training considers all of the data in your dataset group. An <code>UPDATE</code> processes only the data that has changed since the latest training. Only solution versions created with the User-Personalization recipe can use <code>UPDATE</code>.</p>
    pub fn set_training_mode(mut self, input: ::std::option::Option<crate::types::TrainingMode>) -> Self {
        self.training_mode = input;
        self
    }
    /// <p>The scope of training to be performed when creating the solution version. A <code>FULL</code> training considers all of the data in your dataset group. An <code>UPDATE</code> processes only the data that has changed since the latest training. Only solution versions created with the User-Personalization recipe can use <code>UPDATE</code>.</p>
    pub fn get_training_mode(&self) -> &::std::option::Option<crate::types::TrainingMode> {
        &self.training_mode
    }
    /// <p>Whether the solution version was created automatically or manually.</p>
    pub fn training_type(mut self, input: crate::types::TrainingType) -> Self {
        self.training_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the solution version was created automatically or manually.</p>
    pub fn set_training_type(mut self, input: ::std::option::Option<crate::types::TrainingType>) -> Self {
        self.training_type = input;
        self
    }
    /// <p>Whether the solution version was created automatically or manually.</p>
    pub fn get_training_type(&self) -> &::std::option::Option<crate::types::TrainingType> {
        &self.training_type
    }
    /// <p>The date and time (in Unix time) that this version of a solution was created.</p>
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time (in Unix time) that this version of a solution was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time (in Unix time) that this version of a solution was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>The date and time (in Unix time) that the solution version was last updated.</p>
    pub fn last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time (in Unix time) that the solution version was last updated.</p>
    pub fn set_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>The date and time (in Unix time) that the solution version was last updated.</p>
    pub fn get_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date_time
    }
    /// <p>If a solution version fails, the reason behind the failure.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If a solution version fails, the reason behind the failure.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>If a solution version fails, the reason behind the failure.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Consumes the builder and constructs a [`SolutionVersionSummary`](crate::types::SolutionVersionSummary).
    pub fn build(self) -> crate::types::SolutionVersionSummary {
        crate::types::SolutionVersionSummary {
            solution_version_arn: self.solution_version_arn,
            status: self.status,
            training_mode: self.training_mode,
            training_type: self.training_type,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
            failure_reason: self.failure_reason,
        }
    }
}
