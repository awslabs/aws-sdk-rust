// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an algorithm image.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AlgorithmImage {
    /// <p>The name of the algorithm image.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The URI of the Docker container for the algorithm image.</p>
    #[doc(hidden)]
    pub docker_uri: std::option::Option<std::string::String>,
}
impl AlgorithmImage {
    /// <p>The name of the algorithm image.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The URI of the Docker container for the algorithm image.</p>
    pub fn docker_uri(&self) -> std::option::Option<&str> {
        self.docker_uri.as_deref()
    }
}
impl AlgorithmImage {
    /// Creates a new builder-style object to manufacture [`AlgorithmImage`](crate::types::AlgorithmImage).
    pub fn builder() -> crate::types::builders::AlgorithmImageBuilder {
        crate::types::builders::AlgorithmImageBuilder::default()
    }
}

/// A builder for [`AlgorithmImage`](crate::types::AlgorithmImage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AlgorithmImageBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) docker_uri: std::option::Option<std::string::String>,
}
impl AlgorithmImageBuilder {
    /// <p>The name of the algorithm image.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the algorithm image.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The URI of the Docker container for the algorithm image.</p>
    pub fn docker_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.docker_uri = Some(input.into());
        self
    }
    /// <p>The URI of the Docker container for the algorithm image.</p>
    pub fn set_docker_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.docker_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`AlgorithmImage`](crate::types::AlgorithmImage).
    pub fn build(self) -> crate::types::AlgorithmImage {
        crate::types::AlgorithmImage {
            name: self.name,
            docker_uri: self.docker_uri,
        }
    }
}
