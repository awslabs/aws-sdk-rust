// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the hyperparameters and their ranges. Hyperparameters can be categorical, continuous, or integer-valued.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HyperParameterRanges {
    /// <p>The integer-valued hyperparameters and their ranges.</p>
    #[doc(hidden)]
    pub integer_hyper_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::IntegerHyperParameterRange>>,
    /// <p>The continuous hyperparameters and their ranges.</p>
    #[doc(hidden)]
    pub continuous_hyper_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::ContinuousHyperParameterRange>>,
    /// <p>The categorical hyperparameters and their ranges.</p>
    #[doc(hidden)]
    pub categorical_hyper_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::CategoricalHyperParameterRange>>,
}
impl HyperParameterRanges {
    /// <p>The integer-valued hyperparameters and their ranges.</p>
    pub fn integer_hyper_parameter_ranges(
        &self,
    ) -> std::option::Option<&[crate::types::IntegerHyperParameterRange]> {
        self.integer_hyper_parameter_ranges.as_deref()
    }
    /// <p>The continuous hyperparameters and their ranges.</p>
    pub fn continuous_hyper_parameter_ranges(
        &self,
    ) -> std::option::Option<&[crate::types::ContinuousHyperParameterRange]> {
        self.continuous_hyper_parameter_ranges.as_deref()
    }
    /// <p>The categorical hyperparameters and their ranges.</p>
    pub fn categorical_hyper_parameter_ranges(
        &self,
    ) -> std::option::Option<&[crate::types::CategoricalHyperParameterRange]> {
        self.categorical_hyper_parameter_ranges.as_deref()
    }
}
impl HyperParameterRanges {
    /// Creates a new builder-style object to manufacture [`HyperParameterRanges`](crate::types::HyperParameterRanges).
    pub fn builder() -> crate::types::builders::HyperParameterRangesBuilder {
        crate::types::builders::HyperParameterRangesBuilder::default()
    }
}

/// A builder for [`HyperParameterRanges`](crate::types::HyperParameterRanges).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HyperParameterRangesBuilder {
    pub(crate) integer_hyper_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::IntegerHyperParameterRange>>,
    pub(crate) continuous_hyper_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::ContinuousHyperParameterRange>>,
    pub(crate) categorical_hyper_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::CategoricalHyperParameterRange>>,
}
impl HyperParameterRangesBuilder {
    /// Appends an item to `integer_hyper_parameter_ranges`.
    ///
    /// To override the contents of this collection use [`set_integer_hyper_parameter_ranges`](Self::set_integer_hyper_parameter_ranges).
    ///
    /// <p>The integer-valued hyperparameters and their ranges.</p>
    pub fn integer_hyper_parameter_ranges(
        mut self,
        input: crate::types::IntegerHyperParameterRange,
    ) -> Self {
        let mut v = self.integer_hyper_parameter_ranges.unwrap_or_default();
        v.push(input);
        self.integer_hyper_parameter_ranges = Some(v);
        self
    }
    /// <p>The integer-valued hyperparameters and their ranges.</p>
    pub fn set_integer_hyper_parameter_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::IntegerHyperParameterRange>>,
    ) -> Self {
        self.integer_hyper_parameter_ranges = input;
        self
    }
    /// Appends an item to `continuous_hyper_parameter_ranges`.
    ///
    /// To override the contents of this collection use [`set_continuous_hyper_parameter_ranges`](Self::set_continuous_hyper_parameter_ranges).
    ///
    /// <p>The continuous hyperparameters and their ranges.</p>
    pub fn continuous_hyper_parameter_ranges(
        mut self,
        input: crate::types::ContinuousHyperParameterRange,
    ) -> Self {
        let mut v = self.continuous_hyper_parameter_ranges.unwrap_or_default();
        v.push(input);
        self.continuous_hyper_parameter_ranges = Some(v);
        self
    }
    /// <p>The continuous hyperparameters and their ranges.</p>
    pub fn set_continuous_hyper_parameter_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ContinuousHyperParameterRange>>,
    ) -> Self {
        self.continuous_hyper_parameter_ranges = input;
        self
    }
    /// Appends an item to `categorical_hyper_parameter_ranges`.
    ///
    /// To override the contents of this collection use [`set_categorical_hyper_parameter_ranges`](Self::set_categorical_hyper_parameter_ranges).
    ///
    /// <p>The categorical hyperparameters and their ranges.</p>
    pub fn categorical_hyper_parameter_ranges(
        mut self,
        input: crate::types::CategoricalHyperParameterRange,
    ) -> Self {
        let mut v = self.categorical_hyper_parameter_ranges.unwrap_or_default();
        v.push(input);
        self.categorical_hyper_parameter_ranges = Some(v);
        self
    }
    /// <p>The categorical hyperparameters and their ranges.</p>
    pub fn set_categorical_hyper_parameter_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CategoricalHyperParameterRange>>,
    ) -> Self {
        self.categorical_hyper_parameter_ranges = input;
        self
    }
    /// Consumes the builder and constructs a [`HyperParameterRanges`](crate::types::HyperParameterRanges).
    pub fn build(self) -> crate::types::HyperParameterRanges {
        crate::types::HyperParameterRanges {
            integer_hyper_parameter_ranges: self.integer_hyper_parameter_ranges,
            continuous_hyper_parameter_ranges: self.continuous_hyper_parameter_ranges,
            categorical_hyper_parameter_ranges: self.categorical_hyper_parameter_ranges,
        }
    }
}
