// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that provides information about a solution. A solution is a trained model that can be deployed as a campaign.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Solution {
    /// <p>The name of the solution.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ARN of the solution.</p>
    #[doc(hidden)]
    pub solution_arn: std::option::Option<std::string::String>,
    /// <p>Whether to perform hyperparameter optimization (HPO) on the chosen recipe. The default is <code>false</code>.</p>
    #[doc(hidden)]
    pub perform_hpo: bool,
    /// <p>When true, Amazon Personalize performs a search for the best USER_PERSONALIZATION recipe from the list specified in the solution configuration (<code>recipeArn</code> must not be specified). When false (the default), Amazon Personalize uses <code>recipeArn</code> for training.</p>
    #[doc(hidden)]
    pub perform_auto_ml: bool,
    /// <p>The ARN of the recipe used to create the solution.</p>
    #[doc(hidden)]
    pub recipe_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dataset group that provides the training data.</p>
    #[doc(hidden)]
    pub dataset_group_arn: std::option::Option<std::string::String>,
    /// <p>The event type (for example, 'click' or 'like') that is used for training the model. If no <code>eventType</code> is provided, Amazon Personalize uses all interactions for training with equal weight regardless of type.</p>
    #[doc(hidden)]
    pub event_type: std::option::Option<std::string::String>,
    /// <p>Describes the configuration properties for the solution.</p>
    #[doc(hidden)]
    pub solution_config: std::option::Option<crate::types::SolutionConfig>,
    /// <p>When <code>performAutoML</code> is true, specifies the best recipe found.</p>
    #[doc(hidden)]
    pub auto_ml_result: std::option::Option<crate::types::AutoMlResult>,
    /// <p>The status of the solution.</p>
    /// <p>A solution can be in one of the following states:</p>
    /// <ul>
    /// <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li>
    /// <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The creation date and time (in Unix time) of the solution.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time (in Unix time) that the solution was last updated.</p>
    #[doc(hidden)]
    pub last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Describes the latest version of the solution, including the status and the ARN.</p>
    #[doc(hidden)]
    pub latest_solution_version: std::option::Option<crate::types::SolutionVersionSummary>,
}
impl Solution {
    /// <p>The name of the solution.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the solution.</p>
    pub fn solution_arn(&self) -> std::option::Option<&str> {
        self.solution_arn.as_deref()
    }
    /// <p>Whether to perform hyperparameter optimization (HPO) on the chosen recipe. The default is <code>false</code>.</p>
    pub fn perform_hpo(&self) -> bool {
        self.perform_hpo
    }
    /// <p>When true, Amazon Personalize performs a search for the best USER_PERSONALIZATION recipe from the list specified in the solution configuration (<code>recipeArn</code> must not be specified). When false (the default), Amazon Personalize uses <code>recipeArn</code> for training.</p>
    pub fn perform_auto_ml(&self) -> bool {
        self.perform_auto_ml
    }
    /// <p>The ARN of the recipe used to create the solution.</p>
    pub fn recipe_arn(&self) -> std::option::Option<&str> {
        self.recipe_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset group that provides the training data.</p>
    pub fn dataset_group_arn(&self) -> std::option::Option<&str> {
        self.dataset_group_arn.as_deref()
    }
    /// <p>The event type (for example, 'click' or 'like') that is used for training the model. If no <code>eventType</code> is provided, Amazon Personalize uses all interactions for training with equal weight regardless of type.</p>
    pub fn event_type(&self) -> std::option::Option<&str> {
        self.event_type.as_deref()
    }
    /// <p>Describes the configuration properties for the solution.</p>
    pub fn solution_config(&self) -> std::option::Option<&crate::types::SolutionConfig> {
        self.solution_config.as_ref()
    }
    /// <p>When <code>performAutoML</code> is true, specifies the best recipe found.</p>
    pub fn auto_ml_result(&self) -> std::option::Option<&crate::types::AutoMlResult> {
        self.auto_ml_result.as_ref()
    }
    /// <p>The status of the solution.</p>
    /// <p>A solution can be in one of the following states:</p>
    /// <ul>
    /// <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li>
    /// <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The creation date and time (in Unix time) of the solution.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time (in Unix time) that the solution was last updated.</p>
    pub fn last_updated_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>Describes the latest version of the solution, including the status and the ARN.</p>
    pub fn latest_solution_version(
        &self,
    ) -> std::option::Option<&crate::types::SolutionVersionSummary> {
        self.latest_solution_version.as_ref()
    }
}
impl Solution {
    /// Creates a new builder-style object to manufacture [`Solution`](crate::types::Solution).
    pub fn builder() -> crate::types::builders::SolutionBuilder {
        crate::types::builders::SolutionBuilder::default()
    }
}

/// A builder for [`Solution`](crate::types::Solution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SolutionBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) solution_arn: std::option::Option<std::string::String>,
    pub(crate) perform_hpo: std::option::Option<bool>,
    pub(crate) perform_auto_ml: std::option::Option<bool>,
    pub(crate) recipe_arn: std::option::Option<std::string::String>,
    pub(crate) dataset_group_arn: std::option::Option<std::string::String>,
    pub(crate) event_type: std::option::Option<std::string::String>,
    pub(crate) solution_config: std::option::Option<crate::types::SolutionConfig>,
    pub(crate) auto_ml_result: std::option::Option<crate::types::AutoMlResult>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) latest_solution_version: std::option::Option<crate::types::SolutionVersionSummary>,
}
impl SolutionBuilder {
    /// <p>The name of the solution.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the solution.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ARN of the solution.</p>
    pub fn solution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.solution_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the solution.</p>
    pub fn set_solution_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.solution_arn = input;
        self
    }
    /// <p>Whether to perform hyperparameter optimization (HPO) on the chosen recipe. The default is <code>false</code>.</p>
    pub fn perform_hpo(mut self, input: bool) -> Self {
        self.perform_hpo = Some(input);
        self
    }
    /// <p>Whether to perform hyperparameter optimization (HPO) on the chosen recipe. The default is <code>false</code>.</p>
    pub fn set_perform_hpo(mut self, input: std::option::Option<bool>) -> Self {
        self.perform_hpo = input;
        self
    }
    /// <p>When true, Amazon Personalize performs a search for the best USER_PERSONALIZATION recipe from the list specified in the solution configuration (<code>recipeArn</code> must not be specified). When false (the default), Amazon Personalize uses <code>recipeArn</code> for training.</p>
    pub fn perform_auto_ml(mut self, input: bool) -> Self {
        self.perform_auto_ml = Some(input);
        self
    }
    /// <p>When true, Amazon Personalize performs a search for the best USER_PERSONALIZATION recipe from the list specified in the solution configuration (<code>recipeArn</code> must not be specified). When false (the default), Amazon Personalize uses <code>recipeArn</code> for training.</p>
    pub fn set_perform_auto_ml(mut self, input: std::option::Option<bool>) -> Self {
        self.perform_auto_ml = input;
        self
    }
    /// <p>The ARN of the recipe used to create the solution.</p>
    pub fn recipe_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.recipe_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the recipe used to create the solution.</p>
    pub fn set_recipe_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.recipe_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset group that provides the training data.</p>
    pub fn dataset_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset group that provides the training data.</p>
    pub fn set_dataset_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dataset_group_arn = input;
        self
    }
    /// <p>The event type (for example, 'click' or 'like') that is used for training the model. If no <code>eventType</code> is provided, Amazon Personalize uses all interactions for training with equal weight regardless of type.</p>
    pub fn event_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_type = Some(input.into());
        self
    }
    /// <p>The event type (for example, 'click' or 'like') that is used for training the model. If no <code>eventType</code> is provided, Amazon Personalize uses all interactions for training with equal weight regardless of type.</p>
    pub fn set_event_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>Describes the configuration properties for the solution.</p>
    pub fn solution_config(mut self, input: crate::types::SolutionConfig) -> Self {
        self.solution_config = Some(input);
        self
    }
    /// <p>Describes the configuration properties for the solution.</p>
    pub fn set_solution_config(
        mut self,
        input: std::option::Option<crate::types::SolutionConfig>,
    ) -> Self {
        self.solution_config = input;
        self
    }
    /// <p>When <code>performAutoML</code> is true, specifies the best recipe found.</p>
    pub fn auto_ml_result(mut self, input: crate::types::AutoMlResult) -> Self {
        self.auto_ml_result = Some(input);
        self
    }
    /// <p>When <code>performAutoML</code> is true, specifies the best recipe found.</p>
    pub fn set_auto_ml_result(
        mut self,
        input: std::option::Option<crate::types::AutoMlResult>,
    ) -> Self {
        self.auto_ml_result = input;
        self
    }
    /// <p>The status of the solution.</p>
    /// <p>A solution can be in one of the following states:</p>
    /// <ul>
    /// <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li>
    /// <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the solution.</p>
    /// <p>A solution can be in one of the following states:</p>
    /// <ul>
    /// <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li>
    /// <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The creation date and time (in Unix time) of the solution.</p>
    pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = Some(input);
        self
    }
    /// <p>The creation date and time (in Unix time) of the solution.</p>
    pub fn set_creation_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time (in Unix time) that the solution was last updated.</p>
    pub fn last_updated_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = Some(input);
        self
    }
    /// <p>The date and time (in Unix time) that the solution was last updated.</p>
    pub fn set_last_updated_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>Describes the latest version of the solution, including the status and the ARN.</p>
    pub fn latest_solution_version(mut self, input: crate::types::SolutionVersionSummary) -> Self {
        self.latest_solution_version = Some(input);
        self
    }
    /// <p>Describes the latest version of the solution, including the status and the ARN.</p>
    pub fn set_latest_solution_version(
        mut self,
        input: std::option::Option<crate::types::SolutionVersionSummary>,
    ) -> Self {
        self.latest_solution_version = input;
        self
    }
    /// Consumes the builder and constructs a [`Solution`](crate::types::Solution).
    pub fn build(self) -> crate::types::Solution {
        crate::types::Solution {
            name: self.name,
            solution_arn: self.solution_arn,
            perform_hpo: self.perform_hpo.unwrap_or_default(),
            perform_auto_ml: self.perform_auto_ml.unwrap_or_default(),
            recipe_arn: self.recipe_arn,
            dataset_group_arn: self.dataset_group_arn,
            event_type: self.event_type,
            solution_config: self.solution_config,
            auto_ml_result: self.auto_ml_result,
            status: self.status,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
            latest_solution_version: self.latest_solution_version,
        }
    }
}
