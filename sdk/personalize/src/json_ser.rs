// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_batch_inference_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBatchInferenceJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.job_name {
        object.key("jobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.solution_version_arn {
        object.key("solutionVersionArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.filter_arn {
        object.key("filterArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.num_results {
        object.key("numResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.job_input {
        let mut object_6 = object.key("jobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_inference_job_input(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.job_output {
        let mut object_8 = object.key("jobOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_inference_job_output(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.role_arn {
        object.key("roleArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.batch_inference_job_config {
        let mut object_11 = object.key("batchInferenceJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_inference_job_config(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_batch_segment_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBatchSegmentJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.job_name {
        object.key("jobName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.solution_version_arn {
        object.key("solutionVersionArn").string(var_13.as_str());
    }
    if let Some(var_14) = &input.filter_arn {
        object.key("filterArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.num_results {
        object.key("numResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.job_input {
        let mut object_17 = object.key("jobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_segment_job_input(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.job_output {
        let mut object_19 = object.key("jobOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_segment_job_output(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    if let Some(var_20) = &input.role_arn {
        object.key("roleArn").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_campaign_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCampaignInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.name {
        object.key("name").string(var_21.as_str());
    }
    if let Some(var_22) = &input.solution_version_arn {
        object.key("solutionVersionArn").string(var_22.as_str());
    }
    if let Some(var_23) = &input.min_provisioned_tps {
        object.key("minProvisionedTPS").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    if let Some(var_24) = &input.campaign_config {
        let mut object_25 = object.key("campaignConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_config(&mut object_25, var_24)?;
        object_25.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.name {
        object.key("name").string(var_26.as_str());
    }
    if let Some(var_27) = &input.schema_arn {
        object.key("schemaArn").string(var_27.as_str());
    }
    if let Some(var_28) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_28.as_str());
    }
    if let Some(var_29) = &input.dataset_type {
        object.key("datasetType").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dataset_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.job_name {
        object.key("jobName").string(var_30.as_str());
    }
    if let Some(var_31) = &input.dataset_arn {
        object.key("datasetArn").string(var_31.as_str());
    }
    if let Some(var_32) = &input.ingestion_mode {
        object.key("ingestionMode").string(var_32.as_str());
    }
    if let Some(var_33) = &input.role_arn {
        object.key("roleArn").string(var_33.as_str());
    }
    if let Some(var_34) = &input.job_output {
        let mut object_35 = object.key("jobOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_export_job_output(
            &mut object_35,
            var_34,
        )?;
        object_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dataset_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.name {
        object.key("name").string(var_36.as_str());
    }
    if let Some(var_37) = &input.role_arn {
        object.key("roleArn").string(var_37.as_str());
    }
    if let Some(var_38) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_38.as_str());
    }
    if let Some(var_39) = &input.domain {
        object.key("domain").string(var_39.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dataset_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.job_name {
        object.key("jobName").string(var_40.as_str());
    }
    if let Some(var_41) = &input.dataset_arn {
        object.key("datasetArn").string(var_41.as_str());
    }
    if let Some(var_42) = &input.data_source {
        let mut object_43 = object.key("dataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_43, var_42)?;
        object_43.finish();
    }
    if let Some(var_44) = &input.role_arn {
        object.key("roleArn").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_event_tracker_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventTrackerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.name {
        object.key("name").string(var_45.as_str());
    }
    if let Some(var_46) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.name {
        object.key("name").string(var_47.as_str());
    }
    if let Some(var_48) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_48.as_str());
    }
    if let Some(var_49) = &input.filter_expression {
        object.key("filterExpression").string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_recommender_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRecommenderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.name {
        object.key("name").string(var_50.as_str());
    }
    if let Some(var_51) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_51.as_str());
    }
    if let Some(var_52) = &input.recipe_arn {
        object.key("recipeArn").string(var_52.as_str());
    }
    if let Some(var_53) = &input.recommender_config {
        let mut object_54 = object.key("recommenderConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommender_config(
            &mut object_54,
            var_53,
        )?;
        object_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.name {
        object.key("name").string(var_55.as_str());
    }
    if let Some(var_56) = &input.schema {
        object.key("schema").string(var_56.as_str());
    }
    if let Some(var_57) = &input.domain {
        object.key("domain").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_solution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSolutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.name {
        object.key("name").string(var_58.as_str());
    }
    if let Some(var_59) = &input.perform_hpo {
        object.key("performHPO").boolean(*var_59);
    }
    if input.perform_auto_ml {
        object.key("performAutoML").boolean(input.perform_auto_ml);
    }
    if let Some(var_60) = &input.recipe_arn {
        object.key("recipeArn").string(var_60.as_str());
    }
    if let Some(var_61) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_61.as_str());
    }
    if let Some(var_62) = &input.event_type {
        object.key("eventType").string(var_62.as_str());
    }
    if let Some(var_63) = &input.solution_config {
        let mut object_64 = object.key("solutionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_solution_config(&mut object_64, var_63)?;
        object_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_solution_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSolutionVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.solution_arn {
        object.key("solutionArn").string(var_65.as_str());
    }
    if let Some(var_66) = &input.training_mode {
        object.key("trainingMode").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_campaign_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCampaignInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.campaign_arn {
        object.key("campaignArn").string(var_67.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.dataset_arn {
        object.key("datasetArn").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dataset_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatasetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_event_tracker_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEventTrackerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.event_tracker_arn {
        object.key("eventTrackerArn").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.filter_arn {
        object.key("filterArn").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_recommender_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRecommenderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.recommender_arn {
        object.key("recommenderArn").string(var_72.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.schema_arn {
        object.key("schemaArn").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_solution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSolutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.solution_arn {
        object.key("solutionArn").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.algorithm_arn {
        object.key("algorithmArn").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_batch_inference_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBatchInferenceJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.batch_inference_job_arn {
        object.key("batchInferenceJobArn").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_batch_segment_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBatchSegmentJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.batch_segment_job_arn {
        object.key("batchSegmentJobArn").string(var_77.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_campaign_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCampaignInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.campaign_arn {
        object.key("campaignArn").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.dataset_arn {
        object.key("datasetArn").string(var_79.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_dataset_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.dataset_export_job_arn {
        object.key("datasetExportJobArn").string(var_80.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_dataset_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_81.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_dataset_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.dataset_import_job_arn {
        object.key("datasetImportJobArn").string(var_82.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_event_tracker_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventTrackerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.event_tracker_arn {
        object.key("eventTrackerArn").string(var_83.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_feature_transformation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureTransformationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.feature_transformation_arn {
        object
            .key("featureTransformationArn")
            .string(var_84.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.filter_arn {
        object.key("filterArn").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_recipe_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRecipeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.recipe_arn {
        object.key("recipeArn").string(var_86.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_recommender_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRecommenderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.recommender_arn {
        object.key("recommenderArn").string(var_87.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.schema_arn {
        object.key("schemaArn").string(var_88.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_solution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSolutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.solution_arn {
        object.key("solutionArn").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_solution_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSolutionVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.solution_version_arn {
        object.key("solutionVersionArn").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_solution_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSolutionMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.solution_version_arn {
        object.key("solutionVersionArn").string(var_91.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_batch_inference_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBatchInferenceJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.solution_version_arn {
        object.key("solutionVersionArn").string(var_92.as_str());
    }
    if let Some(var_93) = &input.next_token {
        object.key("nextToken").string(var_93.as_str());
    }
    if let Some(var_94) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_batch_segment_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBatchSegmentJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.solution_version_arn {
        object.key("solutionVersionArn").string(var_95.as_str());
    }
    if let Some(var_96) = &input.next_token {
        object.key("nextToken").string(var_96.as_str());
    }
    if let Some(var_97) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_campaigns_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCampaignsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.solution_arn {
        object.key("solutionArn").string(var_98.as_str());
    }
    if let Some(var_99) = &input.next_token {
        object.key("nextToken").string(var_99.as_str());
    }
    if let Some(var_100) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_100).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dataset_export_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetExportJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.dataset_arn {
        object.key("datasetArn").string(var_101.as_str());
    }
    if let Some(var_102) = &input.next_token {
        object.key("nextToken").string(var_102.as_str());
    }
    if let Some(var_103) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_103).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dataset_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.next_token {
        object.key("nextToken").string(var_104.as_str());
    }
    if let Some(var_105) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_105).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dataset_import_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetImportJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.dataset_arn {
        object.key("datasetArn").string(var_106.as_str());
    }
    if let Some(var_107) = &input.next_token {
        object.key("nextToken").string(var_107.as_str());
    }
    if let Some(var_108) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_108).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_datasets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_109.as_str());
    }
    if let Some(var_110) = &input.next_token {
        object.key("nextToken").string(var_110.as_str());
    }
    if let Some(var_111) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_event_trackers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEventTrackersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_112.as_str());
    }
    if let Some(var_113) = &input.next_token {
        object.key("nextToken").string(var_113.as_str());
    }
    if let Some(var_114) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_114).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_filters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFiltersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_115.as_str());
    }
    if let Some(var_116) = &input.next_token {
        object.key("nextToken").string(var_116.as_str());
    }
    if let Some(var_117) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_117).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_recipes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRecipesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.recipe_provider {
        object.key("recipeProvider").string(var_118.as_str());
    }
    if let Some(var_119) = &input.next_token {
        object.key("nextToken").string(var_119.as_str());
    }
    if let Some(var_120) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_120).into()),
        );
    }
    if let Some(var_121) = &input.domain {
        object.key("domain").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_recommenders_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRecommendersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_122.as_str());
    }
    if let Some(var_123) = &input.next_token {
        object.key("nextToken").string(var_123.as_str());
    }
    if let Some(var_124) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_124).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.next_token {
        object.key("nextToken").string(var_125.as_str());
    }
    if let Some(var_126) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_126).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_solutions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSolutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.dataset_group_arn {
        object.key("datasetGroupArn").string(var_127.as_str());
    }
    if let Some(var_128) = &input.next_token {
        object.key("nextToken").string(var_128.as_str());
    }
    if let Some(var_129) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_129).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_solution_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSolutionVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.solution_arn {
        object.key("solutionArn").string(var_130.as_str());
    }
    if let Some(var_131) = &input.next_token {
        object.key("nextToken").string(var_131.as_str());
    }
    if let Some(var_132) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_132).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_solution_version_creation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopSolutionVersionCreationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.solution_version_arn {
        object.key("solutionVersionArn").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_campaign_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCampaignInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.campaign_arn {
        object.key("campaignArn").string(var_134.as_str());
    }
    if let Some(var_135) = &input.solution_version_arn {
        object.key("solutionVersionArn").string(var_135.as_str());
    }
    if let Some(var_136) = &input.min_provisioned_tps {
        object.key("minProvisionedTPS").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    if let Some(var_137) = &input.campaign_config {
        let mut object_138 = object.key("campaignConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_config(&mut object_138, var_137)?;
        object_138.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_recommender_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRecommenderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.recommender_arn {
        object.key("recommenderArn").string(var_139.as_str());
    }
    if let Some(var_140) = &input.recommender_config {
        let mut object_141 = object.key("recommenderConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommender_config(
            &mut object_141,
            var_140,
        )?;
        object_141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_inference_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchInferenceJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.s3_data_source {
        let mut object_143 = object.key("s3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_config(&mut object_143, var_142)?;
        object_143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_inference_job_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchInferenceJobOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.s3_data_destination {
        let mut object_145 = object.key("s3DataDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_config(&mut object_145, var_144)?;
        object_145.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_inference_job_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchInferenceJobConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.item_exploration_config {
        let mut object_147 = object.key("itemExplorationConfig").start_object();
        for (key_148, value_149) in var_146 {
            {
                object_147.key(key_148).string(value_149.as_str());
            }
        }
        object_147.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_segment_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchSegmentJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.s3_data_source {
        let mut object_151 = object.key("s3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_config(&mut object_151, var_150)?;
        object_151.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_segment_job_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchSegmentJobOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.s3_data_destination {
        let mut object_153 = object.key("s3DataDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_config(&mut object_153, var_152)?;
        object_153.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_campaign_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CampaignConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.item_exploration_config {
        let mut object_155 = object.key("itemExplorationConfig").start_object();
        for (key_156, value_157) in var_154 {
            {
                object_155.key(key_156).string(value_157.as_str());
            }
        }
        object_155.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_export_job_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetExportJobOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.s3_data_destination {
        let mut object_159 = object.key("s3DataDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_config(&mut object_159, var_158)?;
        object_159.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.data_location {
        object.key("dataLocation").string(var_160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommender_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommenderConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.item_exploration_config {
        let mut object_162 = object.key("itemExplorationConfig").start_object();
        for (key_163, value_164) in var_161 {
            {
                object_162.key(key_163).string(value_164.as_str());
            }
        }
        object_162.finish();
    }
    if let Some(var_165) = &input.min_recommendation_requests_per_second {
        object.key("minRecommendationRequestsPerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_165).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_solution_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SolutionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.event_value_threshold {
        object.key("eventValueThreshold").string(var_166.as_str());
    }
    if let Some(var_167) = &input.hpo_config {
        let mut object_168 = object.key("hpoConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hpo_config(&mut object_168, var_167)?;
        object_168.finish();
    }
    if let Some(var_169) = &input.algorithm_hyper_parameters {
        let mut object_170 = object.key("algorithmHyperParameters").start_object();
        for (key_171, value_172) in var_169 {
            {
                object_170.key(key_171).string(value_172.as_str());
            }
        }
        object_170.finish();
    }
    if let Some(var_173) = &input.feature_transformation_parameters {
        let mut object_174 = object.key("featureTransformationParameters").start_object();
        for (key_175, value_176) in var_173 {
            {
                object_174.key(key_175).string(value_176.as_str());
            }
        }
        object_174.finish();
    }
    if let Some(var_177) = &input.auto_ml_config {
        let mut object_178 = object.key("autoMLConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_config(&mut object_178, var_177)?;
        object_178.finish();
    }
    if let Some(var_179) = &input.optimization_objective {
        let mut object_180 = object.key("optimizationObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_optimization_objective(
            &mut object_180,
            var_179,
        )?;
        object_180.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.path {
        object.key("path").string(var_181.as_str());
    }
    if let Some(var_182) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hpo_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HpoConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.hpo_objective {
        let mut object_184 = object.key("hpoObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_hpo_objective(&mut object_184, var_183)?;
        object_184.finish();
    }
    if let Some(var_185) = &input.hpo_resource_config {
        let mut object_186 = object.key("hpoResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hpo_resource_config(
            &mut object_186,
            var_185,
        )?;
        object_186.finish();
    }
    if let Some(var_187) = &input.algorithm_hyper_parameter_ranges {
        let mut object_188 = object.key("algorithmHyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_ranges(
            &mut object_188,
            var_187,
        )?;
        object_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.metric_name {
        object.key("metricName").string(var_189.as_str());
    }
    if let Some(var_190) = &input.recipe_list {
        let mut array_191 = object.key("recipeList").start_array();
        for item_192 in var_190 {
            {
                array_191.value().string(item_192.as_str());
            }
        }
        array_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_optimization_objective(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OptimizationObjective,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.item_attribute {
        object.key("itemAttribute").string(var_193.as_str());
    }
    if let Some(var_194) = &input.objective_sensitivity {
        object.key("objectiveSensitivity").string(var_194.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hpo_objective(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HpoObjective,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.r#type {
        object.key("type").string(var_195.as_str());
    }
    if let Some(var_196) = &input.metric_name {
        object.key("metricName").string(var_196.as_str());
    }
    if let Some(var_197) = &input.metric_regex {
        object.key("metricRegex").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hpo_resource_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HpoResourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.max_number_of_training_jobs {
        object
            .key("maxNumberOfTrainingJobs")
            .string(var_198.as_str());
    }
    if let Some(var_199) = &input.max_parallel_training_jobs {
        object
            .key("maxParallelTrainingJobs")
            .string(var_199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_ranges(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterRanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_200) = &input.integer_hyper_parameter_ranges {
        let mut array_201 = object.key("integerHyperParameterRanges").start_array();
        for item_202 in var_200 {
            {
                let mut object_203 = array_201.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_hyper_parameter_range(
                    &mut object_203,
                    item_202,
                )?;
                object_203.finish();
            }
        }
        array_201.finish();
    }
    if let Some(var_204) = &input.continuous_hyper_parameter_ranges {
        let mut array_205 = object.key("continuousHyperParameterRanges").start_array();
        for item_206 in var_204 {
            {
                let mut object_207 = array_205.value().start_object();
                crate::json_ser::serialize_structure_crate_model_continuous_hyper_parameter_range(
                    &mut object_207,
                    item_206,
                )?;
                object_207.finish();
            }
        }
        array_205.finish();
    }
    if let Some(var_208) = &input.categorical_hyper_parameter_ranges {
        let mut array_209 = object.key("categoricalHyperParameterRanges").start_array();
        for item_210 in var_208 {
            {
                let mut object_211 = array_209.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_hyper_parameter_range(
                    &mut object_211,
                    item_210,
                )?;
                object_211.finish();
            }
        }
        array_209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_hyper_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerHyperParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.name {
        object.key("name").string(var_212.as_str());
    }
    if input.min_value != 0 {
        object.key("minValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.min_value).into()),
        );
    }
    if input.max_value != 0 {
        object.key("maxValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_value).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_hyper_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousHyperParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.name {
        object.key("name").string(var_213.as_str());
    }
    if input.min_value != 0.0 {
        object.key("minValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.min_value).into()),
        );
    }
    if input.max_value != 0.0 {
        object.key("maxValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.max_value).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_hyper_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalHyperParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.name {
        object.key("name").string(var_214.as_str());
    }
    if let Some(var_215) = &input.values {
        let mut array_216 = object.key("values").start_array();
        for item_217 in var_215 {
            {
                array_216.value().string(item_217.as_str());
            }
        }
        array_216.finish();
    }
    Ok(())
}
