// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_access_tokens_output_next_token(
    input: &crate::operation::list_access_tokens::ListAccessTokensOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_dev_environment_sessions_output_next_token(
    input: &crate::operation::list_dev_environment_sessions::ListDevEnvironmentSessionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_dev_environments_output_next_token(
    input: &crate::operation::list_dev_environments::ListDevEnvironmentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_event_logs_output_next_token(
    input: &crate::operation::list_event_logs::ListEventLogsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_projects_output_next_token(
    input: &crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_source_repositories_output_next_token(
    input: &crate::operation::list_source_repositories::ListSourceRepositoriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_source_repository_branches_output_next_token(
    input: &crate::operation::list_source_repository_branches::ListSourceRepositoryBranchesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_spaces_output_next_token(
    input: &crate::operation::list_spaces::ListSpacesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_access_tokens_output_items(
    input: crate::operation::list_access_tokens::ListAccessTokensOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AccessTokenSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_dev_environment_sessions_output_items(
    input: crate::operation::list_dev_environment_sessions::ListDevEnvironmentSessionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DevEnvironmentSessionSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_dev_environments_output_items(
    input: crate::operation::list_dev_environments::ListDevEnvironmentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DevEnvironmentSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_event_logs_output_items(
    input: crate::operation::list_event_logs::ListEventLogsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EventLogEntry>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_projects_output_items(
    input: crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProjectSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_source_repositories_output_items(
    input: crate::operation::list_source_repositories::ListSourceRepositoriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListSourceRepositoriesItem>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_source_repository_branches_output_items(
    input: crate::operation::list_source_repository_branches::ListSourceRepositoryBranchesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListSourceRepositoryBranchesItem>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_spaces_output_items(
    input: crate::operation::list_spaces::ListSpacesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SpaceSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
