// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_access_tokens_output_next_token(
    input: &crate::output::ListAccessTokensOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dev_environments_output_next_token(
    input: &crate::output::ListDevEnvironmentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_event_logs_output_next_token(
    input: &crate::output::ListEventLogsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_projects_output_next_token(
    input: &crate::output::ListProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_source_repositories_output_next_token(
    input: &crate::output::ListSourceRepositoriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_source_repository_branches_output_next_token(
    input: &crate::output::ListSourceRepositoryBranchesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_spaces_output_next_token(
    input: &crate::output::ListSpacesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_access_tokens_output_items(
    input: crate::output::ListAccessTokensOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AccessTokenSummary>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dev_environments_output_items(
    input: crate::output::ListDevEnvironmentsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DevEnvironmentSummary>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_event_logs_output_items(
    input: crate::output::ListEventLogsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EventLogEntry>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_projects_output_items(
    input: crate::output::ListProjectsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProjectSummary>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_source_repositories_output_items(
    input: crate::output::ListSourceRepositoriesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ListSourceRepositoriesItem>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_source_repository_branches_output_items(
    input: crate::output::ListSourceRepositoryBranchesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ListSourceRepositoryBranchesItem>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_spaces_output_items(
    input: crate::output::ListSpacesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SpaceSummary>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
