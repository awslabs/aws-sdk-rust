// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_create_access_token;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_create_dev_environment;

pub(crate) mod shape_create_project;

pub(crate) mod shape_create_source_repository_branch;

pub(crate) mod shape_delete_access_token;

pub(crate) mod shape_delete_dev_environment;

pub(crate) mod shape_get_dev_environment;

pub(crate) mod shape_get_project;

pub(crate) mod shape_get_source_repository_clone_urls;

pub(crate) mod shape_get_space;

pub(crate) mod shape_get_subscription;

pub(crate) mod shape_get_user_details;

pub(crate) mod shape_list_access_tokens;

pub(crate) mod shape_list_dev_environments;

pub(crate) mod shape_list_event_logs;

pub(crate) mod shape_list_projects;

pub(crate) mod shape_list_source_repositories;

pub(crate) mod shape_list_source_repository_branches;

pub(crate) mod shape_list_spaces;

pub(crate) mod shape_start_dev_environment;

pub(crate) mod shape_start_dev_environment_session;

pub(crate) mod shape_stop_dev_environment;

pub(crate) mod shape_update_dev_environment;

pub(crate) mod shape_verify_session;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_access_token_input;

pub(crate) mod shape_create_dev_environment_input;

pub(crate) mod shape_create_project_input;

pub(crate) mod shape_create_source_repository_branch_input;

pub(crate) mod shape_list_access_tokens_input;

pub(crate) mod shape_list_dev_environments_input;

pub(crate) mod shape_list_event_logs_input;

pub(crate) mod shape_list_projects_input;

pub(crate) mod shape_list_source_repositories_input;

pub(crate) mod shape_list_source_repository_branches_input;

pub(crate) mod shape_list_spaces_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_start_dev_environment_input;

pub(crate) mod shape_start_dev_environment_session_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_dev_environment_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_access_token_summaries;

pub(crate) mod shape_dev_environment_access_details;

pub(crate) mod shape_dev_environment_repository_summaries;

pub(crate) mod shape_dev_environment_session_configuration;

pub(crate) mod shape_dev_environment_summary_list;

pub(crate) mod shape_email_address;

pub(crate) mod shape_event_log_entries;

pub(crate) mod shape_filter;

pub(crate) mod shape_ide_configuration;

pub(crate) mod shape_ide_configuration_list;

pub(crate) mod shape_ides;

pub(crate) mod shape_list_source_repositories_items;

pub(crate) mod shape_list_source_repository_branches_items;

pub(crate) mod shape_persistent_storage;

pub(crate) mod shape_persistent_storage_configuration;

pub(crate) mod shape_project_list_filter;

pub(crate) mod shape_project_summaries;

pub(crate) mod shape_repository_input;

pub(crate) mod shape_space_summaries;

pub(crate) mod shape_access_token_summary;

pub(crate) mod shape_dev_environment_repository_summary;

pub(crate) mod shape_dev_environment_summary;

pub(crate) mod shape_event_log_entry;

pub(crate) mod shape_execute_command_session_configuration;

pub(crate) mod shape_ide;

pub(crate) mod shape_list_source_repositories_item;

pub(crate) mod shape_list_source_repository_branches_item;

pub(crate) mod shape_project_summary;

pub(crate) mod shape_space_summary;

pub(crate) mod shape_event_payload;

pub(crate) mod shape_project_information;

pub(crate) mod shape_user_identity;
