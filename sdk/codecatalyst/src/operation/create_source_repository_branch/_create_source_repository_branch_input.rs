// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSourceRepositoryBranchInput {
    /// <p>The name of the space.</p>
    #[doc(hidden)]
    pub space_name: std::option::Option<std::string::String>,
    /// <p>The name of the project in the space.</p>
    #[doc(hidden)]
    pub project_name: std::option::Option<std::string::String>,
    /// <p>The name of the repository where you want to create a branch.</p>
    #[doc(hidden)]
    pub source_repository_name: std::option::Option<std::string::String>,
    /// <p>The name for the branch you're creating.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The commit ID in an existing branch from which you want to create the new branch.</p>
    #[doc(hidden)]
    pub head_commit_id: std::option::Option<std::string::String>,
}
impl CreateSourceRepositoryBranchInput {
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> std::option::Option<&str> {
        self.space_name.as_deref()
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(&self) -> std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The name of the repository where you want to create a branch.</p>
    pub fn source_repository_name(&self) -> std::option::Option<&str> {
        self.source_repository_name.as_deref()
    }
    /// <p>The name for the branch you're creating.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The commit ID in an existing branch from which you want to create the new branch.</p>
    pub fn head_commit_id(&self) -> std::option::Option<&str> {
        self.head_commit_id.as_deref()
    }
}
impl CreateSourceRepositoryBranchInput {
    /// Creates a new builder-style object to manufacture [`CreateSourceRepositoryBranchInput`](crate::operation::create_source_repository_branch::CreateSourceRepositoryBranchInput).
    pub fn builder() -> crate::operation::create_source_repository_branch::builders::CreateSourceRepositoryBranchInputBuilder{
        crate::operation::create_source_repository_branch::builders::CreateSourceRepositoryBranchInputBuilder::default()
    }
}

/// A builder for [`CreateSourceRepositoryBranchInput`](crate::operation::create_source_repository_branch::CreateSourceRepositoryBranchInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateSourceRepositoryBranchInputBuilder {
    pub(crate) space_name: std::option::Option<std::string::String>,
    pub(crate) project_name: std::option::Option<std::string::String>,
    pub(crate) source_repository_name: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) head_commit_id: std::option::Option<std::string::String>,
}
impl CreateSourceRepositoryBranchInputBuilder {
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.space_name = Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_name = Some(input.into());
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the repository where you want to create a branch.</p>
    pub fn source_repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository where you want to create a branch.</p>
    pub fn set_source_repository_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_repository_name = input;
        self
    }
    /// <p>The name for the branch you're creating.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name for the branch you're creating.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The commit ID in an existing branch from which you want to create the new branch.</p>
    pub fn head_commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.head_commit_id = Some(input.into());
        self
    }
    /// <p>The commit ID in an existing branch from which you want to create the new branch.</p>
    pub fn set_head_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.head_commit_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateSourceRepositoryBranchInput`](crate::operation::create_source_repository_branch::CreateSourceRepositoryBranchInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_source_repository_branch::CreateSourceRepositoryBranchInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_source_repository_branch::CreateSourceRepositoryBranchInput {
                space_name: self.space_name,
                project_name: self.project_name,
                source_repository_name: self.source_repository_name,
                name: self.name,
                head_commit_id: self.head_commit_id,
            },
        )
    }
}
