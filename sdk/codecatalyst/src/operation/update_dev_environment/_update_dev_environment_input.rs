// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDevEnvironmentInput {
    /// <p>The name of the space.</p>
    pub space_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the project in the space.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>The system-generated unique ID of the Dev Environment. </p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The user-specified alias for the Dev Environment. Changing this value will not cause a restart.</p>
    pub alias: ::std::option::Option<::std::string::String>,
    /// <p>Information about the integrated development environment (IDE) configured for a Dev Environment.</p>
    pub ides: ::std::option::Option<::std::vec::Vec<crate::types::IdeConfiguration>>,
    /// <p>The Amazon EC2 instace type to use for the Dev Environment. </p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub instance_type: ::std::option::Option<crate::types::InstanceType>,
    /// <p>The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.</p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub inactivity_timeout_minutes: ::std::option::Option<i32>,
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateDevEnvironmentInput {
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> ::std::option::Option<&str> {
        self.space_name.as_deref()
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The system-generated unique ID of the Dev Environment. </p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The user-specified alias for the Dev Environment. Changing this value will not cause a restart.</p>
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>Information about the integrated development environment (IDE) configured for a Dev Environment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ides.is_none()`.
    pub fn ides(&self) -> &[crate::types::IdeConfiguration] {
        self.ides.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon EC2 instace type to use for the Dev Environment. </p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::InstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.</p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub fn inactivity_timeout_minutes(&self) -> ::std::option::Option<i32> {
        self.inactivity_timeout_minutes
    }
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateDevEnvironmentInput {
    /// Creates a new builder-style object to manufacture [`UpdateDevEnvironmentInput`](crate::operation::update_dev_environment::UpdateDevEnvironmentInput).
    pub fn builder() -> crate::operation::update_dev_environment::builders::UpdateDevEnvironmentInputBuilder {
        crate::operation::update_dev_environment::builders::UpdateDevEnvironmentInputBuilder::default()
    }
}

/// A builder for [`UpdateDevEnvironmentInput`](crate::operation::update_dev_environment::UpdateDevEnvironmentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDevEnvironmentInputBuilder {
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) ides: ::std::option::Option<::std::vec::Vec<crate::types::IdeConfiguration>>,
    pub(crate) instance_type: ::std::option::Option<crate::types::InstanceType>,
    pub(crate) inactivity_timeout_minutes: ::std::option::Option<i32>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateDevEnvironmentInputBuilder {
    /// <p>The name of the space.</p>
    /// This field is required.
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>The name of the project in the space.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The system-generated unique ID of the Dev Environment. </p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the Dev Environment. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The system-generated unique ID of the Dev Environment. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The user-specified alias for the Dev Environment. Changing this value will not cause a restart.</p>
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-specified alias for the Dev Environment. Changing this value will not cause a restart.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The user-specified alias for the Dev Environment. Changing this value will not cause a restart.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// Appends an item to `ides`.
    ///
    /// To override the contents of this collection use [`set_ides`](Self::set_ides).
    ///
    /// <p>Information about the integrated development environment (IDE) configured for a Dev Environment.</p>
    pub fn ides(mut self, input: crate::types::IdeConfiguration) -> Self {
        let mut v = self.ides.unwrap_or_default();
        v.push(input);
        self.ides = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the integrated development environment (IDE) configured for a Dev Environment.</p>
    pub fn set_ides(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IdeConfiguration>>) -> Self {
        self.ides = input;
        self
    }
    /// <p>Information about the integrated development environment (IDE) configured for a Dev Environment.</p>
    pub fn get_ides(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IdeConfiguration>> {
        &self.ides
    }
    /// <p>The Amazon EC2 instace type to use for the Dev Environment. </p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon EC2 instace type to use for the Dev Environment. </p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::InstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The Amazon EC2 instace type to use for the Dev Environment. </p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::InstanceType> {
        &self.instance_type
    }
    /// <p>The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.</p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub fn inactivity_timeout_minutes(mut self, input: i32) -> Self {
        self.inactivity_timeout_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.</p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub fn set_inactivity_timeout_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inactivity_timeout_minutes = input;
        self
    }
    /// <p>The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.</p> <note>
    /// <p>Changing this value will cause a restart of the Dev Environment if it is running.</p>
    /// </note>
    pub fn get_inactivity_timeout_minutes(&self) -> &::std::option::Option<i32> {
        &self.inactivity_timeout_minutes
    }
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateDevEnvironmentInput`](crate::operation::update_dev_environment::UpdateDevEnvironmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_dev_environment::UpdateDevEnvironmentInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_dev_environment::UpdateDevEnvironmentInput {
            space_name: self.space_name,
            project_name: self.project_name,
            id: self.id,
            alias: self.alias,
            ides: self.ides,
            instance_type: self.instance_type,
            inactivity_timeout_minutes: self.inactivity_timeout_minutes,
            client_token: self.client_token,
        })
    }
}
