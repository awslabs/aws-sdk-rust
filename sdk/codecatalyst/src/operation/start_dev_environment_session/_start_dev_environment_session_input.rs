// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartDevEnvironmentSessionInput {
    /// <p>The name of the space.</p>
    pub space_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the project in the space.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Information about the configuration of a Dev Environment session.</p>
    pub session_configuration: ::std::option::Option<crate::types::DevEnvironmentSessionConfiguration>,
}
impl StartDevEnvironmentSessionInput {
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> ::std::option::Option<&str> {
        self.space_name.as_deref()
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Information about the configuration of a Dev Environment session.</p>
    pub fn session_configuration(&self) -> ::std::option::Option<&crate::types::DevEnvironmentSessionConfiguration> {
        self.session_configuration.as_ref()
    }
}
impl StartDevEnvironmentSessionInput {
    /// Creates a new builder-style object to manufacture [`StartDevEnvironmentSessionInput`](crate::operation::start_dev_environment_session::StartDevEnvironmentSessionInput).
    pub fn builder() -> crate::operation::start_dev_environment_session::builders::StartDevEnvironmentSessionInputBuilder {
        crate::operation::start_dev_environment_session::builders::StartDevEnvironmentSessionInputBuilder::default()
    }
}

/// A builder for [`StartDevEnvironmentSessionInput`](crate::operation::start_dev_environment_session::StartDevEnvironmentSessionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartDevEnvironmentSessionInputBuilder {
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) session_configuration: ::std::option::Option<crate::types::DevEnvironmentSessionConfiguration>,
}
impl StartDevEnvironmentSessionInputBuilder {
    /// <p>The name of the space.</p>
    /// This field is required.
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>The name of the project in the space.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Information about the configuration of a Dev Environment session.</p>
    /// This field is required.
    pub fn session_configuration(mut self, input: crate::types::DevEnvironmentSessionConfiguration) -> Self {
        self.session_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the configuration of a Dev Environment session.</p>
    pub fn set_session_configuration(mut self, input: ::std::option::Option<crate::types::DevEnvironmentSessionConfiguration>) -> Self {
        self.session_configuration = input;
        self
    }
    /// <p>Information about the configuration of a Dev Environment session.</p>
    pub fn get_session_configuration(&self) -> &::std::option::Option<crate::types::DevEnvironmentSessionConfiguration> {
        &self.session_configuration
    }
    /// Consumes the builder and constructs a [`StartDevEnvironmentSessionInput`](crate::operation::start_dev_environment_session::StartDevEnvironmentSessionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_dev_environment_session::StartDevEnvironmentSessionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_dev_environment_session::StartDevEnvironmentSessionInput {
            space_name: self.space_name,
            project_name: self.project_name,
            id: self.id,
            session_configuration: self.session_configuration,
        })
    }
}
