// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StartDevEnvironmentSessionOutput {
    /// <p>Information about connection details for a Dev Environment.</p>
    pub access_details: ::std::option::Option<crate::types::DevEnvironmentAccessDetails>,
    /// <p>The system-generated unique ID of the Dev Environment session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the space.</p>
    pub space_name: ::std::string::String,
    /// <p>The name of the project in the space.</p>
    pub project_name: ::std::string::String,
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    pub id: ::std::string::String,
    _request_id: Option<String>,
}
impl StartDevEnvironmentSessionOutput {
    /// <p>Information about connection details for a Dev Environment.</p>
    pub fn access_details(&self) -> ::std::option::Option<&crate::types::DevEnvironmentAccessDetails> {
        self.access_details.as_ref()
    }
    /// <p>The system-generated unique ID of the Dev Environment session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> &str {
        use std::ops::Deref;
        self.space_name.deref()
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(&self) -> &str {
        use std::ops::Deref;
        self.project_name.deref()
    }
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
}
impl ::std::fmt::Debug for StartDevEnvironmentSessionOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartDevEnvironmentSessionOutput");
        formatter.field("access_details", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &self.session_id);
        formatter.field("space_name", &self.space_name);
        formatter.field("project_name", &self.project_name);
        formatter.field("id", &self.id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for StartDevEnvironmentSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartDevEnvironmentSessionOutput {
    /// Creates a new builder-style object to manufacture [`StartDevEnvironmentSessionOutput`](crate::operation::start_dev_environment_session::StartDevEnvironmentSessionOutput).
    pub fn builder() -> crate::operation::start_dev_environment_session::builders::StartDevEnvironmentSessionOutputBuilder {
        crate::operation::start_dev_environment_session::builders::StartDevEnvironmentSessionOutputBuilder::default()
    }
}

/// A builder for [`StartDevEnvironmentSessionOutput`](crate::operation::start_dev_environment_session::StartDevEnvironmentSessionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StartDevEnvironmentSessionOutputBuilder {
    pub(crate) access_details: ::std::option::Option<crate::types::DevEnvironmentAccessDetails>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartDevEnvironmentSessionOutputBuilder {
    /// <p>Information about connection details for a Dev Environment.</p>
    /// This field is required.
    pub fn access_details(mut self, input: crate::types::DevEnvironmentAccessDetails) -> Self {
        self.access_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about connection details for a Dev Environment.</p>
    pub fn set_access_details(mut self, input: ::std::option::Option<crate::types::DevEnvironmentAccessDetails>) -> Self {
        self.access_details = input;
        self
    }
    /// <p>Information about connection details for a Dev Environment.</p>
    pub fn get_access_details(&self) -> &::std::option::Option<crate::types::DevEnvironmentAccessDetails> {
        &self.access_details
    }
    /// <p>The system-generated unique ID of the Dev Environment session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the Dev Environment session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The system-generated unique ID of the Dev Environment session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The name of the space.</p>
    /// This field is required.
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>The name of the project in the space.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The system-generated unique ID of the Dev Environment.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartDevEnvironmentSessionOutput`](crate::operation::start_dev_environment_session::StartDevEnvironmentSessionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`space_name`](crate::operation::start_dev_environment_session::builders::StartDevEnvironmentSessionOutputBuilder::space_name)
    /// - [`project_name`](crate::operation::start_dev_environment_session::builders::StartDevEnvironmentSessionOutputBuilder::project_name)
    /// - [`id`](crate::operation::start_dev_environment_session::builders::StartDevEnvironmentSessionOutputBuilder::id)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_dev_environment_session::StartDevEnvironmentSessionOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_dev_environment_session::StartDevEnvironmentSessionOutput {
            access_details: self.access_details,
            session_id: self.session_id,
            space_name: self.space_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "space_name",
                    "space_name was not specified but it is required when building StartDevEnvironmentSessionOutput",
                )
            })?,
            project_name: self.project_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_name",
                    "project_name was not specified but it is required when building StartDevEnvironmentSessionOutput",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building StartDevEnvironmentSessionOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for StartDevEnvironmentSessionOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartDevEnvironmentSessionOutputBuilder");
        formatter.field("access_details", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &self.session_id);
        formatter.field("space_name", &self.space_name);
        formatter.field("project_name", &self.project_name);
        formatter.field("id", &self.id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
