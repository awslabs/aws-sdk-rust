// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_access_token_output_correct_errors(
    mut builder: crate::operation::create_access_token::builders::CreateAccessTokenOutputBuilder,
) -> crate::operation::create_access_token::builders::CreateAccessTokenOutputBuilder {
    if builder.secret.is_none() {
        builder.secret = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.expires_time.is_none() {
        builder.expires_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.access_token_id.is_none() {
        builder.access_token_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_dev_environment_output_correct_errors(
    mut builder: crate::operation::create_dev_environment::builders::CreateDevEnvironmentOutputBuilder,
) -> crate::operation::create_dev_environment::builders::CreateDevEnvironmentOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_project_output_correct_errors(
    mut builder: crate::operation::create_project::builders::CreateProjectOutputBuilder,
) -> crate::operation::create_project::builders::CreateProjectOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_source_repository_output_correct_errors(
    mut builder: crate::operation::create_source_repository::builders::CreateSourceRepositoryOutputBuilder,
) -> crate::operation::create_source_repository::builders::CreateSourceRepositoryOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_dev_environment_output_correct_errors(
    mut builder: crate::operation::delete_dev_environment::builders::DeleteDevEnvironmentOutputBuilder,
) -> crate::operation::delete_dev_environment::builders::DeleteDevEnvironmentOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_project_output_correct_errors(
    mut builder: crate::operation::delete_project::builders::DeleteProjectOutputBuilder,
) -> crate::operation::delete_project::builders::DeleteProjectOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_source_repository_output_correct_errors(
    mut builder: crate::operation::delete_source_repository::builders::DeleteSourceRepositoryOutputBuilder,
) -> crate::operation::delete_source_repository::builders::DeleteSourceRepositoryOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_space_output_correct_errors(
    mut builder: crate::operation::delete_space::builders::DeleteSpaceOutputBuilder,
) -> crate::operation::delete_space::builders::DeleteSpaceOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn get_dev_environment_output_correct_errors(
    mut builder: crate::operation::get_dev_environment::builders::GetDevEnvironmentOutputBuilder,
) -> crate::operation::get_dev_environment::builders::GetDevEnvironmentOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.creator_id.is_none() {
        builder.creator_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DevEnvironmentStatus>().ok()
    }
    if builder.repositories.is_none() {
        builder.repositories = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::InstanceType>().ok()
    }
    if builder.inactivity_timeout_minutes.is_none() {
        builder.inactivity_timeout_minutes = Some(Default::default())
    }
    if builder.persistent_storage.is_none() {
        builder.persistent_storage = {
            let builder = crate::types::builders::PersistentStorageBuilder::default();
            crate::serde_util::persistent_storage_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_project_output_correct_errors(
    mut builder: crate::operation::get_project::builders::GetProjectOutputBuilder,
) -> crate::operation::get_project::builders::GetProjectOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn get_source_repository_output_correct_errors(
    mut builder: crate::operation::get_source_repository::builders::GetSourceRepositoryOutputBuilder,
) -> crate::operation::get_source_repository::builders::GetSourceRepositoryOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_source_repository_clone_urls_output_correct_errors(
    mut builder: crate::operation::get_source_repository_clone_urls::builders::GetSourceRepositoryCloneUrlsOutputBuilder,
) -> crate::operation::get_source_repository_clone_urls::builders::GetSourceRepositoryCloneUrlsOutputBuilder {
    if builder.https.is_none() {
        builder.https = Some(Default::default())
    }
    builder
}

pub(crate) fn get_space_output_correct_errors(
    mut builder: crate::operation::get_space::builders::GetSpaceOutputBuilder,
) -> crate::operation::get_space::builders::GetSpaceOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.region_name.is_none() {
        builder.region_name = Some(Default::default())
    }
    builder
}

pub(crate) fn list_access_tokens_output_correct_errors(
    mut builder: crate::operation::list_access_tokens::builders::ListAccessTokensOutputBuilder,
) -> crate::operation::list_access_tokens::builders::ListAccessTokensOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_dev_environment_sessions_output_correct_errors(
    mut builder: crate::operation::list_dev_environment_sessions::builders::ListDevEnvironmentSessionsOutputBuilder,
) -> crate::operation::list_dev_environment_sessions::builders::ListDevEnvironmentSessionsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_dev_environments_output_correct_errors(
    mut builder: crate::operation::list_dev_environments::builders::ListDevEnvironmentsOutputBuilder,
) -> crate::operation::list_dev_environments::builders::ListDevEnvironmentsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_event_logs_output_correct_errors(
    mut builder: crate::operation::list_event_logs::builders::ListEventLogsOutputBuilder,
) -> crate::operation::list_event_logs::builders::ListEventLogsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_source_repository_branches_output_correct_errors(
    mut builder: crate::operation::list_source_repository_branches::builders::ListSourceRepositoryBranchesOutputBuilder,
) -> crate::operation::list_source_repository_branches::builders::ListSourceRepositoryBranchesOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn start_dev_environment_output_correct_errors(
    mut builder: crate::operation::start_dev_environment::builders::StartDevEnvironmentOutputBuilder,
) -> crate::operation::start_dev_environment::builders::StartDevEnvironmentOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DevEnvironmentStatus>().ok()
    }
    builder
}

pub(crate) fn start_dev_environment_session_output_correct_errors(
    mut builder: crate::operation::start_dev_environment_session::builders::StartDevEnvironmentSessionOutputBuilder,
) -> crate::operation::start_dev_environment_session::builders::StartDevEnvironmentSessionOutputBuilder {
    if builder.access_details.is_none() {
        builder.access_details = {
            let builder = crate::types::builders::DevEnvironmentAccessDetailsBuilder::default();
            crate::serde_util::dev_environment_access_details_correct_errors(builder).build().ok()
        }
    }
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn stop_dev_environment_output_correct_errors(
    mut builder: crate::operation::stop_dev_environment::builders::StopDevEnvironmentOutputBuilder,
) -> crate::operation::stop_dev_environment::builders::StopDevEnvironmentOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DevEnvironmentStatus>().ok()
    }
    builder
}

pub(crate) fn stop_dev_environment_session_output_correct_errors(
    mut builder: crate::operation::stop_dev_environment_session::builders::StopDevEnvironmentSessionOutputBuilder,
) -> crate::operation::stop_dev_environment_session::builders::StopDevEnvironmentSessionOutputBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_dev_environment_output_correct_errors(
    mut builder: crate::operation::update_dev_environment::builders::UpdateDevEnvironmentOutputBuilder,
) -> crate::operation::update_dev_environment::builders::UpdateDevEnvironmentOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    builder
}

pub(crate) fn persistent_storage_correct_errors(
    mut builder: crate::types::builders::PersistentStorageBuilder,
) -> crate::types::builders::PersistentStorageBuilder {
    if builder.size_in_gib.is_none() {
        builder.size_in_gib = Some(Default::default())
    }
    builder
}

pub(crate) fn dev_environment_access_details_correct_errors(
    mut builder: crate::types::builders::DevEnvironmentAccessDetailsBuilder,
) -> crate::types::builders::DevEnvironmentAccessDetailsBuilder {
    if builder.stream_url.is_none() {
        builder.stream_url = Some(Default::default())
    }
    if builder.token_value.is_none() {
        builder.token_value = Some(Default::default())
    }
    builder
}

pub(crate) fn access_token_summary_correct_errors(
    mut builder: crate::types::builders::AccessTokenSummaryBuilder,
) -> crate::types::builders::AccessTokenSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn dev_environment_repository_summary_correct_errors(
    mut builder: crate::types::builders::DevEnvironmentRepositorySummaryBuilder,
) -> crate::types::builders::DevEnvironmentRepositorySummaryBuilder {
    if builder.repository_name.is_none() {
        builder.repository_name = Some(Default::default())
    }
    builder
}

pub(crate) fn dev_environment_session_summary_correct_errors(
    mut builder: crate::types::builders::DevEnvironmentSessionSummaryBuilder,
) -> crate::types::builders::DevEnvironmentSessionSummaryBuilder {
    if builder.space_name.is_none() {
        builder.space_name = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.dev_environment_id.is_none() {
        builder.dev_environment_id = Some(Default::default())
    }
    if builder.started_time.is_none() {
        builder.started_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn dev_environment_summary_correct_errors(
    mut builder: crate::types::builders::DevEnvironmentSummaryBuilder,
) -> crate::types::builders::DevEnvironmentSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.creator_id.is_none() {
        builder.creator_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DevEnvironmentStatus>().ok()
    }
    if builder.repositories.is_none() {
        builder.repositories = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::InstanceType>().ok()
    }
    if builder.inactivity_timeout_minutes.is_none() {
        builder.inactivity_timeout_minutes = Some(Default::default())
    }
    if builder.persistent_storage.is_none() {
        builder.persistent_storage = {
            let builder = crate::types::builders::PersistentStorageBuilder::default();
            crate::serde_util::persistent_storage_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn event_log_entry_correct_errors(
    mut builder: crate::types::builders::EventLogEntryBuilder,
) -> crate::types::builders::EventLogEntryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.event_name.is_none() {
        builder.event_name = Some(Default::default())
    }
    if builder.event_type.is_none() {
        builder.event_type = Some(Default::default())
    }
    if builder.event_category.is_none() {
        builder.event_category = Some(Default::default())
    }
    if builder.event_source.is_none() {
        builder.event_source = Some(Default::default())
    }
    if builder.event_time.is_none() {
        builder.event_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.operation_type.is_none() {
        builder.operation_type = "no value was set".parse::<crate::types::OperationType>().ok()
    }
    if builder.user_identity.is_none() {
        builder.user_identity = {
            let builder = crate::types::builders::UserIdentityBuilder::default();
            crate::serde_util::user_identity_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_source_repositories_item_correct_errors(
    mut builder: crate::types::builders::ListSourceRepositoriesItemBuilder,
) -> crate::types::builders::ListSourceRepositoriesItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn project_summary_correct_errors(
    mut builder: crate::types::builders::ProjectSummaryBuilder,
) -> crate::types::builders::ProjectSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn space_summary_correct_errors(mut builder: crate::types::builders::SpaceSummaryBuilder) -> crate::types::builders::SpaceSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.region_name.is_none() {
        builder.region_name = Some(Default::default())
    }
    builder
}

pub(crate) fn user_identity_correct_errors(mut builder: crate::types::builders::UserIdentityBuilder) -> crate::types::builders::UserIdentityBuilder {
    if builder.user_type.is_none() {
        builder.user_type = "no value was set".parse::<crate::types::UserType>().ok()
    }
    if builder.principal_id.is_none() {
        builder.principal_id = Some(Default::default())
    }
    builder
}
