// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(
    clippy::collapsible_if,
    clippy::bool_comparison,
    clippy::nonminimal_bool,
    clippy::comparison_to_empty,
    clippy::redundant_pattern_matching
)]
pub(super) fn resolve_endpoint(
    _params: &crate::endpoint::Params,
    _diagnostic_collector: &mut crate::endpoint_lib::diagnostic::DiagnosticCollector,
    partition_resolver: &crate::endpoint_lib::partition::PartitionResolver,
) -> ::aws_smithy_http::endpoint::Result {
    #[allow(unused_variables)]
    let use_fips = &_params.use_fips;
    #[allow(unused_variables)]
    let region = &_params.region;
    #[allow(unused_variables)]
    let endpoint = &_params.endpoint;
    #[allow(unused_variables)]
    if let Some(endpoint) = endpoint {
        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
            .url(endpoint.to_owned())
            .build());
    }
    if !(region.is_some()) {
        #[allow(unused_variables)]
        if let Some(partition_result) =
            partition_resolver.resolve_partition("us-west-2", _diagnostic_collector)
        {
            if (*use_fips) == (true) {
                if (partition_result.supports_fips()) == (false) {
                    return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(
                        "Partition does not support FIPS.".to_string(),
                    ));
                }
                return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                    .url({
                        let mut out = String::new();
                        out.push_str("https://codecatalyst-fips.global.");
                        #[allow(clippy::needless_borrow)]
                        out.push_str(&partition_result.dual_stack_dns_suffix());
                        out
                    })
                    .build());
            }
            return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                .url({
                    let mut out = String::new();
                    out.push_str("https://codecatalyst.global.");
                    #[allow(clippy::needless_borrow)]
                    out.push_str(&partition_result.dual_stack_dns_suffix());
                    out
                })
                .build());
        }
    }
    #[allow(unused_variables)]
    if let Some(region) = region {
        #[allow(unused_variables)]
        if let Some(partition_result) =
            partition_resolver.resolve_partition(region, _diagnostic_collector)
        {
            if (*use_fips) == (true) {
                if (partition_result.supports_fips()) == (false) {
                    return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(
                        "Partition does not support FIPS.".to_string(),
                    ));
                }
                return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                    .url({
                        let mut out = String::new();
                        out.push_str("https://codecatalyst-fips.global.");
                        #[allow(clippy::needless_borrow)]
                        out.push_str(&partition_result.dual_stack_dns_suffix());
                        out
                    })
                    .build());
            }
            return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                .url({
                    let mut out = String::new();
                    out.push_str("https://codecatalyst.global.");
                    #[allow(clippy::needless_borrow)]
                    out.push_str(&partition_result.dual_stack_dns_suffix());
                    out
                })
                .build());
        }
    }
    #[allow(unreachable_code)]
    return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(
        format!(
            "No rules matched these parameters. This is a bug. {:?}",
            _params
        ),
    ));
}
