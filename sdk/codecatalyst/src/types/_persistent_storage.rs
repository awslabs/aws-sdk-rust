// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the persistent storage for a Dev Environment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PersistentStorage {
    /// <p>The size of the persistent storage in gigabytes (specifically GiB).</p> <note>
    /// <p>Valid values for storage are based on memory sizes in 16GB increments. Valid values are 16, 32, and 64.</p>
    /// </note>
    pub size_in_gib: i32,
}
impl PersistentStorage {
    /// <p>The size of the persistent storage in gigabytes (specifically GiB).</p> <note>
    /// <p>Valid values for storage are based on memory sizes in 16GB increments. Valid values are 16, 32, and 64.</p>
    /// </note>
    pub fn size_in_gib(&self) -> i32 {
        self.size_in_gib
    }
}
impl PersistentStorage {
    /// Creates a new builder-style object to manufacture [`PersistentStorage`](crate::types::PersistentStorage).
    pub fn builder() -> crate::types::builders::PersistentStorageBuilder {
        crate::types::builders::PersistentStorageBuilder::default()
    }
}

/// A builder for [`PersistentStorage`](crate::types::PersistentStorage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PersistentStorageBuilder {
    pub(crate) size_in_gib: ::std::option::Option<i32>,
}
impl PersistentStorageBuilder {
    /// <p>The size of the persistent storage in gigabytes (specifically GiB).</p> <note>
    /// <p>Valid values for storage are based on memory sizes in 16GB increments. Valid values are 16, 32, and 64.</p>
    /// </note>
    /// This field is required.
    pub fn size_in_gib(mut self, input: i32) -> Self {
        self.size_in_gib = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the persistent storage in gigabytes (specifically GiB).</p> <note>
    /// <p>Valid values for storage are based on memory sizes in 16GB increments. Valid values are 16, 32, and 64.</p>
    /// </note>
    pub fn set_size_in_gib(mut self, input: ::std::option::Option<i32>) -> Self {
        self.size_in_gib = input;
        self
    }
    /// <p>The size of the persistent storage in gigabytes (specifically GiB).</p> <note>
    /// <p>Valid values for storage are based on memory sizes in 16GB increments. Valid values are 16, 32, and 64.</p>
    /// </note>
    pub fn get_size_in_gib(&self) -> &::std::option::Option<i32> {
        &self.size_in_gib
    }
    /// Consumes the builder and constructs a [`PersistentStorage`](crate::types::PersistentStorage).
    /// This method will fail if any of the following fields are not set:
    /// - [`size_in_gib`](crate::types::builders::PersistentStorageBuilder::size_in_gib)
    pub fn build(self) -> ::std::result::Result<crate::types::PersistentStorage, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PersistentStorage {
            size_in_gib: self.size_in_gib.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "size_in_gib",
                    "size_in_gib was not specified but it is required when building PersistentStorage",
                )
            })?,
        })
    }
}
