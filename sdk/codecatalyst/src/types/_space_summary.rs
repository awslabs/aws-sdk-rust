// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an space.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SpaceSummary {
    /// <p> <i>We need to know what this is and the basic usage information so that third-party developers know how to use this data type.</i> </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region where the space exists.</p>
    #[doc(hidden)]
    pub region_name: std::option::Option<std::string::String>,
    /// <p>The friendly name of the space displayed to users.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The description of the space.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl SpaceSummary {
    /// <p> <i>We need to know what this is and the basic usage information so that third-party developers know how to use this data type.</i> </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Web Services Region where the space exists.</p>
    pub fn region_name(&self) -> std::option::Option<&str> {
        self.region_name.as_deref()
    }
    /// <p>The friendly name of the space displayed to users.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the space.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl SpaceSummary {
    /// Creates a new builder-style object to manufacture [`SpaceSummary`](crate::types::SpaceSummary).
    pub fn builder() -> crate::types::builders::SpaceSummaryBuilder {
        crate::types::builders::SpaceSummaryBuilder::default()
    }
}

/// A builder for [`SpaceSummary`](crate::types::SpaceSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SpaceSummaryBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) region_name: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl SpaceSummaryBuilder {
    /// <p> <i>We need to know what this is and the basic usage information so that third-party developers know how to use this data type.</i> </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> <i>We need to know what this is and the basic usage information so that third-party developers know how to use this data type.</i> </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Web Services Region where the space exists.</p>
    pub fn region_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.region_name = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the space exists.</p>
    pub fn set_region_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region_name = input;
        self
    }
    /// <p>The friendly name of the space displayed to users.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The friendly name of the space displayed to users.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The description of the space.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the space.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`SpaceSummary`](crate::types::SpaceSummary).
    pub fn build(self) -> crate::types::SpaceSummary {
        crate::types::SpaceSummary {
            name: self.name,
            region_name: self.region_name,
            display_name: self.display_name,
            description: self.description,
        }
    }
}
