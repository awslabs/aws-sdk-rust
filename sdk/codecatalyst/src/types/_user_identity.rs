// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a user whose activity is recorded in an event for a space.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserIdentity {
    /// <p>The role assigned to the user in a Amazon CodeCatalyst space or project when the event occurred.</p>
    #[doc(hidden)]
    pub user_type: std::option::Option<crate::types::UserType>,
    /// <p></p>
    #[doc(hidden)]
    pub principal_id: std::option::Option<std::string::String>,
    /// <p>The display name of the user in Amazon CodeCatalyst.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account number of the user in Amazon Web Services, if any.</p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
}
impl UserIdentity {
    /// <p>The role assigned to the user in a Amazon CodeCatalyst space or project when the event occurred.</p>
    pub fn user_type(&self) -> std::option::Option<&crate::types::UserType> {
        self.user_type.as_ref()
    }
    /// <p></p>
    pub fn principal_id(&self) -> std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The display name of the user in Amazon CodeCatalyst.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The Amazon Web Services account number of the user in Amazon Web Services, if any.</p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
}
impl UserIdentity {
    /// Creates a new builder-style object to manufacture [`UserIdentity`](crate::types::UserIdentity).
    pub fn builder() -> crate::types::builders::UserIdentityBuilder {
        crate::types::builders::UserIdentityBuilder::default()
    }
}

/// A builder for [`UserIdentity`](crate::types::UserIdentity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserIdentityBuilder {
    pub(crate) user_type: std::option::Option<crate::types::UserType>,
    pub(crate) principal_id: std::option::Option<std::string::String>,
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
}
impl UserIdentityBuilder {
    /// <p>The role assigned to the user in a Amazon CodeCatalyst space or project when the event occurred.</p>
    pub fn user_type(mut self, input: crate::types::UserType) -> Self {
        self.user_type = Some(input);
        self
    }
    /// <p>The role assigned to the user in a Amazon CodeCatalyst space or project when the event occurred.</p>
    pub fn set_user_type(mut self, input: std::option::Option<crate::types::UserType>) -> Self {
        self.user_type = input;
        self
    }
    /// <p></p>
    pub fn principal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_id = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_principal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The display name of the user in Amazon CodeCatalyst.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The display name of the user in Amazon CodeCatalyst.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The Amazon Web Services account number of the user in Amazon Web Services, if any.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account number of the user in Amazon Web Services, if any.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// Consumes the builder and constructs a [`UserIdentity`](crate::types::UserIdentity).
    pub fn build(self) -> crate::types::UserIdentity {
        crate::types::UserIdentity {
            user_type: self.user_type,
            principal_id: self.principal_id,
            user_name: self.user_name,
            aws_account_id: self.aws_account_id,
        }
    }
}
