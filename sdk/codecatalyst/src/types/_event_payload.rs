// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the payload of an event recording Amazon CodeCatalyst activity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventPayload {
    /// <p>The type of content in the event payload.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    /// <p>The data included in the event payload.</p>
    #[doc(hidden)]
    pub data: std::option::Option<std::string::String>,
}
impl EventPayload {
    /// <p>The type of content in the event payload.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The data included in the event payload.</p>
    pub fn data(&self) -> std::option::Option<&str> {
        self.data.as_deref()
    }
}
impl EventPayload {
    /// Creates a new builder-style object to manufacture [`EventPayload`](crate::types::EventPayload).
    pub fn builder() -> crate::types::builders::EventPayloadBuilder {
        crate::types::builders::EventPayloadBuilder::default()
    }
}

/// A builder for [`EventPayload`](crate::types::EventPayload).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventPayloadBuilder {
    pub(crate) content_type: std::option::Option<std::string::String>,
    pub(crate) data: std::option::Option<std::string::String>,
}
impl EventPayloadBuilder {
    /// <p>The type of content in the event payload.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>The type of content in the event payload.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The data included in the event payload.</p>
    pub fn data(mut self, input: impl Into<std::string::String>) -> Self {
        self.data = Some(input.into());
        self
    }
    /// <p>The data included in the event payload.</p>
    pub fn set_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data = input;
        self
    }
    /// Consumes the builder and constructs a [`EventPayload`](crate::types::EventPayload).
    pub fn build(self) -> crate::types::EventPayload {
        crate::types::EventPayload {
            content_type: self.content_type,
            data: self.data,
        }
    }
}
