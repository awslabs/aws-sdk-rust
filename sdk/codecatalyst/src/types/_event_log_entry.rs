// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an entry in an event log of Amazon CodeCatalyst activity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventLogEntry {
    /// <p>The system-generated unique ID of the event.</p>
    pub id: ::std::string::String,
    /// <p>The name of the event.</p>
    pub event_name: ::std::string::String,
    /// <p>The type of the event.</p>
    pub event_type: ::std::string::String,
    /// <p>The category for the event.</p>
    pub event_category: ::std::string::String,
    /// <p>The source of the event.</p>
    pub event_source: ::std::string::String,
    /// <p>The time the event took place, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    pub event_time: ::aws_smithy_types::DateTime,
    /// <p>The type of the event.</p>
    pub operation_type: crate::types::OperationType,
    /// <p>The system-generated unique ID of the user whose actions are recorded in the event.</p>
    pub user_identity: ::std::option::Option<crate::types::UserIdentity>,
    /// <p>Information about the project where the event occurred.</p>
    pub project_information: ::std::option::Option<crate::types::ProjectInformation>,
    /// <p>The system-generated unique ID of the request.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>Information about the payload of the request.</p>
    pub request_payload: ::std::option::Option<crate::types::EventPayload>,
    /// <p>Information about the payload of the response, if any.</p>
    pub response_payload: ::std::option::Option<crate::types::EventPayload>,
    /// <p>The code of the error, if any.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the user whose actions are recorded in the event.</p>
    pub source_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The user agent whose actions are recorded in the event.</p>
    pub user_agent: ::std::option::Option<::std::string::String>,
}
impl EventLogEntry {
    /// <p>The system-generated unique ID of the event.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the event.</p>
    pub fn event_name(&self) -> &str {
        use std::ops::Deref;
        self.event_name.deref()
    }
    /// <p>The type of the event.</p>
    pub fn event_type(&self) -> &str {
        use std::ops::Deref;
        self.event_type.deref()
    }
    /// <p>The category for the event.</p>
    pub fn event_category(&self) -> &str {
        use std::ops::Deref;
        self.event_category.deref()
    }
    /// <p>The source of the event.</p>
    pub fn event_source(&self) -> &str {
        use std::ops::Deref;
        self.event_source.deref()
    }
    /// <p>The time the event took place, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    pub fn event_time(&self) -> &::aws_smithy_types::DateTime {
        &self.event_time
    }
    /// <p>The type of the event.</p>
    pub fn operation_type(&self) -> &crate::types::OperationType {
        &self.operation_type
    }
    /// <p>The system-generated unique ID of the user whose actions are recorded in the event.</p>
    pub fn user_identity(&self) -> ::std::option::Option<&crate::types::UserIdentity> {
        self.user_identity.as_ref()
    }
    /// <p>Information about the project where the event occurred.</p>
    pub fn project_information(&self) -> ::std::option::Option<&crate::types::ProjectInformation> {
        self.project_information.as_ref()
    }
    /// <p>The system-generated unique ID of the request.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>Information about the payload of the request.</p>
    pub fn request_payload(&self) -> ::std::option::Option<&crate::types::EventPayload> {
        self.request_payload.as_ref()
    }
    /// <p>Information about the payload of the response, if any.</p>
    pub fn response_payload(&self) -> ::std::option::Option<&crate::types::EventPayload> {
        self.response_payload.as_ref()
    }
    /// <p>The code of the error, if any.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The IP address of the user whose actions are recorded in the event.</p>
    pub fn source_ip_address(&self) -> ::std::option::Option<&str> {
        self.source_ip_address.as_deref()
    }
    /// <p>The user agent whose actions are recorded in the event.</p>
    pub fn user_agent(&self) -> ::std::option::Option<&str> {
        self.user_agent.as_deref()
    }
}
impl EventLogEntry {
    /// Creates a new builder-style object to manufacture [`EventLogEntry`](crate::types::EventLogEntry).
    pub fn builder() -> crate::types::builders::EventLogEntryBuilder {
        crate::types::builders::EventLogEntryBuilder::default()
    }
}

/// A builder for [`EventLogEntry`](crate::types::EventLogEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventLogEntryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) event_name: ::std::option::Option<::std::string::String>,
    pub(crate) event_type: ::std::option::Option<::std::string::String>,
    pub(crate) event_category: ::std::option::Option<::std::string::String>,
    pub(crate) event_source: ::std::option::Option<::std::string::String>,
    pub(crate) event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) operation_type: ::std::option::Option<crate::types::OperationType>,
    pub(crate) user_identity: ::std::option::Option<crate::types::UserIdentity>,
    pub(crate) project_information: ::std::option::Option<crate::types::ProjectInformation>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) request_payload: ::std::option::Option<crate::types::EventPayload>,
    pub(crate) response_payload: ::std::option::Option<crate::types::EventPayload>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) source_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) user_agent: ::std::option::Option<::std::string::String>,
}
impl EventLogEntryBuilder {
    /// <p>The system-generated unique ID of the event.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the event.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The system-generated unique ID of the event.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the event.</p>
    /// This field is required.
    pub fn event_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the event.</p>
    pub fn set_event_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_name = input;
        self
    }
    /// <p>The name of the event.</p>
    pub fn get_event_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_name
    }
    /// <p>The type of the event.</p>
    /// This field is required.
    pub fn event_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the event.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The type of the event.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_type
    }
    /// <p>The category for the event.</p>
    /// This field is required.
    pub fn event_category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category for the event.</p>
    pub fn set_event_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_category = input;
        self
    }
    /// <p>The category for the event.</p>
    pub fn get_event_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_category
    }
    /// <p>The source of the event.</p>
    /// This field is required.
    pub fn event_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source of the event.</p>
    pub fn set_event_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_source = input;
        self
    }
    /// <p>The source of the event.</p>
    pub fn get_event_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_source
    }
    /// <p>The time the event took place, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    /// This field is required.
    pub fn event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the event took place, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    pub fn set_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_time = input;
        self
    }
    /// <p>The time the event took place, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    pub fn get_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_time
    }
    /// <p>The type of the event.</p>
    /// This field is required.
    pub fn operation_type(mut self, input: crate::types::OperationType) -> Self {
        self.operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the event.</p>
    pub fn set_operation_type(mut self, input: ::std::option::Option<crate::types::OperationType>) -> Self {
        self.operation_type = input;
        self
    }
    /// <p>The type of the event.</p>
    pub fn get_operation_type(&self) -> &::std::option::Option<crate::types::OperationType> {
        &self.operation_type
    }
    /// <p>The system-generated unique ID of the user whose actions are recorded in the event.</p>
    /// This field is required.
    pub fn user_identity(mut self, input: crate::types::UserIdentity) -> Self {
        self.user_identity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The system-generated unique ID of the user whose actions are recorded in the event.</p>
    pub fn set_user_identity(mut self, input: ::std::option::Option<crate::types::UserIdentity>) -> Self {
        self.user_identity = input;
        self
    }
    /// <p>The system-generated unique ID of the user whose actions are recorded in the event.</p>
    pub fn get_user_identity(&self) -> &::std::option::Option<crate::types::UserIdentity> {
        &self.user_identity
    }
    /// <p>Information about the project where the event occurred.</p>
    pub fn project_information(mut self, input: crate::types::ProjectInformation) -> Self {
        self.project_information = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the project where the event occurred.</p>
    pub fn set_project_information(mut self, input: ::std::option::Option<crate::types::ProjectInformation>) -> Self {
        self.project_information = input;
        self
    }
    /// <p>Information about the project where the event occurred.</p>
    pub fn get_project_information(&self) -> &::std::option::Option<crate::types::ProjectInformation> {
        &self.project_information
    }
    /// <p>The system-generated unique ID of the request.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the request.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The system-generated unique ID of the request.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>Information about the payload of the request.</p>
    pub fn request_payload(mut self, input: crate::types::EventPayload) -> Self {
        self.request_payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the payload of the request.</p>
    pub fn set_request_payload(mut self, input: ::std::option::Option<crate::types::EventPayload>) -> Self {
        self.request_payload = input;
        self
    }
    /// <p>Information about the payload of the request.</p>
    pub fn get_request_payload(&self) -> &::std::option::Option<crate::types::EventPayload> {
        &self.request_payload
    }
    /// <p>Information about the payload of the response, if any.</p>
    pub fn response_payload(mut self, input: crate::types::EventPayload) -> Self {
        self.response_payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the payload of the response, if any.</p>
    pub fn set_response_payload(mut self, input: ::std::option::Option<crate::types::EventPayload>) -> Self {
        self.response_payload = input;
        self
    }
    /// <p>Information about the payload of the response, if any.</p>
    pub fn get_response_payload(&self) -> &::std::option::Option<crate::types::EventPayload> {
        &self.response_payload
    }
    /// <p>The code of the error, if any.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code of the error, if any.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The code of the error, if any.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The IP address of the user whose actions are recorded in the event.</p>
    pub fn source_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the user whose actions are recorded in the event.</p>
    pub fn set_source_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_ip_address = input;
        self
    }
    /// <p>The IP address of the user whose actions are recorded in the event.</p>
    pub fn get_source_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_ip_address
    }
    /// <p>The user agent whose actions are recorded in the event.</p>
    pub fn user_agent(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_agent = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user agent whose actions are recorded in the event.</p>
    pub fn set_user_agent(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_agent = input;
        self
    }
    /// <p>The user agent whose actions are recorded in the event.</p>
    pub fn get_user_agent(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_agent
    }
    /// Consumes the builder and constructs a [`EventLogEntry`](crate::types::EventLogEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::EventLogEntryBuilder::id)
    /// - [`event_name`](crate::types::builders::EventLogEntryBuilder::event_name)
    /// - [`event_type`](crate::types::builders::EventLogEntryBuilder::event_type)
    /// - [`event_category`](crate::types::builders::EventLogEntryBuilder::event_category)
    /// - [`event_source`](crate::types::builders::EventLogEntryBuilder::event_source)
    /// - [`event_time`](crate::types::builders::EventLogEntryBuilder::event_time)
    /// - [`operation_type`](crate::types::builders::EventLogEntryBuilder::operation_type)
    pub fn build(self) -> ::std::result::Result<crate::types::EventLogEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EventLogEntry {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building EventLogEntry",
                )
            })?,
            event_name: self.event_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_name",
                    "event_name was not specified but it is required when building EventLogEntry",
                )
            })?,
            event_type: self.event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type",
                    "event_type was not specified but it is required when building EventLogEntry",
                )
            })?,
            event_category: self.event_category.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_category",
                    "event_category was not specified but it is required when building EventLogEntry",
                )
            })?,
            event_source: self.event_source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_source",
                    "event_source was not specified but it is required when building EventLogEntry",
                )
            })?,
            event_time: self.event_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_time",
                    "event_time was not specified but it is required when building EventLogEntry",
                )
            })?,
            operation_type: self.operation_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation_type",
                    "operation_type was not specified but it is required when building EventLogEntry",
                )
            })?,
            user_identity: self.user_identity,
            project_information: self.project_information,
            request_id: self.request_id,
            request_payload: self.request_payload,
            response_payload: self.response_payload,
            error_code: self.error_code,
            source_ip_address: self.source_ip_address,
            user_agent: self.user_agent,
        })
    }
}
