// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the commands that will be run on a Dev Environment when an SSH session begins.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExecuteCommandSessionConfiguration {
    /// <p>The command used at the beginning of the SSH session to a Dev Environment.</p>
    #[doc(hidden)]
    pub command: std::option::Option<std::string::String>,
    /// <p>An array of arguments containing arguments and members.</p>
    #[doc(hidden)]
    pub arguments: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ExecuteCommandSessionConfiguration {
    /// <p>The command used at the beginning of the SSH session to a Dev Environment.</p>
    pub fn command(&self) -> std::option::Option<&str> {
        self.command.as_deref()
    }
    /// <p>An array of arguments containing arguments and members.</p>
    pub fn arguments(&self) -> std::option::Option<&[std::string::String]> {
        self.arguments.as_deref()
    }
}
impl ExecuteCommandSessionConfiguration {
    /// Creates a new builder-style object to manufacture [`ExecuteCommandSessionConfiguration`](crate::types::ExecuteCommandSessionConfiguration).
    pub fn builder() -> crate::types::builders::ExecuteCommandSessionConfigurationBuilder {
        crate::types::builders::ExecuteCommandSessionConfigurationBuilder::default()
    }
}

/// A builder for [`ExecuteCommandSessionConfiguration`](crate::types::ExecuteCommandSessionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExecuteCommandSessionConfigurationBuilder {
    pub(crate) command: std::option::Option<std::string::String>,
    pub(crate) arguments: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ExecuteCommandSessionConfigurationBuilder {
    /// <p>The command used at the beginning of the SSH session to a Dev Environment.</p>
    pub fn command(mut self, input: impl Into<std::string::String>) -> Self {
        self.command = Some(input.into());
        self
    }
    /// <p>The command used at the beginning of the SSH session to a Dev Environment.</p>
    pub fn set_command(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.command = input;
        self
    }
    /// Appends an item to `arguments`.
    ///
    /// To override the contents of this collection use [`set_arguments`](Self::set_arguments).
    ///
    /// <p>An array of arguments containing arguments and members.</p>
    pub fn arguments(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.arguments.unwrap_or_default();
        v.push(input.into());
        self.arguments = Some(v);
        self
    }
    /// <p>An array of arguments containing arguments and members.</p>
    pub fn set_arguments(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.arguments = input;
        self
    }
    /// Consumes the builder and constructs a [`ExecuteCommandSessionConfiguration`](crate::types::ExecuteCommandSessionConfiguration).
    pub fn build(self) -> crate::types::ExecuteCommandSessionConfiguration {
        crate::types::ExecuteCommandSessionConfiguration {
            command: self.command,
            arguments: self.arguments,
        }
    }
}
