// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the configuration of a Dev Environment session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DevEnvironmentSessionConfiguration {
    /// <p>The type of the session.</p>
    pub session_type: crate::types::DevEnvironmentSessionType,
    /// <p>Information about optional commands that will be run on the Dev Environment when the SSH session begins.</p>
    pub execute_command_session_configuration: ::std::option::Option<crate::types::ExecuteCommandSessionConfiguration>,
}
impl DevEnvironmentSessionConfiguration {
    /// <p>The type of the session.</p>
    pub fn session_type(&self) -> &crate::types::DevEnvironmentSessionType {
        &self.session_type
    }
    /// <p>Information about optional commands that will be run on the Dev Environment when the SSH session begins.</p>
    pub fn execute_command_session_configuration(&self) -> ::std::option::Option<&crate::types::ExecuteCommandSessionConfiguration> {
        self.execute_command_session_configuration.as_ref()
    }
}
impl DevEnvironmentSessionConfiguration {
    /// Creates a new builder-style object to manufacture [`DevEnvironmentSessionConfiguration`](crate::types::DevEnvironmentSessionConfiguration).
    pub fn builder() -> crate::types::builders::DevEnvironmentSessionConfigurationBuilder {
        crate::types::builders::DevEnvironmentSessionConfigurationBuilder::default()
    }
}

/// A builder for [`DevEnvironmentSessionConfiguration`](crate::types::DevEnvironmentSessionConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DevEnvironmentSessionConfigurationBuilder {
    pub(crate) session_type: ::std::option::Option<crate::types::DevEnvironmentSessionType>,
    pub(crate) execute_command_session_configuration: ::std::option::Option<crate::types::ExecuteCommandSessionConfiguration>,
}
impl DevEnvironmentSessionConfigurationBuilder {
    /// <p>The type of the session.</p>
    /// This field is required.
    pub fn session_type(mut self, input: crate::types::DevEnvironmentSessionType) -> Self {
        self.session_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the session.</p>
    pub fn set_session_type(mut self, input: ::std::option::Option<crate::types::DevEnvironmentSessionType>) -> Self {
        self.session_type = input;
        self
    }
    /// <p>The type of the session.</p>
    pub fn get_session_type(&self) -> &::std::option::Option<crate::types::DevEnvironmentSessionType> {
        &self.session_type
    }
    /// <p>Information about optional commands that will be run on the Dev Environment when the SSH session begins.</p>
    pub fn execute_command_session_configuration(mut self, input: crate::types::ExecuteCommandSessionConfiguration) -> Self {
        self.execute_command_session_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about optional commands that will be run on the Dev Environment when the SSH session begins.</p>
    pub fn set_execute_command_session_configuration(
        mut self,
        input: ::std::option::Option<crate::types::ExecuteCommandSessionConfiguration>,
    ) -> Self {
        self.execute_command_session_configuration = input;
        self
    }
    /// <p>Information about optional commands that will be run on the Dev Environment when the SSH session begins.</p>
    pub fn get_execute_command_session_configuration(&self) -> &::std::option::Option<crate::types::ExecuteCommandSessionConfiguration> {
        &self.execute_command_session_configuration
    }
    /// Consumes the builder and constructs a [`DevEnvironmentSessionConfiguration`](crate::types::DevEnvironmentSessionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_type`](crate::types::builders::DevEnvironmentSessionConfigurationBuilder::session_type)
    pub fn build(self) -> ::std::result::Result<crate::types::DevEnvironmentSessionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DevEnvironmentSessionConfiguration {
            session_type: self.session_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_type",
                    "session_type was not specified but it is required when building DevEnvironmentSessionConfiguration",
                )
            })?,
            execute_command_session_configuration: self.execute_command_session_configuration,
        })
    }
}
