// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetStaticMapInput {
    /// <p>Takes in two pairs of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], denoting south-westerly and north-easterly edges of the image. The underlying area becomes the view of the image.</p>
    /// <p>Example: -123.17075,49.26959,-123.08125,49.31429</p>
    pub bounding_box: ::std::option::Option<::std::string::String>,
    /// <p>Takes in two or more pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], with each coordinate separated by a comma. The API will generate an image to encompass all of the provided coordinates.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 97.170451,78.039098,99.045536,27.176178</p>
    pub bounded_positions: ::std::option::Option<::std::string::String>,
    /// <p>Takes in a pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], which becomes the center point of the image. This parameter requires that either zoom or radius is set.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 49.295,-123.108</p>
    pub center: ::std::option::Option<::std::string::String>,
    /// <p>Sets color tone for map, such as dark and light for specific map styles. It only applies to vector map styles, such as Standard.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for <code>ColorScheme</code> are case sensitive.</p>
    /// </note>
    pub color_scheme: ::std::option::Option<crate::types::ColorScheme>,
    /// <p>Takes in a string to draw geometries on the image. The input is a comma separated format as follows format: <code>\[Lon, Lat\]</code></p>
    /// <p>Example: <code>line:-122.407653,37.798557,-122.413291,37.802443;color=%23DD0000;width=7;outline-color=#00DD00;outline-width=5yd|point:-122.40572,37.80004;label=Fog Hill Market;size=large;text-color=%23DD0000;color=#EE4B2B</code></p><note>
    /// <p>Currently it supports the following geometry types: point, line and polygon. It does not support multiPoint , multiLine and multiPolgyon.</p>
    /// </note>
    pub compact_overlay: ::std::option::Option<::std::string::String>,
    /// <p>It is a flag that takes in true or false. It prevents the labels that are on the edge of the image from being cut or obscured.</p>
    pub crop_labels: ::std::option::Option<bool>,
    /// <p>Takes in a string to draw geometries on the image. The input is a valid GeoJSON collection object.</p>
    /// <p>Example: <code>{"type":"FeatureCollection","features": \[{"type":"Feature","geometry":{"type":"MultiPoint","coordinates": \[\[-90.076345,51.504107\],\[-0.074451,51.506892\]\]},"properties": {"color":"#00DD00"}}\]}</code></p>
    pub geo_json_overlay: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the height of the map image.</p>
    pub height: ::std::option::Option<i32>,
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>Overrides the label size auto-calculated by <code>FileName</code>. Takes in one of the values - <code>Small</code> or <code>Large</code>.</p>
    pub label_size: ::std::option::Option<crate::types::LabelSize>,
    /// <p>Specifies the language on the map labels using the BCP 47 language tag, limited to ISO 639-1 two-letter language codes. If the specified language data isn't available for the map image, the labels will default to the regional primary language.</p>
    /// <p>Supported codes:</p>
    /// <ul>
    /// <li>
    /// <p><code>ar</code></p></li>
    /// <li>
    /// <p><code>as</code></p></li>
    /// <li>
    /// <p><code>az</code></p></li>
    /// <li>
    /// <p><code>be</code></p></li>
    /// <li>
    /// <p><code>bg</code></p></li>
    /// <li>
    /// <p><code>bn</code></p></li>
    /// <li>
    /// <p><code>bs</code></p></li>
    /// <li>
    /// <p><code>ca</code></p></li>
    /// <li>
    /// <p><code>cs</code></p></li>
    /// <li>
    /// <p><code>cy</code></p></li>
    /// <li>
    /// <p><code>da</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>el</code></p></li>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>et</code></p></li>
    /// <li>
    /// <p><code>eu</code></p></li>
    /// <li>
    /// <p><code>fi</code></p></li>
    /// <li>
    /// <p><code>fo</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>ga</code></p></li>
    /// <li>
    /// <p><code>gl</code></p></li>
    /// <li>
    /// <p><code>gn</code></p></li>
    /// <li>
    /// <p><code>gu</code></p></li>
    /// <li>
    /// <p><code>he</code></p></li>
    /// <li>
    /// <p><code>hi</code></p></li>
    /// <li>
    /// <p><code>hr</code></p></li>
    /// <li>
    /// <p><code>hu</code></p></li>
    /// <li>
    /// <p><code>hy</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>is</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ka</code></p></li>
    /// <li>
    /// <p><code>kk</code></p></li>
    /// <li>
    /// <p><code>km</code></p></li>
    /// <li>
    /// <p><code>kn</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>ky</code></p></li>
    /// <li>
    /// <p><code>lt</code></p></li>
    /// <li>
    /// <p><code>lv</code></p></li>
    /// <li>
    /// <p><code>mk</code></p></li>
    /// <li>
    /// <p><code>ml</code></p></li>
    /// <li>
    /// <p><code>mr</code></p></li>
    /// <li>
    /// <p><code>ms</code></p></li>
    /// <li>
    /// <p><code>mt</code></p></li>
    /// <li>
    /// <p><code>my</code></p></li>
    /// <li>
    /// <p><code>nl</code></p></li>
    /// <li>
    /// <p><code>no</code></p></li>
    /// <li>
    /// <p><code>or</code></p></li>
    /// <li>
    /// <p><code>pa</code></p></li>
    /// <li>
    /// <p><code>pl</code></p></li>
    /// <li>
    /// <p><code>pt</code></p></li>
    /// <li>
    /// <p><code>ro</code></p></li>
    /// <li>
    /// <p><code>ru</code></p></li>
    /// <li>
    /// <p><code>sk</code></p></li>
    /// <li>
    /// <p><code>sl</code></p></li>
    /// <li>
    /// <p><code>sq</code></p></li>
    /// <li>
    /// <p><code>sr</code></p></li>
    /// <li>
    /// <p><code>sv</code></p></li>
    /// <li>
    /// <p><code>ta</code></p></li>
    /// <li>
    /// <p><code>te</code></p></li>
    /// <li>
    /// <p><code>th</code></p></li>
    /// <li>
    /// <p><code>tr</code></p></li>
    /// <li>
    /// <p><code>uk</code></p></li>
    /// <li>
    /// <p><code>uz</code></p></li>
    /// <li>
    /// <p><code>vi</code></p></li>
    /// <li>
    /// <p><code>zh</code></p></li>
    /// </ul>
    pub language: ::std::option::Option<::std::string::String>,
    /// <p>Applies additional space (in pixels) around overlay feature to prevent them from being cut or obscured.</p><note>
    /// <p>Value for max and min is determined by:</p>
    /// <p>Min: <code>1</code></p>
    /// <p>Max: <code>min(height, width)/4</code></p>
    /// </note>
    /// <p>Example: <code>100</code></p>
    pub padding: ::std::option::Option<i32>,
    /// <p>Specifies the political view, using ISO 3166-2 or ISO 3166-3 country code format.</p>
    /// <p>The following political views are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p></li>
    /// <li>
    /// <p><code>EGY</code>: Egypt's view on Bir Tawil</p></li>
    /// <li>
    /// <p><code>IND</code>: India's view on Gilgit-Baltistan</p></li>
    /// <li>
    /// <p><code>KEN</code>: Kenya's view on the Ilemi Triangle</p></li>
    /// <li>
    /// <p><code>MAR</code>: Morocco's view on Western Sahara</p></li>
    /// <li>
    /// <p><code>RUS</code>: Russia's view on Crimea</p></li>
    /// <li>
    /// <p><code>SDN</code>: Sudan's view on the Halaib Triangle</p></li>
    /// <li>
    /// <p><code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p></li>
    /// <li>
    /// <p><code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p></li>
    /// <li>
    /// <p><code>SYR</code>: Syria's view on the Golan Heights</p></li>
    /// <li>
    /// <p><code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p></li>
    /// <li>
    /// <p><code>TZA</code>: Tanzania's view on Lake Malawi</p></li>
    /// <li>
    /// <p><code>URY</code>: Uruguay's view on Rincon de Artigas</p></li>
    /// <li>
    /// <p><code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p></li>
    /// </ul>
    pub political_view: ::std::option::Option<::std::string::String>,
    /// <p>Determines if the result image will display icons representing points of interest on the map.</p>
    pub points_of_interests: ::std::option::Option<crate::types::MapFeatureMode>,
    /// <p>Used with center parameter, it specifies the zoom of the image where you can control it on a granular level. Takes in any value <code>&gt;= 1</code>.</p>
    /// <p>Example: <code>1500</code></p><note>
    /// <p>Cannot be used with <code>Zoom</code>.</p>
    /// </note>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    /// <p></p>
    pub radius: ::std::option::Option<i64>,
    /// <p>The map scaling parameter to size the image, icons, and labels. It follows the pattern of <code>^map(@2x)?$</code>.</p>
    /// <p>Example: <code>map, map@2x</code></p>
    pub file_name: ::std::option::Option<::std::string::String>,
    /// <p>Displays a scale on the bottom right of the map image with the unit specified in the input.</p>
    /// <p>Example: <code>KilometersMiles, Miles, Kilometers, MilesKilometers</code></p>
    pub scale_bar_unit: ::std::option::Option<crate::types::ScaleBarUnit>,
    /// <p><code>Style</code> specifies the desired map style.</p>
    pub style: ::std::option::Option<crate::types::StaticMapStyle>,
    /// <p>Specifies the width of the map image.</p>
    pub width: ::std::option::Option<i32>,
    /// <p>Specifies the zoom level of the map image.</p><note>
    /// <p>Cannot be used with <code>Radius</code>.</p>
    /// </note>
    pub zoom: ::std::option::Option<f32>,
}
impl GetStaticMapInput {
    /// <p>Takes in two pairs of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], denoting south-westerly and north-easterly edges of the image. The underlying area becomes the view of the image.</p>
    /// <p>Example: -123.17075,49.26959,-123.08125,49.31429</p>
    pub fn bounding_box(&self) -> ::std::option::Option<&str> {
        self.bounding_box.as_deref()
    }
    /// <p>Takes in two or more pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], with each coordinate separated by a comma. The API will generate an image to encompass all of the provided coordinates.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 97.170451,78.039098,99.045536,27.176178</p>
    pub fn bounded_positions(&self) -> ::std::option::Option<&str> {
        self.bounded_positions.as_deref()
    }
    /// <p>Takes in a pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], which becomes the center point of the image. This parameter requires that either zoom or radius is set.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 49.295,-123.108</p>
    pub fn center(&self) -> ::std::option::Option<&str> {
        self.center.as_deref()
    }
    /// <p>Sets color tone for map, such as dark and light for specific map styles. It only applies to vector map styles, such as Standard.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for <code>ColorScheme</code> are case sensitive.</p>
    /// </note>
    pub fn color_scheme(&self) -> ::std::option::Option<&crate::types::ColorScheme> {
        self.color_scheme.as_ref()
    }
    /// <p>Takes in a string to draw geometries on the image. The input is a comma separated format as follows format: <code>\[Lon, Lat\]</code></p>
    /// <p>Example: <code>line:-122.407653,37.798557,-122.413291,37.802443;color=%23DD0000;width=7;outline-color=#00DD00;outline-width=5yd|point:-122.40572,37.80004;label=Fog Hill Market;size=large;text-color=%23DD0000;color=#EE4B2B</code></p><note>
    /// <p>Currently it supports the following geometry types: point, line and polygon. It does not support multiPoint , multiLine and multiPolgyon.</p>
    /// </note>
    pub fn compact_overlay(&self) -> ::std::option::Option<&str> {
        self.compact_overlay.as_deref()
    }
    /// <p>It is a flag that takes in true or false. It prevents the labels that are on the edge of the image from being cut or obscured.</p>
    pub fn crop_labels(&self) -> ::std::option::Option<bool> {
        self.crop_labels
    }
    /// <p>Takes in a string to draw geometries on the image. The input is a valid GeoJSON collection object.</p>
    /// <p>Example: <code>{"type":"FeatureCollection","features": \[{"type":"Feature","geometry":{"type":"MultiPoint","coordinates": \[\[-90.076345,51.504107\],\[-0.074451,51.506892\]\]},"properties": {"color":"#00DD00"}}\]}</code></p>
    pub fn geo_json_overlay(&self) -> ::std::option::Option<&str> {
        self.geo_json_overlay.as_deref()
    }
    /// <p>Specifies the height of the map image.</p>
    pub fn height(&self) -> ::std::option::Option<i32> {
        self.height
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>Overrides the label size auto-calculated by <code>FileName</code>. Takes in one of the values - <code>Small</code> or <code>Large</code>.</p>
    pub fn label_size(&self) -> ::std::option::Option<&crate::types::LabelSize> {
        self.label_size.as_ref()
    }
    /// <p>Specifies the language on the map labels using the BCP 47 language tag, limited to ISO 639-1 two-letter language codes. If the specified language data isn't available for the map image, the labels will default to the regional primary language.</p>
    /// <p>Supported codes:</p>
    /// <ul>
    /// <li>
    /// <p><code>ar</code></p></li>
    /// <li>
    /// <p><code>as</code></p></li>
    /// <li>
    /// <p><code>az</code></p></li>
    /// <li>
    /// <p><code>be</code></p></li>
    /// <li>
    /// <p><code>bg</code></p></li>
    /// <li>
    /// <p><code>bn</code></p></li>
    /// <li>
    /// <p><code>bs</code></p></li>
    /// <li>
    /// <p><code>ca</code></p></li>
    /// <li>
    /// <p><code>cs</code></p></li>
    /// <li>
    /// <p><code>cy</code></p></li>
    /// <li>
    /// <p><code>da</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>el</code></p></li>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>et</code></p></li>
    /// <li>
    /// <p><code>eu</code></p></li>
    /// <li>
    /// <p><code>fi</code></p></li>
    /// <li>
    /// <p><code>fo</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>ga</code></p></li>
    /// <li>
    /// <p><code>gl</code></p></li>
    /// <li>
    /// <p><code>gn</code></p></li>
    /// <li>
    /// <p><code>gu</code></p></li>
    /// <li>
    /// <p><code>he</code></p></li>
    /// <li>
    /// <p><code>hi</code></p></li>
    /// <li>
    /// <p><code>hr</code></p></li>
    /// <li>
    /// <p><code>hu</code></p></li>
    /// <li>
    /// <p><code>hy</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>is</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ka</code></p></li>
    /// <li>
    /// <p><code>kk</code></p></li>
    /// <li>
    /// <p><code>km</code></p></li>
    /// <li>
    /// <p><code>kn</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>ky</code></p></li>
    /// <li>
    /// <p><code>lt</code></p></li>
    /// <li>
    /// <p><code>lv</code></p></li>
    /// <li>
    /// <p><code>mk</code></p></li>
    /// <li>
    /// <p><code>ml</code></p></li>
    /// <li>
    /// <p><code>mr</code></p></li>
    /// <li>
    /// <p><code>ms</code></p></li>
    /// <li>
    /// <p><code>mt</code></p></li>
    /// <li>
    /// <p><code>my</code></p></li>
    /// <li>
    /// <p><code>nl</code></p></li>
    /// <li>
    /// <p><code>no</code></p></li>
    /// <li>
    /// <p><code>or</code></p></li>
    /// <li>
    /// <p><code>pa</code></p></li>
    /// <li>
    /// <p><code>pl</code></p></li>
    /// <li>
    /// <p><code>pt</code></p></li>
    /// <li>
    /// <p><code>ro</code></p></li>
    /// <li>
    /// <p><code>ru</code></p></li>
    /// <li>
    /// <p><code>sk</code></p></li>
    /// <li>
    /// <p><code>sl</code></p></li>
    /// <li>
    /// <p><code>sq</code></p></li>
    /// <li>
    /// <p><code>sr</code></p></li>
    /// <li>
    /// <p><code>sv</code></p></li>
    /// <li>
    /// <p><code>ta</code></p></li>
    /// <li>
    /// <p><code>te</code></p></li>
    /// <li>
    /// <p><code>th</code></p></li>
    /// <li>
    /// <p><code>tr</code></p></li>
    /// <li>
    /// <p><code>uk</code></p></li>
    /// <li>
    /// <p><code>uz</code></p></li>
    /// <li>
    /// <p><code>vi</code></p></li>
    /// <li>
    /// <p><code>zh</code></p></li>
    /// </ul>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>Applies additional space (in pixels) around overlay feature to prevent them from being cut or obscured.</p><note>
    /// <p>Value for max and min is determined by:</p>
    /// <p>Min: <code>1</code></p>
    /// <p>Max: <code>min(height, width)/4</code></p>
    /// </note>
    /// <p>Example: <code>100</code></p>
    pub fn padding(&self) -> ::std::option::Option<i32> {
        self.padding
    }
    /// <p>Specifies the political view, using ISO 3166-2 or ISO 3166-3 country code format.</p>
    /// <p>The following political views are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p></li>
    /// <li>
    /// <p><code>EGY</code>: Egypt's view on Bir Tawil</p></li>
    /// <li>
    /// <p><code>IND</code>: India's view on Gilgit-Baltistan</p></li>
    /// <li>
    /// <p><code>KEN</code>: Kenya's view on the Ilemi Triangle</p></li>
    /// <li>
    /// <p><code>MAR</code>: Morocco's view on Western Sahara</p></li>
    /// <li>
    /// <p><code>RUS</code>: Russia's view on Crimea</p></li>
    /// <li>
    /// <p><code>SDN</code>: Sudan's view on the Halaib Triangle</p></li>
    /// <li>
    /// <p><code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p></li>
    /// <li>
    /// <p><code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p></li>
    /// <li>
    /// <p><code>SYR</code>: Syria's view on the Golan Heights</p></li>
    /// <li>
    /// <p><code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p></li>
    /// <li>
    /// <p><code>TZA</code>: Tanzania's view on Lake Malawi</p></li>
    /// <li>
    /// <p><code>URY</code>: Uruguay's view on Rincon de Artigas</p></li>
    /// <li>
    /// <p><code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p></li>
    /// </ul>
    pub fn political_view(&self) -> ::std::option::Option<&str> {
        self.political_view.as_deref()
    }
    /// <p>Determines if the result image will display icons representing points of interest on the map.</p>
    pub fn points_of_interests(&self) -> ::std::option::Option<&crate::types::MapFeatureMode> {
        self.points_of_interests.as_ref()
    }
    /// <p>Used with center parameter, it specifies the zoom of the image where you can control it on a granular level. Takes in any value <code>&gt;= 1</code>.</p>
    /// <p>Example: <code>1500</code></p><note>
    /// <p>Cannot be used with <code>Zoom</code>.</p>
    /// </note>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    /// <p></p>
    pub fn radius(&self) -> ::std::option::Option<i64> {
        self.radius
    }
    /// <p>The map scaling parameter to size the image, icons, and labels. It follows the pattern of <code>^map(@2x)?$</code>.</p>
    /// <p>Example: <code>map, map@2x</code></p>
    pub fn file_name(&self) -> ::std::option::Option<&str> {
        self.file_name.as_deref()
    }
    /// <p>Displays a scale on the bottom right of the map image with the unit specified in the input.</p>
    /// <p>Example: <code>KilometersMiles, Miles, Kilometers, MilesKilometers</code></p>
    pub fn scale_bar_unit(&self) -> ::std::option::Option<&crate::types::ScaleBarUnit> {
        self.scale_bar_unit.as_ref()
    }
    /// <p><code>Style</code> specifies the desired map style.</p>
    pub fn style(&self) -> ::std::option::Option<&crate::types::StaticMapStyle> {
        self.style.as_ref()
    }
    /// <p>Specifies the width of the map image.</p>
    pub fn width(&self) -> ::std::option::Option<i32> {
        self.width
    }
    /// <p>Specifies the zoom level of the map image.</p><note>
    /// <p>Cannot be used with <code>Radius</code>.</p>
    /// </note>
    pub fn zoom(&self) -> ::std::option::Option<f32> {
        self.zoom
    }
}
impl ::std::fmt::Debug for GetStaticMapInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetStaticMapInput");
        formatter.field("bounding_box", &"*** Sensitive Data Redacted ***");
        formatter.field("bounded_positions", &"*** Sensitive Data Redacted ***");
        formatter.field("center", &"*** Sensitive Data Redacted ***");
        formatter.field("color_scheme", &self.color_scheme);
        formatter.field("compact_overlay", &"*** Sensitive Data Redacted ***");
        formatter.field("crop_labels", &self.crop_labels);
        formatter.field("geo_json_overlay", &"*** Sensitive Data Redacted ***");
        formatter.field("height", &"*** Sensitive Data Redacted ***");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("label_size", &self.label_size);
        formatter.field("language", &self.language);
        formatter.field("padding", &"*** Sensitive Data Redacted ***");
        formatter.field("political_view", &"*** Sensitive Data Redacted ***");
        formatter.field("points_of_interests", &self.points_of_interests);
        formatter.field("radius", &"*** Sensitive Data Redacted ***");
        formatter.field("file_name", &self.file_name);
        formatter.field("scale_bar_unit", &self.scale_bar_unit);
        formatter.field("style", &self.style);
        formatter.field("width", &"*** Sensitive Data Redacted ***");
        formatter.field("zoom", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetStaticMapInput {
    /// Creates a new builder-style object to manufacture [`GetStaticMapInput`](crate::operation::get_static_map::GetStaticMapInput).
    pub fn builder() -> crate::operation::get_static_map::builders::GetStaticMapInputBuilder {
        crate::operation::get_static_map::builders::GetStaticMapInputBuilder::default()
    }
}

/// A builder for [`GetStaticMapInput`](crate::operation::get_static_map::GetStaticMapInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetStaticMapInputBuilder {
    pub(crate) bounding_box: ::std::option::Option<::std::string::String>,
    pub(crate) bounded_positions: ::std::option::Option<::std::string::String>,
    pub(crate) center: ::std::option::Option<::std::string::String>,
    pub(crate) color_scheme: ::std::option::Option<crate::types::ColorScheme>,
    pub(crate) compact_overlay: ::std::option::Option<::std::string::String>,
    pub(crate) crop_labels: ::std::option::Option<bool>,
    pub(crate) geo_json_overlay: ::std::option::Option<::std::string::String>,
    pub(crate) height: ::std::option::Option<i32>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) label_size: ::std::option::Option<crate::types::LabelSize>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
    pub(crate) padding: ::std::option::Option<i32>,
    pub(crate) political_view: ::std::option::Option<::std::string::String>,
    pub(crate) points_of_interests: ::std::option::Option<crate::types::MapFeatureMode>,
    pub(crate) radius: ::std::option::Option<i64>,
    pub(crate) file_name: ::std::option::Option<::std::string::String>,
    pub(crate) scale_bar_unit: ::std::option::Option<crate::types::ScaleBarUnit>,
    pub(crate) style: ::std::option::Option<crate::types::StaticMapStyle>,
    pub(crate) width: ::std::option::Option<i32>,
    pub(crate) zoom: ::std::option::Option<f32>,
}
impl GetStaticMapInputBuilder {
    /// <p>Takes in two pairs of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], denoting south-westerly and north-easterly edges of the image. The underlying area becomes the view of the image.</p>
    /// <p>Example: -123.17075,49.26959,-123.08125,49.31429</p>
    pub fn bounding_box(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bounding_box = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Takes in two pairs of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], denoting south-westerly and north-easterly edges of the image. The underlying area becomes the view of the image.</p>
    /// <p>Example: -123.17075,49.26959,-123.08125,49.31429</p>
    pub fn set_bounding_box(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bounding_box = input;
        self
    }
    /// <p>Takes in two pairs of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], denoting south-westerly and north-easterly edges of the image. The underlying area becomes the view of the image.</p>
    /// <p>Example: -123.17075,49.26959,-123.08125,49.31429</p>
    pub fn get_bounding_box(&self) -> &::std::option::Option<::std::string::String> {
        &self.bounding_box
    }
    /// <p>Takes in two or more pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], with each coordinate separated by a comma. The API will generate an image to encompass all of the provided coordinates.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 97.170451,78.039098,99.045536,27.176178</p>
    pub fn bounded_positions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bounded_positions = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Takes in two or more pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], with each coordinate separated by a comma. The API will generate an image to encompass all of the provided coordinates.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 97.170451,78.039098,99.045536,27.176178</p>
    pub fn set_bounded_positions(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bounded_positions = input;
        self
    }
    /// <p>Takes in two or more pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], with each coordinate separated by a comma. The API will generate an image to encompass all of the provided coordinates.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 97.170451,78.039098,99.045536,27.176178</p>
    pub fn get_bounded_positions(&self) -> &::std::option::Option<::std::string::String> {
        &self.bounded_positions
    }
    /// <p>Takes in a pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], which becomes the center point of the image. This parameter requires that either zoom or radius is set.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 49.295,-123.108</p>
    pub fn center(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.center = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Takes in a pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], which becomes the center point of the image. This parameter requires that either zoom or radius is set.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 49.295,-123.108</p>
    pub fn set_center(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.center = input;
        self
    }
    /// <p>Takes in a pair of coordinates in World Geodetic System (WGS 84) format: \[longitude, latitude\], which becomes the center point of the image. This parameter requires that either zoom or radius is set.</p><note>
    /// <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p>
    /// </note>
    /// <p>Example: 49.295,-123.108</p>
    pub fn get_center(&self) -> &::std::option::Option<::std::string::String> {
        &self.center
    }
    /// <p>Sets color tone for map, such as dark and light for specific map styles. It only applies to vector map styles, such as Standard.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for <code>ColorScheme</code> are case sensitive.</p>
    /// </note>
    pub fn color_scheme(mut self, input: crate::types::ColorScheme) -> Self {
        self.color_scheme = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets color tone for map, such as dark and light for specific map styles. It only applies to vector map styles, such as Standard.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for <code>ColorScheme</code> are case sensitive.</p>
    /// </note>
    pub fn set_color_scheme(mut self, input: ::std::option::Option<crate::types::ColorScheme>) -> Self {
        self.color_scheme = input;
        self
    }
    /// <p>Sets color tone for map, such as dark and light for specific map styles. It only applies to vector map styles, such as Standard.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for <code>ColorScheme</code> are case sensitive.</p>
    /// </note>
    pub fn get_color_scheme(&self) -> &::std::option::Option<crate::types::ColorScheme> {
        &self.color_scheme
    }
    /// <p>Takes in a string to draw geometries on the image. The input is a comma separated format as follows format: <code>\[Lon, Lat\]</code></p>
    /// <p>Example: <code>line:-122.407653,37.798557,-122.413291,37.802443;color=%23DD0000;width=7;outline-color=#00DD00;outline-width=5yd|point:-122.40572,37.80004;label=Fog Hill Market;size=large;text-color=%23DD0000;color=#EE4B2B</code></p><note>
    /// <p>Currently it supports the following geometry types: point, line and polygon. It does not support multiPoint , multiLine and multiPolgyon.</p>
    /// </note>
    pub fn compact_overlay(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compact_overlay = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Takes in a string to draw geometries on the image. The input is a comma separated format as follows format: <code>\[Lon, Lat\]</code></p>
    /// <p>Example: <code>line:-122.407653,37.798557,-122.413291,37.802443;color=%23DD0000;width=7;outline-color=#00DD00;outline-width=5yd|point:-122.40572,37.80004;label=Fog Hill Market;size=large;text-color=%23DD0000;color=#EE4B2B</code></p><note>
    /// <p>Currently it supports the following geometry types: point, line and polygon. It does not support multiPoint , multiLine and multiPolgyon.</p>
    /// </note>
    pub fn set_compact_overlay(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compact_overlay = input;
        self
    }
    /// <p>Takes in a string to draw geometries on the image. The input is a comma separated format as follows format: <code>\[Lon, Lat\]</code></p>
    /// <p>Example: <code>line:-122.407653,37.798557,-122.413291,37.802443;color=%23DD0000;width=7;outline-color=#00DD00;outline-width=5yd|point:-122.40572,37.80004;label=Fog Hill Market;size=large;text-color=%23DD0000;color=#EE4B2B</code></p><note>
    /// <p>Currently it supports the following geometry types: point, line and polygon. It does not support multiPoint , multiLine and multiPolgyon.</p>
    /// </note>
    pub fn get_compact_overlay(&self) -> &::std::option::Option<::std::string::String> {
        &self.compact_overlay
    }
    /// <p>It is a flag that takes in true or false. It prevents the labels that are on the edge of the image from being cut or obscured.</p>
    pub fn crop_labels(mut self, input: bool) -> Self {
        self.crop_labels = ::std::option::Option::Some(input);
        self
    }
    /// <p>It is a flag that takes in true or false. It prevents the labels that are on the edge of the image from being cut or obscured.</p>
    pub fn set_crop_labels(mut self, input: ::std::option::Option<bool>) -> Self {
        self.crop_labels = input;
        self
    }
    /// <p>It is a flag that takes in true or false. It prevents the labels that are on the edge of the image from being cut or obscured.</p>
    pub fn get_crop_labels(&self) -> &::std::option::Option<bool> {
        &self.crop_labels
    }
    /// <p>Takes in a string to draw geometries on the image. The input is a valid GeoJSON collection object.</p>
    /// <p>Example: <code>{"type":"FeatureCollection","features": \[{"type":"Feature","geometry":{"type":"MultiPoint","coordinates": \[\[-90.076345,51.504107\],\[-0.074451,51.506892\]\]},"properties": {"color":"#00DD00"}}\]}</code></p>
    pub fn geo_json_overlay(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.geo_json_overlay = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Takes in a string to draw geometries on the image. The input is a valid GeoJSON collection object.</p>
    /// <p>Example: <code>{"type":"FeatureCollection","features": \[{"type":"Feature","geometry":{"type":"MultiPoint","coordinates": \[\[-90.076345,51.504107\],\[-0.074451,51.506892\]\]},"properties": {"color":"#00DD00"}}\]}</code></p>
    pub fn set_geo_json_overlay(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.geo_json_overlay = input;
        self
    }
    /// <p>Takes in a string to draw geometries on the image. The input is a valid GeoJSON collection object.</p>
    /// <p>Example: <code>{"type":"FeatureCollection","features": \[{"type":"Feature","geometry":{"type":"MultiPoint","coordinates": \[\[-90.076345,51.504107\],\[-0.074451,51.506892\]\]},"properties": {"color":"#00DD00"}}\]}</code></p>
    pub fn get_geo_json_overlay(&self) -> &::std::option::Option<::std::string::String> {
        &self.geo_json_overlay
    }
    /// <p>Specifies the height of the map image.</p>
    /// This field is required.
    pub fn height(mut self, input: i32) -> Self {
        self.height = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the height of the map image.</p>
    pub fn set_height(mut self, input: ::std::option::Option<i32>) -> Self {
        self.height = input;
        self
    }
    /// <p>Specifies the height of the map image.</p>
    pub fn get_height(&self) -> &::std::option::Option<i32> {
        &self.height
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>Overrides the label size auto-calculated by <code>FileName</code>. Takes in one of the values - <code>Small</code> or <code>Large</code>.</p>
    pub fn label_size(mut self, input: crate::types::LabelSize) -> Self {
        self.label_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Overrides the label size auto-calculated by <code>FileName</code>. Takes in one of the values - <code>Small</code> or <code>Large</code>.</p>
    pub fn set_label_size(mut self, input: ::std::option::Option<crate::types::LabelSize>) -> Self {
        self.label_size = input;
        self
    }
    /// <p>Overrides the label size auto-calculated by <code>FileName</code>. Takes in one of the values - <code>Small</code> or <code>Large</code>.</p>
    pub fn get_label_size(&self) -> &::std::option::Option<crate::types::LabelSize> {
        &self.label_size
    }
    /// <p>Specifies the language on the map labels using the BCP 47 language tag, limited to ISO 639-1 two-letter language codes. If the specified language data isn't available for the map image, the labels will default to the regional primary language.</p>
    /// <p>Supported codes:</p>
    /// <ul>
    /// <li>
    /// <p><code>ar</code></p></li>
    /// <li>
    /// <p><code>as</code></p></li>
    /// <li>
    /// <p><code>az</code></p></li>
    /// <li>
    /// <p><code>be</code></p></li>
    /// <li>
    /// <p><code>bg</code></p></li>
    /// <li>
    /// <p><code>bn</code></p></li>
    /// <li>
    /// <p><code>bs</code></p></li>
    /// <li>
    /// <p><code>ca</code></p></li>
    /// <li>
    /// <p><code>cs</code></p></li>
    /// <li>
    /// <p><code>cy</code></p></li>
    /// <li>
    /// <p><code>da</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>el</code></p></li>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>et</code></p></li>
    /// <li>
    /// <p><code>eu</code></p></li>
    /// <li>
    /// <p><code>fi</code></p></li>
    /// <li>
    /// <p><code>fo</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>ga</code></p></li>
    /// <li>
    /// <p><code>gl</code></p></li>
    /// <li>
    /// <p><code>gn</code></p></li>
    /// <li>
    /// <p><code>gu</code></p></li>
    /// <li>
    /// <p><code>he</code></p></li>
    /// <li>
    /// <p><code>hi</code></p></li>
    /// <li>
    /// <p><code>hr</code></p></li>
    /// <li>
    /// <p><code>hu</code></p></li>
    /// <li>
    /// <p><code>hy</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>is</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ka</code></p></li>
    /// <li>
    /// <p><code>kk</code></p></li>
    /// <li>
    /// <p><code>km</code></p></li>
    /// <li>
    /// <p><code>kn</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>ky</code></p></li>
    /// <li>
    /// <p><code>lt</code></p></li>
    /// <li>
    /// <p><code>lv</code></p></li>
    /// <li>
    /// <p><code>mk</code></p></li>
    /// <li>
    /// <p><code>ml</code></p></li>
    /// <li>
    /// <p><code>mr</code></p></li>
    /// <li>
    /// <p><code>ms</code></p></li>
    /// <li>
    /// <p><code>mt</code></p></li>
    /// <li>
    /// <p><code>my</code></p></li>
    /// <li>
    /// <p><code>nl</code></p></li>
    /// <li>
    /// <p><code>no</code></p></li>
    /// <li>
    /// <p><code>or</code></p></li>
    /// <li>
    /// <p><code>pa</code></p></li>
    /// <li>
    /// <p><code>pl</code></p></li>
    /// <li>
    /// <p><code>pt</code></p></li>
    /// <li>
    /// <p><code>ro</code></p></li>
    /// <li>
    /// <p><code>ru</code></p></li>
    /// <li>
    /// <p><code>sk</code></p></li>
    /// <li>
    /// <p><code>sl</code></p></li>
    /// <li>
    /// <p><code>sq</code></p></li>
    /// <li>
    /// <p><code>sr</code></p></li>
    /// <li>
    /// <p><code>sv</code></p></li>
    /// <li>
    /// <p><code>ta</code></p></li>
    /// <li>
    /// <p><code>te</code></p></li>
    /// <li>
    /// <p><code>th</code></p></li>
    /// <li>
    /// <p><code>tr</code></p></li>
    /// <li>
    /// <p><code>uk</code></p></li>
    /// <li>
    /// <p><code>uz</code></p></li>
    /// <li>
    /// <p><code>vi</code></p></li>
    /// <li>
    /// <p><code>zh</code></p></li>
    /// </ul>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the language on the map labels using the BCP 47 language tag, limited to ISO 639-1 two-letter language codes. If the specified language data isn't available for the map image, the labels will default to the regional primary language.</p>
    /// <p>Supported codes:</p>
    /// <ul>
    /// <li>
    /// <p><code>ar</code></p></li>
    /// <li>
    /// <p><code>as</code></p></li>
    /// <li>
    /// <p><code>az</code></p></li>
    /// <li>
    /// <p><code>be</code></p></li>
    /// <li>
    /// <p><code>bg</code></p></li>
    /// <li>
    /// <p><code>bn</code></p></li>
    /// <li>
    /// <p><code>bs</code></p></li>
    /// <li>
    /// <p><code>ca</code></p></li>
    /// <li>
    /// <p><code>cs</code></p></li>
    /// <li>
    /// <p><code>cy</code></p></li>
    /// <li>
    /// <p><code>da</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>el</code></p></li>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>et</code></p></li>
    /// <li>
    /// <p><code>eu</code></p></li>
    /// <li>
    /// <p><code>fi</code></p></li>
    /// <li>
    /// <p><code>fo</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>ga</code></p></li>
    /// <li>
    /// <p><code>gl</code></p></li>
    /// <li>
    /// <p><code>gn</code></p></li>
    /// <li>
    /// <p><code>gu</code></p></li>
    /// <li>
    /// <p><code>he</code></p></li>
    /// <li>
    /// <p><code>hi</code></p></li>
    /// <li>
    /// <p><code>hr</code></p></li>
    /// <li>
    /// <p><code>hu</code></p></li>
    /// <li>
    /// <p><code>hy</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>is</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ka</code></p></li>
    /// <li>
    /// <p><code>kk</code></p></li>
    /// <li>
    /// <p><code>km</code></p></li>
    /// <li>
    /// <p><code>kn</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>ky</code></p></li>
    /// <li>
    /// <p><code>lt</code></p></li>
    /// <li>
    /// <p><code>lv</code></p></li>
    /// <li>
    /// <p><code>mk</code></p></li>
    /// <li>
    /// <p><code>ml</code></p></li>
    /// <li>
    /// <p><code>mr</code></p></li>
    /// <li>
    /// <p><code>ms</code></p></li>
    /// <li>
    /// <p><code>mt</code></p></li>
    /// <li>
    /// <p><code>my</code></p></li>
    /// <li>
    /// <p><code>nl</code></p></li>
    /// <li>
    /// <p><code>no</code></p></li>
    /// <li>
    /// <p><code>or</code></p></li>
    /// <li>
    /// <p><code>pa</code></p></li>
    /// <li>
    /// <p><code>pl</code></p></li>
    /// <li>
    /// <p><code>pt</code></p></li>
    /// <li>
    /// <p><code>ro</code></p></li>
    /// <li>
    /// <p><code>ru</code></p></li>
    /// <li>
    /// <p><code>sk</code></p></li>
    /// <li>
    /// <p><code>sl</code></p></li>
    /// <li>
    /// <p><code>sq</code></p></li>
    /// <li>
    /// <p><code>sr</code></p></li>
    /// <li>
    /// <p><code>sv</code></p></li>
    /// <li>
    /// <p><code>ta</code></p></li>
    /// <li>
    /// <p><code>te</code></p></li>
    /// <li>
    /// <p><code>th</code></p></li>
    /// <li>
    /// <p><code>tr</code></p></li>
    /// <li>
    /// <p><code>uk</code></p></li>
    /// <li>
    /// <p><code>uz</code></p></li>
    /// <li>
    /// <p><code>vi</code></p></li>
    /// <li>
    /// <p><code>zh</code></p></li>
    /// </ul>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>Specifies the language on the map labels using the BCP 47 language tag, limited to ISO 639-1 two-letter language codes. If the specified language data isn't available for the map image, the labels will default to the regional primary language.</p>
    /// <p>Supported codes:</p>
    /// <ul>
    /// <li>
    /// <p><code>ar</code></p></li>
    /// <li>
    /// <p><code>as</code></p></li>
    /// <li>
    /// <p><code>az</code></p></li>
    /// <li>
    /// <p><code>be</code></p></li>
    /// <li>
    /// <p><code>bg</code></p></li>
    /// <li>
    /// <p><code>bn</code></p></li>
    /// <li>
    /// <p><code>bs</code></p></li>
    /// <li>
    /// <p><code>ca</code></p></li>
    /// <li>
    /// <p><code>cs</code></p></li>
    /// <li>
    /// <p><code>cy</code></p></li>
    /// <li>
    /// <p><code>da</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>el</code></p></li>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>et</code></p></li>
    /// <li>
    /// <p><code>eu</code></p></li>
    /// <li>
    /// <p><code>fi</code></p></li>
    /// <li>
    /// <p><code>fo</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>ga</code></p></li>
    /// <li>
    /// <p><code>gl</code></p></li>
    /// <li>
    /// <p><code>gn</code></p></li>
    /// <li>
    /// <p><code>gu</code></p></li>
    /// <li>
    /// <p><code>he</code></p></li>
    /// <li>
    /// <p><code>hi</code></p></li>
    /// <li>
    /// <p><code>hr</code></p></li>
    /// <li>
    /// <p><code>hu</code></p></li>
    /// <li>
    /// <p><code>hy</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>is</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ka</code></p></li>
    /// <li>
    /// <p><code>kk</code></p></li>
    /// <li>
    /// <p><code>km</code></p></li>
    /// <li>
    /// <p><code>kn</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>ky</code></p></li>
    /// <li>
    /// <p><code>lt</code></p></li>
    /// <li>
    /// <p><code>lv</code></p></li>
    /// <li>
    /// <p><code>mk</code></p></li>
    /// <li>
    /// <p><code>ml</code></p></li>
    /// <li>
    /// <p><code>mr</code></p></li>
    /// <li>
    /// <p><code>ms</code></p></li>
    /// <li>
    /// <p><code>mt</code></p></li>
    /// <li>
    /// <p><code>my</code></p></li>
    /// <li>
    /// <p><code>nl</code></p></li>
    /// <li>
    /// <p><code>no</code></p></li>
    /// <li>
    /// <p><code>or</code></p></li>
    /// <li>
    /// <p><code>pa</code></p></li>
    /// <li>
    /// <p><code>pl</code></p></li>
    /// <li>
    /// <p><code>pt</code></p></li>
    /// <li>
    /// <p><code>ro</code></p></li>
    /// <li>
    /// <p><code>ru</code></p></li>
    /// <li>
    /// <p><code>sk</code></p></li>
    /// <li>
    /// <p><code>sl</code></p></li>
    /// <li>
    /// <p><code>sq</code></p></li>
    /// <li>
    /// <p><code>sr</code></p></li>
    /// <li>
    /// <p><code>sv</code></p></li>
    /// <li>
    /// <p><code>ta</code></p></li>
    /// <li>
    /// <p><code>te</code></p></li>
    /// <li>
    /// <p><code>th</code></p></li>
    /// <li>
    /// <p><code>tr</code></p></li>
    /// <li>
    /// <p><code>uk</code></p></li>
    /// <li>
    /// <p><code>uz</code></p></li>
    /// <li>
    /// <p><code>vi</code></p></li>
    /// <li>
    /// <p><code>zh</code></p></li>
    /// </ul>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// <p>Applies additional space (in pixels) around overlay feature to prevent them from being cut or obscured.</p><note>
    /// <p>Value for max and min is determined by:</p>
    /// <p>Min: <code>1</code></p>
    /// <p>Max: <code>min(height, width)/4</code></p>
    /// </note>
    /// <p>Example: <code>100</code></p>
    pub fn padding(mut self, input: i32) -> Self {
        self.padding = ::std::option::Option::Some(input);
        self
    }
    /// <p>Applies additional space (in pixels) around overlay feature to prevent them from being cut or obscured.</p><note>
    /// <p>Value for max and min is determined by:</p>
    /// <p>Min: <code>1</code></p>
    /// <p>Max: <code>min(height, width)/4</code></p>
    /// </note>
    /// <p>Example: <code>100</code></p>
    pub fn set_padding(mut self, input: ::std::option::Option<i32>) -> Self {
        self.padding = input;
        self
    }
    /// <p>Applies additional space (in pixels) around overlay feature to prevent them from being cut or obscured.</p><note>
    /// <p>Value for max and min is determined by:</p>
    /// <p>Min: <code>1</code></p>
    /// <p>Max: <code>min(height, width)/4</code></p>
    /// </note>
    /// <p>Example: <code>100</code></p>
    pub fn get_padding(&self) -> &::std::option::Option<i32> {
        &self.padding
    }
    /// <p>Specifies the political view, using ISO 3166-2 or ISO 3166-3 country code format.</p>
    /// <p>The following political views are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p></li>
    /// <li>
    /// <p><code>EGY</code>: Egypt's view on Bir Tawil</p></li>
    /// <li>
    /// <p><code>IND</code>: India's view on Gilgit-Baltistan</p></li>
    /// <li>
    /// <p><code>KEN</code>: Kenya's view on the Ilemi Triangle</p></li>
    /// <li>
    /// <p><code>MAR</code>: Morocco's view on Western Sahara</p></li>
    /// <li>
    /// <p><code>RUS</code>: Russia's view on Crimea</p></li>
    /// <li>
    /// <p><code>SDN</code>: Sudan's view on the Halaib Triangle</p></li>
    /// <li>
    /// <p><code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p></li>
    /// <li>
    /// <p><code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p></li>
    /// <li>
    /// <p><code>SYR</code>: Syria's view on the Golan Heights</p></li>
    /// <li>
    /// <p><code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p></li>
    /// <li>
    /// <p><code>TZA</code>: Tanzania's view on Lake Malawi</p></li>
    /// <li>
    /// <p><code>URY</code>: Uruguay's view on Rincon de Artigas</p></li>
    /// <li>
    /// <p><code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p></li>
    /// </ul>
    pub fn political_view(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.political_view = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the political view, using ISO 3166-2 or ISO 3166-3 country code format.</p>
    /// <p>The following political views are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p></li>
    /// <li>
    /// <p><code>EGY</code>: Egypt's view on Bir Tawil</p></li>
    /// <li>
    /// <p><code>IND</code>: India's view on Gilgit-Baltistan</p></li>
    /// <li>
    /// <p><code>KEN</code>: Kenya's view on the Ilemi Triangle</p></li>
    /// <li>
    /// <p><code>MAR</code>: Morocco's view on Western Sahara</p></li>
    /// <li>
    /// <p><code>RUS</code>: Russia's view on Crimea</p></li>
    /// <li>
    /// <p><code>SDN</code>: Sudan's view on the Halaib Triangle</p></li>
    /// <li>
    /// <p><code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p></li>
    /// <li>
    /// <p><code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p></li>
    /// <li>
    /// <p><code>SYR</code>: Syria's view on the Golan Heights</p></li>
    /// <li>
    /// <p><code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p></li>
    /// <li>
    /// <p><code>TZA</code>: Tanzania's view on Lake Malawi</p></li>
    /// <li>
    /// <p><code>URY</code>: Uruguay's view on Rincon de Artigas</p></li>
    /// <li>
    /// <p><code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p></li>
    /// </ul>
    pub fn set_political_view(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.political_view = input;
        self
    }
    /// <p>Specifies the political view, using ISO 3166-2 or ISO 3166-3 country code format.</p>
    /// <p>The following political views are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p></li>
    /// <li>
    /// <p><code>EGY</code>: Egypt's view on Bir Tawil</p></li>
    /// <li>
    /// <p><code>IND</code>: India's view on Gilgit-Baltistan</p></li>
    /// <li>
    /// <p><code>KEN</code>: Kenya's view on the Ilemi Triangle</p></li>
    /// <li>
    /// <p><code>MAR</code>: Morocco's view on Western Sahara</p></li>
    /// <li>
    /// <p><code>RUS</code>: Russia's view on Crimea</p></li>
    /// <li>
    /// <p><code>SDN</code>: Sudan's view on the Halaib Triangle</p></li>
    /// <li>
    /// <p><code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p></li>
    /// <li>
    /// <p><code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p></li>
    /// <li>
    /// <p><code>SYR</code>: Syria's view on the Golan Heights</p></li>
    /// <li>
    /// <p><code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p></li>
    /// <li>
    /// <p><code>TZA</code>: Tanzania's view on Lake Malawi</p></li>
    /// <li>
    /// <p><code>URY</code>: Uruguay's view on Rincon de Artigas</p></li>
    /// <li>
    /// <p><code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p></li>
    /// </ul>
    pub fn get_political_view(&self) -> &::std::option::Option<::std::string::String> {
        &self.political_view
    }
    /// <p>Determines if the result image will display icons representing points of interest on the map.</p>
    pub fn points_of_interests(mut self, input: crate::types::MapFeatureMode) -> Self {
        self.points_of_interests = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if the result image will display icons representing points of interest on the map.</p>
    pub fn set_points_of_interests(mut self, input: ::std::option::Option<crate::types::MapFeatureMode>) -> Self {
        self.points_of_interests = input;
        self
    }
    /// <p>Determines if the result image will display icons representing points of interest on the map.</p>
    pub fn get_points_of_interests(&self) -> &::std::option::Option<crate::types::MapFeatureMode> {
        &self.points_of_interests
    }
    /// <p>Used with center parameter, it specifies the zoom of the image where you can control it on a granular level. Takes in any value <code>&gt;= 1</code>.</p>
    /// <p>Example: <code>1500</code></p><note>
    /// <p>Cannot be used with <code>Zoom</code>.</p>
    /// </note>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    /// <p></p>
    pub fn radius(mut self, input: i64) -> Self {
        self.radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>Used with center parameter, it specifies the zoom of the image where you can control it on a granular level. Takes in any value <code>&gt;= 1</code>.</p>
    /// <p>Example: <code>1500</code></p><note>
    /// <p>Cannot be used with <code>Zoom</code>.</p>
    /// </note>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    /// <p></p>
    pub fn set_radius(mut self, input: ::std::option::Option<i64>) -> Self {
        self.radius = input;
        self
    }
    /// <p>Used with center parameter, it specifies the zoom of the image where you can control it on a granular level. Takes in any value <code>&gt;= 1</code>.</p>
    /// <p>Example: <code>1500</code></p><note>
    /// <p>Cannot be used with <code>Zoom</code>.</p>
    /// </note>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    /// <p></p>
    pub fn get_radius(&self) -> &::std::option::Option<i64> {
        &self.radius
    }
    /// <p>The map scaling parameter to size the image, icons, and labels. It follows the pattern of <code>^map(@2x)?$</code>.</p>
    /// <p>Example: <code>map, map@2x</code></p>
    /// This field is required.
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The map scaling parameter to size the image, icons, and labels. It follows the pattern of <code>^map(@2x)?$</code>.</p>
    /// <p>Example: <code>map, map@2x</code></p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_name = input;
        self
    }
    /// <p>The map scaling parameter to size the image, icons, and labels. It follows the pattern of <code>^map(@2x)?$</code>.</p>
    /// <p>Example: <code>map, map@2x</code></p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_name
    }
    /// <p>Displays a scale on the bottom right of the map image with the unit specified in the input.</p>
    /// <p>Example: <code>KilometersMiles, Miles, Kilometers, MilesKilometers</code></p>
    pub fn scale_bar_unit(mut self, input: crate::types::ScaleBarUnit) -> Self {
        self.scale_bar_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays a scale on the bottom right of the map image with the unit specified in the input.</p>
    /// <p>Example: <code>KilometersMiles, Miles, Kilometers, MilesKilometers</code></p>
    pub fn set_scale_bar_unit(mut self, input: ::std::option::Option<crate::types::ScaleBarUnit>) -> Self {
        self.scale_bar_unit = input;
        self
    }
    /// <p>Displays a scale on the bottom right of the map image with the unit specified in the input.</p>
    /// <p>Example: <code>KilometersMiles, Miles, Kilometers, MilesKilometers</code></p>
    pub fn get_scale_bar_unit(&self) -> &::std::option::Option<crate::types::ScaleBarUnit> {
        &self.scale_bar_unit
    }
    /// <p><code>Style</code> specifies the desired map style.</p>
    pub fn style(mut self, input: crate::types::StaticMapStyle) -> Self {
        self.style = ::std::option::Option::Some(input);
        self
    }
    /// <p><code>Style</code> specifies the desired map style.</p>
    pub fn set_style(mut self, input: ::std::option::Option<crate::types::StaticMapStyle>) -> Self {
        self.style = input;
        self
    }
    /// <p><code>Style</code> specifies the desired map style.</p>
    pub fn get_style(&self) -> &::std::option::Option<crate::types::StaticMapStyle> {
        &self.style
    }
    /// <p>Specifies the width of the map image.</p>
    /// This field is required.
    pub fn width(mut self, input: i32) -> Self {
        self.width = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the width of the map image.</p>
    pub fn set_width(mut self, input: ::std::option::Option<i32>) -> Self {
        self.width = input;
        self
    }
    /// <p>Specifies the width of the map image.</p>
    pub fn get_width(&self) -> &::std::option::Option<i32> {
        &self.width
    }
    /// <p>Specifies the zoom level of the map image.</p><note>
    /// <p>Cannot be used with <code>Radius</code>.</p>
    /// </note>
    pub fn zoom(mut self, input: f32) -> Self {
        self.zoom = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the zoom level of the map image.</p><note>
    /// <p>Cannot be used with <code>Radius</code>.</p>
    /// </note>
    pub fn set_zoom(mut self, input: ::std::option::Option<f32>) -> Self {
        self.zoom = input;
        self
    }
    /// <p>Specifies the zoom level of the map image.</p><note>
    /// <p>Cannot be used with <code>Radius</code>.</p>
    /// </note>
    pub fn get_zoom(&self) -> &::std::option::Option<f32> {
        &self.zoom
    }
    /// Consumes the builder and constructs a [`GetStaticMapInput`](crate::operation::get_static_map::GetStaticMapInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_static_map::GetStaticMapInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_static_map::GetStaticMapInput {
            bounding_box: self.bounding_box,
            bounded_positions: self.bounded_positions,
            center: self.center,
            color_scheme: self.color_scheme,
            compact_overlay: self.compact_overlay,
            crop_labels: self.crop_labels,
            geo_json_overlay: self.geo_json_overlay,
            height: self.height,
            key: self.key,
            label_size: self.label_size,
            language: self.language,
            padding: self.padding,
            political_view: self.political_view,
            points_of_interests: self.points_of_interests,
            radius: self.radius,
            file_name: self.file_name,
            scale_bar_unit: self.scale_bar_unit,
            style: self.style,
            width: self.width,
            zoom: self.zoom,
        })
    }
}
impl ::std::fmt::Debug for GetStaticMapInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetStaticMapInputBuilder");
        formatter.field("bounding_box", &"*** Sensitive Data Redacted ***");
        formatter.field("bounded_positions", &"*** Sensitive Data Redacted ***");
        formatter.field("center", &"*** Sensitive Data Redacted ***");
        formatter.field("color_scheme", &self.color_scheme);
        formatter.field("compact_overlay", &"*** Sensitive Data Redacted ***");
        formatter.field("crop_labels", &self.crop_labels);
        formatter.field("geo_json_overlay", &"*** Sensitive Data Redacted ***");
        formatter.field("height", &"*** Sensitive Data Redacted ***");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("label_size", &self.label_size);
        formatter.field("language", &self.language);
        formatter.field("padding", &"*** Sensitive Data Redacted ***");
        formatter.field("political_view", &"*** Sensitive Data Redacted ***");
        formatter.field("points_of_interests", &self.points_of_interests);
        formatter.field("radius", &"*** Sensitive Data Redacted ***");
        formatter.field("file_name", &self.file_name);
        formatter.field("scale_bar_unit", &self.scale_bar_unit);
        formatter.field("style", &self.style);
        formatter.field("width", &"*** Sensitive Data Redacted ***");
        formatter.field("zoom", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
