// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_sprites::_get_sprites_output::GetSpritesOutputBuilder;

pub use crate::operation::get_sprites::_get_sprites_input::GetSpritesInputBuilder;

impl crate::operation::get_sprites::builders::GetSpritesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_sprites::GetSpritesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_sprites::GetSpritesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_sprites();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetSprites`.
///
/// <p><code>GetSprites</code> returns the map's sprites.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/styling-iconography-with-sprites.html">Style iconography with sprites</a> in the <i>Amazon Location Service Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetSpritesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_sprites::builders::GetSpritesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_sprites::GetSpritesOutput,
        crate::operation::get_sprites::GetSpritesError,
    > for GetSpritesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_sprites::GetSpritesOutput,
            crate::operation::get_sprites::GetSpritesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetSpritesFluentBuilder {
    /// Creates a new `GetSpritesFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetSprites as a reference.
    pub fn as_input(&self) -> &crate::operation::get_sprites::builders::GetSpritesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_sprites::GetSpritesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_sprites::GetSpritesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_sprites::GetSprites::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_sprites::GetSprites::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_sprites::GetSpritesOutput,
        crate::operation::get_sprites::GetSpritesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p><code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\.(png|json)</code>.</p>
    /// <p>Example: <code>sprites.png</code></p>
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.file_name(input.into());
        self
    }
    /// <p><code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\.(png|json)</code>.</p>
    /// <p>Example: <code>sprites.png</code></p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_file_name(input);
        self
    }
    /// <p><code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\.(png|json)</code>.</p>
    /// <p>Example: <code>sprites.png</code></p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_file_name()
    }
    /// <p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>
    pub fn style(mut self, input: crate::types::MapStyle) -> Self {
        self.inner = self.inner.style(input);
        self
    }
    /// <p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>
    pub fn set_style(mut self, input: ::std::option::Option<crate::types::MapStyle>) -> Self {
        self.inner = self.inner.set_style(input);
        self
    }
    /// <p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>
    pub fn get_style(&self) -> &::std::option::Option<crate::types::MapStyle> {
        self.inner.get_style()
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub fn color_scheme(mut self, input: crate::types::ColorScheme) -> Self {
        self.inner = self.inner.color_scheme(input);
        self
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub fn set_color_scheme(mut self, input: ::std::option::Option<crate::types::ColorScheme>) -> Self {
        self.inner = self.inner.set_color_scheme(input);
        self
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub fn get_color_scheme(&self) -> &::std::option::Option<crate::types::ColorScheme> {
        self.inner.get_color_scheme()
    }
    /// <p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p>
    /// <p>Example: <code>Default</code></p><note>
    /// <p>Valid values for Variant are case sensitive.</p>
    /// </note>
    pub fn variant(mut self, input: crate::types::Variant) -> Self {
        self.inner = self.inner.variant(input);
        self
    }
    /// <p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p>
    /// <p>Example: <code>Default</code></p><note>
    /// <p>Valid values for Variant are case sensitive.</p>
    /// </note>
    pub fn set_variant(mut self, input: ::std::option::Option<crate::types::Variant>) -> Self {
        self.inner = self.inner.set_variant(input);
        self
    }
    /// <p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p>
    /// <p>Example: <code>Default</code></p><note>
    /// <p>Valid values for Variant are case sensitive.</p>
    /// </note>
    pub fn get_variant(&self) -> &::std::option::Option<crate::types::Variant> {
        self.inner.get_variant()
    }
}
