// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_style_descriptor::_get_style_descriptor_output::GetStyleDescriptorOutputBuilder;

pub use crate::operation::get_style_descriptor::_get_style_descriptor_input::GetStyleDescriptorInputBuilder;

impl crate::operation::get_style_descriptor::builders::GetStyleDescriptorInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_style_descriptor::GetStyleDescriptorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_style_descriptor::GetStyleDescriptorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_style_descriptor();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetStyleDescriptor`.
///
/// <p><code>GetStyleDescriptor</code> returns information about the style.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/styling-dynamic-maps.html">Style dynamic maps</a> in the <i>Amazon Location Service Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetStyleDescriptorFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_style_descriptor::builders::GetStyleDescriptorInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_style_descriptor::GetStyleDescriptorOutput,
        crate::operation::get_style_descriptor::GetStyleDescriptorError,
    > for GetStyleDescriptorFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_style_descriptor::GetStyleDescriptorOutput,
            crate::operation::get_style_descriptor::GetStyleDescriptorError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetStyleDescriptorFluentBuilder {
    /// Creates a new `GetStyleDescriptorFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetStyleDescriptor as a reference.
    pub fn as_input(&self) -> &crate::operation::get_style_descriptor::builders::GetStyleDescriptorInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_style_descriptor::GetStyleDescriptorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_style_descriptor::GetStyleDescriptorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_style_descriptor::GetStyleDescriptor::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_style_descriptor::GetStyleDescriptor::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_style_descriptor::GetStyleDescriptorOutput,
        crate::operation::get_style_descriptor::GetStyleDescriptorError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Style specifies the desired map style.</p>
    pub fn style(mut self, input: crate::types::MapStyle) -> Self {
        self.inner = self.inner.style(input);
        self
    }
    /// <p>Style specifies the desired map style.</p>
    pub fn set_style(mut self, input: ::std::option::Option<crate::types::MapStyle>) -> Self {
        self.inner = self.inner.set_style(input);
        self
    }
    /// <p>Style specifies the desired map style.</p>
    pub fn get_style(&self) -> &::std::option::Option<crate::types::MapStyle> {
        self.inner.get_style()
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub fn color_scheme(mut self, input: crate::types::ColorScheme) -> Self {
        self.inner = self.inner.color_scheme(input);
        self
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub fn set_color_scheme(mut self, input: ::std::option::Option<crate::types::ColorScheme>) -> Self {
        self.inner = self.inner.set_color_scheme(input);
        self
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub fn get_color_scheme(&self) -> &::std::option::Option<crate::types::ColorScheme> {
        self.inner.get_color_scheme()
    }
    /// <p>Specifies the political view using ISO 3166-2 or ISO 3166-3 country code format.</p>
    /// <p>The following political views are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p></li>
    /// <li>
    /// <p><code>EGY</code>: Egypt's view on Bir Tawil</p></li>
    /// <li>
    /// <p><code>IND</code>: India's view on Gilgit-Baltistan</p></li>
    /// <li>
    /// <p><code>KEN</code>: Kenya's view on the Ilemi Triangle</p></li>
    /// <li>
    /// <p><code>MAR</code>: Morocco's view on Western Sahara</p></li>
    /// <li>
    /// <p><code>RUS</code>: Russia's view on Crimea</p></li>
    /// <li>
    /// <p><code>SDN</code>: Sudan's view on the Halaib Triangle</p></li>
    /// <li>
    /// <p><code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p></li>
    /// <li>
    /// <p><code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p></li>
    /// <li>
    /// <p><code>SYR</code>: Syria's view on the Golan Heights</p></li>
    /// <li>
    /// <p><code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p></li>
    /// <li>
    /// <p><code>TZA</code>: Tanzania's view on Lake Malawi</p></li>
    /// <li>
    /// <p><code>URY</code>: Uruguay's view on Rincon de Artigas</p></li>
    /// <li>
    /// <p><code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p></li>
    /// </ul>
    pub fn political_view(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.political_view(input.into());
        self
    }
    /// <p>Specifies the political view using ISO 3166-2 or ISO 3166-3 country code format.</p>
    /// <p>The following political views are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p></li>
    /// <li>
    /// <p><code>EGY</code>: Egypt's view on Bir Tawil</p></li>
    /// <li>
    /// <p><code>IND</code>: India's view on Gilgit-Baltistan</p></li>
    /// <li>
    /// <p><code>KEN</code>: Kenya's view on the Ilemi Triangle</p></li>
    /// <li>
    /// <p><code>MAR</code>: Morocco's view on Western Sahara</p></li>
    /// <li>
    /// <p><code>RUS</code>: Russia's view on Crimea</p></li>
    /// <li>
    /// <p><code>SDN</code>: Sudan's view on the Halaib Triangle</p></li>
    /// <li>
    /// <p><code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p></li>
    /// <li>
    /// <p><code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p></li>
    /// <li>
    /// <p><code>SYR</code>: Syria's view on the Golan Heights</p></li>
    /// <li>
    /// <p><code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p></li>
    /// <li>
    /// <p><code>TZA</code>: Tanzania's view on Lake Malawi</p></li>
    /// <li>
    /// <p><code>URY</code>: Uruguay's view on Rincon de Artigas</p></li>
    /// <li>
    /// <p><code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p></li>
    /// </ul>
    pub fn set_political_view(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_political_view(input);
        self
    }
    /// <p>Specifies the political view using ISO 3166-2 or ISO 3166-3 country code format.</p>
    /// <p>The following political views are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p></li>
    /// <li>
    /// <p><code>EGY</code>: Egypt's view on Bir Tawil</p></li>
    /// <li>
    /// <p><code>IND</code>: India's view on Gilgit-Baltistan</p></li>
    /// <li>
    /// <p><code>KEN</code>: Kenya's view on the Ilemi Triangle</p></li>
    /// <li>
    /// <p><code>MAR</code>: Morocco's view on Western Sahara</p></li>
    /// <li>
    /// <p><code>RUS</code>: Russia's view on Crimea</p></li>
    /// <li>
    /// <p><code>SDN</code>: Sudan's view on the Halaib Triangle</p></li>
    /// <li>
    /// <p><code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p></li>
    /// <li>
    /// <p><code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p></li>
    /// <li>
    /// <p><code>SYR</code>: Syria's view on the Golan Heights</p></li>
    /// <li>
    /// <p><code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p></li>
    /// <li>
    /// <p><code>TZA</code>: Tanzania's view on Lake Malawi</p></li>
    /// <li>
    /// <p><code>URY</code>: Uruguay's view on Rincon de Artigas</p></li>
    /// <li>
    /// <p><code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p></li>
    /// </ul>
    pub fn get_political_view(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_political_view()
    }
    /// <p>Adjusts how physical terrain details are rendered on the map.</p>
    /// <p>The following terrain styles are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>Hillshade</code>: Displays the physical terrain details through shading and highlighting of elevation change and geographic features.</p></li>
    /// </ul>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn terrain(mut self, input: crate::types::Terrain) -> Self {
        self.inner = self.inner.terrain(input);
        self
    }
    /// <p>Adjusts how physical terrain details are rendered on the map.</p>
    /// <p>The following terrain styles are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>Hillshade</code>: Displays the physical terrain details through shading and highlighting of elevation change and geographic features.</p></li>
    /// </ul>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn set_terrain(mut self, input: ::std::option::Option<crate::types::Terrain>) -> Self {
        self.inner = self.inner.set_terrain(input);
        self
    }
    /// <p>Adjusts how physical terrain details are rendered on the map.</p>
    /// <p>The following terrain styles are currently supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>Hillshade</code>: Displays the physical terrain details through shading and highlighting of elevation change and geographic features.</p></li>
    /// </ul>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn get_terrain(&self) -> &::std::option::Option<crate::types::Terrain> {
        self.inner.get_terrain()
    }
    /// <p>Displays the shape and steepness of terrain features using elevation lines. The density value controls how densely the available contour line information is rendered on the map.</p>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn contour_density(mut self, input: crate::types::ContourDensity) -> Self {
        self.inner = self.inner.contour_density(input);
        self
    }
    /// <p>Displays the shape and steepness of terrain features using elevation lines. The density value controls how densely the available contour line information is rendered on the map.</p>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn set_contour_density(mut self, input: ::std::option::Option<crate::types::ContourDensity>) -> Self {
        self.inner = self.inner.set_contour_density(input);
        self
    }
    /// <p>Displays the shape and steepness of terrain features using elevation lines. The density value controls how densely the available contour line information is rendered on the map.</p>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn get_contour_density(&self) -> &::std::option::Option<crate::types::ContourDensity> {
        self.inner.get_contour_density()
    }
    /// <p>Displays real-time traffic information overlay on map, such as incident events and flow events.</p>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn traffic(mut self, input: crate::types::Traffic) -> Self {
        self.inner = self.inner.traffic(input);
        self
    }
    /// <p>Displays real-time traffic information overlay on map, such as incident events and flow events.</p>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn set_traffic(mut self, input: ::std::option::Option<crate::types::Traffic>) -> Self {
        self.inner = self.inner.set_traffic(input);
        self
    }
    /// <p>Displays real-time traffic information overlay on map, such as incident events and flow events.</p>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn get_traffic(&self) -> &::std::option::Option<crate::types::Traffic> {
        self.inner.get_traffic()
    }
    ///
    /// Appends an item to `TravelModes`.
    ///
    /// To override the contents of this collection use [`set_travel_modes`](Self::set_travel_modes).
    ///
    /// <p>Renders additional map information relevant to selected travel modes. Information for multiple travel modes can be displayed simultaneously, although this increases the overall information density rendered on the map.</p>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn travel_modes(mut self, input: crate::types::TravelMode) -> Self {
        self.inner = self.inner.travel_modes(input);
        self
    }
    /// <p>Renders additional map information relevant to selected travel modes. Information for multiple travel modes can be displayed simultaneously, although this increases the overall information density rendered on the map.</p>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn set_travel_modes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TravelMode>>) -> Self {
        self.inner = self.inner.set_travel_modes(input);
        self
    }
    /// <p>Renders additional map information relevant to selected travel modes. Information for multiple travel modes can be displayed simultaneously, although this increases the overall information density rendered on the map.</p>
    /// <p>This parameter is valid only for the <code>Standard</code> map style.</p>
    pub fn get_travel_modes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TravelMode>> {
        self.inner.get_travel_modes()
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key(input);
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key()
    }
}
