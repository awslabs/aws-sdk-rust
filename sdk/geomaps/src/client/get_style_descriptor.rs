// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetStyleDescriptor`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`style(MapStyle)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::style) / [`set_style(Option<MapStyle>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::set_style):<br>required: **true**<br><p>Style specifies the desired map style.</p><br>
    ///   - [`color_scheme(ColorScheme)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::color_scheme) / [`set_color_scheme(Option<ColorScheme>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::set_color_scheme):<br>required: **false**<br><p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p> <p>Example: <code>Light</code></p> <p>Default value: <code>Light</code></p><note>  <p>Valid values for ColorScheme are case sensitive.</p> </note><br>
    ///   - [`political_view(impl Into<String>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::political_view) / [`set_political_view(Option<String>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::set_political_view):<br>required: **false**<br><p>Specifies the political view using ISO 3166-2 or ISO 3166-3 country code format.</p> <p>The following political views are currently supported:</p> <ul>  <li>   <p><code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p></li>  <li>   <p><code>EGY</code>: Egypt's view on Bir Tawil</p></li>  <li>   <p><code>IND</code>: India's view on Gilgit-Baltistan</p></li>  <li>   <p><code>KEN</code>: Kenya's view on the Ilemi Triangle</p></li>  <li>   <p><code>MAR</code>: Morocco's view on Western Sahara</p></li>  <li>   <p><code>RUS</code>: Russia's view on Crimea</p></li>  <li>   <p><code>SDN</code>: Sudan's view on the Halaib Triangle</p></li>  <li>   <p><code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p></li>  <li>   <p><code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p></li>  <li>   <p><code>SYR</code>: Syria's view on the Golan Heights</p></li>  <li>   <p><code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p></li>  <li>   <p><code>TZA</code>: Tanzania's view on Lake Malawi</p></li>  <li>   <p><code>URY</code>: Uruguay's view on Rincon de Artigas</p></li>  <li>   <p><code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p></li> </ul><br>
    ///   - [`terrain(Terrain)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::terrain) / [`set_terrain(Option<Terrain>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::set_terrain):<br>required: **false**<br><p>Adjusts how physical terrain details are rendered on the map.</p> <p>The following terrain styles are currently supported:</p> <ul>  <li>   <p><code>Hillshade</code>: Displays the physical terrain details through shading and highlighting of elevation change and geographic features.</p></li> </ul> <p>This parameter is valid only for the <code>Standard</code> map style.</p><br>
    ///   - [`contour_density(ContourDensity)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::contour_density) / [`set_contour_density(Option<ContourDensity>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::set_contour_density):<br>required: **false**<br><p>Displays the shape and steepness of terrain features using elevation lines. The density value controls how densely the available contour line information is rendered on the map.</p> <p>This parameter is valid only for the <code>Standard</code> map style.</p><br>
    ///   - [`traffic(Traffic)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::traffic) / [`set_traffic(Option<Traffic>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::set_traffic):<br>required: **false**<br><p>Displays real-time traffic information overlay on map, such as incident events and flow events.</p> <p>This parameter is valid only for the <code>Standard</code> map style.</p><br>
    ///   - [`travel_modes(TravelMode)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::travel_modes) / [`set_travel_modes(Option<Vec::<TravelMode>>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::set_travel_modes):<br>required: **false**<br><p>Renders additional map information relevant to selected travel modes. Information for multiple travel modes can be displayed simultaneously, although this increases the overall information density rendered on the map.</p> <p>This parameter is valid only for the <code>Standard</code> map style.</p><br>
    ///   - [`key(impl Into<String>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::key) / [`set_key(Option<String>)`](crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::set_key):<br>required: **false**<br><p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p><br>
    /// - On success, responds with [`GetStyleDescriptorOutput`](crate::operation::get_style_descriptor::GetStyleDescriptorOutput) with field(s):
    ///   - [`blob(Option<Blob>)`](crate::operation::get_style_descriptor::GetStyleDescriptorOutput::blob): <p>This Blob contains the body of the style descriptor which is in application/json format.</p>
    ///   - [`content_type(Option<String>)`](crate::operation::get_style_descriptor::GetStyleDescriptorOutput::content_type): <p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>
    ///   - [`cache_control(Option<String>)`](crate::operation::get_style_descriptor::GetStyleDescriptorOutput::cache_control): <p>Header that instructs caching configuration for the client.</p>
    ///   - [`e_tag(Option<String>)`](crate::operation::get_style_descriptor::GetStyleDescriptorOutput::e_tag): <p>The style descriptor's Etag.</p>
    /// - On failure, responds with [`SdkError<GetStyleDescriptorError>`](crate::operation::get_style_descriptor::GetStyleDescriptorError)
    pub fn get_style_descriptor(&self) -> crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder {
        crate::operation::get_style_descriptor::builders::GetStyleDescriptorFluentBuilder::new(self.handle.clone())
    }
}
