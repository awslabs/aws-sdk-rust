// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetGlyphs`](crate::operation::get_glyphs::builders::GetGlyphsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`font_stack(impl Into<String>)`](crate::operation::get_glyphs::builders::GetGlyphsFluentBuilder::font_stack) / [`set_font_stack(Option<String>)`](crate::operation::get_glyphs::builders::GetGlyphsFluentBuilder::set_font_stack):<br>required: **true**<br><p>Name of the <code>FontStack</code> to retrieve.</p> <p>Example: <code>Amazon Ember Bold,Noto Sans Bold</code>.</p> <p>The supported font stacks are as follows:</p> <ul>  <li>   <p>Amazon Ember Bold</p></li>  <li>   <p>Amazon Ember Bold Italic</p></li>  <li>   <p>Amazon Ember Bold,Noto Sans Bold</p></li>  <li>   <p>Amazon Ember Bold,Noto Sans Bold,Noto Sans Arabic Bold</p></li>  <li>   <p>Amazon Ember Condensed RC BdItalic</p></li>  <li>   <p>Amazon Ember Condensed RC Bold</p></li>  <li>   <p>Amazon Ember Condensed RC Bold Italic</p></li>  <li>   <p>Amazon Ember Condensed RC Bold,Noto Sans Bold</p></li>  <li>   <p>Amazon Ember Condensed RC Bold,Noto Sans Bold,Noto Sans Arabic Condensed Bold</p></li>  <li>   <p>Amazon Ember Condensed RC Light</p></li>  <li>   <p>Amazon Ember Condensed RC Light Italic</p></li>  <li>   <p>Amazon Ember Condensed RC LtItalic</p></li>  <li>   <p>Amazon Ember Condensed RC Regular</p></li>  <li>   <p>Amazon Ember Condensed RC Regular Italic</p></li>  <li>   <p>Amazon Ember Condensed RC Regular,Noto Sans Regular</p></li>  <li>   <p>Amazon Ember Condensed RC Regular,Noto Sans Regular,Noto Sans Arabic Condensed Regular</p></li>  <li>   <p>Amazon Ember Condensed RC RgItalic</p></li>  <li>   <p>Amazon Ember Condensed RC ThItalic</p></li>  <li>   <p>Amazon Ember Condensed RC Thin</p></li>  <li>   <p>Amazon Ember Condensed RC Thin Italic</p></li>  <li>   <p>Amazon Ember Heavy</p></li>  <li>   <p>Amazon Ember Heavy Italic</p></li>  <li>   <p>Amazon Ember Light</p></li>  <li>   <p>Amazon Ember Light Italic</p></li>  <li>   <p>Amazon Ember Medium</p></li>  <li>   <p>Amazon Ember Medium Italic</p></li>  <li>   <p>Amazon Ember Medium,Noto Sans Medium</p></li>  <li>   <p>Amazon Ember Medium,Noto Sans Medium,Noto Sans Arabic Medium</p></li>  <li>   <p>Amazon Ember Regular</p></li>  <li>   <p>Amazon Ember Regular Italic</p></li>  <li>   <p>Amazon Ember Regular Italic,Noto Sans Italic</p></li>  <li>   <p>Amazon Ember Regular Italic,Noto Sans Italic,Noto Sans Arabic Regular</p></li>  <li>   <p>Amazon Ember Regular,Noto Sans Regular</p></li>  <li>   <p>Amazon Ember Regular,Noto Sans Regular,Noto Sans Arabic Regular</p></li>  <li>   <p>Amazon Ember Thin</p></li>  <li>   <p>Amazon Ember Thin Italic</p></li>  <li>   <p>AmazonEmberCdRC_Bd</p></li>  <li>   <p>AmazonEmberCdRC_BdIt</p></li>  <li>   <p>AmazonEmberCdRC_Lt</p></li>  <li>   <p>AmazonEmberCdRC_LtIt</p></li>  <li>   <p>AmazonEmberCdRC_Rg</p></li>  <li>   <p>AmazonEmberCdRC_RgIt</p></li>  <li>   <p>AmazonEmberCdRC_Th</p></li>  <li>   <p>AmazonEmberCdRC_ThIt</p></li>  <li>   <p>AmazonEmber_Bd</p></li>  <li>   <p>AmazonEmber_BdIt</p></li>  <li>   <p>AmazonEmber_He</p></li>  <li>   <p>AmazonEmber_HeIt</p></li>  <li>   <p>AmazonEmber_Lt</p></li>  <li>   <p>AmazonEmber_LtIt</p></li>  <li>   <p>AmazonEmber_Md</p></li>  <li>   <p>AmazonEmber_MdIt</p></li>  <li>   <p>AmazonEmber_Rg</p></li>  <li>   <p>AmazonEmber_RgIt</p></li>  <li>   <p>AmazonEmber_Th</p></li>  <li>   <p>AmazonEmber_ThIt</p></li>  <li>   <p>Noto Sans Black</p></li>  <li>   <p>Noto Sans Black Italic</p></li>  <li>   <p>Noto Sans Bold</p></li>  <li>   <p>Noto Sans Bold Italic</p></li>  <li>   <p>Noto Sans Extra Bold</p></li>  <li>   <p>Noto Sans Extra Bold Italic</p></li>  <li>   <p>Noto Sans Extra Light</p></li>  <li>   <p>Noto Sans Extra Light Italic</p></li>  <li>   <p>Noto Sans Italic</p></li>  <li>   <p>Noto Sans Light</p></li>  <li>   <p>Noto Sans Light Italic</p></li>  <li>   <p>Noto Sans Medium</p></li>  <li>   <p>Noto Sans Medium Italic</p></li>  <li>   <p>Noto Sans Regular</p></li>  <li>   <p>Noto Sans Semi Bold</p></li>  <li>   <p>Noto Sans Semi Bold Italic</p></li>  <li>   <p>Noto Sans Thin</p></li>  <li>   <p>Noto Sans Thin Italic</p></li>  <li>   <p>NotoSans-Bold</p></li>  <li>   <p>NotoSans-Italic</p></li>  <li>   <p>NotoSans-Medium</p></li>  <li>   <p>NotoSans-Regular</p></li>  <li>   <p>Open Sans Regular,Arial Unicode MS Regular</p></li> </ul><br>
    ///   - [`font_unicode_range(impl Into<String>)`](crate::operation::get_glyphs::builders::GetGlyphsFluentBuilder::font_unicode_range) / [`set_font_unicode_range(Option<String>)`](crate::operation::get_glyphs::builders::GetGlyphsFluentBuilder::set_font_unicode_range):<br>required: **true**<br><p>A Unicode range of characters to download glyphs for. This must be aligned to multiples of 256.</p> <p>Example: <code>0-255.pbf</code></p><br>
    /// - On success, responds with [`GetGlyphsOutput`](crate::operation::get_glyphs::GetGlyphsOutput) with field(s):
    ///   - [`blob(Option<Blob>)`](crate::operation::get_glyphs::GetGlyphsOutput::blob): <p>The Glyph, as a binary blob.</p>
    ///   - [`content_type(Option<String>)`](crate::operation::get_glyphs::GetGlyphsOutput::content_type): <p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>
    ///   - [`cache_control(Option<String>)`](crate::operation::get_glyphs::GetGlyphsOutput::cache_control): <p>Header that instructs caching configuration for the client.</p>
    ///   - [`e_tag(Option<String>)`](crate::operation::get_glyphs::GetGlyphsOutput::e_tag): <p>The glyph's Etag.</p>
    /// - On failure, responds with [`SdkError<GetGlyphsError>`](crate::operation::get_glyphs::GetGlyphsError)
    pub fn get_glyphs(&self) -> crate::operation::get_glyphs::builders::GetGlyphsFluentBuilder {
        crate::operation::get_glyphs::builders::GetGlyphsFluentBuilder::new(self.handle.clone())
    }
}
