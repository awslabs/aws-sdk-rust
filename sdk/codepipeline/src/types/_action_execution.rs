// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about the run of an action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActionExecution {
    /// <p>ID of the workflow action execution in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current action execution details of the current stage.</p> <note>
    /// <p>For older executions, this field might be empty. The action execution ID is available for executions run on or after March 2020.</p>
    /// </note>
    #[doc(hidden)]
    pub action_execution_id: std::option::Option<std::string::String>,
    /// <p>The status of the action, or for a completed action, the last status of the action.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ActionExecutionStatus>,
    /// <p>A summary of the run of the action.</p>
    #[doc(hidden)]
    pub summary: std::option::Option<std::string::String>,
    /// <p>The last status change of the action.</p>
    #[doc(hidden)]
    pub last_status_change: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <code>GetPipelineState</code> command. It is used to validate that the approval request corresponding to this token is still valid.</p>
    #[doc(hidden)]
    pub token: std::option::Option<std::string::String>,
    /// <p>The ARN of the user who last changed the pipeline.</p>
    #[doc(hidden)]
    pub last_updated_by: std::option::Option<std::string::String>,
    /// <p>The external ID of the run of the action.</p>
    #[doc(hidden)]
    pub external_execution_id: std::option::Option<std::string::String>,
    /// <p>The URL of a resource external to AWS that is used when running the action (for example, an external repository URL).</p>
    #[doc(hidden)]
    pub external_execution_url: std::option::Option<std::string::String>,
    /// <p>A percentage of completeness of the action as it runs.</p>
    #[doc(hidden)]
    pub percent_complete: std::option::Option<i32>,
    /// <p>The details of an error returned by a URL external to AWS.</p>
    #[doc(hidden)]
    pub error_details: std::option::Option<crate::types::ErrorDetails>,
}
impl ActionExecution {
    /// <p>ID of the workflow action execution in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current action execution details of the current stage.</p> <note>
    /// <p>For older executions, this field might be empty. The action execution ID is available for executions run on or after March 2020.</p>
    /// </note>
    pub fn action_execution_id(&self) -> std::option::Option<&str> {
        self.action_execution_id.as_deref()
    }
    /// <p>The status of the action, or for a completed action, the last status of the action.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ActionExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>A summary of the run of the action.</p>
    pub fn summary(&self) -> std::option::Option<&str> {
        self.summary.as_deref()
    }
    /// <p>The last status change of the action.</p>
    pub fn last_status_change(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_status_change.as_ref()
    }
    /// <p>The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <code>GetPipelineState</code> command. It is used to validate that the approval request corresponding to this token is still valid.</p>
    pub fn token(&self) -> std::option::Option<&str> {
        self.token.as_deref()
    }
    /// <p>The ARN of the user who last changed the pipeline.</p>
    pub fn last_updated_by(&self) -> std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
    /// <p>The external ID of the run of the action.</p>
    pub fn external_execution_id(&self) -> std::option::Option<&str> {
        self.external_execution_id.as_deref()
    }
    /// <p>The URL of a resource external to AWS that is used when running the action (for example, an external repository URL).</p>
    pub fn external_execution_url(&self) -> std::option::Option<&str> {
        self.external_execution_url.as_deref()
    }
    /// <p>A percentage of completeness of the action as it runs.</p>
    pub fn percent_complete(&self) -> std::option::Option<i32> {
        self.percent_complete
    }
    /// <p>The details of an error returned by a URL external to AWS.</p>
    pub fn error_details(&self) -> std::option::Option<&crate::types::ErrorDetails> {
        self.error_details.as_ref()
    }
}
impl ActionExecution {
    /// Creates a new builder-style object to manufacture [`ActionExecution`](crate::types::ActionExecution).
    pub fn builder() -> crate::types::builders::ActionExecutionBuilder {
        crate::types::builders::ActionExecutionBuilder::default()
    }
}

/// A builder for [`ActionExecution`](crate::types::ActionExecution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionExecutionBuilder {
    pub(crate) action_execution_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ActionExecutionStatus>,
    pub(crate) summary: std::option::Option<std::string::String>,
    pub(crate) last_status_change: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) token: std::option::Option<std::string::String>,
    pub(crate) last_updated_by: std::option::Option<std::string::String>,
    pub(crate) external_execution_id: std::option::Option<std::string::String>,
    pub(crate) external_execution_url: std::option::Option<std::string::String>,
    pub(crate) percent_complete: std::option::Option<i32>,
    pub(crate) error_details: std::option::Option<crate::types::ErrorDetails>,
}
impl ActionExecutionBuilder {
    /// <p>ID of the workflow action execution in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current action execution details of the current stage.</p> <note>
    /// <p>For older executions, this field might be empty. The action execution ID is available for executions run on or after March 2020.</p>
    /// </note>
    pub fn action_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_execution_id = Some(input.into());
        self
    }
    /// <p>ID of the workflow action execution in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current action execution details of the current stage.</p> <note>
    /// <p>For older executions, this field might be empty. The action execution ID is available for executions run on or after March 2020.</p>
    /// </note>
    pub fn set_action_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.action_execution_id = input;
        self
    }
    /// <p>The status of the action, or for a completed action, the last status of the action.</p>
    pub fn status(mut self, input: crate::types::ActionExecutionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the action, or for a completed action, the last status of the action.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ActionExecutionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>A summary of the run of the action.</p>
    pub fn summary(mut self, input: impl Into<std::string::String>) -> Self {
        self.summary = Some(input.into());
        self
    }
    /// <p>A summary of the run of the action.</p>
    pub fn set_summary(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.summary = input;
        self
    }
    /// <p>The last status change of the action.</p>
    pub fn last_status_change(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_status_change = Some(input);
        self
    }
    /// <p>The last status change of the action.</p>
    pub fn set_last_status_change(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_status_change = input;
        self
    }
    /// <p>The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <code>GetPipelineState</code> command. It is used to validate that the approval request corresponding to this token is still valid.</p>
    pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
        self.token = Some(input.into());
        self
    }
    /// <p>The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <code>GetPipelineState</code> command. It is used to validate that the approval request corresponding to this token is still valid.</p>
    pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.token = input;
        self
    }
    /// <p>The ARN of the user who last changed the pipeline.</p>
    pub fn last_updated_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_updated_by = Some(input.into());
        self
    }
    /// <p>The ARN of the user who last changed the pipeline.</p>
    pub fn set_last_updated_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p>The external ID of the run of the action.</p>
    pub fn external_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.external_execution_id = Some(input.into());
        self
    }
    /// <p>The external ID of the run of the action.</p>
    pub fn set_external_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.external_execution_id = input;
        self
    }
    /// <p>The URL of a resource external to AWS that is used when running the action (for example, an external repository URL).</p>
    pub fn external_execution_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.external_execution_url = Some(input.into());
        self
    }
    /// <p>The URL of a resource external to AWS that is used when running the action (for example, an external repository URL).</p>
    pub fn set_external_execution_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.external_execution_url = input;
        self
    }
    /// <p>A percentage of completeness of the action as it runs.</p>
    pub fn percent_complete(mut self, input: i32) -> Self {
        self.percent_complete = Some(input);
        self
    }
    /// <p>A percentage of completeness of the action as it runs.</p>
    pub fn set_percent_complete(mut self, input: std::option::Option<i32>) -> Self {
        self.percent_complete = input;
        self
    }
    /// <p>The details of an error returned by a URL external to AWS.</p>
    pub fn error_details(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error_details = Some(input);
        self
    }
    /// <p>The details of an error returned by a URL external to AWS.</p>
    pub fn set_error_details(
        mut self,
        input: std::option::Option<crate::types::ErrorDetails>,
    ) -> Self {
        self.error_details = input;
        self
    }
    /// Consumes the builder and constructs a [`ActionExecution`](crate::types::ActionExecution).
    pub fn build(self) -> crate::types::ActionExecution {
        crate::types::ActionExecution {
            action_execution_id: self.action_execution_id,
            status: self.status,
            summary: self.summary,
            last_status_change: self.last_status_change,
            token: self.token,
            last_updated_by: self.last_updated_by,
            external_execution_id: self.external_execution_id,
            external_execution_url: self.external_execution_url,
            percent_complete: self.percent_complete,
            error_details: self.error_details,
        }
    }
}
