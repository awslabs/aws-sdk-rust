// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the category, owner, provider, and version of the action type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActionTypeIdentifier {
    /// <p>Defines what kind of action can be taken in the stage, one of the following:</p>
    /// <ul>
    /// <li> <p> <code>Source</code> </p> </li>
    /// <li> <p> <code>Build</code> </p> </li>
    /// <li> <p> <code>Test</code> </p> </li>
    /// <li> <p> <code>Deploy</code> </p> </li>
    /// <li> <p> <code>Approval</code> </p> </li>
    /// <li> <p> <code>Invoke</code> </p> </li>
    /// </ul>
    pub category: crate::types::ActionCategory,
    /// <p>The creator of the action type being called: <code>AWS</code> or <code>ThirdParty</code>.</p>
    pub owner: ::std::string::String,
    /// <p>The provider of the action type being called. The provider name is supplied when the action type is created.</p>
    pub provider: ::std::string::String,
    /// <p>A string that describes the action type version.</p>
    pub version: ::std::string::String,
}
impl ActionTypeIdentifier {
    /// <p>Defines what kind of action can be taken in the stage, one of the following:</p>
    /// <ul>
    /// <li> <p> <code>Source</code> </p> </li>
    /// <li> <p> <code>Build</code> </p> </li>
    /// <li> <p> <code>Test</code> </p> </li>
    /// <li> <p> <code>Deploy</code> </p> </li>
    /// <li> <p> <code>Approval</code> </p> </li>
    /// <li> <p> <code>Invoke</code> </p> </li>
    /// </ul>
    pub fn category(&self) -> &crate::types::ActionCategory {
        &self.category
    }
    /// <p>The creator of the action type being called: <code>AWS</code> or <code>ThirdParty</code>.</p>
    pub fn owner(&self) -> &str {
        use std::ops::Deref;
        self.owner.deref()
    }
    /// <p>The provider of the action type being called. The provider name is supplied when the action type is created.</p>
    pub fn provider(&self) -> &str {
        use std::ops::Deref;
        self.provider.deref()
    }
    /// <p>A string that describes the action type version.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
}
impl ActionTypeIdentifier {
    /// Creates a new builder-style object to manufacture [`ActionTypeIdentifier`](crate::types::ActionTypeIdentifier).
    pub fn builder() -> crate::types::builders::ActionTypeIdentifierBuilder {
        crate::types::builders::ActionTypeIdentifierBuilder::default()
    }
}

/// A builder for [`ActionTypeIdentifier`](crate::types::ActionTypeIdentifier).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ActionTypeIdentifierBuilder {
    pub(crate) category: ::std::option::Option<crate::types::ActionCategory>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) provider: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl ActionTypeIdentifierBuilder {
    /// <p>Defines what kind of action can be taken in the stage, one of the following:</p>
    /// <ul>
    /// <li> <p> <code>Source</code> </p> </li>
    /// <li> <p> <code>Build</code> </p> </li>
    /// <li> <p> <code>Test</code> </p> </li>
    /// <li> <p> <code>Deploy</code> </p> </li>
    /// <li> <p> <code>Approval</code> </p> </li>
    /// <li> <p> <code>Invoke</code> </p> </li>
    /// </ul>
    /// This field is required.
    pub fn category(mut self, input: crate::types::ActionCategory) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines what kind of action can be taken in the stage, one of the following:</p>
    /// <ul>
    /// <li> <p> <code>Source</code> </p> </li>
    /// <li> <p> <code>Build</code> </p> </li>
    /// <li> <p> <code>Test</code> </p> </li>
    /// <li> <p> <code>Deploy</code> </p> </li>
    /// <li> <p> <code>Approval</code> </p> </li>
    /// <li> <p> <code>Invoke</code> </p> </li>
    /// </ul>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::ActionCategory>) -> Self {
        self.category = input;
        self
    }
    /// <p>Defines what kind of action can be taken in the stage, one of the following:</p>
    /// <ul>
    /// <li> <p> <code>Source</code> </p> </li>
    /// <li> <p> <code>Build</code> </p> </li>
    /// <li> <p> <code>Test</code> </p> </li>
    /// <li> <p> <code>Deploy</code> </p> </li>
    /// <li> <p> <code>Approval</code> </p> </li>
    /// <li> <p> <code>Invoke</code> </p> </li>
    /// </ul>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::ActionCategory> {
        &self.category
    }
    /// <p>The creator of the action type being called: <code>AWS</code> or <code>ThirdParty</code>.</p>
    /// This field is required.
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The creator of the action type being called: <code>AWS</code> or <code>ThirdParty</code>.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The creator of the action type being called: <code>AWS</code> or <code>ThirdParty</code>.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>The provider of the action type being called. The provider name is supplied when the action type is created.</p>
    /// This field is required.
    pub fn provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provider of the action type being called. The provider name is supplied when the action type is created.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider = input;
        self
    }
    /// <p>The provider of the action type being called. The provider name is supplied when the action type is created.</p>
    pub fn get_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider
    }
    /// <p>A string that describes the action type version.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that describes the action type version.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>A string that describes the action type version.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`ActionTypeIdentifier`](crate::types::ActionTypeIdentifier).
    /// This method will fail if any of the following fields are not set:
    /// - [`category`](crate::types::builders::ActionTypeIdentifierBuilder::category)
    /// - [`owner`](crate::types::builders::ActionTypeIdentifierBuilder::owner)
    /// - [`provider`](crate::types::builders::ActionTypeIdentifierBuilder::provider)
    /// - [`version`](crate::types::builders::ActionTypeIdentifierBuilder::version)
    pub fn build(self) -> ::std::result::Result<crate::types::ActionTypeIdentifier, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActionTypeIdentifier {
            category: self.category.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "category",
                    "category was not specified but it is required when building ActionTypeIdentifier",
                )
            })?,
            owner: self.owner.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner",
                    "owner was not specified but it is required when building ActionTypeIdentifier",
                )
            })?,
            provider: self.provider.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider",
                    "provider was not specified but it is required when building ActionTypeIdentifier",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building ActionTypeIdentifier",
                )
            })?,
        })
    }
}
