// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details identifying the users with permissions to use the action type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActionTypePermissions {
    /// <p>A list of AWS account IDs with access to use the action type in their pipelines.</p>
    #[doc(hidden)]
    pub allowed_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ActionTypePermissions {
    /// <p>A list of AWS account IDs with access to use the action type in their pipelines.</p>
    pub fn allowed_accounts(&self) -> std::option::Option<&[std::string::String]> {
        self.allowed_accounts.as_deref()
    }
}
impl ActionTypePermissions {
    /// Creates a new builder-style object to manufacture [`ActionTypePermissions`](crate::types::ActionTypePermissions).
    pub fn builder() -> crate::types::builders::ActionTypePermissionsBuilder {
        crate::types::builders::ActionTypePermissionsBuilder::default()
    }
}

/// A builder for [`ActionTypePermissions`](crate::types::ActionTypePermissions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionTypePermissionsBuilder {
    pub(crate) allowed_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ActionTypePermissionsBuilder {
    /// Appends an item to `allowed_accounts`.
    ///
    /// To override the contents of this collection use [`set_allowed_accounts`](Self::set_allowed_accounts).
    ///
    /// <p>A list of AWS account IDs with access to use the action type in their pipelines.</p>
    pub fn allowed_accounts(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allowed_accounts.unwrap_or_default();
        v.push(input.into());
        self.allowed_accounts = Some(v);
        self
    }
    /// <p>A list of AWS account IDs with access to use the action type in their pipelines.</p>
    pub fn set_allowed_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allowed_accounts = input;
        self
    }
    /// Consumes the builder and constructs a [`ActionTypePermissions`](crate::types::ActionTypePermissions).
    pub fn build(self) -> crate::types::ActionTypePermissions {
        crate::types::ActionTypePermissions {
            allowed_accounts: self.allowed_accounts,
        }
    }
}
