// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about the details of an action type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActionType {
    /// <p>Represents information about an action type.</p>
    pub id: ::std::option::Option<crate::types::ActionTypeId>,
    /// <p>The settings for the action type.</p>
    pub settings: ::std::option::Option<crate::types::ActionTypeSettings>,
    /// <p>The configuration properties for the action type.</p>
    pub action_configuration_properties: ::std::option::Option<::std::vec::Vec<crate::types::ActionConfigurationProperty>>,
    /// <p>The details of the input artifact for the action, such as its commit ID.</p>
    pub input_artifact_details: ::std::option::Option<crate::types::ArtifactDetails>,
    /// <p>The details of the output artifact of the action, such as its commit ID.</p>
    pub output_artifact_details: ::std::option::Option<crate::types::ArtifactDetails>,
}
impl ActionType {
    /// <p>Represents information about an action type.</p>
    pub fn id(&self) -> ::std::option::Option<&crate::types::ActionTypeId> {
        self.id.as_ref()
    }
    /// <p>The settings for the action type.</p>
    pub fn settings(&self) -> ::std::option::Option<&crate::types::ActionTypeSettings> {
        self.settings.as_ref()
    }
    /// <p>The configuration properties for the action type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action_configuration_properties.is_none()`.
    pub fn action_configuration_properties(&self) -> &[crate::types::ActionConfigurationProperty] {
        self.action_configuration_properties.as_deref().unwrap_or_default()
    }
    /// <p>The details of the input artifact for the action, such as its commit ID.</p>
    pub fn input_artifact_details(&self) -> ::std::option::Option<&crate::types::ArtifactDetails> {
        self.input_artifact_details.as_ref()
    }
    /// <p>The details of the output artifact of the action, such as its commit ID.</p>
    pub fn output_artifact_details(&self) -> ::std::option::Option<&crate::types::ArtifactDetails> {
        self.output_artifact_details.as_ref()
    }
}
impl ActionType {
    /// Creates a new builder-style object to manufacture [`ActionType`](crate::types::ActionType).
    pub fn builder() -> crate::types::builders::ActionTypeBuilder {
        crate::types::builders::ActionTypeBuilder::default()
    }
}

/// A builder for [`ActionType`](crate::types::ActionType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ActionTypeBuilder {
    pub(crate) id: ::std::option::Option<crate::types::ActionTypeId>,
    pub(crate) settings: ::std::option::Option<crate::types::ActionTypeSettings>,
    pub(crate) action_configuration_properties: ::std::option::Option<::std::vec::Vec<crate::types::ActionConfigurationProperty>>,
    pub(crate) input_artifact_details: ::std::option::Option<crate::types::ArtifactDetails>,
    pub(crate) output_artifact_details: ::std::option::Option<crate::types::ArtifactDetails>,
}
impl ActionTypeBuilder {
    /// <p>Represents information about an action type.</p>
    /// This field is required.
    pub fn id(mut self, input: crate::types::ActionTypeId) -> Self {
        self.id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn set_id(mut self, input: ::std::option::Option<crate::types::ActionTypeId>) -> Self {
        self.id = input;
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn get_id(&self) -> &::std::option::Option<crate::types::ActionTypeId> {
        &self.id
    }
    /// <p>The settings for the action type.</p>
    pub fn settings(mut self, input: crate::types::ActionTypeSettings) -> Self {
        self.settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for the action type.</p>
    pub fn set_settings(mut self, input: ::std::option::Option<crate::types::ActionTypeSettings>) -> Self {
        self.settings = input;
        self
    }
    /// <p>The settings for the action type.</p>
    pub fn get_settings(&self) -> &::std::option::Option<crate::types::ActionTypeSettings> {
        &self.settings
    }
    /// Appends an item to `action_configuration_properties`.
    ///
    /// To override the contents of this collection use [`set_action_configuration_properties`](Self::set_action_configuration_properties).
    ///
    /// <p>The configuration properties for the action type.</p>
    pub fn action_configuration_properties(mut self, input: crate::types::ActionConfigurationProperty) -> Self {
        let mut v = self.action_configuration_properties.unwrap_or_default();
        v.push(input);
        self.action_configuration_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration properties for the action type.</p>
    pub fn set_action_configuration_properties(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ActionConfigurationProperty>>,
    ) -> Self {
        self.action_configuration_properties = input;
        self
    }
    /// <p>The configuration properties for the action type.</p>
    pub fn get_action_configuration_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionConfigurationProperty>> {
        &self.action_configuration_properties
    }
    /// <p>The details of the input artifact for the action, such as its commit ID.</p>
    /// This field is required.
    pub fn input_artifact_details(mut self, input: crate::types::ArtifactDetails) -> Self {
        self.input_artifact_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the input artifact for the action, such as its commit ID.</p>
    pub fn set_input_artifact_details(mut self, input: ::std::option::Option<crate::types::ArtifactDetails>) -> Self {
        self.input_artifact_details = input;
        self
    }
    /// <p>The details of the input artifact for the action, such as its commit ID.</p>
    pub fn get_input_artifact_details(&self) -> &::std::option::Option<crate::types::ArtifactDetails> {
        &self.input_artifact_details
    }
    /// <p>The details of the output artifact of the action, such as its commit ID.</p>
    /// This field is required.
    pub fn output_artifact_details(mut self, input: crate::types::ArtifactDetails) -> Self {
        self.output_artifact_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the output artifact of the action, such as its commit ID.</p>
    pub fn set_output_artifact_details(mut self, input: ::std::option::Option<crate::types::ArtifactDetails>) -> Self {
        self.output_artifact_details = input;
        self
    }
    /// <p>The details of the output artifact of the action, such as its commit ID.</p>
    pub fn get_output_artifact_details(&self) -> &::std::option::Option<crate::types::ArtifactDetails> {
        &self.output_artifact_details
    }
    /// Consumes the builder and constructs a [`ActionType`](crate::types::ActionType).
    pub fn build(self) -> crate::types::ActionType {
        crate::types::ActionType {
            id: self.id,
            settings: self.settings,
            action_configuration_properties: self.action_configuration_properties,
            input_artifact_details: self.input_artifact_details,
            output_artifact_details: self.output_artifact_details,
        }
    }
}
