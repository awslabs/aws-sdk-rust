// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about the state of the stage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StageState {
    /// <p>The name of the stage.</p>
    #[doc(hidden)]
    pub stage_name: std::option::Option<std::string::String>,
    /// <p>Represents information about the run of a stage.</p>
    #[doc(hidden)]
    pub inbound_execution: std::option::Option<crate::types::StageExecution>,
    /// <p>The state of the inbound transition, which is either enabled or disabled.</p>
    #[doc(hidden)]
    pub inbound_transition_state: std::option::Option<crate::types::TransitionState>,
    /// <p>The state of the stage.</p>
    #[doc(hidden)]
    pub action_states: std::option::Option<std::vec::Vec<crate::types::ActionState>>,
    /// <p>Information about the latest execution in the stage, including its ID and status.</p>
    #[doc(hidden)]
    pub latest_execution: std::option::Option<crate::types::StageExecution>,
}
impl StageState {
    /// <p>The name of the stage.</p>
    pub fn stage_name(&self) -> std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>Represents information about the run of a stage.</p>
    pub fn inbound_execution(&self) -> std::option::Option<&crate::types::StageExecution> {
        self.inbound_execution.as_ref()
    }
    /// <p>The state of the inbound transition, which is either enabled or disabled.</p>
    pub fn inbound_transition_state(&self) -> std::option::Option<&crate::types::TransitionState> {
        self.inbound_transition_state.as_ref()
    }
    /// <p>The state of the stage.</p>
    pub fn action_states(&self) -> std::option::Option<&[crate::types::ActionState]> {
        self.action_states.as_deref()
    }
    /// <p>Information about the latest execution in the stage, including its ID and status.</p>
    pub fn latest_execution(&self) -> std::option::Option<&crate::types::StageExecution> {
        self.latest_execution.as_ref()
    }
}
impl StageState {
    /// Creates a new builder-style object to manufacture [`StageState`](crate::types::StageState).
    pub fn builder() -> crate::types::builders::StageStateBuilder {
        crate::types::builders::StageStateBuilder::default()
    }
}

/// A builder for [`StageState`](crate::types::StageState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StageStateBuilder {
    pub(crate) stage_name: std::option::Option<std::string::String>,
    pub(crate) inbound_execution: std::option::Option<crate::types::StageExecution>,
    pub(crate) inbound_transition_state: std::option::Option<crate::types::TransitionState>,
    pub(crate) action_states: std::option::Option<std::vec::Vec<crate::types::ActionState>>,
    pub(crate) latest_execution: std::option::Option<crate::types::StageExecution>,
}
impl StageStateBuilder {
    /// <p>The name of the stage.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage_name = Some(input.into());
        self
    }
    /// <p>The name of the stage.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// <p>Represents information about the run of a stage.</p>
    pub fn inbound_execution(mut self, input: crate::types::StageExecution) -> Self {
        self.inbound_execution = Some(input);
        self
    }
    /// <p>Represents information about the run of a stage.</p>
    pub fn set_inbound_execution(
        mut self,
        input: std::option::Option<crate::types::StageExecution>,
    ) -> Self {
        self.inbound_execution = input;
        self
    }
    /// <p>The state of the inbound transition, which is either enabled or disabled.</p>
    pub fn inbound_transition_state(mut self, input: crate::types::TransitionState) -> Self {
        self.inbound_transition_state = Some(input);
        self
    }
    /// <p>The state of the inbound transition, which is either enabled or disabled.</p>
    pub fn set_inbound_transition_state(
        mut self,
        input: std::option::Option<crate::types::TransitionState>,
    ) -> Self {
        self.inbound_transition_state = input;
        self
    }
    /// Appends an item to `action_states`.
    ///
    /// To override the contents of this collection use [`set_action_states`](Self::set_action_states).
    ///
    /// <p>The state of the stage.</p>
    pub fn action_states(mut self, input: crate::types::ActionState) -> Self {
        let mut v = self.action_states.unwrap_or_default();
        v.push(input);
        self.action_states = Some(v);
        self
    }
    /// <p>The state of the stage.</p>
    pub fn set_action_states(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ActionState>>,
    ) -> Self {
        self.action_states = input;
        self
    }
    /// <p>Information about the latest execution in the stage, including its ID and status.</p>
    pub fn latest_execution(mut self, input: crate::types::StageExecution) -> Self {
        self.latest_execution = Some(input);
        self
    }
    /// <p>Information about the latest execution in the stage, including its ID and status.</p>
    pub fn set_latest_execution(
        mut self,
        input: std::option::Option<crate::types::StageExecution>,
    ) -> Self {
        self.latest_execution = input;
        self
    }
    /// Consumes the builder and constructs a [`StageState`](crate::types::StageState).
    pub fn build(self) -> crate::types::StageState {
        crate::types::StageState {
            stage_name: self.stage_name,
            inbound_execution: self.inbound_execution,
            inbound_transition_state: self.inbound_transition_state,
            action_states: self.action_states,
            latest_execution: self.latest_execution,
        }
    }
}
