// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExecutionDetails {
    /// <p>The summary of the current status of the actions.</p>
    #[doc(hidden)]
    pub summary: std::option::Option<std::string::String>,
    /// <p>The system-generated unique ID of this action used to identify this job worker in any external systems, such as AWS CodeDeploy.</p>
    #[doc(hidden)]
    pub external_execution_id: std::option::Option<std::string::String>,
    /// <p>The percentage of work completed on the action, represented on a scale of 0 to 100 percent.</p>
    #[doc(hidden)]
    pub percent_complete: std::option::Option<i32>,
}
impl ExecutionDetails {
    /// <p>The summary of the current status of the actions.</p>
    pub fn summary(&self) -> std::option::Option<&str> {
        self.summary.as_deref()
    }
    /// <p>The system-generated unique ID of this action used to identify this job worker in any external systems, such as AWS CodeDeploy.</p>
    pub fn external_execution_id(&self) -> std::option::Option<&str> {
        self.external_execution_id.as_deref()
    }
    /// <p>The percentage of work completed on the action, represented on a scale of 0 to 100 percent.</p>
    pub fn percent_complete(&self) -> std::option::Option<i32> {
        self.percent_complete
    }
}
impl ExecutionDetails {
    /// Creates a new builder-style object to manufacture [`ExecutionDetails`](crate::types::ExecutionDetails).
    pub fn builder() -> crate::types::builders::ExecutionDetailsBuilder {
        crate::types::builders::ExecutionDetailsBuilder::default()
    }
}

/// A builder for [`ExecutionDetails`](crate::types::ExecutionDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExecutionDetailsBuilder {
    pub(crate) summary: std::option::Option<std::string::String>,
    pub(crate) external_execution_id: std::option::Option<std::string::String>,
    pub(crate) percent_complete: std::option::Option<i32>,
}
impl ExecutionDetailsBuilder {
    /// <p>The summary of the current status of the actions.</p>
    pub fn summary(mut self, input: impl Into<std::string::String>) -> Self {
        self.summary = Some(input.into());
        self
    }
    /// <p>The summary of the current status of the actions.</p>
    pub fn set_summary(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.summary = input;
        self
    }
    /// <p>The system-generated unique ID of this action used to identify this job worker in any external systems, such as AWS CodeDeploy.</p>
    pub fn external_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.external_execution_id = Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of this action used to identify this job worker in any external systems, such as AWS CodeDeploy.</p>
    pub fn set_external_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.external_execution_id = input;
        self
    }
    /// <p>The percentage of work completed on the action, represented on a scale of 0 to 100 percent.</p>
    pub fn percent_complete(mut self, input: i32) -> Self {
        self.percent_complete = Some(input);
        self
    }
    /// <p>The percentage of work completed on the action, represented on a scale of 0 to 100 percent.</p>
    pub fn set_percent_complete(mut self, input: std::option::Option<i32>) -> Self {
        self.percent_complete = input;
        self
    }
    /// Consumes the builder and constructs a [`ExecutionDetails`](crate::types::ExecutionDetails).
    pub fn build(self) -> crate::types::ExecutionDetails {
        crate::types::ExecutionDetails {
            summary: self.summary,
            external_execution_id: self.external_execution_id,
            percent_complete: self.percent_complete,
        }
    }
}
