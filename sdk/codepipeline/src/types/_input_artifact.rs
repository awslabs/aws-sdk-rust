// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about an artifact to be worked on, such as a test or build artifact.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputArtifact {
    /// <p>The name of the artifact to be worked on (for example, "My App").</p>
    /// <p>The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl InputArtifact {
    /// <p>The name of the artifact to be worked on (for example, "My App").</p>
    /// <p>The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl InputArtifact {
    /// Creates a new builder-style object to manufacture [`InputArtifact`](crate::types::InputArtifact).
    pub fn builder() -> crate::types::builders::InputArtifactBuilder {
        crate::types::builders::InputArtifactBuilder::default()
    }
}

/// A builder for [`InputArtifact`](crate::types::InputArtifact).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputArtifactBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
}
impl InputArtifactBuilder {
    /// <p>The name of the artifact to be worked on (for example, "My App").</p>
    /// <p>The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the artifact to be worked on (for example, "My App").</p>
    /// <p>The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`InputArtifact`](crate::types::InputArtifact).
    pub fn build(self) -> crate::types::InputArtifact {
        crate::types::InputArtifact { name: self.name }
    }
}
