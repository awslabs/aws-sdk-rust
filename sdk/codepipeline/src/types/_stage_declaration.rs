// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about a stage and its definition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StageDeclaration {
    /// <p>The name of the stage.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Reserved for future use.</p>
    #[doc(hidden)]
    pub blockers: std::option::Option<std::vec::Vec<crate::types::BlockerDeclaration>>,
    /// <p>The actions included in a stage.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<crate::types::ActionDeclaration>>,
}
impl StageDeclaration {
    /// <p>The name of the stage.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Reserved for future use.</p>
    pub fn blockers(&self) -> std::option::Option<&[crate::types::BlockerDeclaration]> {
        self.blockers.as_deref()
    }
    /// <p>The actions included in a stage.</p>
    pub fn actions(&self) -> std::option::Option<&[crate::types::ActionDeclaration]> {
        self.actions.as_deref()
    }
}
impl StageDeclaration {
    /// Creates a new builder-style object to manufacture [`StageDeclaration`](crate::types::StageDeclaration).
    pub fn builder() -> crate::types::builders::StageDeclarationBuilder {
        crate::types::builders::StageDeclarationBuilder::default()
    }
}

/// A builder for [`StageDeclaration`](crate::types::StageDeclaration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StageDeclarationBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) blockers: std::option::Option<std::vec::Vec<crate::types::BlockerDeclaration>>,
    pub(crate) actions: std::option::Option<std::vec::Vec<crate::types::ActionDeclaration>>,
}
impl StageDeclarationBuilder {
    /// <p>The name of the stage.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the stage.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `blockers`.
    ///
    /// To override the contents of this collection use [`set_blockers`](Self::set_blockers).
    ///
    /// <p>Reserved for future use.</p>
    pub fn blockers(mut self, input: crate::types::BlockerDeclaration) -> Self {
        let mut v = self.blockers.unwrap_or_default();
        v.push(input);
        self.blockers = Some(v);
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_blockers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BlockerDeclaration>>,
    ) -> Self {
        self.blockers = input;
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions included in a stage.</p>
    pub fn actions(mut self, input: crate::types::ActionDeclaration) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = Some(v);
        self
    }
    /// <p>The actions included in a stage.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ActionDeclaration>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// Consumes the builder and constructs a [`StageDeclaration`](crate::types::StageDeclaration).
    pub fn build(self) -> crate::types::StageDeclaration {
        crate::types::StageDeclaration {
            name: self.name,
            blockers: self.blockers,
            actions: self.actions,
        }
    }
}
