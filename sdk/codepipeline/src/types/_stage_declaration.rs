// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about a stage and its definition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StageDeclaration {
    /// <p>The name of the stage.</p>
    pub name: ::std::string::String,
    /// <p>Reserved for future use.</p>
    pub blockers: ::std::option::Option<::std::vec::Vec<crate::types::BlockerDeclaration>>,
    /// <p>The actions included in a stage.</p>
    pub actions: ::std::vec::Vec<crate::types::ActionDeclaration>,
}
impl StageDeclaration {
    /// <p>The name of the stage.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Reserved for future use.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.blockers.is_none()`.
    pub fn blockers(&self) -> &[crate::types::BlockerDeclaration] {
        self.blockers.as_deref().unwrap_or_default()
    }
    /// <p>The actions included in a stage.</p>
    pub fn actions(&self) -> &[crate::types::ActionDeclaration] {
        use std::ops::Deref;
        self.actions.deref()
    }
}
impl StageDeclaration {
    /// Creates a new builder-style object to manufacture [`StageDeclaration`](crate::types::StageDeclaration).
    pub fn builder() -> crate::types::builders::StageDeclarationBuilder {
        crate::types::builders::StageDeclarationBuilder::default()
    }
}

/// A builder for [`StageDeclaration`](crate::types::StageDeclaration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StageDeclarationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) blockers: ::std::option::Option<::std::vec::Vec<crate::types::BlockerDeclaration>>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::ActionDeclaration>>,
}
impl StageDeclarationBuilder {
    /// <p>The name of the stage.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stage.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the stage.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `blockers`.
    ///
    /// To override the contents of this collection use [`set_blockers`](Self::set_blockers).
    ///
    /// <p>Reserved for future use.</p>
    pub fn blockers(mut self, input: crate::types::BlockerDeclaration) -> Self {
        let mut v = self.blockers.unwrap_or_default();
        v.push(input);
        self.blockers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_blockers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BlockerDeclaration>>) -> Self {
        self.blockers = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_blockers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BlockerDeclaration>> {
        &self.blockers
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions included in a stage.</p>
    pub fn actions(mut self, input: crate::types::ActionDeclaration) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The actions included in a stage.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActionDeclaration>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The actions included in a stage.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionDeclaration>> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`StageDeclaration`](crate::types::StageDeclaration).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::StageDeclarationBuilder::name)
    /// - [`actions`](crate::types::builders::StageDeclarationBuilder::actions)
    pub fn build(self) -> ::std::result::Result<crate::types::StageDeclaration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StageDeclaration {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building StageDeclaration",
                )
            })?,
            blockers: self.blockers,
            actions: self.actions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "actions",
                    "actions was not specified but it is required when building StageDeclaration",
                )
            })?,
        })
    }
}
