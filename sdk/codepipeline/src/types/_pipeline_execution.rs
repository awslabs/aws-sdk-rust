// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about an execution of a pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PipelineExecution {
    /// <p>The name of the pipeline with the specified pipeline execution.</p>
    pub pipeline_name: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the pipeline with the specified pipeline execution.</p>
    pub pipeline_version: ::std::option::Option<i32>,
    /// <p>The ID of the pipeline execution.</p>
    pub pipeline_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>Cancelled: The pipeline’s definition was updated before the pipeline execution could be completed.</p> </li>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::PipelineExecutionStatus>,
    /// <p>A summary that contains a description of the pipeline execution status.</p>
    pub status_summary: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>ArtifactRevision</code> objects included in a pipeline execution.</p>
    pub artifact_revisions: ::std::option::Option<::std::vec::Vec<crate::types::ArtifactRevision>>,
    /// <p>The interaction or event that started a pipeline execution.</p>
    pub trigger: ::std::option::Option<crate::types::ExecutionTrigger>,
    /// <p>A list of pipeline variables used for the pipeline execution.</p>
    pub variables: ::std::option::Option<::std::vec::Vec<crate::types::ResolvedPipelineVariable>>,
}
impl PipelineExecution {
    /// <p>The name of the pipeline with the specified pipeline execution.</p>
    pub fn pipeline_name(&self) -> ::std::option::Option<&str> {
        self.pipeline_name.as_deref()
    }
    /// <p>The version number of the pipeline with the specified pipeline execution.</p>
    pub fn pipeline_version(&self) -> ::std::option::Option<i32> {
        self.pipeline_version
    }
    /// <p>The ID of the pipeline execution.</p>
    pub fn pipeline_execution_id(&self) -> ::std::option::Option<&str> {
        self.pipeline_execution_id.as_deref()
    }
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>Cancelled: The pipeline’s definition was updated before the pipeline execution could be completed.</p> </li>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PipelineExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>A summary that contains a description of the pipeline execution status.</p>
    pub fn status_summary(&self) -> ::std::option::Option<&str> {
        self.status_summary.as_deref()
    }
    /// <p>A list of <code>ArtifactRevision</code> objects included in a pipeline execution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.artifact_revisions.is_none()`.
    pub fn artifact_revisions(&self) -> &[crate::types::ArtifactRevision] {
        self.artifact_revisions.as_deref().unwrap_or_default()
    }
    /// <p>The interaction or event that started a pipeline execution.</p>
    pub fn trigger(&self) -> ::std::option::Option<&crate::types::ExecutionTrigger> {
        self.trigger.as_ref()
    }
    /// <p>A list of pipeline variables used for the pipeline execution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.variables.is_none()`.
    pub fn variables(&self) -> &[crate::types::ResolvedPipelineVariable] {
        self.variables.as_deref().unwrap_or_default()
    }
}
impl PipelineExecution {
    /// Creates a new builder-style object to manufacture [`PipelineExecution`](crate::types::PipelineExecution).
    pub fn builder() -> crate::types::builders::PipelineExecutionBuilder {
        crate::types::builders::PipelineExecutionBuilder::default()
    }
}

/// A builder for [`PipelineExecution`](crate::types::PipelineExecution).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PipelineExecutionBuilder {
    pub(crate) pipeline_name: ::std::option::Option<::std::string::String>,
    pub(crate) pipeline_version: ::std::option::Option<i32>,
    pub(crate) pipeline_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::PipelineExecutionStatus>,
    pub(crate) status_summary: ::std::option::Option<::std::string::String>,
    pub(crate) artifact_revisions: ::std::option::Option<::std::vec::Vec<crate::types::ArtifactRevision>>,
    pub(crate) trigger: ::std::option::Option<crate::types::ExecutionTrigger>,
    pub(crate) variables: ::std::option::Option<::std::vec::Vec<crate::types::ResolvedPipelineVariable>>,
}
impl PipelineExecutionBuilder {
    /// <p>The name of the pipeline with the specified pipeline execution.</p>
    pub fn pipeline_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pipeline with the specified pipeline execution.</p>
    pub fn set_pipeline_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_name = input;
        self
    }
    /// <p>The name of the pipeline with the specified pipeline execution.</p>
    pub fn get_pipeline_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_name
    }
    /// <p>The version number of the pipeline with the specified pipeline execution.</p>
    pub fn pipeline_version(mut self, input: i32) -> Self {
        self.pipeline_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the pipeline with the specified pipeline execution.</p>
    pub fn set_pipeline_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pipeline_version = input;
        self
    }
    /// <p>The version number of the pipeline with the specified pipeline execution.</p>
    pub fn get_pipeline_version(&self) -> &::std::option::Option<i32> {
        &self.pipeline_version
    }
    /// <p>The ID of the pipeline execution.</p>
    pub fn pipeline_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the pipeline execution.</p>
    pub fn set_pipeline_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_execution_id = input;
        self
    }
    /// <p>The ID of the pipeline execution.</p>
    pub fn get_pipeline_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_execution_id
    }
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>Cancelled: The pipeline’s definition was updated before the pipeline execution could be completed.</p> </li>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::PipelineExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>Cancelled: The pipeline’s definition was updated before the pipeline execution could be completed.</p> </li>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PipelineExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>Cancelled: The pipeline’s definition was updated before the pipeline execution could be completed.</p> </li>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PipelineExecutionStatus> {
        &self.status
    }
    /// <p>A summary that contains a description of the pipeline execution status.</p>
    pub fn status_summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A summary that contains a description of the pipeline execution status.</p>
    pub fn set_status_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_summary = input;
        self
    }
    /// <p>A summary that contains a description of the pipeline execution status.</p>
    pub fn get_status_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_summary
    }
    /// Appends an item to `artifact_revisions`.
    ///
    /// To override the contents of this collection use [`set_artifact_revisions`](Self::set_artifact_revisions).
    ///
    /// <p>A list of <code>ArtifactRevision</code> objects included in a pipeline execution.</p>
    pub fn artifact_revisions(mut self, input: crate::types::ArtifactRevision) -> Self {
        let mut v = self.artifact_revisions.unwrap_or_default();
        v.push(input);
        self.artifact_revisions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>ArtifactRevision</code> objects included in a pipeline execution.</p>
    pub fn set_artifact_revisions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ArtifactRevision>>) -> Self {
        self.artifact_revisions = input;
        self
    }
    /// <p>A list of <code>ArtifactRevision</code> objects included in a pipeline execution.</p>
    pub fn get_artifact_revisions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ArtifactRevision>> {
        &self.artifact_revisions
    }
    /// <p>The interaction or event that started a pipeline execution.</p>
    pub fn trigger(mut self, input: crate::types::ExecutionTrigger) -> Self {
        self.trigger = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interaction or event that started a pipeline execution.</p>
    pub fn set_trigger(mut self, input: ::std::option::Option<crate::types::ExecutionTrigger>) -> Self {
        self.trigger = input;
        self
    }
    /// <p>The interaction or event that started a pipeline execution.</p>
    pub fn get_trigger(&self) -> &::std::option::Option<crate::types::ExecutionTrigger> {
        &self.trigger
    }
    /// Appends an item to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>A list of pipeline variables used for the pipeline execution.</p>
    pub fn variables(mut self, input: crate::types::ResolvedPipelineVariable) -> Self {
        let mut v = self.variables.unwrap_or_default();
        v.push(input);
        self.variables = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of pipeline variables used for the pipeline execution.</p>
    pub fn set_variables(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResolvedPipelineVariable>>) -> Self {
        self.variables = input;
        self
    }
    /// <p>A list of pipeline variables used for the pipeline execution.</p>
    pub fn get_variables(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResolvedPipelineVariable>> {
        &self.variables
    }
    /// Consumes the builder and constructs a [`PipelineExecution`](crate::types::PipelineExecution).
    pub fn build(self) -> crate::types::PipelineExecution {
        crate::types::PipelineExecution {
            pipeline_name: self.pipeline_name,
            pipeline_version: self.pipeline_version,
            pipeline_execution_id: self.pipeline_execution_id,
            status: self.status,
            status_summary: self.status_summary,
            artifact_revisions: self.artifact_revisions,
            trigger: self.trigger,
            variables: self.variables,
        }
    }
}
