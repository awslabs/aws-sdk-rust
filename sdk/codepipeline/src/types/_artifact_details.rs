// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about the details of an artifact.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ArtifactDetails {
    /// <p>The minimum number of artifacts allowed for the action type.</p>
    #[doc(hidden)]
    pub minimum_count: i32,
    /// <p>The maximum number of artifacts allowed for the action type.</p>
    #[doc(hidden)]
    pub maximum_count: i32,
}
impl ArtifactDetails {
    /// <p>The minimum number of artifacts allowed for the action type.</p>
    pub fn minimum_count(&self) -> i32 {
        self.minimum_count
    }
    /// <p>The maximum number of artifacts allowed for the action type.</p>
    pub fn maximum_count(&self) -> i32 {
        self.maximum_count
    }
}
impl ArtifactDetails {
    /// Creates a new builder-style object to manufacture [`ArtifactDetails`](crate::types::ArtifactDetails).
    pub fn builder() -> crate::types::builders::ArtifactDetailsBuilder {
        crate::types::builders::ArtifactDetailsBuilder::default()
    }
}

/// A builder for [`ArtifactDetails`](crate::types::ArtifactDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ArtifactDetailsBuilder {
    pub(crate) minimum_count: std::option::Option<i32>,
    pub(crate) maximum_count: std::option::Option<i32>,
}
impl ArtifactDetailsBuilder {
    /// <p>The minimum number of artifacts allowed for the action type.</p>
    pub fn minimum_count(mut self, input: i32) -> Self {
        self.minimum_count = Some(input);
        self
    }
    /// <p>The minimum number of artifacts allowed for the action type.</p>
    pub fn set_minimum_count(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_count = input;
        self
    }
    /// <p>The maximum number of artifacts allowed for the action type.</p>
    pub fn maximum_count(mut self, input: i32) -> Self {
        self.maximum_count = Some(input);
        self
    }
    /// <p>The maximum number of artifacts allowed for the action type.</p>
    pub fn set_maximum_count(mut self, input: std::option::Option<i32>) -> Self {
        self.maximum_count = input;
        self
    }
    /// Consumes the builder and constructs a [`ArtifactDetails`](crate::types::ArtifactDetails).
    pub fn build(self) -> crate::types::ArtifactDetails {
        crate::types::ArtifactDetails {
            minimum_count: self.minimum_count.unwrap_or_default(),
            maximum_count: self.maximum_count.unwrap_or_default(),
        }
    }
}
