// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detail returned for each webhook after listing webhooks, such as the webhook URL, the webhook name, and the webhook ARN.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListWebhookItem {
    /// <p>The detail returned for each webhook, such as the webhook authentication type and filter rules.</p>
    pub definition: ::std::option::Option<crate::types::WebhookDefinition>,
    /// <p>A unique URL generated by CodePipeline. When a POST request is made to this URL, the defined pipeline is started as long as the body of the post request satisfies the defined authentication and filtering conditions. Deleting and re-creating a webhook makes the old URL invalid and generates a new one.</p>
    pub url: ::std::string::String,
    /// <p>The text of the error message about the webhook.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The number code of the error.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>The date and time a webhook was last successfully triggered, in timestamp format.</p>
    pub last_triggered: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the webhook.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the tags applied to the webhook.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ListWebhookItem {
    /// <p>The detail returned for each webhook, such as the webhook authentication type and filter rules.</p>
    pub fn definition(&self) -> ::std::option::Option<&crate::types::WebhookDefinition> {
        self.definition.as_ref()
    }
    /// <p>A unique URL generated by CodePipeline. When a POST request is made to this URL, the defined pipeline is started as long as the body of the post request satisfies the defined authentication and filtering conditions. Deleting and re-creating a webhook makes the old URL invalid and generates a new one.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The text of the error message about the webhook.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The number code of the error.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The date and time a webhook was last successfully triggered, in timestamp format.</p>
    pub fn last_triggered(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_triggered.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the webhook.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Specifies the tags applied to the webhook.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ListWebhookItem {
    /// Creates a new builder-style object to manufacture [`ListWebhookItem`](crate::types::ListWebhookItem).
    pub fn builder() -> crate::types::builders::ListWebhookItemBuilder {
        crate::types::builders::ListWebhookItemBuilder::default()
    }
}

/// A builder for [`ListWebhookItem`](crate::types::ListWebhookItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListWebhookItemBuilder {
    pub(crate) definition: ::std::option::Option<crate::types::WebhookDefinition>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) last_triggered: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ListWebhookItemBuilder {
    /// <p>The detail returned for each webhook, such as the webhook authentication type and filter rules.</p>
    /// This field is required.
    pub fn definition(mut self, input: crate::types::WebhookDefinition) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The detail returned for each webhook, such as the webhook authentication type and filter rules.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::WebhookDefinition>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The detail returned for each webhook, such as the webhook authentication type and filter rules.</p>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::WebhookDefinition> {
        &self.definition
    }
    /// <p>A unique URL generated by CodePipeline. When a POST request is made to this URL, the defined pipeline is started as long as the body of the post request satisfies the defined authentication and filtering conditions. Deleting and re-creating a webhook makes the old URL invalid and generates a new one.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique URL generated by CodePipeline. When a POST request is made to this URL, the defined pipeline is started as long as the body of the post request satisfies the defined authentication and filtering conditions. Deleting and re-creating a webhook makes the old URL invalid and generates a new one.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>A unique URL generated by CodePipeline. When a POST request is made to this URL, the defined pipeline is started as long as the body of the post request satisfies the defined authentication and filtering conditions. Deleting and re-creating a webhook makes the old URL invalid and generates a new one.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The text of the error message about the webhook.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text of the error message about the webhook.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The text of the error message about the webhook.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The number code of the error.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number code of the error.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The number code of the error.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The date and time a webhook was last successfully triggered, in timestamp format.</p>
    pub fn last_triggered(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_triggered = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time a webhook was last successfully triggered, in timestamp format.</p>
    pub fn set_last_triggered(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_triggered = input;
        self
    }
    /// <p>The date and time a webhook was last successfully triggered, in timestamp format.</p>
    pub fn get_last_triggered(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_triggered
    }
    /// <p>The Amazon Resource Name (ARN) of the webhook.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the webhook.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the webhook.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies the tags applied to the webhook.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the tags applied to the webhook.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies the tags applied to the webhook.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ListWebhookItem`](crate::types::ListWebhookItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`url`](crate::types::builders::ListWebhookItemBuilder::url)
    pub fn build(self) -> ::std::result::Result<crate::types::ListWebhookItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListWebhookItem {
            definition: self.definition,
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building ListWebhookItem",
                )
            })?,
            error_message: self.error_message,
            error_code: self.error_code,
            last_triggered: self.last_triggered,
            arn: self.arn,
            tags: self.tags,
        })
    }
}
