// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about failure details.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailureDetails {
    /// <p>The type of the failure.</p>
    pub r#type: crate::types::FailureType,
    /// <p>The message about the failure.</p>
    pub message: ::std::string::String,
    /// <p>The external ID of the run of the action that failed.</p>
    pub external_execution_id: ::std::option::Option<::std::string::String>,
}
impl FailureDetails {
    /// <p>The type of the failure.</p>
    pub fn r#type(&self) -> &crate::types::FailureType {
        &self.r#type
    }
    /// <p>The message about the failure.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>The external ID of the run of the action that failed.</p>
    pub fn external_execution_id(&self) -> ::std::option::Option<&str> {
        self.external_execution_id.as_deref()
    }
}
impl FailureDetails {
    /// Creates a new builder-style object to manufacture [`FailureDetails`](crate::types::FailureDetails).
    pub fn builder() -> crate::types::builders::FailureDetailsBuilder {
        crate::types::builders::FailureDetailsBuilder::default()
    }
}

/// A builder for [`FailureDetails`](crate::types::FailureDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FailureDetailsBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::FailureType>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) external_execution_id: ::std::option::Option<::std::string::String>,
}
impl FailureDetailsBuilder {
    /// <p>The type of the failure.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::FailureType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the failure.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::FailureType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the failure.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::FailureType> {
        &self.r#type
    }
    /// <p>The message about the failure.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message about the failure.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The message about the failure.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The external ID of the run of the action that failed.</p>
    pub fn external_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID of the run of the action that failed.</p>
    pub fn set_external_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_execution_id = input;
        self
    }
    /// <p>The external ID of the run of the action that failed.</p>
    pub fn get_external_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_execution_id
    }
    /// Consumes the builder and constructs a [`FailureDetails`](crate::types::FailureDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::FailureDetailsBuilder::r#type)
    /// - [`message`](crate::types::builders::FailureDetailsBuilder::message)
    pub fn build(self) -> ::std::result::Result<crate::types::FailureDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FailureDetails {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FailureDetails",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building FailureDetails",
                )
            })?,
            external_execution_id: self.external_execution_id,
        })
    }
}
