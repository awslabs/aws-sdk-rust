// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the structure of actions and stages to be performed in the pipeline.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PipelineDeclaration {
    /// <p>The name of the pipeline.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for AWS CodePipeline to use to either perform actions with no <code>actionRoleArn</code>, or to use to assume roles for actions with an <code>actionRoleArn</code>.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>Represents information about the S3 bucket where artifacts are stored for the pipeline.</p> <note>
    /// <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub artifact_store: std::option::Option<crate::types::ArtifactStore>,
    /// <p>A mapping of <code>artifactStore</code> objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.</p> <note>
    /// <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub artifact_stores: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ArtifactStore>,
    >,
    /// <p>The stage in which to perform the action.</p>
    #[doc(hidden)]
    pub stages: std::option::Option<std::vec::Vec<crate::types::StageDeclaration>>,
    /// <p>The version number of the pipeline. A new pipeline always has a version number of 1. This number is incremented when a pipeline is updated.</p>
    #[doc(hidden)]
    pub version: std::option::Option<i32>,
}
impl PipelineDeclaration {
    /// <p>The name of the pipeline.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for AWS CodePipeline to use to either perform actions with no <code>actionRoleArn</code>, or to use to assume roles for actions with an <code>actionRoleArn</code>.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Represents information about the S3 bucket where artifacts are stored for the pipeline.</p> <note>
    /// <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
    /// </note>
    pub fn artifact_store(&self) -> std::option::Option<&crate::types::ArtifactStore> {
        self.artifact_store.as_ref()
    }
    /// <p>A mapping of <code>artifactStore</code> objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.</p> <note>
    /// <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
    /// </note>
    pub fn artifact_stores(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::ArtifactStore>,
    > {
        self.artifact_stores.as_ref()
    }
    /// <p>The stage in which to perform the action.</p>
    pub fn stages(&self) -> std::option::Option<&[crate::types::StageDeclaration]> {
        self.stages.as_deref()
    }
    /// <p>The version number of the pipeline. A new pipeline always has a version number of 1. This number is incremented when a pipeline is updated.</p>
    pub fn version(&self) -> std::option::Option<i32> {
        self.version
    }
}
impl PipelineDeclaration {
    /// Creates a new builder-style object to manufacture [`PipelineDeclaration`](crate::types::PipelineDeclaration).
    pub fn builder() -> crate::types::builders::PipelineDeclarationBuilder {
        crate::types::builders::PipelineDeclarationBuilder::default()
    }
}

/// A builder for [`PipelineDeclaration`](crate::types::PipelineDeclaration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PipelineDeclarationBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) artifact_store: std::option::Option<crate::types::ArtifactStore>,
    pub(crate) artifact_stores: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ArtifactStore>,
    >,
    pub(crate) stages: std::option::Option<std::vec::Vec<crate::types::StageDeclaration>>,
    pub(crate) version: std::option::Option<i32>,
}
impl PipelineDeclarationBuilder {
    /// <p>The name of the pipeline.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the pipeline.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for AWS CodePipeline to use to either perform actions with no <code>actionRoleArn</code>, or to use to assume roles for actions with an <code>actionRoleArn</code>.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for AWS CodePipeline to use to either perform actions with no <code>actionRoleArn</code>, or to use to assume roles for actions with an <code>actionRoleArn</code>.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>Represents information about the S3 bucket where artifacts are stored for the pipeline.</p> <note>
    /// <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
    /// </note>
    pub fn artifact_store(mut self, input: crate::types::ArtifactStore) -> Self {
        self.artifact_store = Some(input);
        self
    }
    /// <p>Represents information about the S3 bucket where artifacts are stored for the pipeline.</p> <note>
    /// <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
    /// </note>
    pub fn set_artifact_store(
        mut self,
        input: std::option::Option<crate::types::ArtifactStore>,
    ) -> Self {
        self.artifact_store = input;
        self
    }
    /// Adds a key-value pair to `artifact_stores`.
    ///
    /// To override the contents of this collection use [`set_artifact_stores`](Self::set_artifact_stores).
    ///
    /// <p>A mapping of <code>artifactStore</code> objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.</p> <note>
    /// <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
    /// </note>
    pub fn artifact_stores(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ArtifactStore,
    ) -> Self {
        let mut hash_map = self.artifact_stores.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.artifact_stores = Some(hash_map);
        self
    }
    /// <p>A mapping of <code>artifactStore</code> objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.</p> <note>
    /// <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
    /// </note>
    pub fn set_artifact_stores(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ArtifactStore>,
        >,
    ) -> Self {
        self.artifact_stores = input;
        self
    }
    /// Appends an item to `stages`.
    ///
    /// To override the contents of this collection use [`set_stages`](Self::set_stages).
    ///
    /// <p>The stage in which to perform the action.</p>
    pub fn stages(mut self, input: crate::types::StageDeclaration) -> Self {
        let mut v = self.stages.unwrap_or_default();
        v.push(input);
        self.stages = Some(v);
        self
    }
    /// <p>The stage in which to perform the action.</p>
    pub fn set_stages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StageDeclaration>>,
    ) -> Self {
        self.stages = input;
        self
    }
    /// <p>The version number of the pipeline. A new pipeline always has a version number of 1. This number is incremented when a pipeline is updated.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The version number of the pipeline. A new pipeline always has a version number of 1. This number is incremented when a pipeline is updated.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`PipelineDeclaration`](crate::types::PipelineDeclaration).
    pub fn build(self) -> crate::types::PipelineDeclaration {
        crate::types::PipelineDeclaration {
            name: self.name,
            role_arn: self.role_arn,
            artifact_store: self.artifact_store,
            artifact_stores: self.artifact_stores,
            stages: self.stages,
            version: self.version,
        }
    }
}
