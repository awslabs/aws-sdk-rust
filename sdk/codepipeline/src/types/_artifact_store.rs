// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The S3 bucket where artifacts for the pipeline are stored.</p> <note>
/// <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ArtifactStore {
    /// <p>The type of the artifact store, such as S3.</p>
    pub r#type: crate::types::ArtifactStoreType,
    /// <p>The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same Amazon Web Services Region as the pipeline to store your pipeline artifacts.</p>
    pub location: ::std::string::String,
    /// <p>The encryption key used to encrypt the data in the artifact store, such as an Amazon Web Services Key Management Service key. If this is undefined, the default key for Amazon S3 is used.</p>
    pub encryption_key: ::std::option::Option<crate::types::EncryptionKey>,
}
impl ArtifactStore {
    /// <p>The type of the artifact store, such as S3.</p>
    pub fn r#type(&self) -> &crate::types::ArtifactStoreType {
        &self.r#type
    }
    /// <p>The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same Amazon Web Services Region as the pipeline to store your pipeline artifacts.</p>
    pub fn location(&self) -> &str {
        use std::ops::Deref;
        self.location.deref()
    }
    /// <p>The encryption key used to encrypt the data in the artifact store, such as an Amazon Web Services Key Management Service key. If this is undefined, the default key for Amazon S3 is used.</p>
    pub fn encryption_key(&self) -> ::std::option::Option<&crate::types::EncryptionKey> {
        self.encryption_key.as_ref()
    }
}
impl ArtifactStore {
    /// Creates a new builder-style object to manufacture [`ArtifactStore`](crate::types::ArtifactStore).
    pub fn builder() -> crate::types::builders::ArtifactStoreBuilder {
        crate::types::builders::ArtifactStoreBuilder::default()
    }
}

/// A builder for [`ArtifactStore`](crate::types::ArtifactStore).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ArtifactStoreBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ArtifactStoreType>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key: ::std::option::Option<crate::types::EncryptionKey>,
}
impl ArtifactStoreBuilder {
    /// <p>The type of the artifact store, such as S3.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ArtifactStoreType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the artifact store, such as S3.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ArtifactStoreType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the artifact store, such as S3.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ArtifactStoreType> {
        &self.r#type
    }
    /// <p>The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same Amazon Web Services Region as the pipeline to store your pipeline artifacts.</p>
    /// This field is required.
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same Amazon Web Services Region as the pipeline to store your pipeline artifacts.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same Amazon Web Services Region as the pipeline to store your pipeline artifacts.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The encryption key used to encrypt the data in the artifact store, such as an Amazon Web Services Key Management Service key. If this is undefined, the default key for Amazon S3 is used.</p>
    pub fn encryption_key(mut self, input: crate::types::EncryptionKey) -> Self {
        self.encryption_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encryption key used to encrypt the data in the artifact store, such as an Amazon Web Services Key Management Service key. If this is undefined, the default key for Amazon S3 is used.</p>
    pub fn set_encryption_key(mut self, input: ::std::option::Option<crate::types::EncryptionKey>) -> Self {
        self.encryption_key = input;
        self
    }
    /// <p>The encryption key used to encrypt the data in the artifact store, such as an Amazon Web Services Key Management Service key. If this is undefined, the default key for Amazon S3 is used.</p>
    pub fn get_encryption_key(&self) -> &::std::option::Option<crate::types::EncryptionKey> {
        &self.encryption_key
    }
    /// Consumes the builder and constructs a [`ArtifactStore`](crate::types::ArtifactStore).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::ArtifactStoreBuilder::r#type)
    /// - [`location`](crate::types::builders::ArtifactStoreBuilder::location)
    pub fn build(self) -> ::std::result::Result<crate::types::ArtifactStore, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ArtifactStore {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ArtifactStore",
                )
            })?,
            location: self.location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "location",
                    "location was not specified but it is required when building ArtifactStore",
                )
            })?,
            encryption_key: self.encryption_key,
        })
    }
}
