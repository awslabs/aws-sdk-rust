// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a pipeline execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PipelineExecutionSummary {
    /// <p>The ID of the pipeline execution.</p>
    pub pipeline_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::PipelineExecutionStatus>,
    /// <p>The date and time when the pipeline execution began, in timestamp format.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time of the last change to the pipeline execution, in timestamp format.</p>
    pub last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of the source artifact revisions that initiated a pipeline execution.</p>
    pub source_revisions: ::std::option::Option<::std::vec::Vec<crate::types::SourceRevision>>,
    /// <p>The interaction or event that started a pipeline execution, such as automated change detection or a <code>StartPipelineExecution</code> API call.</p>
    pub trigger: ::std::option::Option<crate::types::ExecutionTrigger>,
    /// <p>The interaction that stopped a pipeline execution.</p>
    pub stop_trigger: ::std::option::Option<crate::types::StopExecutionTrigger>,
}
impl PipelineExecutionSummary {
    /// <p>The ID of the pipeline execution.</p>
    pub fn pipeline_execution_id(&self) -> ::std::option::Option<&str> {
        self.pipeline_execution_id.as_deref()
    }
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PipelineExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>The date and time when the pipeline execution began, in timestamp format.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time of the last change to the pipeline execution, in timestamp format.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>A list of the source artifact revisions that initiated a pipeline execution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_revisions.is_none()`.
    pub fn source_revisions(&self) -> &[crate::types::SourceRevision] {
        self.source_revisions.as_deref().unwrap_or_default()
    }
    /// <p>The interaction or event that started a pipeline execution, such as automated change detection or a <code>StartPipelineExecution</code> API call.</p>
    pub fn trigger(&self) -> ::std::option::Option<&crate::types::ExecutionTrigger> {
        self.trigger.as_ref()
    }
    /// <p>The interaction that stopped a pipeline execution.</p>
    pub fn stop_trigger(&self) -> ::std::option::Option<&crate::types::StopExecutionTrigger> {
        self.stop_trigger.as_ref()
    }
}
impl PipelineExecutionSummary {
    /// Creates a new builder-style object to manufacture [`PipelineExecutionSummary`](crate::types::PipelineExecutionSummary).
    pub fn builder() -> crate::types::builders::PipelineExecutionSummaryBuilder {
        crate::types::builders::PipelineExecutionSummaryBuilder::default()
    }
}

/// A builder for [`PipelineExecutionSummary`](crate::types::PipelineExecutionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PipelineExecutionSummaryBuilder {
    pub(crate) pipeline_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::PipelineExecutionStatus>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) source_revisions: ::std::option::Option<::std::vec::Vec<crate::types::SourceRevision>>,
    pub(crate) trigger: ::std::option::Option<crate::types::ExecutionTrigger>,
    pub(crate) stop_trigger: ::std::option::Option<crate::types::StopExecutionTrigger>,
}
impl PipelineExecutionSummaryBuilder {
    /// <p>The ID of the pipeline execution.</p>
    pub fn pipeline_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the pipeline execution.</p>
    pub fn set_pipeline_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_execution_id = input;
        self
    }
    /// <p>The ID of the pipeline execution.</p>
    pub fn get_pipeline_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_execution_id
    }
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::PipelineExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PipelineExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the pipeline execution.</p>
    /// <ul>
    /// <li> <p>InProgress: The pipeline execution is currently running.</p> </li>
    /// <li> <p>Stopped: The pipeline execution was manually stopped. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped">Stopped Executions</a>.</p> </li>
    /// <li> <p>Succeeded: The pipeline execution was completed successfully. </p> </li>
    /// <li> <p>Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded">Superseded Executions</a>.</p> </li>
    /// <li> <p>Failed: The pipeline execution was not completed successfully.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PipelineExecutionStatus> {
        &self.status
    }
    /// <p>The date and time when the pipeline execution began, in timestamp format.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the pipeline execution began, in timestamp format.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time when the pipeline execution began, in timestamp format.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The date and time of the last change to the pipeline execution, in timestamp format.</p>
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time of the last change to the pipeline execution, in timestamp format.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The date and time of the last change to the pipeline execution, in timestamp format.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// Appends an item to `source_revisions`.
    ///
    /// To override the contents of this collection use [`set_source_revisions`](Self::set_source_revisions).
    ///
    /// <p>A list of the source artifact revisions that initiated a pipeline execution.</p>
    pub fn source_revisions(mut self, input: crate::types::SourceRevision) -> Self {
        let mut v = self.source_revisions.unwrap_or_default();
        v.push(input);
        self.source_revisions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the source artifact revisions that initiated a pipeline execution.</p>
    pub fn set_source_revisions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SourceRevision>>) -> Self {
        self.source_revisions = input;
        self
    }
    /// <p>A list of the source artifact revisions that initiated a pipeline execution.</p>
    pub fn get_source_revisions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SourceRevision>> {
        &self.source_revisions
    }
    /// <p>The interaction or event that started a pipeline execution, such as automated change detection or a <code>StartPipelineExecution</code> API call.</p>
    pub fn trigger(mut self, input: crate::types::ExecutionTrigger) -> Self {
        self.trigger = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interaction or event that started a pipeline execution, such as automated change detection or a <code>StartPipelineExecution</code> API call.</p>
    pub fn set_trigger(mut self, input: ::std::option::Option<crate::types::ExecutionTrigger>) -> Self {
        self.trigger = input;
        self
    }
    /// <p>The interaction or event that started a pipeline execution, such as automated change detection or a <code>StartPipelineExecution</code> API call.</p>
    pub fn get_trigger(&self) -> &::std::option::Option<crate::types::ExecutionTrigger> {
        &self.trigger
    }
    /// <p>The interaction that stopped a pipeline execution.</p>
    pub fn stop_trigger(mut self, input: crate::types::StopExecutionTrigger) -> Self {
        self.stop_trigger = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interaction that stopped a pipeline execution.</p>
    pub fn set_stop_trigger(mut self, input: ::std::option::Option<crate::types::StopExecutionTrigger>) -> Self {
        self.stop_trigger = input;
        self
    }
    /// <p>The interaction that stopped a pipeline execution.</p>
    pub fn get_stop_trigger(&self) -> &::std::option::Option<crate::types::StopExecutionTrigger> {
        &self.stop_trigger
    }
    /// Consumes the builder and constructs a [`PipelineExecutionSummary`](crate::types::PipelineExecutionSummary).
    pub fn build(self) -> crate::types::PipelineExecutionSummary {
        crate::types::PipelineExecutionSummary {
            pipeline_execution_id: self.pipeline_execution_id,
            status: self.status,
            start_time: self.start_time,
            last_update_time: self.last_update_time,
            source_revisions: self.source_revisions,
            trigger: self.trigger,
            stop_trigger: self.stop_trigger,
        }
    }
}
