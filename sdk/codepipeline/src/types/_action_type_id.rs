// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about an action type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActionTypeId {
    /// <p>A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the following values. </p>
    /// <ul>
    /// <li> <p>Source</p> </li>
    /// <li> <p>Build</p> </li>
    /// <li> <p>Test</p> </li>
    /// <li> <p>Deploy</p> </li>
    /// <li> <p>Invoke</p> </li>
    /// <li> <p>Approval</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub category: std::option::Option<crate::types::ActionCategory>,
    /// <p>The creator of the action being called. There are three valid values for the <code>Owner</code> field in the action category section within your pipeline structure: <code>AWS</code>, <code>ThirdParty</code>, and <code>Custom</code>. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers">Valid Action Types and Providers in CodePipeline</a>.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<crate::types::ActionOwner>,
    /// <p>The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers">Valid Action Types and Providers in CodePipeline</a>.</p>
    #[doc(hidden)]
    pub provider: std::option::Option<std::string::String>,
    /// <p>A string that describes the action version.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl ActionTypeId {
    /// <p>A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the following values. </p>
    /// <ul>
    /// <li> <p>Source</p> </li>
    /// <li> <p>Build</p> </li>
    /// <li> <p>Test</p> </li>
    /// <li> <p>Deploy</p> </li>
    /// <li> <p>Invoke</p> </li>
    /// <li> <p>Approval</p> </li>
    /// </ul>
    pub fn category(&self) -> std::option::Option<&crate::types::ActionCategory> {
        self.category.as_ref()
    }
    /// <p>The creator of the action being called. There are three valid values for the <code>Owner</code> field in the action category section within your pipeline structure: <code>AWS</code>, <code>ThirdParty</code>, and <code>Custom</code>. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers">Valid Action Types and Providers in CodePipeline</a>.</p>
    pub fn owner(&self) -> std::option::Option<&crate::types::ActionOwner> {
        self.owner.as_ref()
    }
    /// <p>The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers">Valid Action Types and Providers in CodePipeline</a>.</p>
    pub fn provider(&self) -> std::option::Option<&str> {
        self.provider.as_deref()
    }
    /// <p>A string that describes the action version.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl ActionTypeId {
    /// Creates a new builder-style object to manufacture [`ActionTypeId`](crate::types::ActionTypeId).
    pub fn builder() -> crate::types::builders::ActionTypeIdBuilder {
        crate::types::builders::ActionTypeIdBuilder::default()
    }
}

/// A builder for [`ActionTypeId`](crate::types::ActionTypeId).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionTypeIdBuilder {
    pub(crate) category: std::option::Option<crate::types::ActionCategory>,
    pub(crate) owner: std::option::Option<crate::types::ActionOwner>,
    pub(crate) provider: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl ActionTypeIdBuilder {
    /// <p>A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the following values. </p>
    /// <ul>
    /// <li> <p>Source</p> </li>
    /// <li> <p>Build</p> </li>
    /// <li> <p>Test</p> </li>
    /// <li> <p>Deploy</p> </li>
    /// <li> <p>Invoke</p> </li>
    /// <li> <p>Approval</p> </li>
    /// </ul>
    pub fn category(mut self, input: crate::types::ActionCategory) -> Self {
        self.category = Some(input);
        self
    }
    /// <p>A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the following values. </p>
    /// <ul>
    /// <li> <p>Source</p> </li>
    /// <li> <p>Build</p> </li>
    /// <li> <p>Test</p> </li>
    /// <li> <p>Deploy</p> </li>
    /// <li> <p>Invoke</p> </li>
    /// <li> <p>Approval</p> </li>
    /// </ul>
    pub fn set_category(
        mut self,
        input: std::option::Option<crate::types::ActionCategory>,
    ) -> Self {
        self.category = input;
        self
    }
    /// <p>The creator of the action being called. There are three valid values for the <code>Owner</code> field in the action category section within your pipeline structure: <code>AWS</code>, <code>ThirdParty</code>, and <code>Custom</code>. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers">Valid Action Types and Providers in CodePipeline</a>.</p>
    pub fn owner(mut self, input: crate::types::ActionOwner) -> Self {
        self.owner = Some(input);
        self
    }
    /// <p>The creator of the action being called. There are three valid values for the <code>Owner</code> field in the action category section within your pipeline structure: <code>AWS</code>, <code>ThirdParty</code>, and <code>Custom</code>. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers">Valid Action Types and Providers in CodePipeline</a>.</p>
    pub fn set_owner(mut self, input: std::option::Option<crate::types::ActionOwner>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers">Valid Action Types and Providers in CodePipeline</a>.</p>
    pub fn provider(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider = Some(input.into());
        self
    }
    /// <p>The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers">Valid Action Types and Providers in CodePipeline</a>.</p>
    pub fn set_provider(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider = input;
        self
    }
    /// <p>A string that describes the action version.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>A string that describes the action version.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`ActionTypeId`](crate::types::ActionTypeId).
    pub fn build(self) -> crate::types::ActionTypeId {
        crate::types::ActionTypeId {
            category: self.category,
            owner: self.owner,
            provider: self.provider,
            version: self.version,
        }
    }
}
