// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A type of trigger configuration for Git-based source actions.</p> <note>
/// <p>You can specify the Git configuration trigger type for all third-party Git-based source actions that are supported by the <code>CodeStarSourceConnection</code> action type.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GitConfiguration {
    /// <p>The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.</p> <note>
    /// <p>You can only specify one trigger configuration per source action.</p>
    /// </note>
    pub source_action_name: ::std::string::String,
    /// <p>The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.</p> <note>
    /// <p>Git tags is the only supported event type.</p>
    /// </note>
    pub push: ::std::option::Option<::std::vec::Vec<crate::types::GitPushFilter>>,
}
impl GitConfiguration {
    /// <p>The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.</p> <note>
    /// <p>You can only specify one trigger configuration per source action.</p>
    /// </note>
    pub fn source_action_name(&self) -> &str {
        use std::ops::Deref;
        self.source_action_name.deref()
    }
    /// <p>The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.</p> <note>
    /// <p>Git tags is the only supported event type.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.push.is_none()`.
    pub fn push(&self) -> &[crate::types::GitPushFilter] {
        self.push.as_deref().unwrap_or_default()
    }
}
impl GitConfiguration {
    /// Creates a new builder-style object to manufacture [`GitConfiguration`](crate::types::GitConfiguration).
    pub fn builder() -> crate::types::builders::GitConfigurationBuilder {
        crate::types::builders::GitConfigurationBuilder::default()
    }
}

/// A builder for [`GitConfiguration`](crate::types::GitConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GitConfigurationBuilder {
    pub(crate) source_action_name: ::std::option::Option<::std::string::String>,
    pub(crate) push: ::std::option::Option<::std::vec::Vec<crate::types::GitPushFilter>>,
}
impl GitConfigurationBuilder {
    /// <p>The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.</p> <note>
    /// <p>You can only specify one trigger configuration per source action.</p>
    /// </note>
    /// This field is required.
    pub fn source_action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.</p> <note>
    /// <p>You can only specify one trigger configuration per source action.</p>
    /// </note>
    pub fn set_source_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_action_name = input;
        self
    }
    /// <p>The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.</p> <note>
    /// <p>You can only specify one trigger configuration per source action.</p>
    /// </note>
    pub fn get_source_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_action_name
    }
    /// Appends an item to `push`.
    ///
    /// To override the contents of this collection use [`set_push`](Self::set_push).
    ///
    /// <p>The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.</p> <note>
    /// <p>Git tags is the only supported event type.</p>
    /// </note>
    pub fn push(mut self, input: crate::types::GitPushFilter) -> Self {
        let mut v = self.push.unwrap_or_default();
        v.push(input);
        self.push = ::std::option::Option::Some(v);
        self
    }
    /// <p>The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.</p> <note>
    /// <p>Git tags is the only supported event type.</p>
    /// </note>
    pub fn set_push(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GitPushFilter>>) -> Self {
        self.push = input;
        self
    }
    /// <p>The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.</p> <note>
    /// <p>Git tags is the only supported event type.</p>
    /// </note>
    pub fn get_push(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GitPushFilter>> {
        &self.push
    }
    /// Consumes the builder and constructs a [`GitConfiguration`](crate::types::GitConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_action_name`](crate::types::builders::GitConfigurationBuilder::source_action_name)
    pub fn build(self) -> ::std::result::Result<crate::types::GitConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GitConfiguration {
            source_action_name: self.source_action_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_action_name",
                    "source_action_name was not specified but it is required when building GitConfiguration",
                )
            })?,
            push: self.push,
        })
    }
}
