// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the configuration for the <code>Lambda</code> action engine, or executor.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaExecutorConfiguration {
    /// <p>The ARN of the Lambda function used by the action engine.</p>
    #[doc(hidden)]
    pub lambda_function_arn: std::option::Option<std::string::String>,
}
impl LambdaExecutorConfiguration {
    /// <p>The ARN of the Lambda function used by the action engine.</p>
    pub fn lambda_function_arn(&self) -> std::option::Option<&str> {
        self.lambda_function_arn.as_deref()
    }
}
impl LambdaExecutorConfiguration {
    /// Creates a new builder-style object to manufacture [`LambdaExecutorConfiguration`](crate::types::LambdaExecutorConfiguration).
    pub fn builder() -> crate::types::builders::LambdaExecutorConfigurationBuilder {
        crate::types::builders::LambdaExecutorConfigurationBuilder::default()
    }
}

/// A builder for [`LambdaExecutorConfiguration`](crate::types::LambdaExecutorConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaExecutorConfigurationBuilder {
    pub(crate) lambda_function_arn: std::option::Option<std::string::String>,
}
impl LambdaExecutorConfigurationBuilder {
    /// <p>The ARN of the Lambda function used by the action engine.</p>
    pub fn lambda_function_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.lambda_function_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Lambda function used by the action engine.</p>
    pub fn set_lambda_function_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lambda_function_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaExecutorConfiguration`](crate::types::LambdaExecutorConfiguration).
    pub fn build(self) -> crate::types::LambdaExecutorConfiguration {
        crate::types::LambdaExecutorConfiguration {
            lambda_function_arn: self.lambda_function_arn,
        }
    }
}
