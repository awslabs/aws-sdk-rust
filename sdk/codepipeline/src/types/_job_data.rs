// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents other information about a job required for a job worker to complete the job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct JobData {
    /// <p>Represents information about an action type.</p>
    #[doc(hidden)]
    pub action_type_id: std::option::Option<crate::types::ActionTypeId>,
    /// <p>Represents information about an action configuration.</p>
    #[doc(hidden)]
    pub action_configuration: std::option::Option<crate::types::ActionConfiguration>,
    /// <p>Represents information about a pipeline to a job worker.</p> <note>
    /// <p>Includes <code>pipelineArn</code> and <code>pipelineExecutionId</code> for custom jobs.</p>
    /// </note>
    #[doc(hidden)]
    pub pipeline_context: std::option::Option<crate::types::PipelineContext>,
    /// <p>The artifact supplied to the job.</p>
    #[doc(hidden)]
    pub input_artifacts: std::option::Option<std::vec::Vec<crate::types::Artifact>>,
    /// <p>The output of the job.</p>
    #[doc(hidden)]
    pub output_artifacts: std::option::Option<std::vec::Vec<crate::types::Artifact>>,
    /// <p>Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifacts for the pipeline in AWS CodePipeline.</p>
    #[doc(hidden)]
    pub artifact_credentials: std::option::Option<crate::types::AwsSessionCredentials>,
    /// <p>A system-generated token, such as a AWS CodeDeploy deployment ID, required by a job to continue the job asynchronously.</p>
    #[doc(hidden)]
    pub continuation_token: std::option::Option<std::string::String>,
    /// <p>Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. </p>
    #[doc(hidden)]
    pub encryption_key: std::option::Option<crate::types::EncryptionKey>,
}
impl JobData {
    /// <p>Represents information about an action type.</p>
    pub fn action_type_id(&self) -> std::option::Option<&crate::types::ActionTypeId> {
        self.action_type_id.as_ref()
    }
    /// <p>Represents information about an action configuration.</p>
    pub fn action_configuration(&self) -> std::option::Option<&crate::types::ActionConfiguration> {
        self.action_configuration.as_ref()
    }
    /// <p>Represents information about a pipeline to a job worker.</p> <note>
    /// <p>Includes <code>pipelineArn</code> and <code>pipelineExecutionId</code> for custom jobs.</p>
    /// </note>
    pub fn pipeline_context(&self) -> std::option::Option<&crate::types::PipelineContext> {
        self.pipeline_context.as_ref()
    }
    /// <p>The artifact supplied to the job.</p>
    pub fn input_artifacts(&self) -> std::option::Option<&[crate::types::Artifact]> {
        self.input_artifacts.as_deref()
    }
    /// <p>The output of the job.</p>
    pub fn output_artifacts(&self) -> std::option::Option<&[crate::types::Artifact]> {
        self.output_artifacts.as_deref()
    }
    /// <p>Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifacts for the pipeline in AWS CodePipeline.</p>
    pub fn artifact_credentials(
        &self,
    ) -> std::option::Option<&crate::types::AwsSessionCredentials> {
        self.artifact_credentials.as_ref()
    }
    /// <p>A system-generated token, such as a AWS CodeDeploy deployment ID, required by a job to continue the job asynchronously.</p>
    pub fn continuation_token(&self) -> std::option::Option<&str> {
        self.continuation_token.as_deref()
    }
    /// <p>Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. </p>
    pub fn encryption_key(&self) -> std::option::Option<&crate::types::EncryptionKey> {
        self.encryption_key.as_ref()
    }
}
impl std::fmt::Debug for JobData {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("JobData");
        formatter.field("action_type_id", &self.action_type_id);
        formatter.field("action_configuration", &self.action_configuration);
        formatter.field("pipeline_context", &self.pipeline_context);
        formatter.field("input_artifacts", &self.input_artifacts);
        formatter.field("output_artifacts", &self.output_artifacts);
        formatter.field("artifact_credentials", &"*** Sensitive Data Redacted ***");
        formatter.field("continuation_token", &self.continuation_token);
        formatter.field("encryption_key", &self.encryption_key);
        formatter.finish()
    }
}
impl JobData {
    /// Creates a new builder-style object to manufacture [`JobData`](crate::types::JobData).
    pub fn builder() -> crate::types::builders::JobDataBuilder {
        crate::types::builders::JobDataBuilder::default()
    }
}

/// A builder for [`JobData`](crate::types::JobData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct JobDataBuilder {
    pub(crate) action_type_id: std::option::Option<crate::types::ActionTypeId>,
    pub(crate) action_configuration: std::option::Option<crate::types::ActionConfiguration>,
    pub(crate) pipeline_context: std::option::Option<crate::types::PipelineContext>,
    pub(crate) input_artifacts: std::option::Option<std::vec::Vec<crate::types::Artifact>>,
    pub(crate) output_artifacts: std::option::Option<std::vec::Vec<crate::types::Artifact>>,
    pub(crate) artifact_credentials: std::option::Option<crate::types::AwsSessionCredentials>,
    pub(crate) continuation_token: std::option::Option<std::string::String>,
    pub(crate) encryption_key: std::option::Option<crate::types::EncryptionKey>,
}
impl JobDataBuilder {
    /// <p>Represents information about an action type.</p>
    pub fn action_type_id(mut self, input: crate::types::ActionTypeId) -> Self {
        self.action_type_id = Some(input);
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn set_action_type_id(
        mut self,
        input: std::option::Option<crate::types::ActionTypeId>,
    ) -> Self {
        self.action_type_id = input;
        self
    }
    /// <p>Represents information about an action configuration.</p>
    pub fn action_configuration(mut self, input: crate::types::ActionConfiguration) -> Self {
        self.action_configuration = Some(input);
        self
    }
    /// <p>Represents information about an action configuration.</p>
    pub fn set_action_configuration(
        mut self,
        input: std::option::Option<crate::types::ActionConfiguration>,
    ) -> Self {
        self.action_configuration = input;
        self
    }
    /// <p>Represents information about a pipeline to a job worker.</p> <note>
    /// <p>Includes <code>pipelineArn</code> and <code>pipelineExecutionId</code> for custom jobs.</p>
    /// </note>
    pub fn pipeline_context(mut self, input: crate::types::PipelineContext) -> Self {
        self.pipeline_context = Some(input);
        self
    }
    /// <p>Represents information about a pipeline to a job worker.</p> <note>
    /// <p>Includes <code>pipelineArn</code> and <code>pipelineExecutionId</code> for custom jobs.</p>
    /// </note>
    pub fn set_pipeline_context(
        mut self,
        input: std::option::Option<crate::types::PipelineContext>,
    ) -> Self {
        self.pipeline_context = input;
        self
    }
    /// Appends an item to `input_artifacts`.
    ///
    /// To override the contents of this collection use [`set_input_artifacts`](Self::set_input_artifacts).
    ///
    /// <p>The artifact supplied to the job.</p>
    pub fn input_artifacts(mut self, input: crate::types::Artifact) -> Self {
        let mut v = self.input_artifacts.unwrap_or_default();
        v.push(input);
        self.input_artifacts = Some(v);
        self
    }
    /// <p>The artifact supplied to the job.</p>
    pub fn set_input_artifacts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Artifact>>,
    ) -> Self {
        self.input_artifacts = input;
        self
    }
    /// Appends an item to `output_artifacts`.
    ///
    /// To override the contents of this collection use [`set_output_artifacts`](Self::set_output_artifacts).
    ///
    /// <p>The output of the job.</p>
    pub fn output_artifacts(mut self, input: crate::types::Artifact) -> Self {
        let mut v = self.output_artifacts.unwrap_or_default();
        v.push(input);
        self.output_artifacts = Some(v);
        self
    }
    /// <p>The output of the job.</p>
    pub fn set_output_artifacts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Artifact>>,
    ) -> Self {
        self.output_artifacts = input;
        self
    }
    /// <p>Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifacts for the pipeline in AWS CodePipeline.</p>
    pub fn artifact_credentials(mut self, input: crate::types::AwsSessionCredentials) -> Self {
        self.artifact_credentials = Some(input);
        self
    }
    /// <p>Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifacts for the pipeline in AWS CodePipeline.</p>
    pub fn set_artifact_credentials(
        mut self,
        input: std::option::Option<crate::types::AwsSessionCredentials>,
    ) -> Self {
        self.artifact_credentials = input;
        self
    }
    /// <p>A system-generated token, such as a AWS CodeDeploy deployment ID, required by a job to continue the job asynchronously.</p>
    pub fn continuation_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.continuation_token = Some(input.into());
        self
    }
    /// <p>A system-generated token, such as a AWS CodeDeploy deployment ID, required by a job to continue the job asynchronously.</p>
    pub fn set_continuation_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.continuation_token = input;
        self
    }
    /// <p>Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. </p>
    pub fn encryption_key(mut self, input: crate::types::EncryptionKey) -> Self {
        self.encryption_key = Some(input);
        self
    }
    /// <p>Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. </p>
    pub fn set_encryption_key(
        mut self,
        input: std::option::Option<crate::types::EncryptionKey>,
    ) -> Self {
        self.encryption_key = input;
        self
    }
    /// Consumes the builder and constructs a [`JobData`](crate::types::JobData).
    pub fn build(self) -> crate::types::JobData {
        crate::types::JobData {
            action_type_id: self.action_type_id,
            action_configuration: self.action_configuration,
            pipeline_context: self.pipeline_context,
            input_artifacts: self.input_artifacts,
            output_artifacts: self.output_artifacts,
            artifact_credentials: self.artifact_credentials,
            continuation_token: self.continuation_token,
            encryption_key: self.encryption_key,
        }
    }
}
impl std::fmt::Debug for JobDataBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("JobDataBuilder");
        formatter.field("action_type_id", &self.action_type_id);
        formatter.field("action_configuration", &self.action_configuration);
        formatter.field("pipeline_context", &self.pipeline_context);
        formatter.field("input_artifacts", &self.input_artifacts);
        formatter.field("output_artifacts", &self.output_artifacts);
        formatter.field("artifact_credentials", &"*** Sensitive Data Redacted ***");
        formatter.field("continuation_token", &self.continuation_token);
        formatter.field("encryption_key", &self.encryption_key);
        formatter.finish()
    }
}
