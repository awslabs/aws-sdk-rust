// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about an action configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActionConfiguration {
    /// <p>The configuration data for the action.</p>
    #[doc(hidden)]
    pub configuration:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ActionConfiguration {
    /// <p>The configuration data for the action.</p>
    pub fn configuration(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.configuration.as_ref()
    }
}
impl ActionConfiguration {
    /// Creates a new builder-style object to manufacture [`ActionConfiguration`](crate::types::ActionConfiguration).
    pub fn builder() -> crate::types::builders::ActionConfigurationBuilder {
        crate::types::builders::ActionConfigurationBuilder::default()
    }
}

/// A builder for [`ActionConfiguration`](crate::types::ActionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionConfigurationBuilder {
    pub(crate) configuration:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ActionConfigurationBuilder {
    /// Adds a key-value pair to `configuration`.
    ///
    /// To override the contents of this collection use [`set_configuration`](Self::set_configuration).
    ///
    /// <p>The configuration data for the action.</p>
    pub fn configuration(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.configuration = Some(hash_map);
        self
    }
    /// <p>The configuration data for the action.</p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`ActionConfiguration`](crate::types::ActionConfiguration).
    pub fn build(self) -> crate::types::ActionConfiguration {
        crate::types::ActionConfiguration {
            configuration: self.configuration,
        }
    }
}
