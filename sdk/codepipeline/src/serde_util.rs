// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_custom_action_type_output_correct_errors(
    mut builder: crate::operation::create_custom_action_type::builders::CreateCustomActionTypeOutputBuilder,
) -> crate::operation::create_custom_action_type::builders::CreateCustomActionTypeOutputBuilder {
    if builder.action_type.is_none() {
        builder.action_type = {
            let builder = crate::types::builders::ActionTypeBuilder::default();
            Some(crate::serde_util::action_type_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn list_action_types_output_correct_errors(
    mut builder: crate::operation::list_action_types::builders::ListActionTypesOutputBuilder,
) -> crate::operation::list_action_types::builders::ListActionTypesOutputBuilder {
    if builder.action_types.is_none() {
        builder.action_types = Some(Default::default())
    }
    builder
}

pub(crate) fn action_type_correct_errors(mut builder: crate::types::builders::ActionTypeBuilder) -> crate::types::builders::ActionTypeBuilder {
    if builder.id.is_none() {
        builder.id = {
            let builder = crate::types::builders::ActionTypeIdBuilder::default();
            crate::serde_util::action_type_id_correct_errors(builder).build().ok()
        }
    }
    if builder.input_artifact_details.is_none() {
        builder.input_artifact_details = {
            let builder = crate::types::builders::ArtifactDetailsBuilder::default();
            Some(crate::serde_util::artifact_details_correct_errors(builder).build())
        }
    }
    if builder.output_artifact_details.is_none() {
        builder.output_artifact_details = {
            let builder = crate::types::builders::ArtifactDetailsBuilder::default();
            Some(crate::serde_util::artifact_details_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn action_type_declaration_correct_errors(
    mut builder: crate::types::builders::ActionTypeDeclarationBuilder,
) -> crate::types::builders::ActionTypeDeclarationBuilder {
    if builder.executor.is_none() {
        builder.executor = {
            let builder = crate::types::builders::ActionTypeExecutorBuilder::default();
            crate::serde_util::action_type_executor_correct_errors(builder).build().ok()
        }
    }
    if builder.id.is_none() {
        builder.id = {
            let builder = crate::types::builders::ActionTypeIdentifierBuilder::default();
            crate::serde_util::action_type_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.input_artifact_details.is_none() {
        builder.input_artifact_details = {
            let builder = crate::types::builders::ActionTypeArtifactDetailsBuilder::default();
            Some(crate::serde_util::action_type_artifact_details_correct_errors(builder).build())
        }
    }
    if builder.output_artifact_details.is_none() {
        builder.output_artifact_details = {
            let builder = crate::types::builders::ActionTypeArtifactDetailsBuilder::default();
            Some(crate::serde_util::action_type_artifact_details_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn list_webhook_item_correct_errors(
    mut builder: crate::types::builders::ListWebhookItemBuilder,
) -> crate::types::builders::ListWebhookItemBuilder {
    if builder.definition.is_none() {
        builder.definition = {
            let builder = crate::types::builders::WebhookDefinitionBuilder::default();
            crate::serde_util::webhook_definition_correct_errors(builder).build().ok()
        }
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn pipeline_declaration_correct_errors(
    mut builder: crate::types::builders::PipelineDeclarationBuilder,
) -> crate::types::builders::PipelineDeclarationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.stages.is_none() {
        builder.stages = Some(Default::default())
    }
    builder
}

pub(crate) fn action_type_id_correct_errors(mut builder: crate::types::builders::ActionTypeIdBuilder) -> crate::types::builders::ActionTypeIdBuilder {
    if builder.category.is_none() {
        builder.category = "no value was set".parse::<crate::types::ActionCategory>().ok()
    }
    if builder.owner.is_none() {
        builder.owner = "no value was set".parse::<crate::types::ActionOwner>().ok()
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn artifact_details_correct_errors(
    mut builder: crate::types::builders::ArtifactDetailsBuilder,
) -> crate::types::builders::ArtifactDetailsBuilder {
    if builder.minimum_count.is_none() {
        builder.minimum_count = Some(Default::default())
    }
    if builder.maximum_count.is_none() {
        builder.maximum_count = Some(Default::default())
    }
    builder
}

pub(crate) fn action_type_artifact_details_correct_errors(
    mut builder: crate::types::builders::ActionTypeArtifactDetailsBuilder,
) -> crate::types::builders::ActionTypeArtifactDetailsBuilder {
    if builder.minimum_count.is_none() {
        builder.minimum_count = Some(Default::default())
    }
    if builder.maximum_count.is_none() {
        builder.maximum_count = Some(Default::default())
    }
    builder
}

pub(crate) fn action_type_executor_correct_errors(
    mut builder: crate::types::builders::ActionTypeExecutorBuilder,
) -> crate::types::builders::ActionTypeExecutorBuilder {
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::ExecutorConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ExecutorType>().ok()
    }
    builder
}

pub(crate) fn action_type_identifier_correct_errors(
    mut builder: crate::types::builders::ActionTypeIdentifierBuilder,
) -> crate::types::builders::ActionTypeIdentifierBuilder {
    if builder.category.is_none() {
        builder.category = "no value was set".parse::<crate::types::ActionCategory>().ok()
    }
    if builder.owner.is_none() {
        builder.owner = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn action_type_permissions_correct_errors(
    mut builder: crate::types::builders::ActionTypePermissionsBuilder,
) -> crate::types::builders::ActionTypePermissionsBuilder {
    if builder.allowed_accounts.is_none() {
        builder.allowed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn artifact_store_correct_errors(
    mut builder: crate::types::builders::ArtifactStoreBuilder,
) -> crate::types::builders::ArtifactStoreBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ArtifactStoreType>().ok()
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn webhook_definition_correct_errors(
    mut builder: crate::types::builders::WebhookDefinitionBuilder,
) -> crate::types::builders::WebhookDefinitionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.target_pipeline.is_none() {
        builder.target_pipeline = Some(Default::default())
    }
    if builder.target_action.is_none() {
        builder.target_action = Some(Default::default())
    }
    if builder.filters.is_none() {
        builder.filters = Some(Default::default())
    }
    if builder.authentication.is_none() {
        builder.authentication = "no value was set".parse::<crate::types::WebhookAuthenticationType>().ok()
    }
    if builder.authentication_configuration.is_none() {
        builder.authentication_configuration = {
            let builder = crate::types::builders::WebhookAuthConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn action_configuration_property_correct_errors(
    mut builder: crate::types::builders::ActionConfigurationPropertyBuilder,
) -> crate::types::builders::ActionConfigurationPropertyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.required.is_none() {
        builder.required = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.secret.is_none() {
        builder.secret = Some(Default::default())
    }
    builder
}

pub(crate) fn action_type_property_correct_errors(
    mut builder: crate::types::builders::ActionTypePropertyBuilder,
) -> crate::types::builders::ActionTypePropertyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.optional.is_none() {
        builder.optional = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.no_echo.is_none() {
        builder.no_echo = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_session_credentials_correct_errors(
    mut builder: crate::types::builders::AwsSessionCredentialsBuilder,
) -> crate::types::builders::AwsSessionCredentialsBuilder {
    if builder.access_key_id.is_none() {
        builder.access_key_id = Some(Default::default())
    }
    if builder.secret_access_key.is_none() {
        builder.secret_access_key = Some(Default::default())
    }
    if builder.session_token.is_none() {
        builder.session_token = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_key_correct_errors(
    mut builder: crate::types::builders::EncryptionKeyBuilder,
) -> crate::types::builders::EncryptionKeyBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EncryptionKeyType>().ok()
    }
    builder
}

pub(crate) fn pipeline_trigger_declaration_correct_errors(
    mut builder: crate::types::builders::PipelineTriggerDeclarationBuilder,
) -> crate::types::builders::PipelineTriggerDeclarationBuilder {
    if builder.provider_type.is_none() {
        builder.provider_type = "no value was set".parse::<crate::types::PipelineTriggerProviderType>().ok()
    }
    if builder.git_configuration.is_none() {
        builder.git_configuration = {
            let builder = crate::types::builders::GitConfigurationBuilder::default();
            crate::serde_util::git_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn pipeline_variable_declaration_correct_errors(
    mut builder: crate::types::builders::PipelineVariableDeclarationBuilder,
) -> crate::types::builders::PipelineVariableDeclarationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn stage_declaration_correct_errors(
    mut builder: crate::types::builders::StageDeclarationBuilder,
) -> crate::types::builders::StageDeclarationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.actions.is_none() {
        builder.actions = Some(Default::default())
    }
    builder
}

pub(crate) fn stage_execution_correct_errors(
    mut builder: crate::types::builders::StageExecutionBuilder,
) -> crate::types::builders::StageExecutionBuilder {
    if builder.pipeline_execution_id.is_none() {
        builder.pipeline_execution_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StageExecutionStatus>().ok()
    }
    builder
}

pub(crate) fn git_configuration_correct_errors(
    mut builder: crate::types::builders::GitConfigurationBuilder,
) -> crate::types::builders::GitConfigurationBuilder {
    if builder.source_action_name.is_none() {
        builder.source_action_name = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_executor_configuration_correct_errors(
    mut builder: crate::types::builders::LambdaExecutorConfigurationBuilder,
) -> crate::types::builders::LambdaExecutorConfigurationBuilder {
    if builder.lambda_function_arn.is_none() {
        builder.lambda_function_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn source_revision_correct_errors(
    mut builder: crate::types::builders::SourceRevisionBuilder,
) -> crate::types::builders::SourceRevisionBuilder {
    if builder.action_name.is_none() {
        builder.action_name = Some(Default::default())
    }
    builder
}

pub(crate) fn webhook_filter_rule_correct_errors(
    mut builder: crate::types::builders::WebhookFilterRuleBuilder,
) -> crate::types::builders::WebhookFilterRuleBuilder {
    if builder.json_path.is_none() {
        builder.json_path = Some(Default::default())
    }
    builder
}

pub(crate) fn action_declaration_correct_errors(
    mut builder: crate::types::builders::ActionDeclarationBuilder,
) -> crate::types::builders::ActionDeclarationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.action_type_id.is_none() {
        builder.action_type_id = {
            let builder = crate::types::builders::ActionTypeIdBuilder::default();
            crate::serde_util::action_type_id_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn action_revision_correct_errors(
    mut builder: crate::types::builders::ActionRevisionBuilder,
) -> crate::types::builders::ActionRevisionBuilder {
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    if builder.revision_change_id.is_none() {
        builder.revision_change_id = Some(Default::default())
    }
    if builder.created.is_none() {
        builder.created = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn blocker_declaration_correct_errors(
    mut builder: crate::types::builders::BlockerDeclarationBuilder,
) -> crate::types::builders::BlockerDeclarationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::BlockerType>().ok()
    }
    builder
}

pub(crate) fn s3_artifact_location_correct_errors(
    mut builder: crate::types::builders::S3ArtifactLocationBuilder,
) -> crate::types::builders::S3ArtifactLocationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.object_key.is_none() {
        builder.object_key = Some(Default::default())
    }
    builder
}

pub(crate) fn input_artifact_correct_errors(
    mut builder: crate::types::builders::InputArtifactBuilder,
) -> crate::types::builders::InputArtifactBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn output_artifact_correct_errors(
    mut builder: crate::types::builders::OutputArtifactBuilder,
) -> crate::types::builders::OutputArtifactBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
