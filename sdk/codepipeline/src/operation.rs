// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Returns information about a specified job and whether that job has been received by
/// the job worker. Used for custom actions only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcknowledgeJob {
    _private: (),
}
impl AcknowledgeJob {
    /// Creates a new builder-style object to manufacture [`AcknowledgeJobInput`](crate::input::AcknowledgeJobInput)
    pub fn builder() -> crate::input::acknowledge_job_input::Builder {
        crate::input::acknowledge_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcknowledgeJob {
    type Output =
        std::result::Result<crate::output::AcknowledgeJobOutput, crate::error::AcknowledgeJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_acknowledge_job_error(response)
        } else {
            crate::operation_deser::parse_acknowledge_job_response(response)
        }
    }
}

/// <p>Confirms a job worker has received the specified job. Used for partner actions
/// only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcknowledgeThirdPartyJob {
    _private: (),
}
impl AcknowledgeThirdPartyJob {
    /// Creates a new builder-style object to manufacture [`AcknowledgeThirdPartyJobInput`](crate::input::AcknowledgeThirdPartyJobInput)
    pub fn builder() -> crate::input::acknowledge_third_party_job_input::Builder {
        crate::input::acknowledge_third_party_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcknowledgeThirdPartyJob {
    type Output = std::result::Result<
        crate::output::AcknowledgeThirdPartyJobOutput,
        crate::error::AcknowledgeThirdPartyJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_acknowledge_third_party_job_error(response)
        } else {
            crate::operation_deser::parse_acknowledge_third_party_job_response(response)
        }
    }
}

/// <p>Creates a new custom action that can be used in all pipelines associated with the
/// AWS account. Only used for custom actions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCustomActionType {
    _private: (),
}
impl CreateCustomActionType {
    /// Creates a new builder-style object to manufacture [`CreateCustomActionTypeInput`](crate::input::CreateCustomActionTypeInput)
    pub fn builder() -> crate::input::create_custom_action_type_input::Builder {
        crate::input::create_custom_action_type_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCustomActionType {
    type Output = std::result::Result<
        crate::output::CreateCustomActionTypeOutput,
        crate::error::CreateCustomActionTypeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_custom_action_type_error(response)
        } else {
            crate::operation_deser::parse_create_custom_action_type_response(response)
        }
    }
}

/// <p>Creates a pipeline.</p>
/// <note>
/// <p>In the pipeline structure, you must include either <code>artifactStore</code>
/// or <code>artifactStores</code> in your pipeline, but you cannot use both. If you
/// create a cross-region action in your pipeline, you must use
/// <code>artifactStores</code>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePipeline {
    _private: (),
}
impl CreatePipeline {
    /// Creates a new builder-style object to manufacture [`CreatePipelineInput`](crate::input::CreatePipelineInput)
    pub fn builder() -> crate::input::create_pipeline_input::Builder {
        crate::input::create_pipeline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePipeline {
    type Output =
        std::result::Result<crate::output::CreatePipelineOutput, crate::error::CreatePipelineError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_pipeline_error(response)
        } else {
            crate::operation_deser::parse_create_pipeline_response(response)
        }
    }
}

/// <p>Marks a custom action as deleted. <code>PollForJobs</code> for the custom action
/// fails after the action is marked for deletion. Used for custom actions only.</p>
/// <important>
/// <p>To re-create a custom action after it has been deleted you must use a string in
/// the version field that has never been used before. This string can be an incremented
/// version number, for example. To restore a deleted custom action, use a JSON file
/// that is identical to the deleted action, including the original string in the
/// version field.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCustomActionType {
    _private: (),
}
impl DeleteCustomActionType {
    /// Creates a new builder-style object to manufacture [`DeleteCustomActionTypeInput`](crate::input::DeleteCustomActionTypeInput)
    pub fn builder() -> crate::input::delete_custom_action_type_input::Builder {
        crate::input::delete_custom_action_type_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteCustomActionType {
    type Output = std::result::Result<
        crate::output::DeleteCustomActionTypeOutput,
        crate::error::DeleteCustomActionTypeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_custom_action_type_error(response)
        } else {
            crate::operation_deser::parse_delete_custom_action_type_response(response)
        }
    }
}

/// <p>Deletes the specified pipeline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePipeline {
    _private: (),
}
impl DeletePipeline {
    /// Creates a new builder-style object to manufacture [`DeletePipelineInput`](crate::input::DeletePipelineInput)
    pub fn builder() -> crate::input::delete_pipeline_input::Builder {
        crate::input::delete_pipeline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePipeline {
    type Output =
        std::result::Result<crate::output::DeletePipelineOutput, crate::error::DeletePipelineError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_pipeline_error(response)
        } else {
            crate::operation_deser::parse_delete_pipeline_response(response)
        }
    }
}

/// <p>Deletes a previously created webhook by name. Deleting the webhook stops AWS
/// CodePipeline from starting a pipeline every time an external event occurs. The API
/// returns successfully when trying to delete a webhook that is already deleted. If a
/// deleted webhook is re-created by calling PutWebhook with the same name, it will have a
/// different URL.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWebhook {
    _private: (),
}
impl DeleteWebhook {
    /// Creates a new builder-style object to manufacture [`DeleteWebhookInput`](crate::input::DeleteWebhookInput)
    pub fn builder() -> crate::input::delete_webhook_input::Builder {
        crate::input::delete_webhook_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteWebhook {
    type Output =
        std::result::Result<crate::output::DeleteWebhookOutput, crate::error::DeleteWebhookError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_webhook_error(response)
        } else {
            crate::operation_deser::parse_delete_webhook_response(response)
        }
    }
}

/// <p>Removes the connection between the webhook that was created by CodePipeline and the
/// external tool with events to be detected. Currently supported only for webhooks that
/// target an action type of GitHub.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterWebhookWithThirdParty {
    _private: (),
}
impl DeregisterWebhookWithThirdParty {
    /// Creates a new builder-style object to manufacture [`DeregisterWebhookWithThirdPartyInput`](crate::input::DeregisterWebhookWithThirdPartyInput)
    pub fn builder() -> crate::input::deregister_webhook_with_third_party_input::Builder {
        crate::input::deregister_webhook_with_third_party_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterWebhookWithThirdParty {
    type Output = std::result::Result<
        crate::output::DeregisterWebhookWithThirdPartyOutput,
        crate::error::DeregisterWebhookWithThirdPartyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_webhook_with_third_party_error(response)
        } else {
            crate::operation_deser::parse_deregister_webhook_with_third_party_response(response)
        }
    }
}

/// <p>Prevents artifacts in a pipeline from transitioning to the next stage in the
/// pipeline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableStageTransition {
    _private: (),
}
impl DisableStageTransition {
    /// Creates a new builder-style object to manufacture [`DisableStageTransitionInput`](crate::input::DisableStageTransitionInput)
    pub fn builder() -> crate::input::disable_stage_transition_input::Builder {
        crate::input::disable_stage_transition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableStageTransition {
    type Output = std::result::Result<
        crate::output::DisableStageTransitionOutput,
        crate::error::DisableStageTransitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_stage_transition_error(response)
        } else {
            crate::operation_deser::parse_disable_stage_transition_response(response)
        }
    }
}

/// <p>Enables artifacts in a pipeline to transition to a stage in a pipeline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableStageTransition {
    _private: (),
}
impl EnableStageTransition {
    /// Creates a new builder-style object to manufacture [`EnableStageTransitionInput`](crate::input::EnableStageTransitionInput)
    pub fn builder() -> crate::input::enable_stage_transition_input::Builder {
        crate::input::enable_stage_transition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableStageTransition {
    type Output = std::result::Result<
        crate::output::EnableStageTransitionOutput,
        crate::error::EnableStageTransitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_stage_transition_error(response)
        } else {
            crate::operation_deser::parse_enable_stage_transition_response(response)
        }
    }
}

/// <p>Returns information about an action type created for an external provider, where the
/// action is to be used by customers of the external provider. The action can be created
/// with any supported integration model.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetActionType {
    _private: (),
}
impl GetActionType {
    /// Creates a new builder-style object to manufacture [`GetActionTypeInput`](crate::input::GetActionTypeInput)
    pub fn builder() -> crate::input::get_action_type_input::Builder {
        crate::input::get_action_type_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetActionType {
    type Output =
        std::result::Result<crate::output::GetActionTypeOutput, crate::error::GetActionTypeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_action_type_error(response)
        } else {
            crate::operation_deser::parse_get_action_type_response(response)
        }
    }
}

/// <p>Returns information about a job. Used for custom actions only.</p>
/// <important>
/// <p>When this API is called, AWS CodePipeline returns temporary credentials for the
/// S3 bucket used to store artifacts for the pipeline, if the action requires access to
/// that S3 bucket for input or output artifacts. This API also returns any secret
/// values defined for the action.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetJobDetails {
    _private: (),
}
impl GetJobDetails {
    /// Creates a new builder-style object to manufacture [`GetJobDetailsInput`](crate::input::GetJobDetailsInput)
    pub fn builder() -> crate::input::get_job_details_input::Builder {
        crate::input::get_job_details_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetJobDetails {
    type Output =
        std::result::Result<crate::output::GetJobDetailsOutput, crate::error::GetJobDetailsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_job_details_error(response)
        } else {
            crate::operation_deser::parse_get_job_details_response(response)
        }
    }
}

/// <p>Returns the metadata, structure, stages, and actions of a pipeline. Can be used to
/// return the entire structure of a pipeline in JSON format, which can then be modified and
/// used to update the pipeline structure with <a>UpdatePipeline</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPipeline {
    _private: (),
}
impl GetPipeline {
    /// Creates a new builder-style object to manufacture [`GetPipelineInput`](crate::input::GetPipelineInput)
    pub fn builder() -> crate::input::get_pipeline_input::Builder {
        crate::input::get_pipeline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPipeline {
    type Output =
        std::result::Result<crate::output::GetPipelineOutput, crate::error::GetPipelineError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_pipeline_error(response)
        } else {
            crate::operation_deser::parse_get_pipeline_response(response)
        }
    }
}

/// <p>Returns information about an execution of a pipeline, including details about
/// artifacts, the pipeline execution ID, and the name, version, and status of the
/// pipeline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPipelineExecution {
    _private: (),
}
impl GetPipelineExecution {
    /// Creates a new builder-style object to manufacture [`GetPipelineExecutionInput`](crate::input::GetPipelineExecutionInput)
    pub fn builder() -> crate::input::get_pipeline_execution_input::Builder {
        crate::input::get_pipeline_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPipelineExecution {
    type Output = std::result::Result<
        crate::output::GetPipelineExecutionOutput,
        crate::error::GetPipelineExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_pipeline_execution_error(response)
        } else {
            crate::operation_deser::parse_get_pipeline_execution_response(response)
        }
    }
}

/// <p>Returns information about the state of a pipeline, including the stages and
/// actions.</p>
/// <note>
/// <p>Values returned in the <code>revisionId</code> and <code>revisionUrl</code>
/// fields indicate the source revision information, such as the commit ID, for the
/// current state.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPipelineState {
    _private: (),
}
impl GetPipelineState {
    /// Creates a new builder-style object to manufacture [`GetPipelineStateInput`](crate::input::GetPipelineStateInput)
    pub fn builder() -> crate::input::get_pipeline_state_input::Builder {
        crate::input::get_pipeline_state_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPipelineState {
    type Output = std::result::Result<
        crate::output::GetPipelineStateOutput,
        crate::error::GetPipelineStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_pipeline_state_error(response)
        } else {
            crate::operation_deser::parse_get_pipeline_state_response(response)
        }
    }
}

/// <p>Requests the details of a job for a third party action. Used for partner actions
/// only.</p>
/// <important>
/// <p>When this API is called, AWS CodePipeline returns temporary credentials for the
/// S3 bucket used to store artifacts for the pipeline, if the action requires access to
/// that S3 bucket for input or output artifacts. This API also returns any secret
/// values defined for the action.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetThirdPartyJobDetails {
    _private: (),
}
impl GetThirdPartyJobDetails {
    /// Creates a new builder-style object to manufacture [`GetThirdPartyJobDetailsInput`](crate::input::GetThirdPartyJobDetailsInput)
    pub fn builder() -> crate::input::get_third_party_job_details_input::Builder {
        crate::input::get_third_party_job_details_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetThirdPartyJobDetails {
    type Output = std::result::Result<
        crate::output::GetThirdPartyJobDetailsOutput,
        crate::error::GetThirdPartyJobDetailsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_third_party_job_details_error(response)
        } else {
            crate::operation_deser::parse_get_third_party_job_details_response(response)
        }
    }
}

/// <p>Lists the action executions that have occurred in a pipeline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListActionExecutions {
    _private: (),
}
impl ListActionExecutions {
    /// Creates a new builder-style object to manufacture [`ListActionExecutionsInput`](crate::input::ListActionExecutionsInput)
    pub fn builder() -> crate::input::list_action_executions_input::Builder {
        crate::input::list_action_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListActionExecutions {
    type Output = std::result::Result<
        crate::output::ListActionExecutionsOutput,
        crate::error::ListActionExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_action_executions_error(response)
        } else {
            crate::operation_deser::parse_list_action_executions_response(response)
        }
    }
}

/// <p>Gets a summary of all AWS CodePipeline action types associated with your
/// account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListActionTypes {
    _private: (),
}
impl ListActionTypes {
    /// Creates a new builder-style object to manufacture [`ListActionTypesInput`](crate::input::ListActionTypesInput)
    pub fn builder() -> crate::input::list_action_types_input::Builder {
        crate::input::list_action_types_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListActionTypes {
    type Output = std::result::Result<
        crate::output::ListActionTypesOutput,
        crate::error::ListActionTypesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_action_types_error(response)
        } else {
            crate::operation_deser::parse_list_action_types_response(response)
        }
    }
}

/// <p>Gets a summary of the most recent executions for a pipeline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelineExecutions {
    _private: (),
}
impl ListPipelineExecutions {
    /// Creates a new builder-style object to manufacture [`ListPipelineExecutionsInput`](crate::input::ListPipelineExecutionsInput)
    pub fn builder() -> crate::input::list_pipeline_executions_input::Builder {
        crate::input::list_pipeline_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPipelineExecutions {
    type Output = std::result::Result<
        crate::output::ListPipelineExecutionsOutput,
        crate::error::ListPipelineExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_pipeline_executions_error(response)
        } else {
            crate::operation_deser::parse_list_pipeline_executions_response(response)
        }
    }
}

/// <p>Gets a summary of all of the pipelines associated with your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPipelines {
    _private: (),
}
impl ListPipelines {
    /// Creates a new builder-style object to manufacture [`ListPipelinesInput`](crate::input::ListPipelinesInput)
    pub fn builder() -> crate::input::list_pipelines_input::Builder {
        crate::input::list_pipelines_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPipelines {
    type Output =
        std::result::Result<crate::output::ListPipelinesOutput, crate::error::ListPipelinesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_pipelines_error(response)
        } else {
            crate::operation_deser::parse_list_pipelines_response(response)
        }
    }
}

/// <p>Gets the set of key-value pairs (metadata) that are used to manage the
/// resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Gets a listing of all the webhooks in this AWS Region for this account. The output
/// lists all webhooks and includes the webhook URL and ARN and the configuration for each
/// webhook.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListWebhooks {
    _private: (),
}
impl ListWebhooks {
    /// Creates a new builder-style object to manufacture [`ListWebhooksInput`](crate::input::ListWebhooksInput)
    pub fn builder() -> crate::input::list_webhooks_input::Builder {
        crate::input::list_webhooks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListWebhooks {
    type Output =
        std::result::Result<crate::output::ListWebhooksOutput, crate::error::ListWebhooksError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_webhooks_error(response)
        } else {
            crate::operation_deser::parse_list_webhooks_response(response)
        }
    }
}

/// <p>Returns information about any jobs for AWS CodePipeline to act on.
/// <code>PollForJobs</code> is valid only for action types with "Custom" in the owner
/// field. If the action type contains "AWS" or "ThirdParty" in the owner field, the
/// <code>PollForJobs</code> action returns an error.</p>
/// <important>
/// <p>When this API is called, AWS CodePipeline returns temporary credentials for the
/// S3 bucket used to store artifacts for the pipeline, if the action requires access to
/// that S3 bucket for input or output artifacts. This API also returns any secret
/// values defined for the action.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PollForJobs {
    _private: (),
}
impl PollForJobs {
    /// Creates a new builder-style object to manufacture [`PollForJobsInput`](crate::input::PollForJobsInput)
    pub fn builder() -> crate::input::poll_for_jobs_input::Builder {
        crate::input::poll_for_jobs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PollForJobs {
    type Output =
        std::result::Result<crate::output::PollForJobsOutput, crate::error::PollForJobsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_poll_for_jobs_error(response)
        } else {
            crate::operation_deser::parse_poll_for_jobs_response(response)
        }
    }
}

/// <p>Determines whether there are any third party jobs for a job worker to act on. Used
/// for partner actions only.</p>
/// <important>
/// <p>When this API is called, AWS CodePipeline returns temporary credentials for the
/// S3 bucket used to store artifacts for the pipeline, if the action requires access to
/// that S3 bucket for input or output artifacts.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PollForThirdPartyJobs {
    _private: (),
}
impl PollForThirdPartyJobs {
    /// Creates a new builder-style object to manufacture [`PollForThirdPartyJobsInput`](crate::input::PollForThirdPartyJobsInput)
    pub fn builder() -> crate::input::poll_for_third_party_jobs_input::Builder {
        crate::input::poll_for_third_party_jobs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PollForThirdPartyJobs {
    type Output = std::result::Result<
        crate::output::PollForThirdPartyJobsOutput,
        crate::error::PollForThirdPartyJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_poll_for_third_party_jobs_error(response)
        } else {
            crate::operation_deser::parse_poll_for_third_party_jobs_response(response)
        }
    }
}

/// <p>Provides information to AWS CodePipeline about new revisions to a source.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutActionRevision {
    _private: (),
}
impl PutActionRevision {
    /// Creates a new builder-style object to manufacture [`PutActionRevisionInput`](crate::input::PutActionRevisionInput)
    pub fn builder() -> crate::input::put_action_revision_input::Builder {
        crate::input::put_action_revision_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutActionRevision {
    type Output = std::result::Result<
        crate::output::PutActionRevisionOutput,
        crate::error::PutActionRevisionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_action_revision_error(response)
        } else {
            crate::operation_deser::parse_put_action_revision_response(response)
        }
    }
}

/// <p>Provides the response to a manual approval request to AWS CodePipeline. Valid
/// responses include Approved and Rejected.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutApprovalResult {
    _private: (),
}
impl PutApprovalResult {
    /// Creates a new builder-style object to manufacture [`PutApprovalResultInput`](crate::input::PutApprovalResultInput)
    pub fn builder() -> crate::input::put_approval_result_input::Builder {
        crate::input::put_approval_result_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutApprovalResult {
    type Output = std::result::Result<
        crate::output::PutApprovalResultOutput,
        crate::error::PutApprovalResultError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_approval_result_error(response)
        } else {
            crate::operation_deser::parse_put_approval_result_response(response)
        }
    }
}

/// <p>Represents the failure of a job as returned to the pipeline by a job worker. Used
/// for custom actions only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutJobFailureResult {
    _private: (),
}
impl PutJobFailureResult {
    /// Creates a new builder-style object to manufacture [`PutJobFailureResultInput`](crate::input::PutJobFailureResultInput)
    pub fn builder() -> crate::input::put_job_failure_result_input::Builder {
        crate::input::put_job_failure_result_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutJobFailureResult {
    type Output = std::result::Result<
        crate::output::PutJobFailureResultOutput,
        crate::error::PutJobFailureResultError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_job_failure_result_error(response)
        } else {
            crate::operation_deser::parse_put_job_failure_result_response(response)
        }
    }
}

/// <p>Represents the success of a job as returned to the pipeline by a job worker. Used
/// for custom actions only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutJobSuccessResult {
    _private: (),
}
impl PutJobSuccessResult {
    /// Creates a new builder-style object to manufacture [`PutJobSuccessResultInput`](crate::input::PutJobSuccessResultInput)
    pub fn builder() -> crate::input::put_job_success_result_input::Builder {
        crate::input::put_job_success_result_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutJobSuccessResult {
    type Output = std::result::Result<
        crate::output::PutJobSuccessResultOutput,
        crate::error::PutJobSuccessResultError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_job_success_result_error(response)
        } else {
            crate::operation_deser::parse_put_job_success_result_response(response)
        }
    }
}

/// <p>Represents the failure of a third party job as returned to the pipeline by a job
/// worker. Used for partner actions only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutThirdPartyJobFailureResult {
    _private: (),
}
impl PutThirdPartyJobFailureResult {
    /// Creates a new builder-style object to manufacture [`PutThirdPartyJobFailureResultInput`](crate::input::PutThirdPartyJobFailureResultInput)
    pub fn builder() -> crate::input::put_third_party_job_failure_result_input::Builder {
        crate::input::put_third_party_job_failure_result_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutThirdPartyJobFailureResult {
    type Output = std::result::Result<
        crate::output::PutThirdPartyJobFailureResultOutput,
        crate::error::PutThirdPartyJobFailureResultError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_third_party_job_failure_result_error(response)
        } else {
            crate::operation_deser::parse_put_third_party_job_failure_result_response(response)
        }
    }
}

/// <p>Represents the success of a third party job as returned to the pipeline by a job
/// worker. Used for partner actions only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutThirdPartyJobSuccessResult {
    _private: (),
}
impl PutThirdPartyJobSuccessResult {
    /// Creates a new builder-style object to manufacture [`PutThirdPartyJobSuccessResultInput`](crate::input::PutThirdPartyJobSuccessResultInput)
    pub fn builder() -> crate::input::put_third_party_job_success_result_input::Builder {
        crate::input::put_third_party_job_success_result_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutThirdPartyJobSuccessResult {
    type Output = std::result::Result<
        crate::output::PutThirdPartyJobSuccessResultOutput,
        crate::error::PutThirdPartyJobSuccessResultError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_third_party_job_success_result_error(response)
        } else {
            crate::operation_deser::parse_put_third_party_job_success_result_response(response)
        }
    }
}

/// <p>Defines a webhook and returns a unique webhook URL generated by CodePipeline. This
/// URL can be supplied to third party source hosting providers to call every time there's a
/// code change. When CodePipeline receives a POST request on this URL, the pipeline defined
/// in the webhook is started as long as the POST request satisfied the authentication and
/// filtering requirements supplied when defining the webhook. RegisterWebhookWithThirdParty
/// and DeregisterWebhookWithThirdParty APIs can be used to automatically configure
/// supported third parties to call the generated webhook URL.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutWebhook {
    _private: (),
}
impl PutWebhook {
    /// Creates a new builder-style object to manufacture [`PutWebhookInput`](crate::input::PutWebhookInput)
    pub fn builder() -> crate::input::put_webhook_input::Builder {
        crate::input::put_webhook_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutWebhook {
    type Output =
        std::result::Result<crate::output::PutWebhookOutput, crate::error::PutWebhookError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_webhook_error(response)
        } else {
            crate::operation_deser::parse_put_webhook_response(response)
        }
    }
}

/// <p>Configures a connection between the webhook that was created and the external tool
/// with events to be detected.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterWebhookWithThirdParty {
    _private: (),
}
impl RegisterWebhookWithThirdParty {
    /// Creates a new builder-style object to manufacture [`RegisterWebhookWithThirdPartyInput`](crate::input::RegisterWebhookWithThirdPartyInput)
    pub fn builder() -> crate::input::register_webhook_with_third_party_input::Builder {
        crate::input::register_webhook_with_third_party_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterWebhookWithThirdParty {
    type Output = std::result::Result<
        crate::output::RegisterWebhookWithThirdPartyOutput,
        crate::error::RegisterWebhookWithThirdPartyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_webhook_with_third_party_error(response)
        } else {
            crate::operation_deser::parse_register_webhook_with_third_party_response(response)
        }
    }
}

/// <p>Resumes the pipeline execution by retrying the last failed actions in a stage. You
/// can retry a stage immediately if any of the actions in the stage fail. When you retry,
/// all actions that are still in progress continue working, and failed actions are
/// triggered again.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RetryStageExecution {
    _private: (),
}
impl RetryStageExecution {
    /// Creates a new builder-style object to manufacture [`RetryStageExecutionInput`](crate::input::RetryStageExecutionInput)
    pub fn builder() -> crate::input::retry_stage_execution_input::Builder {
        crate::input::retry_stage_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RetryStageExecution {
    type Output = std::result::Result<
        crate::output::RetryStageExecutionOutput,
        crate::error::RetryStageExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_retry_stage_execution_error(response)
        } else {
            crate::operation_deser::parse_retry_stage_execution_response(response)
        }
    }
}

/// <p>Starts the specified pipeline. Specifically, it begins processing the latest commit
/// to the source location specified as part of the pipeline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartPipelineExecution {
    _private: (),
}
impl StartPipelineExecution {
    /// Creates a new builder-style object to manufacture [`StartPipelineExecutionInput`](crate::input::StartPipelineExecutionInput)
    pub fn builder() -> crate::input::start_pipeline_execution_input::Builder {
        crate::input::start_pipeline_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartPipelineExecution {
    type Output = std::result::Result<
        crate::output::StartPipelineExecutionOutput,
        crate::error::StartPipelineExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_pipeline_execution_error(response)
        } else {
            crate::operation_deser::parse_start_pipeline_execution_response(response)
        }
    }
}

/// <p>Stops the specified pipeline execution. You choose to either stop the pipeline
/// execution by completing in-progress actions without starting subsequent actions, or by
/// abandoning in-progress actions. While completing or abandoning in-progress actions, the
/// pipeline execution is in a <code>Stopping</code> state. After all in-progress actions
/// are completed or abandoned, the pipeline execution is in a <code>Stopped</code>
/// state.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopPipelineExecution {
    _private: (),
}
impl StopPipelineExecution {
    /// Creates a new builder-style object to manufacture [`StopPipelineExecutionInput`](crate::input::StopPipelineExecutionInput)
    pub fn builder() -> crate::input::stop_pipeline_execution_input::Builder {
        crate::input::stop_pipeline_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopPipelineExecution {
    type Output = std::result::Result<
        crate::output::StopPipelineExecutionOutput,
        crate::error::StopPipelineExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_pipeline_execution_error(response)
        } else {
            crate::operation_deser::parse_stop_pipeline_execution_response(response)
        }
    }
}

/// <p>Adds to or modifies the tags of the given resource. Tags are metadata that can be used
/// to manage a resource. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes tags from an AWS resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates an action type that was created with any supported integration model, where
/// the action type is to be used by customers of the action type provider. Use a JSON file
/// with the action definition and <code>UpdateActionType</code> to provide the full
/// structure.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateActionType {
    _private: (),
}
impl UpdateActionType {
    /// Creates a new builder-style object to manufacture [`UpdateActionTypeInput`](crate::input::UpdateActionTypeInput)
    pub fn builder() -> crate::input::update_action_type_input::Builder {
        crate::input::update_action_type_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateActionType {
    type Output = std::result::Result<
        crate::output::UpdateActionTypeOutput,
        crate::error::UpdateActionTypeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_action_type_error(response)
        } else {
            crate::operation_deser::parse_update_action_type_response(response)
        }
    }
}

/// <p>Updates a specified pipeline with edits or changes to its structure. Use a JSON
/// file with the pipeline structure and <code>UpdatePipeline</code> to provide the full
/// structure of the pipeline. Updating the pipeline increases the version number of the
/// pipeline by 1.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePipeline {
    _private: (),
}
impl UpdatePipeline {
    /// Creates a new builder-style object to manufacture [`UpdatePipelineInput`](crate::input::UpdatePipelineInput)
    pub fn builder() -> crate::input::update_pipeline_input::Builder {
        crate::input::update_pipeline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePipeline {
    type Output =
        std::result::Result<crate::output::UpdatePipelineOutput, crate::error::UpdatePipelineError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_pipeline_error(response)
        } else {
            crate::operation_deser::parse_update_pipeline_response(response)
        }
    }
}
