// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_custom_action_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_custom_action_type::CreateCustomActionTypeInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.category {
        object.key("category").string(var_1.as_str());
    }
    if let Some(var_2) = &input.provider {
        object.key("provider").string(var_2.as_str());
    }
    if let Some(var_3) = &input.version {
        object.key("version").string(var_3.as_str());
    }
    if let Some(var_4) = &input.settings {
        #[allow(unused_mut)]
        let mut object_5 = object.key("settings").start_object();
        crate::protocol_serde::shape_action_type_settings::ser_action_type_settings(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.configuration_properties {
        let mut array_7 = object.key("configurationProperties").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_action_configuration_property::ser_action_configuration_property(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.input_artifact_details {
        #[allow(unused_mut)]
        let mut object_11 = object.key("inputArtifactDetails").start_object();
        crate::protocol_serde::shape_artifact_details::ser_artifact_details(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.output_artifact_details {
        #[allow(unused_mut)]
        let mut object_13 = object.key("outputArtifactDetails").start_object();
        crate::protocol_serde::shape_artifact_details::ser_artifact_details(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("tags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
