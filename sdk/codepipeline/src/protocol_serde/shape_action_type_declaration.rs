// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_action_type_declaration<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ActionTypeDeclaration>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ActionTypeDeclarationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "description" => {
                                builder = builder.set_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "executor" => {
                                builder = builder.set_executor(
                                    crate::protocol_serde::shape_action_type_executor::de_action_type_executor(tokens)?
                                );
                            }
                            "id" => {
                                builder = builder.set_id(
                                    crate::protocol_serde::shape_action_type_identifier::de_action_type_identifier(tokens)?
                                );
                            }
                            "inputArtifactDetails" => {
                                builder = builder.set_input_artifact_details(
                                    crate::protocol_serde::shape_action_type_artifact_details::de_action_type_artifact_details(tokens)?
                                );
                            }
                            "outputArtifactDetails" => {
                                builder = builder.set_output_artifact_details(
                                    crate::protocol_serde::shape_action_type_artifact_details::de_action_type_artifact_details(tokens)?
                                );
                            }
                            "permissions" => {
                                builder = builder.set_permissions(
                                    crate::protocol_serde::shape_action_type_permissions::de_action_type_permissions(tokens)?
                                );
                            }
                            "properties" => {
                                builder = builder.set_properties(
                                    crate::protocol_serde::shape_action_type_properties::de_action_type_properties(tokens)?
                                );
                            }
                            "urls" => {
                                builder = builder.set_urls(
                                    crate::protocol_serde::shape_action_type_urls::de_action_type_urls(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_action_type_declaration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ActionTypeDeclaration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.executor {
        #[allow(unused_mut)]
        let mut object_3 = object.key("executor").start_object();
        crate::protocol_serde::shape_action_type_executor::ser_action_type_executor(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.id {
        #[allow(unused_mut)]
        let mut object_5 = object.key("id").start_object();
        crate::protocol_serde::shape_action_type_identifier::ser_action_type_identifier(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.input_artifact_details {
        #[allow(unused_mut)]
        let mut object_7 = object.key("inputArtifactDetails").start_object();
        crate::protocol_serde::shape_action_type_artifact_details::ser_action_type_artifact_details(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.output_artifact_details {
        #[allow(unused_mut)]
        let mut object_9 = object.key("outputArtifactDetails").start_object();
        crate::protocol_serde::shape_action_type_artifact_details::ser_action_type_artifact_details(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.permissions {
        #[allow(unused_mut)]
        let mut object_11 = object.key("permissions").start_object();
        crate::protocol_serde::shape_action_type_permissions::ser_action_type_permissions(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.properties {
        let mut array_13 = object.key("properties").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_action_type_property::ser_action_type_property(
                    &mut object_15,
                    item_14,
                )?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.urls {
        #[allow(unused_mut)]
        let mut object_17 = object.key("urls").start_object();
        crate::protocol_serde::shape_action_type_urls::ser_action_type_urls(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    Ok(())
}
