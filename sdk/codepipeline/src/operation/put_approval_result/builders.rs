// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_approval_result::_put_approval_result_output::PutApprovalResultOutputBuilder;

pub use crate::operation::put_approval_result::_put_approval_result_input::PutApprovalResultInputBuilder;

/// Fluent builder constructing a request to `PutApprovalResult`.
///
/// <p>Provides the response to a manual approval request to AWS CodePipeline. Valid responses include Approved and Rejected.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutApprovalResultFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_approval_result::builders::PutApprovalResultInputBuilder,
}
impl PutApprovalResultFluentBuilder {
    /// Creates a new `PutApprovalResult`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_approval_result::PutApprovalResult,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_approval_result::PutApprovalResultError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_approval_result::PutApprovalResultOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_approval_result::PutApprovalResultError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the pipeline that contains the action. </p>
    pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p>The name of the pipeline that contains the action. </p>
    pub fn set_pipeline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
    /// <p>The name of the stage that contains the action.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stage_name(input.into());
        self
    }
    /// <p>The name of the stage that contains the action.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stage_name(input);
        self
    }
    /// <p>The name of the action for which approval is requested.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_name(input.into());
        self
    }
    /// <p>The name of the action for which approval is requested.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_name(input);
        self
    }
    /// <p>Represents information about the result of the approval request.</p>
    pub fn result(mut self, input: crate::types::ApprovalResult) -> Self {
        self.inner = self.inner.result(input);
        self
    }
    /// <p>Represents information about the result of the approval request.</p>
    pub fn set_result(mut self, input: std::option::Option<crate::types::ApprovalResult>) -> Self {
        self.inner = self.inner.set_result(input);
        self
    }
    /// <p>The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <code>GetPipelineState</code> action. It is used to validate that the approval request corresponding to this token is still valid.</p>
    pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.token(input.into());
        self
    }
    /// <p>The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <code>GetPipelineState</code> action. It is used to validate that the approval request corresponding to this token is still valid.</p>
    pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_token(input);
        self
    }
}
