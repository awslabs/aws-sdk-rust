// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>PollForThirdPartyJobs</code> action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PollForThirdPartyJobsInput {
    /// <p>Represents information about an action type.</p>
    pub action_type_id: ::std::option::Option<crate::types::ActionTypeId>,
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub max_batch_size: ::std::option::Option<i32>,
}
impl PollForThirdPartyJobsInput {
    /// <p>Represents information about an action type.</p>
    pub fn action_type_id(&self) -> ::std::option::Option<&crate::types::ActionTypeId> {
        self.action_type_id.as_ref()
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn max_batch_size(&self) -> ::std::option::Option<i32> {
        self.max_batch_size
    }
}
impl PollForThirdPartyJobsInput {
    /// Creates a new builder-style object to manufacture [`PollForThirdPartyJobsInput`](crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsInput).
    pub fn builder() -> crate::operation::poll_for_third_party_jobs::builders::PollForThirdPartyJobsInputBuilder {
        crate::operation::poll_for_third_party_jobs::builders::PollForThirdPartyJobsInputBuilder::default()
    }
}

/// A builder for [`PollForThirdPartyJobsInput`](crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PollForThirdPartyJobsInputBuilder {
    pub(crate) action_type_id: ::std::option::Option<crate::types::ActionTypeId>,
    pub(crate) max_batch_size: ::std::option::Option<i32>,
}
impl PollForThirdPartyJobsInputBuilder {
    /// <p>Represents information about an action type.</p>
    /// This field is required.
    pub fn action_type_id(mut self, input: crate::types::ActionTypeId) -> Self {
        self.action_type_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn set_action_type_id(mut self, input: ::std::option::Option<crate::types::ActionTypeId>) -> Self {
        self.action_type_id = input;
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn get_action_type_id(&self) -> &::std::option::Option<crate::types::ActionTypeId> {
        &self.action_type_id
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn max_batch_size(mut self, input: i32) -> Self {
        self.max_batch_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn set_max_batch_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_batch_size = input;
        self
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn get_max_batch_size(&self) -> &::std::option::Option<i32> {
        &self.max_batch_size
    }
    /// Consumes the builder and constructs a [`PollForThirdPartyJobsInput`](crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsInput {
            action_type_id: self.action_type_id,
            max_batch_size: self.max_batch_size,
        })
    }
}
