// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>ListActionTypes</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListActionTypesInput {
    /// <p>Filters the list of action types to those created by a specified entity.</p>
    #[doc(hidden)]
    pub action_owner_filter: std::option::Option<crate::types::ActionOwner>,
    /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The Region to filter on for the list of action types.</p>
    #[doc(hidden)]
    pub region_filter: std::option::Option<std::string::String>,
}
impl ListActionTypesInput {
    /// <p>Filters the list of action types to those created by a specified entity.</p>
    pub fn action_owner_filter(&self) -> std::option::Option<&crate::types::ActionOwner> {
        self.action_owner_filter.as_ref()
    }
    /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The Region to filter on for the list of action types.</p>
    pub fn region_filter(&self) -> std::option::Option<&str> {
        self.region_filter.as_deref()
    }
}
impl ListActionTypesInput {
    /// Creates a new builder-style object to manufacture [`ListActionTypesInput`](crate::operation::list_action_types::ListActionTypesInput).
    pub fn builder() -> crate::operation::list_action_types::builders::ListActionTypesInputBuilder {
        crate::operation::list_action_types::builders::ListActionTypesInputBuilder::default()
    }
}

/// A builder for [`ListActionTypesInput`](crate::operation::list_action_types::ListActionTypesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListActionTypesInputBuilder {
    pub(crate) action_owner_filter: std::option::Option<crate::types::ActionOwner>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) region_filter: std::option::Option<std::string::String>,
}
impl ListActionTypesInputBuilder {
    /// <p>Filters the list of action types to those created by a specified entity.</p>
    pub fn action_owner_filter(mut self, input: crate::types::ActionOwner) -> Self {
        self.action_owner_filter = Some(input);
        self
    }
    /// <p>Filters the list of action types to those created by a specified entity.</p>
    pub fn set_action_owner_filter(
        mut self,
        input: std::option::Option<crate::types::ActionOwner>,
    ) -> Self {
        self.action_owner_filter = input;
        self
    }
    /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The Region to filter on for the list of action types.</p>
    pub fn region_filter(mut self, input: impl Into<std::string::String>) -> Self {
        self.region_filter = Some(input.into());
        self
    }
    /// <p>The Region to filter on for the list of action types.</p>
    pub fn set_region_filter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`ListActionTypesInput`](crate::operation::list_action_types::ListActionTypesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_action_types::ListActionTypesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_action_types::ListActionTypesInput {
            action_owner_filter: self.action_owner_filter,
            next_token: self.next_token,
            region_filter: self.region_filter,
        })
    }
}
