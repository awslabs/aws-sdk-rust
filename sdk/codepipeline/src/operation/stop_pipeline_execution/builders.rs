// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::stop_pipeline_execution::_stop_pipeline_execution_output::StopPipelineExecutionOutputBuilder;

pub use crate::operation::stop_pipeline_execution::_stop_pipeline_execution_input::StopPipelineExecutionInputBuilder;

impl StopPipelineExecutionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::stop_pipeline_execution::StopPipelineExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_pipeline_execution::StopPipelineExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.stop_pipeline_execution();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StopPipelineExecution`.
///
/// <p>Stops the specified pipeline execution. You choose to either stop the pipeline execution by completing in-progress actions without starting subsequent actions, or by abandoning in-progress actions. While completing or abandoning in-progress actions, the pipeline execution is in a <code>Stopping</code> state. After all in-progress actions are completed or abandoned, the pipeline execution is in a <code>Stopped</code> state.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StopPipelineExecutionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::stop_pipeline_execution::builders::StopPipelineExecutionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::stop_pipeline_execution::StopPipelineExecutionOutput,
        crate::operation::stop_pipeline_execution::StopPipelineExecutionError,
    > for StopPipelineExecutionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::stop_pipeline_execution::StopPipelineExecutionOutput,
            crate::operation::stop_pipeline_execution::StopPipelineExecutionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StopPipelineExecutionFluentBuilder {
    /// Creates a new `StopPipelineExecution`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StopPipelineExecution as a reference.
    pub fn as_input(&self) -> &crate::operation::stop_pipeline_execution::builders::StopPipelineExecutionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::stop_pipeline_execution::StopPipelineExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_pipeline_execution::StopPipelineExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::stop_pipeline_execution::StopPipelineExecution::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::stop_pipeline_execution::StopPipelineExecution::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::stop_pipeline_execution::StopPipelineExecutionOutput,
        crate::operation::stop_pipeline_execution::StopPipelineExecutionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the pipeline to stop.</p>
    pub fn pipeline_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p>The name of the pipeline to stop.</p>
    pub fn set_pipeline_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
    /// <p>The name of the pipeline to stop.</p>
    pub fn get_pipeline_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_pipeline_name()
    }
    /// <p>The ID of the pipeline execution to be stopped in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId.</p>
    pub fn pipeline_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.pipeline_execution_id(input.into());
        self
    }
    /// <p>The ID of the pipeline execution to be stopped in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId.</p>
    pub fn set_pipeline_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_execution_id(input);
        self
    }
    /// <p>The ID of the pipeline execution to be stopped in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId.</p>
    pub fn get_pipeline_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_pipeline_execution_id()
    }
    /// <p>Use this option to stop the pipeline execution by abandoning, rather than finishing, in-progress actions.</p> <note>
    /// <p>This option can lead to failed or out-of-sequence tasks.</p>
    /// </note>
    pub fn abandon(mut self, input: bool) -> Self {
        self.inner = self.inner.abandon(input);
        self
    }
    /// <p>Use this option to stop the pipeline execution by abandoning, rather than finishing, in-progress actions.</p> <note>
    /// <p>This option can lead to failed or out-of-sequence tasks.</p>
    /// </note>
    pub fn set_abandon(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_abandon(input);
        self
    }
    /// <p>Use this option to stop the pipeline execution by abandoning, rather than finishing, in-progress actions.</p> <note>
    /// <p>This option can lead to failed or out-of-sequence tasks.</p>
    /// </note>
    pub fn get_abandon(&self) -> &::std::option::Option<bool> {
        self.inner.get_abandon()
    }
    /// <p>Use this option to enter comments, such as the reason the pipeline was stopped.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.reason(input.into());
        self
    }
    /// <p>Use this option to enter comments, such as the reason the pipeline was stopped.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
    /// <p>Use this option to enter comments, such as the reason the pipeline was stopped.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_reason()
    }
}
