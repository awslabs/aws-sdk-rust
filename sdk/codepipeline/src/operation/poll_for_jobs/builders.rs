// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::poll_for_jobs::_poll_for_jobs_output::PollForJobsOutputBuilder;

pub use crate::operation::poll_for_jobs::_poll_for_jobs_input::PollForJobsInputBuilder;

impl crate::operation::poll_for_jobs::builders::PollForJobsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::poll_for_jobs::PollForJobsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::poll_for_jobs::PollForJobsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.poll_for_jobs();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PollForJobs`.
///
/// <p>Returns information about any jobs for CodePipeline to act on. <code>PollForJobs</code> is valid only for action types with "Custom" in the owner field. If the action type contains <code>AWS</code> or <code>ThirdParty</code> in the owner field, the <code>PollForJobs</code> action returns an error.</p><important>
/// <p>When this API is called, CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts. This API also returns any secret values defined for the action.</p>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PollForJobsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::poll_for_jobs::builders::PollForJobsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::poll_for_jobs::PollForJobsOutput,
        crate::operation::poll_for_jobs::PollForJobsError,
    > for PollForJobsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::poll_for_jobs::PollForJobsOutput,
            crate::operation::poll_for_jobs::PollForJobsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PollForJobsFluentBuilder {
    /// Creates a new `PollForJobs`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PollForJobs as a reference.
    pub fn as_input(&self) -> &crate::operation::poll_for_jobs::builders::PollForJobsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::poll_for_jobs::PollForJobsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::poll_for_jobs::PollForJobsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::poll_for_jobs::PollForJobs::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::poll_for_jobs::PollForJobs::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::poll_for_jobs::PollForJobsOutput,
        crate::operation::poll_for_jobs::PollForJobsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn action_type_id(mut self, input: crate::types::ActionTypeId) -> Self {
        self.inner = self.inner.action_type_id(input);
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn set_action_type_id(mut self, input: ::std::option::Option<crate::types::ActionTypeId>) -> Self {
        self.inner = self.inner.set_action_type_id(input);
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn get_action_type_id(&self) -> &::std::option::Option<crate::types::ActionTypeId> {
        self.inner.get_action_type_id()
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn max_batch_size(mut self, input: i32) -> Self {
        self.inner = self.inner.max_batch_size(input);
        self
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn set_max_batch_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_batch_size(input);
        self
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn get_max_batch_size(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_batch_size()
    }
    ///
    /// Adds a key-value pair to `queryParam`.
    ///
    /// To override the contents of this collection use [`set_query_param`](Self::set_query_param).
    ///
    /// <p>A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value are returned.</p>
    pub fn query_param(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.query_param(k.into(), v.into());
        self
    }
    /// <p>A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value are returned.</p>
    pub fn set_query_param(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_query_param(input);
        self
    }
    /// <p>A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value are returned.</p>
    pub fn get_query_param(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_query_param()
    }
}
