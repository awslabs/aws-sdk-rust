// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a <code>GetPipeline</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPipelineOutput {
    /// <p>Represents the structure of actions and stages to be performed in the pipeline. </p>
    #[doc(hidden)]
    pub pipeline: std::option::Option<crate::types::PipelineDeclaration>,
    /// <p>Represents the pipeline metadata information returned as part of the output of a <code>GetPipeline</code> action.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<crate::types::PipelineMetadata>,
    _request_id: Option<String>,
}
impl GetPipelineOutput {
    /// <p>Represents the structure of actions and stages to be performed in the pipeline. </p>
    pub fn pipeline(&self) -> std::option::Option<&crate::types::PipelineDeclaration> {
        self.pipeline.as_ref()
    }
    /// <p>Represents the pipeline metadata information returned as part of the output of a <code>GetPipeline</code> action.</p>
    pub fn metadata(&self) -> std::option::Option<&crate::types::PipelineMetadata> {
        self.metadata.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetPipelineOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPipelineOutput {
    /// Creates a new builder-style object to manufacture [`GetPipelineOutput`](crate::operation::get_pipeline::GetPipelineOutput).
    pub fn builder() -> crate::operation::get_pipeline::builders::GetPipelineOutputBuilder {
        crate::operation::get_pipeline::builders::GetPipelineOutputBuilder::default()
    }
}

/// A builder for [`GetPipelineOutput`](crate::operation::get_pipeline::GetPipelineOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetPipelineOutputBuilder {
    pub(crate) pipeline: std::option::Option<crate::types::PipelineDeclaration>,
    pub(crate) metadata: std::option::Option<crate::types::PipelineMetadata>,
    _request_id: Option<String>,
}
impl GetPipelineOutputBuilder {
    /// <p>Represents the structure of actions and stages to be performed in the pipeline. </p>
    pub fn pipeline(mut self, input: crate::types::PipelineDeclaration) -> Self {
        self.pipeline = Some(input);
        self
    }
    /// <p>Represents the structure of actions and stages to be performed in the pipeline. </p>
    pub fn set_pipeline(
        mut self,
        input: std::option::Option<crate::types::PipelineDeclaration>,
    ) -> Self {
        self.pipeline = input;
        self
    }
    /// <p>Represents the pipeline metadata information returned as part of the output of a <code>GetPipeline</code> action.</p>
    pub fn metadata(mut self, input: crate::types::PipelineMetadata) -> Self {
        self.metadata = Some(input);
        self
    }
    /// <p>Represents the pipeline metadata information returned as part of the output of a <code>GetPipeline</code> action.</p>
    pub fn set_metadata(
        mut self,
        input: std::option::Option<crate::types::PipelineMetadata>,
    ) -> Self {
        self.metadata = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPipelineOutput`](crate::operation::get_pipeline::GetPipelineOutput).
    pub fn build(self) -> crate::operation::get_pipeline::GetPipelineOutput {
        crate::operation::get_pipeline::GetPipelineOutput {
            pipeline: self.pipeline,
            metadata: self.metadata,
            _request_id: self._request_id,
        }
    }
}
