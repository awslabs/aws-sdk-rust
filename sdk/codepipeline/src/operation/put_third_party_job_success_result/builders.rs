// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_third_party_job_success_result::_put_third_party_job_success_result_output::PutThirdPartyJobSuccessResultOutputBuilder;

pub use crate::operation::put_third_party_job_success_result::_put_third_party_job_success_result_input::PutThirdPartyJobSuccessResultInputBuilder;

/// Fluent builder constructing a request to `PutThirdPartyJobSuccessResult`.
///
/// <p>Represents the success of a third party job as returned to the pipeline by a job worker. Used for partner actions only.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutThirdPartyJobSuccessResultFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::put_third_party_job_success_result::builders::PutThirdPartyJobSuccessResultInputBuilder
            }
impl PutThirdPartyJobSuccessResultFluentBuilder {
    /// Creates a new `PutThirdPartyJobSuccessResult`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::put_third_party_job_success_result::PutThirdPartyJobSuccessResult, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::put_third_party_job_success_result::PutThirdPartyJobSuccessResultError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::put_third_party_job_success_result::PutThirdPartyJobSuccessResultOutput, aws_smithy_http::result::SdkError<crate::operation::put_third_party_job_success_result::PutThirdPartyJobSuccessResultError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Represents information about a current revision.</p>
    pub fn current_revision(mut self, input: crate::types::CurrentRevision) -> Self {
        self.inner = self.inner.current_revision(input);
        self
    }
    /// <p>Represents information about a current revision.</p>
    pub fn set_current_revision(
        mut self,
        input: std::option::Option<crate::types::CurrentRevision>,
    ) -> Self {
        self.inner = self.inner.set_current_revision(input);
        self
    }
    /// <p>A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
    pub fn continuation_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.continuation_token(input.into());
        self
    }
    /// <p>A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
    pub fn set_continuation_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_continuation_token(input);
        self
    }
    /// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
    pub fn execution_details(mut self, input: crate::types::ExecutionDetails) -> Self {
        self.inner = self.inner.execution_details(input);
        self
    }
    /// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
    pub fn set_execution_details(
        mut self,
        input: std::option::Option<crate::types::ExecutionDetails>,
    ) -> Self {
        self.inner = self.inner.set_execution_details(input);
        self
    }
}
