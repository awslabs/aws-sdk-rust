// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>PutThirdPartyJobSuccessResult</code> action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutThirdPartyJobSuccessResultInput {
    /// <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Represents information about a current revision.</p>
    pub current_revision: ::std::option::Option<crate::types::CurrentRevision>,
    /// <p>A token generated by a job worker, such as a CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
    pub continuation_token: ::std::option::Option<::std::string::String>,
    /// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
    pub execution_details: ::std::option::Option<crate::types::ExecutionDetails>,
}
impl PutThirdPartyJobSuccessResultInput {
    /// <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Represents information about a current revision.</p>
    pub fn current_revision(&self) -> ::std::option::Option<&crate::types::CurrentRevision> {
        self.current_revision.as_ref()
    }
    /// <p>A token generated by a job worker, such as a CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
    pub fn continuation_token(&self) -> ::std::option::Option<&str> {
        self.continuation_token.as_deref()
    }
    /// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
    pub fn execution_details(&self) -> ::std::option::Option<&crate::types::ExecutionDetails> {
        self.execution_details.as_ref()
    }
}
impl PutThirdPartyJobSuccessResultInput {
    /// Creates a new builder-style object to manufacture [`PutThirdPartyJobSuccessResultInput`](crate::operation::put_third_party_job_success_result::PutThirdPartyJobSuccessResultInput).
    pub fn builder() -> crate::operation::put_third_party_job_success_result::builders::PutThirdPartyJobSuccessResultInputBuilder {
        crate::operation::put_third_party_job_success_result::builders::PutThirdPartyJobSuccessResultInputBuilder::default()
    }
}

/// A builder for [`PutThirdPartyJobSuccessResultInput`](crate::operation::put_third_party_job_success_result::PutThirdPartyJobSuccessResultInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutThirdPartyJobSuccessResultInputBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) current_revision: ::std::option::Option<crate::types::CurrentRevision>,
    pub(crate) continuation_token: ::std::option::Option<::std::string::String>,
    pub(crate) execution_details: ::std::option::Option<crate::types::ExecutionDetails>,
}
impl PutThirdPartyJobSuccessResultInputBuilder {
    /// <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Represents information about a current revision.</p>
    pub fn current_revision(mut self, input: crate::types::CurrentRevision) -> Self {
        self.current_revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents information about a current revision.</p>
    pub fn set_current_revision(mut self, input: ::std::option::Option<crate::types::CurrentRevision>) -> Self {
        self.current_revision = input;
        self
    }
    /// <p>Represents information about a current revision.</p>
    pub fn get_current_revision(&self) -> &::std::option::Option<crate::types::CurrentRevision> {
        &self.current_revision
    }
    /// <p>A token generated by a job worker, such as a CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
    pub fn continuation_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.continuation_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token generated by a job worker, such as a CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
    pub fn set_continuation_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.continuation_token = input;
        self
    }
    /// <p>A token generated by a job worker, such as a CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
    pub fn get_continuation_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.continuation_token
    }
    /// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
    pub fn execution_details(mut self, input: crate::types::ExecutionDetails) -> Self {
        self.execution_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
    pub fn set_execution_details(mut self, input: ::std::option::Option<crate::types::ExecutionDetails>) -> Self {
        self.execution_details = input;
        self
    }
    /// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
    pub fn get_execution_details(&self) -> &::std::option::Option<crate::types::ExecutionDetails> {
        &self.execution_details
    }
    /// Consumes the builder and constructs a [`PutThirdPartyJobSuccessResultInput`](crate::operation::put_third_party_job_success_result::PutThirdPartyJobSuccessResultInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_third_party_job_success_result::PutThirdPartyJobSuccessResultInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_third_party_job_success_result::PutThirdPartyJobSuccessResultInput {
            job_id: self.job_id,
            client_token: self.client_token,
            current_revision: self.current_revision,
            continuation_token: self.continuation_token,
            execution_details: self.execution_details,
        })
    }
}
