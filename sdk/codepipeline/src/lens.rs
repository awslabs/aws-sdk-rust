// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_action_executions_output_next_token(
    input: &crate::operation::list_action_executions::ListActionExecutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_action_types_output_next_token(
    input: &crate::operation::list_action_types::ListActionTypesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_pipeline_executions_output_next_token(
    input: &crate::operation::list_pipeline_executions::ListPipelineExecutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_pipelines_output_next_token(
    input: &crate::operation::list_pipelines::ListPipelinesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_next_token(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_webhooks_output_next_token(
    input: &crate::operation::list_webhooks::ListWebhooksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_action_executions_output_action_execution_details(
    input: crate::operation::list_action_executions::ListActionExecutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ActionExecutionDetail>> {
    let input = match input.action_execution_details {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_action_types_output_action_types(
    input: crate::operation::list_action_types::ListActionTypesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ActionType>> {
    let input = input.action_types;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_pipeline_executions_output_pipeline_execution_summaries(
    input: crate::operation::list_pipeline_executions::ListPipelineExecutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PipelineExecutionSummary>> {
    let input = match input.pipeline_execution_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_pipelines_output_pipelines(
    input: crate::operation::list_pipelines::ListPipelinesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PipelineSummary>> {
    let input = match input.pipelines {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_tags(
    input: crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = match input.tags {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_webhooks_output_webhooks(
    input: crate::operation::list_webhooks::ListWebhooksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListWebhookItem>> {
    let input = match input.webhooks {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
