// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS CodePipeline
///
/// Client for invoking operations on AWS CodePipeline. Each operation on AWS CodePipeline is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_codepipeline::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::RetryConfig;
/// # async fn docs() {
///     let shared_config = aws_config::load_from_env().await;
///     let config = aws_sdk_codepipeline::config::Builder::from(&shared_config)
///         .retry_config(RetryConfig::disabled())
///         .build();
///     let client = aws_sdk_codepipeline::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AcknowledgeJob`](crate::client::fluent_builders::AcknowledgeJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::AcknowledgeJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::AcknowledgeJob::set_job_id): <p>The unique system-generated ID of the job for which you want to confirm receipt.</p>
    ///   - [`nonce(impl Into<String>)`](crate::client::fluent_builders::AcknowledgeJob::nonce) / [`set_nonce(Option<String>)`](crate::client::fluent_builders::AcknowledgeJob::set_nonce): <p>A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response of the <code>PollForJobs</code> request that returned this job.</p>
    /// - On success, responds with [`AcknowledgeJobOutput`](crate::output::AcknowledgeJobOutput) with field(s):
    ///   - [`status(Option<JobStatus>)`](crate::output::AcknowledgeJobOutput::status): <p>Whether the job worker has received the specified job.</p>
    /// - On failure, responds with [`SdkError<AcknowledgeJobError>`](crate::error::AcknowledgeJobError)
    pub fn acknowledge_job(&self) -> fluent_builders::AcknowledgeJob {
        fluent_builders::AcknowledgeJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AcknowledgeThirdPartyJob`](crate::client::fluent_builders::AcknowledgeThirdPartyJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::AcknowledgeThirdPartyJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::AcknowledgeThirdPartyJob::set_job_id): <p>The unique system-generated ID of the job.</p>
    ///   - [`nonce(impl Into<String>)`](crate::client::fluent_builders::AcknowledgeThirdPartyJob::nonce) / [`set_nonce(Option<String>)`](crate::client::fluent_builders::AcknowledgeThirdPartyJob::set_nonce): <p>A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response to a <code>GetThirdPartyJobDetails</code> request.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::AcknowledgeThirdPartyJob::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::AcknowledgeThirdPartyJob::set_client_token): <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    /// - On success, responds with [`AcknowledgeThirdPartyJobOutput`](crate::output::AcknowledgeThirdPartyJobOutput) with field(s):
    ///   - [`status(Option<JobStatus>)`](crate::output::AcknowledgeThirdPartyJobOutput::status): <p>The status information for the third party job, if any.</p>
    /// - On failure, responds with [`SdkError<AcknowledgeThirdPartyJobError>`](crate::error::AcknowledgeThirdPartyJobError)
    pub fn acknowledge_third_party_job(&self) -> fluent_builders::AcknowledgeThirdPartyJob {
        fluent_builders::AcknowledgeThirdPartyJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCustomActionType`](crate::client::fluent_builders::CreateCustomActionType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`category(ActionCategory)`](crate::client::fluent_builders::CreateCustomActionType::category) / [`set_category(Option<ActionCategory>)`](crate::client::fluent_builders::CreateCustomActionType::set_category): <p>The category of the custom action, such as a build action or a test action.</p>
    ///   - [`provider(impl Into<String>)`](crate::client::fluent_builders::CreateCustomActionType::provider) / [`set_provider(Option<String>)`](crate::client::fluent_builders::CreateCustomActionType::set_provider): <p>The provider of the service used in the custom action, such as AWS CodeDeploy.</p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::CreateCustomActionType::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::CreateCustomActionType::set_version): <p>The version identifier of the custom action.</p>
    ///   - [`settings(ActionTypeSettings)`](crate::client::fluent_builders::CreateCustomActionType::settings) / [`set_settings(Option<ActionTypeSettings>)`](crate::client::fluent_builders::CreateCustomActionType::set_settings): <p>URLs that provide users information about this custom action.</p>
    ///   - [`configuration_properties(Vec<ActionConfigurationProperty>)`](crate::client::fluent_builders::CreateCustomActionType::configuration_properties) / [`set_configuration_properties(Option<Vec<ActionConfigurationProperty>>)`](crate::client::fluent_builders::CreateCustomActionType::set_configuration_properties): <p>The configuration properties for the custom action.</p> <note>   <p>You can refer to a name in the configuration properties of the custom action within the URL templates by following the format of {Config:name}, as long as the configuration property is both required and not secret. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/how-to-create-custom-action.html">Create a Custom Action for a Pipeline</a>.</p>  </note>
    ///   - [`input_artifact_details(ArtifactDetails)`](crate::client::fluent_builders::CreateCustomActionType::input_artifact_details) / [`set_input_artifact_details(Option<ArtifactDetails>)`](crate::client::fluent_builders::CreateCustomActionType::set_input_artifact_details): <p>The details of the input artifact for the action, such as its commit ID.</p>
    ///   - [`output_artifact_details(ArtifactDetails)`](crate::client::fluent_builders::CreateCustomActionType::output_artifact_details) / [`set_output_artifact_details(Option<ArtifactDetails>)`](crate::client::fluent_builders::CreateCustomActionType::set_output_artifact_details): <p>The details of the output artifact of the action, such as its commit ID.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateCustomActionType::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateCustomActionType::set_tags): <p>The tags for the custom action.</p>
    /// - On success, responds with [`CreateCustomActionTypeOutput`](crate::output::CreateCustomActionTypeOutput) with field(s):
    ///   - [`action_type(Option<ActionType>)`](crate::output::CreateCustomActionTypeOutput::action_type): <p>Returns information about the details of an action type.</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::CreateCustomActionTypeOutput::tags): <p>Specifies the tags applied to the custom action.</p>
    /// - On failure, responds with [`SdkError<CreateCustomActionTypeError>`](crate::error::CreateCustomActionTypeError)
    pub fn create_custom_action_type(&self) -> fluent_builders::CreateCustomActionType {
        fluent_builders::CreateCustomActionType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePipeline`](crate::client::fluent_builders::CreatePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline(PipelineDeclaration)`](crate::client::fluent_builders::CreatePipeline::pipeline) / [`set_pipeline(Option<PipelineDeclaration>)`](crate::client::fluent_builders::CreatePipeline::set_pipeline): <p>Represents the structure of actions and stages to be performed in the pipeline. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreatePipeline::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreatePipeline::set_tags): <p>The tags for the pipeline.</p>
    /// - On success, responds with [`CreatePipelineOutput`](crate::output::CreatePipelineOutput) with field(s):
    ///   - [`pipeline(Option<PipelineDeclaration>)`](crate::output::CreatePipelineOutput::pipeline): <p>Represents the structure of actions and stages to be performed in the pipeline. </p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::CreatePipelineOutput::tags): <p>Specifies the tags applied to the pipeline.</p>
    /// - On failure, responds with [`SdkError<CreatePipelineError>`](crate::error::CreatePipelineError)
    pub fn create_pipeline(&self) -> fluent_builders::CreatePipeline {
        fluent_builders::CreatePipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCustomActionType`](crate::client::fluent_builders::DeleteCustomActionType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`category(ActionCategory)`](crate::client::fluent_builders::DeleteCustomActionType::category) / [`set_category(Option<ActionCategory>)`](crate::client::fluent_builders::DeleteCustomActionType::set_category): <p>The category of the custom action that you want to delete, such as source or deploy.</p>
    ///   - [`provider(impl Into<String>)`](crate::client::fluent_builders::DeleteCustomActionType::provider) / [`set_provider(Option<String>)`](crate::client::fluent_builders::DeleteCustomActionType::set_provider): <p>The provider of the service used in the custom action, such as AWS CodeDeploy.</p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::DeleteCustomActionType::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::DeleteCustomActionType::set_version): <p>The version of the custom action to delete.</p>
    /// - On success, responds with [`DeleteCustomActionTypeOutput`](crate::output::DeleteCustomActionTypeOutput)

    /// - On failure, responds with [`SdkError<DeleteCustomActionTypeError>`](crate::error::DeleteCustomActionTypeError)
    pub fn delete_custom_action_type(&self) -> fluent_builders::DeleteCustomActionType {
        fluent_builders::DeleteCustomActionType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePipeline`](crate::client::fluent_builders::DeletePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeletePipeline::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeletePipeline::set_name): <p>The name of the pipeline to be deleted.</p>
    /// - On success, responds with [`DeletePipelineOutput`](crate::output::DeletePipelineOutput)

    /// - On failure, responds with [`SdkError<DeletePipelineError>`](crate::error::DeletePipelineError)
    pub fn delete_pipeline(&self) -> fluent_builders::DeletePipeline {
        fluent_builders::DeletePipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWebhook`](crate::client::fluent_builders::DeleteWebhook) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteWebhook::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteWebhook::set_name): <p>The name of the webhook you want to delete.</p>
    /// - On success, responds with [`DeleteWebhookOutput`](crate::output::DeleteWebhookOutput)

    /// - On failure, responds with [`SdkError<DeleteWebhookError>`](crate::error::DeleteWebhookError)
    pub fn delete_webhook(&self) -> fluent_builders::DeleteWebhook {
        fluent_builders::DeleteWebhook::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeregisterWebhookWithThirdParty`](crate::client::fluent_builders::DeregisterWebhookWithThirdParty) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`webhook_name(impl Into<String>)`](crate::client::fluent_builders::DeregisterWebhookWithThirdParty::webhook_name) / [`set_webhook_name(Option<String>)`](crate::client::fluent_builders::DeregisterWebhookWithThirdParty::set_webhook_name): <p>The name of the webhook you want to deregister.</p>
    /// - On success, responds with [`DeregisterWebhookWithThirdPartyOutput`](crate::output::DeregisterWebhookWithThirdPartyOutput)

    /// - On failure, responds with [`SdkError<DeregisterWebhookWithThirdPartyError>`](crate::error::DeregisterWebhookWithThirdPartyError)
    pub fn deregister_webhook_with_third_party(
        &self,
    ) -> fluent_builders::DeregisterWebhookWithThirdParty {
        fluent_builders::DeregisterWebhookWithThirdParty::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableStageTransition`](crate::client::fluent_builders::DisableStageTransition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::DisableStageTransition::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::DisableStageTransition::set_pipeline_name): <p>The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.</p>
    ///   - [`stage_name(impl Into<String>)`](crate::client::fluent_builders::DisableStageTransition::stage_name) / [`set_stage_name(Option<String>)`](crate::client::fluent_builders::DisableStageTransition::set_stage_name): <p>The name of the stage where you want to disable the inbound or outbound transition of artifacts.</p>
    ///   - [`transition_type(StageTransitionType)`](crate::client::fluent_builders::DisableStageTransition::transition_type) / [`set_transition_type(Option<StageTransitionType>)`](crate::client::fluent_builders::DisableStageTransition::set_transition_type): <p>Specifies whether artifacts are prevented from transitioning into the stage and being processed by the actions in that stage (inbound), or prevented from transitioning from the stage after they have been processed by the actions in that stage (outbound).</p>
    ///   - [`reason(impl Into<String>)`](crate::client::fluent_builders::DisableStageTransition::reason) / [`set_reason(Option<String>)`](crate::client::fluent_builders::DisableStageTransition::set_reason): <p>The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.</p>
    /// - On success, responds with [`DisableStageTransitionOutput`](crate::output::DisableStageTransitionOutput)

    /// - On failure, responds with [`SdkError<DisableStageTransitionError>`](crate::error::DisableStageTransitionError)
    pub fn disable_stage_transition(&self) -> fluent_builders::DisableStageTransition {
        fluent_builders::DisableStageTransition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableStageTransition`](crate::client::fluent_builders::EnableStageTransition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::EnableStageTransition::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::EnableStageTransition::set_pipeline_name): <p>The name of the pipeline in which you want to enable the flow of artifacts from one stage to another.</p>
    ///   - [`stage_name(impl Into<String>)`](crate::client::fluent_builders::EnableStageTransition::stage_name) / [`set_stage_name(Option<String>)`](crate::client::fluent_builders::EnableStageTransition::set_stage_name): <p>The name of the stage where you want to enable the transition of artifacts, either into the stage (inbound) or from that stage to the next stage (outbound).</p>
    ///   - [`transition_type(StageTransitionType)`](crate::client::fluent_builders::EnableStageTransition::transition_type) / [`set_transition_type(Option<StageTransitionType>)`](crate::client::fluent_builders::EnableStageTransition::set_transition_type): <p>Specifies whether artifacts are allowed to enter the stage and be processed by the actions in that stage (inbound) or whether already processed artifacts are allowed to transition to the next stage (outbound).</p>
    /// - On success, responds with [`EnableStageTransitionOutput`](crate::output::EnableStageTransitionOutput)

    /// - On failure, responds with [`SdkError<EnableStageTransitionError>`](crate::error::EnableStageTransitionError)
    pub fn enable_stage_transition(&self) -> fluent_builders::EnableStageTransition {
        fluent_builders::EnableStageTransition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetActionType`](crate::client::fluent_builders::GetActionType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`category(ActionCategory)`](crate::client::fluent_builders::GetActionType::category) / [`set_category(Option<ActionCategory>)`](crate::client::fluent_builders::GetActionType::set_category): <p>Defines what kind of action can be taken in the stage. The following are the valid values:</p>  <ul>   <li> <p> <code>Source</code> </p> </li>   <li> <p> <code>Build</code> </p> </li>   <li> <p> <code>Test</code> </p> </li>   <li> <p> <code>Deploy</code> </p> </li>   <li> <p> <code>Approval</code> </p> </li>   <li> <p> <code>Invoke</code> </p> </li>  </ul>
    ///   - [`owner(impl Into<String>)`](crate::client::fluent_builders::GetActionType::owner) / [`set_owner(Option<String>)`](crate::client::fluent_builders::GetActionType::set_owner): <p>The creator of an action type that was created with any supported integration model. There are two valid values: <code>AWS</code> and <code>ThirdParty</code>.</p>
    ///   - [`provider(impl Into<String>)`](crate::client::fluent_builders::GetActionType::provider) / [`set_provider(Option<String>)`](crate::client::fluent_builders::GetActionType::set_provider): <p>The provider of the action type being called. The provider name is specified when the action type is created.</p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::GetActionType::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::GetActionType::set_version): <p>A string that describes the action type version.</p>
    /// - On success, responds with [`GetActionTypeOutput`](crate::output::GetActionTypeOutput) with field(s):
    ///   - [`action_type(Option<ActionTypeDeclaration>)`](crate::output::GetActionTypeOutput::action_type): <p>The action type information for the requested action type, such as the action type ID.</p>
    /// - On failure, responds with [`SdkError<GetActionTypeError>`](crate::error::GetActionTypeError)
    pub fn get_action_type(&self) -> fluent_builders::GetActionType {
        fluent_builders::GetActionType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetJobDetails`](crate::client::fluent_builders::GetJobDetails) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetJobDetails::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetJobDetails::set_job_id): <p>The unique system-generated ID for the job.</p>
    /// - On success, responds with [`GetJobDetailsOutput`](crate::output::GetJobDetailsOutput) with field(s):
    ///   - [`job_details(Option<JobDetails>)`](crate::output::GetJobDetailsOutput::job_details): <p>The details of the job.</p> <note>   <p>If AWSSessionCredentials is used, a long-running job can call <code>GetJobDetails</code> again to obtain new credentials.</p>  </note>
    /// - On failure, responds with [`SdkError<GetJobDetailsError>`](crate::error::GetJobDetailsError)
    pub fn get_job_details(&self) -> fluent_builders::GetJobDetails {
        fluent_builders::GetJobDetails::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPipeline`](crate::client::fluent_builders::GetPipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetPipeline::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetPipeline::set_name): <p>The name of the pipeline for which you want to get information. Pipeline names must be unique under an AWS user account.</p>
    ///   - [`version(i32)`](crate::client::fluent_builders::GetPipeline::version) / [`set_version(Option<i32>)`](crate::client::fluent_builders::GetPipeline::set_version): <p>The version number of the pipeline. If you do not specify a version, defaults to the current version.</p>
    /// - On success, responds with [`GetPipelineOutput`](crate::output::GetPipelineOutput) with field(s):
    ///   - [`pipeline(Option<PipelineDeclaration>)`](crate::output::GetPipelineOutput::pipeline): <p>Represents the structure of actions and stages to be performed in the pipeline. </p>
    ///   - [`metadata(Option<PipelineMetadata>)`](crate::output::GetPipelineOutput::metadata): <p>Represents the pipeline metadata information returned as part of the output of a <code>GetPipeline</code> action.</p>
    /// - On failure, responds with [`SdkError<GetPipelineError>`](crate::error::GetPipelineError)
    pub fn get_pipeline(&self) -> fluent_builders::GetPipeline {
        fluent_builders::GetPipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPipelineExecution`](crate::client::fluent_builders::GetPipelineExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::GetPipelineExecution::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::GetPipelineExecution::set_pipeline_name): <p>The name of the pipeline about which you want to get execution details.</p>
    ///   - [`pipeline_execution_id(impl Into<String>)`](crate::client::fluent_builders::GetPipelineExecution::pipeline_execution_id) / [`set_pipeline_execution_id(Option<String>)`](crate::client::fluent_builders::GetPipelineExecution::set_pipeline_execution_id): <p>The ID of the pipeline execution about which you want to get execution details.</p>
    /// - On success, responds with [`GetPipelineExecutionOutput`](crate::output::GetPipelineExecutionOutput) with field(s):
    ///   - [`pipeline_execution(Option<PipelineExecution>)`](crate::output::GetPipelineExecutionOutput::pipeline_execution): <p>Represents information about the execution of a pipeline.</p>
    /// - On failure, responds with [`SdkError<GetPipelineExecutionError>`](crate::error::GetPipelineExecutionError)
    pub fn get_pipeline_execution(&self) -> fluent_builders::GetPipelineExecution {
        fluent_builders::GetPipelineExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPipelineState`](crate::client::fluent_builders::GetPipelineState) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetPipelineState::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetPipelineState::set_name): <p>The name of the pipeline about which you want to get information.</p>
    /// - On success, responds with [`GetPipelineStateOutput`](crate::output::GetPipelineStateOutput) with field(s):
    ///   - [`pipeline_name(Option<String>)`](crate::output::GetPipelineStateOutput::pipeline_name): <p>The name of the pipeline for which you want to get the state.</p>
    ///   - [`pipeline_version(Option<i32>)`](crate::output::GetPipelineStateOutput::pipeline_version): <p>The version number of the pipeline.</p> <note>   <p>A newly created pipeline is always assigned a version number of <code>1</code>.</p>  </note>
    ///   - [`stage_states(Option<Vec<StageState>>)`](crate::output::GetPipelineStateOutput::stage_states): <p>A list of the pipeline stage output information, including stage name, state, most recent run details, whether the stage is disabled, and other data.</p>
    ///   - [`created(Option<DateTime>)`](crate::output::GetPipelineStateOutput::created): <p>The date and time the pipeline was created, in timestamp format.</p>
    ///   - [`updated(Option<DateTime>)`](crate::output::GetPipelineStateOutput::updated): <p>The date and time the pipeline was last updated, in timestamp format.</p>
    /// - On failure, responds with [`SdkError<GetPipelineStateError>`](crate::error::GetPipelineStateError)
    pub fn get_pipeline_state(&self) -> fluent_builders::GetPipelineState {
        fluent_builders::GetPipelineState::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetThirdPartyJobDetails`](crate::client::fluent_builders::GetThirdPartyJobDetails) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetThirdPartyJobDetails::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetThirdPartyJobDetails::set_job_id): <p>The unique system-generated ID used for identifying the job.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::GetThirdPartyJobDetails::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::GetThirdPartyJobDetails::set_client_token): <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    /// - On success, responds with [`GetThirdPartyJobDetailsOutput`](crate::output::GetThirdPartyJobDetailsOutput) with field(s):
    ///   - [`job_details(Option<ThirdPartyJobDetails>)`](crate::output::GetThirdPartyJobDetailsOutput::job_details): <p>The details of the job, including any protected values defined for the job.</p>
    /// - On failure, responds with [`SdkError<GetThirdPartyJobDetailsError>`](crate::error::GetThirdPartyJobDetailsError)
    pub fn get_third_party_job_details(&self) -> fluent_builders::GetThirdPartyJobDetails {
        fluent_builders::GetThirdPartyJobDetails::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListActionExecutions`](crate::client::fluent_builders::ListActionExecutions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListActionExecutions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::ListActionExecutions::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::ListActionExecutions::set_pipeline_name): <p> The name of the pipeline for which you want to list action execution history.</p>
    ///   - [`filter(ActionExecutionFilter)`](crate::client::fluent_builders::ListActionExecutions::filter) / [`set_filter(Option<ActionExecutionFilter>)`](crate::client::fluent_builders::ListActionExecutions::set_filter): <p>Input information used to filter action execution history.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListActionExecutions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListActionExecutions::set_max_results): <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Action execution history is retained for up to 12 months, based on action execution start times. Default value is 100. </p> <note>   <p>Detailed execution history is available for executions run on or after February 21, 2019.</p>  </note>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListActionExecutions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListActionExecutions::set_next_token): <p>The token that was returned from the previous <code>ListActionExecutions</code> call, which can be used to return the next set of action executions in the list.</p>
    /// - On success, responds with [`ListActionExecutionsOutput`](crate::output::ListActionExecutionsOutput) with field(s):
    ///   - [`action_execution_details(Option<Vec<ActionExecutionDetail>>)`](crate::output::ListActionExecutionsOutput::action_execution_details): <p>The details for a list of recent executions, such as action execution ID.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListActionExecutionsOutput::next_token): <p>If the amount of returned information is significantly large, an identifier is also returned and can be used in a subsequent <code>ListActionExecutions</code> call to return the next set of action executions in the list.</p>
    /// - On failure, responds with [`SdkError<ListActionExecutionsError>`](crate::error::ListActionExecutionsError)
    pub fn list_action_executions(&self) -> fluent_builders::ListActionExecutions {
        fluent_builders::ListActionExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListActionTypes`](crate::client::fluent_builders::ListActionTypes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListActionTypes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`action_owner_filter(ActionOwner)`](crate::client::fluent_builders::ListActionTypes::action_owner_filter) / [`set_action_owner_filter(Option<ActionOwner>)`](crate::client::fluent_builders::ListActionTypes::set_action_owner_filter): <p>Filters the list of action types to those created by a specified entity.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListActionTypes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListActionTypes::set_next_token): <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    ///   - [`region_filter(impl Into<String>)`](crate::client::fluent_builders::ListActionTypes::region_filter) / [`set_region_filter(Option<String>)`](crate::client::fluent_builders::ListActionTypes::set_region_filter): <p>The Region to filter on for the list of action types.</p>
    /// - On success, responds with [`ListActionTypesOutput`](crate::output::ListActionTypesOutput) with field(s):
    ///   - [`action_types(Option<Vec<ActionType>>)`](crate::output::ListActionTypesOutput::action_types): <p>Provides details of the action types.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListActionTypesOutput::next_token): <p>If the amount of returned information is significantly large, an identifier is also returned. It can be used in a subsequent list action types call to return the next set of action types in the list.</p>
    /// - On failure, responds with [`SdkError<ListActionTypesError>`](crate::error::ListActionTypesError)
    pub fn list_action_types(&self) -> fluent_builders::ListActionTypes {
        fluent_builders::ListActionTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPipelineExecutions`](crate::client::fluent_builders::ListPipelineExecutions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPipelineExecutions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::ListPipelineExecutions::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::ListPipelineExecutions::set_pipeline_name): <p>The name of the pipeline for which you want to get execution summary information.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPipelineExecutions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPipelineExecutions::set_max_results): <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPipelineExecutions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPipelineExecutions::set_next_token): <p>The token that was returned from the previous <code>ListPipelineExecutions</code> call, which can be used to return the next set of pipeline executions in the list.</p>
    /// - On success, responds with [`ListPipelineExecutionsOutput`](crate::output::ListPipelineExecutionsOutput) with field(s):
    ///   - [`pipeline_execution_summaries(Option<Vec<PipelineExecutionSummary>>)`](crate::output::ListPipelineExecutionsOutput::pipeline_execution_summaries): <p>A list of executions in the history of a pipeline.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPipelineExecutionsOutput::next_token): <p>A token that can be used in the next <code>ListPipelineExecutions</code> call. To view all items in the list, continue to call this operation with each subsequent token until no more nextToken values are returned.</p>
    /// - On failure, responds with [`SdkError<ListPipelineExecutionsError>`](crate::error::ListPipelineExecutionsError)
    pub fn list_pipeline_executions(&self) -> fluent_builders::ListPipelineExecutions {
        fluent_builders::ListPipelineExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPipelines`](crate::client::fluent_builders::ListPipelines) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPipelines::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPipelines::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPipelines::set_next_token): <p>An identifier that was returned from the previous list pipelines call. It can be used to return the next set of pipelines in the list.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPipelines::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPipelines::set_max_results): <p>The maximum number of pipelines to return in a single call. To retrieve the remaining pipelines, make another call with the returned nextToken value. The minimum value you can specify is 1. The maximum accepted value is 1000.</p>
    /// - On success, responds with [`ListPipelinesOutput`](crate::output::ListPipelinesOutput) with field(s):
    ///   - [`pipelines(Option<Vec<PipelineSummary>>)`](crate::output::ListPipelinesOutput::pipelines): <p>The list of pipelines.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPipelinesOutput::next_token): <p>If the amount of returned information is significantly large, an identifier is also returned. It can be used in a subsequent list pipelines call to return the next set of pipelines in the list.</p>
    /// - On failure, responds with [`SdkError<ListPipelinesError>`](crate::error::ListPipelinesError)
    pub fn list_pipelines(&self) -> fluent_builders::ListPipelines {
        fluent_builders::ListPipelines::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTagsForResource::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource to get tags for.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_next_token): <p>The token that was returned from the previous API call, which would be used to return the next page of the list. The ListTagsforResource call lists all available tags in one call and does not use pagination.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTagsForResource::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTagsForResource::set_max_results): <p>The maximum number of results to return in a single call.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags for the resource.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTagsForResourceOutput::next_token): <p>If the amount of returned information is significantly large, an identifier is also returned and can be used in a subsequent API call to return the next page of the list. The ListTagsforResource call lists all available tags in one call and does not use pagination.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWebhooks`](crate::client::fluent_builders::ListWebhooks) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWebhooks::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWebhooks::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWebhooks::set_next_token): <p>The token that was returned from the previous ListWebhooks call, which can be used to return the next set of webhooks in the list.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWebhooks::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWebhooks::set_max_results): <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    /// - On success, responds with [`ListWebhooksOutput`](crate::output::ListWebhooksOutput) with field(s):
    ///   - [`webhooks(Option<Vec<ListWebhookItem>>)`](crate::output::ListWebhooksOutput::webhooks): <p>The JSON detail returned for each webhook in the list output for the ListWebhooks call.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListWebhooksOutput::next_token): <p>If the amount of returned information is significantly large, an identifier is also returned and can be used in a subsequent ListWebhooks call to return the next set of webhooks in the list. </p>
    /// - On failure, responds with [`SdkError<ListWebhooksError>`](crate::error::ListWebhooksError)
    pub fn list_webhooks(&self) -> fluent_builders::ListWebhooks {
        fluent_builders::ListWebhooks::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PollForJobs`](crate::client::fluent_builders::PollForJobs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`action_type_id(ActionTypeId)`](crate::client::fluent_builders::PollForJobs::action_type_id) / [`set_action_type_id(Option<ActionTypeId>)`](crate::client::fluent_builders::PollForJobs::set_action_type_id): <p>Represents information about an action type.</p>
    ///   - [`max_batch_size(i32)`](crate::client::fluent_builders::PollForJobs::max_batch_size) / [`set_max_batch_size(Option<i32>)`](crate::client::fluent_builders::PollForJobs::set_max_batch_size): <p>The maximum number of jobs to return in a poll for jobs call.</p>
    ///   - [`query_param(HashMap<String, String>)`](crate::client::fluent_builders::PollForJobs::query_param) / [`set_query_param(Option<HashMap<String, String>>)`](crate::client::fluent_builders::PollForJobs::set_query_param): <p>A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value are returned.</p>
    /// - On success, responds with [`PollForJobsOutput`](crate::output::PollForJobsOutput) with field(s):
    ///   - [`jobs(Option<Vec<Job>>)`](crate::output::PollForJobsOutput::jobs): <p>Information about the jobs to take action on.</p>
    /// - On failure, responds with [`SdkError<PollForJobsError>`](crate::error::PollForJobsError)
    pub fn poll_for_jobs(&self) -> fluent_builders::PollForJobs {
        fluent_builders::PollForJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PollForThirdPartyJobs`](crate::client::fluent_builders::PollForThirdPartyJobs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`action_type_id(ActionTypeId)`](crate::client::fluent_builders::PollForThirdPartyJobs::action_type_id) / [`set_action_type_id(Option<ActionTypeId>)`](crate::client::fluent_builders::PollForThirdPartyJobs::set_action_type_id): <p>Represents information about an action type.</p>
    ///   - [`max_batch_size(i32)`](crate::client::fluent_builders::PollForThirdPartyJobs::max_batch_size) / [`set_max_batch_size(Option<i32>)`](crate::client::fluent_builders::PollForThirdPartyJobs::set_max_batch_size): <p>The maximum number of jobs to return in a poll for jobs call.</p>
    /// - On success, responds with [`PollForThirdPartyJobsOutput`](crate::output::PollForThirdPartyJobsOutput) with field(s):
    ///   - [`jobs(Option<Vec<ThirdPartyJob>>)`](crate::output::PollForThirdPartyJobsOutput::jobs): <p>Information about the jobs to take action on.</p>
    /// - On failure, responds with [`SdkError<PollForThirdPartyJobsError>`](crate::error::PollForThirdPartyJobsError)
    pub fn poll_for_third_party_jobs(&self) -> fluent_builders::PollForThirdPartyJobs {
        fluent_builders::PollForThirdPartyJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutActionRevision`](crate::client::fluent_builders::PutActionRevision) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::PutActionRevision::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::PutActionRevision::set_pipeline_name): <p>The name of the pipeline that starts processing the revision to the source.</p>
    ///   - [`stage_name(impl Into<String>)`](crate::client::fluent_builders::PutActionRevision::stage_name) / [`set_stage_name(Option<String>)`](crate::client::fluent_builders::PutActionRevision::set_stage_name): <p>The name of the stage that contains the action that acts on the revision.</p>
    ///   - [`action_name(impl Into<String>)`](crate::client::fluent_builders::PutActionRevision::action_name) / [`set_action_name(Option<String>)`](crate::client::fluent_builders::PutActionRevision::set_action_name): <p>The name of the action that processes the revision.</p>
    ///   - [`action_revision(ActionRevision)`](crate::client::fluent_builders::PutActionRevision::action_revision) / [`set_action_revision(Option<ActionRevision>)`](crate::client::fluent_builders::PutActionRevision::set_action_revision): <p>Represents information about the version (or revision) of an action.</p>
    /// - On success, responds with [`PutActionRevisionOutput`](crate::output::PutActionRevisionOutput) with field(s):
    ///   - [`new_revision(bool)`](crate::output::PutActionRevisionOutput::new_revision): <p>Indicates whether the artifact revision was previously used in an execution of the specified pipeline.</p>
    ///   - [`pipeline_execution_id(Option<String>)`](crate::output::PutActionRevisionOutput::pipeline_execution_id): <p>The ID of the current workflow state of the pipeline.</p>
    /// - On failure, responds with [`SdkError<PutActionRevisionError>`](crate::error::PutActionRevisionError)
    pub fn put_action_revision(&self) -> fluent_builders::PutActionRevision {
        fluent_builders::PutActionRevision::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutApprovalResult`](crate::client::fluent_builders::PutApprovalResult) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::PutApprovalResult::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::PutApprovalResult::set_pipeline_name): <p>The name of the pipeline that contains the action. </p>
    ///   - [`stage_name(impl Into<String>)`](crate::client::fluent_builders::PutApprovalResult::stage_name) / [`set_stage_name(Option<String>)`](crate::client::fluent_builders::PutApprovalResult::set_stage_name): <p>The name of the stage that contains the action.</p>
    ///   - [`action_name(impl Into<String>)`](crate::client::fluent_builders::PutApprovalResult::action_name) / [`set_action_name(Option<String>)`](crate::client::fluent_builders::PutApprovalResult::set_action_name): <p>The name of the action for which approval is requested.</p>
    ///   - [`result(ApprovalResult)`](crate::client::fluent_builders::PutApprovalResult::result) / [`set_result(Option<ApprovalResult>)`](crate::client::fluent_builders::PutApprovalResult::set_result): <p>Represents information about the result of the approval request.</p>
    ///   - [`token(impl Into<String>)`](crate::client::fluent_builders::PutApprovalResult::token) / [`set_token(Option<String>)`](crate::client::fluent_builders::PutApprovalResult::set_token): <p>The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <code>GetPipelineState</code> action. It is used to validate that the approval request corresponding to this token is still valid.</p>
    /// - On success, responds with [`PutApprovalResultOutput`](crate::output::PutApprovalResultOutput) with field(s):
    ///   - [`approved_at(Option<DateTime>)`](crate::output::PutApprovalResultOutput::approved_at): <p>The timestamp showing when the approval or rejection was submitted.</p>
    /// - On failure, responds with [`SdkError<PutApprovalResultError>`](crate::error::PutApprovalResultError)
    pub fn put_approval_result(&self) -> fluent_builders::PutApprovalResult {
        fluent_builders::PutApprovalResult::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutJobFailureResult`](crate::client::fluent_builders::PutJobFailureResult) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::PutJobFailureResult::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::PutJobFailureResult::set_job_id): <p>The unique system-generated ID of the job that failed. This is the same ID returned from <code>PollForJobs</code>.</p>
    ///   - [`failure_details(FailureDetails)`](crate::client::fluent_builders::PutJobFailureResult::failure_details) / [`set_failure_details(Option<FailureDetails>)`](crate::client::fluent_builders::PutJobFailureResult::set_failure_details): <p>The details about the failure of a job.</p>
    /// - On success, responds with [`PutJobFailureResultOutput`](crate::output::PutJobFailureResultOutput)

    /// - On failure, responds with [`SdkError<PutJobFailureResultError>`](crate::error::PutJobFailureResultError)
    pub fn put_job_failure_result(&self) -> fluent_builders::PutJobFailureResult {
        fluent_builders::PutJobFailureResult::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutJobSuccessResult`](crate::client::fluent_builders::PutJobSuccessResult) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::PutJobSuccessResult::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::PutJobSuccessResult::set_job_id): <p>The unique system-generated ID of the job that succeeded. This is the same ID returned from <code>PollForJobs</code>.</p>
    ///   - [`current_revision(CurrentRevision)`](crate::client::fluent_builders::PutJobSuccessResult::current_revision) / [`set_current_revision(Option<CurrentRevision>)`](crate::client::fluent_builders::PutJobSuccessResult::set_current_revision): <p>The ID of the current revision of the artifact successfully worked on by the job.</p>
    ///   - [`continuation_token(impl Into<String>)`](crate::client::fluent_builders::PutJobSuccessResult::continuation_token) / [`set_continuation_token(Option<String>)`](crate::client::fluent_builders::PutJobSuccessResult::set_continuation_token): <p>A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the custom action. When the action is complete, no continuation token should be supplied.</p>
    ///   - [`execution_details(ExecutionDetails)`](crate::client::fluent_builders::PutJobSuccessResult::execution_details) / [`set_execution_details(Option<ExecutionDetails>)`](crate::client::fluent_builders::PutJobSuccessResult::set_execution_details): <p>The execution details of the successful job, such as the actions taken by the job worker.</p>
    ///   - [`output_variables(HashMap<String, String>)`](crate::client::fluent_builders::PutJobSuccessResult::output_variables) / [`set_output_variables(Option<HashMap<String, String>>)`](crate::client::fluent_builders::PutJobSuccessResult::set_output_variables): <p>Key-value pairs produced as output by a job worker that can be made available to a downstream action configuration. <code>outputVariables</code> can be included only when there is no continuation token on the request.</p>
    /// - On success, responds with [`PutJobSuccessResultOutput`](crate::output::PutJobSuccessResultOutput)

    /// - On failure, responds with [`SdkError<PutJobSuccessResultError>`](crate::error::PutJobSuccessResultError)
    pub fn put_job_success_result(&self) -> fluent_builders::PutJobSuccessResult {
        fluent_builders::PutJobSuccessResult::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutThirdPartyJobFailureResult`](crate::client::fluent_builders::PutThirdPartyJobFailureResult) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::PutThirdPartyJobFailureResult::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::PutThirdPartyJobFailureResult::set_job_id): <p>The ID of the job that failed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::PutThirdPartyJobFailureResult::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::PutThirdPartyJobFailureResult::set_client_token): <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    ///   - [`failure_details(FailureDetails)`](crate::client::fluent_builders::PutThirdPartyJobFailureResult::failure_details) / [`set_failure_details(Option<FailureDetails>)`](crate::client::fluent_builders::PutThirdPartyJobFailureResult::set_failure_details): <p>Represents information about failure details.</p>
    /// - On success, responds with [`PutThirdPartyJobFailureResultOutput`](crate::output::PutThirdPartyJobFailureResultOutput)

    /// - On failure, responds with [`SdkError<PutThirdPartyJobFailureResultError>`](crate::error::PutThirdPartyJobFailureResultError)
    pub fn put_third_party_job_failure_result(
        &self,
    ) -> fluent_builders::PutThirdPartyJobFailureResult {
        fluent_builders::PutThirdPartyJobFailureResult::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutThirdPartyJobSuccessResult`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::set_job_id): <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::set_client_token): <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
    ///   - [`current_revision(CurrentRevision)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::current_revision) / [`set_current_revision(Option<CurrentRevision>)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::set_current_revision): <p>Represents information about a current revision.</p>
    ///   - [`continuation_token(impl Into<String>)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::continuation_token) / [`set_continuation_token(Option<String>)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::set_continuation_token): <p>A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
    ///   - [`execution_details(ExecutionDetails)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::execution_details) / [`set_execution_details(Option<ExecutionDetails>)`](crate::client::fluent_builders::PutThirdPartyJobSuccessResult::set_execution_details): <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
    /// - On success, responds with [`PutThirdPartyJobSuccessResultOutput`](crate::output::PutThirdPartyJobSuccessResultOutput)

    /// - On failure, responds with [`SdkError<PutThirdPartyJobSuccessResultError>`](crate::error::PutThirdPartyJobSuccessResultError)
    pub fn put_third_party_job_success_result(
        &self,
    ) -> fluent_builders::PutThirdPartyJobSuccessResult {
        fluent_builders::PutThirdPartyJobSuccessResult::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutWebhook`](crate::client::fluent_builders::PutWebhook) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`webhook(WebhookDefinition)`](crate::client::fluent_builders::PutWebhook::webhook) / [`set_webhook(Option<WebhookDefinition>)`](crate::client::fluent_builders::PutWebhook::set_webhook): <p>The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::PutWebhook::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::PutWebhook::set_tags): <p>The tags for the webhook.</p>
    /// - On success, responds with [`PutWebhookOutput`](crate::output::PutWebhookOutput) with field(s):
    ///   - [`webhook(Option<ListWebhookItem>)`](crate::output::PutWebhookOutput::webhook): <p>The detail returned from creating the webhook, such as the webhook name, webhook URL, and webhook ARN.</p>
    /// - On failure, responds with [`SdkError<PutWebhookError>`](crate::error::PutWebhookError)
    pub fn put_webhook(&self) -> fluent_builders::PutWebhook {
        fluent_builders::PutWebhook::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterWebhookWithThirdParty`](crate::client::fluent_builders::RegisterWebhookWithThirdParty) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`webhook_name(impl Into<String>)`](crate::client::fluent_builders::RegisterWebhookWithThirdParty::webhook_name) / [`set_webhook_name(Option<String>)`](crate::client::fluent_builders::RegisterWebhookWithThirdParty::set_webhook_name): <p>The name of an existing webhook created with PutWebhook to register with a supported third party. </p>
    /// - On success, responds with [`RegisterWebhookWithThirdPartyOutput`](crate::output::RegisterWebhookWithThirdPartyOutput)

    /// - On failure, responds with [`SdkError<RegisterWebhookWithThirdPartyError>`](crate::error::RegisterWebhookWithThirdPartyError)
    pub fn register_webhook_with_third_party(
        &self,
    ) -> fluent_builders::RegisterWebhookWithThirdParty {
        fluent_builders::RegisterWebhookWithThirdParty::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RetryStageExecution`](crate::client::fluent_builders::RetryStageExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::RetryStageExecution::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::RetryStageExecution::set_pipeline_name): <p>The name of the pipeline that contains the failed stage.</p>
    ///   - [`stage_name(impl Into<String>)`](crate::client::fluent_builders::RetryStageExecution::stage_name) / [`set_stage_name(Option<String>)`](crate::client::fluent_builders::RetryStageExecution::set_stage_name): <p>The name of the failed stage to be retried.</p>
    ///   - [`pipeline_execution_id(impl Into<String>)`](crate::client::fluent_builders::RetryStageExecution::pipeline_execution_id) / [`set_pipeline_execution_id(Option<String>)`](crate::client::fluent_builders::RetryStageExecution::set_pipeline_execution_id): <p>The ID of the pipeline execution in the failed stage to be retried. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId of the failed stage</p>
    ///   - [`retry_mode(StageRetryMode)`](crate::client::fluent_builders::RetryStageExecution::retry_mode) / [`set_retry_mode(Option<StageRetryMode>)`](crate::client::fluent_builders::RetryStageExecution::set_retry_mode): <p>The scope of the retry attempt. Currently, the only supported value is FAILED_ACTIONS.</p>
    /// - On success, responds with [`RetryStageExecutionOutput`](crate::output::RetryStageExecutionOutput) with field(s):
    ///   - [`pipeline_execution_id(Option<String>)`](crate::output::RetryStageExecutionOutput::pipeline_execution_id): <p>The ID of the current workflow execution in the failed stage.</p>
    /// - On failure, responds with [`SdkError<RetryStageExecutionError>`](crate::error::RetryStageExecutionError)
    pub fn retry_stage_execution(&self) -> fluent_builders::RetryStageExecution {
        fluent_builders::RetryStageExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartPipelineExecution`](crate::client::fluent_builders::StartPipelineExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::StartPipelineExecution::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::StartPipelineExecution::set_name): <p>The name of the pipeline to start.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartPipelineExecution::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartPipelineExecution::set_client_request_token): <p>The system-generated unique ID used to identify a unique execution request.</p>
    /// - On success, responds with [`StartPipelineExecutionOutput`](crate::output::StartPipelineExecutionOutput) with field(s):
    ///   - [`pipeline_execution_id(Option<String>)`](crate::output::StartPipelineExecutionOutput::pipeline_execution_id): <p>The unique system-generated ID of the pipeline execution that was started.</p>
    /// - On failure, responds with [`SdkError<StartPipelineExecutionError>`](crate::error::StartPipelineExecutionError)
    pub fn start_pipeline_execution(&self) -> fluent_builders::StartPipelineExecution {
        fluent_builders::StartPipelineExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopPipelineExecution`](crate::client::fluent_builders::StopPipelineExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::StopPipelineExecution::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::StopPipelineExecution::set_pipeline_name): <p>The name of the pipeline to stop.</p>
    ///   - [`pipeline_execution_id(impl Into<String>)`](crate::client::fluent_builders::StopPipelineExecution::pipeline_execution_id) / [`set_pipeline_execution_id(Option<String>)`](crate::client::fluent_builders::StopPipelineExecution::set_pipeline_execution_id): <p>The ID of the pipeline execution to be stopped in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId.</p>
    ///   - [`abandon(bool)`](crate::client::fluent_builders::StopPipelineExecution::abandon) / [`set_abandon(bool)`](crate::client::fluent_builders::StopPipelineExecution::set_abandon): <p>Use this option to stop the pipeline execution by abandoning, rather than finishing, in-progress actions.</p> <note>   <p>This option can lead to failed or out-of-sequence tasks.</p>  </note>
    ///   - [`reason(impl Into<String>)`](crate::client::fluent_builders::StopPipelineExecution::reason) / [`set_reason(Option<String>)`](crate::client::fluent_builders::StopPipelineExecution::set_reason): <p>Use this option to enter comments, such as the reason the pipeline was stopped.</p>
    /// - On success, responds with [`StopPipelineExecutionOutput`](crate::output::StopPipelineExecutionOutput) with field(s):
    ///   - [`pipeline_execution_id(Option<String>)`](crate::output::StopPipelineExecutionOutput::pipeline_execution_id): <p>The unique system-generated ID of the pipeline execution that was stopped.</p>
    /// - On failure, responds with [`SdkError<StopPipelineExecutionError>`](crate::error::StopPipelineExecutionError)
    pub fn stop_pipeline_execution(&self) -> fluent_builders::StopPipelineExecution {
        fluent_builders::StopPipelineExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource you want to add tags to.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags you want to modify or add to the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> fluent_builders::TagResource {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p> The Amazon Resource Name (ARN) of the resource to remove tags from.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The list of keys for the tags to be removed from the resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> fluent_builders::UntagResource {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateActionType`](crate::client::fluent_builders::UpdateActionType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`action_type(ActionTypeDeclaration)`](crate::client::fluent_builders::UpdateActionType::action_type) / [`set_action_type(Option<ActionTypeDeclaration>)`](crate::client::fluent_builders::UpdateActionType::set_action_type): <p>The action type definition for the action type to be updated.</p>
    /// - On success, responds with [`UpdateActionTypeOutput`](crate::output::UpdateActionTypeOutput)

    /// - On failure, responds with [`SdkError<UpdateActionTypeError>`](crate::error::UpdateActionTypeError)
    pub fn update_action_type(&self) -> fluent_builders::UpdateActionType {
        fluent_builders::UpdateActionType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdatePipeline`](crate::client::fluent_builders::UpdatePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline(PipelineDeclaration)`](crate::client::fluent_builders::UpdatePipeline::pipeline) / [`set_pipeline(Option<PipelineDeclaration>)`](crate::client::fluent_builders::UpdatePipeline::set_pipeline): <p>The name of the pipeline to be updated.</p>
    /// - On success, responds with [`UpdatePipelineOutput`](crate::output::UpdatePipelineOutput) with field(s):
    ///   - [`pipeline(Option<PipelineDeclaration>)`](crate::output::UpdatePipelineOutput::pipeline): <p>The structure of the updated pipeline.</p>
    /// - On failure, responds with [`SdkError<UpdatePipelineError>`](crate::error::UpdatePipelineError)
    pub fn update_pipeline(&self) -> fluent_builders::UpdatePipeline {
        fluent_builders::UpdatePipeline::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `AcknowledgeJob`.
    ///
    /// <p>Returns information about a specified job and whether that job has been received by the job worker. Used for custom actions only.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct AcknowledgeJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::acknowledge_job_input::Builder,
    }
    impl AcknowledgeJob {
        /// Creates a new `AcknowledgeJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AcknowledgeJobOutput,
            aws_smithy_http::result::SdkError<crate::error::AcknowledgeJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique system-generated ID of the job for which you want to confirm receipt.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input.into());
            self
        }
        /// <p>The unique system-generated ID of the job for which you want to confirm receipt.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
        /// <p>A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response of the <code>PollForJobs</code> request that returned this job.</p>
        pub fn nonce(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nonce(input.into());
            self
        }
        /// <p>A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response of the <code>PollForJobs</code> request that returned this job.</p>
        pub fn set_nonce(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_nonce(input);
            self
        }
    }
    /// Fluent builder constructing a request to `AcknowledgeThirdPartyJob`.
    ///
    /// <p>Confirms a job worker has received the specified job. Used for partner actions only.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct AcknowledgeThirdPartyJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::acknowledge_third_party_job_input::Builder,
    }
    impl AcknowledgeThirdPartyJob {
        /// Creates a new `AcknowledgeThirdPartyJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AcknowledgeThirdPartyJobOutput,
            aws_smithy_http::result::SdkError<crate::error::AcknowledgeThirdPartyJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique system-generated ID of the job.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input.into());
            self
        }
        /// <p>The unique system-generated ID of the job.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
        /// <p>A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response to a <code>GetThirdPartyJobDetails</code> request.</p>
        pub fn nonce(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nonce(input.into());
            self
        }
        /// <p>A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response to a <code>GetThirdPartyJobDetails</code> request.</p>
        pub fn set_nonce(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_nonce(input);
            self
        }
        /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input.into());
            self
        }
        /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateCustomActionType`.
    ///
    /// <p>Creates a new custom action that can be used in all pipelines associated with the AWS account. Only used for custom actions.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateCustomActionType {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_custom_action_type_input::Builder,
    }
    impl CreateCustomActionType {
        /// Creates a new `CreateCustomActionType`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateCustomActionTypeOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateCustomActionTypeError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The category of the custom action, such as a build action or a test action.</p>
        pub fn category(mut self, input: crate::model::ActionCategory) -> Self {
            self.inner = self.inner.category(input);
            self
        }
        /// <p>The category of the custom action, such as a build action or a test action.</p>
        pub fn set_category(
            mut self,
            input: std::option::Option<crate::model::ActionCategory>,
        ) -> Self {
            self.inner = self.inner.set_category(input);
            self
        }
        /// <p>The provider of the service used in the custom action, such as AWS CodeDeploy.</p>
        pub fn provider(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider(input.into());
            self
        }
        /// <p>The provider of the service used in the custom action, such as AWS CodeDeploy.</p>
        pub fn set_provider(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_provider(input);
            self
        }
        /// <p>The version identifier of the custom action.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version(input.into());
            self
        }
        /// <p>The version identifier of the custom action.</p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version(input);
            self
        }
        /// <p>URLs that provide users information about this custom action.</p>
        pub fn settings(mut self, input: crate::model::ActionTypeSettings) -> Self {
            self.inner = self.inner.settings(input);
            self
        }
        /// <p>URLs that provide users information about this custom action.</p>
        pub fn set_settings(
            mut self,
            input: std::option::Option<crate::model::ActionTypeSettings>,
        ) -> Self {
            self.inner = self.inner.set_settings(input);
            self
        }
        /// Appends an item to `configurationProperties`.
        ///
        /// To override the contents of this collection use [`set_configuration_properties`](Self::set_configuration_properties).
        ///
        /// <p>The configuration properties for the custom action.</p> <note>
        /// <p>You can refer to a name in the configuration properties of the custom action within the URL templates by following the format of {Config:name}, as long as the configuration property is both required and not secret. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/how-to-create-custom-action.html">Create a Custom Action for a Pipeline</a>.</p>
        /// </note>
        pub fn configuration_properties(
            mut self,
            input: crate::model::ActionConfigurationProperty,
        ) -> Self {
            self.inner = self.inner.configuration_properties(input);
            self
        }
        /// <p>The configuration properties for the custom action.</p> <note>
        /// <p>You can refer to a name in the configuration properties of the custom action within the URL templates by following the format of {Config:name}, as long as the configuration property is both required and not secret. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/how-to-create-custom-action.html">Create a Custom Action for a Pipeline</a>.</p>
        /// </note>
        pub fn set_configuration_properties(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ActionConfigurationProperty>>,
        ) -> Self {
            self.inner = self.inner.set_configuration_properties(input);
            self
        }
        /// <p>The details of the input artifact for the action, such as its commit ID.</p>
        pub fn input_artifact_details(mut self, input: crate::model::ArtifactDetails) -> Self {
            self.inner = self.inner.input_artifact_details(input);
            self
        }
        /// <p>The details of the input artifact for the action, such as its commit ID.</p>
        pub fn set_input_artifact_details(
            mut self,
            input: std::option::Option<crate::model::ArtifactDetails>,
        ) -> Self {
            self.inner = self.inner.set_input_artifact_details(input);
            self
        }
        /// <p>The details of the output artifact of the action, such as its commit ID.</p>
        pub fn output_artifact_details(mut self, input: crate::model::ArtifactDetails) -> Self {
            self.inner = self.inner.output_artifact_details(input);
            self
        }
        /// <p>The details of the output artifact of the action, such as its commit ID.</p>
        pub fn set_output_artifact_details(
            mut self,
            input: std::option::Option<crate::model::ArtifactDetails>,
        ) -> Self {
            self.inner = self.inner.set_output_artifact_details(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags for the custom action.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The tags for the custom action.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreatePipeline`.
    ///
    /// <p>Creates a pipeline.</p> <note>
    /// <p>In the pipeline structure, you must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreatePipeline {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_pipeline_input::Builder,
    }
    impl CreatePipeline {
        /// Creates a new `CreatePipeline`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreatePipelineOutput,
            aws_smithy_http::result::SdkError<crate::error::CreatePipelineError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Represents the structure of actions and stages to be performed in the pipeline. </p>
        pub fn pipeline(mut self, input: crate::model::PipelineDeclaration) -> Self {
            self.inner = self.inner.pipeline(input);
            self
        }
        /// <p>Represents the structure of actions and stages to be performed in the pipeline. </p>
        pub fn set_pipeline(
            mut self,
            input: std::option::Option<crate::model::PipelineDeclaration>,
        ) -> Self {
            self.inner = self.inner.set_pipeline(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags for the pipeline.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The tags for the pipeline.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteCustomActionType`.
    ///
    /// <p>Marks a custom action as deleted. <code>PollForJobs</code> for the custom action fails after the action is marked for deletion. Used for custom actions only.</p> <important>
    /// <p>To re-create a custom action after it has been deleted you must use a string in the version field that has never been used before. This string can be an incremented version number, for example. To restore a deleted custom action, use a JSON file that is identical to the deleted action, including the original string in the version field.</p>
    /// </important>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteCustomActionType {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_custom_action_type_input::Builder,
    }
    impl DeleteCustomActionType {
        /// Creates a new `DeleteCustomActionType`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteCustomActionTypeOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteCustomActionTypeError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The category of the custom action that you want to delete, such as source or deploy.</p>
        pub fn category(mut self, input: crate::model::ActionCategory) -> Self {
            self.inner = self.inner.category(input);
            self
        }
        /// <p>The category of the custom action that you want to delete, such as source or deploy.</p>
        pub fn set_category(
            mut self,
            input: std::option::Option<crate::model::ActionCategory>,
        ) -> Self {
            self.inner = self.inner.set_category(input);
            self
        }
        /// <p>The provider of the service used in the custom action, such as AWS CodeDeploy.</p>
        pub fn provider(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider(input.into());
            self
        }
        /// <p>The provider of the service used in the custom action, such as AWS CodeDeploy.</p>
        pub fn set_provider(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_provider(input);
            self
        }
        /// <p>The version of the custom action to delete.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version(input.into());
            self
        }
        /// <p>The version of the custom action to delete.</p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeletePipeline`.
    ///
    /// <p>Deletes the specified pipeline.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeletePipeline {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_pipeline_input::Builder,
    }
    impl DeletePipeline {
        /// Creates a new `DeletePipeline`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeletePipelineOutput,
            aws_smithy_http::result::SdkError<crate::error::DeletePipelineError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline to be deleted.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the pipeline to be deleted.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteWebhook`.
    ///
    /// <p>Deletes a previously created webhook by name. Deleting the webhook stops AWS CodePipeline from starting a pipeline every time an external event occurs. The API returns successfully when trying to delete a webhook that is already deleted. If a deleted webhook is re-created by calling PutWebhook with the same name, it will have a different URL.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteWebhook {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_webhook_input::Builder,
    }
    impl DeleteWebhook {
        /// Creates a new `DeleteWebhook`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteWebhookOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteWebhookError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the webhook you want to delete.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the webhook you want to delete.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeregisterWebhookWithThirdParty`.
    ///
    /// <p>Removes the connection between the webhook that was created by CodePipeline and the external tool with events to be detected. Currently supported only for webhooks that target an action type of GitHub.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeregisterWebhookWithThirdParty {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::deregister_webhook_with_third_party_input::Builder,
    }
    impl DeregisterWebhookWithThirdParty {
        /// Creates a new `DeregisterWebhookWithThirdParty`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterWebhookWithThirdPartyOutput,
            aws_smithy_http::result::SdkError<crate::error::DeregisterWebhookWithThirdPartyError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the webhook you want to deregister.</p>
        pub fn webhook_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.webhook_name(input.into());
            self
        }
        /// <p>The name of the webhook you want to deregister.</p>
        pub fn set_webhook_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_webhook_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DisableStageTransition`.
    ///
    /// <p>Prevents artifacts in a pipeline from transitioning to the next stage in the pipeline.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DisableStageTransition {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::disable_stage_transition_input::Builder,
    }
    impl DisableStageTransition {
        /// Creates a new `DisableStageTransition`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisableStageTransitionOutput,
            aws_smithy_http::result::SdkError<crate::error::DisableStageTransitionError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.</p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_name(input.into());
            self
        }
        /// <p>The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.</p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_name(input);
            self
        }
        /// <p>The name of the stage where you want to disable the inbound or outbound transition of artifacts.</p>
        pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stage_name(input.into());
            self
        }
        /// <p>The name of the stage where you want to disable the inbound or outbound transition of artifacts.</p>
        pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stage_name(input);
            self
        }
        /// <p>Specifies whether artifacts are prevented from transitioning into the stage and being processed by the actions in that stage (inbound), or prevented from transitioning from the stage after they have been processed by the actions in that stage (outbound).</p>
        pub fn transition_type(mut self, input: crate::model::StageTransitionType) -> Self {
            self.inner = self.inner.transition_type(input);
            self
        }
        /// <p>Specifies whether artifacts are prevented from transitioning into the stage and being processed by the actions in that stage (inbound), or prevented from transitioning from the stage after they have been processed by the actions in that stage (outbound).</p>
        pub fn set_transition_type(
            mut self,
            input: std::option::Option<crate::model::StageTransitionType>,
        ) -> Self {
            self.inner = self.inner.set_transition_type(input);
            self
        }
        /// <p>The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.</p>
        pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.reason(input.into());
            self
        }
        /// <p>The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.</p>
        pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_reason(input);
            self
        }
    }
    /// Fluent builder constructing a request to `EnableStageTransition`.
    ///
    /// <p>Enables artifacts in a pipeline to transition to a stage in a pipeline.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct EnableStageTransition {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::enable_stage_transition_input::Builder,
    }
    impl EnableStageTransition {
        /// Creates a new `EnableStageTransition`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::EnableStageTransitionOutput,
            aws_smithy_http::result::SdkError<crate::error::EnableStageTransitionError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline in which you want to enable the flow of artifacts from one stage to another.</p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_name(input.into());
            self
        }
        /// <p>The name of the pipeline in which you want to enable the flow of artifacts from one stage to another.</p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_name(input);
            self
        }
        /// <p>The name of the stage where you want to enable the transition of artifacts, either into the stage (inbound) or from that stage to the next stage (outbound).</p>
        pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stage_name(input.into());
            self
        }
        /// <p>The name of the stage where you want to enable the transition of artifacts, either into the stage (inbound) or from that stage to the next stage (outbound).</p>
        pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stage_name(input);
            self
        }
        /// <p>Specifies whether artifacts are allowed to enter the stage and be processed by the actions in that stage (inbound) or whether already processed artifacts are allowed to transition to the next stage (outbound).</p>
        pub fn transition_type(mut self, input: crate::model::StageTransitionType) -> Self {
            self.inner = self.inner.transition_type(input);
            self
        }
        /// <p>Specifies whether artifacts are allowed to enter the stage and be processed by the actions in that stage (inbound) or whether already processed artifacts are allowed to transition to the next stage (outbound).</p>
        pub fn set_transition_type(
            mut self,
            input: std::option::Option<crate::model::StageTransitionType>,
        ) -> Self {
            self.inner = self.inner.set_transition_type(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetActionType`.
    ///
    /// <p>Returns information about an action type created for an external provider, where the action is to be used by customers of the external provider. The action can be created with any supported integration model.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetActionType {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_action_type_input::Builder,
    }
    impl GetActionType {
        /// Creates a new `GetActionType`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetActionTypeOutput,
            aws_smithy_http::result::SdkError<crate::error::GetActionTypeError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Defines what kind of action can be taken in the stage. The following are the valid values:</p>
        /// <ul>
        /// <li> <p> <code>Source</code> </p> </li>
        /// <li> <p> <code>Build</code> </p> </li>
        /// <li> <p> <code>Test</code> </p> </li>
        /// <li> <p> <code>Deploy</code> </p> </li>
        /// <li> <p> <code>Approval</code> </p> </li>
        /// <li> <p> <code>Invoke</code> </p> </li>
        /// </ul>
        pub fn category(mut self, input: crate::model::ActionCategory) -> Self {
            self.inner = self.inner.category(input);
            self
        }
        /// <p>Defines what kind of action can be taken in the stage. The following are the valid values:</p>
        /// <ul>
        /// <li> <p> <code>Source</code> </p> </li>
        /// <li> <p> <code>Build</code> </p> </li>
        /// <li> <p> <code>Test</code> </p> </li>
        /// <li> <p> <code>Deploy</code> </p> </li>
        /// <li> <p> <code>Approval</code> </p> </li>
        /// <li> <p> <code>Invoke</code> </p> </li>
        /// </ul>
        pub fn set_category(
            mut self,
            input: std::option::Option<crate::model::ActionCategory>,
        ) -> Self {
            self.inner = self.inner.set_category(input);
            self
        }
        /// <p>The creator of an action type that was created with any supported integration model. There are two valid values: <code>AWS</code> and <code>ThirdParty</code>.</p>
        pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.owner(input.into());
            self
        }
        /// <p>The creator of an action type that was created with any supported integration model. There are two valid values: <code>AWS</code> and <code>ThirdParty</code>.</p>
        pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_owner(input);
            self
        }
        /// <p>The provider of the action type being called. The provider name is specified when the action type is created.</p>
        pub fn provider(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider(input.into());
            self
        }
        /// <p>The provider of the action type being called. The provider name is specified when the action type is created.</p>
        pub fn set_provider(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_provider(input);
            self
        }
        /// <p>A string that describes the action type version.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version(input.into());
            self
        }
        /// <p>A string that describes the action type version.</p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetJobDetails`.
    ///
    /// <p>Returns information about a job. Used for custom actions only.</p> <important>
    /// <p>When this API is called, AWS CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts. This API also returns any secret values defined for the action.</p>
    /// </important>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetJobDetails {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_job_details_input::Builder,
    }
    impl GetJobDetails {
        /// Creates a new `GetJobDetails`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetJobDetailsOutput,
            aws_smithy_http::result::SdkError<crate::error::GetJobDetailsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique system-generated ID for the job.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input.into());
            self
        }
        /// <p>The unique system-generated ID for the job.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetPipeline`.
    ///
    /// <p>Returns the metadata, structure, stages, and actions of a pipeline. Can be used to return the entire structure of a pipeline in JSON format, which can then be modified and used to update the pipeline structure with <code>UpdatePipeline</code>.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetPipeline {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_pipeline_input::Builder,
    }
    impl GetPipeline {
        /// Creates a new `GetPipeline`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetPipelineOutput,
            aws_smithy_http::result::SdkError<crate::error::GetPipelineError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline for which you want to get information. Pipeline names must be unique under an AWS user account.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the pipeline for which you want to get information. Pipeline names must be unique under an AWS user account.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The version number of the pipeline. If you do not specify a version, defaults to the current version.</p>
        pub fn version(mut self, input: i32) -> Self {
            self.inner = self.inner.version(input);
            self
        }
        /// <p>The version number of the pipeline. If you do not specify a version, defaults to the current version.</p>
        pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_version(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetPipelineExecution`.
    ///
    /// <p>Returns information about an execution of a pipeline, including details about artifacts, the pipeline execution ID, and the name, version, and status of the pipeline.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetPipelineExecution {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_pipeline_execution_input::Builder,
    }
    impl GetPipelineExecution {
        /// Creates a new `GetPipelineExecution`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetPipelineExecutionOutput,
            aws_smithy_http::result::SdkError<crate::error::GetPipelineExecutionError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline about which you want to get execution details.</p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_name(input.into());
            self
        }
        /// <p>The name of the pipeline about which you want to get execution details.</p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_name(input);
            self
        }
        /// <p>The ID of the pipeline execution about which you want to get execution details.</p>
        pub fn pipeline_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_execution_id(input.into());
            self
        }
        /// <p>The ID of the pipeline execution about which you want to get execution details.</p>
        pub fn set_pipeline_execution_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_execution_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetPipelineState`.
    ///
    /// <p>Returns information about the state of a pipeline, including the stages and actions.</p> <note>
    /// <p>Values returned in the <code>revisionId</code> and <code>revisionUrl</code> fields indicate the source revision information, such as the commit ID, for the current state.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetPipelineState {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_pipeline_state_input::Builder,
    }
    impl GetPipelineState {
        /// Creates a new `GetPipelineState`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetPipelineStateOutput,
            aws_smithy_http::result::SdkError<crate::error::GetPipelineStateError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline about which you want to get information.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the pipeline about which you want to get information.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetThirdPartyJobDetails`.
    ///
    /// <p>Requests the details of a job for a third party action. Used for partner actions only.</p> <important>
    /// <p>When this API is called, AWS CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts. This API also returns any secret values defined for the action.</p>
    /// </important>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetThirdPartyJobDetails {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_third_party_job_details_input::Builder,
    }
    impl GetThirdPartyJobDetails {
        /// Creates a new `GetThirdPartyJobDetails`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetThirdPartyJobDetailsOutput,
            aws_smithy_http::result::SdkError<crate::error::GetThirdPartyJobDetailsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique system-generated ID used for identifying the job.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input.into());
            self
        }
        /// <p>The unique system-generated ID used for identifying the job.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
        /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input.into());
            self
        }
        /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListActionExecutions`.
    ///
    /// <p>Lists the action executions that have occurred in a pipeline.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListActionExecutions {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_action_executions_input::Builder,
    }
    impl ListActionExecutions {
        /// Creates a new `ListActionExecutions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListActionExecutionsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListActionExecutionsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListActionExecutionsPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListActionExecutionsPaginator {
            crate::paginator::ListActionExecutionsPaginator::new(self.handle, self.inner)
        }
        /// <p> The name of the pipeline for which you want to list action execution history.</p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_name(input.into());
            self
        }
        /// <p> The name of the pipeline for which you want to list action execution history.</p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_name(input);
            self
        }
        /// <p>Input information used to filter action execution history.</p>
        pub fn filter(mut self, input: crate::model::ActionExecutionFilter) -> Self {
            self.inner = self.inner.filter(input);
            self
        }
        /// <p>Input information used to filter action execution history.</p>
        pub fn set_filter(
            mut self,
            input: std::option::Option<crate::model::ActionExecutionFilter>,
        ) -> Self {
            self.inner = self.inner.set_filter(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Action execution history is retained for up to 12 months, based on action execution start times. Default value is 100. </p> <note>
        /// <p>Detailed execution history is available for executions run on or after February 21, 2019.</p>
        /// </note>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Action execution history is retained for up to 12 months, based on action execution start times. Default value is 100. </p> <note>
        /// <p>Detailed execution history is available for executions run on or after February 21, 2019.</p>
        /// </note>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token that was returned from the previous <code>ListActionExecutions</code> call, which can be used to return the next set of action executions in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token that was returned from the previous <code>ListActionExecutions</code> call, which can be used to return the next set of action executions in the list.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListActionTypes`.
    ///
    /// <p>Gets a summary of all AWS CodePipeline action types associated with your account.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListActionTypes {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_action_types_input::Builder,
    }
    impl ListActionTypes {
        /// Creates a new `ListActionTypes`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListActionTypesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListActionTypesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListActionTypesPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListActionTypesPaginator {
            crate::paginator::ListActionTypesPaginator::new(self.handle, self.inner)
        }
        /// <p>Filters the list of action types to those created by a specified entity.</p>
        pub fn action_owner_filter(mut self, input: crate::model::ActionOwner) -> Self {
            self.inner = self.inner.action_owner_filter(input);
            self
        }
        /// <p>Filters the list of action types to those created by a specified entity.</p>
        pub fn set_action_owner_filter(
            mut self,
            input: std::option::Option<crate::model::ActionOwner>,
        ) -> Self {
            self.inner = self.inner.set_action_owner_filter(input);
            self
        }
        /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The Region to filter on for the list of action types.</p>
        pub fn region_filter(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.region_filter(input.into());
            self
        }
        /// <p>The Region to filter on for the list of action types.</p>
        pub fn set_region_filter(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_region_filter(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListPipelineExecutions`.
    ///
    /// <p>Gets a summary of the most recent executions for a pipeline.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListPipelineExecutions {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_pipeline_executions_input::Builder,
    }
    impl ListPipelineExecutions {
        /// Creates a new `ListPipelineExecutions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPipelineExecutionsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListPipelineExecutionsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListPipelineExecutionsPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListPipelineExecutionsPaginator {
            crate::paginator::ListPipelineExecutionsPaginator::new(self.handle, self.inner)
        }
        /// <p>The name of the pipeline for which you want to get execution summary information.</p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_name(input.into());
            self
        }
        /// <p>The name of the pipeline for which you want to get execution summary information.</p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_name(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token that was returned from the previous <code>ListPipelineExecutions</code> call, which can be used to return the next set of pipeline executions in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token that was returned from the previous <code>ListPipelineExecutions</code> call, which can be used to return the next set of pipeline executions in the list.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListPipelines`.
    ///
    /// <p>Gets a summary of all of the pipelines associated with your account.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListPipelines {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_pipelines_input::Builder,
    }
    impl ListPipelines {
        /// Creates a new `ListPipelines`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPipelinesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListPipelinesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListPipelinesPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListPipelinesPaginator {
            crate::paginator::ListPipelinesPaginator::new(self.handle, self.inner)
        }
        /// <p>An identifier that was returned from the previous list pipelines call. It can be used to return the next set of pipelines in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>An identifier that was returned from the previous list pipelines call. It can be used to return the next set of pipelines in the list.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of pipelines to return in a single call. To retrieve the remaining pipelines, make another call with the returned nextToken value. The minimum value you can specify is 1. The maximum accepted value is 1000.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of pipelines to return in a single call. To retrieve the remaining pipelines, make another call with the returned nextToken value. The minimum value you can specify is 1. The maximum accepted value is 1000.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTagsForResource`.
    ///
    /// <p>Gets the set of key-value pairs (metadata) that are used to manage the resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListTagsForResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl ListTagsForResource {
        /// Creates a new `ListTagsForResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListTagsForResourcePaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListTagsForResourcePaginator {
            crate::paginator::ListTagsForResourcePaginator::new(self.handle, self.inner)
        }
        /// <p>The Amazon Resource Name (ARN) of the resource to get tags for.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the resource to get tags for.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The token that was returned from the previous API call, which would be used to return the next page of the list. The ListTagsforResource call lists all available tags in one call and does not use pagination.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token that was returned from the previous API call, which would be used to return the next page of the list. The ListTagsforResource call lists all available tags in one call and does not use pagination.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return in a single call.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in a single call.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListWebhooks`.
    ///
    /// <p>Gets a listing of all the webhooks in this AWS Region for this account. The output lists all webhooks and includes the webhook URL and ARN and the configuration for each webhook.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListWebhooks {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_webhooks_input::Builder,
    }
    impl ListWebhooks {
        /// Creates a new `ListWebhooks`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListWebhooksOutput,
            aws_smithy_http::result::SdkError<crate::error::ListWebhooksError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListWebhooksPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListWebhooksPaginator {
            crate::paginator::ListWebhooksPaginator::new(self.handle, self.inner)
        }
        /// <p>The token that was returned from the previous ListWebhooks call, which can be used to return the next set of webhooks in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token that was returned from the previous ListWebhooks call, which can be used to return the next set of webhooks in the list.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PollForJobs`.
    ///
    /// <p>Returns information about any jobs for AWS CodePipeline to act on. <code>PollForJobs</code> is valid only for action types with "Custom" in the owner field. If the action type contains "AWS" or "ThirdParty" in the owner field, the <code>PollForJobs</code> action returns an error.</p> <important>
    /// <p>When this API is called, AWS CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts. This API also returns any secret values defined for the action.</p>
    /// </important>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PollForJobs {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::poll_for_jobs_input::Builder,
    }
    impl PollForJobs {
        /// Creates a new `PollForJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PollForJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::PollForJobsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Represents information about an action type.</p>
        pub fn action_type_id(mut self, input: crate::model::ActionTypeId) -> Self {
            self.inner = self.inner.action_type_id(input);
            self
        }
        /// <p>Represents information about an action type.</p>
        pub fn set_action_type_id(
            mut self,
            input: std::option::Option<crate::model::ActionTypeId>,
        ) -> Self {
            self.inner = self.inner.set_action_type_id(input);
            self
        }
        /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
        pub fn max_batch_size(mut self, input: i32) -> Self {
            self.inner = self.inner.max_batch_size(input);
            self
        }
        /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
        pub fn set_max_batch_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_batch_size(input);
            self
        }
        /// Adds a key-value pair to `queryParam`.
        ///
        /// To override the contents of this collection use [`set_query_param`](Self::set_query_param).
        ///
        /// <p>A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value are returned.</p>
        pub fn query_param(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.query_param(k.into(), v.into());
            self
        }
        /// <p>A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value are returned.</p>
        pub fn set_query_param(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_query_param(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PollForThirdPartyJobs`.
    ///
    /// <p>Determines whether there are any third party jobs for a job worker to act on. Used for partner actions only.</p> <important>
    /// <p>When this API is called, AWS CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts.</p>
    /// </important>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PollForThirdPartyJobs {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::poll_for_third_party_jobs_input::Builder,
    }
    impl PollForThirdPartyJobs {
        /// Creates a new `PollForThirdPartyJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PollForThirdPartyJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::PollForThirdPartyJobsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Represents information about an action type.</p>
        pub fn action_type_id(mut self, input: crate::model::ActionTypeId) -> Self {
            self.inner = self.inner.action_type_id(input);
            self
        }
        /// <p>Represents information about an action type.</p>
        pub fn set_action_type_id(
            mut self,
            input: std::option::Option<crate::model::ActionTypeId>,
        ) -> Self {
            self.inner = self.inner.set_action_type_id(input);
            self
        }
        /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
        pub fn max_batch_size(mut self, input: i32) -> Self {
            self.inner = self.inner.max_batch_size(input);
            self
        }
        /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
        pub fn set_max_batch_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_batch_size(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutActionRevision`.
    ///
    /// <p>Provides information to AWS CodePipeline about new revisions to a source.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PutActionRevision {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_action_revision_input::Builder,
    }
    impl PutActionRevision {
        /// Creates a new `PutActionRevision`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutActionRevisionOutput,
            aws_smithy_http::result::SdkError<crate::error::PutActionRevisionError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline that starts processing the revision to the source.</p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_name(input.into());
            self
        }
        /// <p>The name of the pipeline that starts processing the revision to the source.</p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_name(input);
            self
        }
        /// <p>The name of the stage that contains the action that acts on the revision.</p>
        pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stage_name(input.into());
            self
        }
        /// <p>The name of the stage that contains the action that acts on the revision.</p>
        pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stage_name(input);
            self
        }
        /// <p>The name of the action that processes the revision.</p>
        pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.action_name(input.into());
            self
        }
        /// <p>The name of the action that processes the revision.</p>
        pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_action_name(input);
            self
        }
        /// <p>Represents information about the version (or revision) of an action.</p>
        pub fn action_revision(mut self, input: crate::model::ActionRevision) -> Self {
            self.inner = self.inner.action_revision(input);
            self
        }
        /// <p>Represents information about the version (or revision) of an action.</p>
        pub fn set_action_revision(
            mut self,
            input: std::option::Option<crate::model::ActionRevision>,
        ) -> Self {
            self.inner = self.inner.set_action_revision(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutApprovalResult`.
    ///
    /// <p>Provides the response to a manual approval request to AWS CodePipeline. Valid responses include Approved and Rejected.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PutApprovalResult {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_approval_result_input::Builder,
    }
    impl PutApprovalResult {
        /// Creates a new `PutApprovalResult`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutApprovalResultOutput,
            aws_smithy_http::result::SdkError<crate::error::PutApprovalResultError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline that contains the action. </p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_name(input.into());
            self
        }
        /// <p>The name of the pipeline that contains the action. </p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_name(input);
            self
        }
        /// <p>The name of the stage that contains the action.</p>
        pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stage_name(input.into());
            self
        }
        /// <p>The name of the stage that contains the action.</p>
        pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stage_name(input);
            self
        }
        /// <p>The name of the action for which approval is requested.</p>
        pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.action_name(input.into());
            self
        }
        /// <p>The name of the action for which approval is requested.</p>
        pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_action_name(input);
            self
        }
        /// <p>Represents information about the result of the approval request.</p>
        pub fn result(mut self, input: crate::model::ApprovalResult) -> Self {
            self.inner = self.inner.result(input);
            self
        }
        /// <p>Represents information about the result of the approval request.</p>
        pub fn set_result(
            mut self,
            input: std::option::Option<crate::model::ApprovalResult>,
        ) -> Self {
            self.inner = self.inner.set_result(input);
            self
        }
        /// <p>The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <code>GetPipelineState</code> action. It is used to validate that the approval request corresponding to this token is still valid.</p>
        pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.token(input.into());
            self
        }
        /// <p>The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the <code>GetPipelineState</code> action. It is used to validate that the approval request corresponding to this token is still valid.</p>
        pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutJobFailureResult`.
    ///
    /// <p>Represents the failure of a job as returned to the pipeline by a job worker. Used for custom actions only.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PutJobFailureResult {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_job_failure_result_input::Builder,
    }
    impl PutJobFailureResult {
        /// Creates a new `PutJobFailureResult`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutJobFailureResultOutput,
            aws_smithy_http::result::SdkError<crate::error::PutJobFailureResultError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique system-generated ID of the job that failed. This is the same ID returned from <code>PollForJobs</code>.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input.into());
            self
        }
        /// <p>The unique system-generated ID of the job that failed. This is the same ID returned from <code>PollForJobs</code>.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
        /// <p>The details about the failure of a job.</p>
        pub fn failure_details(mut self, input: crate::model::FailureDetails) -> Self {
            self.inner = self.inner.failure_details(input);
            self
        }
        /// <p>The details about the failure of a job.</p>
        pub fn set_failure_details(
            mut self,
            input: std::option::Option<crate::model::FailureDetails>,
        ) -> Self {
            self.inner = self.inner.set_failure_details(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutJobSuccessResult`.
    ///
    /// <p>Represents the success of a job as returned to the pipeline by a job worker. Used for custom actions only.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PutJobSuccessResult {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_job_success_result_input::Builder,
    }
    impl PutJobSuccessResult {
        /// Creates a new `PutJobSuccessResult`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutJobSuccessResultOutput,
            aws_smithy_http::result::SdkError<crate::error::PutJobSuccessResultError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique system-generated ID of the job that succeeded. This is the same ID returned from <code>PollForJobs</code>.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input.into());
            self
        }
        /// <p>The unique system-generated ID of the job that succeeded. This is the same ID returned from <code>PollForJobs</code>.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
        /// <p>The ID of the current revision of the artifact successfully worked on by the job.</p>
        pub fn current_revision(mut self, input: crate::model::CurrentRevision) -> Self {
            self.inner = self.inner.current_revision(input);
            self
        }
        /// <p>The ID of the current revision of the artifact successfully worked on by the job.</p>
        pub fn set_current_revision(
            mut self,
            input: std::option::Option<crate::model::CurrentRevision>,
        ) -> Self {
            self.inner = self.inner.set_current_revision(input);
            self
        }
        /// <p>A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the custom action. When the action is complete, no continuation token should be supplied.</p>
        pub fn continuation_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.continuation_token(input.into());
            self
        }
        /// <p>A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the custom action. When the action is complete, no continuation token should be supplied.</p>
        pub fn set_continuation_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_continuation_token(input);
            self
        }
        /// <p>The execution details of the successful job, such as the actions taken by the job worker.</p>
        pub fn execution_details(mut self, input: crate::model::ExecutionDetails) -> Self {
            self.inner = self.inner.execution_details(input);
            self
        }
        /// <p>The execution details of the successful job, such as the actions taken by the job worker.</p>
        pub fn set_execution_details(
            mut self,
            input: std::option::Option<crate::model::ExecutionDetails>,
        ) -> Self {
            self.inner = self.inner.set_execution_details(input);
            self
        }
        /// Adds a key-value pair to `outputVariables`.
        ///
        /// To override the contents of this collection use [`set_output_variables`](Self::set_output_variables).
        ///
        /// <p>Key-value pairs produced as output by a job worker that can be made available to a downstream action configuration. <code>outputVariables</code> can be included only when there is no continuation token on the request.</p>
        pub fn output_variables(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.output_variables(k.into(), v.into());
            self
        }
        /// <p>Key-value pairs produced as output by a job worker that can be made available to a downstream action configuration. <code>outputVariables</code> can be included only when there is no continuation token on the request.</p>
        pub fn set_output_variables(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_output_variables(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutThirdPartyJobFailureResult`.
    ///
    /// <p>Represents the failure of a third party job as returned to the pipeline by a job worker. Used for partner actions only.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PutThirdPartyJobFailureResult {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_third_party_job_failure_result_input::Builder,
    }
    impl PutThirdPartyJobFailureResult {
        /// Creates a new `PutThirdPartyJobFailureResult`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutThirdPartyJobFailureResultOutput,
            aws_smithy_http::result::SdkError<crate::error::PutThirdPartyJobFailureResultError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the job that failed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input.into());
            self
        }
        /// <p>The ID of the job that failed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
        /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input.into());
            self
        }
        /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>Represents information about failure details.</p>
        pub fn failure_details(mut self, input: crate::model::FailureDetails) -> Self {
            self.inner = self.inner.failure_details(input);
            self
        }
        /// <p>Represents information about failure details.</p>
        pub fn set_failure_details(
            mut self,
            input: std::option::Option<crate::model::FailureDetails>,
        ) -> Self {
            self.inner = self.inner.set_failure_details(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutThirdPartyJobSuccessResult`.
    ///
    /// <p>Represents the success of a third party job as returned to the pipeline by a job worker. Used for partner actions only.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PutThirdPartyJobSuccessResult {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_third_party_job_success_result_input::Builder,
    }
    impl PutThirdPartyJobSuccessResult {
        /// Creates a new `PutThirdPartyJobSuccessResult`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutThirdPartyJobSuccessResultOutput,
            aws_smithy_http::result::SdkError<crate::error::PutThirdPartyJobSuccessResultError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input.into());
            self
        }
        /// <p>The ID of the job that successfully completed. This is the same ID returned from <code>PollForThirdPartyJobs</code>.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
        /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input.into());
            self
        }
        /// <p>The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>Represents information about a current revision.</p>
        pub fn current_revision(mut self, input: crate::model::CurrentRevision) -> Self {
            self.inner = self.inner.current_revision(input);
            self
        }
        /// <p>Represents information about a current revision.</p>
        pub fn set_current_revision(
            mut self,
            input: std::option::Option<crate::model::CurrentRevision>,
        ) -> Self {
            self.inner = self.inner.set_current_revision(input);
            self
        }
        /// <p>A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
        pub fn continuation_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.continuation_token(input.into());
            self
        }
        /// <p>A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.</p>
        pub fn set_continuation_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_continuation_token(input);
            self
        }
        /// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
        pub fn execution_details(mut self, input: crate::model::ExecutionDetails) -> Self {
            self.inner = self.inner.execution_details(input);
            self
        }
        /// <p>The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline. </p>
        pub fn set_execution_details(
            mut self,
            input: std::option::Option<crate::model::ExecutionDetails>,
        ) -> Self {
            self.inner = self.inner.set_execution_details(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutWebhook`.
    ///
    /// <p>Defines a webhook and returns a unique webhook URL generated by CodePipeline. This URL can be supplied to third party source hosting providers to call every time there's a code change. When CodePipeline receives a POST request on this URL, the pipeline defined in the webhook is started as long as the POST request satisfied the authentication and filtering requirements supplied when defining the webhook. RegisterWebhookWithThirdParty and DeregisterWebhookWithThirdParty APIs can be used to automatically configure supported third parties to call the generated webhook URL.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PutWebhook {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_webhook_input::Builder,
    }
    impl PutWebhook {
        /// Creates a new `PutWebhook`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutWebhookOutput,
            aws_smithy_http::result::SdkError<crate::error::PutWebhookError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.</p>
        pub fn webhook(mut self, input: crate::model::WebhookDefinition) -> Self {
            self.inner = self.inner.webhook(input);
            self
        }
        /// <p>The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.</p>
        pub fn set_webhook(
            mut self,
            input: std::option::Option<crate::model::WebhookDefinition>,
        ) -> Self {
            self.inner = self.inner.set_webhook(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags for the webhook.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The tags for the webhook.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RegisterWebhookWithThirdParty`.
    ///
    /// <p>Configures a connection between the webhook that was created and the external tool with events to be detected.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct RegisterWebhookWithThirdParty {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::register_webhook_with_third_party_input::Builder,
    }
    impl RegisterWebhookWithThirdParty {
        /// Creates a new `RegisterWebhookWithThirdParty`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterWebhookWithThirdPartyOutput,
            aws_smithy_http::result::SdkError<crate::error::RegisterWebhookWithThirdPartyError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of an existing webhook created with PutWebhook to register with a supported third party. </p>
        pub fn webhook_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.webhook_name(input.into());
            self
        }
        /// <p>The name of an existing webhook created with PutWebhook to register with a supported third party. </p>
        pub fn set_webhook_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_webhook_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RetryStageExecution`.
    ///
    /// <p>Resumes the pipeline execution by retrying the last failed actions in a stage. You can retry a stage immediately if any of the actions in the stage fail. When you retry, all actions that are still in progress continue working, and failed actions are triggered again.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct RetryStageExecution {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::retry_stage_execution_input::Builder,
    }
    impl RetryStageExecution {
        /// Creates a new `RetryStageExecution`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RetryStageExecutionOutput,
            aws_smithy_http::result::SdkError<crate::error::RetryStageExecutionError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline that contains the failed stage.</p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_name(input.into());
            self
        }
        /// <p>The name of the pipeline that contains the failed stage.</p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_name(input);
            self
        }
        /// <p>The name of the failed stage to be retried.</p>
        pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stage_name(input.into());
            self
        }
        /// <p>The name of the failed stage to be retried.</p>
        pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stage_name(input);
            self
        }
        /// <p>The ID of the pipeline execution in the failed stage to be retried. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId of the failed stage</p>
        pub fn pipeline_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_execution_id(input.into());
            self
        }
        /// <p>The ID of the pipeline execution in the failed stage to be retried. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId of the failed stage</p>
        pub fn set_pipeline_execution_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_execution_id(input);
            self
        }
        /// <p>The scope of the retry attempt. Currently, the only supported value is FAILED_ACTIONS.</p>
        pub fn retry_mode(mut self, input: crate::model::StageRetryMode) -> Self {
            self.inner = self.inner.retry_mode(input);
            self
        }
        /// <p>The scope of the retry attempt. Currently, the only supported value is FAILED_ACTIONS.</p>
        pub fn set_retry_mode(
            mut self,
            input: std::option::Option<crate::model::StageRetryMode>,
        ) -> Self {
            self.inner = self.inner.set_retry_mode(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StartPipelineExecution`.
    ///
    /// <p>Starts the specified pipeline. Specifically, it begins processing the latest commit to the source location specified as part of the pipeline.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct StartPipelineExecution {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::start_pipeline_execution_input::Builder,
    }
    impl StartPipelineExecution {
        /// Creates a new `StartPipelineExecution`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartPipelineExecutionOutput,
            aws_smithy_http::result::SdkError<crate::error::StartPipelineExecutionError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline to start.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the pipeline to start.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The system-generated unique ID used to identify a unique execution request.</p>
        pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(input.into());
            self
        }
        /// <p>The system-generated unique ID used to identify a unique execution request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StopPipelineExecution`.
    ///
    /// <p>Stops the specified pipeline execution. You choose to either stop the pipeline execution by completing in-progress actions without starting subsequent actions, or by abandoning in-progress actions. While completing or abandoning in-progress actions, the pipeline execution is in a <code>Stopping</code> state. After all in-progress actions are completed or abandoned, the pipeline execution is in a <code>Stopped</code> state.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct StopPipelineExecution {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::stop_pipeline_execution_input::Builder,
    }
    impl StopPipelineExecution {
        /// Creates a new `StopPipelineExecution`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopPipelineExecutionOutput,
            aws_smithy_http::result::SdkError<crate::error::StopPipelineExecutionError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline to stop.</p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_name(input.into());
            self
        }
        /// <p>The name of the pipeline to stop.</p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_name(input);
            self
        }
        /// <p>The ID of the pipeline execution to be stopped in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId.</p>
        pub fn pipeline_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pipeline_execution_id(input.into());
            self
        }
        /// <p>The ID of the pipeline execution to be stopped in the current stage. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId.</p>
        pub fn set_pipeline_execution_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pipeline_execution_id(input);
            self
        }
        /// <p>Use this option to stop the pipeline execution by abandoning, rather than finishing, in-progress actions.</p> <note>
        /// <p>This option can lead to failed or out-of-sequence tasks.</p>
        /// </note>
        pub fn abandon(mut self, input: bool) -> Self {
            self.inner = self.inner.abandon(input);
            self
        }
        /// <p>Use this option to stop the pipeline execution by abandoning, rather than finishing, in-progress actions.</p> <note>
        /// <p>This option can lead to failed or out-of-sequence tasks.</p>
        /// </note>
        pub fn set_abandon(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_abandon(input);
            self
        }
        /// <p>Use this option to enter comments, such as the reason the pipeline was stopped.</p>
        pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.reason(input.into());
            self
        }
        /// <p>Use this option to enter comments, such as the reason the pipeline was stopped.</p>
        pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_reason(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TagResource`.
    ///
    /// <p>Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct TagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl TagResource {
        /// Creates a new `TagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource you want to add tags to.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the resource you want to add tags to.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags you want to modify or add to the resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The tags you want to modify or add to the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UntagResource`.
    ///
    /// <p>Removes tags from an AWS resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UntagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl UntagResource {
        /// Creates a new `UntagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p> The Amazon Resource Name (ARN) of the resource to remove tags from.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the resource to remove tags from.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `tagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>The list of keys for the tags to be removed from the resource.</p>
        pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(input.into());
            self
        }
        /// <p>The list of keys for the tags to be removed from the resource.</p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateActionType`.
    ///
    /// <p>Updates an action type that was created with any supported integration model, where the action type is to be used by customers of the action type provider. Use a JSON file with the action definition and <code>UpdateActionType</code> to provide the full structure.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateActionType {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_action_type_input::Builder,
    }
    impl UpdateActionType {
        /// Creates a new `UpdateActionType`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateActionTypeOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateActionTypeError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The action type definition for the action type to be updated.</p>
        pub fn action_type(mut self, input: crate::model::ActionTypeDeclaration) -> Self {
            self.inner = self.inner.action_type(input);
            self
        }
        /// <p>The action type definition for the action type to be updated.</p>
        pub fn set_action_type(
            mut self,
            input: std::option::Option<crate::model::ActionTypeDeclaration>,
        ) -> Self {
            self.inner = self.inner.set_action_type(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdatePipeline`.
    ///
    /// <p>Updates a specified pipeline with edits or changes to its structure. Use a JSON file with the pipeline structure and <code>UpdatePipeline</code> to provide the full structure of the pipeline. Updating the pipeline increases the version number of the pipeline by 1.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdatePipeline {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_pipeline_input::Builder,
    }
    impl UpdatePipeline {
        /// Creates a new `UpdatePipeline`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdatePipelineOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdatePipelineError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the pipeline to be updated.</p>
        pub fn pipeline(mut self, input: crate::model::PipelineDeclaration) -> Self {
            self.inner = self.inner.pipeline(input);
            self
        }
        /// <p>The name of the pipeline to be updated.</p>
        pub fn set_pipeline(
            mut self,
            input: std::option::Option<crate::model::PipelineDeclaration>,
        ) -> Self {
            self.inner = self.inner.set_pipeline(input);
            self
        }
    }
}

impl Client {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn<C, E>(conf: crate::Config, conn: C) -> Self
    where
        C: aws_smithy_client::bounds::SmithyConnector<Error = E> + Send + 'static,
        E: Into<aws_smithy_http::result::ConnectorError>,
    {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::new()
            .connector(aws_smithy_client::erase::DynConnector::new(conn))
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ));
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::dyn_https().middleware(
            aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ),
        );
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        // the builder maintains a try-state. To avoid suppressing the warning when sleep is unset,
        // only set it if we actually have a sleep impl.
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
