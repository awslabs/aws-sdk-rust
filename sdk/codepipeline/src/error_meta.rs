// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The specified action cannot be found.</p>
    ActionNotFoundException(crate::error::ActionNotFoundException),
    /// <p>The specified action type cannot be found.</p>
    ActionTypeNotFoundException(crate::error::ActionTypeNotFoundException),
    /// <p>The approval action has already been approved or rejected.</p>
    ApprovalAlreadyCompletedException(crate::error::ApprovalAlreadyCompletedException),
    /// <p>Unable to modify the tag due to a simultaneous update request.</p>
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    /// <p>Your request cannot be handled because the pipeline is busy handling ongoing activities. Try again later.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The pipeline execution is already in a <code>Stopping</code> state. If you already chose to stop and wait, you cannot make that request again. You can choose to stop and abandon now, but be aware that this option can lead to failed tasks or out of sequence tasks. If you already chose to stop and abandon, you cannot make that request again.</p>
    DuplicatedStopRequestException(crate::error::DuplicatedStopRequestException),
    /// <p>The action declaration was specified in an invalid format.</p>
    InvalidActionDeclarationException(crate::error::InvalidActionDeclarationException),
    /// <p>The approval request already received a response or has expired.</p>
    InvalidApprovalTokenException(crate::error::InvalidApprovalTokenException),
    /// <p>The specified resource ARN is invalid.</p>
    InvalidArnException(crate::error::InvalidArnException),
    /// <p>Reserved for future use.</p>
    InvalidBlockerDeclarationException(crate::error::InvalidBlockerDeclarationException),
    /// <p>The client token was specified in an invalid format</p>
    InvalidClientTokenException(crate::error::InvalidClientTokenException),
    /// <p>The job was specified in an invalid format or cannot be found.</p>
    InvalidJobException(crate::error::InvalidJobException),
    /// <p>The job state was specified in an invalid format.</p>
    InvalidJobStateException(crate::error::InvalidJobStateException),
    /// <p>The next token was specified in an invalid format. Make sure that the next token you provide is the token returned by a previous call.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>The nonce was specified in an invalid format.</p>
    InvalidNonceException(crate::error::InvalidNonceException),
    /// <p>The stage declaration was specified in an invalid format.</p>
    InvalidStageDeclarationException(crate::error::InvalidStageDeclarationException),
    /// <p>The structure was specified in an invalid format.</p>
    InvalidStructureException(crate::error::InvalidStructureException),
    /// <p>The specified resource tags are invalid.</p>
    InvalidTagsException(crate::error::InvalidTagsException),
    /// <p>The specified authentication type is in an invalid format.</p>
    InvalidWebhookAuthenticationParametersException(
        crate::error::InvalidWebhookAuthenticationParametersException,
    ),
    /// <p>The specified event filter rule is in an invalid format.</p>
    InvalidWebhookFilterPatternException(crate::error::InvalidWebhookFilterPatternException),
    /// <p>The job was specified in an invalid format or cannot be found.</p>
    JobNotFoundException(crate::error::JobNotFoundException),
    /// <p>The number of pipelines associated with the AWS account has exceeded the limit allowed for the account.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The stage has failed in a later run of the pipeline and the pipelineExecutionId associated with the request is out of date.</p>
    NotLatestPipelineExecutionException(crate::error::NotLatestPipelineExecutionException),
    /// <p>Exceeded the total size limit for all variables in the pipeline.</p>
    OutputVariablesSizeExceededException(crate::error::OutputVariablesSizeExceededException),
    /// <p>The pipeline execution was specified in an invalid format or cannot be found, or an execution ID does not belong to the specified pipeline. </p>
    PipelineExecutionNotFoundException(crate::error::PipelineExecutionNotFoundException),
    /// <p>Unable to stop the pipeline execution. The execution might already be in a <code>Stopped</code> state, or it might no longer be in progress.</p>
    PipelineExecutionNotStoppableException(crate::error::PipelineExecutionNotStoppableException),
    /// <p>The specified pipeline name is already in use.</p>
    PipelineNameInUseException(crate::error::PipelineNameInUseException),
    /// <p>The pipeline was specified in an invalid format or cannot be found.</p>
    PipelineNotFoundException(crate::error::PipelineNotFoundException),
    /// <p>The pipeline version was specified in an invalid format or cannot be found.</p>
    PipelineVersionNotFoundException(crate::error::PipelineVersionNotFoundException),
    /// <p>The request failed because of an unknown error, exception, or failure.</p>
    RequestFailedException(crate::error::RequestFailedException),
    /// <p>The resource was specified in an invalid format.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The stage was specified in an invalid format or cannot be found.</p>
    StageNotFoundException(crate::error::StageNotFoundException),
    /// <p>Unable to retry. The pipeline structure or stage state might have changed while actions awaited retry, or the stage contains no failed actions.</p>
    StageNotRetryableException(crate::error::StageNotRetryableException),
    /// <p>The tags limit for a resource has been exceeded.</p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// <p>The validation was specified in an invalid format.</p>
    ValidationException(crate::error::ValidationException),
    /// <p>The specified webhook was entered in an invalid format or cannot be found.</p>
    WebhookNotFoundException(crate::error::WebhookNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ActionNotFoundException(inner) => inner.fmt(f),
            Error::ActionTypeNotFoundException(inner) => inner.fmt(f),
            Error::ApprovalAlreadyCompletedException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DuplicatedStopRequestException(inner) => inner.fmt(f),
            Error::InvalidActionDeclarationException(inner) => inner.fmt(f),
            Error::InvalidApprovalTokenException(inner) => inner.fmt(f),
            Error::InvalidArnException(inner) => inner.fmt(f),
            Error::InvalidBlockerDeclarationException(inner) => inner.fmt(f),
            Error::InvalidClientTokenException(inner) => inner.fmt(f),
            Error::InvalidJobException(inner) => inner.fmt(f),
            Error::InvalidJobStateException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidNonceException(inner) => inner.fmt(f),
            Error::InvalidStageDeclarationException(inner) => inner.fmt(f),
            Error::InvalidStructureException(inner) => inner.fmt(f),
            Error::InvalidTagsException(inner) => inner.fmt(f),
            Error::InvalidWebhookAuthenticationParametersException(inner) => inner.fmt(f),
            Error::InvalidWebhookFilterPatternException(inner) => inner.fmt(f),
            Error::JobNotFoundException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotLatestPipelineExecutionException(inner) => inner.fmt(f),
            Error::OutputVariablesSizeExceededException(inner) => inner.fmt(f),
            Error::PipelineExecutionNotFoundException(inner) => inner.fmt(f),
            Error::PipelineExecutionNotStoppableException(inner) => inner.fmt(f),
            Error::PipelineNameInUseException(inner) => inner.fmt(f),
            Error::PipelineNotFoundException(inner) => inner.fmt(f),
            Error::PipelineVersionNotFoundException(inner) => inner.fmt(f),
            Error::RequestFailedException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::StageNotFoundException(inner) => inner.fmt(f),
            Error::StageNotRetryableException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::WebhookNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcknowledgeJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AcknowledgeJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcknowledgeJobError> for Error {
    fn from(err: crate::error::AcknowledgeJobError) -> Self {
        match err {
            crate::error::AcknowledgeJobError::InvalidNonceException(inner) => {
                Error::InvalidNonceException(inner)
            }
            crate::error::AcknowledgeJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::AcknowledgeJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AcknowledgeJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcknowledgeThirdPartyJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AcknowledgeThirdPartyJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcknowledgeThirdPartyJobError> for Error {
    fn from(err: crate::error::AcknowledgeThirdPartyJobError) -> Self {
        match err {
            crate::error::AcknowledgeThirdPartyJobError::InvalidClientTokenException(inner) => {
                Error::InvalidClientTokenException(inner)
            }
            crate::error::AcknowledgeThirdPartyJobError::InvalidNonceException(inner) => {
                Error::InvalidNonceException(inner)
            }
            crate::error::AcknowledgeThirdPartyJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::AcknowledgeThirdPartyJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AcknowledgeThirdPartyJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCustomActionTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCustomActionTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCustomActionTypeError> for Error {
    fn from(err: crate::error::CreateCustomActionTypeError) -> Self {
        match err {
            crate::error::CreateCustomActionTypeError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateCustomActionTypeError::InvalidTagsException(inner) => {
                Error::InvalidTagsException(inner)
            }
            crate::error::CreateCustomActionTypeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateCustomActionTypeError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateCustomActionTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateCustomActionTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePipelineError> for Error {
    fn from(err: crate::error::CreatePipelineError) -> Self {
        match err {
            crate::error::CreatePipelineError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreatePipelineError::InvalidActionDeclarationException(inner) => {
                Error::InvalidActionDeclarationException(inner)
            }
            crate::error::CreatePipelineError::InvalidBlockerDeclarationException(inner) => {
                Error::InvalidBlockerDeclarationException(inner)
            }
            crate::error::CreatePipelineError::InvalidStageDeclarationException(inner) => {
                Error::InvalidStageDeclarationException(inner)
            }
            crate::error::CreatePipelineError::InvalidStructureException(inner) => {
                Error::InvalidStructureException(inner)
            }
            crate::error::CreatePipelineError::InvalidTagsException(inner) => {
                Error::InvalidTagsException(inner)
            }
            crate::error::CreatePipelineError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreatePipelineError::PipelineNameInUseException(inner) => {
                Error::PipelineNameInUseException(inner)
            }
            crate::error::CreatePipelineError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreatePipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCustomActionTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCustomActionTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCustomActionTypeError> for Error {
    fn from(err: crate::error::DeleteCustomActionTypeError) -> Self {
        match err {
            crate::error::DeleteCustomActionTypeError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteCustomActionTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteCustomActionTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePipelineError> for Error {
    fn from(err: crate::error::DeletePipelineError) -> Self {
        match err {
            crate::error::DeletePipelineError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeletePipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWebhookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWebhookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteWebhookError> for Error {
    fn from(err: crate::error::DeleteWebhookError) -> Self {
        match err {
            crate::error::DeleteWebhookError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteWebhookError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeregisterWebhookWithThirdPartyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeregisterWebhookWithThirdPartyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterWebhookWithThirdPartyError> for Error {
    fn from(err: crate::error::DeregisterWebhookWithThirdPartyError) -> Self {
        match err {
            crate::error::DeregisterWebhookWithThirdPartyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeregisterWebhookWithThirdPartyError::WebhookNotFoundException(inner) => {
                Error::WebhookNotFoundException(inner)
            }
            crate::error::DeregisterWebhookWithThirdPartyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisableStageTransitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisableStageTransitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableStageTransitionError> for Error {
    fn from(err: crate::error::DisableStageTransitionError) -> Self {
        match err {
            crate::error::DisableStageTransitionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::DisableStageTransitionError::StageNotFoundException(inner) => {
                Error::StageNotFoundException(inner)
            }
            crate::error::DisableStageTransitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisableStageTransitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EnableStageTransitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::EnableStageTransitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableStageTransitionError> for Error {
    fn from(err: crate::error::EnableStageTransitionError) -> Self {
        match err {
            crate::error::EnableStageTransitionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::EnableStageTransitionError::StageNotFoundException(inner) => {
                Error::StageNotFoundException(inner)
            }
            crate::error::EnableStageTransitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::EnableStageTransitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetActionTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetActionTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetActionTypeError> for Error {
    fn from(err: crate::error::GetActionTypeError) -> Self {
        match err {
            crate::error::GetActionTypeError::ActionTypeNotFoundException(inner) => {
                Error::ActionTypeNotFoundException(inner)
            }
            crate::error::GetActionTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetActionTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetJobDetailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetJobDetailsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetJobDetailsError> for Error {
    fn from(err: crate::error::GetJobDetailsError) -> Self {
        match err {
            crate::error::GetJobDetailsError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::GetJobDetailsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetJobDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPipelineError> for Error {
    fn from(err: crate::error::GetPipelineError) -> Self {
        match err {
            crate::error::GetPipelineError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::GetPipelineError::PipelineVersionNotFoundException(inner) => {
                Error::PipelineVersionNotFoundException(inner)
            }
            crate::error::GetPipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPipelineExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPipelineExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPipelineExecutionError> for Error {
    fn from(err: crate::error::GetPipelineExecutionError) -> Self {
        match err {
            crate::error::GetPipelineExecutionError::PipelineExecutionNotFoundException(inner) => {
                Error::PipelineExecutionNotFoundException(inner)
            }
            crate::error::GetPipelineExecutionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::GetPipelineExecutionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetPipelineExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPipelineStateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPipelineStateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPipelineStateError> for Error {
    fn from(err: crate::error::GetPipelineStateError) -> Self {
        match err {
            crate::error::GetPipelineStateError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::GetPipelineStateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetPipelineStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetThirdPartyJobDetailsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetThirdPartyJobDetailsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetThirdPartyJobDetailsError> for Error {
    fn from(err: crate::error::GetThirdPartyJobDetailsError) -> Self {
        match err {
            crate::error::GetThirdPartyJobDetailsError::InvalidClientTokenException(inner) => {
                Error::InvalidClientTokenException(inner)
            }
            crate::error::GetThirdPartyJobDetailsError::InvalidJobException(inner) => {
                Error::InvalidJobException(inner)
            }
            crate::error::GetThirdPartyJobDetailsError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::GetThirdPartyJobDetailsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetThirdPartyJobDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListActionExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListActionExecutionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListActionExecutionsError> for Error {
    fn from(err: crate::error::ListActionExecutionsError) -> Self {
        match err {
            crate::error::ListActionExecutionsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListActionExecutionsError::PipelineExecutionNotFoundException(inner) => {
                Error::PipelineExecutionNotFoundException(inner)
            }
            crate::error::ListActionExecutionsError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::ListActionExecutionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListActionExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListActionTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListActionTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListActionTypesError> for Error {
    fn from(err: crate::error::ListActionTypesError) -> Self {
        match err {
            crate::error::ListActionTypesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListActionTypesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListActionTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPipelineExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPipelineExecutionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPipelineExecutionsError> for Error {
    fn from(err: crate::error::ListPipelineExecutionsError) -> Self {
        match err {
            crate::error::ListPipelineExecutionsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListPipelineExecutionsError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::ListPipelineExecutionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPipelineExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPipelinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPipelinesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPipelinesError> for Error {
    fn from(err: crate::error::ListPipelinesError) -> Self {
        match err {
            crate::error::ListPipelinesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListPipelinesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPipelinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWebhooksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWebhooksError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWebhooksError> for Error {
    fn from(err: crate::error::ListWebhooksError) -> Self {
        match err {
            crate::error::ListWebhooksError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListWebhooksError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListWebhooksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PollForJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PollForJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PollForJobsError> for Error {
    fn from(err: crate::error::PollForJobsError) -> Self {
        match err {
            crate::error::PollForJobsError::ActionTypeNotFoundException(inner) => {
                Error::ActionTypeNotFoundException(inner)
            }
            crate::error::PollForJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PollForJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PollForThirdPartyJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PollForThirdPartyJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PollForThirdPartyJobsError> for Error {
    fn from(err: crate::error::PollForThirdPartyJobsError) -> Self {
        match err {
            crate::error::PollForThirdPartyJobsError::ActionTypeNotFoundException(inner) => {
                Error::ActionTypeNotFoundException(inner)
            }
            crate::error::PollForThirdPartyJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PollForThirdPartyJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutActionRevisionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutActionRevisionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutActionRevisionError> for Error {
    fn from(err: crate::error::PutActionRevisionError) -> Self {
        match err {
            crate::error::PutActionRevisionError::ActionNotFoundException(inner) => {
                Error::ActionNotFoundException(inner)
            }
            crate::error::PutActionRevisionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::PutActionRevisionError::StageNotFoundException(inner) => {
                Error::StageNotFoundException(inner)
            }
            crate::error::PutActionRevisionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutActionRevisionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutApprovalResultError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutApprovalResultError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutApprovalResultError> for Error {
    fn from(err: crate::error::PutApprovalResultError) -> Self {
        match err {
            crate::error::PutApprovalResultError::ActionNotFoundException(inner) => {
                Error::ActionNotFoundException(inner)
            }
            crate::error::PutApprovalResultError::ApprovalAlreadyCompletedException(inner) => {
                Error::ApprovalAlreadyCompletedException(inner)
            }
            crate::error::PutApprovalResultError::InvalidApprovalTokenException(inner) => {
                Error::InvalidApprovalTokenException(inner)
            }
            crate::error::PutApprovalResultError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::PutApprovalResultError::StageNotFoundException(inner) => {
                Error::StageNotFoundException(inner)
            }
            crate::error::PutApprovalResultError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutApprovalResultError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutJobFailureResultError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutJobFailureResultError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutJobFailureResultError> for Error {
    fn from(err: crate::error::PutJobFailureResultError) -> Self {
        match err {
            crate::error::PutJobFailureResultError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::PutJobFailureResultError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::PutJobFailureResultError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutJobFailureResultError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutJobSuccessResultError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutJobSuccessResultError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutJobSuccessResultError> for Error {
    fn from(err: crate::error::PutJobSuccessResultError) -> Self {
        match err {
            crate::error::PutJobSuccessResultError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::PutJobSuccessResultError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::PutJobSuccessResultError::OutputVariablesSizeExceededException(inner) => {
                Error::OutputVariablesSizeExceededException(inner)
            }
            crate::error::PutJobSuccessResultError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutJobSuccessResultError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutThirdPartyJobFailureResultError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutThirdPartyJobFailureResultError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutThirdPartyJobFailureResultError> for Error {
    fn from(err: crate::error::PutThirdPartyJobFailureResultError) -> Self {
        match err {
            crate::error::PutThirdPartyJobFailureResultError::InvalidClientTokenException(
                inner,
            ) => Error::InvalidClientTokenException(inner),
            crate::error::PutThirdPartyJobFailureResultError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::PutThirdPartyJobFailureResultError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::PutThirdPartyJobFailureResultError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutThirdPartyJobFailureResultError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutThirdPartyJobSuccessResultError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutThirdPartyJobSuccessResultError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutThirdPartyJobSuccessResultError> for Error {
    fn from(err: crate::error::PutThirdPartyJobSuccessResultError) -> Self {
        match err {
            crate::error::PutThirdPartyJobSuccessResultError::InvalidClientTokenException(
                inner,
            ) => Error::InvalidClientTokenException(inner),
            crate::error::PutThirdPartyJobSuccessResultError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::PutThirdPartyJobSuccessResultError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::PutThirdPartyJobSuccessResultError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutThirdPartyJobSuccessResultError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutWebhookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutWebhookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutWebhookError> for Error {
    fn from(err: crate::error::PutWebhookError) -> Self {
        match err {
            crate::error::PutWebhookError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::PutWebhookError::InvalidTagsException(inner) => {
                Error::InvalidTagsException(inner)
            }
            crate::error::PutWebhookError::InvalidWebhookAuthenticationParametersException(
                inner,
            ) => Error::InvalidWebhookAuthenticationParametersException(inner),
            crate::error::PutWebhookError::InvalidWebhookFilterPatternException(inner) => {
                Error::InvalidWebhookFilterPatternException(inner)
            }
            crate::error::PutWebhookError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutWebhookError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::PutWebhookError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::PutWebhookError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterWebhookWithThirdPartyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterWebhookWithThirdPartyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterWebhookWithThirdPartyError> for Error {
    fn from(err: crate::error::RegisterWebhookWithThirdPartyError) -> Self {
        match err {
            crate::error::RegisterWebhookWithThirdPartyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RegisterWebhookWithThirdPartyError::WebhookNotFoundException(inner) => {
                Error::WebhookNotFoundException(inner)
            }
            crate::error::RegisterWebhookWithThirdPartyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RetryStageExecutionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RetryStageExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RetryStageExecutionError> for Error {
    fn from(err: crate::error::RetryStageExecutionError) -> Self {
        match err {
            crate::error::RetryStageExecutionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RetryStageExecutionError::NotLatestPipelineExecutionException(inner) => {
                Error::NotLatestPipelineExecutionException(inner)
            }
            crate::error::RetryStageExecutionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::RetryStageExecutionError::StageNotFoundException(inner) => {
                Error::StageNotFoundException(inner)
            }
            crate::error::RetryStageExecutionError::StageNotRetryableException(inner) => {
                Error::StageNotRetryableException(inner)
            }
            crate::error::RetryStageExecutionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RetryStageExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartPipelineExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartPipelineExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartPipelineExecutionError> for Error {
    fn from(err: crate::error::StartPipelineExecutionError) -> Self {
        match err {
            crate::error::StartPipelineExecutionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StartPipelineExecutionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::StartPipelineExecutionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartPipelineExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopPipelineExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopPipelineExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopPipelineExecutionError> for Error {
    fn from(err: crate::error::StopPipelineExecutionError) -> Self {
        match err {
            crate::error::StopPipelineExecutionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StopPipelineExecutionError::DuplicatedStopRequestException(inner) => {
                Error::DuplicatedStopRequestException(inner)
            }
            crate::error::StopPipelineExecutionError::PipelineExecutionNotStoppableException(
                inner,
            ) => Error::PipelineExecutionNotStoppableException(inner),
            crate::error::StopPipelineExecutionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::StopPipelineExecutionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StopPipelineExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagResourceError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::TagResourceError::InvalidTagsException(inner) => {
                Error::InvalidTagsException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagResourceError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::UntagResourceError::InvalidTagsException(inner) => {
                Error::InvalidTagsException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateActionTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateActionTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateActionTypeError> for Error {
    fn from(err: crate::error::UpdateActionTypeError) -> Self {
        match err {
            crate::error::UpdateActionTypeError::ActionTypeNotFoundException(inner) => {
                Error::ActionTypeNotFoundException(inner)
            }
            crate::error::UpdateActionTypeError::RequestFailedException(inner) => {
                Error::RequestFailedException(inner)
            }
            crate::error::UpdateActionTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateActionTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdatePipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePipelineError> for Error {
    fn from(err: crate::error::UpdatePipelineError) -> Self {
        match err {
            crate::error::UpdatePipelineError::InvalidActionDeclarationException(inner) => {
                Error::InvalidActionDeclarationException(inner)
            }
            crate::error::UpdatePipelineError::InvalidBlockerDeclarationException(inner) => {
                Error::InvalidBlockerDeclarationException(inner)
            }
            crate::error::UpdatePipelineError::InvalidStageDeclarationException(inner) => {
                Error::InvalidStageDeclarationException(inner)
            }
            crate::error::UpdatePipelineError::InvalidStructureException(inner) => {
                Error::InvalidStructureException(inner)
            }
            crate::error::UpdatePipelineError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdatePipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ActionNotFoundException(e) => e.request_id(),
            Self::ActionTypeNotFoundException(e) => e.request_id(),
            Self::ApprovalAlreadyCompletedException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DuplicatedStopRequestException(e) => e.request_id(),
            Self::InvalidActionDeclarationException(e) => e.request_id(),
            Self::InvalidApprovalTokenException(e) => e.request_id(),
            Self::InvalidArnException(e) => e.request_id(),
            Self::InvalidBlockerDeclarationException(e) => e.request_id(),
            Self::InvalidClientTokenException(e) => e.request_id(),
            Self::InvalidJobException(e) => e.request_id(),
            Self::InvalidJobStateException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidNonceException(e) => e.request_id(),
            Self::InvalidStageDeclarationException(e) => e.request_id(),
            Self::InvalidStructureException(e) => e.request_id(),
            Self::InvalidTagsException(e) => e.request_id(),
            Self::InvalidWebhookAuthenticationParametersException(e) => e.request_id(),
            Self::InvalidWebhookFilterPatternException(e) => e.request_id(),
            Self::JobNotFoundException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotLatestPipelineExecutionException(e) => e.request_id(),
            Self::OutputVariablesSizeExceededException(e) => e.request_id(),
            Self::PipelineExecutionNotFoundException(e) => e.request_id(),
            Self::PipelineExecutionNotStoppableException(e) => e.request_id(),
            Self::PipelineNameInUseException(e) => e.request_id(),
            Self::PipelineNotFoundException(e) => e.request_id(),
            Self::PipelineVersionNotFoundException(e) => e.request_id(),
            Self::RequestFailedException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::StageNotFoundException(e) => e.request_id(),
            Self::StageNotRetryableException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::WebhookNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
