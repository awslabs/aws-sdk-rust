// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_canary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCanaryInput,
) {
    if let Some(var_1) = &input.artifact_s3_location {
        object.key("ArtifactS3Location").string(var_1);
    }
    if let Some(var_2) = &input.code {
        let mut object_3 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_code_input(&mut object_3, var_2);
        object_3.finish();
    }
    if let Some(var_4) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_4);
    }
    if let Some(var_5) = &input.failure_retention_period_in_days {
        object.key("FailureRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.name {
        object.key("Name").string(var_6);
    }
    if let Some(var_7) = &input.run_config {
        let mut object_8 = object.key("RunConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_run_config_input(
            &mut object_8,
            var_7,
        );
        object_8.finish();
    }
    if let Some(var_9) = &input.runtime_version {
        object.key("RuntimeVersion").string(var_9);
    }
    if let Some(var_10) = &input.schedule {
        let mut object_11 = object.key("Schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_schedule_input(
            &mut object_11,
            var_10,
        );
        object_11.finish();
    }
    if let Some(var_12) = &input.success_retention_period_in_days {
        object.key("SuccessRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.tags {
        let mut object_14 = object.key("Tags").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15).string(value_16);
            }
        }
        object_14.finish();
    }
    if let Some(var_17) = &input.vpc_config {
        let mut object_18 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config_input(&mut object_18, var_17);
        object_18.finish();
    }
}

pub fn serialize_structure_crate_input_describe_canaries_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCanariesInput,
) {
    if let Some(var_19) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.next_token {
        object.key("NextToken").string(var_20);
    }
}

pub fn serialize_structure_crate_input_describe_canaries_last_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCanariesLastRunInput,
) {
    if let Some(var_21) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.next_token {
        object.key("NextToken").string(var_22);
    }
}

pub fn serialize_structure_crate_input_describe_runtime_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRuntimeVersionsInput,
) {
    if let Some(var_23) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    if let Some(var_24) = &input.next_token {
        object.key("NextToken").string(var_24);
    }
}

pub fn serialize_structure_crate_input_get_canary_runs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCanaryRunsInput,
) {
    if let Some(var_25) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.next_token {
        object.key("NextToken").string(var_26);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_27) = &input.tags {
        let mut object_28 = object.key("Tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29).string(value_30);
            }
        }
        object_28.finish();
    }
}

pub fn serialize_structure_crate_input_update_canary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCanaryInput,
) {
    if let Some(var_31) = &input.code {
        let mut object_32 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_code_input(&mut object_32, var_31);
        object_32.finish();
    }
    if let Some(var_33) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_33);
    }
    if let Some(var_34) = &input.failure_retention_period_in_days {
        object.key("FailureRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_34).into()),
        );
    }
    if let Some(var_35) = &input.run_config {
        let mut object_36 = object.key("RunConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_run_config_input(
            &mut object_36,
            var_35,
        );
        object_36.finish();
    }
    if let Some(var_37) = &input.runtime_version {
        object.key("RuntimeVersion").string(var_37);
    }
    if let Some(var_38) = &input.schedule {
        let mut object_39 = object.key("Schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_schedule_input(
            &mut object_39,
            var_38,
        );
        object_39.finish();
    }
    if let Some(var_40) = &input.success_retention_period_in_days {
        object.key("SuccessRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_40).into()),
        );
    }
    if let Some(var_41) = &input.visual_reference {
        let mut object_42 = object.key("VisualReference").start_object();
        crate::json_ser::serialize_structure_crate_model_visual_reference_input(
            &mut object_42,
            var_41,
        );
        object_42.finish();
    }
    if let Some(var_43) = &input.vpc_config {
        let mut object_44 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config_input(&mut object_44, var_43);
        object_44.finish();
    }
}

pub fn serialize_structure_crate_model_canary_code_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CanaryCodeInput,
) {
    if let Some(var_45) = &input.s3_bucket {
        object.key("S3Bucket").string(var_45);
    }
    if let Some(var_46) = &input.s3_key {
        object.key("S3Key").string(var_46);
    }
    if let Some(var_47) = &input.s3_version {
        object.key("S3Version").string(var_47);
    }
    if let Some(var_48) = &input.zip_file {
        object
            .key("ZipFile")
            .string_unchecked(&smithy_types::base64::encode(var_48));
    }
    if let Some(var_49) = &input.handler {
        object.key("Handler").string(var_49);
    }
}

pub fn serialize_structure_crate_model_canary_run_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CanaryRunConfigInput,
) {
    if let Some(var_50) = &input.timeout_in_seconds {
        object.key("TimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_50).into()),
        );
    }
    if let Some(var_51) = &input.memory_in_mb {
        object.key("MemoryInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    if let Some(var_52) = &input.active_tracing {
        object.key("ActiveTracing").boolean(*var_52);
    }
    if let Some(var_53) = &input.environment_variables {
        let mut object_54 = object.key("EnvironmentVariables").start_object();
        for (key_55, value_56) in var_53 {
            {
                object_54.key(key_55).string(value_56);
            }
        }
        object_54.finish();
    }
}

pub fn serialize_structure_crate_model_canary_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CanaryScheduleInput,
) {
    if let Some(var_57) = &input.expression {
        object.key("Expression").string(var_57);
    }
    if let Some(var_58) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_58).into()),
        );
    }
}

pub fn serialize_structure_crate_model_vpc_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfigInput,
) {
    if let Some(var_59) = &input.subnet_ids {
        let mut array_60 = object.key("SubnetIds").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61);
            }
        }
        array_60.finish();
    }
    if let Some(var_62) = &input.security_group_ids {
        let mut array_63 = object.key("SecurityGroupIds").start_array();
        for item_64 in var_62 {
            {
                array_63.value().string(item_64);
            }
        }
        array_63.finish();
    }
}

pub fn serialize_structure_crate_model_visual_reference_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VisualReferenceInput,
) {
    if let Some(var_65) = &input.base_screenshots {
        let mut array_66 = object.key("BaseScreenshots").start_array();
        for item_67 in var_65 {
            {
                let mut object_68 = array_66.value().start_object();
                crate::json_ser::serialize_structure_crate_model_base_screenshot(
                    &mut object_68,
                    item_67,
                );
                object_68.finish();
            }
        }
        array_66.finish();
    }
    if let Some(var_69) = &input.base_canary_run_id {
        object.key("BaseCanaryRunId").string(var_69);
    }
}

pub fn serialize_structure_crate_model_base_screenshot(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BaseScreenshot,
) {
    if let Some(var_70) = &input.screenshot_name {
        object.key("ScreenshotName").string(var_70);
    }
    if let Some(var_71) = &input.ignore_coordinates {
        let mut array_72 = object.key("IgnoreCoordinates").start_array();
        for item_73 in var_71 {
            {
                array_72.value().string(item_73);
            }
        }
        array_72.finish();
    }
}
