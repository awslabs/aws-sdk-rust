// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates a canary. Canaries are scripts that monitor your endpoints and APIs from the
/// outside-in. Canaries help you check the availability and latency of your web services and
/// troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and
/// metrics. You can set up a canary to run continuously or just once. </p>
/// <p>Do not use <code>CreateCanary</code> to modify an existing canary. Use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_UpdateCanary.html">UpdateCanary</a> instead.</p>
/// <p>To create canaries, you must have the <code>CloudWatchSyntheticsFullAccess</code> policy.
/// If you are creating a new IAM role for the canary, you also need the
/// the <code>iam:CreateRole</code>, <code>iam:CreatePolicy</code> and
/// <code>iam:AttachRolePolicy</code> permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Roles">Necessary
/// Roles and Permissions</a>.</p>
/// <p>Do not include secrets or proprietary information in your canary names. The canary name
/// makes up part of the Amazon Resource Name (ARN) for the canary, and the ARN is included in
/// outbound calls over the internet. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html">Security
/// Considerations for Synthetics Canaries</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCanary {
    _private: (),
}
impl CreateCanary {
    /// Creates a new builder-style object to manufacture [`CreateCanaryInput`](crate::input::CreateCanaryInput)
    pub fn builder() -> crate::input::create_canary_input::Builder {
        crate::input::create_canary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCanary {
    type Output =
        std::result::Result<crate::output::CreateCanaryOutput, crate::error::CreateCanaryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_canary_error(response)
        } else {
            crate::operation_deser::parse_create_canary_response(response)
        }
    }
}

/// <p>Permanently deletes the specified canary.</p>
/// <p>When you delete a canary, resources used and created by the canary are not automatically deleted. After you delete a canary that you do not intend to
/// use again, you
/// should also delete the following:</p>
/// <ul>
/// <li>
/// <p>The Lambda functions and layers used by this canary. These have the prefix
/// <code>cwsyn-<i>MyCanaryName</i>
/// </code>.</p>
/// </li>
/// <li>
/// <p>The CloudWatch alarms created for this canary. These alarms have a name of
/// <code>Synthetics-SharpDrop-Alarm-<i>MyCanaryName</i>
/// </code>.</p>
/// </li>
/// <li>
/// <p>Amazon S3 objects and buckets, such as the canary's artifact location.</p>
/// </li>
/// <li>
/// <p>IAM roles created for the canary. If they were created in the console, these roles
/// have the name <code>
/// role/service-role/CloudWatchSyntheticsRole-<i>MyCanaryName</i>
/// </code>.</p>
/// </li>
/// <li>
/// <p>CloudWatch Logs log groups created for the canary. These logs groups have the name
/// <code>/aws/lambda/cwsyn-<i>MyCanaryName</i>
/// </code>. </p>
/// </li>
/// </ul>
/// <p>Before you delete a canary, you might want to use <code>GetCanary</code> to display
/// the information about this canary. Make
/// note of the information returned by this operation so that you can delete these resources
/// after you delete the canary.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCanary {
    _private: (),
}
impl DeleteCanary {
    /// Creates a new builder-style object to manufacture [`DeleteCanaryInput`](crate::input::DeleteCanaryInput)
    pub fn builder() -> crate::input::delete_canary_input::Builder {
        crate::input::delete_canary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteCanary {
    type Output =
        std::result::Result<crate::output::DeleteCanaryOutput, crate::error::DeleteCanaryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_canary_error(response)
        } else {
            crate::operation_deser::parse_delete_canary_response(response)
        }
    }
}

/// <p>This operation returns a list of the canaries in your account, along with full details
/// about each canary.</p>
/// <p>This operation does not have resource-level authorization, so if a user is able to use
/// <code>DescribeCanaries</code>, the user can see all of the canaries in the account. A
/// deny policy can only be used to restrict access to all canaries. It cannot be used on
/// specific resources. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCanaries {
    _private: (),
}
impl DescribeCanaries {
    /// Creates a new builder-style object to manufacture [`DescribeCanariesInput`](crate::input::DescribeCanariesInput)
    pub fn builder() -> crate::input::describe_canaries_input::Builder {
        crate::input::describe_canaries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCanaries {
    type Output = std::result::Result<
        crate::output::DescribeCanariesOutput,
        crate::error::DescribeCanariesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_canaries_error(response)
        } else {
            crate::operation_deser::parse_describe_canaries_response(response)
        }
    }
}

/// <p>Use this operation to see information from the most recent run of each canary that you have created.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCanariesLastRun {
    _private: (),
}
impl DescribeCanariesLastRun {
    /// Creates a new builder-style object to manufacture [`DescribeCanariesLastRunInput`](crate::input::DescribeCanariesLastRunInput)
    pub fn builder() -> crate::input::describe_canaries_last_run_input::Builder {
        crate::input::describe_canaries_last_run_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCanariesLastRun {
    type Output = std::result::Result<
        crate::output::DescribeCanariesLastRunOutput,
        crate::error::DescribeCanariesLastRunError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_canaries_last_run_error(response)
        } else {
            crate::operation_deser::parse_describe_canaries_last_run_response(response)
        }
    }
}

/// <p>Returns a list of Synthetics canary runtime versions. For more information,
/// see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
/// Canary Runtime Versions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRuntimeVersions {
    _private: (),
}
impl DescribeRuntimeVersions {
    /// Creates a new builder-style object to manufacture [`DescribeRuntimeVersionsInput`](crate::input::DescribeRuntimeVersionsInput)
    pub fn builder() -> crate::input::describe_runtime_versions_input::Builder {
        crate::input::describe_runtime_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRuntimeVersions {
    type Output = std::result::Result<
        crate::output::DescribeRuntimeVersionsOutput,
        crate::error::DescribeRuntimeVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_runtime_versions_error(response)
        } else {
            crate::operation_deser::parse_describe_runtime_versions_response(response)
        }
    }
}

/// <p>Retrieves complete information about one canary. You must specify
/// the name of the canary that you want. To get a list of canaries
/// and their names, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCanary {
    _private: (),
}
impl GetCanary {
    /// Creates a new builder-style object to manufacture [`GetCanaryInput`](crate::input::GetCanaryInput)
    pub fn builder() -> crate::input::get_canary_input::Builder {
        crate::input::get_canary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCanary {
    type Output = std::result::Result<crate::output::GetCanaryOutput, crate::error::GetCanaryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_canary_error(response)
        } else {
            crate::operation_deser::parse_get_canary_response(response)
        }
    }
}

/// <p>Retrieves a list of runs for a specified canary.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCanaryRuns {
    _private: (),
}
impl GetCanaryRuns {
    /// Creates a new builder-style object to manufacture [`GetCanaryRunsInput`](crate::input::GetCanaryRunsInput)
    pub fn builder() -> crate::input::get_canary_runs_input::Builder {
        crate::input::get_canary_runs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCanaryRuns {
    type Output =
        std::result::Result<crate::output::GetCanaryRunsOutput, crate::error::GetCanaryRunsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_canary_runs_error(response)
        } else {
            crate::operation_deser::parse_get_canary_runs_response(response)
        }
    }
}

/// <p>Displays the tags associated with a canary.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Use this operation to run a canary that has already been created.  
/// The frequency of the canary runs is determined by the value of the canary's <code>Schedule</code>. To see a canary's schedule,
/// use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_GetCanary.html">GetCanary</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartCanary {
    _private: (),
}
impl StartCanary {
    /// Creates a new builder-style object to manufacture [`StartCanaryInput`](crate::input::StartCanaryInput)
    pub fn builder() -> crate::input::start_canary_input::Builder {
        crate::input::start_canary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartCanary {
    type Output =
        std::result::Result<crate::output::StartCanaryOutput, crate::error::StartCanaryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_canary_error(response)
        } else {
            crate::operation_deser::parse_start_canary_response(response)
        }
    }
}

/// <p>Stops the canary to prevent all future runs. If the canary is currently running,
/// Synthetics stops waiting for the current run of the specified canary to complete. The
/// run that is in progress completes on its own, publishes metrics, and uploads artifacts, but
/// it is not recorded in Synthetics as a completed run.</p>
/// <p>You can use <code>StartCanary</code> to start it running again
/// with the canary’s current schedule at any point in the future.  </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopCanary {
    _private: (),
}
impl StopCanary {
    /// Creates a new builder-style object to manufacture [`StopCanaryInput`](crate::input::StopCanaryInput)
    pub fn builder() -> crate::input::stop_canary_input::Builder {
        crate::input::stop_canary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopCanary {
    type Output =
        std::result::Result<crate::output::StopCanaryOutput, crate::error::StopCanaryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_canary_error(response)
        } else {
            crate::operation_deser::parse_stop_canary_response(response)
        }
    }
}

/// <p>Assigns one or more tags (key-value pairs) to the specified canary. </p>
/// <p>Tags can help you organize and categorize your
/// resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with
/// certain tag values.</p>
/// <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
/// <p>You can use the <code>TagResource</code> action with a canary that already has tags. If you specify a new tag key for the alarm,
/// this tag is appended to the list of tags associated
/// with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces
/// the previous value for that tag.</p>
/// <p>You can associate as many as 50 tags with a canary.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes one or more tags from the specified canary.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Use this operation to change the settings of a canary that has
/// already been created.</p>
/// <p>You can't use this operation to update the tags of an existing canary. To
/// change the tags of an existing canary, use
/// <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_TagResource.html">TagResource</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCanary {
    _private: (),
}
impl UpdateCanary {
    /// Creates a new builder-style object to manufacture [`UpdateCanaryInput`](crate::input::UpdateCanaryInput)
    pub fn builder() -> crate::input::update_canary_input::Builder {
        crate::input::update_canary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateCanary {
    type Output =
        std::result::Result<crate::output::UpdateCanaryOutput, crate::error::UpdateCanaryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_canary_error(response)
        } else {
            crate::operation_deser::parse_update_canary_response(response)
        }
    }
}
