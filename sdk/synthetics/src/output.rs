// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCanaryOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateCanaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateCanaryOutput`](crate::output::UpdateCanaryOutput).
pub mod update_canary_output {

    /// A builder for [`UpdateCanaryOutput`](crate::output::UpdateCanaryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCanaryOutput`](crate::output::UpdateCanaryOutput).
        pub fn build(self) -> crate::output::UpdateCanaryOutput {
            crate::output::UpdateCanaryOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateCanaryOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCanaryOutput`](crate::output::UpdateCanaryOutput).
    pub fn builder() -> crate::output::update_canary_output::Builder {
        crate::output::update_canary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopCanaryOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StopCanaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StopCanaryOutput`](crate::output::StopCanaryOutput).
pub mod stop_canary_output {

    /// A builder for [`StopCanaryOutput`](crate::output::StopCanaryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopCanaryOutput`](crate::output::StopCanaryOutput).
        pub fn build(self) -> crate::output::StopCanaryOutput {
            crate::output::StopCanaryOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl StopCanaryOutput {
    /// Creates a new builder-style object to manufacture [`StopCanaryOutput`](crate::output::StopCanaryOutput).
    pub fn builder() -> crate::output::stop_canary_output::Builder {
        crate::output::stop_canary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartCanaryOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StartCanaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartCanaryOutput`](crate::output::StartCanaryOutput).
pub mod start_canary_output {

    /// A builder for [`StartCanaryOutput`](crate::output::StartCanaryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartCanaryOutput`](crate::output::StartCanaryOutput).
        pub fn build(self) -> crate::output::StartCanaryOutput {
            crate::output::StartCanaryOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl StartCanaryOutput {
    /// Creates a new builder-style object to manufacture [`StartCanaryOutput`](crate::output::StartCanaryOutput).
    pub fn builder() -> crate::output::start_canary_output::Builder {
        crate::output::start_canary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The list of tag keys and values associated with the resource that you specified.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The list of tag keys and values associated with the resource that you specified.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The list of tag keys and values associated with the resource that you specified.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The list of tag keys and values associated with the resource that you specified.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListGroupsOutput {
    /// <p>An array of structures that each contain information about one group.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListGroups</code> operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListGroupsOutput {
    /// <p>An array of structures that each contain information about one group.</p>
    pub fn groups(&self) -> std::option::Option<&[crate::model::GroupSummary]> {
        self.groups.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListGroups</code> operation to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListGroupsOutput`](crate::output::ListGroupsOutput).
pub mod list_groups_output {

    /// A builder for [`ListGroupsOutput`](crate::output::ListGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `groups`.
        ///
        /// To override the contents of this collection use [`set_groups`](Self::set_groups).
        ///
        /// <p>An array of structures that each contain information about one group.</p>
        pub fn groups(mut self, input: crate::model::GroupSummary) -> Self {
            let mut v = self.groups.unwrap_or_default();
            v.push(input);
            self.groups = Some(v);
            self
        }
        /// <p>An array of structures that each contain information about one group.</p>
        pub fn set_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
        ) -> Self {
            self.groups = input;
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListGroups</code> operation to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListGroups</code> operation to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListGroupsOutput`](crate::output::ListGroupsOutput).
        pub fn build(self) -> crate::output::ListGroupsOutput {
            crate::output::ListGroupsOutput {
                groups: self.groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListGroupsOutput`](crate::output::ListGroupsOutput).
    pub fn builder() -> crate::output::list_groups_output::Builder {
        crate::output::list_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListGroupResourcesOutput {
    /// <p>An array of ARNs. These ARNs are for the canaries that are associated with the group.</p>
    #[doc(hidden)]
    pub resources: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListGroupResources</code> operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListGroupResourcesOutput {
    /// <p>An array of ARNs. These ARNs are for the canaries that are associated with the group.</p>
    pub fn resources(&self) -> std::option::Option<&[std::string::String]> {
        self.resources.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListGroupResources</code> operation to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListGroupResourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListGroupResourcesOutput`](crate::output::ListGroupResourcesOutput).
pub mod list_group_resources_output {

    /// A builder for [`ListGroupResourcesOutput`](crate::output::ListGroupResourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resources: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `resources`.
        ///
        /// To override the contents of this collection use [`set_resources`](Self::set_resources).
        ///
        /// <p>An array of ARNs. These ARNs are for the canaries that are associated with the group.</p>
        pub fn resources(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.resources.unwrap_or_default();
            v.push(input.into());
            self.resources = Some(v);
            self
        }
        /// <p>An array of ARNs. These ARNs are for the canaries that are associated with the group.</p>
        pub fn set_resources(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.resources = input;
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListGroupResources</code> operation to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListGroupResources</code> operation to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListGroupResourcesOutput`](crate::output::ListGroupResourcesOutput).
        pub fn build(self) -> crate::output::ListGroupResourcesOutput {
            crate::output::ListGroupResourcesOutput {
                resources: self.resources,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListGroupResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListGroupResourcesOutput`](crate::output::ListGroupResourcesOutput).
    pub fn builder() -> crate::output::list_group_resources_output::Builder {
        crate::output::list_group_resources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAssociatedGroupsOutput {
    /// <p>An array of structures that contain information about the groups that this canary is associated with.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListAssociatedGroups</code> operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAssociatedGroupsOutput {
    /// <p>An array of structures that contain information about the groups that this canary is associated with.</p>
    pub fn groups(&self) -> std::option::Option<&[crate::model::GroupSummary]> {
        self.groups.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListAssociatedGroups</code> operation to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAssociatedGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAssociatedGroupsOutput`](crate::output::ListAssociatedGroupsOutput).
pub mod list_associated_groups_output {

    /// A builder for [`ListAssociatedGroupsOutput`](crate::output::ListAssociatedGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `groups`.
        ///
        /// To override the contents of this collection use [`set_groups`](Self::set_groups).
        ///
        /// <p>An array of structures that contain information about the groups that this canary is associated with.</p>
        pub fn groups(mut self, input: crate::model::GroupSummary) -> Self {
            let mut v = self.groups.unwrap_or_default();
            v.push(input);
            self.groups = Some(v);
            self
        }
        /// <p>An array of structures that contain information about the groups that this canary is associated with.</p>
        pub fn set_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
        ) -> Self {
            self.groups = input;
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListAssociatedGroups</code> operation to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>ListAssociatedGroups</code> operation to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAssociatedGroupsOutput`](crate::output::ListAssociatedGroupsOutput).
        pub fn build(self) -> crate::output::ListAssociatedGroupsOutput {
            crate::output::ListAssociatedGroupsOutput {
                groups: self.groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAssociatedGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListAssociatedGroupsOutput`](crate::output::ListAssociatedGroupsOutput).
    pub fn builder() -> crate::output::list_associated_groups_output::Builder {
        crate::output::list_associated_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetGroupOutput {
    /// <p>A structure that contains information about the group.</p>
    #[doc(hidden)]
    pub group: std::option::Option<crate::model::Group>,
    _request_id: Option<String>,
}
impl GetGroupOutput {
    /// <p>A structure that contains information about the group.</p>
    pub fn group(&self) -> std::option::Option<&crate::model::Group> {
        self.group.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetGroupOutput`](crate::output::GetGroupOutput).
pub mod get_group_output {

    /// A builder for [`GetGroupOutput`](crate::output::GetGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) group: std::option::Option<crate::model::Group>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure that contains information about the group.</p>
        pub fn group(mut self, input: crate::model::Group) -> Self {
            self.group = Some(input);
            self
        }
        /// <p>A structure that contains information about the group.</p>
        pub fn set_group(mut self, input: std::option::Option<crate::model::Group>) -> Self {
            self.group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetGroupOutput`](crate::output::GetGroupOutput).
        pub fn build(self) -> crate::output::GetGroupOutput {
            crate::output::GetGroupOutput {
                group: self.group,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetGroupOutput`](crate::output::GetGroupOutput).
    pub fn builder() -> crate::output::get_group_output::Builder {
        crate::output::get_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCanaryRunsOutput {
    /// <p>An array of structures. Each structure contains the details of one of the retrieved canary runs.</p>
    #[doc(hidden)]
    pub canary_runs: std::option::Option<std::vec::Vec<crate::model::CanaryRun>>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetCanaryRunsOutput {
    /// <p>An array of structures. Each structure contains the details of one of the retrieved canary runs.</p>
    pub fn canary_runs(&self) -> std::option::Option<&[crate::model::CanaryRun]> {
        self.canary_runs.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetCanaryRunsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetCanaryRunsOutput`](crate::output::GetCanaryRunsOutput).
pub mod get_canary_runs_output {

    /// A builder for [`GetCanaryRunsOutput`](crate::output::GetCanaryRunsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) canary_runs: std::option::Option<std::vec::Vec<crate::model::CanaryRun>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `canary_runs`.
        ///
        /// To override the contents of this collection use [`set_canary_runs`](Self::set_canary_runs).
        ///
        /// <p>An array of structures. Each structure contains the details of one of the retrieved canary runs.</p>
        pub fn canary_runs(mut self, input: crate::model::CanaryRun) -> Self {
            let mut v = self.canary_runs.unwrap_or_default();
            v.push(input);
            self.canary_runs = Some(v);
            self
        }
        /// <p>An array of structures. Each structure contains the details of one of the retrieved canary runs.</p>
        pub fn set_canary_runs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CanaryRun>>,
        ) -> Self {
            self.canary_runs = input;
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCanaryRunsOutput`](crate::output::GetCanaryRunsOutput).
        pub fn build(self) -> crate::output::GetCanaryRunsOutput {
            crate::output::GetCanaryRunsOutput {
                canary_runs: self.canary_runs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetCanaryRunsOutput {
    /// Creates a new builder-style object to manufacture [`GetCanaryRunsOutput`](crate::output::GetCanaryRunsOutput).
    pub fn builder() -> crate::output::get_canary_runs_output::Builder {
        crate::output::get_canary_runs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCanaryOutput {
    /// <p>A structure that contains the full information about the canary.</p>
    #[doc(hidden)]
    pub canary: std::option::Option<crate::model::Canary>,
    _request_id: Option<String>,
}
impl GetCanaryOutput {
    /// <p>A structure that contains the full information about the canary.</p>
    pub fn canary(&self) -> std::option::Option<&crate::model::Canary> {
        self.canary.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetCanaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetCanaryOutput`](crate::output::GetCanaryOutput).
pub mod get_canary_output {

    /// A builder for [`GetCanaryOutput`](crate::output::GetCanaryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) canary: std::option::Option<crate::model::Canary>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure that contains the full information about the canary.</p>
        pub fn canary(mut self, input: crate::model::Canary) -> Self {
            self.canary = Some(input);
            self
        }
        /// <p>A structure that contains the full information about the canary.</p>
        pub fn set_canary(mut self, input: std::option::Option<crate::model::Canary>) -> Self {
            self.canary = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCanaryOutput`](crate::output::GetCanaryOutput).
        pub fn build(self) -> crate::output::GetCanaryOutput {
            crate::output::GetCanaryOutput {
                canary: self.canary,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetCanaryOutput {
    /// Creates a new builder-style object to manufacture [`GetCanaryOutput`](crate::output::GetCanaryOutput).
    pub fn builder() -> crate::output::get_canary_output::Builder {
        crate::output::get_canary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateResourceOutput`](crate::output::DisassociateResourceOutput).
pub mod disassociate_resource_output {

    /// A builder for [`DisassociateResourceOutput`](crate::output::DisassociateResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateResourceOutput`](crate::output::DisassociateResourceOutput).
        pub fn build(self) -> crate::output::DisassociateResourceOutput {
            crate::output::DisassociateResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateResourceOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateResourceOutput`](crate::output::DisassociateResourceOutput).
    pub fn builder() -> crate::output::disassociate_resource_output::Builder {
        crate::output::disassociate_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeRuntimeVersionsOutput {
    /// <p>An array of objects that display the details about each Synthetics canary runtime version.</p>
    #[doc(hidden)]
    pub runtime_versions: std::option::Option<std::vec::Vec<crate::model::RuntimeVersion>>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeRuntimeVersions</code> operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeRuntimeVersionsOutput {
    /// <p>An array of objects that display the details about each Synthetics canary runtime version.</p>
    pub fn runtime_versions(&self) -> std::option::Option<&[crate::model::RuntimeVersion]> {
        self.runtime_versions.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeRuntimeVersions</code> operation to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeRuntimeVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeRuntimeVersionsOutput`](crate::output::DescribeRuntimeVersionsOutput).
pub mod describe_runtime_versions_output {

    /// A builder for [`DescribeRuntimeVersionsOutput`](crate::output::DescribeRuntimeVersionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) runtime_versions:
            std::option::Option<std::vec::Vec<crate::model::RuntimeVersion>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `runtime_versions`.
        ///
        /// To override the contents of this collection use [`set_runtime_versions`](Self::set_runtime_versions).
        ///
        /// <p>An array of objects that display the details about each Synthetics canary runtime version.</p>
        pub fn runtime_versions(mut self, input: crate::model::RuntimeVersion) -> Self {
            let mut v = self.runtime_versions.unwrap_or_default();
            v.push(input);
            self.runtime_versions = Some(v);
            self
        }
        /// <p>An array of objects that display the details about each Synthetics canary runtime version.</p>
        pub fn set_runtime_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RuntimeVersion>>,
        ) -> Self {
            self.runtime_versions = input;
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeRuntimeVersions</code> operation to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeRuntimeVersions</code> operation to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeRuntimeVersionsOutput`](crate::output::DescribeRuntimeVersionsOutput).
        pub fn build(self) -> crate::output::DescribeRuntimeVersionsOutput {
            crate::output::DescribeRuntimeVersionsOutput {
                runtime_versions: self.runtime_versions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeRuntimeVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRuntimeVersionsOutput`](crate::output::DescribeRuntimeVersionsOutput).
    pub fn builder() -> crate::output::describe_runtime_versions_output::Builder {
        crate::output::describe_runtime_versions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCanariesLastRunOutput {
    /// <p>An array that contains the information from the most recent run of each canary.</p>
    #[doc(hidden)]
    pub canaries_last_run: std::option::Option<std::vec::Vec<crate::model::CanaryLastRun>>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanariesLastRun</code> operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCanariesLastRunOutput {
    /// <p>An array that contains the information from the most recent run of each canary.</p>
    pub fn canaries_last_run(&self) -> std::option::Option<&[crate::model::CanaryLastRun]> {
        self.canaries_last_run.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanariesLastRun</code> operation to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeCanariesLastRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeCanariesLastRunOutput`](crate::output::DescribeCanariesLastRunOutput).
pub mod describe_canaries_last_run_output {

    /// A builder for [`DescribeCanariesLastRunOutput`](crate::output::DescribeCanariesLastRunOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) canaries_last_run:
            std::option::Option<std::vec::Vec<crate::model::CanaryLastRun>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `canaries_last_run`.
        ///
        /// To override the contents of this collection use [`set_canaries_last_run`](Self::set_canaries_last_run).
        ///
        /// <p>An array that contains the information from the most recent run of each canary.</p>
        pub fn canaries_last_run(mut self, input: crate::model::CanaryLastRun) -> Self {
            let mut v = self.canaries_last_run.unwrap_or_default();
            v.push(input);
            self.canaries_last_run = Some(v);
            self
        }
        /// <p>An array that contains the information from the most recent run of each canary.</p>
        pub fn set_canaries_last_run(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CanaryLastRun>>,
        ) -> Self {
            self.canaries_last_run = input;
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanariesLastRun</code> operation to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanariesLastRun</code> operation to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCanariesLastRunOutput`](crate::output::DescribeCanariesLastRunOutput).
        pub fn build(self) -> crate::output::DescribeCanariesLastRunOutput {
            crate::output::DescribeCanariesLastRunOutput {
                canaries_last_run: self.canaries_last_run,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeCanariesLastRunOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCanariesLastRunOutput`](crate::output::DescribeCanariesLastRunOutput).
    pub fn builder() -> crate::output::describe_canaries_last_run_output::Builder {
        crate::output::describe_canaries_last_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCanariesOutput {
    /// <p>Returns an array. Each item in the array contains the full information about one canary.</p>
    #[doc(hidden)]
    pub canaries: std::option::Option<std::vec::Vec<crate::model::Canary>>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanaries</code> operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCanariesOutput {
    /// <p>Returns an array. Each item in the array contains the full information about one canary.</p>
    pub fn canaries(&self) -> std::option::Option<&[crate::model::Canary]> {
        self.canaries.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanaries</code> operation to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeCanariesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeCanariesOutput`](crate::output::DescribeCanariesOutput).
pub mod describe_canaries_output {

    /// A builder for [`DescribeCanariesOutput`](crate::output::DescribeCanariesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) canaries: std::option::Option<std::vec::Vec<crate::model::Canary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `canaries`.
        ///
        /// To override the contents of this collection use [`set_canaries`](Self::set_canaries).
        ///
        /// <p>Returns an array. Each item in the array contains the full information about one canary.</p>
        pub fn canaries(mut self, input: crate::model::Canary) -> Self {
            let mut v = self.canaries.unwrap_or_default();
            v.push(input);
            self.canaries = Some(v);
            self
        }
        /// <p>Returns an array. Each item in the array contains the full information about one canary.</p>
        pub fn set_canaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Canary>>,
        ) -> Self {
            self.canaries = input;
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanaries</code> operation to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanaries</code> operation to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCanariesOutput`](crate::output::DescribeCanariesOutput).
        pub fn build(self) -> crate::output::DescribeCanariesOutput {
            crate::output::DescribeCanariesOutput {
                canaries: self.canaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeCanariesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCanariesOutput`](crate::output::DescribeCanariesOutput).
    pub fn builder() -> crate::output::describe_canaries_output::Builder {
        crate::output::describe_canaries_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteGroupOutput`](crate::output::DeleteGroupOutput).
pub mod delete_group_output {

    /// A builder for [`DeleteGroupOutput`](crate::output::DeleteGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteGroupOutput`](crate::output::DeleteGroupOutput).
        pub fn build(self) -> crate::output::DeleteGroupOutput {
            crate::output::DeleteGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteGroupOutput`](crate::output::DeleteGroupOutput).
    pub fn builder() -> crate::output::delete_group_output::Builder {
        crate::output::delete_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCanaryOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteCanaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteCanaryOutput`](crate::output::DeleteCanaryOutput).
pub mod delete_canary_output {

    /// A builder for [`DeleteCanaryOutput`](crate::output::DeleteCanaryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCanaryOutput`](crate::output::DeleteCanaryOutput).
        pub fn build(self) -> crate::output::DeleteCanaryOutput {
            crate::output::DeleteCanaryOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteCanaryOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCanaryOutput`](crate::output::DeleteCanaryOutput).
    pub fn builder() -> crate::output::delete_canary_output::Builder {
        crate::output::delete_canary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateGroupOutput {
    /// <p>A structure that contains information about the group that was just created.</p>
    #[doc(hidden)]
    pub group: std::option::Option<crate::model::Group>,
    _request_id: Option<String>,
}
impl CreateGroupOutput {
    /// <p>A structure that contains information about the group that was just created.</p>
    pub fn group(&self) -> std::option::Option<&crate::model::Group> {
        self.group.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateGroupOutput`](crate::output::CreateGroupOutput).
pub mod create_group_output {

    /// A builder for [`CreateGroupOutput`](crate::output::CreateGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) group: std::option::Option<crate::model::Group>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure that contains information about the group that was just created.</p>
        pub fn group(mut self, input: crate::model::Group) -> Self {
            self.group = Some(input);
            self
        }
        /// <p>A structure that contains information about the group that was just created.</p>
        pub fn set_group(mut self, input: std::option::Option<crate::model::Group>) -> Self {
            self.group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateGroupOutput`](crate::output::CreateGroupOutput).
        pub fn build(self) -> crate::output::CreateGroupOutput {
            crate::output::CreateGroupOutput {
                group: self.group,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateGroupOutput`](crate::output::CreateGroupOutput).
    pub fn builder() -> crate::output::create_group_output::Builder {
        crate::output::create_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCanaryOutput {
    /// <p>The full details about the canary you have created.</p>
    #[doc(hidden)]
    pub canary: std::option::Option<crate::model::Canary>,
    _request_id: Option<String>,
}
impl CreateCanaryOutput {
    /// <p>The full details about the canary you have created.</p>
    pub fn canary(&self) -> std::option::Option<&crate::model::Canary> {
        self.canary.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateCanaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateCanaryOutput`](crate::output::CreateCanaryOutput).
pub mod create_canary_output {

    /// A builder for [`CreateCanaryOutput`](crate::output::CreateCanaryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) canary: std::option::Option<crate::model::Canary>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The full details about the canary you have created.</p>
        pub fn canary(mut self, input: crate::model::Canary) -> Self {
            self.canary = Some(input);
            self
        }
        /// <p>The full details about the canary you have created.</p>
        pub fn set_canary(mut self, input: std::option::Option<crate::model::Canary>) -> Self {
            self.canary = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCanaryOutput`](crate::output::CreateCanaryOutput).
        pub fn build(self) -> crate::output::CreateCanaryOutput {
            crate::output::CreateCanaryOutput {
                canary: self.canary,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateCanaryOutput {
    /// Creates a new builder-style object to manufacture [`CreateCanaryOutput`](crate::output::CreateCanaryOutput).
    pub fn builder() -> crate::output::create_canary_output::Builder {
        crate::output::create_canary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AssociateResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateResourceOutput`](crate::output::AssociateResourceOutput).
pub mod associate_resource_output {

    /// A builder for [`AssociateResourceOutput`](crate::output::AssociateResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateResourceOutput`](crate::output::AssociateResourceOutput).
        pub fn build(self) -> crate::output::AssociateResourceOutput {
            crate::output::AssociateResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateResourceOutput {
    /// Creates a new builder-style object to manufacture [`AssociateResourceOutput`](crate::output::AssociateResourceOutput).
    pub fn builder() -> crate::output::associate_resource_output::Builder {
        crate::output::associate_resource_output::Builder::default()
    }
}
