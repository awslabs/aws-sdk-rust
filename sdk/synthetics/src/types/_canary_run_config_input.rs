// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains input information for a canary run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CanaryRunConfigInput {
    /// <p>How long the canary is allowed to run before it must stop. You can't set this time to be longer than the frequency of the runs of this canary.</p>
    /// <p>If you omit this field, the frequency of the canary is used as this value, up to a maximum of 14 minutes.</p>
    #[doc(hidden)]
    pub timeout_in_seconds: std::option::Option<i32>,
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
    #[doc(hidden)]
    pub memory_in_mb: std::option::Option<i32>,
    /// <p>Specifies whether this canary is to use active X-Ray tracing when it runs. Active tracing enables this canary run to be displayed in the ServiceLens and X-Ray service maps even if the canary does not hit an endpoint that has X-Ray tracing enabled. Using X-Ray tracing incurs charges. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_tracing.html"> Canaries and X-Ray tracing</a>.</p>
    /// <p>You can enable active tracing only for canaries that use version <code>syn-nodejs-2.0</code> or later for their canary runtime.</p>
    #[doc(hidden)]
    pub active_tracing: std::option::Option<bool>,
    /// <p>Specifies the keys and values to use for any environment variables used in the canary script. Use the following format:</p>
    /// <p>{ "key1" : "value1", "key2" : "value2", ...}</p>
    /// <p>Keys must start with a letter and be at least two characters. The total size of your environment variables cannot exceed 4 KB. You can't specify any Lambda reserved environment variables as the keys for your environment variables. For more information about reserved keys, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime"> Runtime environment variables</a>.</p> <important>
    /// <p>The environment variables keys and values are not encrypted. Do not store sensitive information in this field.</p>
    /// </important>
    #[doc(hidden)]
    pub environment_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CanaryRunConfigInput {
    /// <p>How long the canary is allowed to run before it must stop. You can't set this time to be longer than the frequency of the runs of this canary.</p>
    /// <p>If you omit this field, the frequency of the canary is used as this value, up to a maximum of 14 minutes.</p>
    pub fn timeout_in_seconds(&self) -> std::option::Option<i32> {
        self.timeout_in_seconds
    }
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
    pub fn memory_in_mb(&self) -> std::option::Option<i32> {
        self.memory_in_mb
    }
    /// <p>Specifies whether this canary is to use active X-Ray tracing when it runs. Active tracing enables this canary run to be displayed in the ServiceLens and X-Ray service maps even if the canary does not hit an endpoint that has X-Ray tracing enabled. Using X-Ray tracing incurs charges. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_tracing.html"> Canaries and X-Ray tracing</a>.</p>
    /// <p>You can enable active tracing only for canaries that use version <code>syn-nodejs-2.0</code> or later for their canary runtime.</p>
    pub fn active_tracing(&self) -> std::option::Option<bool> {
        self.active_tracing
    }
    /// <p>Specifies the keys and values to use for any environment variables used in the canary script. Use the following format:</p>
    /// <p>{ "key1" : "value1", "key2" : "value2", ...}</p>
    /// <p>Keys must start with a letter and be at least two characters. The total size of your environment variables cannot exceed 4 KB. You can't specify any Lambda reserved environment variables as the keys for your environment variables. For more information about reserved keys, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime"> Runtime environment variables</a>.</p> <important>
    /// <p>The environment variables keys and values are not encrypted. Do not store sensitive information in this field.</p>
    /// </important>
    pub fn environment_variables(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.environment_variables.as_ref()
    }
}
impl CanaryRunConfigInput {
    /// Creates a new builder-style object to manufacture [`CanaryRunConfigInput`](crate::types::CanaryRunConfigInput).
    pub fn builder() -> crate::types::builders::CanaryRunConfigInputBuilder {
        crate::types::builders::CanaryRunConfigInputBuilder::default()
    }
}

/// A builder for [`CanaryRunConfigInput`](crate::types::CanaryRunConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CanaryRunConfigInputBuilder {
    pub(crate) timeout_in_seconds: std::option::Option<i32>,
    pub(crate) memory_in_mb: std::option::Option<i32>,
    pub(crate) active_tracing: std::option::Option<bool>,
    pub(crate) environment_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CanaryRunConfigInputBuilder {
    /// <p>How long the canary is allowed to run before it must stop. You can't set this time to be longer than the frequency of the runs of this canary.</p>
    /// <p>If you omit this field, the frequency of the canary is used as this value, up to a maximum of 14 minutes.</p>
    pub fn timeout_in_seconds(mut self, input: i32) -> Self {
        self.timeout_in_seconds = Some(input);
        self
    }
    /// <p>How long the canary is allowed to run before it must stop. You can't set this time to be longer than the frequency of the runs of this canary.</p>
    /// <p>If you omit this field, the frequency of the canary is used as this value, up to a maximum of 14 minutes.</p>
    pub fn set_timeout_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_in_seconds = input;
        self
    }
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
    pub fn memory_in_mb(mut self, input: i32) -> Self {
        self.memory_in_mb = Some(input);
        self
    }
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
    pub fn set_memory_in_mb(mut self, input: std::option::Option<i32>) -> Self {
        self.memory_in_mb = input;
        self
    }
    /// <p>Specifies whether this canary is to use active X-Ray tracing when it runs. Active tracing enables this canary run to be displayed in the ServiceLens and X-Ray service maps even if the canary does not hit an endpoint that has X-Ray tracing enabled. Using X-Ray tracing incurs charges. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_tracing.html"> Canaries and X-Ray tracing</a>.</p>
    /// <p>You can enable active tracing only for canaries that use version <code>syn-nodejs-2.0</code> or later for their canary runtime.</p>
    pub fn active_tracing(mut self, input: bool) -> Self {
        self.active_tracing = Some(input);
        self
    }
    /// <p>Specifies whether this canary is to use active X-Ray tracing when it runs. Active tracing enables this canary run to be displayed in the ServiceLens and X-Ray service maps even if the canary does not hit an endpoint that has X-Ray tracing enabled. Using X-Ray tracing incurs charges. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_tracing.html"> Canaries and X-Ray tracing</a>.</p>
    /// <p>You can enable active tracing only for canaries that use version <code>syn-nodejs-2.0</code> or later for their canary runtime.</p>
    pub fn set_active_tracing(mut self, input: std::option::Option<bool>) -> Self {
        self.active_tracing = input;
        self
    }
    /// Adds a key-value pair to `environment_variables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p>Specifies the keys and values to use for any environment variables used in the canary script. Use the following format:</p>
    /// <p>{ "key1" : "value1", "key2" : "value2", ...}</p>
    /// <p>Keys must start with a letter and be at least two characters. The total size of your environment variables cannot exceed 4 KB. You can't specify any Lambda reserved environment variables as the keys for your environment variables. For more information about reserved keys, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime"> Runtime environment variables</a>.</p> <important>
    /// <p>The environment variables keys and values are not encrypted. Do not store sensitive information in this field.</p>
    /// </important>
    pub fn environment_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.environment_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.environment_variables = Some(hash_map);
        self
    }
    /// <p>Specifies the keys and values to use for any environment variables used in the canary script. Use the following format:</p>
    /// <p>{ "key1" : "value1", "key2" : "value2", ...}</p>
    /// <p>Keys must start with a letter and be at least two characters. The total size of your environment variables cannot exceed 4 KB. You can't specify any Lambda reserved environment variables as the keys for your environment variables. For more information about reserved keys, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime"> Runtime environment variables</a>.</p> <important>
    /// <p>The environment variables keys and values are not encrypted. Do not store sensitive information in this field.</p>
    /// </important>
    pub fn set_environment_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.environment_variables = input;
        self
    }
    /// Consumes the builder and constructs a [`CanaryRunConfigInput`](crate::types::CanaryRunConfigInput).
    pub fn build(self) -> crate::types::CanaryRunConfigInput {
        crate::types::CanaryRunConfigInput {
            timeout_in_seconds: self.timeout_in_seconds,
            memory_in_mb: self.memory_in_mb,
            active_tracing: self.active_tracing,
            environment_variables: self.environment_variables,
        }
    }
}
