// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information about a canary run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CanaryRunConfigOutput {
    /// <p>How long the canary is allowed to run before it must stop.</p>
    #[doc(hidden)]
    pub timeout_in_seconds: std::option::Option<i32>,
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
    #[doc(hidden)]
    pub memory_in_mb: std::option::Option<i32>,
    /// <p>Displays whether this canary run used active X-Ray tracing. </p>
    #[doc(hidden)]
    pub active_tracing: std::option::Option<bool>,
}
impl CanaryRunConfigOutput {
    /// <p>How long the canary is allowed to run before it must stop.</p>
    pub fn timeout_in_seconds(&self) -> std::option::Option<i32> {
        self.timeout_in_seconds
    }
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
    pub fn memory_in_mb(&self) -> std::option::Option<i32> {
        self.memory_in_mb
    }
    /// <p>Displays whether this canary run used active X-Ray tracing. </p>
    pub fn active_tracing(&self) -> std::option::Option<bool> {
        self.active_tracing
    }
}
impl CanaryRunConfigOutput {
    /// Creates a new builder-style object to manufacture [`CanaryRunConfigOutput`](crate::types::CanaryRunConfigOutput).
    pub fn builder() -> crate::types::builders::CanaryRunConfigOutputBuilder {
        crate::types::builders::CanaryRunConfigOutputBuilder::default()
    }
}

/// A builder for [`CanaryRunConfigOutput`](crate::types::CanaryRunConfigOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CanaryRunConfigOutputBuilder {
    pub(crate) timeout_in_seconds: std::option::Option<i32>,
    pub(crate) memory_in_mb: std::option::Option<i32>,
    pub(crate) active_tracing: std::option::Option<bool>,
}
impl CanaryRunConfigOutputBuilder {
    /// <p>How long the canary is allowed to run before it must stop.</p>
    pub fn timeout_in_seconds(mut self, input: i32) -> Self {
        self.timeout_in_seconds = Some(input);
        self
    }
    /// <p>How long the canary is allowed to run before it must stop.</p>
    pub fn set_timeout_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_in_seconds = input;
        self
    }
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
    pub fn memory_in_mb(mut self, input: i32) -> Self {
        self.memory_in_mb = Some(input);
        self
    }
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
    pub fn set_memory_in_mb(mut self, input: std::option::Option<i32>) -> Self {
        self.memory_in_mb = input;
        self
    }
    /// <p>Displays whether this canary run used active X-Ray tracing. </p>
    pub fn active_tracing(mut self, input: bool) -> Self {
        self.active_tracing = Some(input);
        self
    }
    /// <p>Displays whether this canary run used active X-Ray tracing. </p>
    pub fn set_active_tracing(mut self, input: std::option::Option<bool>) -> Self {
        self.active_tracing = input;
        self
    }
    /// Consumes the builder and constructs a [`CanaryRunConfigOutput`](crate::types::CanaryRunConfigOutput).
    pub fn build(self) -> crate::types::CanaryRunConfigOutput {
        crate::types::CanaryRunConfigOutput {
            timeout_in_seconds: self.timeout_in_seconds,
            memory_in_mb: self.memory_in_mb,
            active_tracing: self.active_tracing,
        }
    }
}
