// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains all information about one canary in your account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Canary {
    /// <p>The unique ID of this canary.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the canary.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>This structure contains information about the canary's Lambda handler and where its code is stored by CloudWatch Synthetics.</p>
    #[doc(hidden)]
    pub code: std::option::Option<crate::types::CanaryCodeOutput>,
    /// <p>The ARN of the IAM role used to run the canary. This role must include <code>lambda.amazonaws.com</code> as a principal in the trust policy.</p>
    #[doc(hidden)]
    pub execution_role_arn: std::option::Option<std::string::String>,
    /// <p>A structure that contains information about how often the canary is to run, and when these runs are to stop.</p>
    #[doc(hidden)]
    pub schedule: std::option::Option<crate::types::CanaryScheduleOutput>,
    /// <p>A structure that contains information about a canary run.</p>
    #[doc(hidden)]
    pub run_config: std::option::Option<crate::types::CanaryRunConfigOutput>,
    /// <p>The number of days to retain data about successful runs of this canary.</p>
    #[doc(hidden)]
    pub success_retention_period_in_days: std::option::Option<i32>,
    /// <p>The number of days to retain data about failed runs of this canary.</p>
    #[doc(hidden)]
    pub failure_retention_period_in_days: std::option::Option<i32>,
    /// <p>A structure that contains information about the canary's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CanaryStatus>,
    /// <p>A structure that contains information about when the canary was created, modified, and most recently run.</p>
    #[doc(hidden)]
    pub timeline: std::option::Option<crate::types::CanaryTimeline>,
    /// <p>The location in Amazon S3 where Synthetics stores artifacts from the runs of this canary. Artifacts include the log file, screenshots, and HAR files.</p>
    #[doc(hidden)]
    pub artifact_s3_location: std::option::Option<std::string::String>,
    /// <p>The ARN of the Lambda function that is used as your canary's engine. For more information about Lambda ARN format, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-api-permissions-ref.html">Resources and Conditions for Lambda Actions</a>.</p>
    #[doc(hidden)]
    pub engine_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the runtime version to use for the canary. For more information about runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html"> Canary Runtime Versions</a>.</p>
    #[doc(hidden)]
    pub runtime_version: std::option::Option<std::string::String>,
    /// <p>If this canary is to test an endpoint in a VPC, this structure contains information about the subnets and security groups of the VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html"> Running a Canary in a VPC</a>.</p>
    #[doc(hidden)]
    pub vpc_config: std::option::Option<crate::types::VpcConfigOutput>,
    /// <p>If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run to use as the baseline for screenshots, and the coordinates of any parts of the screen to ignore during the visual monitoring comparison.</p>
    #[doc(hidden)]
    pub visual_reference: std::option::Option<crate::types::VisualReferenceOutput>,
    /// <p>The list of key-value pairs that are associated with the canary.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
    #[doc(hidden)]
    pub artifact_config: std::option::Option<crate::types::ArtifactConfigOutput>,
}
impl Canary {
    /// <p>The unique ID of this canary.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the canary.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>This structure contains information about the canary's Lambda handler and where its code is stored by CloudWatch Synthetics.</p>
    pub fn code(&self) -> std::option::Option<&crate::types::CanaryCodeOutput> {
        self.code.as_ref()
    }
    /// <p>The ARN of the IAM role used to run the canary. This role must include <code>lambda.amazonaws.com</code> as a principal in the trust policy.</p>
    pub fn execution_role_arn(&self) -> std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>A structure that contains information about how often the canary is to run, and when these runs are to stop.</p>
    pub fn schedule(&self) -> std::option::Option<&crate::types::CanaryScheduleOutput> {
        self.schedule.as_ref()
    }
    /// <p>A structure that contains information about a canary run.</p>
    pub fn run_config(&self) -> std::option::Option<&crate::types::CanaryRunConfigOutput> {
        self.run_config.as_ref()
    }
    /// <p>The number of days to retain data about successful runs of this canary.</p>
    pub fn success_retention_period_in_days(&self) -> std::option::Option<i32> {
        self.success_retention_period_in_days
    }
    /// <p>The number of days to retain data about failed runs of this canary.</p>
    pub fn failure_retention_period_in_days(&self) -> std::option::Option<i32> {
        self.failure_retention_period_in_days
    }
    /// <p>A structure that contains information about the canary's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::CanaryStatus> {
        self.status.as_ref()
    }
    /// <p>A structure that contains information about when the canary was created, modified, and most recently run.</p>
    pub fn timeline(&self) -> std::option::Option<&crate::types::CanaryTimeline> {
        self.timeline.as_ref()
    }
    /// <p>The location in Amazon S3 where Synthetics stores artifacts from the runs of this canary. Artifacts include the log file, screenshots, and HAR files.</p>
    pub fn artifact_s3_location(&self) -> std::option::Option<&str> {
        self.artifact_s3_location.as_deref()
    }
    /// <p>The ARN of the Lambda function that is used as your canary's engine. For more information about Lambda ARN format, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-api-permissions-ref.html">Resources and Conditions for Lambda Actions</a>.</p>
    pub fn engine_arn(&self) -> std::option::Option<&str> {
        self.engine_arn.as_deref()
    }
    /// <p>Specifies the runtime version to use for the canary. For more information about runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html"> Canary Runtime Versions</a>.</p>
    pub fn runtime_version(&self) -> std::option::Option<&str> {
        self.runtime_version.as_deref()
    }
    /// <p>If this canary is to test an endpoint in a VPC, this structure contains information about the subnets and security groups of the VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html"> Running a Canary in a VPC</a>.</p>
    pub fn vpc_config(&self) -> std::option::Option<&crate::types::VpcConfigOutput> {
        self.vpc_config.as_ref()
    }
    /// <p>If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run to use as the baseline for screenshots, and the coordinates of any parts of the screen to ignore during the visual monitoring comparison.</p>
    pub fn visual_reference(&self) -> std::option::Option<&crate::types::VisualReferenceOutput> {
        self.visual_reference.as_ref()
    }
    /// <p>The list of key-value pairs that are associated with the canary.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
    pub fn artifact_config(&self) -> std::option::Option<&crate::types::ArtifactConfigOutput> {
        self.artifact_config.as_ref()
    }
}
impl Canary {
    /// Creates a new builder-style object to manufacture [`Canary`](crate::types::Canary).
    pub fn builder() -> crate::types::builders::CanaryBuilder {
        crate::types::builders::CanaryBuilder::default()
    }
}

/// A builder for [`Canary`](crate::types::Canary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CanaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) code: std::option::Option<crate::types::CanaryCodeOutput>,
    pub(crate) execution_role_arn: std::option::Option<std::string::String>,
    pub(crate) schedule: std::option::Option<crate::types::CanaryScheduleOutput>,
    pub(crate) run_config: std::option::Option<crate::types::CanaryRunConfigOutput>,
    pub(crate) success_retention_period_in_days: std::option::Option<i32>,
    pub(crate) failure_retention_period_in_days: std::option::Option<i32>,
    pub(crate) status: std::option::Option<crate::types::CanaryStatus>,
    pub(crate) timeline: std::option::Option<crate::types::CanaryTimeline>,
    pub(crate) artifact_s3_location: std::option::Option<std::string::String>,
    pub(crate) engine_arn: std::option::Option<std::string::String>,
    pub(crate) runtime_version: std::option::Option<std::string::String>,
    pub(crate) vpc_config: std::option::Option<crate::types::VpcConfigOutput>,
    pub(crate) visual_reference: std::option::Option<crate::types::VisualReferenceOutput>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) artifact_config: std::option::Option<crate::types::ArtifactConfigOutput>,
}
impl CanaryBuilder {
    /// <p>The unique ID of this canary.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique ID of this canary.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the canary.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the canary.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>This structure contains information about the canary's Lambda handler and where its code is stored by CloudWatch Synthetics.</p>
    pub fn code(mut self, input: crate::types::CanaryCodeOutput) -> Self {
        self.code = Some(input);
        self
    }
    /// <p>This structure contains information about the canary's Lambda handler and where its code is stored by CloudWatch Synthetics.</p>
    pub fn set_code(mut self, input: std::option::Option<crate::types::CanaryCodeOutput>) -> Self {
        self.code = input;
        self
    }
    /// <p>The ARN of the IAM role used to run the canary. This role must include <code>lambda.amazonaws.com</code> as a principal in the trust policy.</p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role used to run the canary. This role must include <code>lambda.amazonaws.com</code> as a principal in the trust policy.</p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>A structure that contains information about how often the canary is to run, and when these runs are to stop.</p>
    pub fn schedule(mut self, input: crate::types::CanaryScheduleOutput) -> Self {
        self.schedule = Some(input);
        self
    }
    /// <p>A structure that contains information about how often the canary is to run, and when these runs are to stop.</p>
    pub fn set_schedule(
        mut self,
        input: std::option::Option<crate::types::CanaryScheduleOutput>,
    ) -> Self {
        self.schedule = input;
        self
    }
    /// <p>A structure that contains information about a canary run.</p>
    pub fn run_config(mut self, input: crate::types::CanaryRunConfigOutput) -> Self {
        self.run_config = Some(input);
        self
    }
    /// <p>A structure that contains information about a canary run.</p>
    pub fn set_run_config(
        mut self,
        input: std::option::Option<crate::types::CanaryRunConfigOutput>,
    ) -> Self {
        self.run_config = input;
        self
    }
    /// <p>The number of days to retain data about successful runs of this canary.</p>
    pub fn success_retention_period_in_days(mut self, input: i32) -> Self {
        self.success_retention_period_in_days = Some(input);
        self
    }
    /// <p>The number of days to retain data about successful runs of this canary.</p>
    pub fn set_success_retention_period_in_days(mut self, input: std::option::Option<i32>) -> Self {
        self.success_retention_period_in_days = input;
        self
    }
    /// <p>The number of days to retain data about failed runs of this canary.</p>
    pub fn failure_retention_period_in_days(mut self, input: i32) -> Self {
        self.failure_retention_period_in_days = Some(input);
        self
    }
    /// <p>The number of days to retain data about failed runs of this canary.</p>
    pub fn set_failure_retention_period_in_days(mut self, input: std::option::Option<i32>) -> Self {
        self.failure_retention_period_in_days = input;
        self
    }
    /// <p>A structure that contains information about the canary's status.</p>
    pub fn status(mut self, input: crate::types::CanaryStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>A structure that contains information about the canary's status.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::CanaryStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>A structure that contains information about when the canary was created, modified, and most recently run.</p>
    pub fn timeline(mut self, input: crate::types::CanaryTimeline) -> Self {
        self.timeline = Some(input);
        self
    }
    /// <p>A structure that contains information about when the canary was created, modified, and most recently run.</p>
    pub fn set_timeline(
        mut self,
        input: std::option::Option<crate::types::CanaryTimeline>,
    ) -> Self {
        self.timeline = input;
        self
    }
    /// <p>The location in Amazon S3 where Synthetics stores artifacts from the runs of this canary. Artifacts include the log file, screenshots, and HAR files.</p>
    pub fn artifact_s3_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.artifact_s3_location = Some(input.into());
        self
    }
    /// <p>The location in Amazon S3 where Synthetics stores artifacts from the runs of this canary. Artifacts include the log file, screenshots, and HAR files.</p>
    pub fn set_artifact_s3_location(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.artifact_s3_location = input;
        self
    }
    /// <p>The ARN of the Lambda function that is used as your canary's engine. For more information about Lambda ARN format, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-api-permissions-ref.html">Resources and Conditions for Lambda Actions</a>.</p>
    pub fn engine_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Lambda function that is used as your canary's engine. For more information about Lambda ARN format, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-api-permissions-ref.html">Resources and Conditions for Lambda Actions</a>.</p>
    pub fn set_engine_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_arn = input;
        self
    }
    /// <p>Specifies the runtime version to use for the canary. For more information about runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html"> Canary Runtime Versions</a>.</p>
    pub fn runtime_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.runtime_version = Some(input.into());
        self
    }
    /// <p>Specifies the runtime version to use for the canary. For more information about runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html"> Canary Runtime Versions</a>.</p>
    pub fn set_runtime_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.runtime_version = input;
        self
    }
    /// <p>If this canary is to test an endpoint in a VPC, this structure contains information about the subnets and security groups of the VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html"> Running a Canary in a VPC</a>.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfigOutput) -> Self {
        self.vpc_config = Some(input);
        self
    }
    /// <p>If this canary is to test an endpoint in a VPC, this structure contains information about the subnets and security groups of the VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html"> Running a Canary in a VPC</a>.</p>
    pub fn set_vpc_config(
        mut self,
        input: std::option::Option<crate::types::VpcConfigOutput>,
    ) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run to use as the baseline for screenshots, and the coordinates of any parts of the screen to ignore during the visual monitoring comparison.</p>
    pub fn visual_reference(mut self, input: crate::types::VisualReferenceOutput) -> Self {
        self.visual_reference = Some(input);
        self
    }
    /// <p>If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run to use as the baseline for screenshots, and the coordinates of any parts of the screen to ignore during the visual monitoring comparison.</p>
    pub fn set_visual_reference(
        mut self,
        input: std::option::Option<crate::types::VisualReferenceOutput>,
    ) -> Self {
        self.visual_reference = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of key-value pairs that are associated with the canary.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The list of key-value pairs that are associated with the canary.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
    pub fn artifact_config(mut self, input: crate::types::ArtifactConfigOutput) -> Self {
        self.artifact_config = Some(input);
        self
    }
    /// <p>A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
    pub fn set_artifact_config(
        mut self,
        input: std::option::Option<crate::types::ArtifactConfigOutput>,
    ) -> Self {
        self.artifact_config = input;
        self
    }
    /// Consumes the builder and constructs a [`Canary`](crate::types::Canary).
    pub fn build(self) -> crate::types::Canary {
        crate::types::Canary {
            id: self.id,
            name: self.name,
            code: self.code,
            execution_role_arn: self.execution_role_arn,
            schedule: self.schedule,
            run_config: self.run_config,
            success_retention_period_in_days: self.success_retention_period_in_days,
            failure_retention_period_in_days: self.failure_retention_period_in_days,
            status: self.status,
            timeline: self.timeline,
            artifact_s3_location: self.artifact_s3_location,
            engine_arn: self.engine_arn,
            runtime_version: self.runtime_version,
            vpc_config: self.vpc_config,
            visual_reference: self.visual_reference,
            tags: self.tags,
            artifact_config: self.artifact_config,
        }
    }
}
