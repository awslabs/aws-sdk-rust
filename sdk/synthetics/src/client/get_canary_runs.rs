// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetCanaryRuns`](crate::client::fluent_builders::GetCanaryRuns) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetCanaryRuns::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetCanaryRuns::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetCanaryRuns::set_name): <p>The name of the canary that you want to see runs for.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetCanaryRuns::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetCanaryRuns::set_next_token): <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetCanaryRuns::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetCanaryRuns::set_max_results): <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    /// - On success, responds with [`GetCanaryRunsOutput`](crate::output::GetCanaryRunsOutput) with field(s):
    ///   - [`canary_runs(Option<Vec<CanaryRun>>)`](crate::output::GetCanaryRunsOutput::canary_runs): <p>An array of structures. Each structure contains the details of one of the retrieved canary runs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetCanaryRunsOutput::next_token): <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<GetCanaryRunsError>`](crate::error::GetCanaryRunsError)
    pub fn get_canary_runs(&self) -> crate::client::fluent_builders::GetCanaryRuns {
        crate::client::fluent_builders::GetCanaryRuns::new(self.handle.clone())
    }
}
