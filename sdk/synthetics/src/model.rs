// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>If this canary is to test an endpoint in a VPC, this structure contains
/// information about the subnets and security groups of the VPC endpoint.
/// For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html">
/// Running a Canary in a VPC</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct VpcConfigInput {
    /// <p>The IDs of the subnets where this canary is to run.</p>
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IDs of the security groups for this canary.</p>
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for VpcConfigInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("VpcConfigInput");
        formatter.field("subnet_ids", &self.subnet_ids);
        formatter.field("security_group_ids", &self.security_group_ids);
        formatter.finish()
    }
}
/// See [`VpcConfigInput`](crate::model::VpcConfigInput)
pub mod vpc_config_input {
    /// A builder for [`VpcConfigInput`](crate::model::VpcConfigInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.subnet_ids.unwrap_or_default();
            v.push(input.into());
            self.subnet_ids = Some(v);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.subnet_ids = input;
            self
        }
        pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.security_group_ids = Some(v);
            self
        }
        pub fn set_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.security_group_ids = input;
            self
        }
        /// Consumes the builder and constructs a [`VpcConfigInput`](crate::model::VpcConfigInput)
        pub fn build(self) -> crate::model::VpcConfigInput {
            crate::model::VpcConfigInput {
                subnet_ids: self.subnet_ids,
                security_group_ids: self.security_group_ids,
            }
        }
    }
}
impl VpcConfigInput {
    /// Creates a new builder-style object to manufacture [`VpcConfigInput`](crate::model::VpcConfigInput)
    pub fn builder() -> crate::model::vpc_config_input::Builder {
        crate::model::vpc_config_input::Builder::default()
    }
}

/// <p>A structure that contains input information for a canary run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryRunConfigInput {
    /// <p>How long the canary is allowed to run before it must stop. You can't set this time to be longer
    /// than the frequency of the runs of this canary.</p>
    /// <p>If you omit this field, the
    /// frequency of the canary is used as this value, up to a maximum of 14 minutes.</p>
    pub timeout_in_seconds: std::option::Option<i32>,
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
    pub memory_in_mb: std::option::Option<i32>,
    /// <p>Specifies whether this canary is to use active AWS X-Ray tracing when it runs. Active tracing
    /// enables
    /// this canary run to be displayed in the ServiceLens and X-Ray service maps even if the canary does
    /// not hit an endpoint that has X-ray tracing enabled. Using X-Ray tracing incurs charges.
    /// For more information, see  <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_tracing.html">
    /// Canaries and X-Ray tracing</a>.</p>
    /// <p>You can enable active tracing only for canaries that use version <code>syn-nodejs-2.0</code>
    /// or later for their canary runtime.</p>
    pub active_tracing: std::option::Option<bool>,
    /// <p>Specifies the keys and values to use for any environment variables
    /// used in the canary script. Use the following format:</p>
    /// <p>{ "key1" : "value1", "key2" : "value2", ...}</p>
    /// <p>Keys must start with a letter and be at least two characters. The total size
    /// of your environment variables cannot exceed 4 KB. You can't specify any Lambda
    /// reserved environment variables as the keys for your environment variables. For
    /// more information about reserved keys, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime">
    /// Runtime environment variables</a>.</p>
    pub environment_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for CanaryRunConfigInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryRunConfigInput");
        formatter.field("timeout_in_seconds", &self.timeout_in_seconds);
        formatter.field("memory_in_mb", &self.memory_in_mb);
        formatter.field("active_tracing", &self.active_tracing);
        formatter.field("environment_variables", &self.environment_variables);
        formatter.finish()
    }
}
/// See [`CanaryRunConfigInput`](crate::model::CanaryRunConfigInput)
pub mod canary_run_config_input {
    /// A builder for [`CanaryRunConfigInput`](crate::model::CanaryRunConfigInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) timeout_in_seconds: std::option::Option<i32>,
        pub(crate) memory_in_mb: std::option::Option<i32>,
        pub(crate) active_tracing: std::option::Option<bool>,
        pub(crate) environment_variables: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>How long the canary is allowed to run before it must stop. You can't set this time to be longer
        /// than the frequency of the runs of this canary.</p>
        /// <p>If you omit this field, the
        /// frequency of the canary is used as this value, up to a maximum of 14 minutes.</p>
        pub fn timeout_in_seconds(mut self, input: i32) -> Self {
            self.timeout_in_seconds = Some(input);
            self
        }
        pub fn set_timeout_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
            self.timeout_in_seconds = input;
            self
        }
        /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
        pub fn memory_in_mb(mut self, input: i32) -> Self {
            self.memory_in_mb = Some(input);
            self
        }
        pub fn set_memory_in_mb(mut self, input: std::option::Option<i32>) -> Self {
            self.memory_in_mb = input;
            self
        }
        /// <p>Specifies whether this canary is to use active AWS X-Ray tracing when it runs. Active tracing
        /// enables
        /// this canary run to be displayed in the ServiceLens and X-Ray service maps even if the canary does
        /// not hit an endpoint that has X-ray tracing enabled. Using X-Ray tracing incurs charges.
        /// For more information, see  <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_tracing.html">
        /// Canaries and X-Ray tracing</a>.</p>
        /// <p>You can enable active tracing only for canaries that use version <code>syn-nodejs-2.0</code>
        /// or later for their canary runtime.</p>
        pub fn active_tracing(mut self, input: bool) -> Self {
            self.active_tracing = Some(input);
            self
        }
        pub fn set_active_tracing(mut self, input: std::option::Option<bool>) -> Self {
            self.active_tracing = input;
            self
        }
        pub fn environment_variables(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.environment_variables.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.environment_variables = Some(hash_map);
            self
        }
        pub fn set_environment_variables(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.environment_variables = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryRunConfigInput`](crate::model::CanaryRunConfigInput)
        pub fn build(self) -> crate::model::CanaryRunConfigInput {
            crate::model::CanaryRunConfigInput {
                timeout_in_seconds: self.timeout_in_seconds,
                memory_in_mb: self.memory_in_mb,
                active_tracing: self.active_tracing,
                environment_variables: self.environment_variables,
            }
        }
    }
}
impl CanaryRunConfigInput {
    /// Creates a new builder-style object to manufacture [`CanaryRunConfigInput`](crate::model::CanaryRunConfigInput)
    pub fn builder() -> crate::model::canary_run_config_input::Builder {
        crate::model::canary_run_config_input::Builder::default()
    }
}

/// <p>This structure specifies how often a canary is to make runs and the date and time
/// when it should stop making runs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryScheduleInput {
    /// <p>A rate expression that defines how often the canary is to run. The syntax is
    /// <code>rate(<i>number unit</i>)</code>. <i>unit</i>
    /// can be <code>minute</code>, <code>minutes</code>, or <code>hour</code>. </p>
    /// <p>For example, <code>rate(1 minute)</code> runs the canary once a minute, <code>rate(10 minutes)</code> runs it once every
    /// 10 minutes, and <code>rate(1 hour)</code> runs it once every hour. You can
    /// specify a frequency between <code>rate(1 minute)</code> and <code>rate(1 hour)</code>.</p>
    /// <p>Specifying <code>rate(0 minute)</code> or <code>rate(0 hour)</code> is a special value
    /// that causes the
    /// canary to run only once when it is started.</p>
    pub expression: std::option::Option<std::string::String>,
    /// <p>How long, in seconds, for the canary to continue making regular runs according to
    /// the schedule in the <code>Expression</code> value. If you specify 0, the canary continues
    /// making runs until you stop it. If you omit this field, the default of 0 is used.</p>
    pub duration_in_seconds: std::option::Option<i64>,
}
impl std::fmt::Debug for CanaryScheduleInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryScheduleInput");
        formatter.field("expression", &self.expression);
        formatter.field("duration_in_seconds", &self.duration_in_seconds);
        formatter.finish()
    }
}
/// See [`CanaryScheduleInput`](crate::model::CanaryScheduleInput)
pub mod canary_schedule_input {
    /// A builder for [`CanaryScheduleInput`](crate::model::CanaryScheduleInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) expression: std::option::Option<std::string::String>,
        pub(crate) duration_in_seconds: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>A rate expression that defines how often the canary is to run. The syntax is
        /// <code>rate(<i>number unit</i>)</code>. <i>unit</i>
        /// can be <code>minute</code>, <code>minutes</code>, or <code>hour</code>. </p>
        /// <p>For example, <code>rate(1 minute)</code> runs the canary once a minute, <code>rate(10 minutes)</code> runs it once every
        /// 10 minutes, and <code>rate(1 hour)</code> runs it once every hour. You can
        /// specify a frequency between <code>rate(1 minute)</code> and <code>rate(1 hour)</code>.</p>
        /// <p>Specifying <code>rate(0 minute)</code> or <code>rate(0 hour)</code> is a special value
        /// that causes the
        /// canary to run only once when it is started.</p>
        pub fn expression(mut self, input: impl Into<std::string::String>) -> Self {
            self.expression = Some(input.into());
            self
        }
        pub fn set_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.expression = input;
            self
        }
        /// <p>How long, in seconds, for the canary to continue making regular runs according to
        /// the schedule in the <code>Expression</code> value. If you specify 0, the canary continues
        /// making runs until you stop it. If you omit this field, the default of 0 is used.</p>
        pub fn duration_in_seconds(mut self, input: i64) -> Self {
            self.duration_in_seconds = Some(input);
            self
        }
        pub fn set_duration_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
            self.duration_in_seconds = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryScheduleInput`](crate::model::CanaryScheduleInput)
        pub fn build(self) -> crate::model::CanaryScheduleInput {
            crate::model::CanaryScheduleInput {
                expression: self.expression,
                duration_in_seconds: self.duration_in_seconds,
            }
        }
    }
}
impl CanaryScheduleInput {
    /// Creates a new builder-style object to manufacture [`CanaryScheduleInput`](crate::model::CanaryScheduleInput)
    pub fn builder() -> crate::model::canary_schedule_input::Builder {
        crate::model::canary_schedule_input::Builder::default()
    }
}

/// <p>Use this structure to input your script code for the canary. This structure contains the
/// Lambda handler with the location where the canary should start running the script. If the
/// script is stored in an S3 bucket, the bucket name, key, and version are also included. If
/// the script was passed into the canary directly, the script code is contained in the value
/// of <code>Zipfile</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryCodeInput {
    /// <p>If your canary script is located in S3, specify the full bucket name here. The bucket
    /// must already exist. Specify the full bucket name, including <code>s3://</code> as the
    /// start of the bucket name.</p>
    pub s3_bucket: std::option::Option<std::string::String>,
    /// <p>The S3 key of your script. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html">Working with Amazon S3 Objects</a>.</p>
    pub s3_key: std::option::Option<std::string::String>,
    /// <p>The S3 version ID of your script.</p>
    pub s3_version: std::option::Option<std::string::String>,
    /// <p>If you input your canary script directly into the canary instead of referring to an S3
    /// location, the value of this parameter is the .zip file that contains the script. It can be
    /// up to 5 MB.</p>
    pub zip_file: std::option::Option<smithy_types::Blob>,
    /// <p>The entry point to use for the source code when running the canary. This value must end
    /// with the string <code>.handler</code>.</p>
    pub handler: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CanaryCodeInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryCodeInput");
        formatter.field("s3_bucket", &self.s3_bucket);
        formatter.field("s3_key", &self.s3_key);
        formatter.field("s3_version", &self.s3_version);
        formatter.field("zip_file", &self.zip_file);
        formatter.field("handler", &self.handler);
        formatter.finish()
    }
}
/// See [`CanaryCodeInput`](crate::model::CanaryCodeInput)
pub mod canary_code_input {
    /// A builder for [`CanaryCodeInput`](crate::model::CanaryCodeInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_bucket: std::option::Option<std::string::String>,
        pub(crate) s3_key: std::option::Option<std::string::String>,
        pub(crate) s3_version: std::option::Option<std::string::String>,
        pub(crate) zip_file: std::option::Option<smithy_types::Blob>,
        pub(crate) handler: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>If your canary script is located in S3, specify the full bucket name here. The bucket
        /// must already exist. Specify the full bucket name, including <code>s3://</code> as the
        /// start of the bucket name.</p>
        pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_bucket = Some(input.into());
            self
        }
        pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_bucket = input;
            self
        }
        /// <p>The S3 key of your script. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html">Working with Amazon S3 Objects</a>.</p>
        pub fn s3_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_key = Some(input.into());
            self
        }
        pub fn set_s3_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_key = input;
            self
        }
        /// <p>The S3 version ID of your script.</p>
        pub fn s3_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_version = Some(input.into());
            self
        }
        pub fn set_s3_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_version = input;
            self
        }
        /// <p>If you input your canary script directly into the canary instead of referring to an S3
        /// location, the value of this parameter is the .zip file that contains the script. It can be
        /// up to 5 MB.</p>
        pub fn zip_file(mut self, input: smithy_types::Blob) -> Self {
            self.zip_file = Some(input);
            self
        }
        pub fn set_zip_file(mut self, input: std::option::Option<smithy_types::Blob>) -> Self {
            self.zip_file = input;
            self
        }
        /// <p>The entry point to use for the source code when running the canary. This value must end
        /// with the string <code>.handler</code>.</p>
        pub fn handler(mut self, input: impl Into<std::string::String>) -> Self {
            self.handler = Some(input.into());
            self
        }
        pub fn set_handler(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.handler = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryCodeInput`](crate::model::CanaryCodeInput)
        pub fn build(self) -> crate::model::CanaryCodeInput {
            crate::model::CanaryCodeInput {
                s3_bucket: self.s3_bucket,
                s3_key: self.s3_key,
                s3_version: self.s3_version,
                zip_file: self.zip_file,
                handler: self.handler,
            }
        }
    }
}
impl CanaryCodeInput {
    /// Creates a new builder-style object to manufacture [`CanaryCodeInput`](crate::model::CanaryCodeInput)
    pub fn builder() -> crate::model::canary_code_input::Builder {
        crate::model::canary_code_input::Builder::default()
    }
}

/// <p>This structure contains the details about one run of one canary.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryRun {
    /// <p>A unique ID that identifies this canary run.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the canary.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The status of this run.</p>
    pub status: std::option::Option<crate::model::CanaryRunStatus>,
    /// <p>A structure that contains the start and end times of this run.</p>
    pub timeline: std::option::Option<crate::model::CanaryRunTimeline>,
    /// <p>The location where the canary stored artifacts from the run. Artifacts include
    /// the log file, screenshots, and HAR files.</p>
    pub artifact_s3_location: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CanaryRun {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryRun");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("status", &self.status);
        formatter.field("timeline", &self.timeline);
        formatter.field("artifact_s3_location", &self.artifact_s3_location);
        formatter.finish()
    }
}
/// See [`CanaryRun`](crate::model::CanaryRun)
pub mod canary_run {
    /// A builder for [`CanaryRun`](crate::model::CanaryRun)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::CanaryRunStatus>,
        pub(crate) timeline: std::option::Option<crate::model::CanaryRunTimeline>,
        pub(crate) artifact_s3_location: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A unique ID that identifies this canary run.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the canary.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The status of this run.</p>
        pub fn status(mut self, input: crate::model::CanaryRunStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CanaryRunStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A structure that contains the start and end times of this run.</p>
        pub fn timeline(mut self, input: crate::model::CanaryRunTimeline) -> Self {
            self.timeline = Some(input);
            self
        }
        pub fn set_timeline(
            mut self,
            input: std::option::Option<crate::model::CanaryRunTimeline>,
        ) -> Self {
            self.timeline = input;
            self
        }
        /// <p>The location where the canary stored artifacts from the run. Artifacts include
        /// the log file, screenshots, and HAR files.</p>
        pub fn artifact_s3_location(mut self, input: impl Into<std::string::String>) -> Self {
            self.artifact_s3_location = Some(input.into());
            self
        }
        pub fn set_artifact_s3_location(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.artifact_s3_location = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryRun`](crate::model::CanaryRun)
        pub fn build(self) -> crate::model::CanaryRun {
            crate::model::CanaryRun {
                id: self.id,
                name: self.name,
                status: self.status,
                timeline: self.timeline,
                artifact_s3_location: self.artifact_s3_location,
            }
        }
    }
}
impl CanaryRun {
    /// Creates a new builder-style object to manufacture [`CanaryRun`](crate::model::CanaryRun)
    pub fn builder() -> crate::model::canary_run::Builder {
        crate::model::canary_run::Builder::default()
    }
}

/// <p>This structure contains the start and end times of a single canary run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryRunTimeline {
    /// <p>The start time of the run.</p>
    pub started: std::option::Option<smithy_types::Instant>,
    /// <p>The end time of the run.</p>
    pub completed: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for CanaryRunTimeline {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryRunTimeline");
        formatter.field("started", &self.started);
        formatter.field("completed", &self.completed);
        formatter.finish()
    }
}
/// See [`CanaryRunTimeline`](crate::model::CanaryRunTimeline)
pub mod canary_run_timeline {
    /// A builder for [`CanaryRunTimeline`](crate::model::CanaryRunTimeline)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) started: std::option::Option<smithy_types::Instant>,
        pub(crate) completed: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The start time of the run.</p>
        pub fn started(mut self, input: smithy_types::Instant) -> Self {
            self.started = Some(input);
            self
        }
        pub fn set_started(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.started = input;
            self
        }
        /// <p>The end time of the run.</p>
        pub fn completed(mut self, input: smithy_types::Instant) -> Self {
            self.completed = Some(input);
            self
        }
        pub fn set_completed(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.completed = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryRunTimeline`](crate::model::CanaryRunTimeline)
        pub fn build(self) -> crate::model::CanaryRunTimeline {
            crate::model::CanaryRunTimeline {
                started: self.started,
                completed: self.completed,
            }
        }
    }
}
impl CanaryRunTimeline {
    /// Creates a new builder-style object to manufacture [`CanaryRunTimeline`](crate::model::CanaryRunTimeline)
    pub fn builder() -> crate::model::canary_run_timeline::Builder {
        crate::model::canary_run_timeline::Builder::default()
    }
}

/// <p>This structure contains the status information about a canary run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryRunStatus {
    /// <p>The current state of the run.</p>
    pub state: std::option::Option<crate::model::CanaryRunState>,
    /// <p>If run of the canary failed, this field contains the reason for the error.</p>
    pub state_reason: std::option::Option<std::string::String>,
    /// <p>If this value is <code>CANARY_FAILURE</code>, an exception occurred in the
    /// canary code. If this value is <code>EXECUTION_FAILURE</code>, an exception occurred in
    /// CloudWatch Synthetics.</p>
    pub state_reason_code: std::option::Option<crate::model::CanaryRunStateReasonCode>,
}
impl std::fmt::Debug for CanaryRunStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryRunStatus");
        formatter.field("state", &self.state);
        formatter.field("state_reason", &self.state_reason);
        formatter.field("state_reason_code", &self.state_reason_code);
        formatter.finish()
    }
}
/// See [`CanaryRunStatus`](crate::model::CanaryRunStatus)
pub mod canary_run_status {
    /// A builder for [`CanaryRunStatus`](crate::model::CanaryRunStatus)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) state: std::option::Option<crate::model::CanaryRunState>,
        pub(crate) state_reason: std::option::Option<std::string::String>,
        pub(crate) state_reason_code: std::option::Option<crate::model::CanaryRunStateReasonCode>,
    }
    impl Builder {
        /// <p>The current state of the run.</p>
        pub fn state(mut self, input: crate::model::CanaryRunState) -> Self {
            self.state = Some(input);
            self
        }
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::CanaryRunState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>If run of the canary failed, this field contains the reason for the error.</p>
        pub fn state_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.state_reason = Some(input.into());
            self
        }
        pub fn set_state_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.state_reason = input;
            self
        }
        /// <p>If this value is <code>CANARY_FAILURE</code>, an exception occurred in the
        /// canary code. If this value is <code>EXECUTION_FAILURE</code>, an exception occurred in
        /// CloudWatch Synthetics.</p>
        pub fn state_reason_code(mut self, input: crate::model::CanaryRunStateReasonCode) -> Self {
            self.state_reason_code = Some(input);
            self
        }
        pub fn set_state_reason_code(
            mut self,
            input: std::option::Option<crate::model::CanaryRunStateReasonCode>,
        ) -> Self {
            self.state_reason_code = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryRunStatus`](crate::model::CanaryRunStatus)
        pub fn build(self) -> crate::model::CanaryRunStatus {
            crate::model::CanaryRunStatus {
                state: self.state,
                state_reason: self.state_reason,
                state_reason_code: self.state_reason_code,
            }
        }
    }
}
impl CanaryRunStatus {
    /// Creates a new builder-style object to manufacture [`CanaryRunStatus`](crate::model::CanaryRunStatus)
    pub fn builder() -> crate::model::canary_run_status::Builder {
        crate::model::canary_run_status::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CanaryRunStateReasonCode {
    CanaryFailure,
    ExecutionFailure,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for CanaryRunStateReasonCode {
    fn from(s: &str) -> Self {
        match s {
            "CANARY_FAILURE" => CanaryRunStateReasonCode::CanaryFailure,
            "EXECUTION_FAILURE" => CanaryRunStateReasonCode::ExecutionFailure,
            other => CanaryRunStateReasonCode::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for CanaryRunStateReasonCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CanaryRunStateReasonCode::from(s))
    }
}
impl CanaryRunStateReasonCode {
    pub fn as_str(&self) -> &str {
        match self {
            CanaryRunStateReasonCode::CanaryFailure => "CANARY_FAILURE",
            CanaryRunStateReasonCode::ExecutionFailure => "EXECUTION_FAILURE",
            CanaryRunStateReasonCode::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["CANARY_FAILURE", "EXECUTION_FAILURE"]
    }
}
impl AsRef<str> for CanaryRunStateReasonCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CanaryRunState {
    Failed,
    Passed,
    Running,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for CanaryRunState {
    fn from(s: &str) -> Self {
        match s {
            "FAILED" => CanaryRunState::Failed,
            "PASSED" => CanaryRunState::Passed,
            "RUNNING" => CanaryRunState::Running,
            other => CanaryRunState::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for CanaryRunState {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CanaryRunState::from(s))
    }
}
impl CanaryRunState {
    pub fn as_str(&self) -> &str {
        match self {
            CanaryRunState::Failed => "FAILED",
            CanaryRunState::Passed => "PASSED",
            CanaryRunState::Running => "RUNNING",
            CanaryRunState::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["FAILED", "PASSED", "RUNNING"]
    }
}
impl AsRef<str> for CanaryRunState {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>This structure contains all information about one canary in your account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Canary {
    /// <p>The unique ID of this canary.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the canary.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>This structure contains information about the canary's Lambda handler and
    /// where its code is stored by CloudWatch Synthetics.</p>
    pub code: std::option::Option<crate::model::CanaryCodeOutput>,
    /// <p>The ARN of the IAM role used to run the canary. This role must include <code>lambda.amazonaws.com</code> as a principal in the trust
    /// policy.</p>
    pub execution_role_arn: std::option::Option<std::string::String>,
    /// <p>A structure that contains information about how often the canary is to run, and when
    /// these runs are to stop.</p>
    pub schedule: std::option::Option<crate::model::CanaryScheduleOutput>,
    /// <p>A structure that contains information about a canary run.</p>
    pub run_config: std::option::Option<crate::model::CanaryRunConfigOutput>,
    /// <p>The number of days to retain data about successful runs of this canary.</p>
    pub success_retention_period_in_days: std::option::Option<i32>,
    /// <p>The number of days to retain data about failed runs of this canary.</p>
    pub failure_retention_period_in_days: std::option::Option<i32>,
    /// <p>A structure that contains information about the canary's status.</p>
    pub status: std::option::Option<crate::model::CanaryStatus>,
    /// <p>A structure that contains information about when the canary was created, modified, and
    /// most recently run.</p>
    pub timeline: std::option::Option<crate::model::CanaryTimeline>,
    /// <p>The location in Amazon S3 where Synthetics stores artifacts from the runs of this
    /// canary. Artifacts include the log file, screenshots, and HAR files.</p>
    pub artifact_s3_location: std::option::Option<std::string::String>,
    /// <p>The ARN of the Lambda function that is used as your canary's engine. For more information
    /// about Lambda ARN format, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-api-permissions-ref.html">Resources and Conditions for Lambda Actions</a>.</p>
    pub engine_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the runtime version to use for the canary. For more information about
    /// runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
    /// Canary Runtime Versions</a>.</p>
    pub runtime_version: std::option::Option<std::string::String>,
    /// <p>If this canary is to test an endpoint in a VPC, this structure contains
    /// information about the subnets and security groups of the VPC endpoint.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html">
    /// Running a Canary in a VPC</a>.</p>
    pub vpc_config: std::option::Option<crate::model::VpcConfigOutput>,
    /// <p>The list of key-value pairs that are associated with the canary.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for Canary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Canary");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("code", &self.code);
        formatter.field("execution_role_arn", &self.execution_role_arn);
        formatter.field("schedule", &self.schedule);
        formatter.field("run_config", &self.run_config);
        formatter.field(
            "success_retention_period_in_days",
            &self.success_retention_period_in_days,
        );
        formatter.field(
            "failure_retention_period_in_days",
            &self.failure_retention_period_in_days,
        );
        formatter.field("status", &self.status);
        formatter.field("timeline", &self.timeline);
        formatter.field("artifact_s3_location", &self.artifact_s3_location);
        formatter.field("engine_arn", &self.engine_arn);
        formatter.field("runtime_version", &self.runtime_version);
        formatter.field("vpc_config", &self.vpc_config);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`Canary`](crate::model::Canary)
pub mod canary {
    /// A builder for [`Canary`](crate::model::Canary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) code: std::option::Option<crate::model::CanaryCodeOutput>,
        pub(crate) execution_role_arn: std::option::Option<std::string::String>,
        pub(crate) schedule: std::option::Option<crate::model::CanaryScheduleOutput>,
        pub(crate) run_config: std::option::Option<crate::model::CanaryRunConfigOutput>,
        pub(crate) success_retention_period_in_days: std::option::Option<i32>,
        pub(crate) failure_retention_period_in_days: std::option::Option<i32>,
        pub(crate) status: std::option::Option<crate::model::CanaryStatus>,
        pub(crate) timeline: std::option::Option<crate::model::CanaryTimeline>,
        pub(crate) artifact_s3_location: std::option::Option<std::string::String>,
        pub(crate) engine_arn: std::option::Option<std::string::String>,
        pub(crate) runtime_version: std::option::Option<std::string::String>,
        pub(crate) vpc_config: std::option::Option<crate::model::VpcConfigOutput>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>The unique ID of this canary.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the canary.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>This structure contains information about the canary's Lambda handler and
        /// where its code is stored by CloudWatch Synthetics.</p>
        pub fn code(mut self, input: crate::model::CanaryCodeOutput) -> Self {
            self.code = Some(input);
            self
        }
        pub fn set_code(
            mut self,
            input: std::option::Option<crate::model::CanaryCodeOutput>,
        ) -> Self {
            self.code = input;
            self
        }
        /// <p>The ARN of the IAM role used to run the canary. This role must include <code>lambda.amazonaws.com</code> as a principal in the trust
        /// policy.</p>
        pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.execution_role_arn = Some(input.into());
            self
        }
        pub fn set_execution_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.execution_role_arn = input;
            self
        }
        /// <p>A structure that contains information about how often the canary is to run, and when
        /// these runs are to stop.</p>
        pub fn schedule(mut self, input: crate::model::CanaryScheduleOutput) -> Self {
            self.schedule = Some(input);
            self
        }
        pub fn set_schedule(
            mut self,
            input: std::option::Option<crate::model::CanaryScheduleOutput>,
        ) -> Self {
            self.schedule = input;
            self
        }
        /// <p>A structure that contains information about a canary run.</p>
        pub fn run_config(mut self, input: crate::model::CanaryRunConfigOutput) -> Self {
            self.run_config = Some(input);
            self
        }
        pub fn set_run_config(
            mut self,
            input: std::option::Option<crate::model::CanaryRunConfigOutput>,
        ) -> Self {
            self.run_config = input;
            self
        }
        /// <p>The number of days to retain data about successful runs of this canary.</p>
        pub fn success_retention_period_in_days(mut self, input: i32) -> Self {
            self.success_retention_period_in_days = Some(input);
            self
        }
        pub fn set_success_retention_period_in_days(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.success_retention_period_in_days = input;
            self
        }
        /// <p>The number of days to retain data about failed runs of this canary.</p>
        pub fn failure_retention_period_in_days(mut self, input: i32) -> Self {
            self.failure_retention_period_in_days = Some(input);
            self
        }
        pub fn set_failure_retention_period_in_days(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.failure_retention_period_in_days = input;
            self
        }
        /// <p>A structure that contains information about the canary's status.</p>
        pub fn status(mut self, input: crate::model::CanaryStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CanaryStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A structure that contains information about when the canary was created, modified, and
        /// most recently run.</p>
        pub fn timeline(mut self, input: crate::model::CanaryTimeline) -> Self {
            self.timeline = Some(input);
            self
        }
        pub fn set_timeline(
            mut self,
            input: std::option::Option<crate::model::CanaryTimeline>,
        ) -> Self {
            self.timeline = input;
            self
        }
        /// <p>The location in Amazon S3 where Synthetics stores artifacts from the runs of this
        /// canary. Artifacts include the log file, screenshots, and HAR files.</p>
        pub fn artifact_s3_location(mut self, input: impl Into<std::string::String>) -> Self {
            self.artifact_s3_location = Some(input.into());
            self
        }
        pub fn set_artifact_s3_location(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.artifact_s3_location = input;
            self
        }
        /// <p>The ARN of the Lambda function that is used as your canary's engine. For more information
        /// about Lambda ARN format, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-api-permissions-ref.html">Resources and Conditions for Lambda Actions</a>.</p>
        pub fn engine_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_arn = Some(input.into());
            self
        }
        pub fn set_engine_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine_arn = input;
            self
        }
        /// <p>Specifies the runtime version to use for the canary. For more information about
        /// runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
        /// Canary Runtime Versions</a>.</p>
        pub fn runtime_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.runtime_version = Some(input.into());
            self
        }
        pub fn set_runtime_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.runtime_version = input;
            self
        }
        /// <p>If this canary is to test an endpoint in a VPC, this structure contains
        /// information about the subnets and security groups of the VPC endpoint.
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html">
        /// Running a Canary in a VPC</a>.</p>
        pub fn vpc_config(mut self, input: crate::model::VpcConfigOutput) -> Self {
            self.vpc_config = Some(input);
            self
        }
        pub fn set_vpc_config(
            mut self,
            input: std::option::Option<crate::model::VpcConfigOutput>,
        ) -> Self {
            self.vpc_config = input;
            self
        }
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`Canary`](crate::model::Canary)
        pub fn build(self) -> crate::model::Canary {
            crate::model::Canary {
                id: self.id,
                name: self.name,
                code: self.code,
                execution_role_arn: self.execution_role_arn,
                schedule: self.schedule,
                run_config: self.run_config,
                success_retention_period_in_days: self.success_retention_period_in_days,
                failure_retention_period_in_days: self.failure_retention_period_in_days,
                status: self.status,
                timeline: self.timeline,
                artifact_s3_location: self.artifact_s3_location,
                engine_arn: self.engine_arn,
                runtime_version: self.runtime_version,
                vpc_config: self.vpc_config,
                tags: self.tags,
            }
        }
    }
}
impl Canary {
    /// Creates a new builder-style object to manufacture [`Canary`](crate::model::Canary)
    pub fn builder() -> crate::model::canary::Builder {
        crate::model::canary::Builder::default()
    }
}

/// <p>If this canary is to test an endpoint in a VPC, this structure contains
/// information about the subnets and security groups of the VPC endpoint.
/// For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html">
/// Running a Canary in a VPC</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct VpcConfigOutput {
    /// <p>The IDs of the VPC where this canary is to run.</p>
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The IDs of the subnets where this canary is to run.</p>
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IDs of the security groups for this canary.</p>
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for VpcConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("VpcConfigOutput");
        formatter.field("vpc_id", &self.vpc_id);
        formatter.field("subnet_ids", &self.subnet_ids);
        formatter.field("security_group_ids", &self.security_group_ids);
        formatter.finish()
    }
}
/// See [`VpcConfigOutput`](crate::model::VpcConfigOutput)
pub mod vpc_config_output {
    /// A builder for [`VpcConfigOutput`](crate::model::VpcConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_id: std::option::Option<std::string::String>,
        pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The IDs of the VPC where this canary is to run.</p>
        pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.vpc_id = Some(input.into());
            self
        }
        pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.vpc_id = input;
            self
        }
        pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.subnet_ids.unwrap_or_default();
            v.push(input.into());
            self.subnet_ids = Some(v);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.subnet_ids = input;
            self
        }
        pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.security_group_ids = Some(v);
            self
        }
        pub fn set_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.security_group_ids = input;
            self
        }
        /// Consumes the builder and constructs a [`VpcConfigOutput`](crate::model::VpcConfigOutput)
        pub fn build(self) -> crate::model::VpcConfigOutput {
            crate::model::VpcConfigOutput {
                vpc_id: self.vpc_id,
                subnet_ids: self.subnet_ids,
                security_group_ids: self.security_group_ids,
            }
        }
    }
}
impl VpcConfigOutput {
    /// Creates a new builder-style object to manufacture [`VpcConfigOutput`](crate::model::VpcConfigOutput)
    pub fn builder() -> crate::model::vpc_config_output::Builder {
        crate::model::vpc_config_output::Builder::default()
    }
}

/// <p>This structure contains information about when the canary was created and modified.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryTimeline {
    /// <p>The date and time the canary was created.</p>
    pub created: std::option::Option<smithy_types::Instant>,
    /// <p>The date and time the canary was most recently modified.</p>
    pub last_modified: std::option::Option<smithy_types::Instant>,
    /// <p>The date and time that the canary's most recent run started.</p>
    pub last_started: std::option::Option<smithy_types::Instant>,
    /// <p>The date and time that the canary's most recent run ended.</p>
    pub last_stopped: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for CanaryTimeline {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryTimeline");
        formatter.field("created", &self.created);
        formatter.field("last_modified", &self.last_modified);
        formatter.field("last_started", &self.last_started);
        formatter.field("last_stopped", &self.last_stopped);
        formatter.finish()
    }
}
/// See [`CanaryTimeline`](crate::model::CanaryTimeline)
pub mod canary_timeline {
    /// A builder for [`CanaryTimeline`](crate::model::CanaryTimeline)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) created: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified: std::option::Option<smithy_types::Instant>,
        pub(crate) last_started: std::option::Option<smithy_types::Instant>,
        pub(crate) last_stopped: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The date and time the canary was created.</p>
        pub fn created(mut self, input: smithy_types::Instant) -> Self {
            self.created = Some(input);
            self
        }
        pub fn set_created(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created = input;
            self
        }
        /// <p>The date and time the canary was most recently modified.</p>
        pub fn last_modified(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified = Some(input);
            self
        }
        pub fn set_last_modified(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified = input;
            self
        }
        /// <p>The date and time that the canary's most recent run started.</p>
        pub fn last_started(mut self, input: smithy_types::Instant) -> Self {
            self.last_started = Some(input);
            self
        }
        pub fn set_last_started(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_started = input;
            self
        }
        /// <p>The date and time that the canary's most recent run ended.</p>
        pub fn last_stopped(mut self, input: smithy_types::Instant) -> Self {
            self.last_stopped = Some(input);
            self
        }
        pub fn set_last_stopped(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_stopped = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryTimeline`](crate::model::CanaryTimeline)
        pub fn build(self) -> crate::model::CanaryTimeline {
            crate::model::CanaryTimeline {
                created: self.created,
                last_modified: self.last_modified,
                last_started: self.last_started,
                last_stopped: self.last_stopped,
            }
        }
    }
}
impl CanaryTimeline {
    /// Creates a new builder-style object to manufacture [`CanaryTimeline`](crate::model::CanaryTimeline)
    pub fn builder() -> crate::model::canary_timeline::Builder {
        crate::model::canary_timeline::Builder::default()
    }
}

/// <p>A structure that contains the current state of the canary.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryStatus {
    /// <p>The current state of the canary.</p>
    pub state: std::option::Option<crate::model::CanaryState>,
    /// <p>If the canary has insufficient permissions to run, this field provides more details.</p>
    pub state_reason: std::option::Option<std::string::String>,
    /// <p>If the canary cannot run or has failed, this field displays the reason.</p>
    pub state_reason_code: std::option::Option<crate::model::CanaryStateReasonCode>,
}
impl std::fmt::Debug for CanaryStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryStatus");
        formatter.field("state", &self.state);
        formatter.field("state_reason", &self.state_reason);
        formatter.field("state_reason_code", &self.state_reason_code);
        formatter.finish()
    }
}
/// See [`CanaryStatus`](crate::model::CanaryStatus)
pub mod canary_status {
    /// A builder for [`CanaryStatus`](crate::model::CanaryStatus)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) state: std::option::Option<crate::model::CanaryState>,
        pub(crate) state_reason: std::option::Option<std::string::String>,
        pub(crate) state_reason_code: std::option::Option<crate::model::CanaryStateReasonCode>,
    }
    impl Builder {
        /// <p>The current state of the canary.</p>
        pub fn state(mut self, input: crate::model::CanaryState) -> Self {
            self.state = Some(input);
            self
        }
        pub fn set_state(mut self, input: std::option::Option<crate::model::CanaryState>) -> Self {
            self.state = input;
            self
        }
        /// <p>If the canary has insufficient permissions to run, this field provides more details.</p>
        pub fn state_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.state_reason = Some(input.into());
            self
        }
        pub fn set_state_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.state_reason = input;
            self
        }
        /// <p>If the canary cannot run or has failed, this field displays the reason.</p>
        pub fn state_reason_code(mut self, input: crate::model::CanaryStateReasonCode) -> Self {
            self.state_reason_code = Some(input);
            self
        }
        pub fn set_state_reason_code(
            mut self,
            input: std::option::Option<crate::model::CanaryStateReasonCode>,
        ) -> Self {
            self.state_reason_code = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryStatus`](crate::model::CanaryStatus)
        pub fn build(self) -> crate::model::CanaryStatus {
            crate::model::CanaryStatus {
                state: self.state,
                state_reason: self.state_reason,
                state_reason_code: self.state_reason_code,
            }
        }
    }
}
impl CanaryStatus {
    /// Creates a new builder-style object to manufacture [`CanaryStatus`](crate::model::CanaryStatus)
    pub fn builder() -> crate::model::canary_status::Builder {
        crate::model::canary_status::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CanaryStateReasonCode {
    InvalidPermissions,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for CanaryStateReasonCode {
    fn from(s: &str) -> Self {
        match s {
            "INVALID_PERMISSIONS" => CanaryStateReasonCode::InvalidPermissions,
            other => CanaryStateReasonCode::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for CanaryStateReasonCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CanaryStateReasonCode::from(s))
    }
}
impl CanaryStateReasonCode {
    pub fn as_str(&self) -> &str {
        match self {
            CanaryStateReasonCode::InvalidPermissions => "INVALID_PERMISSIONS",
            CanaryStateReasonCode::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["INVALID_PERMISSIONS"]
    }
}
impl AsRef<str> for CanaryStateReasonCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CanaryState {
    Creating,
    Deleting,
    Error,
    Ready,
    Running,
    Starting,
    Stopped,
    Stopping,
    Updating,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for CanaryState {
    fn from(s: &str) -> Self {
        match s {
            "CREATING" => CanaryState::Creating,
            "DELETING" => CanaryState::Deleting,
            "ERROR" => CanaryState::Error,
            "READY" => CanaryState::Ready,
            "RUNNING" => CanaryState::Running,
            "STARTING" => CanaryState::Starting,
            "STOPPED" => CanaryState::Stopped,
            "STOPPING" => CanaryState::Stopping,
            "UPDATING" => CanaryState::Updating,
            other => CanaryState::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for CanaryState {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CanaryState::from(s))
    }
}
impl CanaryState {
    pub fn as_str(&self) -> &str {
        match self {
            CanaryState::Creating => "CREATING",
            CanaryState::Deleting => "DELETING",
            CanaryState::Error => "ERROR",
            CanaryState::Ready => "READY",
            CanaryState::Running => "RUNNING",
            CanaryState::Starting => "STARTING",
            CanaryState::Stopped => "STOPPED",
            CanaryState::Stopping => "STOPPING",
            CanaryState::Updating => "UPDATING",
            CanaryState::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &[
            "CREATING", "DELETING", "ERROR", "READY", "RUNNING", "STARTING", "STOPPED", "STOPPING",
            "UPDATING",
        ]
    }
}
impl AsRef<str> for CanaryState {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>A structure that contains information about a canary run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryRunConfigOutput {
    /// <p>How long the canary is allowed to run before it must stop.</p>
    pub timeout_in_seconds: std::option::Option<i32>,
    /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value
    /// must be a multiple of 64.</p>
    pub memory_in_mb: std::option::Option<i32>,
    /// <p>Displays whether this canary run used active AWS X-Ray tracing. </p>
    pub active_tracing: std::option::Option<bool>,
}
impl std::fmt::Debug for CanaryRunConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryRunConfigOutput");
        formatter.field("timeout_in_seconds", &self.timeout_in_seconds);
        formatter.field("memory_in_mb", &self.memory_in_mb);
        formatter.field("active_tracing", &self.active_tracing);
        formatter.finish()
    }
}
/// See [`CanaryRunConfigOutput`](crate::model::CanaryRunConfigOutput)
pub mod canary_run_config_output {
    /// A builder for [`CanaryRunConfigOutput`](crate::model::CanaryRunConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) timeout_in_seconds: std::option::Option<i32>,
        pub(crate) memory_in_mb: std::option::Option<i32>,
        pub(crate) active_tracing: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>How long the canary is allowed to run before it must stop.</p>
        pub fn timeout_in_seconds(mut self, input: i32) -> Self {
            self.timeout_in_seconds = Some(input);
            self
        }
        pub fn set_timeout_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
            self.timeout_in_seconds = input;
            self
        }
        /// <p>The maximum amount of memory available to the canary while it is running, in MB. This value
        /// must be a multiple of 64.</p>
        pub fn memory_in_mb(mut self, input: i32) -> Self {
            self.memory_in_mb = Some(input);
            self
        }
        pub fn set_memory_in_mb(mut self, input: std::option::Option<i32>) -> Self {
            self.memory_in_mb = input;
            self
        }
        /// <p>Displays whether this canary run used active AWS X-Ray tracing. </p>
        pub fn active_tracing(mut self, input: bool) -> Self {
            self.active_tracing = Some(input);
            self
        }
        pub fn set_active_tracing(mut self, input: std::option::Option<bool>) -> Self {
            self.active_tracing = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryRunConfigOutput`](crate::model::CanaryRunConfigOutput)
        pub fn build(self) -> crate::model::CanaryRunConfigOutput {
            crate::model::CanaryRunConfigOutput {
                timeout_in_seconds: self.timeout_in_seconds,
                memory_in_mb: self.memory_in_mb,
                active_tracing: self.active_tracing,
            }
        }
    }
}
impl CanaryRunConfigOutput {
    /// Creates a new builder-style object to manufacture [`CanaryRunConfigOutput`](crate::model::CanaryRunConfigOutput)
    pub fn builder() -> crate::model::canary_run_config_output::Builder {
        crate::model::canary_run_config_output::Builder::default()
    }
}

/// <p>How long, in seconds, for the canary to continue making regular runs according to the schedule in the
/// <code>Expression</code> value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryScheduleOutput {
    /// <p>A rate expression that defines how often the canary is to run. The syntax is
    /// <code>rate(<i>number unit</i>)</code>. <i>unit</i>
    /// can be <code>minute</code>, <code>minutes</code>, or <code>hour</code>. </p>
    /// <p>For example, <code>rate(1 minute)</code> runs the canary once a minute, <code>rate(10 minutes)</code> runs it once every
    /// 10 minutes, and <code>rate(1 hour)</code> runs it once every hour.</p>
    /// <p>Specifying <code>rate(0 minute)</code> or <code>rate(0 hour)</code> is a special value
    /// that causes the
    /// canary to run only once when it is started.</p>
    pub expression: std::option::Option<std::string::String>,
    /// <p>How long, in seconds, for the canary to continue making regular runs after it
    /// was created. The runs are performed according to the schedule in the
    /// <code>Expression</code> value.</p>
    pub duration_in_seconds: std::option::Option<i64>,
}
impl std::fmt::Debug for CanaryScheduleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryScheduleOutput");
        formatter.field("expression", &self.expression);
        formatter.field("duration_in_seconds", &self.duration_in_seconds);
        formatter.finish()
    }
}
/// See [`CanaryScheduleOutput`](crate::model::CanaryScheduleOutput)
pub mod canary_schedule_output {
    /// A builder for [`CanaryScheduleOutput`](crate::model::CanaryScheduleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) expression: std::option::Option<std::string::String>,
        pub(crate) duration_in_seconds: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>A rate expression that defines how often the canary is to run. The syntax is
        /// <code>rate(<i>number unit</i>)</code>. <i>unit</i>
        /// can be <code>minute</code>, <code>minutes</code>, or <code>hour</code>. </p>
        /// <p>For example, <code>rate(1 minute)</code> runs the canary once a minute, <code>rate(10 minutes)</code> runs it once every
        /// 10 minutes, and <code>rate(1 hour)</code> runs it once every hour.</p>
        /// <p>Specifying <code>rate(0 minute)</code> or <code>rate(0 hour)</code> is a special value
        /// that causes the
        /// canary to run only once when it is started.</p>
        pub fn expression(mut self, input: impl Into<std::string::String>) -> Self {
            self.expression = Some(input.into());
            self
        }
        pub fn set_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.expression = input;
            self
        }
        /// <p>How long, in seconds, for the canary to continue making regular runs after it
        /// was created. The runs are performed according to the schedule in the
        /// <code>Expression</code> value.</p>
        pub fn duration_in_seconds(mut self, input: i64) -> Self {
            self.duration_in_seconds = Some(input);
            self
        }
        pub fn set_duration_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
            self.duration_in_seconds = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryScheduleOutput`](crate::model::CanaryScheduleOutput)
        pub fn build(self) -> crate::model::CanaryScheduleOutput {
            crate::model::CanaryScheduleOutput {
                expression: self.expression,
                duration_in_seconds: self.duration_in_seconds,
            }
        }
    }
}
impl CanaryScheduleOutput {
    /// Creates a new builder-style object to manufacture [`CanaryScheduleOutput`](crate::model::CanaryScheduleOutput)
    pub fn builder() -> crate::model::canary_schedule_output::Builder {
        crate::model::canary_schedule_output::Builder::default()
    }
}

/// <p>This structure contains information about the canary's Lambda handler and
/// where its code is stored by CloudWatch Synthetics.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryCodeOutput {
    /// <p>The ARN of the Lambda layer where Synthetics stores the canary script code.</p>
    pub source_location_arn: std::option::Option<std::string::String>,
    /// <p>The entry point to use for the source code when running the canary.</p>
    pub handler: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CanaryCodeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryCodeOutput");
        formatter.field("source_location_arn", &self.source_location_arn);
        formatter.field("handler", &self.handler);
        formatter.finish()
    }
}
/// See [`CanaryCodeOutput`](crate::model::CanaryCodeOutput)
pub mod canary_code_output {
    /// A builder for [`CanaryCodeOutput`](crate::model::CanaryCodeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_location_arn: std::option::Option<std::string::String>,
        pub(crate) handler: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the Lambda layer where Synthetics stores the canary script code.</p>
        pub fn source_location_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_location_arn = Some(input.into());
            self
        }
        pub fn set_source_location_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_location_arn = input;
            self
        }
        /// <p>The entry point to use for the source code when running the canary.</p>
        pub fn handler(mut self, input: impl Into<std::string::String>) -> Self {
            self.handler = Some(input.into());
            self
        }
        pub fn set_handler(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.handler = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryCodeOutput`](crate::model::CanaryCodeOutput)
        pub fn build(self) -> crate::model::CanaryCodeOutput {
            crate::model::CanaryCodeOutput {
                source_location_arn: self.source_location_arn,
                handler: self.handler,
            }
        }
    }
}
impl CanaryCodeOutput {
    /// Creates a new builder-style object to manufacture [`CanaryCodeOutput`](crate::model::CanaryCodeOutput)
    pub fn builder() -> crate::model::canary_code_output::Builder {
        crate::model::canary_code_output::Builder::default()
    }
}

/// <p>This structure contains information about one canary runtime version. For more information about
/// runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
/// Canary Runtime Versions</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RuntimeVersion {
    /// <p>The name of the runtime version. For a list of valid runtime versions,
    /// see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
    /// Canary Runtime Versions</a>.</p>
    pub version_name: std::option::Option<std::string::String>,
    /// <p>A description of the runtime version, created by Amazon.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The date that the runtime version was released.</p>
    pub release_date: std::option::Option<smithy_types::Instant>,
    /// <p>If this runtime version is deprecated, this value is the date of deprecation.</p>
    pub deprecation_date: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for RuntimeVersion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RuntimeVersion");
        formatter.field("version_name", &self.version_name);
        formatter.field("description", &self.description);
        formatter.field("release_date", &self.release_date);
        formatter.field("deprecation_date", &self.deprecation_date);
        formatter.finish()
    }
}
/// See [`RuntimeVersion`](crate::model::RuntimeVersion)
pub mod runtime_version {
    /// A builder for [`RuntimeVersion`](crate::model::RuntimeVersion)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) version_name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) release_date: std::option::Option<smithy_types::Instant>,
        pub(crate) deprecation_date: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The name of the runtime version. For a list of valid runtime versions,
        /// see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
        /// Canary Runtime Versions</a>.</p>
        pub fn version_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.version_name = Some(input.into());
            self
        }
        pub fn set_version_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version_name = input;
            self
        }
        /// <p>A description of the runtime version, created by Amazon.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The date that the runtime version was released.</p>
        pub fn release_date(mut self, input: smithy_types::Instant) -> Self {
            self.release_date = Some(input);
            self
        }
        pub fn set_release_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.release_date = input;
            self
        }
        /// <p>If this runtime version is deprecated, this value is the date of deprecation.</p>
        pub fn deprecation_date(mut self, input: smithy_types::Instant) -> Self {
            self.deprecation_date = Some(input);
            self
        }
        pub fn set_deprecation_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.deprecation_date = input;
            self
        }
        /// Consumes the builder and constructs a [`RuntimeVersion`](crate::model::RuntimeVersion)
        pub fn build(self) -> crate::model::RuntimeVersion {
            crate::model::RuntimeVersion {
                version_name: self.version_name,
                description: self.description,
                release_date: self.release_date,
                deprecation_date: self.deprecation_date,
            }
        }
    }
}
impl RuntimeVersion {
    /// Creates a new builder-style object to manufacture [`RuntimeVersion`](crate::model::RuntimeVersion)
    pub fn builder() -> crate::model::runtime_version::Builder {
        crate::model::runtime_version::Builder::default()
    }
}

/// <p>This structure contains information about the most recent run of a single canary.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CanaryLastRun {
    /// <p>The name of the canary.</p>
    pub canary_name: std::option::Option<std::string::String>,
    /// <p>The results from this canary's most recent run.</p>
    pub last_run: std::option::Option<crate::model::CanaryRun>,
}
impl std::fmt::Debug for CanaryLastRun {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CanaryLastRun");
        formatter.field("canary_name", &self.canary_name);
        formatter.field("last_run", &self.last_run);
        formatter.finish()
    }
}
/// See [`CanaryLastRun`](crate::model::CanaryLastRun)
pub mod canary_last_run {
    /// A builder for [`CanaryLastRun`](crate::model::CanaryLastRun)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) canary_name: std::option::Option<std::string::String>,
        pub(crate) last_run: std::option::Option<crate::model::CanaryRun>,
    }
    impl Builder {
        /// <p>The name of the canary.</p>
        pub fn canary_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.canary_name = Some(input.into());
            self
        }
        pub fn set_canary_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.canary_name = input;
            self
        }
        /// <p>The results from this canary's most recent run.</p>
        pub fn last_run(mut self, input: crate::model::CanaryRun) -> Self {
            self.last_run = Some(input);
            self
        }
        pub fn set_last_run(mut self, input: std::option::Option<crate::model::CanaryRun>) -> Self {
            self.last_run = input;
            self
        }
        /// Consumes the builder and constructs a [`CanaryLastRun`](crate::model::CanaryLastRun)
        pub fn build(self) -> crate::model::CanaryLastRun {
            crate::model::CanaryLastRun {
                canary_name: self.canary_name,
                last_run: self.last_run,
            }
        }
    }
}
impl CanaryLastRun {
    /// Creates a new builder-style object to manufacture [`CanaryLastRun`](crate::model::CanaryLastRun)
    pub fn builder() -> crate::model::canary_last_run::Builder {
        crate::model::canary_last_run::Builder::default()
    }
}
