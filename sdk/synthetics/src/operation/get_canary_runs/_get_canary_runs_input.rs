// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCanaryRunsInput {
    /// <p>The name of the canary that you want to see runs for.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl GetCanaryRunsInput {
    /// <p>The name of the canary that you want to see runs for.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl GetCanaryRunsInput {
    /// Creates a new builder-style object to manufacture [`GetCanaryRunsInput`](crate::operation::get_canary_runs::GetCanaryRunsInput).
    pub fn builder() -> crate::operation::get_canary_runs::builders::GetCanaryRunsInputBuilder {
        crate::operation::get_canary_runs::builders::GetCanaryRunsInputBuilder::default()
    }
}

/// A builder for [`GetCanaryRunsInput`](crate::operation::get_canary_runs::GetCanaryRunsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetCanaryRunsInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl GetCanaryRunsInputBuilder {
    /// <p>The name of the canary that you want to see runs for.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the canary that you want to see runs for.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`GetCanaryRunsInput`](crate::operation::get_canary_runs::GetCanaryRunsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_canary_runs::GetCanaryRunsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_canary_runs::GetCanaryRunsInput {
            name: self.name,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
