// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCanariesOutput {
    /// <p>Returns an array. Each item in the array contains the full information about one canary.</p>
    #[doc(hidden)]
    pub canaries: std::option::Option<std::vec::Vec<crate::types::Canary>>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanaries</code> operation to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCanariesOutput {
    /// <p>Returns an array. Each item in the array contains the full information about one canary.</p>
    pub fn canaries(&self) -> std::option::Option<&[crate::types::Canary]> {
        self.canaries.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanaries</code> operation to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeCanariesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeCanariesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCanariesOutput`](crate::operation::describe_canaries::DescribeCanariesOutput).
    pub fn builder() -> crate::operation::describe_canaries::builders::DescribeCanariesOutputBuilder
    {
        crate::operation::describe_canaries::builders::DescribeCanariesOutputBuilder::default()
    }
}

/// A builder for [`DescribeCanariesOutput`](crate::operation::describe_canaries::DescribeCanariesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeCanariesOutputBuilder {
    pub(crate) canaries: std::option::Option<std::vec::Vec<crate::types::Canary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCanariesOutputBuilder {
    /// Appends an item to `canaries`.
    ///
    /// To override the contents of this collection use [`set_canaries`](Self::set_canaries).
    ///
    /// <p>Returns an array. Each item in the array contains the full information about one canary.</p>
    pub fn canaries(mut self, input: crate::types::Canary) -> Self {
        let mut v = self.canaries.unwrap_or_default();
        v.push(input);
        self.canaries = Some(v);
        self
    }
    /// <p>Returns an array. Each item in the array contains the full information about one canary.</p>
    pub fn set_canaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Canary>>,
    ) -> Self {
        self.canaries = input;
        self
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanaries</code> operation to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanaries</code> operation to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeCanariesOutput`](crate::operation::describe_canaries::DescribeCanariesOutput).
    pub fn build(self) -> crate::operation::describe_canaries::DescribeCanariesOutput {
        crate::operation::describe_canaries::DescribeCanariesOutput {
            canaries: self.canaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
