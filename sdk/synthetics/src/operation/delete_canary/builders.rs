// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_canary::_delete_canary_output::DeleteCanaryOutputBuilder;

pub use crate::operation::delete_canary::_delete_canary_input::DeleteCanaryInputBuilder;

impl crate::operation::delete_canary::builders::DeleteCanaryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_canary::DeleteCanaryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_canary::DeleteCanaryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_canary();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteCanary`.
///
/// <p>Permanently deletes the specified canary.</p>
/// <p>If you specify <code>DeleteLambda</code> to <code>true</code>, CloudWatch Synthetics also deletes the Lambda functions and layers that are used by the canary.</p>
/// <p>Other resources used and created by the canary are not automatically deleted. After you delete a canary that you do not intend to use again, you should also delete the following:</p>
/// <ul>
/// <li>
/// <p>The CloudWatch alarms created for this canary. These alarms have a name of <code>Synthetics-SharpDrop-Alarm-<i>MyCanaryName</i> </code>.</p></li>
/// <li>
/// <p>Amazon S3 objects and buckets, such as the canary's artifact location.</p></li>
/// <li>
/// <p>IAM roles created for the canary. If they were created in the console, these roles have the name <code> role/service-role/CloudWatchSyntheticsRole-<i>MyCanaryName</i> </code>.</p></li>
/// <li>
/// <p>CloudWatch Logs log groups created for the canary. These logs groups have the name <code>/aws/lambda/cwsyn-<i>MyCanaryName</i> </code>.</p></li>
/// </ul>
/// <p>Before you delete a canary, you might want to use <code>GetCanary</code> to display the information about this canary. Make note of the information returned by this operation so that you can delete these resources after you delete the canary.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteCanaryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_canary::builders::DeleteCanaryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_canary::DeleteCanaryOutput,
        crate::operation::delete_canary::DeleteCanaryError,
    > for DeleteCanaryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_canary::DeleteCanaryOutput,
            crate::operation::delete_canary::DeleteCanaryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteCanaryFluentBuilder {
    /// Creates a new `DeleteCanary`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteCanary as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_canary::builders::DeleteCanaryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_canary::DeleteCanaryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_canary::DeleteCanaryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_canary::DeleteCanary::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_canary::DeleteCanary::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_canary::DeleteCanaryOutput,
        crate::operation::delete_canary::DeleteCanaryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the canary that you want to delete. To find the names of your canaries, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the canary that you want to delete. To find the names of your canaries, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the canary that you want to delete. To find the names of your canaries, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>Specifies whether to also delete the Lambda functions and layers used by this canary. The default is false.</p>
    /// <p>Type: Boolean</p>
    pub fn delete_lambda(mut self, input: bool) -> Self {
        self.inner = self.inner.delete_lambda(input);
        self
    }
    /// <p>Specifies whether to also delete the Lambda functions and layers used by this canary. The default is false.</p>
    /// <p>Type: Boolean</p>
    pub fn set_delete_lambda(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_delete_lambda(input);
        self
    }
    /// <p>Specifies whether to also delete the Lambda functions and layers used by this canary. The default is false.</p>
    /// <p>Type: Boolean</p>
    pub fn get_delete_lambda(&self) -> &::std::option::Option<bool> {
        self.inner.get_delete_lambda()
    }
}
