// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_canary_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_canary::CreateCanaryInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.artifact_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("ArtifactConfig").start_object();
        crate::protocol_serde::shape_artifact_config_input::ser_artifact_config_input(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.artifact_s3_location {
        object.key("ArtifactS3Location").string(var_3.as_str());
    }
    if let Some(var_4) = &input.code {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Code").start_object();
        crate::protocol_serde::shape_canary_code_input::ser_canary_code_input(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.failure_retention_period_in_days {
        object.key("FailureRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.name {
        object.key("Name").string(var_8.as_str());
    }
    if let Some(var_9) = &input.run_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("RunConfig").start_object();
        crate::protocol_serde::shape_canary_run_config_input::ser_canary_run_config_input(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.runtime_version {
        object.key("RuntimeVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Schedule").start_object();
        crate::protocol_serde::shape_canary_schedule_input::ser_canary_schedule_input(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.success_retention_period_in_days {
        object.key("SuccessRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.tags {
        #[allow(unused_mut)]
        let mut object_16 = object.key("Tags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_20 = object.key("VpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config_input::ser_vpc_config_input(&mut object_20, var_19)?;
        object_20.finish();
    }
    Ok(())
}
