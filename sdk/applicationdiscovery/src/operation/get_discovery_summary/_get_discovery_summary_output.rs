// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDiscoverySummaryOutput {
    /// <p>The number of servers discovered.</p>
    #[doc(hidden)]
    pub servers: i64,
    /// <p>The number of applications discovered.</p>
    #[doc(hidden)]
    pub applications: i64,
    /// <p>The number of servers mapped to applications.</p>
    #[doc(hidden)]
    pub servers_mapped_to_applications: i64,
    /// <p>The number of servers mapped to tags.</p>
    #[doc(hidden)]
    pub servers_mappedto_tags: i64,
    /// <p>Details about discovered agents, including agent status and health.</p>
    #[doc(hidden)]
    pub agent_summary: std::option::Option<crate::types::CustomerAgentInfo>,
    /// <p>Details about discovered connectors, including connector status and health.</p>
    #[doc(hidden)]
    pub connector_summary: std::option::Option<crate::types::CustomerConnectorInfo>,
    /// <p> Details about Migration Evaluator collectors, including collector status and health. </p>
    #[doc(hidden)]
    pub me_collector_summary: std::option::Option<crate::types::CustomerMeCollectorInfo>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub agentless_collector_summary:
        std::option::Option<crate::types::CustomerAgentlessCollectorInfo>,
    _request_id: Option<String>,
}
impl GetDiscoverySummaryOutput {
    /// <p>The number of servers discovered.</p>
    pub fn servers(&self) -> i64 {
        self.servers
    }
    /// <p>The number of applications discovered.</p>
    pub fn applications(&self) -> i64 {
        self.applications
    }
    /// <p>The number of servers mapped to applications.</p>
    pub fn servers_mapped_to_applications(&self) -> i64 {
        self.servers_mapped_to_applications
    }
    /// <p>The number of servers mapped to tags.</p>
    pub fn servers_mappedto_tags(&self) -> i64 {
        self.servers_mappedto_tags
    }
    /// <p>Details about discovered agents, including agent status and health.</p>
    pub fn agent_summary(&self) -> std::option::Option<&crate::types::CustomerAgentInfo> {
        self.agent_summary.as_ref()
    }
    /// <p>Details about discovered connectors, including connector status and health.</p>
    pub fn connector_summary(&self) -> std::option::Option<&crate::types::CustomerConnectorInfo> {
        self.connector_summary.as_ref()
    }
    /// <p> Details about Migration Evaluator collectors, including collector status and health. </p>
    pub fn me_collector_summary(
        &self,
    ) -> std::option::Option<&crate::types::CustomerMeCollectorInfo> {
        self.me_collector_summary.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn agentless_collector_summary(
        &self,
    ) -> std::option::Option<&crate::types::CustomerAgentlessCollectorInfo> {
        self.agentless_collector_summary.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDiscoverySummaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDiscoverySummaryOutput {
    /// Creates a new builder-style object to manufacture [`GetDiscoverySummaryOutput`](crate::operation::get_discovery_summary::GetDiscoverySummaryOutput).
    pub fn builder(
    ) -> crate::operation::get_discovery_summary::builders::GetDiscoverySummaryOutputBuilder {
        crate::operation::get_discovery_summary::builders::GetDiscoverySummaryOutputBuilder::default(
        )
    }
}

/// A builder for [`GetDiscoverySummaryOutput`](crate::operation::get_discovery_summary::GetDiscoverySummaryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDiscoverySummaryOutputBuilder {
    pub(crate) servers: std::option::Option<i64>,
    pub(crate) applications: std::option::Option<i64>,
    pub(crate) servers_mapped_to_applications: std::option::Option<i64>,
    pub(crate) servers_mappedto_tags: std::option::Option<i64>,
    pub(crate) agent_summary: std::option::Option<crate::types::CustomerAgentInfo>,
    pub(crate) connector_summary: std::option::Option<crate::types::CustomerConnectorInfo>,
    pub(crate) me_collector_summary: std::option::Option<crate::types::CustomerMeCollectorInfo>,
    pub(crate) agentless_collector_summary:
        std::option::Option<crate::types::CustomerAgentlessCollectorInfo>,
    _request_id: Option<String>,
}
impl GetDiscoverySummaryOutputBuilder {
    /// <p>The number of servers discovered.</p>
    pub fn servers(mut self, input: i64) -> Self {
        self.servers = Some(input);
        self
    }
    /// <p>The number of servers discovered.</p>
    pub fn set_servers(mut self, input: std::option::Option<i64>) -> Self {
        self.servers = input;
        self
    }
    /// <p>The number of applications discovered.</p>
    pub fn applications(mut self, input: i64) -> Self {
        self.applications = Some(input);
        self
    }
    /// <p>The number of applications discovered.</p>
    pub fn set_applications(mut self, input: std::option::Option<i64>) -> Self {
        self.applications = input;
        self
    }
    /// <p>The number of servers mapped to applications.</p>
    pub fn servers_mapped_to_applications(mut self, input: i64) -> Self {
        self.servers_mapped_to_applications = Some(input);
        self
    }
    /// <p>The number of servers mapped to applications.</p>
    pub fn set_servers_mapped_to_applications(mut self, input: std::option::Option<i64>) -> Self {
        self.servers_mapped_to_applications = input;
        self
    }
    /// <p>The number of servers mapped to tags.</p>
    pub fn servers_mappedto_tags(mut self, input: i64) -> Self {
        self.servers_mappedto_tags = Some(input);
        self
    }
    /// <p>The number of servers mapped to tags.</p>
    pub fn set_servers_mappedto_tags(mut self, input: std::option::Option<i64>) -> Self {
        self.servers_mappedto_tags = input;
        self
    }
    /// <p>Details about discovered agents, including agent status and health.</p>
    pub fn agent_summary(mut self, input: crate::types::CustomerAgentInfo) -> Self {
        self.agent_summary = Some(input);
        self
    }
    /// <p>Details about discovered agents, including agent status and health.</p>
    pub fn set_agent_summary(
        mut self,
        input: std::option::Option<crate::types::CustomerAgentInfo>,
    ) -> Self {
        self.agent_summary = input;
        self
    }
    /// <p>Details about discovered connectors, including connector status and health.</p>
    pub fn connector_summary(mut self, input: crate::types::CustomerConnectorInfo) -> Self {
        self.connector_summary = Some(input);
        self
    }
    /// <p>Details about discovered connectors, including connector status and health.</p>
    pub fn set_connector_summary(
        mut self,
        input: std::option::Option<crate::types::CustomerConnectorInfo>,
    ) -> Self {
        self.connector_summary = input;
        self
    }
    /// <p> Details about Migration Evaluator collectors, including collector status and health. </p>
    pub fn me_collector_summary(mut self, input: crate::types::CustomerMeCollectorInfo) -> Self {
        self.me_collector_summary = Some(input);
        self
    }
    /// <p> Details about Migration Evaluator collectors, including collector status and health. </p>
    pub fn set_me_collector_summary(
        mut self,
        input: std::option::Option<crate::types::CustomerMeCollectorInfo>,
    ) -> Self {
        self.me_collector_summary = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn agentless_collector_summary(
        mut self,
        input: crate::types::CustomerAgentlessCollectorInfo,
    ) -> Self {
        self.agentless_collector_summary = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_agentless_collector_summary(
        mut self,
        input: std::option::Option<crate::types::CustomerAgentlessCollectorInfo>,
    ) -> Self {
        self.agentless_collector_summary = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDiscoverySummaryOutput`](crate::operation::get_discovery_summary::GetDiscoverySummaryOutput).
    pub fn build(self) -> crate::operation::get_discovery_summary::GetDiscoverySummaryOutput {
        crate::operation::get_discovery_summary::GetDiscoverySummaryOutput {
            servers: self.servers.unwrap_or_default(),
            applications: self.applications.unwrap_or_default(),
            servers_mapped_to_applications: self.servers_mapped_to_applications.unwrap_or_default(),
            servers_mappedto_tags: self.servers_mappedto_tags.unwrap_or_default(),
            agent_summary: self.agent_summary,
            connector_summary: self.connector_summary,
            me_collector_summary: self.me_collector_summary,
            agentless_collector_summary: self.agentless_collector_summary,
            _request_id: self._request_id,
        }
    }
}
