// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartBatchDeleteConfigurationTaskInput {
    /// <p> The type of configuration item to delete. Supported types are: SERVER. </p>
    pub configuration_type: ::std::option::Option<crate::types::DeletionConfigurationItemType>,
    /// <p> The list of configuration IDs that will be deleted by the task. </p>
    pub configuration_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StartBatchDeleteConfigurationTaskInput {
    /// <p> The type of configuration item to delete. Supported types are: SERVER. </p>
    pub fn configuration_type(&self) -> ::std::option::Option<&crate::types::DeletionConfigurationItemType> {
        self.configuration_type.as_ref()
    }
    /// <p> The list of configuration IDs that will be deleted by the task. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.configuration_ids.is_none()`.
    pub fn configuration_ids(&self) -> &[::std::string::String] {
        self.configuration_ids.as_deref().unwrap_or_default()
    }
}
impl StartBatchDeleteConfigurationTaskInput {
    /// Creates a new builder-style object to manufacture [`StartBatchDeleteConfigurationTaskInput`](crate::operation::start_batch_delete_configuration_task::StartBatchDeleteConfigurationTaskInput).
    pub fn builder() -> crate::operation::start_batch_delete_configuration_task::builders::StartBatchDeleteConfigurationTaskInputBuilder {
        crate::operation::start_batch_delete_configuration_task::builders::StartBatchDeleteConfigurationTaskInputBuilder::default()
    }
}

/// A builder for [`StartBatchDeleteConfigurationTaskInput`](crate::operation::start_batch_delete_configuration_task::StartBatchDeleteConfigurationTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartBatchDeleteConfigurationTaskInputBuilder {
    pub(crate) configuration_type: ::std::option::Option<crate::types::DeletionConfigurationItemType>,
    pub(crate) configuration_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StartBatchDeleteConfigurationTaskInputBuilder {
    /// <p> The type of configuration item to delete. Supported types are: SERVER. </p>
    /// This field is required.
    pub fn configuration_type(mut self, input: crate::types::DeletionConfigurationItemType) -> Self {
        self.configuration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The type of configuration item to delete. Supported types are: SERVER. </p>
    pub fn set_configuration_type(mut self, input: ::std::option::Option<crate::types::DeletionConfigurationItemType>) -> Self {
        self.configuration_type = input;
        self
    }
    /// <p> The type of configuration item to delete. Supported types are: SERVER. </p>
    pub fn get_configuration_type(&self) -> &::std::option::Option<crate::types::DeletionConfigurationItemType> {
        &self.configuration_type
    }
    /// Appends an item to `configuration_ids`.
    ///
    /// To override the contents of this collection use [`set_configuration_ids`](Self::set_configuration_ids).
    ///
    /// <p> The list of configuration IDs that will be deleted by the task. </p>
    pub fn configuration_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.configuration_ids.unwrap_or_default();
        v.push(input.into());
        self.configuration_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of configuration IDs that will be deleted by the task. </p>
    pub fn set_configuration_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.configuration_ids = input;
        self
    }
    /// <p> The list of configuration IDs that will be deleted by the task. </p>
    pub fn get_configuration_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.configuration_ids
    }
    /// Consumes the builder and constructs a [`StartBatchDeleteConfigurationTaskInput`](crate::operation::start_batch_delete_configuration_task::StartBatchDeleteConfigurationTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_batch_delete_configuration_task::StartBatchDeleteConfigurationTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::start_batch_delete_configuration_task::StartBatchDeleteConfigurationTaskInput {
                configuration_type: self.configuration_type,
                configuration_ids: self.configuration_ids,
            },
        )
    }
}
