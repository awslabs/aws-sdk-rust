// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_server_neighbors::_list_server_neighbors_output::ListServerNeighborsOutputBuilder;

pub use crate::operation::list_server_neighbors::_list_server_neighbors_input::ListServerNeighborsInputBuilder;

/// Fluent builder constructing a request to `ListServerNeighbors`.
///
/// <p>Retrieves a list of servers that are one network hop away from a specified server.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListServerNeighborsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_server_neighbors::builders::ListServerNeighborsInputBuilder,
}
impl ListServerNeighborsFluentBuilder {
    /// Creates a new `ListServerNeighbors`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_server_neighbors::ListServerNeighbors,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_server_neighbors::ListServerNeighborsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_server_neighbors::ListServerNeighborsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_server_neighbors::ListServerNeighborsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Configuration ID of the server for which neighbors are being listed.</p>
    pub fn configuration_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configuration_id(input.into());
        self
    }
    /// <p>Configuration ID of the server for which neighbors are being listed.</p>
    pub fn set_configuration_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_configuration_id(input);
        self
    }
    /// <p>Flag to indicate if port and protocol information is needed as part of the response.</p>
    pub fn port_information_needed(mut self, input: bool) -> Self {
        self.inner = self.inner.port_information_needed(input);
        self
    }
    /// <p>Flag to indicate if port and protocol information is needed as part of the response.</p>
    pub fn set_port_information_needed(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_port_information_needed(input);
        self
    }
    /// Appends an item to `neighborConfigurationIds`.
    ///
    /// To override the contents of this collection use [`set_neighbor_configuration_ids`](Self::set_neighbor_configuration_ids).
    ///
    /// <p>List of configuration IDs to test for one-hop-away.</p>
    pub fn neighbor_configuration_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.neighbor_configuration_ids(input.into());
        self
    }
    /// <p>List of configuration IDs to test for one-hop-away.</p>
    pub fn set_neighbor_configuration_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_neighbor_configuration_ids(input);
        self
    }
    /// <p>Maximum number of results to return in a single page of output.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Maximum number of results to return in a single page of output.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Token to retrieve the next set of results. For example, if you previously specified 100 IDs for <code>ListServerNeighborsRequest$neighborConfigurationIds</code> but set <code>ListServerNeighborsRequest$maxResults</code> to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Token to retrieve the next set of results. For example, if you previously specified 100 IDs for <code>ListServerNeighborsRequest$neighborConfigurationIds</code> but set <code>ListServerNeighborsRequest$maxResults</code> to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
