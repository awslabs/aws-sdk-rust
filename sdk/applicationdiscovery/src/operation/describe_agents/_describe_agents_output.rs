// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAgentsOutput {
    /// <p>Lists agents or the Connector by ID or lists all agents/Connectors associated with your user account if you did not specify an agent/Connector ID. The output includes agent/Connector IDs, IP addresses, media access control (MAC) addresses, agent/Connector health, host name where the agent/Connector resides, and the version number of each agent/Connector.</p>
    #[doc(hidden)]
    pub agents_info: std::option::Option<std::vec::Vec<crate::types::AgentInfo>>,
    /// <p>Token to retrieve the next set of results. For example, if you specified 100 IDs for <code>DescribeAgentsRequest$agentIds</code> but set <code>DescribeAgentsRequest$maxResults</code> to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAgentsOutput {
    /// <p>Lists agents or the Connector by ID or lists all agents/Connectors associated with your user account if you did not specify an agent/Connector ID. The output includes agent/Connector IDs, IP addresses, media access control (MAC) addresses, agent/Connector health, host name where the agent/Connector resides, and the version number of each agent/Connector.</p>
    pub fn agents_info(&self) -> std::option::Option<&[crate::types::AgentInfo]> {
        self.agents_info.as_deref()
    }
    /// <p>Token to retrieve the next set of results. For example, if you specified 100 IDs for <code>DescribeAgentsRequest$agentIds</code> but set <code>DescribeAgentsRequest$maxResults</code> to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAgentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAgentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAgentsOutput`](crate::operation::describe_agents::DescribeAgentsOutput).
    pub fn builder() -> crate::operation::describe_agents::builders::DescribeAgentsOutputBuilder {
        crate::operation::describe_agents::builders::DescribeAgentsOutputBuilder::default()
    }
}

/// A builder for [`DescribeAgentsOutput`](crate::operation::describe_agents::DescribeAgentsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAgentsOutputBuilder {
    pub(crate) agents_info: std::option::Option<std::vec::Vec<crate::types::AgentInfo>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAgentsOutputBuilder {
    /// Appends an item to `agents_info`.
    ///
    /// To override the contents of this collection use [`set_agents_info`](Self::set_agents_info).
    ///
    /// <p>Lists agents or the Connector by ID or lists all agents/Connectors associated with your user account if you did not specify an agent/Connector ID. The output includes agent/Connector IDs, IP addresses, media access control (MAC) addresses, agent/Connector health, host name where the agent/Connector resides, and the version number of each agent/Connector.</p>
    pub fn agents_info(mut self, input: crate::types::AgentInfo) -> Self {
        let mut v = self.agents_info.unwrap_or_default();
        v.push(input);
        self.agents_info = Some(v);
        self
    }
    /// <p>Lists agents or the Connector by ID or lists all agents/Connectors associated with your user account if you did not specify an agent/Connector ID. The output includes agent/Connector IDs, IP addresses, media access control (MAC) addresses, agent/Connector health, host name where the agent/Connector resides, and the version number of each agent/Connector.</p>
    pub fn set_agents_info(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AgentInfo>>,
    ) -> Self {
        self.agents_info = input;
        self
    }
    /// <p>Token to retrieve the next set of results. For example, if you specified 100 IDs for <code>DescribeAgentsRequest$agentIds</code> but set <code>DescribeAgentsRequest$maxResults</code> to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Token to retrieve the next set of results. For example, if you specified 100 IDs for <code>DescribeAgentsRequest$agentIds</code> but set <code>DescribeAgentsRequest$maxResults</code> to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAgentsOutput`](crate::operation::describe_agents::DescribeAgentsOutput).
    pub fn build(self) -> crate::operation::describe_agents::DescribeAgentsOutput {
        crate::operation::describe_agents::DescribeAgentsOutput {
            agents_info: self.agents_info,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
