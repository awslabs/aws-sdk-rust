// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartContinuousExportOutput {
    /// <p>The unique ID assigned to this export.</p>
    #[doc(hidden)]
    pub export_id: std::option::Option<std::string::String>,
    /// <p>The name of the s3 bucket where the export data parquet files are stored.</p>
    #[doc(hidden)]
    pub s3_bucket: std::option::Option<std::string::String>,
    /// <p>The timestamp representing when the continuous export was started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The type of data collector used to gather this data (currently only offered for AGENT).</p>
    #[doc(hidden)]
    pub data_source: std::option::Option<crate::types::DataSource>,
    /// <p>A dictionary which describes how the data is stored.</p>
    /// <ul>
    /// <li> <p> <code>databaseName</code> - the name of the Glue database used to store the schema.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub schema_storage_config:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl StartContinuousExportOutput {
    /// <p>The unique ID assigned to this export.</p>
    pub fn export_id(&self) -> std::option::Option<&str> {
        self.export_id.as_deref()
    }
    /// <p>The name of the s3 bucket where the export data parquet files are stored.</p>
    pub fn s3_bucket(&self) -> std::option::Option<&str> {
        self.s3_bucket.as_deref()
    }
    /// <p>The timestamp representing when the continuous export was started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The type of data collector used to gather this data (currently only offered for AGENT).</p>
    pub fn data_source(&self) -> std::option::Option<&crate::types::DataSource> {
        self.data_source.as_ref()
    }
    /// <p>A dictionary which describes how the data is stored.</p>
    /// <ul>
    /// <li> <p> <code>databaseName</code> - the name of the Glue database used to store the schema.</p> </li>
    /// </ul>
    pub fn schema_storage_config(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.schema_storage_config.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartContinuousExportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartContinuousExportOutput {
    /// Creates a new builder-style object to manufacture [`StartContinuousExportOutput`](crate::operation::start_continuous_export::StartContinuousExportOutput).
    pub fn builder(
    ) -> crate::operation::start_continuous_export::builders::StartContinuousExportOutputBuilder
    {
        crate::operation::start_continuous_export::builders::StartContinuousExportOutputBuilder::default()
    }
}

/// A builder for [`StartContinuousExportOutput`](crate::operation::start_continuous_export::StartContinuousExportOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartContinuousExportOutputBuilder {
    pub(crate) export_id: std::option::Option<std::string::String>,
    pub(crate) s3_bucket: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) data_source: std::option::Option<crate::types::DataSource>,
    pub(crate) schema_storage_config:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl StartContinuousExportOutputBuilder {
    /// <p>The unique ID assigned to this export.</p>
    pub fn export_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.export_id = Some(input.into());
        self
    }
    /// <p>The unique ID assigned to this export.</p>
    pub fn set_export_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.export_id = input;
        self
    }
    /// <p>The name of the s3 bucket where the export data parquet files are stored.</p>
    pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket = Some(input.into());
        self
    }
    /// <p>The name of the s3 bucket where the export data parquet files are stored.</p>
    pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>The timestamp representing when the continuous export was started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The timestamp representing when the continuous export was started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The type of data collector used to gather this data (currently only offered for AGENT).</p>
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.data_source = Some(input);
        self
    }
    /// <p>The type of data collector used to gather this data (currently only offered for AGENT).</p>
    pub fn set_data_source(mut self, input: std::option::Option<crate::types::DataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// Adds a key-value pair to `schema_storage_config`.
    ///
    /// To override the contents of this collection use [`set_schema_storage_config`](Self::set_schema_storage_config).
    ///
    /// <p>A dictionary which describes how the data is stored.</p>
    /// <ul>
    /// <li> <p> <code>databaseName</code> - the name of the Glue database used to store the schema.</p> </li>
    /// </ul>
    pub fn schema_storage_config(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.schema_storage_config.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.schema_storage_config = Some(hash_map);
        self
    }
    /// <p>A dictionary which describes how the data is stored.</p>
    /// <ul>
    /// <li> <p> <code>databaseName</code> - the name of the Glue database used to store the schema.</p> </li>
    /// </ul>
    pub fn set_schema_storage_config(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.schema_storage_config = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartContinuousExportOutput`](crate::operation::start_continuous_export::StartContinuousExportOutput).
    pub fn build(self) -> crate::operation::start_continuous_export::StartContinuousExportOutput {
        crate::operation::start_continuous_export::StartContinuousExportOutput {
            export_id: self.export_id,
            s3_bucket: self.s3_bucket,
            start_time: self.start_time,
            data_source: self.data_source,
            schema_storage_config: self.schema_storage_config,
            _request_id: self._request_id,
        }
    }
}
