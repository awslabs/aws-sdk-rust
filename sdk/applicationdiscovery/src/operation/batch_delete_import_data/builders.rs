// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_delete_import_data::_batch_delete_import_data_output::BatchDeleteImportDataOutputBuilder;

pub use crate::operation::batch_delete_import_data::_batch_delete_import_data_input::BatchDeleteImportDataInputBuilder;

impl crate::operation::batch_delete_import_data::builders::BatchDeleteImportDataInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::batch_delete_import_data::BatchDeleteImportDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_import_data::BatchDeleteImportDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.batch_delete_import_data();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `BatchDeleteImportData`.
///
/// <p>Deletes one or more import tasks, each identified by their import ID. Each import task has a number of records that can identify servers or applications.</p>
/// <p>Amazon Web Services Application Discovery Service has built-in matching logic that will identify when discovered servers match existing entries that you've previously discovered, the information for the already-existing discovered server is updated. When you delete an import task that contains records that were used to match, the information in those matched records that comes from the deleted records will also be deleted.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchDeleteImportDataFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_delete_import_data::builders::BatchDeleteImportDataInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::batch_delete_import_data::BatchDeleteImportDataOutput,
        crate::operation::batch_delete_import_data::BatchDeleteImportDataError,
    > for BatchDeleteImportDataFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::batch_delete_import_data::BatchDeleteImportDataOutput,
            crate::operation::batch_delete_import_data::BatchDeleteImportDataError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl BatchDeleteImportDataFluentBuilder {
    /// Creates a new `BatchDeleteImportData`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the BatchDeleteImportData as a reference.
    pub fn as_input(&self) -> &crate::operation::batch_delete_import_data::builders::BatchDeleteImportDataInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_delete_import_data::BatchDeleteImportDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_import_data::BatchDeleteImportDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::batch_delete_import_data::BatchDeleteImportData::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::batch_delete_import_data::BatchDeleteImportData::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::batch_delete_import_data::BatchDeleteImportDataOutput,
        crate::operation::batch_delete_import_data::BatchDeleteImportDataError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `importTaskIds`.
    ///
    /// To override the contents of this collection use [`set_import_task_ids`](Self::set_import_task_ids).
    ///
    /// <p>The IDs for the import tasks that you want to delete.</p>
    pub fn import_task_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.import_task_ids(input.into());
        self
    }
    /// <p>The IDs for the import tasks that you want to delete.</p>
    pub fn set_import_task_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_import_task_ids(input);
        self
    }
    /// <p>The IDs for the import tasks that you want to delete.</p>
    pub fn get_import_task_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_import_task_ids()
    }
    /// <p>Set to <code>true</code> to remove the deleted import task from <code>DescribeImportTasks</code>.</p>
    pub fn delete_history(mut self, input: bool) -> Self {
        self.inner = self.inner.delete_history(input);
        self
    }
    /// <p>Set to <code>true</code> to remove the deleted import task from <code>DescribeImportTasks</code>.</p>
    pub fn set_delete_history(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_delete_history(input);
        self
    }
    /// <p>Set to <code>true</code> to remove the deleted import task from <code>DescribeImportTasks</code>.</p>
    pub fn get_delete_history(&self) -> &::std::option::Option<bool> {
        self.inner.get_delete_history()
    }
}
