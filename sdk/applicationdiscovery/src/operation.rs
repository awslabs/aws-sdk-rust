// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates one or more configuration items with an application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateConfigurationItemsToApplication {
    _private: (),
}
impl AssociateConfigurationItemsToApplication {
    /// Creates a new builder-style object to manufacture [`AssociateConfigurationItemsToApplicationInput`](crate::input::AssociateConfigurationItemsToApplicationInput)
    pub fn builder() -> crate::input::associate_configuration_items_to_application_input::Builder {
        crate::input::associate_configuration_items_to_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateConfigurationItemsToApplication {
    type Output = std::result::Result<
        crate::output::AssociateConfigurationItemsToApplicationOutput,
        crate::error::AssociateConfigurationItemsToApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_configuration_items_to_application_error(
                response,
            )
        } else {
            crate::operation_deser::parse_associate_configuration_items_to_application_response(
                response,
            )
        }
    }
}

/// <p>Deletes one or more import tasks, each identified by their import ID. Each import task has
/// a number of records that can identify servers or applications. </p>
/// <p>AWS Application Discovery Service has built-in matching logic that will identify when
/// discovered servers match existing entries that you've previously discovered, the information
/// for the already-existing discovered server is updated. When you delete an import task that
/// contains records that were used to match, the information in those matched records that comes
/// from the deleted records will also be deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchDeleteImportData {
    _private: (),
}
impl BatchDeleteImportData {
    /// Creates a new builder-style object to manufacture [`BatchDeleteImportDataInput`](crate::input::BatchDeleteImportDataInput)
    pub fn builder() -> crate::input::batch_delete_import_data_input::Builder {
        crate::input::batch_delete_import_data_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchDeleteImportData {
    type Output = std::result::Result<
        crate::output::BatchDeleteImportDataOutput,
        crate::error::BatchDeleteImportDataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_delete_import_data_error(response)
        } else {
            crate::operation_deser::parse_batch_delete_import_data_response(response)
        }
    }
}

/// <p>Creates an application with the given name and description.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateApplication {
    _private: (),
}
impl CreateApplication {
    /// Creates a new builder-style object to manufacture [`CreateApplicationInput`](crate::input::CreateApplicationInput)
    pub fn builder() -> crate::input::create_application_input::Builder {
        crate::input::create_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateApplication {
    type Output = std::result::Result<
        crate::output::CreateApplicationOutput,
        crate::error::CreateApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_application_error(response)
        } else {
            crate::operation_deser::parse_create_application_response(response)
        }
    }
}

/// <p>Creates one or more tags for configuration items. Tags are metadata that help you
/// categorize IT assets. This API accepts a list of multiple configuration items.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTags {
    _private: (),
}
impl CreateTags {
    /// Creates a new builder-style object to manufacture [`CreateTagsInput`](crate::input::CreateTagsInput)
    pub fn builder() -> crate::input::create_tags_input::Builder {
        crate::input::create_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTags {
    type Output =
        std::result::Result<crate::output::CreateTagsOutput, crate::error::CreateTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_tags_error(response)
        } else {
            crate::operation_deser::parse_create_tags_response(response)
        }
    }
}

/// <p>Deletes a list of applications and their associations with configuration
/// items.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteApplications {
    _private: (),
}
impl DeleteApplications {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationsInput`](crate::input::DeleteApplicationsInput)
    pub fn builder() -> crate::input::delete_applications_input::Builder {
        crate::input::delete_applications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteApplications {
    type Output = std::result::Result<
        crate::output::DeleteApplicationsOutput,
        crate::error::DeleteApplicationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_applications_error(response)
        } else {
            crate::operation_deser::parse_delete_applications_response(response)
        }
    }
}

/// <p>Deletes the association between configuration items and one or more tags. This API
/// accepts a list of multiple configuration items.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTags {
    _private: (),
}
impl DeleteTags {
    /// Creates a new builder-style object to manufacture [`DeleteTagsInput`](crate::input::DeleteTagsInput)
    pub fn builder() -> crate::input::delete_tags_input::Builder {
        crate::input::delete_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTags {
    type Output =
        std::result::Result<crate::output::DeleteTagsOutput, crate::error::DeleteTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_tags_error(response)
        } else {
            crate::operation_deser::parse_delete_tags_response(response)
        }
    }
}

/// <p>Lists agents or connectors as specified by ID or other filters. All agents/connectors
/// associated with your user account can be listed if you call <code>DescribeAgents</code> as is
/// without passing any parameters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAgents {
    _private: (),
}
impl DescribeAgents {
    /// Creates a new builder-style object to manufacture [`DescribeAgentsInput`](crate::input::DescribeAgentsInput)
    pub fn builder() -> crate::input::describe_agents_input::Builder {
        crate::input::describe_agents_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAgents {
    type Output =
        std::result::Result<crate::output::DescribeAgentsOutput, crate::error::DescribeAgentsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_agents_error(response)
        } else {
            crate::operation_deser::parse_describe_agents_response(response)
        }
    }
}

/// <p>Retrieves attributes for a list of configuration item IDs.</p>
/// <note>
/// <p>All of the supplied IDs must be for the same asset type from one of the
/// following:</p>
/// <ul>
/// <li>
/// <p>server</p>
/// </li>
/// <li>
/// <p>application</p>
/// </li>
/// <li>
/// <p>process</p>
/// </li>
/// <li>
/// <p>connection</p>
/// </li>
/// </ul>
/// <p>Output fields are specific to the asset type specified. For example, the output for a
/// <i>server</i> configuration item includes a list of attributes about the
/// server, such as host name, operating system, number of network cards, etc.</p>
/// <p>For a complete list of outputs for each asset type, see <a href="https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-api-queries.html#DescribeConfigurations">Using the DescribeConfigurations Action</a> in the <i>AWS Application
/// Discovery Service User Guide</i>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConfigurations {
    _private: (),
}
impl DescribeConfigurations {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationsInput`](crate::input::DescribeConfigurationsInput)
    pub fn builder() -> crate::input::describe_configurations_input::Builder {
        crate::input::describe_configurations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConfigurations {
    type Output = std::result::Result<
        crate::output::DescribeConfigurationsOutput,
        crate::error::DescribeConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_configurations_error(response)
        } else {
            crate::operation_deser::parse_describe_configurations_response(response)
        }
    }
}

/// <p>Lists exports as specified by ID. All continuous exports associated with your user
/// account can be listed if you call <code>DescribeContinuousExports</code> as is without passing
/// any parameters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeContinuousExports {
    _private: (),
}
impl DescribeContinuousExports {
    /// Creates a new builder-style object to manufacture [`DescribeContinuousExportsInput`](crate::input::DescribeContinuousExportsInput)
    pub fn builder() -> crate::input::describe_continuous_exports_input::Builder {
        crate::input::describe_continuous_exports_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeContinuousExports {
    type Output = std::result::Result<
        crate::output::DescribeContinuousExportsOutput,
        crate::error::DescribeContinuousExportsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_continuous_exports_error(response)
        } else {
            crate::operation_deser::parse_describe_continuous_exports_response(response)
        }
    }
}

/// <p>
/// <code>DescribeExportConfigurations</code> is deprecated. Use <a href="https://docs.aws.amazon.com/application-discovery/latest/APIReference/API_DescribeExportTasks.html">DescribeImportTasks</a>, instead.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeExportConfigurations {
    _private: (),
}
impl DescribeExportConfigurations {
    /// Creates a new builder-style object to manufacture [`DescribeExportConfigurationsInput`](crate::input::DescribeExportConfigurationsInput)
    pub fn builder() -> crate::input::describe_export_configurations_input::Builder {
        crate::input::describe_export_configurations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeExportConfigurations {
    type Output = std::result::Result<
        crate::output::DescribeExportConfigurationsOutput,
        crate::error::DescribeExportConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_export_configurations_error(response)
        } else {
            crate::operation_deser::parse_describe_export_configurations_response(response)
        }
    }
}

/// <p>Retrieve status of one or more export tasks. You can retrieve the status of up to 100
/// export tasks.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeExportTasks {
    _private: (),
}
impl DescribeExportTasks {
    /// Creates a new builder-style object to manufacture [`DescribeExportTasksInput`](crate::input::DescribeExportTasksInput)
    pub fn builder() -> crate::input::describe_export_tasks_input::Builder {
        crate::input::describe_export_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeExportTasks {
    type Output = std::result::Result<
        crate::output::DescribeExportTasksOutput,
        crate::error::DescribeExportTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_export_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_export_tasks_response(response)
        }
    }
}

/// <p>Returns an array of import tasks for your account, including status information, times,
/// IDs, the Amazon S3 Object URL for the import file, and more.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeImportTasks {
    _private: (),
}
impl DescribeImportTasks {
    /// Creates a new builder-style object to manufacture [`DescribeImportTasksInput`](crate::input::DescribeImportTasksInput)
    pub fn builder() -> crate::input::describe_import_tasks_input::Builder {
        crate::input::describe_import_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeImportTasks {
    type Output = std::result::Result<
        crate::output::DescribeImportTasksOutput,
        crate::error::DescribeImportTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_import_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_import_tasks_response(response)
        }
    }
}

/// <p>Retrieves a list of configuration items that have tags as specified by the key-value
/// pairs, name and value, passed to the optional parameter <code>filters</code>.</p>
/// <p>There are three valid tag filter names:</p>
/// <ul>
/// <li>
/// <p>tagKey</p>
/// </li>
/// <li>
/// <p>tagValue</p>
/// </li>
/// <li>
/// <p>configurationId</p>
/// </li>
/// </ul>
/// <p>Also, all configuration items associated with your user account that have tags can be
/// listed if you call <code>DescribeTags</code> as is without passing any parameters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTags {
    _private: (),
}
impl DescribeTags {
    /// Creates a new builder-style object to manufacture [`DescribeTagsInput`](crate::input::DescribeTagsInput)
    pub fn builder() -> crate::input::describe_tags_input::Builder {
        crate::input::describe_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTags {
    type Output =
        std::result::Result<crate::output::DescribeTagsOutput, crate::error::DescribeTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_tags_error(response)
        } else {
            crate::operation_deser::parse_describe_tags_response(response)
        }
    }
}

/// <p>Disassociates one or more configuration items from an application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateConfigurationItemsFromApplication {
    _private: (),
}
impl DisassociateConfigurationItemsFromApplication {
    /// Creates a new builder-style object to manufacture [`DisassociateConfigurationItemsFromApplicationInput`](crate::input::DisassociateConfigurationItemsFromApplicationInput)
    pub fn builder(
    ) -> crate::input::disassociate_configuration_items_from_application_input::Builder {
        crate::input::disassociate_configuration_items_from_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateConfigurationItemsFromApplication {
    type Output = std::result::Result<
        crate::output::DisassociateConfigurationItemsFromApplicationOutput,
        crate::error::DisassociateConfigurationItemsFromApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_configuration_items_from_application_error(
                response,
            )
        } else {
            crate::operation_deser::parse_disassociate_configuration_items_from_application_response(
                response,
            )
        }
    }
}

/// <p>Deprecated. Use <code>StartExportTask</code> instead.</p>
/// <p>Exports all discovered configuration data to an Amazon S3 bucket or an application that
/// enables you to view and evaluate the data. Data includes tags and tag associations, processes,
/// connections, servers, and system performance. This API returns an export ID that you can query
/// using the <i>DescribeExportConfigurations</i> API. The system imposes a limit of
/// two configuration exports in six hours.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportConfigurations {
    _private: (),
}
impl ExportConfigurations {
    /// Creates a new builder-style object to manufacture [`ExportConfigurationsInput`](crate::input::ExportConfigurationsInput)
    pub fn builder() -> crate::input::export_configurations_input::Builder {
        crate::input::export_configurations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportConfigurations {
    type Output = std::result::Result<
        crate::output::ExportConfigurationsOutput,
        crate::error::ExportConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_configurations_error(response)
        } else {
            crate::operation_deser::parse_export_configurations_response(response)
        }
    }
}

/// <p>Retrieves a short summary of discovered assets.</p>
/// <p>This API operation takes no request parameters and is called as is at the command
/// prompt as shown in the example.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDiscoverySummary {
    _private: (),
}
impl GetDiscoverySummary {
    /// Creates a new builder-style object to manufacture [`GetDiscoverySummaryInput`](crate::input::GetDiscoverySummaryInput)
    pub fn builder() -> crate::input::get_discovery_summary_input::Builder {
        crate::input::get_discovery_summary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDiscoverySummary {
    type Output = std::result::Result<
        crate::output::GetDiscoverySummaryOutput,
        crate::error::GetDiscoverySummaryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_discovery_summary_error(response)
        } else {
            crate::operation_deser::parse_get_discovery_summary_response(response)
        }
    }
}

/// <p>Retrieves a list of configuration items as specified by the value passed to the
/// required parameter <code>configurationType</code>. Optional filtering may be applied to refine
/// search results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListConfigurations {
    _private: (),
}
impl ListConfigurations {
    /// Creates a new builder-style object to manufacture [`ListConfigurationsInput`](crate::input::ListConfigurationsInput)
    pub fn builder() -> crate::input::list_configurations_input::Builder {
        crate::input::list_configurations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListConfigurations {
    type Output = std::result::Result<
        crate::output::ListConfigurationsOutput,
        crate::error::ListConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_configurations_error(response)
        } else {
            crate::operation_deser::parse_list_configurations_response(response)
        }
    }
}

/// <p>Retrieves a list of servers that are one network hop away from a specified
/// server.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServerNeighbors {
    _private: (),
}
impl ListServerNeighbors {
    /// Creates a new builder-style object to manufacture [`ListServerNeighborsInput`](crate::input::ListServerNeighborsInput)
    pub fn builder() -> crate::input::list_server_neighbors_input::Builder {
        crate::input::list_server_neighbors_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServerNeighbors {
    type Output = std::result::Result<
        crate::output::ListServerNeighborsOutput,
        crate::error::ListServerNeighborsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_server_neighbors_error(response)
        } else {
            crate::operation_deser::parse_list_server_neighbors_response(response)
        }
    }
}

/// <p>Start the continuous flow of agent's discovered data into Amazon Athena.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartContinuousExport {
    _private: (),
}
impl StartContinuousExport {
    /// Creates a new builder-style object to manufacture [`StartContinuousExportInput`](crate::input::StartContinuousExportInput)
    pub fn builder() -> crate::input::start_continuous_export_input::Builder {
        crate::input::start_continuous_export_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartContinuousExport {
    type Output = std::result::Result<
        crate::output::StartContinuousExportOutput,
        crate::error::StartContinuousExportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_continuous_export_error(response)
        } else {
            crate::operation_deser::parse_start_continuous_export_response(response)
        }
    }
}

/// <p>Instructs the specified agents or connectors to start collecting data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartDataCollectionByAgentIds {
    _private: (),
}
impl StartDataCollectionByAgentIds {
    /// Creates a new builder-style object to manufacture [`StartDataCollectionByAgentIdsInput`](crate::input::StartDataCollectionByAgentIdsInput)
    pub fn builder() -> crate::input::start_data_collection_by_agent_ids_input::Builder {
        crate::input::start_data_collection_by_agent_ids_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartDataCollectionByAgentIds {
    type Output = std::result::Result<
        crate::output::StartDataCollectionByAgentIdsOutput,
        crate::error::StartDataCollectionByAgentIdsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_data_collection_by_agent_ids_error(response)
        } else {
            crate::operation_deser::parse_start_data_collection_by_agent_ids_response(response)
        }
    }
}

/// <p> Begins the export of discovered data to an S3 bucket.</p>
/// <p> If you specify <code>agentIds</code> in a filter, the task exports up to 72 hours of
/// detailed data collected by the identified Application Discovery Agent, including network,
/// process, and performance details. A time range for exported agent data may be set by using
/// <code>startTime</code> and <code>endTime</code>. Export of detailed agent data is limited to
/// five concurrently running exports. </p>
/// <p> If you do not include an <code>agentIds</code> filter, summary data is exported that
/// includes both AWS Agentless Discovery Connector data and summary data from AWS Discovery
/// Agents. Export of summary data is limited to two exports per day. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartExportTask {
    _private: (),
}
impl StartExportTask {
    /// Creates a new builder-style object to manufacture [`StartExportTaskInput`](crate::input::StartExportTaskInput)
    pub fn builder() -> crate::input::start_export_task_input::Builder {
        crate::input::start_export_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartExportTask {
    type Output = std::result::Result<
        crate::output::StartExportTaskOutput,
        crate::error::StartExportTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_export_task_error(response)
        } else {
            crate::operation_deser::parse_start_export_task_response(response)
        }
    }
}

/// <p>Starts an import task, which allows you to import details of your on-premises environment
/// directly into AWS Migration Hub without having to use the Application Discovery Service (ADS)
/// tools such as the Discovery Connector or Discovery Agent. This gives you the option to perform
/// migration assessment and planning directly from your imported data, including the ability to
/// group your devices as applications and track their migration status.</p>
/// <p>To start an import request, do this:</p>
/// <ol>
/// <li>
/// <p>Download the specially formatted comma separated value (CSV) import template, which
/// you can find here: <a href="https://s3-us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv">https://s3-us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv</a>.</p>
/// </li>
/// <li>
/// <p>Fill out the template with your server and application data.</p>
/// </li>
/// <li>
/// <p>Upload your import file to an Amazon S3 bucket, and make a note of it's Object URL.
/// Your import file must be in the CSV format.</p>
/// </li>
/// <li>
/// <p>Use the console or the <code>StartImportTask</code> command with the AWS CLI or one of
/// the AWS SDKs to import the records from your file.</p>
/// </li>
/// </ol>
/// <p>For more information, including step-by-step procedures, see <a href="https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-import.html">Migration Hub
/// Import</a> in the <i>AWS Application Discovery Service User
/// Guide</i>.</p>
/// <note>
/// <p>There are limits to the number of import tasks you can create (and delete) in an AWS
/// account. For more information, see <a href="https://docs.aws.amazon.com/application-discovery/latest/userguide/ads_service_limits.html">AWS Application
/// Discovery Service Limits</a> in the <i>AWS Application Discovery Service User
/// Guide</i>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartImportTask {
    _private: (),
}
impl StartImportTask {
    /// Creates a new builder-style object to manufacture [`StartImportTaskInput`](crate::input::StartImportTaskInput)
    pub fn builder() -> crate::input::start_import_task_input::Builder {
        crate::input::start_import_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartImportTask {
    type Output = std::result::Result<
        crate::output::StartImportTaskOutput,
        crate::error::StartImportTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_import_task_error(response)
        } else {
            crate::operation_deser::parse_start_import_task_response(response)
        }
    }
}

/// <p>Stop the continuous flow of agent's discovered data into Amazon Athena.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopContinuousExport {
    _private: (),
}
impl StopContinuousExport {
    /// Creates a new builder-style object to manufacture [`StopContinuousExportInput`](crate::input::StopContinuousExportInput)
    pub fn builder() -> crate::input::stop_continuous_export_input::Builder {
        crate::input::stop_continuous_export_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopContinuousExport {
    type Output = std::result::Result<
        crate::output::StopContinuousExportOutput,
        crate::error::StopContinuousExportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_continuous_export_error(response)
        } else {
            crate::operation_deser::parse_stop_continuous_export_response(response)
        }
    }
}

/// <p>Instructs the specified agents or connectors to stop collecting data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopDataCollectionByAgentIds {
    _private: (),
}
impl StopDataCollectionByAgentIds {
    /// Creates a new builder-style object to manufacture [`StopDataCollectionByAgentIdsInput`](crate::input::StopDataCollectionByAgentIdsInput)
    pub fn builder() -> crate::input::stop_data_collection_by_agent_ids_input::Builder {
        crate::input::stop_data_collection_by_agent_ids_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopDataCollectionByAgentIds {
    type Output = std::result::Result<
        crate::output::StopDataCollectionByAgentIdsOutput,
        crate::error::StopDataCollectionByAgentIdsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_data_collection_by_agent_ids_error(response)
        } else {
            crate::operation_deser::parse_stop_data_collection_by_agent_ids_response(response)
        }
    }
}

/// <p>Updates metadata about an application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateApplication {
    _private: (),
}
impl UpdateApplication {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationInput`](crate::input::UpdateApplicationInput)
    pub fn builder() -> crate::input::update_application_input::Builder {
        crate::input::update_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateApplication {
    type Output = std::result::Result<
        crate::output::UpdateApplicationOutput,
        crate::error::UpdateApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_application_error(response)
        } else {
            crate::operation_deser::parse_update_application_response(response)
        }
    }
}
