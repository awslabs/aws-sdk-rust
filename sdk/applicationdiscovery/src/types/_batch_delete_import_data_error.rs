// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error messages returned for each import task that you deleted as a response for this command.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDeleteImportDataError {
    /// <p>The unique import ID associated with the error that occurred.</p>
    #[doc(hidden)]
    pub import_task_id: std::option::Option<std::string::String>,
    /// <p>The type of error that occurred for a specific import task.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<crate::types::BatchDeleteImportDataErrorCode>,
    /// <p>The description of the error that occurred for a specific import task.</p>
    #[doc(hidden)]
    pub error_description: std::option::Option<std::string::String>,
}
impl BatchDeleteImportDataError {
    /// <p>The unique import ID associated with the error that occurred.</p>
    pub fn import_task_id(&self) -> std::option::Option<&str> {
        self.import_task_id.as_deref()
    }
    /// <p>The type of error that occurred for a specific import task.</p>
    pub fn error_code(&self) -> std::option::Option<&crate::types::BatchDeleteImportDataErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>The description of the error that occurred for a specific import task.</p>
    pub fn error_description(&self) -> std::option::Option<&str> {
        self.error_description.as_deref()
    }
}
impl BatchDeleteImportDataError {
    /// Creates a new builder-style object to manufacture [`BatchDeleteImportDataError`](crate::types::BatchDeleteImportDataError).
    pub fn builder() -> crate::types::builders::BatchDeleteImportDataErrorBuilder {
        crate::types::builders::BatchDeleteImportDataErrorBuilder::default()
    }
}

/// A builder for [`BatchDeleteImportDataError`](crate::types::BatchDeleteImportDataError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDeleteImportDataErrorBuilder {
    pub(crate) import_task_id: std::option::Option<std::string::String>,
    pub(crate) error_code: std::option::Option<crate::types::BatchDeleteImportDataErrorCode>,
    pub(crate) error_description: std::option::Option<std::string::String>,
}
impl BatchDeleteImportDataErrorBuilder {
    /// <p>The unique import ID associated with the error that occurred.</p>
    pub fn import_task_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.import_task_id = Some(input.into());
        self
    }
    /// <p>The unique import ID associated with the error that occurred.</p>
    pub fn set_import_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.import_task_id = input;
        self
    }
    /// <p>The type of error that occurred for a specific import task.</p>
    pub fn error_code(mut self, input: crate::types::BatchDeleteImportDataErrorCode) -> Self {
        self.error_code = Some(input);
        self
    }
    /// <p>The type of error that occurred for a specific import task.</p>
    pub fn set_error_code(
        mut self,
        input: std::option::Option<crate::types::BatchDeleteImportDataErrorCode>,
    ) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The description of the error that occurred for a specific import task.</p>
    pub fn error_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_description = Some(input.into());
        self
    }
    /// <p>The description of the error that occurred for a specific import task.</p>
    pub fn set_error_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.error_description = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchDeleteImportDataError`](crate::types::BatchDeleteImportDataError).
    pub fn build(self) -> crate::types::BatchDeleteImportDataError {
        crate::types::BatchDeleteImportDataError {
            import_task_id: self.import_task_id,
            error_code: self.error_code,
            error_description: self.error_description,
        }
    }
}
