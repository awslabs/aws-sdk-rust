// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A field and direction for ordered output.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrderByElement {
    /// <p>The field on which to order.</p>
    pub field_name: ::std::string::String,
    /// <p>Ordering direction.</p>
    pub sort_order: ::std::option::Option<crate::types::OrderString>,
}
impl OrderByElement {
    /// <p>The field on which to order.</p>
    pub fn field_name(&self) -> &str {
        use std::ops::Deref;
        self.field_name.deref()
    }
    /// <p>Ordering direction.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::OrderString> {
        self.sort_order.as_ref()
    }
}
impl OrderByElement {
    /// Creates a new builder-style object to manufacture [`OrderByElement`](crate::types::OrderByElement).
    pub fn builder() -> crate::types::builders::OrderByElementBuilder {
        crate::types::builders::OrderByElementBuilder::default()
    }
}

/// A builder for [`OrderByElement`](crate::types::OrderByElement).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrderByElementBuilder {
    pub(crate) field_name: ::std::option::Option<::std::string::String>,
    pub(crate) sort_order: ::std::option::Option<crate::types::OrderString>,
}
impl OrderByElementBuilder {
    /// <p>The field on which to order.</p>
    /// This field is required.
    pub fn field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field on which to order.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The field on which to order.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_name
    }
    /// <p>Ordering direction.</p>
    pub fn sort_order(mut self, input: crate::types::OrderString) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Ordering direction.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::OrderString>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>Ordering direction.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::OrderString> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`OrderByElement`](crate::types::OrderByElement).
    /// This method will fail if any of the following fields are not set:
    /// - [`field_name`](crate::types::builders::OrderByElementBuilder::field_name)
    pub fn build(self) -> ::std::result::Result<crate::types::OrderByElement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OrderByElement {
            field_name: self.field_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_name",
                    "field_name was not specified but it is required when building OrderByElement",
                )
            })?,
            sort_order: self.sort_order,
        })
    }
}
