// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The inventory data for installed Migration Evaluator collectors. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomerMeCollectorInfo {
    /// <p> The number of active Migration Evaluator collectors. </p>
    #[doc(hidden)]
    pub active_me_collectors: i32,
    /// <p> The number of healthy Migration Evaluator collectors. </p>
    #[doc(hidden)]
    pub healthy_me_collectors: i32,
    /// <p> The number of deny-listed Migration Evaluator collectors. </p>
    #[doc(hidden)]
    pub deny_listed_me_collectors: i32,
    /// <p> The number of Migration Evaluator collectors with <code>SHUTDOWN</code> status. </p>
    #[doc(hidden)]
    pub shutdown_me_collectors: i32,
    /// <p> The number of unhealthy Migration Evaluator collectors. </p>
    #[doc(hidden)]
    pub unhealthy_me_collectors: i32,
    /// <p> The total number of Migration Evaluator collectors. </p>
    #[doc(hidden)]
    pub total_me_collectors: i32,
    /// <p> The number of unknown Migration Evaluator collectors. </p>
    #[doc(hidden)]
    pub unknown_me_collectors: i32,
}
impl CustomerMeCollectorInfo {
    /// <p> The number of active Migration Evaluator collectors. </p>
    pub fn active_me_collectors(&self) -> i32 {
        self.active_me_collectors
    }
    /// <p> The number of healthy Migration Evaluator collectors. </p>
    pub fn healthy_me_collectors(&self) -> i32 {
        self.healthy_me_collectors
    }
    /// <p> The number of deny-listed Migration Evaluator collectors. </p>
    pub fn deny_listed_me_collectors(&self) -> i32 {
        self.deny_listed_me_collectors
    }
    /// <p> The number of Migration Evaluator collectors with <code>SHUTDOWN</code> status. </p>
    pub fn shutdown_me_collectors(&self) -> i32 {
        self.shutdown_me_collectors
    }
    /// <p> The number of unhealthy Migration Evaluator collectors. </p>
    pub fn unhealthy_me_collectors(&self) -> i32 {
        self.unhealthy_me_collectors
    }
    /// <p> The total number of Migration Evaluator collectors. </p>
    pub fn total_me_collectors(&self) -> i32 {
        self.total_me_collectors
    }
    /// <p> The number of unknown Migration Evaluator collectors. </p>
    pub fn unknown_me_collectors(&self) -> i32 {
        self.unknown_me_collectors
    }
}
impl CustomerMeCollectorInfo {
    /// Creates a new builder-style object to manufacture [`CustomerMeCollectorInfo`](crate::types::CustomerMeCollectorInfo).
    pub fn builder() -> crate::types::builders::CustomerMeCollectorInfoBuilder {
        crate::types::builders::CustomerMeCollectorInfoBuilder::default()
    }
}

/// A builder for [`CustomerMeCollectorInfo`](crate::types::CustomerMeCollectorInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomerMeCollectorInfoBuilder {
    pub(crate) active_me_collectors: std::option::Option<i32>,
    pub(crate) healthy_me_collectors: std::option::Option<i32>,
    pub(crate) deny_listed_me_collectors: std::option::Option<i32>,
    pub(crate) shutdown_me_collectors: std::option::Option<i32>,
    pub(crate) unhealthy_me_collectors: std::option::Option<i32>,
    pub(crate) total_me_collectors: std::option::Option<i32>,
    pub(crate) unknown_me_collectors: std::option::Option<i32>,
}
impl CustomerMeCollectorInfoBuilder {
    /// <p> The number of active Migration Evaluator collectors. </p>
    pub fn active_me_collectors(mut self, input: i32) -> Self {
        self.active_me_collectors = Some(input);
        self
    }
    /// <p> The number of active Migration Evaluator collectors. </p>
    pub fn set_active_me_collectors(mut self, input: std::option::Option<i32>) -> Self {
        self.active_me_collectors = input;
        self
    }
    /// <p> The number of healthy Migration Evaluator collectors. </p>
    pub fn healthy_me_collectors(mut self, input: i32) -> Self {
        self.healthy_me_collectors = Some(input);
        self
    }
    /// <p> The number of healthy Migration Evaluator collectors. </p>
    pub fn set_healthy_me_collectors(mut self, input: std::option::Option<i32>) -> Self {
        self.healthy_me_collectors = input;
        self
    }
    /// <p> The number of deny-listed Migration Evaluator collectors. </p>
    pub fn deny_listed_me_collectors(mut self, input: i32) -> Self {
        self.deny_listed_me_collectors = Some(input);
        self
    }
    /// <p> The number of deny-listed Migration Evaluator collectors. </p>
    pub fn set_deny_listed_me_collectors(mut self, input: std::option::Option<i32>) -> Self {
        self.deny_listed_me_collectors = input;
        self
    }
    /// <p> The number of Migration Evaluator collectors with <code>SHUTDOWN</code> status. </p>
    pub fn shutdown_me_collectors(mut self, input: i32) -> Self {
        self.shutdown_me_collectors = Some(input);
        self
    }
    /// <p> The number of Migration Evaluator collectors with <code>SHUTDOWN</code> status. </p>
    pub fn set_shutdown_me_collectors(mut self, input: std::option::Option<i32>) -> Self {
        self.shutdown_me_collectors = input;
        self
    }
    /// <p> The number of unhealthy Migration Evaluator collectors. </p>
    pub fn unhealthy_me_collectors(mut self, input: i32) -> Self {
        self.unhealthy_me_collectors = Some(input);
        self
    }
    /// <p> The number of unhealthy Migration Evaluator collectors. </p>
    pub fn set_unhealthy_me_collectors(mut self, input: std::option::Option<i32>) -> Self {
        self.unhealthy_me_collectors = input;
        self
    }
    /// <p> The total number of Migration Evaluator collectors. </p>
    pub fn total_me_collectors(mut self, input: i32) -> Self {
        self.total_me_collectors = Some(input);
        self
    }
    /// <p> The total number of Migration Evaluator collectors. </p>
    pub fn set_total_me_collectors(mut self, input: std::option::Option<i32>) -> Self {
        self.total_me_collectors = input;
        self
    }
    /// <p> The number of unknown Migration Evaluator collectors. </p>
    pub fn unknown_me_collectors(mut self, input: i32) -> Self {
        self.unknown_me_collectors = Some(input);
        self
    }
    /// <p> The number of unknown Migration Evaluator collectors. </p>
    pub fn set_unknown_me_collectors(mut self, input: std::option::Option<i32>) -> Self {
        self.unknown_me_collectors = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomerMeCollectorInfo`](crate::types::CustomerMeCollectorInfo).
    pub fn build(self) -> crate::types::CustomerMeCollectorInfo {
        crate::types::CustomerMeCollectorInfo {
            active_me_collectors: self.active_me_collectors.unwrap_or_default(),
            healthy_me_collectors: self.healthy_me_collectors.unwrap_or_default(),
            deny_listed_me_collectors: self.deny_listed_me_collectors.unwrap_or_default(),
            shutdown_me_collectors: self.shutdown_me_collectors.unwrap_or_default(),
            unhealthy_me_collectors: self.unhealthy_me_collectors.unwrap_or_default(),
            total_me_collectors: self.total_me_collectors.unwrap_or_default(),
            unknown_me_collectors: self.unknown_me_collectors.unwrap_or_default(),
        }
    }
}
