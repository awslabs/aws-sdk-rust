// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about agents associated with the userâ€™s Amazon Web Services account. Information includes agent IDs, IP addresses, media access control (MAC) addresses, agent or collector status, hostname where the agent resides, and agent version for each agent.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentInfo {
    /// <p>The agent or collector ID.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the host where the agent or collector resides. The host can be a server or virtual machine.</p>
    pub host_name: ::std::option::Option<::std::string::String>,
    /// <p>Network details about the host where the agent or collector resides.</p>
    pub agent_network_info_list: ::std::option::Option<::std::vec::Vec<crate::types::AgentNetworkInfo>>,
    /// <p>The ID of the connector.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The agent or collector version.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The health of the agent.</p>
    pub health: ::std::option::Option<crate::types::AgentStatus>,
    /// <p>Time since agent health was reported.</p>
    pub last_health_ping_time: ::std::option::Option<::std::string::String>,
    /// <p>Status of the collection process for an agent.</p>
    pub collection_status: ::std::option::Option<::std::string::String>,
    /// <p>Type of agent.</p>
    pub agent_type: ::std::option::Option<::std::string::String>,
    /// <p>Agent's first registration timestamp in UTC.</p>
    pub registered_time: ::std::option::Option<::std::string::String>,
}
impl AgentInfo {
    /// <p>The agent or collector ID.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The name of the host where the agent or collector resides. The host can be a server or virtual machine.</p>
    pub fn host_name(&self) -> ::std::option::Option<&str> {
        self.host_name.as_deref()
    }
    /// <p>Network details about the host where the agent or collector resides.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_network_info_list.is_none()`.
    pub fn agent_network_info_list(&self) -> &[crate::types::AgentNetworkInfo] {
        self.agent_network_info_list.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the connector.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>The agent or collector version.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The health of the agent.</p>
    pub fn health(&self) -> ::std::option::Option<&crate::types::AgentStatus> {
        self.health.as_ref()
    }
    /// <p>Time since agent health was reported.</p>
    pub fn last_health_ping_time(&self) -> ::std::option::Option<&str> {
        self.last_health_ping_time.as_deref()
    }
    /// <p>Status of the collection process for an agent.</p>
    pub fn collection_status(&self) -> ::std::option::Option<&str> {
        self.collection_status.as_deref()
    }
    /// <p>Type of agent.</p>
    pub fn agent_type(&self) -> ::std::option::Option<&str> {
        self.agent_type.as_deref()
    }
    /// <p>Agent's first registration timestamp in UTC.</p>
    pub fn registered_time(&self) -> ::std::option::Option<&str> {
        self.registered_time.as_deref()
    }
}
impl AgentInfo {
    /// Creates a new builder-style object to manufacture [`AgentInfo`](crate::types::AgentInfo).
    pub fn builder() -> crate::types::builders::AgentInfoBuilder {
        crate::types::builders::AgentInfoBuilder::default()
    }
}

/// A builder for [`AgentInfo`](crate::types::AgentInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AgentInfoBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) host_name: ::std::option::Option<::std::string::String>,
    pub(crate) agent_network_info_list: ::std::option::Option<::std::vec::Vec<crate::types::AgentNetworkInfo>>,
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) health: ::std::option::Option<crate::types::AgentStatus>,
    pub(crate) last_health_ping_time: ::std::option::Option<::std::string::String>,
    pub(crate) collection_status: ::std::option::Option<::std::string::String>,
    pub(crate) agent_type: ::std::option::Option<::std::string::String>,
    pub(crate) registered_time: ::std::option::Option<::std::string::String>,
}
impl AgentInfoBuilder {
    /// <p>The agent or collector ID.</p>
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent or collector ID.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The agent or collector ID.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The name of the host where the agent or collector resides. The host can be a server or virtual machine.</p>
    pub fn host_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the host where the agent or collector resides. The host can be a server or virtual machine.</p>
    pub fn set_host_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_name = input;
        self
    }
    /// <p>The name of the host where the agent or collector resides. The host can be a server or virtual machine.</p>
    pub fn get_host_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_name
    }
    /// Appends an item to `agent_network_info_list`.
    ///
    /// To override the contents of this collection use [`set_agent_network_info_list`](Self::set_agent_network_info_list).
    ///
    /// <p>Network details about the host where the agent or collector resides.</p>
    pub fn agent_network_info_list(mut self, input: crate::types::AgentNetworkInfo) -> Self {
        let mut v = self.agent_network_info_list.unwrap_or_default();
        v.push(input);
        self.agent_network_info_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Network details about the host where the agent or collector resides.</p>
    pub fn set_agent_network_info_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AgentNetworkInfo>>) -> Self {
        self.agent_network_info_list = input;
        self
    }
    /// <p>Network details about the host where the agent or collector resides.</p>
    pub fn get_agent_network_info_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AgentNetworkInfo>> {
        &self.agent_network_info_list
    }
    /// <p>The ID of the connector.</p>
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connector.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The ID of the connector.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>The agent or collector version.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent or collector version.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The agent or collector version.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The health of the agent.</p>
    pub fn health(mut self, input: crate::types::AgentStatus) -> Self {
        self.health = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health of the agent.</p>
    pub fn set_health(mut self, input: ::std::option::Option<crate::types::AgentStatus>) -> Self {
        self.health = input;
        self
    }
    /// <p>The health of the agent.</p>
    pub fn get_health(&self) -> &::std::option::Option<crate::types::AgentStatus> {
        &self.health
    }
    /// <p>Time since agent health was reported.</p>
    pub fn last_health_ping_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_health_ping_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Time since agent health was reported.</p>
    pub fn set_last_health_ping_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_health_ping_time = input;
        self
    }
    /// <p>Time since agent health was reported.</p>
    pub fn get_last_health_ping_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_health_ping_time
    }
    /// <p>Status of the collection process for an agent.</p>
    pub fn collection_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collection_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Status of the collection process for an agent.</p>
    pub fn set_collection_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collection_status = input;
        self
    }
    /// <p>Status of the collection process for an agent.</p>
    pub fn get_collection_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.collection_status
    }
    /// <p>Type of agent.</p>
    pub fn agent_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of agent.</p>
    pub fn set_agent_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_type = input;
        self
    }
    /// <p>Type of agent.</p>
    pub fn get_agent_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_type
    }
    /// <p>Agent's first registration timestamp in UTC.</p>
    pub fn registered_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registered_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Agent's first registration timestamp in UTC.</p>
    pub fn set_registered_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registered_time = input;
        self
    }
    /// <p>Agent's first registration timestamp in UTC.</p>
    pub fn get_registered_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.registered_time
    }
    /// Consumes the builder and constructs a [`AgentInfo`](crate::types::AgentInfo).
    pub fn build(self) -> crate::types::AgentInfo {
        crate::types::AgentInfo {
            agent_id: self.agent_id,
            host_name: self.host_name,
            agent_network_info_list: self.agent_network_info_list,
            connector_id: self.connector_id,
            version: self.version,
            health: self.health,
            last_health_ping_time: self.last_health_ping_time,
            collection_status: self.collection_status,
            agent_type: self.agent_type,
            registered_time: self.registered_time,
        }
    }
}
