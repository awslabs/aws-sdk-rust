// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Used to provide Reserved Instance preferences for the recommendation. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReservedInstanceOptions {
    /// <p> The payment plan to use for your Reserved Instance. </p>
    pub purchasing_option: crate::types::PurchasingOption,
    /// <p> The flexibility to change the instance types needed for your Reserved Instance. </p>
    pub offering_class: crate::types::OfferingClass,
    /// <p> The preferred duration of the Reserved Instance term. </p>
    pub term_length: crate::types::TermLength,
}
impl ReservedInstanceOptions {
    /// <p> The payment plan to use for your Reserved Instance. </p>
    pub fn purchasing_option(&self) -> &crate::types::PurchasingOption {
        &self.purchasing_option
    }
    /// <p> The flexibility to change the instance types needed for your Reserved Instance. </p>
    pub fn offering_class(&self) -> &crate::types::OfferingClass {
        &self.offering_class
    }
    /// <p> The preferred duration of the Reserved Instance term. </p>
    pub fn term_length(&self) -> &crate::types::TermLength {
        &self.term_length
    }
}
impl ReservedInstanceOptions {
    /// Creates a new builder-style object to manufacture [`ReservedInstanceOptions`](crate::types::ReservedInstanceOptions).
    pub fn builder() -> crate::types::builders::ReservedInstanceOptionsBuilder {
        crate::types::builders::ReservedInstanceOptionsBuilder::default()
    }
}

/// A builder for [`ReservedInstanceOptions`](crate::types::ReservedInstanceOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReservedInstanceOptionsBuilder {
    pub(crate) purchasing_option: ::std::option::Option<crate::types::PurchasingOption>,
    pub(crate) offering_class: ::std::option::Option<crate::types::OfferingClass>,
    pub(crate) term_length: ::std::option::Option<crate::types::TermLength>,
}
impl ReservedInstanceOptionsBuilder {
    /// <p> The payment plan to use for your Reserved Instance. </p>
    /// This field is required.
    pub fn purchasing_option(mut self, input: crate::types::PurchasingOption) -> Self {
        self.purchasing_option = ::std::option::Option::Some(input);
        self
    }
    /// <p> The payment plan to use for your Reserved Instance. </p>
    pub fn set_purchasing_option(mut self, input: ::std::option::Option<crate::types::PurchasingOption>) -> Self {
        self.purchasing_option = input;
        self
    }
    /// <p> The payment plan to use for your Reserved Instance. </p>
    pub fn get_purchasing_option(&self) -> &::std::option::Option<crate::types::PurchasingOption> {
        &self.purchasing_option
    }
    /// <p> The flexibility to change the instance types needed for your Reserved Instance. </p>
    /// This field is required.
    pub fn offering_class(mut self, input: crate::types::OfferingClass) -> Self {
        self.offering_class = ::std::option::Option::Some(input);
        self
    }
    /// <p> The flexibility to change the instance types needed for your Reserved Instance. </p>
    pub fn set_offering_class(mut self, input: ::std::option::Option<crate::types::OfferingClass>) -> Self {
        self.offering_class = input;
        self
    }
    /// <p> The flexibility to change the instance types needed for your Reserved Instance. </p>
    pub fn get_offering_class(&self) -> &::std::option::Option<crate::types::OfferingClass> {
        &self.offering_class
    }
    /// <p> The preferred duration of the Reserved Instance term. </p>
    /// This field is required.
    pub fn term_length(mut self, input: crate::types::TermLength) -> Self {
        self.term_length = ::std::option::Option::Some(input);
        self
    }
    /// <p> The preferred duration of the Reserved Instance term. </p>
    pub fn set_term_length(mut self, input: ::std::option::Option<crate::types::TermLength>) -> Self {
        self.term_length = input;
        self
    }
    /// <p> The preferred duration of the Reserved Instance term. </p>
    pub fn get_term_length(&self) -> &::std::option::Option<crate::types::TermLength> {
        &self.term_length
    }
    /// Consumes the builder and constructs a [`ReservedInstanceOptions`](crate::types::ReservedInstanceOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`purchasing_option`](crate::types::builders::ReservedInstanceOptionsBuilder::purchasing_option)
    /// - [`offering_class`](crate::types::builders::ReservedInstanceOptionsBuilder::offering_class)
    /// - [`term_length`](crate::types::builders::ReservedInstanceOptionsBuilder::term_length)
    pub fn build(self) -> ::std::result::Result<crate::types::ReservedInstanceOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ReservedInstanceOptions {
            purchasing_option: self.purchasing_option.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "purchasing_option",
                    "purchasing_option was not specified but it is required when building ReservedInstanceOptions",
                )
            })?,
            offering_class: self.offering_class.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "offering_class",
                    "offering_class was not specified but it is required when building ReservedInstanceOptions",
                )
            })?,
            term_length: self.term_length.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "term_length",
                    "term_length was not specified but it is required when building ReservedInstanceOptions",
                )
            })?,
        })
    }
}
