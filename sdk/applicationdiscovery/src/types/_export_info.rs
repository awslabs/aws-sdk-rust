// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information regarding the export status of discovered data. The value is an array of objects.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportInfo {
    /// <p>A unique identifier used to query an export.</p>
    pub export_id: ::std::string::String,
    /// <p>The status of the data export job.</p>
    pub export_status: crate::types::ExportStatus,
    /// <p>A status message provided for API callers.</p>
    pub status_message: ::std::string::String,
    /// <p>A URL for an Amazon S3 bucket where you can review the exported data. The URL is displayed only if the export succeeded.</p>
    pub configurations_download_url: ::std::option::Option<::std::string::String>,
    /// <p>The time that the data export was initiated.</p>
    pub export_request_time: ::aws_smithy_types::DateTime,
    /// <p>If true, the export of agent information exceeded the size limit for a single export and the exported data is incomplete for the requested time range. To address this, select a smaller time range for the export by using <code>startDate</code> and <code>endDate</code>.</p>
    pub is_truncated: bool,
    /// <p>The value of <code>startTime</code> parameter in the <code>StartExportTask</code> request. If no <code>startTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub requested_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The <code>endTime</code> used in the <code>StartExportTask</code> request. If no <code>endTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub requested_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ExportInfo {
    /// <p>A unique identifier used to query an export.</p>
    pub fn export_id(&self) -> &str {
        use std::ops::Deref;
        self.export_id.deref()
    }
    /// <p>The status of the data export job.</p>
    pub fn export_status(&self) -> &crate::types::ExportStatus {
        &self.export_status
    }
    /// <p>A status message provided for API callers.</p>
    pub fn status_message(&self) -> &str {
        use std::ops::Deref;
        self.status_message.deref()
    }
    /// <p>A URL for an Amazon S3 bucket where you can review the exported data. The URL is displayed only if the export succeeded.</p>
    pub fn configurations_download_url(&self) -> ::std::option::Option<&str> {
        self.configurations_download_url.as_deref()
    }
    /// <p>The time that the data export was initiated.</p>
    pub fn export_request_time(&self) -> &::aws_smithy_types::DateTime {
        &self.export_request_time
    }
    /// <p>If true, the export of agent information exceeded the size limit for a single export and the exported data is incomplete for the requested time range. To address this, select a smaller time range for the export by using <code>startDate</code> and <code>endDate</code>.</p>
    pub fn is_truncated(&self) -> bool {
        self.is_truncated
    }
    /// <p>The value of <code>startTime</code> parameter in the <code>StartExportTask</code> request. If no <code>startTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub fn requested_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.requested_start_time.as_ref()
    }
    /// <p>The <code>endTime</code> used in the <code>StartExportTask</code> request. If no <code>endTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub fn requested_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.requested_end_time.as_ref()
    }
}
impl ExportInfo {
    /// Creates a new builder-style object to manufacture [`ExportInfo`](crate::types::ExportInfo).
    pub fn builder() -> crate::types::builders::ExportInfoBuilder {
        crate::types::builders::ExportInfoBuilder::default()
    }
}

/// A builder for [`ExportInfo`](crate::types::ExportInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportInfoBuilder {
    pub(crate) export_id: ::std::option::Option<::std::string::String>,
    pub(crate) export_status: ::std::option::Option<crate::types::ExportStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) configurations_download_url: ::std::option::Option<::std::string::String>,
    pub(crate) export_request_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) is_truncated: ::std::option::Option<bool>,
    pub(crate) requested_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) requested_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ExportInfoBuilder {
    /// <p>A unique identifier used to query an export.</p>
    /// This field is required.
    pub fn export_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.export_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier used to query an export.</p>
    pub fn set_export_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.export_id = input;
        self
    }
    /// <p>A unique identifier used to query an export.</p>
    pub fn get_export_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.export_id
    }
    /// <p>The status of the data export job.</p>
    /// This field is required.
    pub fn export_status(mut self, input: crate::types::ExportStatus) -> Self {
        self.export_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the data export job.</p>
    pub fn set_export_status(mut self, input: ::std::option::Option<crate::types::ExportStatus>) -> Self {
        self.export_status = input;
        self
    }
    /// <p>The status of the data export job.</p>
    pub fn get_export_status(&self) -> &::std::option::Option<crate::types::ExportStatus> {
        &self.export_status
    }
    /// <p>A status message provided for API callers.</p>
    /// This field is required.
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A status message provided for API callers.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A status message provided for API callers.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>A URL for an Amazon S3 bucket where you can review the exported data. The URL is displayed only if the export succeeded.</p>
    pub fn configurations_download_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configurations_download_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL for an Amazon S3 bucket where you can review the exported data. The URL is displayed only if the export succeeded.</p>
    pub fn set_configurations_download_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configurations_download_url = input;
        self
    }
    /// <p>A URL for an Amazon S3 bucket where you can review the exported data. The URL is displayed only if the export succeeded.</p>
    pub fn get_configurations_download_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.configurations_download_url
    }
    /// <p>The time that the data export was initiated.</p>
    /// This field is required.
    pub fn export_request_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.export_request_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the data export was initiated.</p>
    pub fn set_export_request_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.export_request_time = input;
        self
    }
    /// <p>The time that the data export was initiated.</p>
    pub fn get_export_request_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.export_request_time
    }
    /// <p>If true, the export of agent information exceeded the size limit for a single export and the exported data is incomplete for the requested time range. To address this, select a smaller time range for the export by using <code>startDate</code> and <code>endDate</code>.</p>
    pub fn is_truncated(mut self, input: bool) -> Self {
        self.is_truncated = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, the export of agent information exceeded the size limit for a single export and the exported data is incomplete for the requested time range. To address this, select a smaller time range for the export by using <code>startDate</code> and <code>endDate</code>.</p>
    pub fn set_is_truncated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_truncated = input;
        self
    }
    /// <p>If true, the export of agent information exceeded the size limit for a single export and the exported data is incomplete for the requested time range. To address this, select a smaller time range for the export by using <code>startDate</code> and <code>endDate</code>.</p>
    pub fn get_is_truncated(&self) -> &::std::option::Option<bool> {
        &self.is_truncated
    }
    /// <p>The value of <code>startTime</code> parameter in the <code>StartExportTask</code> request. If no <code>startTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub fn requested_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.requested_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of <code>startTime</code> parameter in the <code>StartExportTask</code> request. If no <code>startTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub fn set_requested_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.requested_start_time = input;
        self
    }
    /// <p>The value of <code>startTime</code> parameter in the <code>StartExportTask</code> request. If no <code>startTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub fn get_requested_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.requested_start_time
    }
    /// <p>The <code>endTime</code> used in the <code>StartExportTask</code> request. If no <code>endTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub fn requested_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.requested_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>endTime</code> used in the <code>StartExportTask</code> request. If no <code>endTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub fn set_requested_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.requested_end_time = input;
        self
    }
    /// <p>The <code>endTime</code> used in the <code>StartExportTask</code> request. If no <code>endTime</code> was requested, this result does not appear in <code>ExportInfo</code>.</p>
    pub fn get_requested_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.requested_end_time
    }
    /// Consumes the builder and constructs a [`ExportInfo`](crate::types::ExportInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`export_id`](crate::types::builders::ExportInfoBuilder::export_id)
    /// - [`export_status`](crate::types::builders::ExportInfoBuilder::export_status)
    /// - [`status_message`](crate::types::builders::ExportInfoBuilder::status_message)
    /// - [`export_request_time`](crate::types::builders::ExportInfoBuilder::export_request_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ExportInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExportInfo {
            export_id: self.export_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "export_id",
                    "export_id was not specified but it is required when building ExportInfo",
                )
            })?,
            export_status: self.export_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "export_status",
                    "export_status was not specified but it is required when building ExportInfo",
                )
            })?,
            status_message: self.status_message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_message",
                    "status_message was not specified but it is required when building ExportInfo",
                )
            })?,
            configurations_download_url: self.configurations_download_url,
            export_request_time: self.export_request_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "export_request_time",
                    "export_request_time was not specified but it is required when building ExportInfo",
                )
            })?,
            is_truncated: self.is_truncated.unwrap_or_default(),
            requested_start_time: self.requested_start_time,
            requested_end_time: self.requested_end_time,
        })
    }
}
