// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Inventory data for installed discovery agents.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomerAgentInfo {
    /// <p>Number of active discovery agents.</p>
    #[doc(hidden)]
    pub active_agents: i32,
    /// <p>Number of healthy discovery agents</p>
    #[doc(hidden)]
    pub healthy_agents: i32,
    /// <p>Number of blacklisted discovery agents.</p>
    #[doc(hidden)]
    pub black_listed_agents: i32,
    /// <p>Number of discovery agents with status SHUTDOWN.</p>
    #[doc(hidden)]
    pub shutdown_agents: i32,
    /// <p>Number of unhealthy discovery agents.</p>
    #[doc(hidden)]
    pub unhealthy_agents: i32,
    /// <p>Total number of discovery agents.</p>
    #[doc(hidden)]
    pub total_agents: i32,
    /// <p>Number of unknown discovery agents.</p>
    #[doc(hidden)]
    pub unknown_agents: i32,
}
impl CustomerAgentInfo {
    /// <p>Number of active discovery agents.</p>
    pub fn active_agents(&self) -> i32 {
        self.active_agents
    }
    /// <p>Number of healthy discovery agents</p>
    pub fn healthy_agents(&self) -> i32 {
        self.healthy_agents
    }
    /// <p>Number of blacklisted discovery agents.</p>
    pub fn black_listed_agents(&self) -> i32 {
        self.black_listed_agents
    }
    /// <p>Number of discovery agents with status SHUTDOWN.</p>
    pub fn shutdown_agents(&self) -> i32 {
        self.shutdown_agents
    }
    /// <p>Number of unhealthy discovery agents.</p>
    pub fn unhealthy_agents(&self) -> i32 {
        self.unhealthy_agents
    }
    /// <p>Total number of discovery agents.</p>
    pub fn total_agents(&self) -> i32 {
        self.total_agents
    }
    /// <p>Number of unknown discovery agents.</p>
    pub fn unknown_agents(&self) -> i32 {
        self.unknown_agents
    }
}
impl CustomerAgentInfo {
    /// Creates a new builder-style object to manufacture [`CustomerAgentInfo`](crate::types::CustomerAgentInfo).
    pub fn builder() -> crate::types::builders::CustomerAgentInfoBuilder {
        crate::types::builders::CustomerAgentInfoBuilder::default()
    }
}

/// A builder for [`CustomerAgentInfo`](crate::types::CustomerAgentInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomerAgentInfoBuilder {
    pub(crate) active_agents: std::option::Option<i32>,
    pub(crate) healthy_agents: std::option::Option<i32>,
    pub(crate) black_listed_agents: std::option::Option<i32>,
    pub(crate) shutdown_agents: std::option::Option<i32>,
    pub(crate) unhealthy_agents: std::option::Option<i32>,
    pub(crate) total_agents: std::option::Option<i32>,
    pub(crate) unknown_agents: std::option::Option<i32>,
}
impl CustomerAgentInfoBuilder {
    /// <p>Number of active discovery agents.</p>
    pub fn active_agents(mut self, input: i32) -> Self {
        self.active_agents = Some(input);
        self
    }
    /// <p>Number of active discovery agents.</p>
    pub fn set_active_agents(mut self, input: std::option::Option<i32>) -> Self {
        self.active_agents = input;
        self
    }
    /// <p>Number of healthy discovery agents</p>
    pub fn healthy_agents(mut self, input: i32) -> Self {
        self.healthy_agents = Some(input);
        self
    }
    /// <p>Number of healthy discovery agents</p>
    pub fn set_healthy_agents(mut self, input: std::option::Option<i32>) -> Self {
        self.healthy_agents = input;
        self
    }
    /// <p>Number of blacklisted discovery agents.</p>
    pub fn black_listed_agents(mut self, input: i32) -> Self {
        self.black_listed_agents = Some(input);
        self
    }
    /// <p>Number of blacklisted discovery agents.</p>
    pub fn set_black_listed_agents(mut self, input: std::option::Option<i32>) -> Self {
        self.black_listed_agents = input;
        self
    }
    /// <p>Number of discovery agents with status SHUTDOWN.</p>
    pub fn shutdown_agents(mut self, input: i32) -> Self {
        self.shutdown_agents = Some(input);
        self
    }
    /// <p>Number of discovery agents with status SHUTDOWN.</p>
    pub fn set_shutdown_agents(mut self, input: std::option::Option<i32>) -> Self {
        self.shutdown_agents = input;
        self
    }
    /// <p>Number of unhealthy discovery agents.</p>
    pub fn unhealthy_agents(mut self, input: i32) -> Self {
        self.unhealthy_agents = Some(input);
        self
    }
    /// <p>Number of unhealthy discovery agents.</p>
    pub fn set_unhealthy_agents(mut self, input: std::option::Option<i32>) -> Self {
        self.unhealthy_agents = input;
        self
    }
    /// <p>Total number of discovery agents.</p>
    pub fn total_agents(mut self, input: i32) -> Self {
        self.total_agents = Some(input);
        self
    }
    /// <p>Total number of discovery agents.</p>
    pub fn set_total_agents(mut self, input: std::option::Option<i32>) -> Self {
        self.total_agents = input;
        self
    }
    /// <p>Number of unknown discovery agents.</p>
    pub fn unknown_agents(mut self, input: i32) -> Self {
        self.unknown_agents = Some(input);
        self
    }
    /// <p>Number of unknown discovery agents.</p>
    pub fn set_unknown_agents(mut self, input: std::option::Option<i32>) -> Self {
        self.unknown_agents = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomerAgentInfo`](crate::types::CustomerAgentInfo).
    pub fn build(self) -> crate::types::CustomerAgentInfo {
        crate::types::CustomerAgentInfo {
            active_agents: self.active_agents.unwrap_or_default(),
            healthy_agents: self.healthy_agents.unwrap_or_default(),
            black_listed_agents: self.black_listed_agents.unwrap_or_default(),
            shutdown_agents: self.shutdown_agents.unwrap_or_default(),
            unhealthy_agents: self.unhealthy_agents.unwrap_or_default(),
            total_agents: self.total_agents.unwrap_or_default(),
            unknown_agents: self.unknown_agents.unwrap_or_default(),
        }
    }
}
