// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Inventory data for installed discovery connectors.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomerConnectorInfo {
    /// <p>Number of active discovery connectors.</p>
    pub active_connectors: i32,
    /// <p>Number of healthy discovery connectors.</p>
    pub healthy_connectors: i32,
    /// <p>Number of blacklisted discovery connectors.</p>
    pub black_listed_connectors: i32,
    /// <p>Number of discovery connectors with status SHUTDOWN,</p>
    pub shutdown_connectors: i32,
    /// <p>Number of unhealthy discovery connectors.</p>
    pub unhealthy_connectors: i32,
    /// <p>Total number of discovery connectors.</p>
    pub total_connectors: i32,
    /// <p>Number of unknown discovery connectors.</p>
    pub unknown_connectors: i32,
}
impl CustomerConnectorInfo {
    /// <p>Number of active discovery connectors.</p>
    pub fn active_connectors(&self) -> i32 {
        self.active_connectors
    }
    /// <p>Number of healthy discovery connectors.</p>
    pub fn healthy_connectors(&self) -> i32 {
        self.healthy_connectors
    }
    /// <p>Number of blacklisted discovery connectors.</p>
    pub fn black_listed_connectors(&self) -> i32 {
        self.black_listed_connectors
    }
    /// <p>Number of discovery connectors with status SHUTDOWN,</p>
    pub fn shutdown_connectors(&self) -> i32 {
        self.shutdown_connectors
    }
    /// <p>Number of unhealthy discovery connectors.</p>
    pub fn unhealthy_connectors(&self) -> i32 {
        self.unhealthy_connectors
    }
    /// <p>Total number of discovery connectors.</p>
    pub fn total_connectors(&self) -> i32 {
        self.total_connectors
    }
    /// <p>Number of unknown discovery connectors.</p>
    pub fn unknown_connectors(&self) -> i32 {
        self.unknown_connectors
    }
}
impl CustomerConnectorInfo {
    /// Creates a new builder-style object to manufacture [`CustomerConnectorInfo`](crate::types::CustomerConnectorInfo).
    pub fn builder() -> crate::types::builders::CustomerConnectorInfoBuilder {
        crate::types::builders::CustomerConnectorInfoBuilder::default()
    }
}

/// A builder for [`CustomerConnectorInfo`](crate::types::CustomerConnectorInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomerConnectorInfoBuilder {
    pub(crate) active_connectors: ::std::option::Option<i32>,
    pub(crate) healthy_connectors: ::std::option::Option<i32>,
    pub(crate) black_listed_connectors: ::std::option::Option<i32>,
    pub(crate) shutdown_connectors: ::std::option::Option<i32>,
    pub(crate) unhealthy_connectors: ::std::option::Option<i32>,
    pub(crate) total_connectors: ::std::option::Option<i32>,
    pub(crate) unknown_connectors: ::std::option::Option<i32>,
}
impl CustomerConnectorInfoBuilder {
    /// <p>Number of active discovery connectors.</p>
    /// This field is required.
    pub fn active_connectors(mut self, input: i32) -> Self {
        self.active_connectors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of active discovery connectors.</p>
    pub fn set_active_connectors(mut self, input: ::std::option::Option<i32>) -> Self {
        self.active_connectors = input;
        self
    }
    /// <p>Number of active discovery connectors.</p>
    pub fn get_active_connectors(&self) -> &::std::option::Option<i32> {
        &self.active_connectors
    }
    /// <p>Number of healthy discovery connectors.</p>
    /// This field is required.
    pub fn healthy_connectors(mut self, input: i32) -> Self {
        self.healthy_connectors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of healthy discovery connectors.</p>
    pub fn set_healthy_connectors(mut self, input: ::std::option::Option<i32>) -> Self {
        self.healthy_connectors = input;
        self
    }
    /// <p>Number of healthy discovery connectors.</p>
    pub fn get_healthy_connectors(&self) -> &::std::option::Option<i32> {
        &self.healthy_connectors
    }
    /// <p>Number of blacklisted discovery connectors.</p>
    /// This field is required.
    pub fn black_listed_connectors(mut self, input: i32) -> Self {
        self.black_listed_connectors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of blacklisted discovery connectors.</p>
    pub fn set_black_listed_connectors(mut self, input: ::std::option::Option<i32>) -> Self {
        self.black_listed_connectors = input;
        self
    }
    /// <p>Number of blacklisted discovery connectors.</p>
    pub fn get_black_listed_connectors(&self) -> &::std::option::Option<i32> {
        &self.black_listed_connectors
    }
    /// <p>Number of discovery connectors with status SHUTDOWN,</p>
    /// This field is required.
    pub fn shutdown_connectors(mut self, input: i32) -> Self {
        self.shutdown_connectors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of discovery connectors with status SHUTDOWN,</p>
    pub fn set_shutdown_connectors(mut self, input: ::std::option::Option<i32>) -> Self {
        self.shutdown_connectors = input;
        self
    }
    /// <p>Number of discovery connectors with status SHUTDOWN,</p>
    pub fn get_shutdown_connectors(&self) -> &::std::option::Option<i32> {
        &self.shutdown_connectors
    }
    /// <p>Number of unhealthy discovery connectors.</p>
    /// This field is required.
    pub fn unhealthy_connectors(mut self, input: i32) -> Self {
        self.unhealthy_connectors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of unhealthy discovery connectors.</p>
    pub fn set_unhealthy_connectors(mut self, input: ::std::option::Option<i32>) -> Self {
        self.unhealthy_connectors = input;
        self
    }
    /// <p>Number of unhealthy discovery connectors.</p>
    pub fn get_unhealthy_connectors(&self) -> &::std::option::Option<i32> {
        &self.unhealthy_connectors
    }
    /// <p>Total number of discovery connectors.</p>
    /// This field is required.
    pub fn total_connectors(mut self, input: i32) -> Self {
        self.total_connectors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total number of discovery connectors.</p>
    pub fn set_total_connectors(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_connectors = input;
        self
    }
    /// <p>Total number of discovery connectors.</p>
    pub fn get_total_connectors(&self) -> &::std::option::Option<i32> {
        &self.total_connectors
    }
    /// <p>Number of unknown discovery connectors.</p>
    /// This field is required.
    pub fn unknown_connectors(mut self, input: i32) -> Self {
        self.unknown_connectors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of unknown discovery connectors.</p>
    pub fn set_unknown_connectors(mut self, input: ::std::option::Option<i32>) -> Self {
        self.unknown_connectors = input;
        self
    }
    /// <p>Number of unknown discovery connectors.</p>
    pub fn get_unknown_connectors(&self) -> &::std::option::Option<i32> {
        &self.unknown_connectors
    }
    /// Consumes the builder and constructs a [`CustomerConnectorInfo`](crate::types::CustomerConnectorInfo).
    pub fn build(self) -> crate::types::CustomerConnectorInfo {
        crate::types::CustomerConnectorInfo {
            active_connectors: self.active_connectors.unwrap_or_default(),
            healthy_connectors: self.healthy_connectors.unwrap_or_default(),
            black_listed_connectors: self.black_listed_connectors.unwrap_or_default(),
            shutdown_connectors: self.shutdown_connectors.unwrap_or_default(),
            unhealthy_connectors: self.unhealthy_connectors.unwrap_or_default(),
            total_connectors: self.total_connectors.unwrap_or_default(),
            unknown_connectors: self.unknown_connectors.unwrap_or_default(),
        }
    }
}
