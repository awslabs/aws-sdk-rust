// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to select which agent's data is to be exported. A single agent ID may be selected for export using the <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/API_StartExportTask.html">StartExportTask</a> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportFilter {
    /// <p>A single <code>ExportFilter</code> name. Supported filters: <code>agentIds</code>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A single agent ID for a Discovery Agent. An agent ID can be found using the <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/API_DescribeAgents.html">DescribeAgents</a> action. Typically an ADS agent ID is in the form <code>o-0123456789abcdef0</code>.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Supported condition: <code>EQUALS</code> </p>
    #[doc(hidden)]
    pub condition: std::option::Option<std::string::String>,
}
impl ExportFilter {
    /// <p>A single <code>ExportFilter</code> name. Supported filters: <code>agentIds</code>.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A single agent ID for a Discovery Agent. An agent ID can be found using the <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/API_DescribeAgents.html">DescribeAgents</a> action. Typically an ADS agent ID is in the form <code>o-0123456789abcdef0</code>.</p>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
    /// <p>Supported condition: <code>EQUALS</code> </p>
    pub fn condition(&self) -> std::option::Option<&str> {
        self.condition.as_deref()
    }
}
impl ExportFilter {
    /// Creates a new builder-style object to manufacture [`ExportFilter`](crate::types::ExportFilter).
    pub fn builder() -> crate::types::builders::ExportFilterBuilder {
        crate::types::builders::ExportFilterBuilder::default()
    }
}

/// A builder for [`ExportFilter`](crate::types::ExportFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExportFilterBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) condition: std::option::Option<std::string::String>,
}
impl ExportFilterBuilder {
    /// <p>A single <code>ExportFilter</code> name. Supported filters: <code>agentIds</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A single <code>ExportFilter</code> name. Supported filters: <code>agentIds</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>A single agent ID for a Discovery Agent. An agent ID can be found using the <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/API_DescribeAgents.html">DescribeAgents</a> action. Typically an ADS agent ID is in the form <code>o-0123456789abcdef0</code>.</p>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>A single agent ID for a Discovery Agent. An agent ID can be found using the <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/API_DescribeAgents.html">DescribeAgents</a> action. Typically an ADS agent ID is in the form <code>o-0123456789abcdef0</code>.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// <p>Supported condition: <code>EQUALS</code> </p>
    pub fn condition(mut self, input: impl Into<std::string::String>) -> Self {
        self.condition = Some(input.into());
        self
    }
    /// <p>Supported condition: <code>EQUALS</code> </p>
    pub fn set_condition(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.condition = input;
        self
    }
    /// Consumes the builder and constructs a [`ExportFilter`](crate::types::ExportFilter).
    pub fn build(self) -> crate::types::ExportFilter {
        crate::types::ExportFilter {
            name: self.name,
            values: self.values,
            condition: self.condition,
        }
    }
}
