// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The Amazon Web Services user account does not have permission to perform the action. Check the IAM policy associated with this account.</p>
    AuthorizationErrorException(crate::error::AuthorizationErrorException),
    /// <p></p>
    ConflictErrorException(crate::error::ConflictErrorException),
    /// <p>The home region is not set. Set the home region to continue.</p>
    HomeRegionNotSetException(crate::error::HomeRegionNotSetException),
    /// <p>One or more parameters are not valid. Verify the parameters and try again.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>The value of one or more parameters are either invalid or out of range. Verify the parameter values and try again.</p>
    InvalidParameterValueException(crate::error::InvalidParameterValueException),
    /// <p>This operation is not permitted.</p>
    OperationNotPermittedException(crate::error::OperationNotPermittedException),
    /// <p>This issue occurs when the same <code>clientRequestToken</code> is used with the <code>StartImportTask</code> action, but with different parameters. For example, you use the same request token but have two different import URLs, you can encounter this issue. If the import tasks are meant to be different, use a different <code>clientRequestToken</code>, and try again.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The specified configuration ID was not located. Verify the configuration ID and try again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The server experienced an internal error. Try again.</p>
    ServerInternalErrorException(crate::error::ServerInternalErrorException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AuthorizationErrorException(inner) => inner.fmt(f),
            Error::ConflictErrorException(inner) => inner.fmt(f),
            Error::HomeRegionNotSetException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidParameterValueException(inner) => inner.fmt(f),
            Error::OperationNotPermittedException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServerInternalErrorException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AssociateConfigurationItemsToApplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateConfigurationItemsToApplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateConfigurationItemsToApplicationError> for Error {
    fn from(err: crate::error::AssociateConfigurationItemsToApplicationError) -> Self {
        match err {
            crate::error::AssociateConfigurationItemsToApplicationError::AuthorizationErrorException(inner) => Error::AuthorizationErrorException(inner),
            crate::error::AssociateConfigurationItemsToApplicationError::HomeRegionNotSetException(inner) => Error::HomeRegionNotSetException(inner),
            crate::error::AssociateConfigurationItemsToApplicationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::AssociateConfigurationItemsToApplicationError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::AssociateConfigurationItemsToApplicationError::ServerInternalErrorException(inner) => Error::ServerInternalErrorException(inner),
            crate::error::AssociateConfigurationItemsToApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeleteImportDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDeleteImportDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDeleteImportDataError> for Error {
    fn from(err: crate::error::BatchDeleteImportDataError) -> Self {
        match err {
            crate::error::BatchDeleteImportDataError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::BatchDeleteImportDataError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::BatchDeleteImportDataError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::BatchDeleteImportDataError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::BatchDeleteImportDataError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::BatchDeleteImportDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateApplicationError> for Error {
    fn from(err: crate::error::CreateApplicationError) -> Self {
        match err {
            crate::error::CreateApplicationError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::CreateApplicationError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::CreateApplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateApplicationError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateApplicationError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::CreateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTagsError> for Error {
    fn from(err: crate::error::CreateTagsError) -> Self {
        match err {
            crate::error::CreateTagsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::CreateTagsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::CreateTagsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateTagsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateTagsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::CreateTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteApplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteApplicationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteApplicationsError> for Error {
    fn from(err: crate::error::DeleteApplicationsError) -> Self {
        match err {
            crate::error::DeleteApplicationsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::DeleteApplicationsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::DeleteApplicationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteApplicationsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteApplicationsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::DeleteApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTagsError> for Error {
    fn from(err: crate::error::DeleteTagsError) -> Self {
        match err {
            crate::error::DeleteTagsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::DeleteTagsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::DeleteTagsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteTagsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteTagsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::DeleteTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAgentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeAgentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAgentsError> for Error {
    fn from(err: crate::error::DescribeAgentsError) -> Self {
        match err {
            crate::error::DescribeAgentsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::DescribeAgentsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::DescribeAgentsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeAgentsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeAgentsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::DescribeAgentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigurationsError> for Error {
    fn from(err: crate::error::DescribeConfigurationsError) -> Self {
        match err {
            crate::error::DescribeConfigurationsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::DescribeConfigurationsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::DescribeConfigurationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeConfigurationsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeConfigurationsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::DescribeConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeContinuousExportsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeContinuousExportsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeContinuousExportsError> for Error {
    fn from(err: crate::error::DescribeContinuousExportsError) -> Self {
        match err {
            crate::error::DescribeContinuousExportsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::DescribeContinuousExportsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::DescribeContinuousExportsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeContinuousExportsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeContinuousExportsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::DescribeContinuousExportsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeContinuousExportsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::DescribeContinuousExportsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExportConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeExportConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeExportConfigurationsError> for Error {
    fn from(err: crate::error::DescribeExportConfigurationsError) -> Self {
        match err {
            crate::error::DescribeExportConfigurationsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::DescribeExportConfigurationsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::DescribeExportConfigurationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeExportConfigurationsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeExportConfigurationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeExportConfigurationsError::ServerInternalErrorException(
                inner,
            ) => Error::ServerInternalErrorException(inner),
            crate::error::DescribeExportConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExportTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeExportTasksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeExportTasksError> for Error {
    fn from(err: crate::error::DescribeExportTasksError) -> Self {
        match err {
            crate::error::DescribeExportTasksError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::DescribeExportTasksError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::DescribeExportTasksError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeExportTasksError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeExportTasksError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::DescribeExportTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeImportTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeImportTasksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeImportTasksError> for Error {
    fn from(err: crate::error::DescribeImportTasksError) -> Self {
        match err {
            crate::error::DescribeImportTasksError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::DescribeImportTasksError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::DescribeImportTasksError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeImportTasksError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeImportTasksError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::DescribeImportTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTagsError> for Error {
    fn from(err: crate::error::DescribeTagsError) -> Self {
        match err {
            crate::error::DescribeTagsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::DescribeTagsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::DescribeTagsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeTagsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeTagsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::DescribeTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateConfigurationItemsFromApplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateConfigurationItemsFromApplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateConfigurationItemsFromApplicationError> for Error {
    fn from(err: crate::error::DisassociateConfigurationItemsFromApplicationError) -> Self {
        match err {
            crate::error::DisassociateConfigurationItemsFromApplicationError::AuthorizationErrorException(inner) => Error::AuthorizationErrorException(inner),
            crate::error::DisassociateConfigurationItemsFromApplicationError::HomeRegionNotSetException(inner) => Error::HomeRegionNotSetException(inner),
            crate::error::DisassociateConfigurationItemsFromApplicationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DisassociateConfigurationItemsFromApplicationError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DisassociateConfigurationItemsFromApplicationError::ServerInternalErrorException(inner) => Error::ServerInternalErrorException(inner),
            crate::error::DisassociateConfigurationItemsFromApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExportConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ExportConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExportConfigurationsError> for Error {
    fn from(err: crate::error::ExportConfigurationsError) -> Self {
        match err {
            crate::error::ExportConfigurationsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::ExportConfigurationsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::ExportConfigurationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ExportConfigurationsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ExportConfigurationsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ExportConfigurationsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::ExportConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDiscoverySummaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDiscoverySummaryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDiscoverySummaryError> for Error {
    fn from(err: crate::error::GetDiscoverySummaryError) -> Self {
        match err {
            crate::error::GetDiscoverySummaryError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::GetDiscoverySummaryError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::GetDiscoverySummaryError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetDiscoverySummaryError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::GetDiscoverySummaryError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::GetDiscoverySummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListConfigurationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListConfigurationsError> for Error {
    fn from(err: crate::error::ListConfigurationsError) -> Self {
        match err {
            crate::error::ListConfigurationsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::ListConfigurationsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::ListConfigurationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListConfigurationsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListConfigurationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListConfigurationsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::ListConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServerNeighborsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListServerNeighborsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServerNeighborsError> for Error {
    fn from(err: crate::error::ListServerNeighborsError) -> Self {
        match err {
            crate::error::ListServerNeighborsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::ListServerNeighborsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::ListServerNeighborsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListServerNeighborsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListServerNeighborsError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::ListServerNeighborsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartContinuousExportError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartContinuousExportError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartContinuousExportError> for Error {
    fn from(err: crate::error::StartContinuousExportError) -> Self {
        match err {
            crate::error::StartContinuousExportError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::StartContinuousExportError::ConflictErrorException(inner) => {
                Error::ConflictErrorException(inner)
            }
            crate::error::StartContinuousExportError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::StartContinuousExportError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartContinuousExportError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::StartContinuousExportError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::StartContinuousExportError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::StartContinuousExportError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::StartContinuousExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDataCollectionByAgentIdsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartDataCollectionByAgentIdsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDataCollectionByAgentIdsError> for Error {
    fn from(err: crate::error::StartDataCollectionByAgentIdsError) -> Self {
        match err {
            crate::error::StartDataCollectionByAgentIdsError::AuthorizationErrorException(
                inner,
            ) => Error::AuthorizationErrorException(inner),
            crate::error::StartDataCollectionByAgentIdsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::StartDataCollectionByAgentIdsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartDataCollectionByAgentIdsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::StartDataCollectionByAgentIdsError::ServerInternalErrorException(
                inner,
            ) => Error::ServerInternalErrorException(inner),
            crate::error::StartDataCollectionByAgentIdsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartExportTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartExportTaskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartExportTaskError> for Error {
    fn from(err: crate::error::StartExportTaskError) -> Self {
        match err {
            crate::error::StartExportTaskError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::StartExportTaskError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::StartExportTaskError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartExportTaskError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::StartExportTaskError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::StartExportTaskError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::StartExportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartImportTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartImportTaskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartImportTaskError> for Error {
    fn from(err: crate::error::StartImportTaskError) -> Self {
        match err {
            crate::error::StartImportTaskError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::StartImportTaskError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::StartImportTaskError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartImportTaskError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::StartImportTaskError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::StartImportTaskError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::StartImportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopContinuousExportError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopContinuousExportError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopContinuousExportError> for Error {
    fn from(err: crate::error::StopContinuousExportError) -> Self {
        match err {
            crate::error::StopContinuousExportError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::StopContinuousExportError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::StopContinuousExportError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StopContinuousExportError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::StopContinuousExportError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::StopContinuousExportError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::StopContinuousExportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopContinuousExportError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::StopContinuousExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopDataCollectionByAgentIdsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopDataCollectionByAgentIdsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopDataCollectionByAgentIdsError> for Error {
    fn from(err: crate::error::StopDataCollectionByAgentIdsError) -> Self {
        match err {
            crate::error::StopDataCollectionByAgentIdsError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::StopDataCollectionByAgentIdsError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::StopDataCollectionByAgentIdsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StopDataCollectionByAgentIdsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::StopDataCollectionByAgentIdsError::ServerInternalErrorException(
                inner,
            ) => Error::ServerInternalErrorException(inner),
            crate::error::StopDataCollectionByAgentIdsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApplicationError> for Error {
    fn from(err: crate::error::UpdateApplicationError) -> Self {
        match err {
            crate::error::UpdateApplicationError::AuthorizationErrorException(inner) => {
                Error::AuthorizationErrorException(inner)
            }
            crate::error::UpdateApplicationError::HomeRegionNotSetException(inner) => {
                Error::HomeRegionNotSetException(inner)
            }
            crate::error::UpdateApplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateApplicationError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateApplicationError::ServerInternalErrorException(inner) => {
                Error::ServerInternalErrorException(inner)
            }
            crate::error::UpdateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AuthorizationErrorException(e) => e.request_id(),
            Self::ConflictErrorException(e) => e.request_id(),
            Self::HomeRegionNotSetException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidParameterValueException(e) => e.request_id(),
            Self::OperationNotPermittedException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServerInternalErrorException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
