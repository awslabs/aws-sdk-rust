// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_ec2_recommendations_export_preferences(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Ec2RecommendationsExportPreferences,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_1) = &input.cpu_performance_metric_basis {
        #[allow(unused_mut)]
        let mut object_2 = object.key("cpuPerformanceMetricBasis").start_object();
        crate::protocol_serde::shape_usage_metric_basis::ser_usage_metric_basis(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.ram_performance_metric_basis {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ramPerformanceMetricBasis").start_object();
        crate::protocol_serde::shape_usage_metric_basis::ser_usage_metric_basis(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.tenancy {
        object.key("tenancy").string(var_5.as_str());
    }
    if let Some(var_6) = &input.excluded_instance_types {
        let mut array_7 = object.key("excludedInstanceTypes").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.preferred_region {
        object.key("preferredRegion").string(var_9.as_str());
    }
    if let Some(var_10) = &input.reserved_instance_options {
        #[allow(unused_mut)]
        let mut object_11 = object.key("reservedInstanceOptions").start_object();
        crate::protocol_serde::shape_reserved_instance_options::ser_reserved_instance_options(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
