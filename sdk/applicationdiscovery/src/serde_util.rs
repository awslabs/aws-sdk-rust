// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn list_server_neighbors_output_correct_errors(
    mut builder: crate::operation::list_server_neighbors::builders::ListServerNeighborsOutputBuilder,
) -> crate::operation::list_server_neighbors::builders::ListServerNeighborsOutputBuilder {
    if builder.neighbors.is_none() {
        builder.neighbors = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_agent_info_correct_errors(
    mut builder: crate::types::builders::CustomerAgentInfoBuilder,
) -> crate::types::builders::CustomerAgentInfoBuilder {
    if builder.active_agents.is_none() {
        builder.active_agents = Some(Default::default())
    }
    if builder.healthy_agents.is_none() {
        builder.healthy_agents = Some(Default::default())
    }
    if builder.black_listed_agents.is_none() {
        builder.black_listed_agents = Some(Default::default())
    }
    if builder.shutdown_agents.is_none() {
        builder.shutdown_agents = Some(Default::default())
    }
    if builder.unhealthy_agents.is_none() {
        builder.unhealthy_agents = Some(Default::default())
    }
    if builder.total_agents.is_none() {
        builder.total_agents = Some(Default::default())
    }
    if builder.unknown_agents.is_none() {
        builder.unknown_agents = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_agentless_collector_info_correct_errors(
    mut builder: crate::types::builders::CustomerAgentlessCollectorInfoBuilder,
) -> crate::types::builders::CustomerAgentlessCollectorInfoBuilder {
    if builder.active_agentless_collectors.is_none() {
        builder.active_agentless_collectors = Some(Default::default())
    }
    if builder.healthy_agentless_collectors.is_none() {
        builder.healthy_agentless_collectors = Some(Default::default())
    }
    if builder.deny_listed_agentless_collectors.is_none() {
        builder.deny_listed_agentless_collectors = Some(Default::default())
    }
    if builder.shutdown_agentless_collectors.is_none() {
        builder.shutdown_agentless_collectors = Some(Default::default())
    }
    if builder.unhealthy_agentless_collectors.is_none() {
        builder.unhealthy_agentless_collectors = Some(Default::default())
    }
    if builder.total_agentless_collectors.is_none() {
        builder.total_agentless_collectors = Some(Default::default())
    }
    if builder.unknown_agentless_collectors.is_none() {
        builder.unknown_agentless_collectors = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_connector_info_correct_errors(
    mut builder: crate::types::builders::CustomerConnectorInfoBuilder,
) -> crate::types::builders::CustomerConnectorInfoBuilder {
    if builder.active_connectors.is_none() {
        builder.active_connectors = Some(Default::default())
    }
    if builder.healthy_connectors.is_none() {
        builder.healthy_connectors = Some(Default::default())
    }
    if builder.black_listed_connectors.is_none() {
        builder.black_listed_connectors = Some(Default::default())
    }
    if builder.shutdown_connectors.is_none() {
        builder.shutdown_connectors = Some(Default::default())
    }
    if builder.unhealthy_connectors.is_none() {
        builder.unhealthy_connectors = Some(Default::default())
    }
    if builder.total_connectors.is_none() {
        builder.total_connectors = Some(Default::default())
    }
    if builder.unknown_connectors.is_none() {
        builder.unknown_connectors = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_me_collector_info_correct_errors(
    mut builder: crate::types::builders::CustomerMeCollectorInfoBuilder,
) -> crate::types::builders::CustomerMeCollectorInfoBuilder {
    if builder.active_me_collectors.is_none() {
        builder.active_me_collectors = Some(Default::default())
    }
    if builder.healthy_me_collectors.is_none() {
        builder.healthy_me_collectors = Some(Default::default())
    }
    if builder.deny_listed_me_collectors.is_none() {
        builder.deny_listed_me_collectors = Some(Default::default())
    }
    if builder.shutdown_me_collectors.is_none() {
        builder.shutdown_me_collectors = Some(Default::default())
    }
    if builder.unhealthy_me_collectors.is_none() {
        builder.unhealthy_me_collectors = Some(Default::default())
    }
    if builder.total_me_collectors.is_none() {
        builder.total_me_collectors = Some(Default::default())
    }
    if builder.unknown_me_collectors.is_none() {
        builder.unknown_me_collectors = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_agent_error_correct_errors(
    mut builder: crate::types::builders::BatchDeleteAgentErrorBuilder,
) -> crate::types::builders::BatchDeleteAgentErrorBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::DeleteAgentErrorCode>().ok()
    }
    builder
}

pub(crate) fn export_info_correct_errors(mut builder: crate::types::builders::ExportInfoBuilder) -> crate::types::builders::ExportInfoBuilder {
    if builder.export_id.is_none() {
        builder.export_id = Some(Default::default())
    }
    if builder.export_status.is_none() {
        builder.export_status = "no value was set".parse::<crate::types::ExportStatus>().ok()
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.export_request_time.is_none() {
        builder.export_request_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn neighbor_connection_detail_correct_errors(
    mut builder: crate::types::builders::NeighborConnectionDetailBuilder,
) -> crate::types::builders::NeighborConnectionDetailBuilder {
    if builder.source_server_id.is_none() {
        builder.source_server_id = Some(Default::default())
    }
    if builder.destination_server_id.is_none() {
        builder.destination_server_id = Some(Default::default())
    }
    if builder.connections_count.is_none() {
        builder.connections_count = Some(Default::default())
    }
    builder
}
