// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDbCluster`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_name):<br>required: **true**<br><p>The name that uniquely identifies the DB cluster when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB cluster names must be unique per customer and per region.</p><br>
    ///   - [`username(impl Into<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::username) / [`set_username(Option<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_username):<br>required: **false**<br><p>The username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. For example, my-user1. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be stored in a secret created in Secrets Manager in your account.</p><br>
    ///   - [`password(impl Into<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::password) / [`set_password(Option<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_password):<br>required: **false**<br><p>The password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be stored in a secret created in Secrets Manager in your account.</p><br>
    ///   - [`organization(impl Into<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::organization) / [`set_organization(Option<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_organization):<br>required: **false**<br><p>The name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users.</p><br>
    ///   - [`bucket(impl Into<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::bucket) / [`set_bucket(Option<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_bucket):<br>required: **false**<br><p>The name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization.</p><br>
    ///   - [`port(i32)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::port) / [`set_port(Option<i32>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_port):<br>required: **false**<br><p>The port number on which InfluxDB accepts connections.</p> <p>Valid Values: 1024-65535</p> <p>Default: 8086 for InfluxDB v2, 8181 for InfluxDB v3</p> <p>Constraints: The value can't be 2375-2376, 7788-7799, 8090, or 51678-51680</p><br>
    ///   - [`db_parameter_group_identifier(impl Into<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::db_parameter_group_identifier) / [`set_db_parameter_group_identifier(Option<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_db_parameter_group_identifier):<br>required: **false**<br><p>The ID of the DB parameter group to assign to your DB cluster. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.</p><br>
    ///   - [`db_instance_type(DbInstanceType)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::db_instance_type) / [`set_db_instance_type(Option<DbInstanceType>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_db_instance_type):<br>required: **true**<br><p>The Timestream for InfluxDB DB instance type to run InfluxDB on.</p><br>
    ///   - [`db_storage_type(DbStorageType)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::db_storage_type) / [`set_db_storage_type(Option<DbStorageType>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_db_storage_type):<br>required: **false**<br><p>The Timestream for InfluxDB DB storage type to read and write InfluxDB data.</p> <p>You can choose between three different types of provisioned Influx IOPS Included storage according to your workload requirements:</p> <ul>  <li>   <p>Influx I/O Included 3000 IOPS</p></li>  <li>   <p>Influx I/O Included 12000 IOPS</p></li>  <li>   <p>Influx I/O Included 16000 IOPS</p></li> </ul><br>
    ///   - [`allocated_storage(i32)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::allocated_storage) / [`set_allocated_storage(Option<i32>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_allocated_storage):<br>required: **false**<br><p>The amount of storage to allocate for your DB storage type in GiB (gibibytes).</p><br>
    ///   - [`network_type(NetworkType)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::network_type) / [`set_network_type(Option<NetworkType>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_network_type):<br>required: **false**<br><p>Specifies whether the network type of the Timestream for InfluxDB cluster is IPv4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.</p><br>
    ///   - [`publicly_accessible(bool)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::publicly_accessible) / [`set_publicly_accessible(Option<bool>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_publicly_accessible):<br>required: **false**<br><p>Configures the Timestream for InfluxDB cluster with a public IP to facilitate access from outside the VPC.</p><br>
    ///   - [`vpc_subnet_ids(impl Into<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::vpc_subnet_ids) / [`set_vpc_subnet_ids(Option<Vec::<String>>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_vpc_subnet_ids):<br>required: **true**<br><p>A list of VPC subnet IDs to associate with the DB cluster. Provide at least two VPC subnet IDs in different Availability Zones when deploying with a Multi-AZ standby.</p><br>
    ///   - [`vpc_security_group_ids(impl Into<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::vpc_security_group_ids) / [`set_vpc_security_group_ids(Option<Vec::<String>>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_vpc_security_group_ids):<br>required: **true**<br><p>A list of VPC security group IDs to associate with the Timestream for InfluxDB cluster.</p><br>
    ///   - [`deployment_type(ClusterDeploymentType)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::deployment_type) / [`set_deployment_type(Option<ClusterDeploymentType>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_deployment_type):<br>required: **false**<br><p>Specifies the type of cluster to create.</p><br>
    ///   - [`failover_mode(FailoverMode)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::failover_mode) / [`set_failover_mode(Option<FailoverMode>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_failover_mode):<br>required: **false**<br><p>Specifies the behavior of failure recovery when the primary node of the cluster fails.</p><br>
    ///   - [`log_delivery_configuration(LogDeliveryConfiguration)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::log_delivery_configuration) / [`set_log_delivery_configuration(Option<LogDeliveryConfiguration>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_log_delivery_configuration):<br>required: **false**<br><p>Configuration for sending InfluxDB engine logs to a specified S3 bucket.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::set_tags):<br>required: **false**<br><p>A list of key-value pairs to associate with the DB instance.</p><br>
    /// - On success, responds with [`CreateDbClusterOutput`](crate::operation::create_db_cluster::CreateDbClusterOutput) with field(s):
    ///   - [`db_cluster_id(Option<String>)`](crate::operation::create_db_cluster::CreateDbClusterOutput::db_cluster_id): <p>A service-generated unique identifier.</p>
    ///   - [`db_cluster_status(Option<ClusterStatus>)`](crate::operation::create_db_cluster::CreateDbClusterOutput::db_cluster_status): <p>The status of the DB cluster.</p>
    /// - On failure, responds with [`SdkError<CreateDbClusterError>`](crate::operation::create_db_cluster::CreateDbClusterError)
    pub fn create_db_cluster(&self) -> crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder {
        crate::operation::create_db_cluster::builders::CreateDbClusterFluentBuilder::new(self.handle.clone())
    }
}
