// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_db_instance_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_db_instance::CreateDbInstanceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.username {
        object.key("username").string(var_2.as_str());
    }
    if let Some(var_3) = &input.password {
        object.key("password").string(var_3.as_str());
    }
    if let Some(var_4) = &input.organization {
        object.key("organization").string(var_4.as_str());
    }
    if let Some(var_5) = &input.bucket {
        object.key("bucket").string(var_5.as_str());
    }
    if let Some(var_6) = &input.db_instance_type {
        object.key("dbInstanceType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.vpc_subnet_ids {
        let mut array_8 = object.key("vpcSubnetIds").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.vpc_security_group_ids {
        let mut array_11 = object.key("vpcSecurityGroupIds").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_13);
    }
    if let Some(var_14) = &input.db_storage_type {
        object.key("dbStorageType").string(var_14.as_str());
    }
    if let Some(var_15) = &input.allocated_storage {
        object.key("allocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.db_parameter_group_identifier {
        object.key("dbParameterGroupIdentifier").string(var_16.as_str());
    }
    if let Some(var_17) = &input.deployment_type {
        object.key("deploymentType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.log_delivery_configuration {
        #[allow(unused_mut)]
        let mut object_19 = object.key("logDeliveryConfiguration").start_object();
        crate::protocol_serde::shape_log_delivery_configuration::ser_log_delivery_configuration(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.tags {
        #[allow(unused_mut)]
        let mut object_21 = object.key("tags").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22.as_str()).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    Ok(())
}
