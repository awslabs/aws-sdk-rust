// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_influx_dbv3_core_parameters<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::InfluxDBv3CoreParameters>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::InfluxDBv3CoreParametersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "queryFileLimit" => {
                            builder = builder.set_query_file_limit(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "queryLogSize" => {
                            builder = builder.set_query_log_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "logFilter" => {
                            builder = builder.set_log_filter(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "logFormat" => {
                            builder = builder.set_log_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::LogFormats::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "dataFusionNumThreads" => {
                            builder = builder.set_data_fusion_num_threads(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "dataFusionRuntimeType" => {
                            builder = builder.set_data_fusion_runtime_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DataFusionRuntimeType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "dataFusionRuntimeDisableLifoSlot" => {
                            builder = builder.set_data_fusion_runtime_disable_lifo_slot(::aws_smithy_json::deserialize::token::expect_bool_or_null(
                                tokens.next(),
                            )?);
                        }
                        "dataFusionRuntimeEventInterval" => {
                            builder = builder.set_data_fusion_runtime_event_interval(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "dataFusionRuntimeGlobalQueueInterval" => {
                            builder = builder.set_data_fusion_runtime_global_queue_interval(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "dataFusionRuntimeMaxBlockingThreads" => {
                            builder = builder.set_data_fusion_runtime_max_blocking_threads(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "dataFusionRuntimeMaxIoEventsPerTick" => {
                            builder = builder.set_data_fusion_runtime_max_io_events_per_tick(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "dataFusionRuntimeThreadKeepAlive" => {
                            builder = builder.set_data_fusion_runtime_thread_keep_alive(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "dataFusionRuntimeThreadPriority" => {
                            builder = builder.set_data_fusion_runtime_thread_priority(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "dataFusionMaxParquetFanout" => {
                            builder = builder.set_data_fusion_max_parquet_fanout(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "dataFusionUseCachedParquetLoader" => {
                            builder = builder.set_data_fusion_use_cached_parquet_loader(::aws_smithy_json::deserialize::token::expect_bool_or_null(
                                tokens.next(),
                            )?);
                        }
                        "dataFusionConfig" => {
                            builder = builder.set_data_fusion_config(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "maxHttpRequestSize" => {
                            builder = builder.set_max_http_request_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "forceSnapshotMemThreshold" => {
                            builder = builder.set_force_snapshot_mem_threshold(
                                crate::protocol_serde::shape_percent_or_absolute_long::de_percent_or_absolute_long(tokens)?,
                            );
                        }
                        "walSnapshotSize" => {
                            builder = builder.set_wal_snapshot_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "walMaxWriteBufferSize" => {
                            builder = builder.set_wal_max_write_buffer_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "snapshottedWalFilesToKeep" => {
                            builder = builder.set_snapshotted_wal_files_to_keep(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "preemptiveCacheAge" => {
                            builder = builder.set_preemptive_cache_age(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "parquetMemCachePrunePercentage" => {
                            builder = builder.set_parquet_mem_cache_prune_percentage(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f32_lossy()),
                            );
                        }
                        "parquetMemCachePruneInterval" => {
                            builder = builder.set_parquet_mem_cache_prune_interval(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "disableParquetMemCache" => {
                            builder =
                                builder.set_disable_parquet_mem_cache(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "parquetMemCacheQueryPathDuration" => {
                            builder = builder.set_parquet_mem_cache_query_path_duration(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "lastCacheEvictionInterval" => {
                            builder = builder.set_last_cache_eviction_interval(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "distinctCacheEvictionInterval" => {
                            builder = builder.set_distinct_cache_eviction_interval(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "gen1Duration" => {
                            builder = builder.set_gen1_duration(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "execMemPoolBytes" => {
                            builder = builder.set_exec_mem_pool_bytes(
                                crate::protocol_serde::shape_percent_or_absolute_long::de_percent_or_absolute_long(tokens)?,
                            );
                        }
                        "parquetMemCacheSize" => {
                            builder = builder.set_parquet_mem_cache_size(
                                crate::protocol_serde::shape_percent_or_absolute_long::de_percent_or_absolute_long(tokens)?,
                            );
                        }
                        "walReplayFailOnError" => {
                            builder =
                                builder.set_wal_replay_fail_on_error(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "walReplayConcurrencyLimit" => {
                            builder = builder.set_wal_replay_concurrency_limit(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "tableIndexCacheMaxEntries" => {
                            builder = builder.set_table_index_cache_max_entries(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "tableIndexCacheConcurrencyLimit" => {
                            builder = builder.set_table_index_cache_concurrency_limit(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "gen1LookbackDuration" => {
                            builder = builder.set_gen1_lookback_duration(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "retentionCheckInterval" => {
                            builder = builder.set_retention_check_interval(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "deleteGracePeriod" => {
                            builder = builder.set_delete_grace_period(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        "hardDeleteDefaultDuration" => {
                            builder = builder.set_hard_delete_default_duration(crate::protocol_serde::shape_duration::de_duration(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_influx_dbv3_core_parameters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InfluxDBv3CoreParameters,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.query_file_limit {
        object.key("queryFileLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.query_log_size {
        object.key("queryLogSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.log_filter {
        object.key("logFilter").string(var_3.as_str());
    }
    if let Some(var_4) = &input.log_format {
        object.key("logFormat").string(var_4.as_str());
    }
    if let Some(var_5) = &input.data_fusion_num_threads {
        object.key("dataFusionNumThreads").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.data_fusion_runtime_type {
        object.key("dataFusionRuntimeType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.data_fusion_runtime_disable_lifo_slot {
        object.key("dataFusionRuntimeDisableLifoSlot").boolean(*var_7);
    }
    if let Some(var_8) = &input.data_fusion_runtime_event_interval {
        object.key("dataFusionRuntimeEventInterval").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.data_fusion_runtime_global_queue_interval {
        object.key("dataFusionRuntimeGlobalQueueInterval").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.data_fusion_runtime_max_blocking_threads {
        object.key("dataFusionRuntimeMaxBlockingThreads").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.data_fusion_runtime_max_io_events_per_tick {
        object.key("dataFusionRuntimeMaxIoEventsPerTick").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.data_fusion_runtime_thread_keep_alive {
        #[allow(unused_mut)]
        let mut object_13 = object.key("dataFusionRuntimeThreadKeepAlive").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.data_fusion_runtime_thread_priority {
        object.key("dataFusionRuntimeThreadPriority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.data_fusion_max_parquet_fanout {
        object.key("dataFusionMaxParquetFanout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.data_fusion_use_cached_parquet_loader {
        object.key("dataFusionUseCachedParquetLoader").boolean(*var_16);
    }
    if let Some(var_17) = &input.data_fusion_config {
        object.key("dataFusionConfig").string(var_17.as_str());
    }
    if let Some(var_18) = &input.max_http_request_size {
        object.key("maxHttpRequestSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.force_snapshot_mem_threshold {
        #[allow(unused_mut)]
        let mut object_20 = object.key("forceSnapshotMemThreshold").start_object();
        crate::protocol_serde::shape_percent_or_absolute_long::ser_percent_or_absolute_long(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.wal_snapshot_size {
        object.key("walSnapshotSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.wal_max_write_buffer_size {
        object.key("walMaxWriteBufferSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.snapshotted_wal_files_to_keep {
        object.key("snapshottedWalFilesToKeep").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    if let Some(var_24) = &input.preemptive_cache_age {
        #[allow(unused_mut)]
        let mut object_25 = object.key("preemptiveCacheAge").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.parquet_mem_cache_prune_percentage {
        object.key("parquetMemCachePrunePercentage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_26).into()),
        );
    }
    if let Some(var_27) = &input.parquet_mem_cache_prune_interval {
        #[allow(unused_mut)]
        let mut object_28 = object.key("parquetMemCachePruneInterval").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.disable_parquet_mem_cache {
        object.key("disableParquetMemCache").boolean(*var_29);
    }
    if let Some(var_30) = &input.parquet_mem_cache_query_path_duration {
        #[allow(unused_mut)]
        let mut object_31 = object.key("parquetMemCacheQueryPathDuration").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.last_cache_eviction_interval {
        #[allow(unused_mut)]
        let mut object_33 = object.key("lastCacheEvictionInterval").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.distinct_cache_eviction_interval {
        #[allow(unused_mut)]
        let mut object_35 = object.key("distinctCacheEvictionInterval").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.gen1_duration {
        #[allow(unused_mut)]
        let mut object_37 = object.key("gen1Duration").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_37, var_36)?;
        object_37.finish();
    }
    if let Some(var_38) = &input.exec_mem_pool_bytes {
        #[allow(unused_mut)]
        let mut object_39 = object.key("execMemPoolBytes").start_object();
        crate::protocol_serde::shape_percent_or_absolute_long::ser_percent_or_absolute_long(&mut object_39, var_38)?;
        object_39.finish();
    }
    if let Some(var_40) = &input.parquet_mem_cache_size {
        #[allow(unused_mut)]
        let mut object_41 = object.key("parquetMemCacheSize").start_object();
        crate::protocol_serde::shape_percent_or_absolute_long::ser_percent_or_absolute_long(&mut object_41, var_40)?;
        object_41.finish();
    }
    if let Some(var_42) = &input.wal_replay_fail_on_error {
        object.key("walReplayFailOnError").boolean(*var_42);
    }
    if let Some(var_43) = &input.wal_replay_concurrency_limit {
        object.key("walReplayConcurrencyLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_43).into()),
        );
    }
    if let Some(var_44) = &input.table_index_cache_max_entries {
        object.key("tableIndexCacheMaxEntries").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_44).into()),
        );
    }
    if let Some(var_45) = &input.table_index_cache_concurrency_limit {
        object.key("tableIndexCacheConcurrencyLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_45).into()),
        );
    }
    if let Some(var_46) = &input.gen1_lookback_duration {
        #[allow(unused_mut)]
        let mut object_47 = object.key("gen1LookbackDuration").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_47, var_46)?;
        object_47.finish();
    }
    if let Some(var_48) = &input.retention_check_interval {
        #[allow(unused_mut)]
        let mut object_49 = object.key("retentionCheckInterval").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_49, var_48)?;
        object_49.finish();
    }
    if let Some(var_50) = &input.delete_grace_period {
        #[allow(unused_mut)]
        let mut object_51 = object.key("deleteGracePeriod").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_51, var_50)?;
        object_51.finish();
    }
    if let Some(var_52) = &input.hard_delete_default_duration {
        #[allow(unused_mut)]
        let mut object_53 = object.key("hardDeleteDefaultDuration").start_object();
        crate::protocol_serde::shape_duration::ser_duration(&mut object_53, var_52)?;
        object_53.finish();
    }
    Ok(())
}
