// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDbInstanceOutput {
    /// <p>A service-generated unique identifier.</p>
    pub id: ::std::string::String,
    /// <p>This customer-supplied name uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and AWS CLI commands.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the DB instance.</p>
    pub arn: ::std::string::String,
    /// <p>The status of the DB instance.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.</p>
    pub endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The Timestream for InfluxDB instance type that InfluxDB runs on.</p>
    pub db_instance_type: ::std::option::Option<crate::types::DbInstanceType>,
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub db_storage_type: ::std::option::Option<crate::types::DbStorageType>,
    /// <p>The amount of storage allocated for your DB storage type (in gibibytes).</p>
    pub allocated_storage: ::std::option::Option<i32>,
    /// <p>Specifies whether the Timestream for InfluxDB is deployed as Single-AZ or with a MultiAZ Standby for High availability.</p>
    pub deployment_type: ::std::option::Option<crate::types::DeploymentType>,
    /// <p>A list of VPC subnet IDs associated with the DB instance.</p>
    pub vpc_subnet_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>Indicates if the DB instance has a public IP to facilitate access.</p>
    pub publicly_accessible: ::std::option::Option<bool>,
    /// <p>A list of VPC security group IDs associated with the DB instance.</p>
    pub vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The id of the DB parameter group assigned to your DB instance.</p>
    pub db_parameter_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone in which the DB instance resides.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.</p>
    pub secondary_availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub log_delivery_configuration: ::std::option::Option<crate::types::LogDeliveryConfiguration>,
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.</p>
    pub influx_auth_parameters_secret_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateDbInstanceOutput {
    /// <p>A service-generated unique identifier.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>This customer-supplied name uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and AWS CLI commands.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the DB instance.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The status of the DB instance.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.</p>
    pub fn endpoint(&self) -> ::std::option::Option<&str> {
        self.endpoint.as_deref()
    }
    /// <p>The Timestream for InfluxDB instance type that InfluxDB runs on.</p>
    pub fn db_instance_type(&self) -> ::std::option::Option<&crate::types::DbInstanceType> {
        self.db_instance_type.as_ref()
    }
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub fn db_storage_type(&self) -> ::std::option::Option<&crate::types::DbStorageType> {
        self.db_storage_type.as_ref()
    }
    /// <p>The amount of storage allocated for your DB storage type (in gibibytes).</p>
    pub fn allocated_storage(&self) -> ::std::option::Option<i32> {
        self.allocated_storage
    }
    /// <p>Specifies whether the Timestream for InfluxDB is deployed as Single-AZ or with a MultiAZ Standby for High availability.</p>
    pub fn deployment_type(&self) -> ::std::option::Option<&crate::types::DeploymentType> {
        self.deployment_type.as_ref()
    }
    /// <p>A list of VPC subnet IDs associated with the DB instance.</p>
    pub fn vpc_subnet_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.vpc_subnet_ids.deref()
    }
    /// <p>Indicates if the DB instance has a public IP to facilitate access.</p>
    pub fn publicly_accessible(&self) -> ::std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>A list of VPC security group IDs associated with the DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_security_group_ids.is_none()`.
    pub fn vpc_security_group_ids(&self) -> &[::std::string::String] {
        self.vpc_security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>The id of the DB parameter group assigned to your DB instance.</p>
    pub fn db_parameter_group_identifier(&self) -> ::std::option::Option<&str> {
        self.db_parameter_group_identifier.as_deref()
    }
    /// <p>The Availability Zone in which the DB instance resides.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.</p>
    pub fn secondary_availability_zone(&self) -> ::std::option::Option<&str> {
        self.secondary_availability_zone.as_deref()
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn log_delivery_configuration(&self) -> ::std::option::Option<&crate::types::LogDeliveryConfiguration> {
        self.log_delivery_configuration.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.</p>
    pub fn influx_auth_parameters_secret_arn(&self) -> ::std::option::Option<&str> {
        self.influx_auth_parameters_secret_arn.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateDbInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDbInstanceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDbInstanceOutput`](crate::operation::update_db_instance::UpdateDbInstanceOutput).
    pub fn builder() -> crate::operation::update_db_instance::builders::UpdateDbInstanceOutputBuilder {
        crate::operation::update_db_instance::builders::UpdateDbInstanceOutputBuilder::default()
    }
}

/// A builder for [`UpdateDbInstanceOutput`](crate::operation::update_db_instance::UpdateDbInstanceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDbInstanceOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) db_instance_type: ::std::option::Option<crate::types::DbInstanceType>,
    pub(crate) db_storage_type: ::std::option::Option<crate::types::DbStorageType>,
    pub(crate) allocated_storage: ::std::option::Option<i32>,
    pub(crate) deployment_type: ::std::option::Option<crate::types::DeploymentType>,
    pub(crate) vpc_subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) publicly_accessible: ::std::option::Option<bool>,
    pub(crate) vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) db_parameter_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) secondary_availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) log_delivery_configuration: ::std::option::Option<crate::types::LogDeliveryConfiguration>,
    pub(crate) influx_auth_parameters_secret_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateDbInstanceOutputBuilder {
    /// <p>A service-generated unique identifier.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A service-generated unique identifier.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A service-generated unique identifier.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>This customer-supplied name uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and AWS CLI commands.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This customer-supplied name uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and AWS CLI commands.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>This customer-supplied name uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and AWS CLI commands.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the DB instance.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DB instance.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DB instance.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The status of the DB instance.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the DB instance.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the DB instance.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.</p>
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The Timestream for InfluxDB instance type that InfluxDB runs on.</p>
    pub fn db_instance_type(mut self, input: crate::types::DbInstanceType) -> Self {
        self.db_instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Timestream for InfluxDB instance type that InfluxDB runs on.</p>
    pub fn set_db_instance_type(mut self, input: ::std::option::Option<crate::types::DbInstanceType>) -> Self {
        self.db_instance_type = input;
        self
    }
    /// <p>The Timestream for InfluxDB instance type that InfluxDB runs on.</p>
    pub fn get_db_instance_type(&self) -> &::std::option::Option<crate::types::DbInstanceType> {
        &self.db_instance_type
    }
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub fn db_storage_type(mut self, input: crate::types::DbStorageType) -> Self {
        self.db_storage_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub fn set_db_storage_type(mut self, input: ::std::option::Option<crate::types::DbStorageType>) -> Self {
        self.db_storage_type = input;
        self
    }
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub fn get_db_storage_type(&self) -> &::std::option::Option<crate::types::DbStorageType> {
        &self.db_storage_type
    }
    /// <p>The amount of storage allocated for your DB storage type (in gibibytes).</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of storage allocated for your DB storage type (in gibibytes).</p>
    pub fn set_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>The amount of storage allocated for your DB storage type (in gibibytes).</p>
    pub fn get_allocated_storage(&self) -> &::std::option::Option<i32> {
        &self.allocated_storage
    }
    /// <p>Specifies whether the Timestream for InfluxDB is deployed as Single-AZ or with a MultiAZ Standby for High availability.</p>
    pub fn deployment_type(mut self, input: crate::types::DeploymentType) -> Self {
        self.deployment_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the Timestream for InfluxDB is deployed as Single-AZ or with a MultiAZ Standby for High availability.</p>
    pub fn set_deployment_type(mut self, input: ::std::option::Option<crate::types::DeploymentType>) -> Self {
        self.deployment_type = input;
        self
    }
    /// <p>Specifies whether the Timestream for InfluxDB is deployed as Single-AZ or with a MultiAZ Standby for High availability.</p>
    pub fn get_deployment_type(&self) -> &::std::option::Option<crate::types::DeploymentType> {
        &self.deployment_type
    }
    /// Appends an item to `vpc_subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_subnet_ids`](Self::set_vpc_subnet_ids).
    ///
    /// <p>A list of VPC subnet IDs associated with the DB instance.</p>
    pub fn vpc_subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vpc_subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of VPC subnet IDs associated with the DB instance.</p>
    pub fn set_vpc_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vpc_subnet_ids = input;
        self
    }
    /// <p>A list of VPC subnet IDs associated with the DB instance.</p>
    pub fn get_vpc_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vpc_subnet_ids
    }
    /// <p>Indicates if the DB instance has a public IP to facilitate access.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the DB instance has a public IP to facilitate access.</p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>Indicates if the DB instance has a public IP to facilitate access.</p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        &self.publicly_accessible
    }
    /// Appends an item to `vpc_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of VPC security group IDs associated with the DB instance.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vpc_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of VPC security group IDs associated with the DB instance.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vpc_security_group_ids = input;
        self
    }
    /// <p>A list of VPC security group IDs associated with the DB instance.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vpc_security_group_ids
    }
    /// <p>The id of the DB parameter group assigned to your DB instance.</p>
    pub fn db_parameter_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_parameter_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the DB parameter group assigned to your DB instance.</p>
    pub fn set_db_parameter_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_parameter_group_identifier = input;
        self
    }
    /// <p>The id of the DB parameter group assigned to your DB instance.</p>
    pub fn get_db_parameter_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_parameter_group_identifier
    }
    /// <p>The Availability Zone in which the DB instance resides.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone in which the DB instance resides.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone in which the DB instance resides.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.</p>
    pub fn secondary_availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secondary_availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.</p>
    pub fn set_secondary_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secondary_availability_zone = input;
        self
    }
    /// <p>The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.</p>
    pub fn get_secondary_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.secondary_availability_zone
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn log_delivery_configuration(mut self, input: crate::types::LogDeliveryConfiguration) -> Self {
        self.log_delivery_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn set_log_delivery_configuration(mut self, input: ::std::option::Option<crate::types::LogDeliveryConfiguration>) -> Self {
        self.log_delivery_configuration = input;
        self
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn get_log_delivery_configuration(&self) -> &::std::option::Option<crate::types::LogDeliveryConfiguration> {
        &self.log_delivery_configuration
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.</p>
    pub fn influx_auth_parameters_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.influx_auth_parameters_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.</p>
    pub fn set_influx_auth_parameters_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.influx_auth_parameters_secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.</p>
    pub fn get_influx_auth_parameters_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.influx_auth_parameters_secret_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDbInstanceOutput`](crate::operation::update_db_instance::UpdateDbInstanceOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::update_db_instance::builders::UpdateDbInstanceOutputBuilder::id)
    /// - [`name`](crate::operation::update_db_instance::builders::UpdateDbInstanceOutputBuilder::name)
    /// - [`arn`](crate::operation::update_db_instance::builders::UpdateDbInstanceOutputBuilder::arn)
    /// - [`vpc_subnet_ids`](crate::operation::update_db_instance::builders::UpdateDbInstanceOutputBuilder::vpc_subnet_ids)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_db_instance::UpdateDbInstanceOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_db_instance::UpdateDbInstanceOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building UpdateDbInstanceOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UpdateDbInstanceOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building UpdateDbInstanceOutput",
                )
            })?,
            status: self.status,
            endpoint: self.endpoint,
            db_instance_type: self.db_instance_type,
            db_storage_type: self.db_storage_type,
            allocated_storage: self.allocated_storage,
            deployment_type: self.deployment_type,
            vpc_subnet_ids: self.vpc_subnet_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vpc_subnet_ids",
                    "vpc_subnet_ids was not specified but it is required when building UpdateDbInstanceOutput",
                )
            })?,
            publicly_accessible: self.publicly_accessible,
            vpc_security_group_ids: self.vpc_security_group_ids,
            db_parameter_group_identifier: self.db_parameter_group_identifier,
            availability_zone: self.availability_zone,
            secondary_availability_zone: self.secondary_availability_zone,
            log_delivery_configuration: self.log_delivery_configuration,
            influx_auth_parameters_secret_arn: self.influx_auth_parameters_secret_arn,
            _request_id: self._request_id,
        })
    }
}
