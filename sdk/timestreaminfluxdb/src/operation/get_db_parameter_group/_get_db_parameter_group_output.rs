// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDbParameterGroupOutput {
    /// <p>A service-generated unique identifier.</p>
    pub id: ::std::string::String,
    /// <p>The customer-supplied name that uniquely identifies the DB parameter group when interacting with the Amazon Timestream for InfluxDB API and CLI commands.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the DB parameter group.</p>
    pub arn: ::std::string::String,
    /// <p>A description of the DB parameter group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The parameters that comprise the DB parameter group.</p>
    pub parameters: ::std::option::Option<crate::types::Parameters>,
    _request_id: Option<String>,
}
impl GetDbParameterGroupOutput {
    /// <p>A service-generated unique identifier.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The customer-supplied name that uniquely identifies the DB parameter group when interacting with the Amazon Timestream for InfluxDB API and CLI commands.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the DB parameter group.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>A description of the DB parameter group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The parameters that comprise the DB parameter group.</p>
    pub fn parameters(&self) -> ::std::option::Option<&crate::types::Parameters> {
        self.parameters.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetDbParameterGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDbParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetDbParameterGroupOutput`](crate::operation::get_db_parameter_group::GetDbParameterGroupOutput).
    pub fn builder() -> crate::operation::get_db_parameter_group::builders::GetDbParameterGroupOutputBuilder {
        crate::operation::get_db_parameter_group::builders::GetDbParameterGroupOutputBuilder::default()
    }
}

/// A builder for [`GetDbParameterGroupOutput`](crate::operation::get_db_parameter_group::GetDbParameterGroupOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDbParameterGroupOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<crate::types::Parameters>,
    _request_id: Option<String>,
}
impl GetDbParameterGroupOutputBuilder {
    /// <p>A service-generated unique identifier.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A service-generated unique identifier.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A service-generated unique identifier.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The customer-supplied name that uniquely identifies the DB parameter group when interacting with the Amazon Timestream for InfluxDB API and CLI commands.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer-supplied name that uniquely identifies the DB parameter group when interacting with the Amazon Timestream for InfluxDB API and CLI commands.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The customer-supplied name that uniquely identifies the DB parameter group when interacting with the Amazon Timestream for InfluxDB API and CLI commands.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the DB parameter group.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DB parameter group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DB parameter group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A description of the DB parameter group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the DB parameter group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the DB parameter group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The parameters that comprise the DB parameter group.</p>
    pub fn parameters(mut self, input: crate::types::Parameters) -> Self {
        self.parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters that comprise the DB parameter group.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<crate::types::Parameters>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters that comprise the DB parameter group.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<crate::types::Parameters> {
        &self.parameters
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDbParameterGroupOutput`](crate::operation::get_db_parameter_group::GetDbParameterGroupOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_db_parameter_group::builders::GetDbParameterGroupOutputBuilder::id)
    /// - [`name`](crate::operation::get_db_parameter_group::builders::GetDbParameterGroupOutputBuilder::name)
    /// - [`arn`](crate::operation::get_db_parameter_group::builders::GetDbParameterGroupOutputBuilder::arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_db_parameter_group::GetDbParameterGroupOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_db_parameter_group::GetDbParameterGroupOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetDbParameterGroupOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetDbParameterGroupOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetDbParameterGroupOutput",
                )
            })?,
            description: self.description,
            parameters: self.parameters,
            _request_id: self._request_id,
        })
    }
}
