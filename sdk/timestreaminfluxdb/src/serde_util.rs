// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn create_db_instance_output_output_correct_errors(
    mut builder: crate::operation::create_db_instance::builders::CreateDbInstanceOutputBuilder,
) -> crate::operation::create_db_instance::builders::CreateDbInstanceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.vpc_subnet_ids.is_none() {
        builder.vpc_subnet_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn create_db_parameter_group_output_output_correct_errors(
    mut builder: crate::operation::create_db_parameter_group::builders::CreateDbParameterGroupOutputBuilder,
) -> crate::operation::create_db_parameter_group::builders::CreateDbParameterGroupOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_db_instance_output_output_correct_errors(
    mut builder: crate::operation::delete_db_instance::builders::DeleteDbInstanceOutputBuilder,
) -> crate::operation::delete_db_instance::builders::DeleteDbInstanceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.vpc_subnet_ids.is_none() {
        builder.vpc_subnet_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn get_db_cluster_output_output_correct_errors(
    mut builder: crate::operation::get_db_cluster::builders::GetDbClusterOutputBuilder,
) -> crate::operation::get_db_cluster::builders::GetDbClusterOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_db_instance_output_output_correct_errors(
    mut builder: crate::operation::get_db_instance::builders::GetDbInstanceOutputBuilder,
) -> crate::operation::get_db_instance::builders::GetDbInstanceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.vpc_subnet_ids.is_none() {
        builder.vpc_subnet_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn get_db_parameter_group_output_output_correct_errors(
    mut builder: crate::operation::get_db_parameter_group::builders::GetDbParameterGroupOutputBuilder,
) -> crate::operation::get_db_parameter_group::builders::GetDbParameterGroupOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_db_clusters_output_output_correct_errors(
    mut builder: crate::operation::list_db_clusters::builders::ListDbClustersOutputBuilder,
) -> crate::operation::list_db_clusters::builders::ListDbClustersOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_db_instances_output_output_correct_errors(
    mut builder: crate::operation::list_db_instances::builders::ListDbInstancesOutputBuilder,
) -> crate::operation::list_db_instances::builders::ListDbInstancesOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_db_instances_for_cluster_output_output_correct_errors(
    mut builder: crate::operation::list_db_instances_for_cluster::builders::ListDbInstancesForClusterOutputBuilder,
) -> crate::operation::list_db_instances_for_cluster::builders::ListDbInstancesForClusterOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_db_parameter_groups_output_output_correct_errors(
    mut builder: crate::operation::list_db_parameter_groups::builders::ListDbParameterGroupsOutputBuilder,
) -> crate::operation::list_db_parameter_groups::builders::ListDbParameterGroupsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn update_db_instance_output_output_correct_errors(
    mut builder: crate::operation::update_db_instance::builders::UpdateDbInstanceOutputBuilder,
) -> crate::operation::update_db_instance::builders::UpdateDbInstanceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.vpc_subnet_ids.is_none() {
        builder.vpc_subnet_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn log_delivery_configuration_correct_errors(
    mut builder: crate::types::builders::LogDeliveryConfigurationBuilder,
) -> crate::types::builders::LogDeliveryConfigurationBuilder {
    if builder.s3_configuration.is_none() {
        builder.s3_configuration = {
            let builder = crate::types::builders::S3ConfigurationBuilder::default();
            crate::serde_util::s3_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn db_cluster_summary_correct_errors(
    mut builder: crate::types::builders::DbClusterSummaryBuilder,
) -> crate::types::builders::DbClusterSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn db_instance_for_cluster_summary_correct_errors(
    mut builder: crate::types::builders::DbInstanceForClusterSummaryBuilder,
) -> crate::types::builders::DbInstanceForClusterSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn db_instance_summary_correct_errors(
    mut builder: crate::types::builders::DbInstanceSummaryBuilder,
) -> crate::types::builders::DbInstanceSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn db_parameter_group_summary_correct_errors(
    mut builder: crate::types::builders::DbParameterGroupSummaryBuilder,
) -> crate::types::builders::DbParameterGroupSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn influx_dbv3_enterprise_parameters_correct_errors(
    mut builder: crate::types::builders::InfluxDBv3EnterpriseParametersBuilder,
) -> crate::types::builders::InfluxDBv3EnterpriseParametersBuilder {
    if builder.ingest_query_instances.is_none() {
        builder.ingest_query_instances = Some(Default::default())
    }
    if builder.query_only_instances.is_none() {
        builder.query_only_instances = Some(Default::default())
    }
    if builder.dedicated_compactor.is_none() {
        builder.dedicated_compactor = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_configuration_correct_errors(
    mut builder: crate::types::builders::S3ConfigurationBuilder,
) -> crate::types::builders::S3ConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn duration_correct_errors(mut builder: crate::types::builders::DurationBuilder) -> crate::types::builders::DurationBuilder {
    if builder.duration_type.is_none() {
        builder.duration_type = "no value was set".parse::<crate::types::DurationType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
