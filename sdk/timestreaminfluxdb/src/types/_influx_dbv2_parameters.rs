// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>All the customer-modifiable InfluxDB v2 parameters in Timestream for InfluxDB.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InfluxDBv2Parameters {
    /// <p>Include option to show detailed logs for Flux queries.</p>
    /// <p>Default: false</p>
    pub flux_log_enabled: ::std::option::Option<bool>,
    /// <p>Log output level. InfluxDB outputs log entries with severity levels greater than or equal to the level specified.</p>
    /// <p>Default: info</p>
    pub log_level: ::std::option::Option<crate::types::LogLevel>,
    /// <p>Disable the task scheduler. If problematic tasks prevent InfluxDB from starting, use this option to start InfluxDB without scheduling or executing tasks.</p>
    /// <p>Default: false</p>
    pub no_tasks: ::std::option::Option<bool>,
    /// <p>Number of queries allowed to execute concurrently. Setting to 0 allows an unlimited number of concurrent queries.</p>
    /// <p>Default: 0</p>
    pub query_concurrency: ::std::option::Option<i32>,
    /// <p>Maximum number of queries allowed in execution queue. When queue limit is reached, new queries are rejected. Setting to 0 allows an unlimited number of queries in the queue.</p>
    /// <p>Default: 0</p>
    pub query_queue_size: ::std::option::Option<i32>,
    /// <p>Enable tracing in InfluxDB and specifies the tracing type. Tracing is disabled by default.</p>
    pub tracing_type: ::std::option::Option<crate::types::TracingType>,
    /// <p>Disable the HTTP /metrics endpoint which exposes <a href="https://docs.influxdata.com/influxdb/v2/reference/internals/metrics/">internal InfluxDB metrics</a>.</p>
    /// <p>Default: false</p>
    pub metrics_disabled: ::std::option::Option<bool>,
}
impl InfluxDBv2Parameters {
    /// <p>Include option to show detailed logs for Flux queries.</p>
    /// <p>Default: false</p>
    pub fn flux_log_enabled(&self) -> ::std::option::Option<bool> {
        self.flux_log_enabled
    }
    /// <p>Log output level. InfluxDB outputs log entries with severity levels greater than or equal to the level specified.</p>
    /// <p>Default: info</p>
    pub fn log_level(&self) -> ::std::option::Option<&crate::types::LogLevel> {
        self.log_level.as_ref()
    }
    /// <p>Disable the task scheduler. If problematic tasks prevent InfluxDB from starting, use this option to start InfluxDB without scheduling or executing tasks.</p>
    /// <p>Default: false</p>
    pub fn no_tasks(&self) -> ::std::option::Option<bool> {
        self.no_tasks
    }
    /// <p>Number of queries allowed to execute concurrently. Setting to 0 allows an unlimited number of concurrent queries.</p>
    /// <p>Default: 0</p>
    pub fn query_concurrency(&self) -> ::std::option::Option<i32> {
        self.query_concurrency
    }
    /// <p>Maximum number of queries allowed in execution queue. When queue limit is reached, new queries are rejected. Setting to 0 allows an unlimited number of queries in the queue.</p>
    /// <p>Default: 0</p>
    pub fn query_queue_size(&self) -> ::std::option::Option<i32> {
        self.query_queue_size
    }
    /// <p>Enable tracing in InfluxDB and specifies the tracing type. Tracing is disabled by default.</p>
    pub fn tracing_type(&self) -> ::std::option::Option<&crate::types::TracingType> {
        self.tracing_type.as_ref()
    }
    /// <p>Disable the HTTP /metrics endpoint which exposes <a href="https://docs.influxdata.com/influxdb/v2/reference/internals/metrics/">internal InfluxDB metrics</a>.</p>
    /// <p>Default: false</p>
    pub fn metrics_disabled(&self) -> ::std::option::Option<bool> {
        self.metrics_disabled
    }
}
impl InfluxDBv2Parameters {
    /// Creates a new builder-style object to manufacture [`InfluxDBv2Parameters`](crate::types::InfluxDBv2Parameters).
    pub fn builder() -> crate::types::builders::InfluxDBv2ParametersBuilder {
        crate::types::builders::InfluxDBv2ParametersBuilder::default()
    }
}

/// A builder for [`InfluxDBv2Parameters`](crate::types::InfluxDBv2Parameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InfluxDBv2ParametersBuilder {
    pub(crate) flux_log_enabled: ::std::option::Option<bool>,
    pub(crate) log_level: ::std::option::Option<crate::types::LogLevel>,
    pub(crate) no_tasks: ::std::option::Option<bool>,
    pub(crate) query_concurrency: ::std::option::Option<i32>,
    pub(crate) query_queue_size: ::std::option::Option<i32>,
    pub(crate) tracing_type: ::std::option::Option<crate::types::TracingType>,
    pub(crate) metrics_disabled: ::std::option::Option<bool>,
}
impl InfluxDBv2ParametersBuilder {
    /// <p>Include option to show detailed logs for Flux queries.</p>
    /// <p>Default: false</p>
    pub fn flux_log_enabled(mut self, input: bool) -> Self {
        self.flux_log_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include option to show detailed logs for Flux queries.</p>
    /// <p>Default: false</p>
    pub fn set_flux_log_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.flux_log_enabled = input;
        self
    }
    /// <p>Include option to show detailed logs for Flux queries.</p>
    /// <p>Default: false</p>
    pub fn get_flux_log_enabled(&self) -> &::std::option::Option<bool> {
        &self.flux_log_enabled
    }
    /// <p>Log output level. InfluxDB outputs log entries with severity levels greater than or equal to the level specified.</p>
    /// <p>Default: info</p>
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Log output level. InfluxDB outputs log entries with severity levels greater than or equal to the level specified.</p>
    /// <p>Default: info</p>
    pub fn set_log_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// <p>Log output level. InfluxDB outputs log entries with severity levels greater than or equal to the level specified.</p>
    /// <p>Default: info</p>
    pub fn get_log_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        &self.log_level
    }
    /// <p>Disable the task scheduler. If problematic tasks prevent InfluxDB from starting, use this option to start InfluxDB without scheduling or executing tasks.</p>
    /// <p>Default: false</p>
    pub fn no_tasks(mut self, input: bool) -> Self {
        self.no_tasks = ::std::option::Option::Some(input);
        self
    }
    /// <p>Disable the task scheduler. If problematic tasks prevent InfluxDB from starting, use this option to start InfluxDB without scheduling or executing tasks.</p>
    /// <p>Default: false</p>
    pub fn set_no_tasks(mut self, input: ::std::option::Option<bool>) -> Self {
        self.no_tasks = input;
        self
    }
    /// <p>Disable the task scheduler. If problematic tasks prevent InfluxDB from starting, use this option to start InfluxDB without scheduling or executing tasks.</p>
    /// <p>Default: false</p>
    pub fn get_no_tasks(&self) -> &::std::option::Option<bool> {
        &self.no_tasks
    }
    /// <p>Number of queries allowed to execute concurrently. Setting to 0 allows an unlimited number of concurrent queries.</p>
    /// <p>Default: 0</p>
    pub fn query_concurrency(mut self, input: i32) -> Self {
        self.query_concurrency = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of queries allowed to execute concurrently. Setting to 0 allows an unlimited number of concurrent queries.</p>
    /// <p>Default: 0</p>
    pub fn set_query_concurrency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.query_concurrency = input;
        self
    }
    /// <p>Number of queries allowed to execute concurrently. Setting to 0 allows an unlimited number of concurrent queries.</p>
    /// <p>Default: 0</p>
    pub fn get_query_concurrency(&self) -> &::std::option::Option<i32> {
        &self.query_concurrency
    }
    /// <p>Maximum number of queries allowed in execution queue. When queue limit is reached, new queries are rejected. Setting to 0 allows an unlimited number of queries in the queue.</p>
    /// <p>Default: 0</p>
    pub fn query_queue_size(mut self, input: i32) -> Self {
        self.query_queue_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of queries allowed in execution queue. When queue limit is reached, new queries are rejected. Setting to 0 allows an unlimited number of queries in the queue.</p>
    /// <p>Default: 0</p>
    pub fn set_query_queue_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.query_queue_size = input;
        self
    }
    /// <p>Maximum number of queries allowed in execution queue. When queue limit is reached, new queries are rejected. Setting to 0 allows an unlimited number of queries in the queue.</p>
    /// <p>Default: 0</p>
    pub fn get_query_queue_size(&self) -> &::std::option::Option<i32> {
        &self.query_queue_size
    }
    /// <p>Enable tracing in InfluxDB and specifies the tracing type. Tracing is disabled by default.</p>
    pub fn tracing_type(mut self, input: crate::types::TracingType) -> Self {
        self.tracing_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enable tracing in InfluxDB and specifies the tracing type. Tracing is disabled by default.</p>
    pub fn set_tracing_type(mut self, input: ::std::option::Option<crate::types::TracingType>) -> Self {
        self.tracing_type = input;
        self
    }
    /// <p>Enable tracing in InfluxDB and specifies the tracing type. Tracing is disabled by default.</p>
    pub fn get_tracing_type(&self) -> &::std::option::Option<crate::types::TracingType> {
        &self.tracing_type
    }
    /// <p>Disable the HTTP /metrics endpoint which exposes <a href="https://docs.influxdata.com/influxdb/v2/reference/internals/metrics/">internal InfluxDB metrics</a>.</p>
    /// <p>Default: false</p>
    pub fn metrics_disabled(mut self, input: bool) -> Self {
        self.metrics_disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Disable the HTTP /metrics endpoint which exposes <a href="https://docs.influxdata.com/influxdb/v2/reference/internals/metrics/">internal InfluxDB metrics</a>.</p>
    /// <p>Default: false</p>
    pub fn set_metrics_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.metrics_disabled = input;
        self
    }
    /// <p>Disable the HTTP /metrics endpoint which exposes <a href="https://docs.influxdata.com/influxdb/v2/reference/internals/metrics/">internal InfluxDB metrics</a>.</p>
    /// <p>Default: false</p>
    pub fn get_metrics_disabled(&self) -> &::std::option::Option<bool> {
        &self.metrics_disabled
    }
    /// Consumes the builder and constructs a [`InfluxDBv2Parameters`](crate::types::InfluxDBv2Parameters).
    pub fn build(self) -> crate::types::InfluxDBv2Parameters {
        crate::types::InfluxDBv2Parameters {
            flux_log_enabled: self.flux_log_enabled,
            log_level: self.log_level,
            no_tasks: self.no_tasks,
            query_concurrency: self.query_concurrency,
            query_queue_size: self.query_queue_size,
            tracing_type: self.tracing_type,
            metrics_disabled: self.metrics_disabled,
        }
    }
}
