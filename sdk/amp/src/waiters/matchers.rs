// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"anomalyDetector.status.statusCode","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_describe_anomaly_detector_354d204390097e66b(
    _result: ::std::result::Result<
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput,
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput,
    ) -> ::std::option::Option<&'a crate::types::AnomalyDetectorStatusCode> {
        let _fld_1 = _output.anomaly_detector.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"anomalyDetector.status.statusCode","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_describe_anomaly_detector_bc686692dedef0689(
    _result: ::std::result::Result<
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput,
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput,
    ) -> ::std::option::Option<&'a crate::types::AnomalyDetectorStatusCode> {
        let _fld_1 = _output.anomaly_detector.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"anomalyDetector.status.statusCode","expected":"UPDATING","comparator":"stringEquals"}}
pub(crate) fn match_describe_anomaly_detector_8a51f991d02437c3c(
    _result: ::std::result::Result<
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput,
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput,
    ) -> ::std::option::Option<&'a crate::types::AnomalyDetectorStatusCode> {
        let _fld_1 = _output.anomaly_detector.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_anomaly_detector_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput,
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"anomalyDetector.status.statusCode","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_describe_anomaly_detector_da216b427427e376f(
    _result: ::std::result::Result<
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput,
        &crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput,
    ) -> ::std::option::Option<&'a crate::types::AnomalyDetectorStatusCode> {
        let _fld_1 = _output.anomaly_detector.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"scraper.status.statusCode","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_describe_scraper_d63d66a520d268282(
    _result: ::std::result::Result<
        &crate::operation::describe_scraper::DescribeScraperOutput,
        &crate::operation::describe_scraper::DescribeScraperError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_scraper::DescribeScraperOutput,
    ) -> ::std::option::Option<&'a crate::types::ScraperStatusCode> {
        let _fld_1 = _output.scraper.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"scraper.status.statusCode","expected":"CREATION_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_scraper_d131ca8b97ceec9e9(
    _result: ::std::result::Result<
        &crate::operation::describe_scraper::DescribeScraperOutput,
        &crate::operation::describe_scraper::DescribeScraperError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_scraper::DescribeScraperOutput,
    ) -> ::std::option::Option<&'a crate::types::ScraperStatusCode> {
        let _fld_1 = _output.scraper.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATION_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_scraper_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_scraper::DescribeScraperOutput,
        &crate::operation::describe_scraper::DescribeScraperError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"scraper.status.statusCode","expected":"DELETION_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_scraper_6b41349a45e7fd67c(
    _result: ::std::result::Result<
        &crate::operation::describe_scraper::DescribeScraperOutput,
        &crate::operation::describe_scraper::DescribeScraperError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_scraper::DescribeScraperOutput,
    ) -> ::std::option::Option<&'a crate::types::ScraperStatusCode> {
        let _fld_1 = _output.scraper.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETION_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"workspace.status.statusCode","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_describe_workspace_96eabb4fd7c01a9d3(
    _result: ::std::result::Result<
        &crate::operation::describe_workspace::DescribeWorkspaceOutput,
        &crate::operation::describe_workspace::DescribeWorkspaceError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_workspace::DescribeWorkspaceOutput,
    ) -> ::std::option::Option<&'a crate::types::WorkspaceStatusCode> {
        let _fld_1 = _output.workspace.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"workspace.status.statusCode","expected":"UPDATING","comparator":"stringEquals"}}
pub(crate) fn match_describe_workspace_15237b1b06c21572e(
    _result: ::std::result::Result<
        &crate::operation::describe_workspace::DescribeWorkspaceOutput,
        &crate::operation::describe_workspace::DescribeWorkspaceError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_workspace::DescribeWorkspaceOutput,
    ) -> ::std::option::Option<&'a crate::types::WorkspaceStatusCode> {
        let _fld_1 = _output.workspace.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"workspace.status.statusCode","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_describe_workspace_c4b2d2cc35f4c295d(
    _result: ::std::result::Result<
        &crate::operation::describe_workspace::DescribeWorkspaceOutput,
        &crate::operation::describe_workspace::DescribeWorkspaceError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_workspace::DescribeWorkspaceOutput,
    ) -> ::std::option::Option<&'a crate::types::WorkspaceStatusCode> {
        let _fld_1 = _output.workspace.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_workspace_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_workspace::DescribeWorkspaceOutput,
        &crate::operation::describe_workspace::DescribeWorkspaceError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"workspace.status.statusCode","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_describe_workspace_204b4c50bb9d49236(
    _result: ::std::result::Result<
        &crate::operation::describe_workspace::DescribeWorkspaceOutput,
        &crate::operation::describe_workspace::DescribeWorkspaceError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_workspace::DescribeWorkspaceOutput,
    ) -> ::std::option::Option<&'a crate::types::WorkspaceStatusCode> {
        let _fld_1 = _output.workspace.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = &_fld_2.status_code;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
