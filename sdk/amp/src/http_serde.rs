// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_create_workspace_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_1: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_1.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_create_workspace_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_2: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_2.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_2 = var_2;
        Ok(var_2.pop())
    }
}

pub fn deser_header_delete_workspace_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_3: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_3.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_3 = var_3;
        Ok(var_3.pop())
    }
}

pub fn deser_header_delete_workspace_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_4: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_4.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_4 = var_4;
        Ok(var_4.pop())
    }
}

pub fn deser_header_describe_workspace_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_5: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_5.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_5 = var_5;
        Ok(var_5.pop())
    }
}

pub fn deser_header_describe_workspace_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_6: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_6.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_6 = var_6;
        Ok(var_6.pop())
    }
}

pub fn deser_header_list_workspaces_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_7: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_7.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_7 = var_7;
        Ok(var_7.pop())
    }
}

pub fn deser_header_list_workspaces_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_8: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_8.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_8 = var_8;
        Ok(var_8.pop())
    }
}

pub fn deser_header_update_workspace_alias_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_9: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_9.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_9 = var_9;
        Ok(var_9.pop())
    }
}

pub fn deser_header_update_workspace_alias_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_10: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_10.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_10 = var_10;
        Ok(var_10.pop())
    }
}
