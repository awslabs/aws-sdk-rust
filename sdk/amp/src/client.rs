// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Prometheus Service
///
/// Client for invoking operations on Amazon Prometheus Service. Each operation on Amazon Prometheus Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_amp::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_amp::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_amp::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateAlertManagerDefinition`](crate::client::fluent_builders::CreateAlertManagerDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::CreateAlertManagerDefinition::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::CreateAlertManagerDefinition::set_workspace_id): The ID of the workspace in which to create the alert manager definition.
    ///   - [`data(Blob)`](crate::client::fluent_builders::CreateAlertManagerDefinition::data) / [`set_data(Option<Blob>)`](crate::client::fluent_builders::CreateAlertManagerDefinition::set_data): The alert manager definition data.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateAlertManagerDefinition::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateAlertManagerDefinition::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`CreateAlertManagerDefinitionOutput`](crate::output::CreateAlertManagerDefinitionOutput) with field(s):
    ///   - [`status(Option<AlertManagerDefinitionStatus>)`](crate::output::CreateAlertManagerDefinitionOutput::status): The status of alert manager definition.
    /// - On failure, responds with [`SdkError<CreateAlertManagerDefinitionError>`](crate::error::CreateAlertManagerDefinitionError)
    pub fn create_alert_manager_definition(
        &self,
    ) -> crate::client::fluent_builders::CreateAlertManagerDefinition {
        crate::client::fluent_builders::CreateAlertManagerDefinition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLoggingConfiguration`](crate::client::fluent_builders::CreateLoggingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::CreateLoggingConfiguration::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::CreateLoggingConfiguration::set_workspace_id): The ID of the workspace to vend logs to.
    ///   - [`log_group_arn(impl Into<String>)`](crate::client::fluent_builders::CreateLoggingConfiguration::log_group_arn) / [`set_log_group_arn(Option<String>)`](crate::client::fluent_builders::CreateLoggingConfiguration::set_log_group_arn): The ARN of the CW log group to which the vended log data will be published.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateLoggingConfiguration::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateLoggingConfiguration::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`CreateLoggingConfigurationOutput`](crate::output::CreateLoggingConfigurationOutput) with field(s):
    ///   - [`status(Option<LoggingConfigurationStatus>)`](crate::output::CreateLoggingConfigurationOutput::status): The status of the logging configuration.
    /// - On failure, responds with [`SdkError<CreateLoggingConfigurationError>`](crate::error::CreateLoggingConfigurationError)
    pub fn create_logging_configuration(
        &self,
    ) -> crate::client::fluent_builders::CreateLoggingConfiguration {
        crate::client::fluent_builders::CreateLoggingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRuleGroupsNamespace`](crate::client::fluent_builders::CreateRuleGroupsNamespace) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::set_workspace_id): The ID of the workspace in which to create the rule group namespace.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::set_name): The rule groups namespace name.
    ///   - [`data(Blob)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::data) / [`set_data(Option<Blob>)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::set_data): The namespace data that define the rule groups.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateRuleGroupsNamespace::set_tags): Optional, user-provided tags for this rule groups namespace.
    /// - On success, responds with [`CreateRuleGroupsNamespaceOutput`](crate::output::CreateRuleGroupsNamespaceOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::CreateRuleGroupsNamespaceOutput::name): The rule groups namespace name.
    ///   - [`arn(Option<String>)`](crate::output::CreateRuleGroupsNamespaceOutput::arn): The Amazon Resource Name (ARN) of this rule groups namespace.
    ///   - [`status(Option<RuleGroupsNamespaceStatus>)`](crate::output::CreateRuleGroupsNamespaceOutput::status): The status of rule groups namespace.
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::CreateRuleGroupsNamespaceOutput::tags): The tags of this rule groups namespace.
    /// - On failure, responds with [`SdkError<CreateRuleGroupsNamespaceError>`](crate::error::CreateRuleGroupsNamespaceError)
    pub fn create_rule_groups_namespace(
        &self,
    ) -> crate::client::fluent_builders::CreateRuleGroupsNamespace {
        crate::client::fluent_builders::CreateRuleGroupsNamespace::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWorkspace`](crate::client::fluent_builders::CreateWorkspace) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`alias(impl Into<String>)`](crate::client::fluent_builders::CreateWorkspace::alias) / [`set_alias(Option<String>)`](crate::client::fluent_builders::CreateWorkspace::set_alias): An optional user-assigned alias for this workspace. This alias is for user reference and does not need to be unique.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateWorkspace::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateWorkspace::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateWorkspace::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateWorkspace::set_tags): Optional, user-provided tags for this workspace.
    /// - On success, responds with [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput) with field(s):
    ///   - [`workspace_id(Option<String>)`](crate::output::CreateWorkspaceOutput::workspace_id): The generated ID of the workspace that was just created.
    ///   - [`arn(Option<String>)`](crate::output::CreateWorkspaceOutput::arn): The ARN of the workspace that was just created.
    ///   - [`status(Option<WorkspaceStatus>)`](crate::output::CreateWorkspaceOutput::status): The status of the workspace that was just created (usually CREATING).
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::CreateWorkspaceOutput::tags): The tags of this workspace.
    /// - On failure, responds with [`SdkError<CreateWorkspaceError>`](crate::error::CreateWorkspaceError)
    pub fn create_workspace(&self) -> crate::client::fluent_builders::CreateWorkspace {
        crate::client::fluent_builders::CreateWorkspace::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAlertManagerDefinition`](crate::client::fluent_builders::DeleteAlertManagerDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAlertManagerDefinition::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::DeleteAlertManagerDefinition::set_workspace_id): The ID of the workspace in which to delete the alert manager definition.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::DeleteAlertManagerDefinition::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::DeleteAlertManagerDefinition::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`DeleteAlertManagerDefinitionOutput`](crate::output::DeleteAlertManagerDefinitionOutput)

    /// - On failure, responds with [`SdkError<DeleteAlertManagerDefinitionError>`](crate::error::DeleteAlertManagerDefinitionError)
    pub fn delete_alert_manager_definition(
        &self,
    ) -> crate::client::fluent_builders::DeleteAlertManagerDefinition {
        crate::client::fluent_builders::DeleteAlertManagerDefinition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLoggingConfiguration`](crate::client::fluent_builders::DeleteLoggingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::DeleteLoggingConfiguration::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::DeleteLoggingConfiguration::set_workspace_id): The ID of the workspace to vend logs to.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::DeleteLoggingConfiguration::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::DeleteLoggingConfiguration::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`DeleteLoggingConfigurationOutput`](crate::output::DeleteLoggingConfigurationOutput)

    /// - On failure, responds with [`SdkError<DeleteLoggingConfigurationError>`](crate::error::DeleteLoggingConfigurationError)
    pub fn delete_logging_configuration(
        &self,
    ) -> crate::client::fluent_builders::DeleteLoggingConfiguration {
        crate::client::fluent_builders::DeleteLoggingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRuleGroupsNamespace`](crate::client::fluent_builders::DeleteRuleGroupsNamespace) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::DeleteRuleGroupsNamespace::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::DeleteRuleGroupsNamespace::set_workspace_id): The ID of the workspace to delete rule group definition.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteRuleGroupsNamespace::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteRuleGroupsNamespace::set_name): The rule groups namespace name.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::DeleteRuleGroupsNamespace::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::DeleteRuleGroupsNamespace::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`DeleteRuleGroupsNamespaceOutput`](crate::output::DeleteRuleGroupsNamespaceOutput)

    /// - On failure, responds with [`SdkError<DeleteRuleGroupsNamespaceError>`](crate::error::DeleteRuleGroupsNamespaceError)
    pub fn delete_rule_groups_namespace(
        &self,
    ) -> crate::client::fluent_builders::DeleteRuleGroupsNamespace {
        crate::client::fluent_builders::DeleteRuleGroupsNamespace::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWorkspace`](crate::client::fluent_builders::DeleteWorkspace) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkspace::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::DeleteWorkspace::set_workspace_id): The ID of the workspace to delete.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkspace::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::DeleteWorkspace::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput)

    /// - On failure, responds with [`SdkError<DeleteWorkspaceError>`](crate::error::DeleteWorkspaceError)
    pub fn delete_workspace(&self) -> crate::client::fluent_builders::DeleteWorkspace {
        crate::client::fluent_builders::DeleteWorkspace::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeAlertManagerDefinition`](crate::client::fluent_builders::DescribeAlertManagerDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::DescribeAlertManagerDefinition::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::DescribeAlertManagerDefinition::set_workspace_id): The ID of the workspace to describe.
    /// - On success, responds with [`DescribeAlertManagerDefinitionOutput`](crate::output::DescribeAlertManagerDefinitionOutput) with field(s):
    ///   - [`alert_manager_definition(Option<AlertManagerDefinitionDescription>)`](crate::output::DescribeAlertManagerDefinitionOutput::alert_manager_definition): The properties of the selected workspace's alert manager definition.
    /// - On failure, responds with [`SdkError<DescribeAlertManagerDefinitionError>`](crate::error::DescribeAlertManagerDefinitionError)
    pub fn describe_alert_manager_definition(
        &self,
    ) -> crate::client::fluent_builders::DescribeAlertManagerDefinition {
        crate::client::fluent_builders::DescribeAlertManagerDefinition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLoggingConfiguration`](crate::client::fluent_builders::DescribeLoggingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::DescribeLoggingConfiguration::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::DescribeLoggingConfiguration::set_workspace_id): The ID of the workspace to vend logs to.
    /// - On success, responds with [`DescribeLoggingConfigurationOutput`](crate::output::DescribeLoggingConfigurationOutput) with field(s):
    ///   - [`logging_configuration(Option<LoggingConfigurationMetadata>)`](crate::output::DescribeLoggingConfigurationOutput::logging_configuration): Metadata object containing information about the logging configuration of a workspace.
    /// - On failure, responds with [`SdkError<DescribeLoggingConfigurationError>`](crate::error::DescribeLoggingConfigurationError)
    pub fn describe_logging_configuration(
        &self,
    ) -> crate::client::fluent_builders::DescribeLoggingConfiguration {
        crate::client::fluent_builders::DescribeLoggingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeRuleGroupsNamespace`](crate::client::fluent_builders::DescribeRuleGroupsNamespace) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::DescribeRuleGroupsNamespace::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::DescribeRuleGroupsNamespace::set_workspace_id): The ID of the workspace to describe.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DescribeRuleGroupsNamespace::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DescribeRuleGroupsNamespace::set_name): The rule groups namespace.
    /// - On success, responds with [`DescribeRuleGroupsNamespaceOutput`](crate::output::DescribeRuleGroupsNamespaceOutput) with field(s):
    ///   - [`rule_groups_namespace(Option<RuleGroupsNamespaceDescription>)`](crate::output::DescribeRuleGroupsNamespaceOutput::rule_groups_namespace): The selected rule groups namespace.
    /// - On failure, responds with [`SdkError<DescribeRuleGroupsNamespaceError>`](crate::error::DescribeRuleGroupsNamespaceError)
    pub fn describe_rule_groups_namespace(
        &self,
    ) -> crate::client::fluent_builders::DescribeRuleGroupsNamespace {
        crate::client::fluent_builders::DescribeRuleGroupsNamespace::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeWorkspace`](crate::client::fluent_builders::DescribeWorkspace) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::DescribeWorkspace::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::DescribeWorkspace::set_workspace_id): The ID of the workspace to describe.
    /// - On success, responds with [`DescribeWorkspaceOutput`](crate::output::DescribeWorkspaceOutput) with field(s):
    ///   - [`workspace(Option<WorkspaceDescription>)`](crate::output::DescribeWorkspaceOutput::workspace): The properties of the selected workspace.
    /// - On failure, responds with [`SdkError<DescribeWorkspaceError>`](crate::error::DescribeWorkspaceError)
    pub fn describe_workspace(&self) -> crate::client::fluent_builders::DescribeWorkspace {
        crate::client::fluent_builders::DescribeWorkspace::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRuleGroupsNamespaces`](crate::client::fluent_builders::ListRuleGroupsNamespaces) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRuleGroupsNamespaces::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::ListRuleGroupsNamespaces::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::ListRuleGroupsNamespaces::set_workspace_id): The ID of the workspace.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListRuleGroupsNamespaces::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListRuleGroupsNamespaces::set_name): Optional filter for rule groups namespace name. Only the rule groups namespace that begin with this value will be returned.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListRuleGroupsNamespaces::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListRuleGroupsNamespaces::set_next_token): Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListRuleGroupsNamespaces request.
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRuleGroupsNamespaces::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRuleGroupsNamespaces::set_max_results): Maximum results to return in response (default=100, maximum=1000).
    /// - On success, responds with [`ListRuleGroupsNamespacesOutput`](crate::output::ListRuleGroupsNamespacesOutput) with field(s):
    ///   - [`rule_groups_namespaces(Option<Vec<RuleGroupsNamespaceSummary>>)`](crate::output::ListRuleGroupsNamespacesOutput::rule_groups_namespaces): The list of the selected rule groups namespaces.
    ///   - [`next_token(Option<String>)`](crate::output::ListRuleGroupsNamespacesOutput::next_token): Pagination token to use when requesting the next page in this list.
    /// - On failure, responds with [`SdkError<ListRuleGroupsNamespacesError>`](crate::error::ListRuleGroupsNamespacesError)
    pub fn list_rule_groups_namespaces(
        &self,
    ) -> crate::client::fluent_builders::ListRuleGroupsNamespaces {
        crate::client::fluent_builders::ListRuleGroupsNamespaces::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): The ARN of the resource.
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): The list of tags assigned to the resource.
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWorkspaces`](crate::client::fluent_builders::ListWorkspaces) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkspaces::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkspaces::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWorkspaces::set_next_token): Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListWorkspaces request.
    ///   - [`alias(impl Into<String>)`](crate::client::fluent_builders::ListWorkspaces::alias) / [`set_alias(Option<String>)`](crate::client::fluent_builders::ListWorkspaces::set_alias): Optional filter for workspace alias. Only the workspaces with aliases that begin with this value will be returned.
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWorkspaces::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWorkspaces::set_max_results): Maximum results to return in response (default=100, maximum=1000).
    /// - On success, responds with [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput) with field(s):
    ///   - [`workspaces(Option<Vec<WorkspaceSummary>>)`](crate::output::ListWorkspacesOutput::workspaces): The list of existing workspaces, including those undergoing creation or deletion.
    ///   - [`next_token(Option<String>)`](crate::output::ListWorkspacesOutput::next_token): Pagination token to use when requesting the next page in this list.
    /// - On failure, responds with [`SdkError<ListWorkspacesError>`](crate::error::ListWorkspacesError)
    pub fn list_workspaces(&self) -> crate::client::fluent_builders::ListWorkspaces {
        crate::client::fluent_builders::ListWorkspaces::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutAlertManagerDefinition`](crate::client::fluent_builders::PutAlertManagerDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::PutAlertManagerDefinition::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::PutAlertManagerDefinition::set_workspace_id): The ID of the workspace in which to update the alert manager definition.
    ///   - [`data(Blob)`](crate::client::fluent_builders::PutAlertManagerDefinition::data) / [`set_data(Option<Blob>)`](crate::client::fluent_builders::PutAlertManagerDefinition::set_data): The alert manager definition data.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::PutAlertManagerDefinition::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::PutAlertManagerDefinition::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`PutAlertManagerDefinitionOutput`](crate::output::PutAlertManagerDefinitionOutput) with field(s):
    ///   - [`status(Option<AlertManagerDefinitionStatus>)`](crate::output::PutAlertManagerDefinitionOutput::status): The status of alert manager definition.
    /// - On failure, responds with [`SdkError<PutAlertManagerDefinitionError>`](crate::error::PutAlertManagerDefinitionError)
    pub fn put_alert_manager_definition(
        &self,
    ) -> crate::client::fluent_builders::PutAlertManagerDefinition {
        crate::client::fluent_builders::PutAlertManagerDefinition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutRuleGroupsNamespace`](crate::client::fluent_builders::PutRuleGroupsNamespace) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::PutRuleGroupsNamespace::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::PutRuleGroupsNamespace::set_workspace_id): The ID of the workspace in which to update the rule group namespace.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::PutRuleGroupsNamespace::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::PutRuleGroupsNamespace::set_name): The rule groups namespace name.
    ///   - [`data(Blob)`](crate::client::fluent_builders::PutRuleGroupsNamespace::data) / [`set_data(Option<Blob>)`](crate::client::fluent_builders::PutRuleGroupsNamespace::set_data): The namespace data that define the rule groups.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::PutRuleGroupsNamespace::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::PutRuleGroupsNamespace::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`PutRuleGroupsNamespaceOutput`](crate::output::PutRuleGroupsNamespaceOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::PutRuleGroupsNamespaceOutput::name): The rule groups namespace name.
    ///   - [`arn(Option<String>)`](crate::output::PutRuleGroupsNamespaceOutput::arn): The Amazon Resource Name (ARN) of this rule groups namespace.
    ///   - [`status(Option<RuleGroupsNamespaceStatus>)`](crate::output::PutRuleGroupsNamespaceOutput::status): The status of rule groups namespace.
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::PutRuleGroupsNamespaceOutput::tags): The tags of this rule groups namespace.
    /// - On failure, responds with [`SdkError<PutRuleGroupsNamespaceError>`](crate::error::PutRuleGroupsNamespaceError)
    pub fn put_rule_groups_namespace(
        &self,
    ) -> crate::client::fluent_builders::PutRuleGroupsNamespace {
        crate::client::fluent_builders::PutRuleGroupsNamespace::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): The ARN of the resource.
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): The list of tags assigned to the resource.
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): The ARN of the resource.
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): One or more tag keys
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateLoggingConfiguration`](crate::client::fluent_builders::UpdateLoggingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::UpdateLoggingConfiguration::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::UpdateLoggingConfiguration::set_workspace_id): The ID of the workspace to vend logs to.
    ///   - [`log_group_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateLoggingConfiguration::log_group_arn) / [`set_log_group_arn(Option<String>)`](crate::client::fluent_builders::UpdateLoggingConfiguration::set_log_group_arn): The ARN of the CW log group to which the vended log data will be published.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateLoggingConfiguration::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateLoggingConfiguration::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`UpdateLoggingConfigurationOutput`](crate::output::UpdateLoggingConfigurationOutput) with field(s):
    ///   - [`status(Option<LoggingConfigurationStatus>)`](crate::output::UpdateLoggingConfigurationOutput::status): The status of the logging configuration.
    /// - On failure, responds with [`SdkError<UpdateLoggingConfigurationError>`](crate::error::UpdateLoggingConfigurationError)
    pub fn update_logging_configuration(
        &self,
    ) -> crate::client::fluent_builders::UpdateLoggingConfiguration {
        crate::client::fluent_builders::UpdateLoggingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateWorkspaceAlias`](crate::client::fluent_builders::UpdateWorkspaceAlias) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkspaceAlias::workspace_id) / [`set_workspace_id(Option<String>)`](crate::client::fluent_builders::UpdateWorkspaceAlias::set_workspace_id): The ID of the workspace being updated.
    ///   - [`alias(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkspaceAlias::alias) / [`set_alias(Option<String>)`](crate::client::fluent_builders::UpdateWorkspaceAlias::set_alias): The new alias of the workspace.
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkspaceAlias::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateWorkspaceAlias::set_client_token): Optional, unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
    /// - On success, responds with [`UpdateWorkspaceAliasOutput`](crate::output::UpdateWorkspaceAliasOutput)

    /// - On failure, responds with [`SdkError<UpdateWorkspaceAliasError>`](crate::error::UpdateWorkspaceAliasError)
    pub fn update_workspace_alias(&self) -> crate::client::fluent_builders::UpdateWorkspaceAlias {
        crate::client::fluent_builders::UpdateWorkspaceAlias::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
