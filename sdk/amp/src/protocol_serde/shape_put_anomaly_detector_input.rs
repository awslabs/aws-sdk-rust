// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_anomaly_detector_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_anomaly_detector::PutAnomalyDetectorInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("configuration").start_object();
        crate::protocol_serde::shape_anomaly_detector_configuration::ser_anomaly_detector_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.evaluation_interval_in_seconds {
        object.key("evaluationIntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.labels {
        #[allow(unused_mut)]
        let mut object_6 = object.key("labels").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.missing_data_action {
        #[allow(unused_mut)]
        let mut object_10 = object.key("missingDataAction").start_object();
        crate::protocol_serde::shape_anomaly_detector_missing_data_action::ser_anomaly_detector_missing_data_action(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
