// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Create an alert manager definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAlertManagerDefinition {
    _private: (),
}
impl CreateAlertManagerDefinition {
    /// Creates a new builder-style object to manufacture [`CreateAlertManagerDefinitionInput`](crate::input::CreateAlertManagerDefinitionInput)
    pub fn builder() -> crate::input::create_alert_manager_definition_input::Builder {
        crate::input::create_alert_manager_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAlertManagerDefinition {
    type Output = std::result::Result<
        crate::output::CreateAlertManagerDefinitionOutput,
        crate::error::CreateAlertManagerDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_create_alert_manager_definition_error(response)
        } else {
            crate::operation_deser::parse_create_alert_manager_definition_response(response)
        }
    }
}

/// Create a rule group namespace.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateRuleGroupsNamespace {
    _private: (),
}
impl CreateRuleGroupsNamespace {
    /// Creates a new builder-style object to manufacture [`CreateRuleGroupsNamespaceInput`](crate::input::CreateRuleGroupsNamespaceInput)
    pub fn builder() -> crate::input::create_rule_groups_namespace_input::Builder {
        crate::input::create_rule_groups_namespace_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateRuleGroupsNamespace {
    type Output = std::result::Result<
        crate::output::CreateRuleGroupsNamespaceOutput,
        crate::error::CreateRuleGroupsNamespaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_create_rule_groups_namespace_error(response)
        } else {
            crate::operation_deser::parse_create_rule_groups_namespace_response(response)
        }
    }
}

/// Creates a new AMP workspace.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkspace {
    _private: (),
}
impl CreateWorkspace {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceInput`](crate::input::CreateWorkspaceInput)
    pub fn builder() -> crate::input::create_workspace_input::Builder {
        crate::input::create_workspace_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateWorkspace {
    type Output = std::result::Result<
        crate::output::CreateWorkspaceOutput,
        crate::error::CreateWorkspaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_create_workspace_error(response)
        } else {
            crate::operation_deser::parse_create_workspace_response(response)
        }
    }
}

/// Deletes an alert manager definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAlertManagerDefinition {
    _private: (),
}
impl DeleteAlertManagerDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteAlertManagerDefinitionInput`](crate::input::DeleteAlertManagerDefinitionInput)
    pub fn builder() -> crate::input::delete_alert_manager_definition_input::Builder {
        crate::input::delete_alert_manager_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAlertManagerDefinition {
    type Output = std::result::Result<
        crate::output::DeleteAlertManagerDefinitionOutput,
        crate::error::DeleteAlertManagerDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_alert_manager_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_alert_manager_definition_response(response)
        }
    }
}

/// Delete a rule groups namespace.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRuleGroupsNamespace {
    _private: (),
}
impl DeleteRuleGroupsNamespace {
    /// Creates a new builder-style object to manufacture [`DeleteRuleGroupsNamespaceInput`](crate::input::DeleteRuleGroupsNamespaceInput)
    pub fn builder() -> crate::input::delete_rule_groups_namespace_input::Builder {
        crate::input::delete_rule_groups_namespace_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteRuleGroupsNamespace {
    type Output = std::result::Result<
        crate::output::DeleteRuleGroupsNamespaceOutput,
        crate::error::DeleteRuleGroupsNamespaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_rule_groups_namespace_error(response)
        } else {
            crate::operation_deser::parse_delete_rule_groups_namespace_response(response)
        }
    }
}

/// Deletes an AMP workspace.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWorkspace {
    _private: (),
}
impl DeleteWorkspace {
    /// Creates a new builder-style object to manufacture [`DeleteWorkspaceInput`](crate::input::DeleteWorkspaceInput)
    pub fn builder() -> crate::input::delete_workspace_input::Builder {
        crate::input::delete_workspace_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteWorkspace {
    type Output = std::result::Result<
        crate::output::DeleteWorkspaceOutput,
        crate::error::DeleteWorkspaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_workspace_error(response)
        } else {
            crate::operation_deser::parse_delete_workspace_response(response)
        }
    }
}

/// Describes an alert manager definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAlertManagerDefinition {
    _private: (),
}
impl DescribeAlertManagerDefinition {
    /// Creates a new builder-style object to manufacture [`DescribeAlertManagerDefinitionInput`](crate::input::DescribeAlertManagerDefinitionInput)
    pub fn builder() -> crate::input::describe_alert_manager_definition_input::Builder {
        crate::input::describe_alert_manager_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAlertManagerDefinition {
    type Output = std::result::Result<
        crate::output::DescribeAlertManagerDefinitionOutput,
        crate::error::DescribeAlertManagerDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_alert_manager_definition_error(response)
        } else {
            crate::operation_deser::parse_describe_alert_manager_definition_response(response)
        }
    }
}

/// Describe a rule groups namespace.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRuleGroupsNamespace {
    _private: (),
}
impl DescribeRuleGroupsNamespace {
    /// Creates a new builder-style object to manufacture [`DescribeRuleGroupsNamespaceInput`](crate::input::DescribeRuleGroupsNamespaceInput)
    pub fn builder() -> crate::input::describe_rule_groups_namespace_input::Builder {
        crate::input::describe_rule_groups_namespace_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRuleGroupsNamespace {
    type Output = std::result::Result<
        crate::output::DescribeRuleGroupsNamespaceOutput,
        crate::error::DescribeRuleGroupsNamespaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_rule_groups_namespace_error(response)
        } else {
            crate::operation_deser::parse_describe_rule_groups_namespace_response(response)
        }
    }
}

/// Describes an existing AMP workspace.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeWorkspace {
    _private: (),
}
impl DescribeWorkspace {
    /// Creates a new builder-style object to manufacture [`DescribeWorkspaceInput`](crate::input::DescribeWorkspaceInput)
    pub fn builder() -> crate::input::describe_workspace_input::Builder {
        crate::input::describe_workspace_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeWorkspace {
    type Output = std::result::Result<
        crate::output::DescribeWorkspaceOutput,
        crate::error::DescribeWorkspaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_workspace_error(response)
        } else {
            crate::operation_deser::parse_describe_workspace_response(response)
        }
    }
}

/// Lists rule groups namespaces.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRuleGroupsNamespaces {
    _private: (),
}
impl ListRuleGroupsNamespaces {
    /// Creates a new builder-style object to manufacture [`ListRuleGroupsNamespacesInput`](crate::input::ListRuleGroupsNamespacesInput)
    pub fn builder() -> crate::input::list_rule_groups_namespaces_input::Builder {
        crate::input::list_rule_groups_namespaces_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRuleGroupsNamespaces {
    type Output = std::result::Result<
        crate::output::ListRuleGroupsNamespacesOutput,
        crate::error::ListRuleGroupsNamespacesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_rule_groups_namespaces_error(response)
        } else {
            crate::operation_deser::parse_list_rule_groups_namespaces_response(response)
        }
    }
}

/// Lists the tags you have assigned to the resource.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Lists all AMP workspaces, including workspaces being created or deleted.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkspaces {
    _private: (),
}
impl ListWorkspaces {
    /// Creates a new builder-style object to manufacture [`ListWorkspacesInput`](crate::input::ListWorkspacesInput)
    pub fn builder() -> crate::input::list_workspaces_input::Builder {
        crate::input::list_workspaces_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListWorkspaces {
    type Output =
        std::result::Result<crate::output::ListWorkspacesOutput, crate::error::ListWorkspacesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_workspaces_error(response)
        } else {
            crate::operation_deser::parse_list_workspaces_response(response)
        }
    }
}

/// Update an alert manager definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAlertManagerDefinition {
    _private: (),
}
impl PutAlertManagerDefinition {
    /// Creates a new builder-style object to manufacture [`PutAlertManagerDefinitionInput`](crate::input::PutAlertManagerDefinitionInput)
    pub fn builder() -> crate::input::put_alert_manager_definition_input::Builder {
        crate::input::put_alert_manager_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAlertManagerDefinition {
    type Output = std::result::Result<
        crate::output::PutAlertManagerDefinitionOutput,
        crate::error::PutAlertManagerDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_put_alert_manager_definition_error(response)
        } else {
            crate::operation_deser::parse_put_alert_manager_definition_response(response)
        }
    }
}

/// Update a rule groups namespace.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutRuleGroupsNamespace {
    _private: (),
}
impl PutRuleGroupsNamespace {
    /// Creates a new builder-style object to manufacture [`PutRuleGroupsNamespaceInput`](crate::input::PutRuleGroupsNamespaceInput)
    pub fn builder() -> crate::input::put_rule_groups_namespace_input::Builder {
        crate::input::put_rule_groups_namespace_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutRuleGroupsNamespace {
    type Output = std::result::Result<
        crate::output::PutRuleGroupsNamespaceOutput,
        crate::error::PutRuleGroupsNamespaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_put_rule_groups_namespace_error(response)
        } else {
            crate::operation_deser::parse_put_rule_groups_namespace_response(response)
        }
    }
}

/// Creates tags for the specified resource.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Deletes tags from the specified resource.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Updates an AMP workspace alias.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkspaceAlias {
    _private: (),
}
impl UpdateWorkspaceAlias {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceAliasInput`](crate::input::UpdateWorkspaceAliasInput)
    pub fn builder() -> crate::input::update_workspace_alias_input::Builder {
        crate::input::update_workspace_alias_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateWorkspaceAlias {
    type Output = std::result::Result<
        crate::output::UpdateWorkspaceAliasOutput,
        crate::error::UpdateWorkspaceAliasError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_workspace_alias_error(response)
        } else {
            crate::operation_deser::parse_update_workspace_alias_response(response)
        }
    }
}
