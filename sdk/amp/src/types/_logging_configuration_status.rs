// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents the status of a logging configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoggingConfigurationStatus {
    /// Status code of the logging configuration.
    #[doc(hidden)]
    pub status_code: std::option::Option<crate::types::LoggingConfigurationStatusCode>,
    /// The reason for failure if any.
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
}
impl LoggingConfigurationStatus {
    /// Status code of the logging configuration.
    pub fn status_code(
        &self,
    ) -> std::option::Option<&crate::types::LoggingConfigurationStatusCode> {
        self.status_code.as_ref()
    }
    /// The reason for failure if any.
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl LoggingConfigurationStatus {
    /// Creates a new builder-style object to manufacture [`LoggingConfigurationStatus`](crate::types::LoggingConfigurationStatus).
    pub fn builder() -> crate::types::builders::LoggingConfigurationStatusBuilder {
        crate::types::builders::LoggingConfigurationStatusBuilder::default()
    }
}

/// A builder for [`LoggingConfigurationStatus`](crate::types::LoggingConfigurationStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoggingConfigurationStatusBuilder {
    pub(crate) status_code: std::option::Option<crate::types::LoggingConfigurationStatusCode>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
}
impl LoggingConfigurationStatusBuilder {
    /// Status code of the logging configuration.
    pub fn status_code(mut self, input: crate::types::LoggingConfigurationStatusCode) -> Self {
        self.status_code = Some(input);
        self
    }
    /// Status code of the logging configuration.
    pub fn set_status_code(
        mut self,
        input: std::option::Option<crate::types::LoggingConfigurationStatusCode>,
    ) -> Self {
        self.status_code = input;
        self
    }
    /// The reason for failure if any.
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// The reason for failure if any.
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`LoggingConfigurationStatus`](crate::types::LoggingConfigurationStatus).
    pub fn build(self) -> crate::types::LoggingConfigurationStatus {
        crate::types::LoggingConfigurationStatus {
            status_code: self.status_code,
            status_reason: self.status_reason,
        }
    }
}
