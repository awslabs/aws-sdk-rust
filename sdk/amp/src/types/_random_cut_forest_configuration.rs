// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for the Random Cut Forest algorithm used for anomaly detection in time-series data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RandomCutForestConfiguration {
    /// <p>The Prometheus query used to retrieve the time-series data for anomaly detection.</p><important>
    /// <p>Random Cut Forest queries must be wrapped by a supported PromQL aggregation operator. For more information, see <a href="https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators">Aggregation operators</a> on the <i>Prometheus docs</i> website.</p>
    /// <p><b>Supported PromQL aggregation operators</b>: <code>avg</code>, <code>count</code>, <code>group</code>, <code>max</code>, <code>min</code>, <code>quantile</code>, <code>stddev</code>, <code>stdvar</code>, and <code>sum</code>.</p>
    /// </important>
    pub query: ::std::string::String,
    /// <p>The number of consecutive data points used to create a shingle for the Random Cut Forest algorithm. The default number is 8 consecutive data points.</p>
    pub shingle_size: i32,
    /// <p>The number of data points sampled from the input stream for the Random Cut Forest algorithm. The default number is 256 consecutive data points.</p>
    pub sample_size: i32,
    /// <p>Configuration for ignoring values that are near expected values from above during anomaly detection.</p>
    pub ignore_near_expected_from_above: ::std::option::Option<crate::types::IgnoreNearExpected>,
    /// <p>Configuration for ignoring values that are near expected values from below during anomaly detection.</p>
    pub ignore_near_expected_from_below: ::std::option::Option<crate::types::IgnoreNearExpected>,
}
impl RandomCutForestConfiguration {
    /// <p>The Prometheus query used to retrieve the time-series data for anomaly detection.</p><important>
    /// <p>Random Cut Forest queries must be wrapped by a supported PromQL aggregation operator. For more information, see <a href="https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators">Aggregation operators</a> on the <i>Prometheus docs</i> website.</p>
    /// <p><b>Supported PromQL aggregation operators</b>: <code>avg</code>, <code>count</code>, <code>group</code>, <code>max</code>, <code>min</code>, <code>quantile</code>, <code>stddev</code>, <code>stdvar</code>, and <code>sum</code>.</p>
    /// </important>
    pub fn query(&self) -> &str {
        use std::ops::Deref;
        self.query.deref()
    }
    /// <p>The number of consecutive data points used to create a shingle for the Random Cut Forest algorithm. The default number is 8 consecutive data points.</p>
    pub fn shingle_size(&self) -> i32 {
        self.shingle_size
    }
    /// <p>The number of data points sampled from the input stream for the Random Cut Forest algorithm. The default number is 256 consecutive data points.</p>
    pub fn sample_size(&self) -> i32 {
        self.sample_size
    }
    /// <p>Configuration for ignoring values that are near expected values from above during anomaly detection.</p>
    pub fn ignore_near_expected_from_above(&self) -> ::std::option::Option<&crate::types::IgnoreNearExpected> {
        self.ignore_near_expected_from_above.as_ref()
    }
    /// <p>Configuration for ignoring values that are near expected values from below during anomaly detection.</p>
    pub fn ignore_near_expected_from_below(&self) -> ::std::option::Option<&crate::types::IgnoreNearExpected> {
        self.ignore_near_expected_from_below.as_ref()
    }
}
impl RandomCutForestConfiguration {
    /// Creates a new builder-style object to manufacture [`RandomCutForestConfiguration`](crate::types::RandomCutForestConfiguration).
    pub fn builder() -> crate::types::builders::RandomCutForestConfigurationBuilder {
        crate::types::builders::RandomCutForestConfigurationBuilder::default()
    }
}

/// A builder for [`RandomCutForestConfiguration`](crate::types::RandomCutForestConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RandomCutForestConfigurationBuilder {
    pub(crate) query: ::std::option::Option<::std::string::String>,
    pub(crate) shingle_size: ::std::option::Option<i32>,
    pub(crate) sample_size: ::std::option::Option<i32>,
    pub(crate) ignore_near_expected_from_above: ::std::option::Option<crate::types::IgnoreNearExpected>,
    pub(crate) ignore_near_expected_from_below: ::std::option::Option<crate::types::IgnoreNearExpected>,
}
impl RandomCutForestConfigurationBuilder {
    /// <p>The Prometheus query used to retrieve the time-series data for anomaly detection.</p><important>
    /// <p>Random Cut Forest queries must be wrapped by a supported PromQL aggregation operator. For more information, see <a href="https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators">Aggregation operators</a> on the <i>Prometheus docs</i> website.</p>
    /// <p><b>Supported PromQL aggregation operators</b>: <code>avg</code>, <code>count</code>, <code>group</code>, <code>max</code>, <code>min</code>, <code>quantile</code>, <code>stddev</code>, <code>stdvar</code>, and <code>sum</code>.</p>
    /// </important>
    /// This field is required.
    pub fn query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Prometheus query used to retrieve the time-series data for anomaly detection.</p><important>
    /// <p>Random Cut Forest queries must be wrapped by a supported PromQL aggregation operator. For more information, see <a href="https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators">Aggregation operators</a> on the <i>Prometheus docs</i> website.</p>
    /// <p><b>Supported PromQL aggregation operators</b>: <code>avg</code>, <code>count</code>, <code>group</code>, <code>max</code>, <code>min</code>, <code>quantile</code>, <code>stddev</code>, <code>stdvar</code>, and <code>sum</code>.</p>
    /// </important>
    pub fn set_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query = input;
        self
    }
    /// <p>The Prometheus query used to retrieve the time-series data for anomaly detection.</p><important>
    /// <p>Random Cut Forest queries must be wrapped by a supported PromQL aggregation operator. For more information, see <a href="https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators">Aggregation operators</a> on the <i>Prometheus docs</i> website.</p>
    /// <p><b>Supported PromQL aggregation operators</b>: <code>avg</code>, <code>count</code>, <code>group</code>, <code>max</code>, <code>min</code>, <code>quantile</code>, <code>stddev</code>, <code>stdvar</code>, and <code>sum</code>.</p>
    /// </important>
    pub fn get_query(&self) -> &::std::option::Option<::std::string::String> {
        &self.query
    }
    /// <p>The number of consecutive data points used to create a shingle for the Random Cut Forest algorithm. The default number is 8 consecutive data points.</p>
    pub fn shingle_size(mut self, input: i32) -> Self {
        self.shingle_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of consecutive data points used to create a shingle for the Random Cut Forest algorithm. The default number is 8 consecutive data points.</p>
    pub fn set_shingle_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.shingle_size = input;
        self
    }
    /// <p>The number of consecutive data points used to create a shingle for the Random Cut Forest algorithm. The default number is 8 consecutive data points.</p>
    pub fn get_shingle_size(&self) -> &::std::option::Option<i32> {
        &self.shingle_size
    }
    /// <p>The number of data points sampled from the input stream for the Random Cut Forest algorithm. The default number is 256 consecutive data points.</p>
    pub fn sample_size(mut self, input: i32) -> Self {
        self.sample_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of data points sampled from the input stream for the Random Cut Forest algorithm. The default number is 256 consecutive data points.</p>
    pub fn set_sample_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sample_size = input;
        self
    }
    /// <p>The number of data points sampled from the input stream for the Random Cut Forest algorithm. The default number is 256 consecutive data points.</p>
    pub fn get_sample_size(&self) -> &::std::option::Option<i32> {
        &self.sample_size
    }
    /// <p>Configuration for ignoring values that are near expected values from above during anomaly detection.</p>
    pub fn ignore_near_expected_from_above(mut self, input: crate::types::IgnoreNearExpected) -> Self {
        self.ignore_near_expected_from_above = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for ignoring values that are near expected values from above during anomaly detection.</p>
    pub fn set_ignore_near_expected_from_above(mut self, input: ::std::option::Option<crate::types::IgnoreNearExpected>) -> Self {
        self.ignore_near_expected_from_above = input;
        self
    }
    /// <p>Configuration for ignoring values that are near expected values from above during anomaly detection.</p>
    pub fn get_ignore_near_expected_from_above(&self) -> &::std::option::Option<crate::types::IgnoreNearExpected> {
        &self.ignore_near_expected_from_above
    }
    /// <p>Configuration for ignoring values that are near expected values from below during anomaly detection.</p>
    pub fn ignore_near_expected_from_below(mut self, input: crate::types::IgnoreNearExpected) -> Self {
        self.ignore_near_expected_from_below = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for ignoring values that are near expected values from below during anomaly detection.</p>
    pub fn set_ignore_near_expected_from_below(mut self, input: ::std::option::Option<crate::types::IgnoreNearExpected>) -> Self {
        self.ignore_near_expected_from_below = input;
        self
    }
    /// <p>Configuration for ignoring values that are near expected values from below during anomaly detection.</p>
    pub fn get_ignore_near_expected_from_below(&self) -> &::std::option::Option<crate::types::IgnoreNearExpected> {
        &self.ignore_near_expected_from_below
    }
    /// Consumes the builder and constructs a [`RandomCutForestConfiguration`](crate::types::RandomCutForestConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`query`](crate::types::builders::RandomCutForestConfigurationBuilder::query)
    pub fn build(self) -> ::std::result::Result<crate::types::RandomCutForestConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RandomCutForestConfiguration {
            query: self.query.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "query",
                    "query was not specified but it is required when building RandomCutForestConfiguration",
                )
            })?,
            shingle_size: self.shingle_size.unwrap_or(8),
            sample_size: self.sample_size.unwrap_or(256),
            ignore_near_expected_from_above: self.ignore_near_expected_from_above,
            ignore_near_expected_from_below: self.ignore_near_expected_from_below,
        })
    }
}
