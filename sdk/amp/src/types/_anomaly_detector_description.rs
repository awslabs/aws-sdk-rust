// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about an anomaly detector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnomalyDetectorDescription {
    /// <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
    pub arn: ::std::string::String,
    /// <p>The unique identifier of the anomaly detector.</p>
    pub anomaly_detector_id: ::std::string::String,
    /// <p>The user-friendly name of the anomaly detector.</p>
    pub alias: ::std::string::String,
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub evaluation_interval_in_seconds: ::std::option::Option<i32>,
    /// <p>The action taken when data is missing during evaluation.</p>
    pub missing_data_action: ::std::option::Option<crate::types::AnomalyDetectorMissingDataAction>,
    /// <p>The algorithm configuration of the anomaly detector.</p>
    pub configuration: ::std::option::Option<crate::types::AnomalyDetectorConfiguration>,
    /// <p>The Amazon Managed Service for Prometheus metric labels associated with the anomaly detector.</p>
    pub labels: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The current status of the anomaly detector.</p>
    pub status: ::std::option::Option<crate::types::AnomalyDetectorStatus>,
    /// <p>The timestamp when the anomaly detector was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the anomaly detector was last modified.</p>
    pub modified_at: ::aws_smithy_types::DateTime,
    /// <p>The tags applied to the anomaly detector.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl AnomalyDetectorDescription {
    /// <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique identifier of the anomaly detector.</p>
    pub fn anomaly_detector_id(&self) -> &str {
        use std::ops::Deref;
        self.anomaly_detector_id.deref()
    }
    /// <p>The user-friendly name of the anomaly detector.</p>
    pub fn alias(&self) -> &str {
        use std::ops::Deref;
        self.alias.deref()
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn evaluation_interval_in_seconds(&self) -> ::std::option::Option<i32> {
        self.evaluation_interval_in_seconds
    }
    /// <p>The action taken when data is missing during evaluation.</p>
    pub fn missing_data_action(&self) -> ::std::option::Option<&crate::types::AnomalyDetectorMissingDataAction> {
        self.missing_data_action.as_ref()
    }
    /// <p>The algorithm configuration of the anomaly detector.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::AnomalyDetectorConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>The Amazon Managed Service for Prometheus metric labels associated with the anomaly detector.</p>
    pub fn labels(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.labels.as_ref()
    }
    /// <p>The current status of the anomaly detector.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AnomalyDetectorStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the anomaly detector was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the anomaly detector was last modified.</p>
    pub fn modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.modified_at
    }
    /// <p>The tags applied to the anomaly detector.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl AnomalyDetectorDescription {
    /// Creates a new builder-style object to manufacture [`AnomalyDetectorDescription`](crate::types::AnomalyDetectorDescription).
    pub fn builder() -> crate::types::builders::AnomalyDetectorDescriptionBuilder {
        crate::types::builders::AnomalyDetectorDescriptionBuilder::default()
    }
}

/// A builder for [`AnomalyDetectorDescription`](crate::types::AnomalyDetectorDescription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnomalyDetectorDescriptionBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) anomaly_detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) evaluation_interval_in_seconds: ::std::option::Option<i32>,
    pub(crate) missing_data_action: ::std::option::Option<crate::types::AnomalyDetectorMissingDataAction>,
    pub(crate) configuration: ::std::option::Option<crate::types::AnomalyDetectorConfiguration>,
    pub(crate) labels: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::AnomalyDetectorStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl AnomalyDetectorDescriptionBuilder {
    /// <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier of the anomaly detector.</p>
    /// This field is required.
    pub fn anomaly_detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.anomaly_detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the anomaly detector.</p>
    pub fn set_anomaly_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.anomaly_detector_id = input;
        self
    }
    /// <p>The unique identifier of the anomaly detector.</p>
    pub fn get_anomaly_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.anomaly_detector_id
    }
    /// <p>The user-friendly name of the anomaly detector.</p>
    /// This field is required.
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-friendly name of the anomaly detector.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The user-friendly name of the anomaly detector.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn evaluation_interval_in_seconds(mut self, input: i32) -> Self {
        self.evaluation_interval_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn set_evaluation_interval_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evaluation_interval_in_seconds = input;
        self
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn get_evaluation_interval_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.evaluation_interval_in_seconds
    }
    /// <p>The action taken when data is missing during evaluation.</p>
    pub fn missing_data_action(mut self, input: crate::types::AnomalyDetectorMissingDataAction) -> Self {
        self.missing_data_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action taken when data is missing during evaluation.</p>
    pub fn set_missing_data_action(mut self, input: ::std::option::Option<crate::types::AnomalyDetectorMissingDataAction>) -> Self {
        self.missing_data_action = input;
        self
    }
    /// <p>The action taken when data is missing during evaluation.</p>
    pub fn get_missing_data_action(&self) -> &::std::option::Option<crate::types::AnomalyDetectorMissingDataAction> {
        &self.missing_data_action
    }
    /// <p>The algorithm configuration of the anomaly detector.</p>
    pub fn configuration(mut self, input: crate::types::AnomalyDetectorConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The algorithm configuration of the anomaly detector.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::AnomalyDetectorConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The algorithm configuration of the anomaly detector.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::AnomalyDetectorConfiguration> {
        &self.configuration
    }
    /// Adds a key-value pair to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>The Amazon Managed Service for Prometheus metric labels associated with the anomaly detector.</p>
    pub fn labels(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.labels.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.labels = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Amazon Managed Service for Prometheus metric labels associated with the anomaly detector.</p>
    pub fn set_labels(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.labels = input;
        self
    }
    /// <p>The Amazon Managed Service for Prometheus metric labels associated with the anomaly detector.</p>
    pub fn get_labels(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.labels
    }
    /// <p>The current status of the anomaly detector.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AnomalyDetectorStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the anomaly detector.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AnomalyDetectorStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the anomaly detector.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AnomalyDetectorStatus> {
        &self.status
    }
    /// <p>The timestamp when the anomaly detector was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the anomaly detector was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the anomaly detector was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the anomaly detector was last modified.</p>
    /// This field is required.
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the anomaly detector was last modified.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The timestamp when the anomaly detector was last modified.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags applied to the anomaly detector.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags applied to the anomaly detector.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags applied to the anomaly detector.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`AnomalyDetectorDescription`](crate::types::AnomalyDetectorDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::AnomalyDetectorDescriptionBuilder::arn)
    /// - [`anomaly_detector_id`](crate::types::builders::AnomalyDetectorDescriptionBuilder::anomaly_detector_id)
    /// - [`alias`](crate::types::builders::AnomalyDetectorDescriptionBuilder::alias)
    /// - [`created_at`](crate::types::builders::AnomalyDetectorDescriptionBuilder::created_at)
    /// - [`modified_at`](crate::types::builders::AnomalyDetectorDescriptionBuilder::modified_at)
    pub fn build(self) -> ::std::result::Result<crate::types::AnomalyDetectorDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnomalyDetectorDescription {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building AnomalyDetectorDescription",
                )
            })?,
            anomaly_detector_id: self.anomaly_detector_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "anomaly_detector_id",
                    "anomaly_detector_id was not specified but it is required when building AnomalyDetectorDescription",
                )
            })?,
            alias: self.alias.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "alias",
                    "alias was not specified but it is required when building AnomalyDetectorDescription",
                )
            })?,
            evaluation_interval_in_seconds: self.evaluation_interval_in_seconds,
            missing_data_action: self.missing_data_action,
            configuration: self.configuration,
            labels: self.labels,
            status: self.status,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building AnomalyDetectorDescription",
                )
            })?,
            modified_at: self.modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified_at",
                    "modified_at was not specified but it is required when building AnomalyDetectorDescription",
                )
            })?,
            tags: self.tags,
        })
    }
}
