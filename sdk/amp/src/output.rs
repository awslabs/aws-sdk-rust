// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents the output of a ListWorkspaces operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkspacesOutput {
    /// The list of existing workspaces, including those undergoing creation or deletion.
    #[doc(hidden)]
    pub workspaces: std::option::Option<std::vec::Vec<crate::model::WorkspaceSummary>>,
    /// Pagination token to use when requesting the next page in this list.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkspacesOutput {
    /// The list of existing workspaces, including those undergoing creation or deletion.
    pub fn workspaces(&self) -> std::option::Option<&[crate::model::WorkspaceSummary]> {
        self.workspaces.as_deref()
    }
    /// Pagination token to use when requesting the next page in this list.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkspacesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorkspacesOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
    pub fn builder() -> crate::output::list_workspaces_output::Builder {
        crate::output::list_workspaces_output::Builder::default()
    }
}

/// See [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
pub mod list_workspaces_output {

    /// A builder for [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspaces: std::option::Option<std::vec::Vec<crate::model::WorkspaceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `workspaces`.
        ///
        /// To override the contents of this collection use [`set_workspaces`](Self::set_workspaces).
        ///
        /// The list of existing workspaces, including those undergoing creation or deletion.
        pub fn workspaces(mut self, input: crate::model::WorkspaceSummary) -> Self {
            let mut v = self.workspaces.unwrap_or_default();
            v.push(input);
            self.workspaces = Some(v);
            self
        }
        /// The list of existing workspaces, including those undergoing creation or deletion.
        pub fn set_workspaces(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WorkspaceSummary>>,
        ) -> Self {
            self.workspaces = input;
            self
        }
        /// Pagination token to use when requesting the next page in this list.
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// Pagination token to use when requesting the next page in this list.
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
        pub fn build(self) -> crate::output::ListWorkspacesOutput {
            crate::output::ListWorkspacesOutput {
                workspaces: self.workspaces,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a CreateWorkspace operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkspaceOutput {
    /// The generated ID of the workspace that was just created.
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// The ARN of the workspace that was just created.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// The status of the workspace that was just created (usually CREATING).
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::WorkspaceStatus>,
    /// The tags of this workspace.
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateWorkspaceOutput {
    /// The generated ID of the workspace that was just created.
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// The ARN of the workspace that was just created.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// The status of the workspace that was just created (usually CREATING).
    pub fn status(&self) -> std::option::Option<&crate::model::WorkspaceStatus> {
        self.status.as_ref()
    }
    /// The tags of this workspace.
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
    pub fn builder() -> crate::output::create_workspace_output::Builder {
        crate::output::create_workspace_output::Builder::default()
    }
}

/// See [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
pub mod create_workspace_output {

    /// A builder for [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::WorkspaceStatus>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The generated ID of the workspace that was just created.
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// The generated ID of the workspace that was just created.
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        /// The ARN of the workspace that was just created.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// The ARN of the workspace that was just created.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// The status of the workspace that was just created (usually CREATING).
        pub fn status(mut self, input: crate::model::WorkspaceStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// The status of the workspace that was just created (usually CREATING).
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::WorkspaceStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// The tags of this workspace.
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// The tags of this workspace.
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
        pub fn build(self) -> crate::output::CreateWorkspaceOutput {
            crate::output::CreateWorkspaceOutput {
                workspace_id: self.workspace_id,
                arn: self.arn,
                status: self.status,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkspaceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
    pub fn builder() -> crate::output::delete_workspace_output::Builder {
        crate::output::delete_workspace_output::Builder::default()
    }
}

/// See [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
pub mod delete_workspace_output {

    /// A builder for [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
        pub fn build(self) -> crate::output::DeleteWorkspaceOutput {
            crate::output::DeleteWorkspaceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkspaceAliasOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateWorkspaceAliasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateWorkspaceAliasOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceAliasOutput`](crate::output::UpdateWorkspaceAliasOutput).
    pub fn builder() -> crate::output::update_workspace_alias_output::Builder {
        crate::output::update_workspace_alias_output::Builder::default()
    }
}

/// See [`UpdateWorkspaceAliasOutput`](crate::output::UpdateWorkspaceAliasOutput).
pub mod update_workspace_alias_output {

    /// A builder for [`UpdateWorkspaceAliasOutput`](crate::output::UpdateWorkspaceAliasOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkspaceAliasOutput`](crate::output::UpdateWorkspaceAliasOutput).
        pub fn build(self) -> crate::output::UpdateWorkspaceAliasOutput {
            crate::output::UpdateWorkspaceAliasOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a DescribeWorkspace operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeWorkspaceOutput {
    /// The properties of the selected workspace.
    #[doc(hidden)]
    pub workspace: std::option::Option<crate::model::WorkspaceDescription>,
    _request_id: Option<String>,
}
impl DescribeWorkspaceOutput {
    /// The properties of the selected workspace.
    pub fn workspace(&self) -> std::option::Option<&crate::model::WorkspaceDescription> {
        self.workspace.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWorkspaceOutput`](crate::output::DescribeWorkspaceOutput).
    pub fn builder() -> crate::output::describe_workspace_output::Builder {
        crate::output::describe_workspace_output::Builder::default()
    }
}

/// See [`DescribeWorkspaceOutput`](crate::output::DescribeWorkspaceOutput).
pub mod describe_workspace_output {

    /// A builder for [`DescribeWorkspaceOutput`](crate::output::DescribeWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace: std::option::Option<crate::model::WorkspaceDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The properties of the selected workspace.
        pub fn workspace(mut self, input: crate::model::WorkspaceDescription) -> Self {
            self.workspace = Some(input);
            self
        }
        /// The properties of the selected workspace.
        pub fn set_workspace(
            mut self,
            input: std::option::Option<crate::model::WorkspaceDescription>,
        ) -> Self {
            self.workspace = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeWorkspaceOutput`](crate::output::DescribeWorkspaceOutput).
        pub fn build(self) -> crate::output::DescribeWorkspaceOutput {
            crate::output::DescribeWorkspaceOutput {
                workspace: self.workspace,
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a ListRuleGroupsNamespaces operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRuleGroupsNamespacesOutput {
    /// The list of the selected rule groups namespaces.
    #[doc(hidden)]
    pub rule_groups_namespaces:
        std::option::Option<std::vec::Vec<crate::model::RuleGroupsNamespaceSummary>>,
    /// Pagination token to use when requesting the next page in this list.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListRuleGroupsNamespacesOutput {
    /// The list of the selected rule groups namespaces.
    pub fn rule_groups_namespaces(
        &self,
    ) -> std::option::Option<&[crate::model::RuleGroupsNamespaceSummary]> {
        self.rule_groups_namespaces.as_deref()
    }
    /// Pagination token to use when requesting the next page in this list.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListRuleGroupsNamespacesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRuleGroupsNamespacesOutput {
    /// Creates a new builder-style object to manufacture [`ListRuleGroupsNamespacesOutput`](crate::output::ListRuleGroupsNamespacesOutput).
    pub fn builder() -> crate::output::list_rule_groups_namespaces_output::Builder {
        crate::output::list_rule_groups_namespaces_output::Builder::default()
    }
}

/// See [`ListRuleGroupsNamespacesOutput`](crate::output::ListRuleGroupsNamespacesOutput).
pub mod list_rule_groups_namespaces_output {

    /// A builder for [`ListRuleGroupsNamespacesOutput`](crate::output::ListRuleGroupsNamespacesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rule_groups_namespaces:
            std::option::Option<std::vec::Vec<crate::model::RuleGroupsNamespaceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `rule_groups_namespaces`.
        ///
        /// To override the contents of this collection use [`set_rule_groups_namespaces`](Self::set_rule_groups_namespaces).
        ///
        /// The list of the selected rule groups namespaces.
        pub fn rule_groups_namespaces(
            mut self,
            input: crate::model::RuleGroupsNamespaceSummary,
        ) -> Self {
            let mut v = self.rule_groups_namespaces.unwrap_or_default();
            v.push(input);
            self.rule_groups_namespaces = Some(v);
            self
        }
        /// The list of the selected rule groups namespaces.
        pub fn set_rule_groups_namespaces(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RuleGroupsNamespaceSummary>>,
        ) -> Self {
            self.rule_groups_namespaces = input;
            self
        }
        /// Pagination token to use when requesting the next page in this list.
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// Pagination token to use when requesting the next page in this list.
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListRuleGroupsNamespacesOutput`](crate::output::ListRuleGroupsNamespacesOutput).
        pub fn build(self) -> crate::output::ListRuleGroupsNamespacesOutput {
            crate::output::ListRuleGroupsNamespacesOutput {
                rule_groups_namespaces: self.rule_groups_namespaces,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a CreateRuleGroupsNamespace operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRuleGroupsNamespaceOutput {
    /// The rule groups namespace name.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// The Amazon Resource Name (ARN) of this rule groups namespace.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// The status of rule groups namespace.
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::RuleGroupsNamespaceStatus>,
    /// The tags of this rule groups namespace.
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateRuleGroupsNamespaceOutput {
    /// The rule groups namespace name.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The Amazon Resource Name (ARN) of this rule groups namespace.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// The status of rule groups namespace.
    pub fn status(&self) -> std::option::Option<&crate::model::RuleGroupsNamespaceStatus> {
        self.status.as_ref()
    }
    /// The tags of this rule groups namespace.
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateRuleGroupsNamespaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateRuleGroupsNamespaceOutput {
    /// Creates a new builder-style object to manufacture [`CreateRuleGroupsNamespaceOutput`](crate::output::CreateRuleGroupsNamespaceOutput).
    pub fn builder() -> crate::output::create_rule_groups_namespace_output::Builder {
        crate::output::create_rule_groups_namespace_output::Builder::default()
    }
}

/// See [`CreateRuleGroupsNamespaceOutput`](crate::output::CreateRuleGroupsNamespaceOutput).
pub mod create_rule_groups_namespace_output {

    /// A builder for [`CreateRuleGroupsNamespaceOutput`](crate::output::CreateRuleGroupsNamespaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::RuleGroupsNamespaceStatus>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The rule groups namespace name.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// The rule groups namespace name.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// The Amazon Resource Name (ARN) of this rule groups namespace.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// The Amazon Resource Name (ARN) of this rule groups namespace.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// The status of rule groups namespace.
        pub fn status(mut self, input: crate::model::RuleGroupsNamespaceStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// The status of rule groups namespace.
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::RuleGroupsNamespaceStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// The tags of this rule groups namespace.
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// The tags of this rule groups namespace.
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateRuleGroupsNamespaceOutput`](crate::output::CreateRuleGroupsNamespaceOutput).
        pub fn build(self) -> crate::output::CreateRuleGroupsNamespaceOutput {
            crate::output::CreateRuleGroupsNamespaceOutput {
                name: self.name,
                arn: self.arn,
                status: self.status,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRuleGroupsNamespaceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteRuleGroupsNamespaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteRuleGroupsNamespaceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRuleGroupsNamespaceOutput`](crate::output::DeleteRuleGroupsNamespaceOutput).
    pub fn builder() -> crate::output::delete_rule_groups_namespace_output::Builder {
        crate::output::delete_rule_groups_namespace_output::Builder::default()
    }
}

/// See [`DeleteRuleGroupsNamespaceOutput`](crate::output::DeleteRuleGroupsNamespaceOutput).
pub mod delete_rule_groups_namespace_output {

    /// A builder for [`DeleteRuleGroupsNamespaceOutput`](crate::output::DeleteRuleGroupsNamespaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteRuleGroupsNamespaceOutput`](crate::output::DeleteRuleGroupsNamespaceOutput).
        pub fn build(self) -> crate::output::DeleteRuleGroupsNamespaceOutput {
            crate::output::DeleteRuleGroupsNamespaceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a PutRuleGroupsNamespace operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutRuleGroupsNamespaceOutput {
    /// The rule groups namespace name.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// The Amazon Resource Name (ARN) of this rule groups namespace.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// The status of rule groups namespace.
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::RuleGroupsNamespaceStatus>,
    /// The tags of this rule groups namespace.
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl PutRuleGroupsNamespaceOutput {
    /// The rule groups namespace name.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The Amazon Resource Name (ARN) of this rule groups namespace.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// The status of rule groups namespace.
    pub fn status(&self) -> std::option::Option<&crate::model::RuleGroupsNamespaceStatus> {
        self.status.as_ref()
    }
    /// The tags of this rule groups namespace.
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutRuleGroupsNamespaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutRuleGroupsNamespaceOutput {
    /// Creates a new builder-style object to manufacture [`PutRuleGroupsNamespaceOutput`](crate::output::PutRuleGroupsNamespaceOutput).
    pub fn builder() -> crate::output::put_rule_groups_namespace_output::Builder {
        crate::output::put_rule_groups_namespace_output::Builder::default()
    }
}

/// See [`PutRuleGroupsNamespaceOutput`](crate::output::PutRuleGroupsNamespaceOutput).
pub mod put_rule_groups_namespace_output {

    /// A builder for [`PutRuleGroupsNamespaceOutput`](crate::output::PutRuleGroupsNamespaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::RuleGroupsNamespaceStatus>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The rule groups namespace name.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// The rule groups namespace name.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// The Amazon Resource Name (ARN) of this rule groups namespace.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// The Amazon Resource Name (ARN) of this rule groups namespace.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// The status of rule groups namespace.
        pub fn status(mut self, input: crate::model::RuleGroupsNamespaceStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// The status of rule groups namespace.
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::RuleGroupsNamespaceStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// The tags of this rule groups namespace.
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// The tags of this rule groups namespace.
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutRuleGroupsNamespaceOutput`](crate::output::PutRuleGroupsNamespaceOutput).
        pub fn build(self) -> crate::output::PutRuleGroupsNamespaceOutput {
            crate::output::PutRuleGroupsNamespaceOutput {
                name: self.name,
                arn: self.arn,
                status: self.status,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a DescribeRuleGroupsNamespace operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeRuleGroupsNamespaceOutput {
    /// The selected rule groups namespace.
    #[doc(hidden)]
    pub rule_groups_namespace: std::option::Option<crate::model::RuleGroupsNamespaceDescription>,
    _request_id: Option<String>,
}
impl DescribeRuleGroupsNamespaceOutput {
    /// The selected rule groups namespace.
    pub fn rule_groups_namespace(
        &self,
    ) -> std::option::Option<&crate::model::RuleGroupsNamespaceDescription> {
        self.rule_groups_namespace.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeRuleGroupsNamespaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeRuleGroupsNamespaceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRuleGroupsNamespaceOutput`](crate::output::DescribeRuleGroupsNamespaceOutput).
    pub fn builder() -> crate::output::describe_rule_groups_namespace_output::Builder {
        crate::output::describe_rule_groups_namespace_output::Builder::default()
    }
}

/// See [`DescribeRuleGroupsNamespaceOutput`](crate::output::DescribeRuleGroupsNamespaceOutput).
pub mod describe_rule_groups_namespace_output {

    /// A builder for [`DescribeRuleGroupsNamespaceOutput`](crate::output::DescribeRuleGroupsNamespaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rule_groups_namespace:
            std::option::Option<crate::model::RuleGroupsNamespaceDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The selected rule groups namespace.
        pub fn rule_groups_namespace(
            mut self,
            input: crate::model::RuleGroupsNamespaceDescription,
        ) -> Self {
            self.rule_groups_namespace = Some(input);
            self
        }
        /// The selected rule groups namespace.
        pub fn set_rule_groups_namespace(
            mut self,
            input: std::option::Option<crate::model::RuleGroupsNamespaceDescription>,
        ) -> Self {
            self.rule_groups_namespace = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeRuleGroupsNamespaceOutput`](crate::output::DescribeRuleGroupsNamespaceOutput).
        pub fn build(self) -> crate::output::DescribeRuleGroupsNamespaceOutput {
            crate::output::DescribeRuleGroupsNamespaceOutput {
                rule_groups_namespace: self.rule_groups_namespace,
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a CreateLoggingConfiguration operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLoggingConfigurationOutput {
    /// The status of the logging configuration.
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::LoggingConfigurationStatus>,
    _request_id: Option<String>,
}
impl CreateLoggingConfigurationOutput {
    /// The status of the logging configuration.
    pub fn status(&self) -> std::option::Option<&crate::model::LoggingConfigurationStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateLoggingConfigurationOutput`](crate::output::CreateLoggingConfigurationOutput).
    pub fn builder() -> crate::output::create_logging_configuration_output::Builder {
        crate::output::create_logging_configuration_output::Builder::default()
    }
}

/// See [`CreateLoggingConfigurationOutput`](crate::output::CreateLoggingConfigurationOutput).
pub mod create_logging_configuration_output {

    /// A builder for [`CreateLoggingConfigurationOutput`](crate::output::CreateLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::LoggingConfigurationStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The status of the logging configuration.
        pub fn status(mut self, input: crate::model::LoggingConfigurationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// The status of the logging configuration.
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::LoggingConfigurationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLoggingConfigurationOutput`](crate::output::CreateLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::CreateLoggingConfigurationOutput {
            crate::output::CreateLoggingConfigurationOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLoggingConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLoggingConfigurationOutput`](crate::output::DeleteLoggingConfigurationOutput).
    pub fn builder() -> crate::output::delete_logging_configuration_output::Builder {
        crate::output::delete_logging_configuration_output::Builder::default()
    }
}

/// See [`DeleteLoggingConfigurationOutput`](crate::output::DeleteLoggingConfigurationOutput).
pub mod delete_logging_configuration_output {

    /// A builder for [`DeleteLoggingConfigurationOutput`](crate::output::DeleteLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLoggingConfigurationOutput`](crate::output::DeleteLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteLoggingConfigurationOutput {
            crate::output::DeleteLoggingConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of an UpdateLoggingConfiguration operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLoggingConfigurationOutput {
    /// The status of the logging configuration.
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::LoggingConfigurationStatus>,
    _request_id: Option<String>,
}
impl UpdateLoggingConfigurationOutput {
    /// The status of the logging configuration.
    pub fn status(&self) -> std::option::Option<&crate::model::LoggingConfigurationStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLoggingConfigurationOutput`](crate::output::UpdateLoggingConfigurationOutput).
    pub fn builder() -> crate::output::update_logging_configuration_output::Builder {
        crate::output::update_logging_configuration_output::Builder::default()
    }
}

/// See [`UpdateLoggingConfigurationOutput`](crate::output::UpdateLoggingConfigurationOutput).
pub mod update_logging_configuration_output {

    /// A builder for [`UpdateLoggingConfigurationOutput`](crate::output::UpdateLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::LoggingConfigurationStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The status of the logging configuration.
        pub fn status(mut self, input: crate::model::LoggingConfigurationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// The status of the logging configuration.
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::LoggingConfigurationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateLoggingConfigurationOutput`](crate::output::UpdateLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateLoggingConfigurationOutput {
            crate::output::UpdateLoggingConfigurationOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a DescribeLoggingConfiguration operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLoggingConfigurationOutput {
    /// Metadata object containing information about the logging configuration of a workspace.
    #[doc(hidden)]
    pub logging_configuration: std::option::Option<crate::model::LoggingConfigurationMetadata>,
    _request_id: Option<String>,
}
impl DescribeLoggingConfigurationOutput {
    /// Metadata object containing information about the logging configuration of a workspace.
    pub fn logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::LoggingConfigurationMetadata> {
        self.logging_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoggingConfigurationOutput`](crate::output::DescribeLoggingConfigurationOutput).
    pub fn builder() -> crate::output::describe_logging_configuration_output::Builder {
        crate::output::describe_logging_configuration_output::Builder::default()
    }
}

/// See [`DescribeLoggingConfigurationOutput`](crate::output::DescribeLoggingConfigurationOutput).
pub mod describe_logging_configuration_output {

    /// A builder for [`DescribeLoggingConfigurationOutput`](crate::output::DescribeLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) logging_configuration:
            std::option::Option<crate::model::LoggingConfigurationMetadata>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Metadata object containing information about the logging configuration of a workspace.
        pub fn logging_configuration(
            mut self,
            input: crate::model::LoggingConfigurationMetadata,
        ) -> Self {
            self.logging_configuration = Some(input);
            self
        }
        /// Metadata object containing information about the logging configuration of a workspace.
        pub fn set_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::LoggingConfigurationMetadata>,
        ) -> Self {
            self.logging_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLoggingConfigurationOutput`](crate::output::DescribeLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeLoggingConfigurationOutput {
            crate::output::DescribeLoggingConfigurationOutput {
                logging_configuration: self.logging_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a CreateAlertManagerDefinition operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAlertManagerDefinitionOutput {
    /// The status of alert manager definition.
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::AlertManagerDefinitionStatus>,
    _request_id: Option<String>,
}
impl CreateAlertManagerDefinitionOutput {
    /// The status of alert manager definition.
    pub fn status(&self) -> std::option::Option<&crate::model::AlertManagerDefinitionStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateAlertManagerDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAlertManagerDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`CreateAlertManagerDefinitionOutput`](crate::output::CreateAlertManagerDefinitionOutput).
    pub fn builder() -> crate::output::create_alert_manager_definition_output::Builder {
        crate::output::create_alert_manager_definition_output::Builder::default()
    }
}

/// See [`CreateAlertManagerDefinitionOutput`](crate::output::CreateAlertManagerDefinitionOutput).
pub mod create_alert_manager_definition_output {

    /// A builder for [`CreateAlertManagerDefinitionOutput`](crate::output::CreateAlertManagerDefinitionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::AlertManagerDefinitionStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The status of alert manager definition.
        pub fn status(mut self, input: crate::model::AlertManagerDefinitionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// The status of alert manager definition.
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::AlertManagerDefinitionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAlertManagerDefinitionOutput`](crate::output::CreateAlertManagerDefinitionOutput).
        pub fn build(self) -> crate::output::CreateAlertManagerDefinitionOutput {
            crate::output::CreateAlertManagerDefinitionOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAlertManagerDefinitionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAlertManagerDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAlertManagerDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAlertManagerDefinitionOutput`](crate::output::DeleteAlertManagerDefinitionOutput).
    pub fn builder() -> crate::output::delete_alert_manager_definition_output::Builder {
        crate::output::delete_alert_manager_definition_output::Builder::default()
    }
}

/// See [`DeleteAlertManagerDefinitionOutput`](crate::output::DeleteAlertManagerDefinitionOutput).
pub mod delete_alert_manager_definition_output {

    /// A builder for [`DeleteAlertManagerDefinitionOutput`](crate::output::DeleteAlertManagerDefinitionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAlertManagerDefinitionOutput`](crate::output::DeleteAlertManagerDefinitionOutput).
        pub fn build(self) -> crate::output::DeleteAlertManagerDefinitionOutput {
            crate::output::DeleteAlertManagerDefinitionOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a PutAlertManagerDefinition operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutAlertManagerDefinitionOutput {
    /// The status of alert manager definition.
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::AlertManagerDefinitionStatus>,
    _request_id: Option<String>,
}
impl PutAlertManagerDefinitionOutput {
    /// The status of alert manager definition.
    pub fn status(&self) -> std::option::Option<&crate::model::AlertManagerDefinitionStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutAlertManagerDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutAlertManagerDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`PutAlertManagerDefinitionOutput`](crate::output::PutAlertManagerDefinitionOutput).
    pub fn builder() -> crate::output::put_alert_manager_definition_output::Builder {
        crate::output::put_alert_manager_definition_output::Builder::default()
    }
}

/// See [`PutAlertManagerDefinitionOutput`](crate::output::PutAlertManagerDefinitionOutput).
pub mod put_alert_manager_definition_output {

    /// A builder for [`PutAlertManagerDefinitionOutput`](crate::output::PutAlertManagerDefinitionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::AlertManagerDefinitionStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The status of alert manager definition.
        pub fn status(mut self, input: crate::model::AlertManagerDefinitionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// The status of alert manager definition.
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::AlertManagerDefinitionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutAlertManagerDefinitionOutput`](crate::output::PutAlertManagerDefinitionOutput).
        pub fn build(self) -> crate::output::PutAlertManagerDefinitionOutput {
            crate::output::PutAlertManagerDefinitionOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}

/// Represents the output of a DescribeAlertManagerDefinition operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAlertManagerDefinitionOutput {
    /// The properties of the selected workspace's alert manager definition.
    #[doc(hidden)]
    pub alert_manager_definition:
        std::option::Option<crate::model::AlertManagerDefinitionDescription>,
    _request_id: Option<String>,
}
impl DescribeAlertManagerDefinitionOutput {
    /// The properties of the selected workspace's alert manager definition.
    pub fn alert_manager_definition(
        &self,
    ) -> std::option::Option<&crate::model::AlertManagerDefinitionDescription> {
        self.alert_manager_definition.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAlertManagerDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAlertManagerDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAlertManagerDefinitionOutput`](crate::output::DescribeAlertManagerDefinitionOutput).
    pub fn builder() -> crate::output::describe_alert_manager_definition_output::Builder {
        crate::output::describe_alert_manager_definition_output::Builder::default()
    }
}

/// See [`DescribeAlertManagerDefinitionOutput`](crate::output::DescribeAlertManagerDefinitionOutput).
pub mod describe_alert_manager_definition_output {

    /// A builder for [`DescribeAlertManagerDefinitionOutput`](crate::output::DescribeAlertManagerDefinitionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) alert_manager_definition:
            std::option::Option<crate::model::AlertManagerDefinitionDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// The properties of the selected workspace's alert manager definition.
        pub fn alert_manager_definition(
            mut self,
            input: crate::model::AlertManagerDefinitionDescription,
        ) -> Self {
            self.alert_manager_definition = Some(input);
            self
        }
        /// The properties of the selected workspace's alert manager definition.
        pub fn set_alert_manager_definition(
            mut self,
            input: std::option::Option<crate::model::AlertManagerDefinitionDescription>,
        ) -> Self {
            self.alert_manager_definition = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAlertManagerDefinitionOutput`](crate::output::DescribeAlertManagerDefinitionOutput).
        pub fn build(self) -> crate::output::DescribeAlertManagerDefinitionOutput {
            crate::output::DescribeAlertManagerDefinitionOutput {
                alert_manager_definition: self.alert_manager_definition,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// The list of tags assigned to the resource.
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// The list of tags assigned to the resource.
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// The list of tags assigned to the resource.
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// The list of tags assigned to the resource.
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
