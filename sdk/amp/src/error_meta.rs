// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request would cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An unexpected error occurred during the processing of the request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The request references a resources that doesn't exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Completing the request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError> for Error {
    fn from(err: crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError) -> Self {
        match err {
            crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_alert_manager_definition::CreateAlertManagerDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_anomaly_detector::CreateAnomalyDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_anomaly_detector::CreateAnomalyDetectorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_anomaly_detector::CreateAnomalyDetectorError> for Error {
    fn from(err: crate::operation::create_anomaly_detector::CreateAnomalyDetectorError) -> Self {
        match err {
            crate::operation::create_anomaly_detector::CreateAnomalyDetectorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_anomaly_detector::CreateAnomalyDetectorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_anomaly_detector::CreateAnomalyDetectorError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_anomaly_detector::CreateAnomalyDetectorError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_anomaly_detector::CreateAnomalyDetectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_anomaly_detector::CreateAnomalyDetectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_anomaly_detector::CreateAnomalyDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_logging_configuration::CreateLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_logging_configuration::CreateLoggingConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_logging_configuration::CreateLoggingConfigurationError> for Error {
    fn from(err: crate::operation::create_logging_configuration::CreateLoggingConfigurationError) -> Self {
        match err {
            crate::operation::create_logging_configuration::CreateLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_logging_configuration::CreateLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_logging_configuration::CreateLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_logging_configuration::CreateLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_logging_configuration::CreateLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationError> for Error {
    fn from(err: crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationError) -> Self {
        match err {
            crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError> for Error {
    fn from(err: crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError) -> Self {
        match err {
            crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_rule_groups_namespace::CreateRuleGroupsNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_scraper::CreateScraperError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_scraper::CreateScraperError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_scraper::CreateScraperError> for Error {
    fn from(err: crate::operation::create_scraper::CreateScraperError) -> Self {
        match err {
            crate::operation::create_scraper::CreateScraperError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_scraper::CreateScraperError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_scraper::CreateScraperError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_scraper::CreateScraperError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_scraper::CreateScraperError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_scraper::CreateScraperError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_scraper::CreateScraperError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_scraper::CreateScraperError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workspace::CreateWorkspaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workspace::CreateWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_workspace::CreateWorkspaceError> for Error {
    fn from(err: crate::operation::create_workspace::CreateWorkspaceError) -> Self {
        match err {
            crate::operation::create_workspace::CreateWorkspaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_workspace::CreateWorkspaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError> for Error {
    fn from(err: crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError) -> Self {
        match err {
            crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_alert_manager_definition::DeleteAlertManagerDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError> for Error {
    fn from(err: crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError) -> Self {
        match err {
            crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError> for Error {
    fn from(err: crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError) -> Self {
        match err {
            crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_logging_configuration::DeleteLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError> for Error {
    fn from(err: crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError) -> Self {
        match err {
            crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_query_logging_configuration::DeleteQueryLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_policy::DeleteResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_policy::DeleteResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_resource_policy::DeleteResourcePolicyError> for Error {
    fn from(err: crate::operation::delete_resource_policy::DeleteResourcePolicyError) -> Self {
        match err {
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError> for Error {
    fn from(err: crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError) -> Self {
        match err {
            crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_rule_groups_namespace::DeleteRuleGroupsNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_scraper::DeleteScraperError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_scraper::DeleteScraperError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_scraper::DeleteScraperError> for Error {
    fn from(err: crate::operation::delete_scraper::DeleteScraperError) -> Self {
        match err {
            crate::operation::delete_scraper::DeleteScraperError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_scraper::DeleteScraperError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_scraper::DeleteScraperError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_scraper::DeleteScraperError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_scraper::DeleteScraperError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_scraper::DeleteScraperError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_scraper::DeleteScraperError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError> for Error {
    fn from(err: crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError) -> Self {
        match err {
            crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_scraper_logging_configuration::DeleteScraperLoggingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workspace::DeleteWorkspaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workspace::DeleteWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_workspace::DeleteWorkspaceError> for Error {
    fn from(err: crate::operation::delete_workspace::DeleteWorkspaceError) -> Self {
        match err {
            crate::operation::delete_workspace::DeleteWorkspaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError> for Error {
    fn from(err: crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError) -> Self {
        match err {
            crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_alert_manager_definition::DescribeAlertManagerDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError> for Error {
    fn from(err: crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError) -> Self {
        match err {
            crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_logging_configuration::DescribeLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_logging_configuration::DescribeLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_logging_configuration::DescribeLoggingConfigurationError> for Error {
    fn from(err: crate::operation::describe_logging_configuration::DescribeLoggingConfigurationError) -> Self {
        match err {
            crate::operation::describe_logging_configuration::DescribeLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_logging_configuration::DescribeLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_logging_configuration::DescribeLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_logging_configuration::DescribeLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_logging_configuration::DescribeLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_query_logging_configuration::DescribeQueryLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_query_logging_configuration::DescribeQueryLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_query_logging_configuration::DescribeQueryLoggingConfigurationError> for Error {
    fn from(err: crate::operation::describe_query_logging_configuration::DescribeQueryLoggingConfigurationError) -> Self {
        match err {
            crate::operation::describe_query_logging_configuration::DescribeQueryLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_query_logging_configuration::DescribeQueryLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_query_logging_configuration::DescribeQueryLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_query_logging_configuration::DescribeQueryLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_query_logging_configuration::DescribeQueryLoggingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_resource_policy::DescribeResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_resource_policy::DescribeResourcePolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_resource_policy::DescribeResourcePolicyError> for Error {
    fn from(err: crate::operation::describe_resource_policy::DescribeResourcePolicyError) -> Self {
        match err {
            crate::operation::describe_resource_policy::DescribeResourcePolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_resource_policy::DescribeResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_resource_policy::DescribeResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_resource_policy::DescribeResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_resource_policy::DescribeResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_resource_policy::DescribeResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError> for Error {
    fn from(err: crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError) -> Self {
        match err {
            crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_rule_groups_namespace::DescribeRuleGroupsNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_scraper::DescribeScraperError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_scraper::DescribeScraperError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_scraper::DescribeScraperError> for Error {
    fn from(err: crate::operation::describe_scraper::DescribeScraperError) -> Self {
        match err {
            crate::operation::describe_scraper::DescribeScraperError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_scraper::DescribeScraperError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_scraper::DescribeScraperError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_scraper::DescribeScraperError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_scraper::DescribeScraperError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_scraper::DescribeScraperError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationError> for Error {
    fn from(err: crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationError) -> Self {
        match err {
            crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_workspace::DescribeWorkspaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_workspace::DescribeWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_workspace::DescribeWorkspaceError> for Error {
    fn from(err: crate::operation::describe_workspace::DescribeWorkspaceError) -> Self {
        match err {
            crate::operation::describe_workspace::DescribeWorkspaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_workspace::DescribeWorkspaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_workspace::DescribeWorkspaceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_workspace::DescribeWorkspaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_workspace::DescribeWorkspaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_workspace::DescribeWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError> for Error {
    fn from(err: crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError) -> Self {
        match err {
            crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_workspace_configuration::DescribeWorkspaceConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_default_scraper_configuration::GetDefaultScraperConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_default_scraper_configuration::GetDefaultScraperConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_default_scraper_configuration::GetDefaultScraperConfigurationError> for Error {
    fn from(err: crate::operation::get_default_scraper_configuration::GetDefaultScraperConfigurationError) -> Self {
        match err {
            crate::operation::get_default_scraper_configuration::GetDefaultScraperConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_default_scraper_configuration::GetDefaultScraperConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_default_scraper_configuration::GetDefaultScraperConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_default_scraper_configuration::GetDefaultScraperConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError> for Error {
    fn from(err: crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError) -> Self {
        match err {
            crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_anomaly_detectors::ListAnomalyDetectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError> for Error {
    fn from(err: crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError) -> Self {
        match err {
            crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_scrapers::ListScrapersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_scrapers::ListScrapersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_scrapers::ListScrapersError> for Error {
    fn from(err: crate::operation::list_scrapers::ListScrapersError) -> Self {
        match err {
            crate::operation::list_scrapers::ListScrapersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_scrapers::ListScrapersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_scrapers::ListScrapersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_scrapers::ListScrapersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_scrapers::ListScrapersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workspaces::ListWorkspacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workspaces::ListWorkspacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_workspaces::ListWorkspacesError> for Error {
    fn from(err: crate::operation::list_workspaces::ListWorkspacesError) -> Self {
        match err {
            crate::operation::list_workspaces::ListWorkspacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_workspaces::ListWorkspacesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_workspaces::ListWorkspacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workspaces::ListWorkspacesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workspaces::ListWorkspacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError> for Error {
    fn from(err: crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError) -> Self {
        match err {
            crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_alert_manager_definition::PutAlertManagerDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_anomaly_detector::PutAnomalyDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_anomaly_detector::PutAnomalyDetectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_anomaly_detector::PutAnomalyDetectorError> for Error {
    fn from(err: crate::operation::put_anomaly_detector::PutAnomalyDetectorError) -> Self {
        match err {
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_policy::PutResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_policy::PutResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_resource_policy::PutResourcePolicyError> for Error {
    fn from(err: crate::operation::put_resource_policy::PutResourcePolicyError) -> Self {
        match err {
            crate::operation::put_resource_policy::PutResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_resource_policy::PutResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError> for Error {
    fn from(err: crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError) -> Self {
        match err {
            crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_logging_configuration::UpdateLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_logging_configuration::UpdateLoggingConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_logging_configuration::UpdateLoggingConfigurationError> for Error {
    fn from(err: crate::operation::update_logging_configuration::UpdateLoggingConfigurationError) -> Self {
        match err {
            crate::operation::update_logging_configuration::UpdateLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_logging_configuration::UpdateLoggingConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_logging_configuration::UpdateLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_logging_configuration::UpdateLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_logging_configuration::UpdateLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_logging_configuration::UpdateLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError> for Error {
    fn from(err: crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError) -> Self {
        match err {
            crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_query_logging_configuration::UpdateQueryLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_scraper::UpdateScraperError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_scraper::UpdateScraperError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_scraper::UpdateScraperError> for Error {
    fn from(err: crate::operation::update_scraper::UpdateScraperError) -> Self {
        match err {
            crate::operation::update_scraper::UpdateScraperError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_scraper::UpdateScraperError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_scraper::UpdateScraperError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_scraper::UpdateScraperError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_scraper::UpdateScraperError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_scraper::UpdateScraperError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_scraper::UpdateScraperError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_scraper::UpdateScraperError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError> for Error {
    fn from(err: crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError) -> Self {
        match err {
            crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workspace_alias::UpdateWorkspaceAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workspace_alias::UpdateWorkspaceAliasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_workspace_alias::UpdateWorkspaceAliasError> for Error {
    fn from(err: crate::operation::update_workspace_alias::UpdateWorkspaceAliasError) -> Self {
        match err {
            crate::operation::update_workspace_alias::UpdateWorkspaceAliasError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_workspace_alias::UpdateWorkspaceAliasError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_workspace_alias::UpdateWorkspaceAliasError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_workspace_alias::UpdateWorkspaceAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_workspace_alias::UpdateWorkspaceAliasError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_workspace_alias::UpdateWorkspaceAliasError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_workspace_alias::UpdateWorkspaceAliasError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workspace_alias::UpdateWorkspaceAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError> for Error {
    fn from(err: crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError) -> Self {
        match err {
            crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<O, E> ::std::convert::From<::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>> for Error
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            meta: ::std::default::Default::default(),
            source: err.into(),
        })
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
