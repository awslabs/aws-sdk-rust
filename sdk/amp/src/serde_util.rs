// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn create_alert_manager_definition_output_correct_errors(
    mut builder: crate::operation::create_alert_manager_definition::builders::CreateAlertManagerDefinitionOutputBuilder,
) -> crate::operation::create_alert_manager_definition::builders::CreateAlertManagerDefinitionOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AlertManagerDefinitionStatusBuilder::default();
            crate::serde_util::alert_manager_definition_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_logging_configuration_output_correct_errors(
    mut builder: crate::operation::create_logging_configuration::builders::CreateLoggingConfigurationOutputBuilder,
) -> crate::operation::create_logging_configuration::builders::CreateLoggingConfigurationOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::LoggingConfigurationStatusBuilder::default();
            crate::serde_util::logging_configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_rule_groups_namespace_output_correct_errors(
    mut builder: crate::operation::create_rule_groups_namespace::builders::CreateRuleGroupsNamespaceOutputBuilder,
) -> crate::operation::create_rule_groups_namespace::builders::CreateRuleGroupsNamespaceOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::RuleGroupsNamespaceStatusBuilder::default();
            crate::serde_util::rule_groups_namespace_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_workspace_output_correct_errors(
    mut builder: crate::operation::create_workspace::builders::CreateWorkspaceOutputBuilder,
) -> crate::operation::create_workspace::builders::CreateWorkspaceOutputBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::WorkspaceStatusBuilder::default();
            crate::serde_util::workspace_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_alert_manager_definition_output_correct_errors(
    mut builder: crate::operation::describe_alert_manager_definition::builders::DescribeAlertManagerDefinitionOutputBuilder,
) -> crate::operation::describe_alert_manager_definition::builders::DescribeAlertManagerDefinitionOutputBuilder {
    if builder.alert_manager_definition.is_none() {
        builder.alert_manager_definition = {
            let builder = crate::types::builders::AlertManagerDefinitionDescriptionBuilder::default();
            crate::serde_util::alert_manager_definition_description_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn describe_logging_configuration_output_correct_errors(
    mut builder: crate::operation::describe_logging_configuration::builders::DescribeLoggingConfigurationOutputBuilder,
) -> crate::operation::describe_logging_configuration::builders::DescribeLoggingConfigurationOutputBuilder {
    if builder.logging_configuration.is_none() {
        builder.logging_configuration = {
            let builder = crate::types::builders::LoggingConfigurationMetadataBuilder::default();
            crate::serde_util::logging_configuration_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_rule_groups_namespace_output_correct_errors(
    mut builder: crate::operation::describe_rule_groups_namespace::builders::DescribeRuleGroupsNamespaceOutputBuilder,
) -> crate::operation::describe_rule_groups_namespace::builders::DescribeRuleGroupsNamespaceOutputBuilder {
    if builder.rule_groups_namespace.is_none() {
        builder.rule_groups_namespace = {
            let builder = crate::types::builders::RuleGroupsNamespaceDescriptionBuilder::default();
            crate::serde_util::rule_groups_namespace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_workspace_output_correct_errors(
    mut builder: crate::operation::describe_workspace::builders::DescribeWorkspaceOutputBuilder,
) -> crate::operation::describe_workspace::builders::DescribeWorkspaceOutputBuilder {
    if builder.workspace.is_none() {
        builder.workspace = {
            let builder = crate::types::builders::WorkspaceDescriptionBuilder::default();
            crate::serde_util::workspace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_rule_groups_namespaces_output_correct_errors(
    mut builder: crate::operation::list_rule_groups_namespaces::builders::ListRuleGroupsNamespacesOutputBuilder,
) -> crate::operation::list_rule_groups_namespaces::builders::ListRuleGroupsNamespacesOutputBuilder {
    if builder.rule_groups_namespaces.is_none() {
        builder.rule_groups_namespaces = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workspaces_output_correct_errors(
    mut builder: crate::operation::list_workspaces::builders::ListWorkspacesOutputBuilder,
) -> crate::operation::list_workspaces::builders::ListWorkspacesOutputBuilder {
    if builder.workspaces.is_none() {
        builder.workspaces = Some(Default::default())
    }
    builder
}

pub(crate) fn put_alert_manager_definition_output_correct_errors(
    mut builder: crate::operation::put_alert_manager_definition::builders::PutAlertManagerDefinitionOutputBuilder,
) -> crate::operation::put_alert_manager_definition::builders::PutAlertManagerDefinitionOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AlertManagerDefinitionStatusBuilder::default();
            crate::serde_util::alert_manager_definition_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn put_rule_groups_namespace_output_correct_errors(
    mut builder: crate::operation::put_rule_groups_namespace::builders::PutRuleGroupsNamespaceOutputBuilder,
) -> crate::operation::put_rule_groups_namespace::builders::PutRuleGroupsNamespaceOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::RuleGroupsNamespaceStatusBuilder::default();
            crate::serde_util::rule_groups_namespace_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_logging_configuration_output_correct_errors(
    mut builder: crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationOutputBuilder,
) -> crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::LoggingConfigurationStatusBuilder::default();
            crate::serde_util::logging_configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn alert_manager_definition_status_correct_errors(
    mut builder: crate::types::builders::AlertManagerDefinitionStatusBuilder,
) -> crate::types::builders::AlertManagerDefinitionStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::AlertManagerDefinitionStatusCode>().ok()
    }
    builder
}

pub(crate) fn logging_configuration_status_correct_errors(
    mut builder: crate::types::builders::LoggingConfigurationStatusBuilder,
) -> crate::types::builders::LoggingConfigurationStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::LoggingConfigurationStatusCode>().ok()
    }
    builder
}

pub(crate) fn rule_groups_namespace_status_correct_errors(
    mut builder: crate::types::builders::RuleGroupsNamespaceStatusBuilder,
) -> crate::types::builders::RuleGroupsNamespaceStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::RuleGroupsNamespaceStatusCode>().ok()
    }
    builder
}

pub(crate) fn workspace_status_correct_errors(
    mut builder: crate::types::builders::WorkspaceStatusBuilder,
) -> crate::types::builders::WorkspaceStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::WorkspaceStatusCode>().ok()
    }
    builder
}

pub(crate) fn alert_manager_definition_description_correct_errors(
    mut builder: crate::types::builders::AlertManagerDefinitionDescriptionBuilder,
) -> crate::types::builders::AlertManagerDefinitionDescriptionBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AlertManagerDefinitionStatusBuilder::default();
            crate::serde_util::alert_manager_definition_status_correct_errors(builder).build().ok()
        }
    }
    if builder.data.is_none() {
        builder.data = Some(::aws_smithy_types::Blob::new(""))
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn logging_configuration_metadata_correct_errors(
    mut builder: crate::types::builders::LoggingConfigurationMetadataBuilder,
) -> crate::types::builders::LoggingConfigurationMetadataBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::LoggingConfigurationStatusBuilder::default();
            crate::serde_util::logging_configuration_status_correct_errors(builder).build().ok()
        }
    }
    if builder.workspace.is_none() {
        builder.workspace = Some(Default::default())
    }
    if builder.log_group_arn.is_none() {
        builder.log_group_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn rule_groups_namespace_description_correct_errors(
    mut builder: crate::types::builders::RuleGroupsNamespaceDescriptionBuilder,
) -> crate::types::builders::RuleGroupsNamespaceDescriptionBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::RuleGroupsNamespaceStatusBuilder::default();
            crate::serde_util::rule_groups_namespace_status_correct_errors(builder).build().ok()
        }
    }
    if builder.data.is_none() {
        builder.data = Some(::aws_smithy_types::Blob::new(""))
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn workspace_description_correct_errors(
    mut builder: crate::types::builders::WorkspaceDescriptionBuilder,
) -> crate::types::builders::WorkspaceDescriptionBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::WorkspaceStatusBuilder::default();
            crate::serde_util::workspace_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn rule_groups_namespace_summary_correct_errors(
    mut builder: crate::types::builders::RuleGroupsNamespaceSummaryBuilder,
) -> crate::types::builders::RuleGroupsNamespaceSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::RuleGroupsNamespaceStatusBuilder::default();
            crate::serde_util::rule_groups_namespace_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn workspace_summary_correct_errors(
    mut builder: crate::types::builders::WorkspaceSummaryBuilder,
) -> crate::types::builders::WorkspaceSummaryBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::WorkspaceStatusBuilder::default();
            crate::serde_util::workspace_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}
