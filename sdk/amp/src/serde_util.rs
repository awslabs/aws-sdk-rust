// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn create_alert_manager_definition_output_output_correct_errors(
    mut builder: crate::operation::create_alert_manager_definition::builders::CreateAlertManagerDefinitionOutputBuilder,
) -> crate::operation::create_alert_manager_definition::builders::CreateAlertManagerDefinitionOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AlertManagerDefinitionStatusBuilder::default();
            crate::serde_util::alert_manager_definition_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_anomaly_detector_output_output_correct_errors(
    mut builder: crate::operation::create_anomaly_detector::builders::CreateAnomalyDetectorOutputBuilder,
) -> crate::operation::create_anomaly_detector::builders::CreateAnomalyDetectorOutputBuilder {
    if builder.anomaly_detector_id.is_none() {
        builder.anomaly_detector_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AnomalyDetectorStatusBuilder::default();
            crate::serde_util::anomaly_detector_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_logging_configuration_output_output_correct_errors(
    mut builder: crate::operation::create_logging_configuration::builders::CreateLoggingConfigurationOutputBuilder,
) -> crate::operation::create_logging_configuration::builders::CreateLoggingConfigurationOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::LoggingConfigurationStatusBuilder::default();
            crate::serde_util::logging_configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_query_logging_configuration_output_output_correct_errors(
    mut builder: crate::operation::create_query_logging_configuration::builders::CreateQueryLoggingConfigurationOutputBuilder,
) -> crate::operation::create_query_logging_configuration::builders::CreateQueryLoggingConfigurationOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::QueryLoggingConfigurationStatusBuilder::default();
            crate::serde_util::query_logging_configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_rule_groups_namespace_output_output_correct_errors(
    mut builder: crate::operation::create_rule_groups_namespace::builders::CreateRuleGroupsNamespaceOutputBuilder,
) -> crate::operation::create_rule_groups_namespace::builders::CreateRuleGroupsNamespaceOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::RuleGroupsNamespaceStatusBuilder::default();
            crate::serde_util::rule_groups_namespace_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_scraper_output_output_correct_errors(
    mut builder: crate::operation::create_scraper::builders::CreateScraperOutputBuilder,
) -> crate::operation::create_scraper::builders::CreateScraperOutputBuilder {
    if builder.scraper_id.is_none() {
        builder.scraper_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::ScraperStatusBuilder::default();
            crate::serde_util::scraper_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_workspace_output_output_correct_errors(
    mut builder: crate::operation::create_workspace::builders::CreateWorkspaceOutputBuilder,
) -> crate::operation::create_workspace::builders::CreateWorkspaceOutputBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::WorkspaceStatusBuilder::default();
            crate::serde_util::workspace_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_scraper_output_output_correct_errors(
    mut builder: crate::operation::delete_scraper::builders::DeleteScraperOutputBuilder,
) -> crate::operation::delete_scraper::builders::DeleteScraperOutputBuilder {
    if builder.scraper_id.is_none() {
        builder.scraper_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::ScraperStatusBuilder::default();
            crate::serde_util::scraper_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_alert_manager_definition_output_output_correct_errors(
    mut builder: crate::operation::describe_alert_manager_definition::builders::DescribeAlertManagerDefinitionOutputBuilder,
) -> crate::operation::describe_alert_manager_definition::builders::DescribeAlertManagerDefinitionOutputBuilder {
    if builder.alert_manager_definition.is_none() {
        builder.alert_manager_definition = {
            let builder = crate::types::builders::AlertManagerDefinitionDescriptionBuilder::default();
            crate::serde_util::alert_manager_definition_description_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn describe_anomaly_detector_output_output_correct_errors(
    mut builder: crate::operation::describe_anomaly_detector::builders::DescribeAnomalyDetectorOutputBuilder,
) -> crate::operation::describe_anomaly_detector::builders::DescribeAnomalyDetectorOutputBuilder {
    if builder.anomaly_detector.is_none() {
        builder.anomaly_detector = {
            let builder = crate::types::builders::AnomalyDetectorDescriptionBuilder::default();
            crate::serde_util::anomaly_detector_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_logging_configuration_output_output_correct_errors(
    mut builder: crate::operation::describe_logging_configuration::builders::DescribeLoggingConfigurationOutputBuilder,
) -> crate::operation::describe_logging_configuration::builders::DescribeLoggingConfigurationOutputBuilder {
    if builder.logging_configuration.is_none() {
        builder.logging_configuration = {
            let builder = crate::types::builders::LoggingConfigurationMetadataBuilder::default();
            crate::serde_util::logging_configuration_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_query_logging_configuration_output_output_correct_errors(
    mut builder: crate::operation::describe_query_logging_configuration::builders::DescribeQueryLoggingConfigurationOutputBuilder,
) -> crate::operation::describe_query_logging_configuration::builders::DescribeQueryLoggingConfigurationOutputBuilder {
    if builder.query_logging_configuration.is_none() {
        builder.query_logging_configuration = {
            let builder = crate::types::builders::QueryLoggingConfigurationMetadataBuilder::default();
            crate::serde_util::query_logging_configuration_metadata_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn describe_resource_policy_output_output_correct_errors(
    mut builder: crate::operation::describe_resource_policy::builders::DescribeResourcePolicyOutputBuilder,
) -> crate::operation::describe_resource_policy::builders::DescribeResourcePolicyOutputBuilder {
    if builder.policy_document.is_none() {
        builder.policy_document = Some(Default::default())
    }
    if builder.policy_status.is_none() {
        builder.policy_status = "no value was set".parse::<crate::types::WorkspacePolicyStatusCode>().ok()
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_rule_groups_namespace_output_output_correct_errors(
    mut builder: crate::operation::describe_rule_groups_namespace::builders::DescribeRuleGroupsNamespaceOutputBuilder,
) -> crate::operation::describe_rule_groups_namespace::builders::DescribeRuleGroupsNamespaceOutputBuilder {
    if builder.rule_groups_namespace.is_none() {
        builder.rule_groups_namespace = {
            let builder = crate::types::builders::RuleGroupsNamespaceDescriptionBuilder::default();
            crate::serde_util::rule_groups_namespace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_scraper_output_output_correct_errors(
    mut builder: crate::operation::describe_scraper::builders::DescribeScraperOutputBuilder,
) -> crate::operation::describe_scraper::builders::DescribeScraperOutputBuilder {
    if builder.scraper.is_none() {
        builder.scraper = {
            let builder = crate::types::builders::ScraperDescriptionBuilder::default();
            crate::serde_util::scraper_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_scraper_logging_configuration_output_output_correct_errors(
    mut builder: crate::operation::describe_scraper_logging_configuration::builders::DescribeScraperLoggingConfigurationOutputBuilder,
) -> crate::operation::describe_scraper_logging_configuration::builders::DescribeScraperLoggingConfigurationOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::ScraperLoggingConfigurationStatusBuilder::default();
            crate::serde_util::scraper_logging_configuration_status_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.scraper_id.is_none() {
        builder.scraper_id = Some(Default::default())
    }
    if builder.logging_destination.is_none() {
        builder.logging_destination = Some(crate::types::ScraperLoggingDestination::Unknown)
    }
    if builder.scraper_components.is_none() {
        builder.scraper_components = Some(Default::default())
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_workspace_output_output_correct_errors(
    mut builder: crate::operation::describe_workspace::builders::DescribeWorkspaceOutputBuilder,
) -> crate::operation::describe_workspace::builders::DescribeWorkspaceOutputBuilder {
    if builder.workspace.is_none() {
        builder.workspace = {
            let builder = crate::types::builders::WorkspaceDescriptionBuilder::default();
            crate::serde_util::workspace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_workspace_configuration_output_output_correct_errors(
    mut builder: crate::operation::describe_workspace_configuration::builders::DescribeWorkspaceConfigurationOutputBuilder,
) -> crate::operation::describe_workspace_configuration::builders::DescribeWorkspaceConfigurationOutputBuilder {
    if builder.workspace_configuration.is_none() {
        builder.workspace_configuration = {
            let builder = crate::types::builders::WorkspaceConfigurationDescriptionBuilder::default();
            Some(crate::serde_util::workspace_configuration_description_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_default_scraper_configuration_output_output_correct_errors(
    mut builder: crate::operation::get_default_scraper_configuration::builders::GetDefaultScraperConfigurationOutputBuilder,
) -> crate::operation::get_default_scraper_configuration::builders::GetDefaultScraperConfigurationOutputBuilder {
    if builder.configuration.is_none() {
        builder.configuration = Some(::aws_smithy_types::Blob::new(""))
    }
    builder
}

pub(crate) fn list_anomaly_detectors_output_output_correct_errors(
    mut builder: crate::operation::list_anomaly_detectors::builders::ListAnomalyDetectorsOutputBuilder,
) -> crate::operation::list_anomaly_detectors::builders::ListAnomalyDetectorsOutputBuilder {
    if builder.anomaly_detectors.is_none() {
        builder.anomaly_detectors = Some(Default::default())
    }
    builder
}

pub(crate) fn list_rule_groups_namespaces_output_output_correct_errors(
    mut builder: crate::operation::list_rule_groups_namespaces::builders::ListRuleGroupsNamespacesOutputBuilder,
) -> crate::operation::list_rule_groups_namespaces::builders::ListRuleGroupsNamespacesOutputBuilder {
    if builder.rule_groups_namespaces.is_none() {
        builder.rule_groups_namespaces = Some(Default::default())
    }
    builder
}

pub(crate) fn list_scrapers_output_output_correct_errors(
    mut builder: crate::operation::list_scrapers::builders::ListScrapersOutputBuilder,
) -> crate::operation::list_scrapers::builders::ListScrapersOutputBuilder {
    if builder.scrapers.is_none() {
        builder.scrapers = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workspaces_output_output_correct_errors(
    mut builder: crate::operation::list_workspaces::builders::ListWorkspacesOutputBuilder,
) -> crate::operation::list_workspaces::builders::ListWorkspacesOutputBuilder {
    if builder.workspaces.is_none() {
        builder.workspaces = Some(Default::default())
    }
    builder
}

pub(crate) fn put_alert_manager_definition_output_output_correct_errors(
    mut builder: crate::operation::put_alert_manager_definition::builders::PutAlertManagerDefinitionOutputBuilder,
) -> crate::operation::put_alert_manager_definition::builders::PutAlertManagerDefinitionOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AlertManagerDefinitionStatusBuilder::default();
            crate::serde_util::alert_manager_definition_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn put_anomaly_detector_output_output_correct_errors(
    mut builder: crate::operation::put_anomaly_detector::builders::PutAnomalyDetectorOutputBuilder,
) -> crate::operation::put_anomaly_detector::builders::PutAnomalyDetectorOutputBuilder {
    if builder.anomaly_detector_id.is_none() {
        builder.anomaly_detector_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AnomalyDetectorStatusBuilder::default();
            crate::serde_util::anomaly_detector_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn put_resource_policy_output_output_correct_errors(
    mut builder: crate::operation::put_resource_policy::builders::PutResourcePolicyOutputBuilder,
) -> crate::operation::put_resource_policy::builders::PutResourcePolicyOutputBuilder {
    if builder.policy_status.is_none() {
        builder.policy_status = "no value was set".parse::<crate::types::WorkspacePolicyStatusCode>().ok()
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn put_rule_groups_namespace_output_output_correct_errors(
    mut builder: crate::operation::put_rule_groups_namespace::builders::PutRuleGroupsNamespaceOutputBuilder,
) -> crate::operation::put_rule_groups_namespace::builders::PutRuleGroupsNamespaceOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::RuleGroupsNamespaceStatusBuilder::default();
            crate::serde_util::rule_groups_namespace_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_logging_configuration_output_output_correct_errors(
    mut builder: crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationOutputBuilder,
) -> crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::LoggingConfigurationStatusBuilder::default();
            crate::serde_util::logging_configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_query_logging_configuration_output_output_correct_errors(
    mut builder: crate::operation::update_query_logging_configuration::builders::UpdateQueryLoggingConfigurationOutputBuilder,
) -> crate::operation::update_query_logging_configuration::builders::UpdateQueryLoggingConfigurationOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::QueryLoggingConfigurationStatusBuilder::default();
            crate::serde_util::query_logging_configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_scraper_output_output_correct_errors(
    mut builder: crate::operation::update_scraper::builders::UpdateScraperOutputBuilder,
) -> crate::operation::update_scraper::builders::UpdateScraperOutputBuilder {
    if builder.scraper_id.is_none() {
        builder.scraper_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::ScraperStatusBuilder::default();
            crate::serde_util::scraper_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_scraper_logging_configuration_output_output_correct_errors(
    mut builder: crate::operation::update_scraper_logging_configuration::builders::UpdateScraperLoggingConfigurationOutputBuilder,
) -> crate::operation::update_scraper_logging_configuration::builders::UpdateScraperLoggingConfigurationOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::ScraperLoggingConfigurationStatusBuilder::default();
            crate::serde_util::scraper_logging_configuration_status_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn update_workspace_configuration_output_output_correct_errors(
    mut builder: crate::operation::update_workspace_configuration::builders::UpdateWorkspaceConfigurationOutputBuilder,
) -> crate::operation::update_workspace_configuration::builders::UpdateWorkspaceConfigurationOutputBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::WorkspaceConfigurationStatusBuilder::default();
            crate::serde_util::workspace_configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn alert_manager_definition_status_correct_errors(
    mut builder: crate::types::builders::AlertManagerDefinitionStatusBuilder,
) -> crate::types::builders::AlertManagerDefinitionStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::AlertManagerDefinitionStatusCode>().ok()
    }
    builder
}

pub(crate) fn anomaly_detector_status_correct_errors(
    mut builder: crate::types::builders::AnomalyDetectorStatusBuilder,
) -> crate::types::builders::AnomalyDetectorStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::AnomalyDetectorStatusCode>().ok()
    }
    builder
}

pub(crate) fn logging_configuration_status_correct_errors(
    mut builder: crate::types::builders::LoggingConfigurationStatusBuilder,
) -> crate::types::builders::LoggingConfigurationStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::LoggingConfigurationStatusCode>().ok()
    }
    builder
}

pub(crate) fn query_logging_configuration_status_correct_errors(
    mut builder: crate::types::builders::QueryLoggingConfigurationStatusBuilder,
) -> crate::types::builders::QueryLoggingConfigurationStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::QueryLoggingConfigurationStatusCode>().ok()
    }
    builder
}

pub(crate) fn rule_groups_namespace_status_correct_errors(
    mut builder: crate::types::builders::RuleGroupsNamespaceStatusBuilder,
) -> crate::types::builders::RuleGroupsNamespaceStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::RuleGroupsNamespaceStatusCode>().ok()
    }
    builder
}

pub(crate) fn scraper_status_correct_errors(
    mut builder: crate::types::builders::ScraperStatusBuilder,
) -> crate::types::builders::ScraperStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::ScraperStatusCode>().ok()
    }
    builder
}

pub(crate) fn workspace_status_correct_errors(
    mut builder: crate::types::builders::WorkspaceStatusBuilder,
) -> crate::types::builders::WorkspaceStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::WorkspaceStatusCode>().ok()
    }
    builder
}

pub(crate) fn alert_manager_definition_description_correct_errors(
    mut builder: crate::types::builders::AlertManagerDefinitionDescriptionBuilder,
) -> crate::types::builders::AlertManagerDefinitionDescriptionBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AlertManagerDefinitionStatusBuilder::default();
            crate::serde_util::alert_manager_definition_status_correct_errors(builder).build().ok()
        }
    }
    if builder.data.is_none() {
        builder.data = Some(::aws_smithy_types::Blob::new(""))
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn anomaly_detector_description_correct_errors(
    mut builder: crate::types::builders::AnomalyDetectorDescriptionBuilder,
) -> crate::types::builders::AnomalyDetectorDescriptionBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.anomaly_detector_id.is_none() {
        builder.anomaly_detector_id = Some(Default::default())
    }
    if builder.alias.is_none() {
        builder.alias = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AnomalyDetectorStatusBuilder::default();
            crate::serde_util::anomaly_detector_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn logging_configuration_metadata_correct_errors(
    mut builder: crate::types::builders::LoggingConfigurationMetadataBuilder,
) -> crate::types::builders::LoggingConfigurationMetadataBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::LoggingConfigurationStatusBuilder::default();
            crate::serde_util::logging_configuration_status_correct_errors(builder).build().ok()
        }
    }
    if builder.workspace.is_none() {
        builder.workspace = Some(Default::default())
    }
    if builder.log_group_arn.is_none() {
        builder.log_group_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn query_logging_configuration_metadata_correct_errors(
    mut builder: crate::types::builders::QueryLoggingConfigurationMetadataBuilder,
) -> crate::types::builders::QueryLoggingConfigurationMetadataBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::QueryLoggingConfigurationStatusBuilder::default();
            crate::serde_util::query_logging_configuration_status_correct_errors(builder).build().ok()
        }
    }
    if builder.workspace.is_none() {
        builder.workspace = Some(Default::default())
    }
    if builder.destinations.is_none() {
        builder.destinations = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn rule_groups_namespace_description_correct_errors(
    mut builder: crate::types::builders::RuleGroupsNamespaceDescriptionBuilder,
) -> crate::types::builders::RuleGroupsNamespaceDescriptionBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::RuleGroupsNamespaceStatusBuilder::default();
            crate::serde_util::rule_groups_namespace_status_correct_errors(builder).build().ok()
        }
    }
    if builder.data.is_none() {
        builder.data = Some(::aws_smithy_types::Blob::new(""))
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn scraper_description_correct_errors(
    mut builder: crate::types::builders::ScraperDescriptionBuilder,
) -> crate::types::builders::ScraperDescriptionBuilder {
    if builder.scraper_id.is_none() {
        builder.scraper_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::ScraperStatusBuilder::default();
            crate::serde_util::scraper_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.scrape_configuration.is_none() {
        builder.scrape_configuration = Some(crate::types::ScrapeConfiguration::Unknown)
    }
    if builder.source.is_none() {
        builder.source = Some(crate::types::Source::Unknown)
    }
    if builder.destination.is_none() {
        builder.destination = Some(crate::types::Destination::Unknown)
    }
    builder
}

pub(crate) fn scraper_logging_configuration_status_correct_errors(
    mut builder: crate::types::builders::ScraperLoggingConfigurationStatusBuilder,
) -> crate::types::builders::ScraperLoggingConfigurationStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::ScraperLoggingConfigurationStatusCode>().ok()
    }
    builder
}

pub(crate) fn workspace_description_correct_errors(
    mut builder: crate::types::builders::WorkspaceDescriptionBuilder,
) -> crate::types::builders::WorkspaceDescriptionBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::WorkspaceStatusBuilder::default();
            crate::serde_util::workspace_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn workspace_configuration_description_correct_errors(
    mut builder: crate::types::builders::WorkspaceConfigurationDescriptionBuilder,
) -> crate::types::builders::WorkspaceConfigurationDescriptionBuilder {
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::WorkspaceConfigurationStatusBuilder::default();
            crate::serde_util::workspace_configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn workspace_configuration_status_correct_errors(
    mut builder: crate::types::builders::WorkspaceConfigurationStatusBuilder,
) -> crate::types::builders::WorkspaceConfigurationStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::WorkspaceConfigurationStatusCode>().ok()
    }
    builder
}

pub(crate) fn anomaly_detector_summary_correct_errors(
    mut builder: crate::types::builders::AnomalyDetectorSummaryBuilder,
) -> crate::types::builders::AnomalyDetectorSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.anomaly_detector_id.is_none() {
        builder.anomaly_detector_id = Some(Default::default())
    }
    if builder.alias.is_none() {
        builder.alias = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AnomalyDetectorStatusBuilder::default();
            crate::serde_util::anomaly_detector_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn cloud_watch_log_destination_correct_errors(
    mut builder: crate::types::builders::CloudWatchLogDestinationBuilder,
) -> crate::types::builders::CloudWatchLogDestinationBuilder {
    if builder.log_group_arn.is_none() {
        builder.log_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_groups_namespace_summary_correct_errors(
    mut builder: crate::types::builders::RuleGroupsNamespaceSummaryBuilder,
) -> crate::types::builders::RuleGroupsNamespaceSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::RuleGroupsNamespaceStatusBuilder::default();
            crate::serde_util::rule_groups_namespace_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn scraper_component_correct_errors(
    mut builder: crate::types::builders::ScraperComponentBuilder,
) -> crate::types::builders::ScraperComponentBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ScraperComponentType>().ok()
    }
    builder
}

pub(crate) fn scraper_summary_correct_errors(
    mut builder: crate::types::builders::ScraperSummaryBuilder,
) -> crate::types::builders::ScraperSummaryBuilder {
    if builder.scraper_id.is_none() {
        builder.scraper_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::ScraperStatusBuilder::default();
            crate::serde_util::scraper_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.source.is_none() {
        builder.source = Some(crate::types::Source::Unknown)
    }
    if builder.destination.is_none() {
        builder.destination = Some(crate::types::Destination::Unknown)
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn workspace_summary_correct_errors(
    mut builder: crate::types::builders::WorkspaceSummaryBuilder,
) -> crate::types::builders::WorkspaceSummaryBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::WorkspaceStatusBuilder::default();
            crate::serde_util::workspace_status_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn amp_configuration_correct_errors(
    mut builder: crate::types::builders::AmpConfigurationBuilder,
) -> crate::types::builders::AmpConfigurationBuilder {
    if builder.workspace_arn.is_none() {
        builder.workspace_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_configuration_correct_errors(
    mut builder: crate::types::builders::EksConfigurationBuilder,
) -> crate::types::builders::EksConfigurationBuilder {
    if builder.cluster_arn.is_none() {
        builder.cluster_arn = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn limits_per_label_set_correct_errors(
    mut builder: crate::types::builders::LimitsPerLabelSetBuilder,
) -> crate::types::builders::LimitsPerLabelSetBuilder {
    if builder.limits.is_none() {
        builder.limits = {
            let builder = crate::types::builders::LimitsPerLabelSetEntryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.label_set.is_none() {
        builder.label_set = Some(Default::default())
    }
    builder
}

pub(crate) fn logging_destination_correct_errors(
    mut builder: crate::types::builders::LoggingDestinationBuilder,
) -> crate::types::builders::LoggingDestinationBuilder {
    if builder.cloud_watch_logs.is_none() {
        builder.cloud_watch_logs = {
            let builder = crate::types::builders::CloudWatchLogDestinationBuilder::default();
            crate::serde_util::cloud_watch_log_destination_correct_errors(builder).build().ok()
        }
    }
    if builder.filters.is_none() {
        builder.filters = {
            let builder = crate::types::builders::LoggingFilterBuilder::default();
            crate::serde_util::logging_filter_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn random_cut_forest_configuration_correct_errors(
    mut builder: crate::types::builders::RandomCutForestConfigurationBuilder,
) -> crate::types::builders::RandomCutForestConfigurationBuilder {
    if builder.query.is_none() {
        builder.query = Some(Default::default())
    }
    builder
}

pub(crate) fn logging_filter_correct_errors(
    mut builder: crate::types::builders::LoggingFilterBuilder,
) -> crate::types::builders::LoggingFilterBuilder {
    if builder.qsp_threshold.is_none() {
        builder.qsp_threshold = Some(Default::default())
    }
    builder
}
