// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> ::std::result::Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_alert_manager_definition;

pub(crate) mod shape_create_anomaly_detector;

pub(crate) mod shape_create_logging_configuration;

pub(crate) mod shape_create_query_logging_configuration;

pub(crate) mod shape_create_rule_groups_namespace;

pub(crate) mod shape_create_scraper;

pub(crate) mod shape_create_workspace;

pub(crate) mod shape_delete_alert_manager_definition;

pub(crate) mod shape_delete_anomaly_detector;

pub(crate) mod shape_delete_logging_configuration;

pub(crate) mod shape_delete_query_logging_configuration;

pub(crate) mod shape_delete_resource_policy;

pub(crate) mod shape_delete_rule_groups_namespace;

pub(crate) mod shape_delete_scraper;

pub(crate) mod shape_delete_scraper_logging_configuration;

pub(crate) mod shape_delete_workspace;

pub(crate) mod shape_describe_alert_manager_definition;

pub(crate) mod shape_describe_anomaly_detector;

pub(crate) mod shape_describe_logging_configuration;

pub(crate) mod shape_describe_query_logging_configuration;

pub(crate) mod shape_describe_resource_policy;

pub(crate) mod shape_describe_rule_groups_namespace;

pub(crate) mod shape_describe_scraper;

pub(crate) mod shape_describe_scraper_logging_configuration;

pub(crate) mod shape_describe_workspace;

pub(crate) mod shape_describe_workspace_configuration;

pub(crate) mod shape_get_default_scraper_configuration;

pub(crate) mod shape_list_anomaly_detectors;

pub(crate) mod shape_list_rule_groups_namespaces;

pub(crate) mod shape_list_scrapers;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_workspaces;

pub(crate) mod shape_put_alert_manager_definition;

pub(crate) mod shape_put_anomaly_detector;

pub(crate) mod shape_put_resource_policy;

pub(crate) mod shape_put_rule_groups_namespace;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_logging_configuration;

pub(crate) mod shape_update_query_logging_configuration;

pub(crate) mod shape_update_scraper;

pub(crate) mod shape_update_scraper_logging_configuration;

pub(crate) mod shape_update_workspace_alias;

pub(crate) mod shape_update_workspace_configuration;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_alert_manager_definition_input;

pub(crate) mod shape_create_anomaly_detector_input;

pub(crate) mod shape_create_logging_configuration_input;

pub(crate) mod shape_create_query_logging_configuration_input;

pub(crate) mod shape_create_rule_groups_namespace_input;

pub(crate) mod shape_create_scraper_input;

pub(crate) mod shape_create_workspace_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_put_alert_manager_definition_input;

pub(crate) mod shape_put_anomaly_detector_input;

pub(crate) mod shape_put_resource_policy_input;

pub(crate) mod shape_put_rule_groups_namespace_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_logging_configuration_input;

pub(crate) mod shape_update_query_logging_configuration_input;

pub(crate) mod shape_update_scraper_input;

pub(crate) mod shape_update_scraper_logging_configuration_input;

pub(crate) mod shape_update_workspace_alias_input;

pub(crate) mod shape_update_workspace_configuration_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_alert_manager_definition_description;

pub(crate) mod shape_alert_manager_definition_status;

pub(crate) mod shape_anomaly_detector_configuration;

pub(crate) mod shape_anomaly_detector_description;

pub(crate) mod shape_anomaly_detector_missing_data_action;

pub(crate) mod shape_anomaly_detector_status;

pub(crate) mod shape_anomaly_detector_summary_list;

pub(crate) mod shape_destination;

pub(crate) mod shape_limits_per_label_set;

pub(crate) mod shape_logging_configuration_metadata;

pub(crate) mod shape_logging_configuration_status;

pub(crate) mod shape_logging_destination;

pub(crate) mod shape_query_logging_configuration_metadata;

pub(crate) mod shape_query_logging_configuration_status;

pub(crate) mod shape_role_configuration;

pub(crate) mod shape_rule_groups_namespace_description;

pub(crate) mod shape_rule_groups_namespace_status;

pub(crate) mod shape_rule_groups_namespace_summary_list;

pub(crate) mod shape_scrape_configuration;

pub(crate) mod shape_scraper_component;

pub(crate) mod shape_scraper_components;

pub(crate) mod shape_scraper_description;

pub(crate) mod shape_scraper_logging_configuration_status;

pub(crate) mod shape_scraper_logging_destination;

pub(crate) mod shape_scraper_status;

pub(crate) mod shape_scraper_summary_list;

pub(crate) mod shape_source;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_validation_exception_field_list;

pub(crate) mod shape_workspace_configuration_description;

pub(crate) mod shape_workspace_configuration_status;

pub(crate) mod shape_workspace_description;

pub(crate) mod shape_workspace_status;

pub(crate) mod shape_workspace_summary_list;

pub(crate) mod shape_amp_configuration;

pub(crate) mod shape_anomaly_detector_summary;

pub(crate) mod shape_cloud_watch_log_destination;

pub(crate) mod shape_component_config;

pub(crate) mod shape_eks_configuration;

pub(crate) mod shape_limits_per_label_set_entry;

pub(crate) mod shape_limits_per_label_set_list;

pub(crate) mod shape_logging_destinations;

pub(crate) mod shape_logging_filter;

pub(crate) mod shape_prometheus_metric_label_map;

pub(crate) mod shape_random_cut_forest_configuration;

pub(crate) mod shape_rule_groups_namespace_summary;

pub(crate) mod shape_scraper_summary;

pub(crate) mod shape_validation_exception_field;

pub(crate) mod shape_workspace_summary;

pub(crate) mod shape_ignore_near_expected;

pub(crate) mod shape_label_set;

pub(crate) mod shape_security_group_ids;

pub(crate) mod shape_string_map;

pub(crate) mod shape_subnet_ids;
