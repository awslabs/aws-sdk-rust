// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAnomalyDetectorOutput {
    /// <p>The unique identifier of the created anomaly detector.</p>
    pub anomaly_detector_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the created anomaly detector.</p>
    pub arn: ::std::string::String,
    /// <p>The status information of the created anomaly detector.</p>
    pub status: ::std::option::Option<crate::types::AnomalyDetectorStatus>,
    /// <p>The tags applied to the created anomaly detector.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl CreateAnomalyDetectorOutput {
    /// <p>The unique identifier of the created anomaly detector.</p>
    pub fn anomaly_detector_id(&self) -> &str {
        use std::ops::Deref;
        self.anomaly_detector_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the created anomaly detector.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The status information of the created anomaly detector.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AnomalyDetectorStatus> {
        self.status.as_ref()
    }
    /// <p>The tags applied to the created anomaly detector.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CreateAnomalyDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAnomalyDetectorOutput {
    /// Creates a new builder-style object to manufacture [`CreateAnomalyDetectorOutput`](crate::operation::create_anomaly_detector::CreateAnomalyDetectorOutput).
    pub fn builder() -> crate::operation::create_anomaly_detector::builders::CreateAnomalyDetectorOutputBuilder {
        crate::operation::create_anomaly_detector::builders::CreateAnomalyDetectorOutputBuilder::default()
    }
}

/// A builder for [`CreateAnomalyDetectorOutput`](crate::operation::create_anomaly_detector::CreateAnomalyDetectorOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateAnomalyDetectorOutputBuilder {
    pub(crate) anomaly_detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AnomalyDetectorStatus>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl CreateAnomalyDetectorOutputBuilder {
    /// <p>The unique identifier of the created anomaly detector.</p>
    /// This field is required.
    pub fn anomaly_detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.anomaly_detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the created anomaly detector.</p>
    pub fn set_anomaly_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.anomaly_detector_id = input;
        self
    }
    /// <p>The unique identifier of the created anomaly detector.</p>
    pub fn get_anomaly_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.anomaly_detector_id
    }
    /// <p>The Amazon Resource Name (ARN) of the created anomaly detector.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the created anomaly detector.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the created anomaly detector.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The status information of the created anomaly detector.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AnomalyDetectorStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status information of the created anomaly detector.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AnomalyDetectorStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status information of the created anomaly detector.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AnomalyDetectorStatus> {
        &self.status
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags applied to the created anomaly detector.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags applied to the created anomaly detector.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags applied to the created anomaly detector.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateAnomalyDetectorOutput`](crate::operation::create_anomaly_detector::CreateAnomalyDetectorOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`anomaly_detector_id`](crate::operation::create_anomaly_detector::builders::CreateAnomalyDetectorOutputBuilder::anomaly_detector_id)
    /// - [`arn`](crate::operation::create_anomaly_detector::builders::CreateAnomalyDetectorOutputBuilder::arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_anomaly_detector::CreateAnomalyDetectorOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_anomaly_detector::CreateAnomalyDetectorOutput {
            anomaly_detector_id: self.anomaly_detector_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "anomaly_detector_id",
                    "anomaly_detector_id was not specified but it is required when building CreateAnomalyDetectorOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building CreateAnomalyDetectorOutput",
                )
            })?,
            status: self.status,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
