// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_scraper::_create_scraper_output::CreateScraperOutputBuilder;

pub use crate::operation::create_scraper::_create_scraper_input::CreateScraperInputBuilder;

impl crate::operation::create_scraper::builders::CreateScraperInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_scraper::CreateScraperOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_scraper::CreateScraperError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_scraper();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateScraper`.
///
/// <p>The <code>CreateScraper</code> operation creates a scraper to collect metrics. A scraper pulls metrics from Prometheus-compatible sources within an Amazon EKS cluster, and sends them to your Amazon Managed Service for Prometheus workspace. You can configure the scraper to control what metrics are collected, and what transformations are applied prior to sending them to your workspace.</p>
/// <p>If needed, an IAM role will be created for you that gives Amazon Managed Service for Prometheus access to the metrics in your cluster. For more information, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/using-service-linked-roles.html#using-service-linked-roles-prom-scraper">Using roles for scraping metrics from EKS</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
/// <p>You cannot update a scraper. If you want to change the configuration of the scraper, create a new scraper and delete the old one.</p>
/// <p>The <code>scrapeConfiguration</code> parameter contains the base64-encoded version of the YAML configuration file.</p><note>
/// <p>For more information about collectors, including what metrics are collected, and how to configure the scraper, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector.html">Amazon Web Services managed collectors</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateScraperFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_scraper::builders::CreateScraperInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_scraper::CreateScraperOutput,
        crate::operation::create_scraper::CreateScraperError,
    > for CreateScraperFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_scraper::CreateScraperOutput,
            crate::operation::create_scraper::CreateScraperError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateScraperFluentBuilder {
    /// Creates a new `CreateScraper`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateScraper as a reference.
    pub fn as_input(&self) -> &crate::operation::create_scraper::builders::CreateScraperInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_scraper::CreateScraperOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_scraper::CreateScraperError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_scraper::CreateScraper::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_scraper::CreateScraper::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_scraper::CreateScraperOutput,
        crate::operation::create_scraper::CreateScraperError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>(optional) a name to associate with the scraper. This is for your use, and does not need to be unique.</p>
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>(optional) a name to associate with the scraper. This is for your use, and does not need to be unique.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
    /// <p>(optional) a name to associate with the scraper. This is for your use, and does not need to be unique.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_alias()
    }
    /// <p>The configuration file to use in the new scraper. For more information, see <a href="prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration">Scraper configuration</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    pub fn scrape_configuration(mut self, input: crate::types::ScrapeConfiguration) -> Self {
        self.inner = self.inner.scrape_configuration(input);
        self
    }
    /// <p>The configuration file to use in the new scraper. For more information, see <a href="prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration">Scraper configuration</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    pub fn set_scrape_configuration(mut self, input: ::std::option::Option<crate::types::ScrapeConfiguration>) -> Self {
        self.inner = self.inner.set_scrape_configuration(input);
        self
    }
    /// <p>The configuration file to use in the new scraper. For more information, see <a href="prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration">Scraper configuration</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    pub fn get_scrape_configuration(&self) -> &::std::option::Option<crate::types::ScrapeConfiguration> {
        self.inner.get_scrape_configuration()
    }
    /// <p>The Amazon EKS cluster from which the scraper will collect metrics.</p>
    pub fn source(mut self, input: crate::types::Source) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>The Amazon EKS cluster from which the scraper will collect metrics.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::Source>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// <p>The Amazon EKS cluster from which the scraper will collect metrics.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::Source> {
        self.inner.get_source()
    }
    /// <p>The Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.inner = self.inner.destination(input);
        self
    }
    /// <p>The Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// <p>The Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        self.inner.get_destination()
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) The list of tag keys and values to associate with the scraper.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>(Optional) The list of tag keys and values to associate with the scraper.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>(Optional) The list of tag keys and values to associate with the scraper.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
