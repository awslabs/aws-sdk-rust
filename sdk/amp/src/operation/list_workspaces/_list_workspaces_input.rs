// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents the input of a ListWorkspaces operation.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListWorkspacesInput {
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListWorkspaces request.
    pub next_token: ::std::option::Option<::std::string::String>,
    /// Optional filter for workspace alias. Only the workspaces with aliases that begin with this value will be returned.
    pub alias: ::std::option::Option<::std::string::String>,
    /// Maximum results to return in response (default=100, maximum=1000).
    pub max_results: ::std::option::Option<i32>,
}
impl ListWorkspacesInput {
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListWorkspaces request.
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// Optional filter for workspace alias. Only the workspaces with aliases that begin with this value will be returned.
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListWorkspacesInput {
    /// Creates a new builder-style object to manufacture [`ListWorkspacesInput`](crate::operation::list_workspaces::ListWorkspacesInput).
    pub fn builder() -> crate::operation::list_workspaces::builders::ListWorkspacesInputBuilder {
        crate::operation::list_workspaces::builders::ListWorkspacesInputBuilder::default()
    }
}

/// A builder for [`ListWorkspacesInput`](crate::operation::list_workspaces::ListWorkspacesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListWorkspacesInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListWorkspacesInputBuilder {
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListWorkspaces request.
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListWorkspaces request.
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListWorkspaces request.
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Optional filter for workspace alias. Only the workspaces with aliases that begin with this value will be returned.
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// Optional filter for workspace alias. Only the workspaces with aliases that begin with this value will be returned.
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// Optional filter for workspace alias. Only the workspaces with aliases that begin with this value will be returned.
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListWorkspacesInput`](crate::operation::list_workspaces::ListWorkspacesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_workspaces::ListWorkspacesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_workspaces::ListWorkspacesInput {
            next_token: self.next_token,
            alias: self.alias,
            max_results: self.max_results,
        })
    }
}
