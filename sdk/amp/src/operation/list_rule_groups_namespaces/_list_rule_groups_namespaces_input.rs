// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents the input of a ListRuleGroupsNamespaces operation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRuleGroupsNamespacesInput {
    /// The ID of the workspace.
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// Optional filter for rule groups namespace name. Only the rule groups namespace that begin with this value will be returned.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListRuleGroupsNamespaces request.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// Maximum results to return in response (default=100, maximum=1000).
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListRuleGroupsNamespacesInput {
    /// The ID of the workspace.
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// Optional filter for rule groups namespace name. Only the rule groups namespace that begin with this value will be returned.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListRuleGroupsNamespaces request.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListRuleGroupsNamespacesInput {
    /// Creates a new builder-style object to manufacture [`ListRuleGroupsNamespacesInput`](crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesInput).
    pub fn builder(
    ) -> crate::operation::list_rule_groups_namespaces::builders::ListRuleGroupsNamespacesInputBuilder
    {
        crate::operation::list_rule_groups_namespaces::builders::ListRuleGroupsNamespacesInputBuilder::default()
    }
}

/// A builder for [`ListRuleGroupsNamespacesInput`](crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListRuleGroupsNamespacesInputBuilder {
    pub(crate) workspace_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListRuleGroupsNamespacesInputBuilder {
    /// The ID of the workspace.
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workspace_id = Some(input.into());
        self
    }
    /// The ID of the workspace.
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// Optional filter for rule groups namespace name. Only the rule groups namespace that begin with this value will be returned.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// Optional filter for rule groups namespace name. Only the rule groups namespace that begin with this value will be returned.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListRuleGroupsNamespaces request.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListRuleGroupsNamespaces request.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListRuleGroupsNamespacesInput`](crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_rule_groups_namespaces::ListRuleGroupsNamespacesInput {
                workspace_id: self.workspace_id,
                name: self.name,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
