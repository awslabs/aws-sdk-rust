// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_anomaly_detector::_put_anomaly_detector_output::PutAnomalyDetectorOutputBuilder;

pub use crate::operation::put_anomaly_detector::_put_anomaly_detector_input::PutAnomalyDetectorInputBuilder;

impl crate::operation::put_anomaly_detector::builders::PutAnomalyDetectorInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_anomaly_detector::PutAnomalyDetectorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_anomaly_detector();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutAnomalyDetector`.
///
/// <p>When you call <code>PutAnomalyDetector</code>, the operation creates a new anomaly detector if one doesn't exist, or updates an existing one. Each call to this operation triggers a complete retraining of the detector, which includes querying the minimum required samples and backfilling the detector with historical data. This process occurs regardless of whether you're making a minor change like updating the evaluation interval or making more substantial modifications. The operation serves as the single method for creating, updating, and retraining anomaly detectors.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutAnomalyDetectorFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_anomaly_detector::builders::PutAnomalyDetectorInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::put_anomaly_detector::PutAnomalyDetectorOutput,
        crate::operation::put_anomaly_detector::PutAnomalyDetectorError,
    > for PutAnomalyDetectorFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::put_anomaly_detector::PutAnomalyDetectorOutput,
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutAnomalyDetectorFluentBuilder {
    /// Creates a new `PutAnomalyDetectorFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutAnomalyDetector as a reference.
    pub fn as_input(&self) -> &crate::operation::put_anomaly_detector::builders::PutAnomalyDetectorInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_anomaly_detector::PutAnomalyDetectorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_anomaly_detector::PutAnomalyDetectorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_anomaly_detector::PutAnomalyDetector::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_anomaly_detector::PutAnomalyDetector::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_anomaly_detector::PutAnomalyDetectorOutput,
        crate::operation::put_anomaly_detector::PutAnomalyDetectorError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the workspace containing the anomaly detector to update.</p>
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.workspace_id(input.into());
        self
    }
    /// <p>The identifier of the workspace containing the anomaly detector to update.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_id(input);
        self
    }
    /// <p>The identifier of the workspace containing the anomaly detector to update.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_workspace_id()
    }
    /// <p>The identifier of the anomaly detector to update.</p>
    pub fn anomaly_detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.anomaly_detector_id(input.into());
        self
    }
    /// <p>The identifier of the anomaly detector to update.</p>
    pub fn set_anomaly_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_anomaly_detector_id(input);
        self
    }
    /// <p>The identifier of the anomaly detector to update.</p>
    pub fn get_anomaly_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_anomaly_detector_id()
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn evaluation_interval_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.evaluation_interval_in_seconds(input);
        self
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn set_evaluation_interval_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_evaluation_interval_in_seconds(input);
        self
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn get_evaluation_interval_in_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_evaluation_interval_in_seconds()
    }
    /// <p>Specifies the action to take when data is missing during evaluation.</p>
    pub fn missing_data_action(mut self, input: crate::types::AnomalyDetectorMissingDataAction) -> Self {
        self.inner = self.inner.missing_data_action(input);
        self
    }
    /// <p>Specifies the action to take when data is missing during evaluation.</p>
    pub fn set_missing_data_action(mut self, input: ::std::option::Option<crate::types::AnomalyDetectorMissingDataAction>) -> Self {
        self.inner = self.inner.set_missing_data_action(input);
        self
    }
    /// <p>Specifies the action to take when data is missing during evaluation.</p>
    pub fn get_missing_data_action(&self) -> &::std::option::Option<crate::types::AnomalyDetectorMissingDataAction> {
        self.inner.get_missing_data_action()
    }
    /// <p>The algorithm configuration for the anomaly detector.</p>
    pub fn configuration(mut self, input: crate::types::AnomalyDetectorConfiguration) -> Self {
        self.inner = self.inner.configuration(input);
        self
    }
    /// <p>The algorithm configuration for the anomaly detector.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::AnomalyDetectorConfiguration>) -> Self {
        self.inner = self.inner.set_configuration(input);
        self
    }
    /// <p>The algorithm configuration for the anomaly detector.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::AnomalyDetectorConfiguration> {
        self.inner.get_configuration()
    }
    ///
    /// Adds a key-value pair to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>The Amazon Managed Service for Prometheus metric labels to associate with the anomaly detector.</p>
    pub fn labels(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.labels(k.into(), v.into());
        self
    }
    /// <p>The Amazon Managed Service for Prometheus metric labels to associate with the anomaly detector.</p>
    pub fn set_labels(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_labels(input);
        self
    }
    /// <p>The Amazon Managed Service for Prometheus metric labels to associate with the anomaly detector.</p>
    pub fn get_labels(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_labels()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
