// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutAnomalyDetectorInput {
    /// <p>The identifier of the workspace containing the anomaly detector to update.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the anomaly detector to update.</p>
    pub anomaly_detector_id: ::std::option::Option<::std::string::String>,
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub evaluation_interval_in_seconds: ::std::option::Option<i32>,
    /// <p>Specifies the action to take when data is missing during evaluation.</p>
    pub missing_data_action: ::std::option::Option<crate::types::AnomalyDetectorMissingDataAction>,
    /// <p>The algorithm configuration for the anomaly detector.</p>
    pub configuration: ::std::option::Option<crate::types::AnomalyDetectorConfiguration>,
    /// <p>The Amazon Managed Service for Prometheus metric labels to associate with the anomaly detector.</p>
    pub labels: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl PutAnomalyDetectorInput {
    /// <p>The identifier of the workspace containing the anomaly detector to update.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The identifier of the anomaly detector to update.</p>
    pub fn anomaly_detector_id(&self) -> ::std::option::Option<&str> {
        self.anomaly_detector_id.as_deref()
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn evaluation_interval_in_seconds(&self) -> ::std::option::Option<i32> {
        self.evaluation_interval_in_seconds
    }
    /// <p>Specifies the action to take when data is missing during evaluation.</p>
    pub fn missing_data_action(&self) -> ::std::option::Option<&crate::types::AnomalyDetectorMissingDataAction> {
        self.missing_data_action.as_ref()
    }
    /// <p>The algorithm configuration for the anomaly detector.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::AnomalyDetectorConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>The Amazon Managed Service for Prometheus metric labels to associate with the anomaly detector.</p>
    pub fn labels(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.labels.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl PutAnomalyDetectorInput {
    /// Creates a new builder-style object to manufacture [`PutAnomalyDetectorInput`](crate::operation::put_anomaly_detector::PutAnomalyDetectorInput).
    pub fn builder() -> crate::operation::put_anomaly_detector::builders::PutAnomalyDetectorInputBuilder {
        crate::operation::put_anomaly_detector::builders::PutAnomalyDetectorInputBuilder::default()
    }
}

/// A builder for [`PutAnomalyDetectorInput`](crate::operation::put_anomaly_detector::PutAnomalyDetectorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutAnomalyDetectorInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) anomaly_detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) evaluation_interval_in_seconds: ::std::option::Option<i32>,
    pub(crate) missing_data_action: ::std::option::Option<crate::types::AnomalyDetectorMissingDataAction>,
    pub(crate) configuration: ::std::option::Option<crate::types::AnomalyDetectorConfiguration>,
    pub(crate) labels: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl PutAnomalyDetectorInputBuilder {
    /// <p>The identifier of the workspace containing the anomaly detector to update.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the workspace containing the anomaly detector to update.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The identifier of the workspace containing the anomaly detector to update.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// <p>The identifier of the anomaly detector to update.</p>
    /// This field is required.
    pub fn anomaly_detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.anomaly_detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the anomaly detector to update.</p>
    pub fn set_anomaly_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.anomaly_detector_id = input;
        self
    }
    /// <p>The identifier of the anomaly detector to update.</p>
    pub fn get_anomaly_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.anomaly_detector_id
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn evaluation_interval_in_seconds(mut self, input: i32) -> Self {
        self.evaluation_interval_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn set_evaluation_interval_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evaluation_interval_in_seconds = input;
        self
    }
    /// <p>The frequency, in seconds, at which the anomaly detector evaluates metrics.</p>
    pub fn get_evaluation_interval_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.evaluation_interval_in_seconds
    }
    /// <p>Specifies the action to take when data is missing during evaluation.</p>
    pub fn missing_data_action(mut self, input: crate::types::AnomalyDetectorMissingDataAction) -> Self {
        self.missing_data_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the action to take when data is missing during evaluation.</p>
    pub fn set_missing_data_action(mut self, input: ::std::option::Option<crate::types::AnomalyDetectorMissingDataAction>) -> Self {
        self.missing_data_action = input;
        self
    }
    /// <p>Specifies the action to take when data is missing during evaluation.</p>
    pub fn get_missing_data_action(&self) -> &::std::option::Option<crate::types::AnomalyDetectorMissingDataAction> {
        &self.missing_data_action
    }
    /// <p>The algorithm configuration for the anomaly detector.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::AnomalyDetectorConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The algorithm configuration for the anomaly detector.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::AnomalyDetectorConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The algorithm configuration for the anomaly detector.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::AnomalyDetectorConfiguration> {
        &self.configuration
    }
    /// Adds a key-value pair to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>The Amazon Managed Service for Prometheus metric labels to associate with the anomaly detector.</p>
    pub fn labels(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.labels.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.labels = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Amazon Managed Service for Prometheus metric labels to associate with the anomaly detector.</p>
    pub fn set_labels(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.labels = input;
        self
    }
    /// <p>The Amazon Managed Service for Prometheus metric labels to associate with the anomaly detector.</p>
    pub fn get_labels(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.labels
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`PutAnomalyDetectorInput`](crate::operation::put_anomaly_detector::PutAnomalyDetectorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_anomaly_detector::PutAnomalyDetectorInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_anomaly_detector::PutAnomalyDetectorInput {
            workspace_id: self.workspace_id,
            anomaly_detector_id: self.anomaly_detector_id,
            evaluation_interval_in_seconds: self.evaluation_interval_in_seconds,
            missing_data_action: self.missing_data_action,
            configuration: self.configuration,
            labels: self.labels,
            client_token: self.client_token,
        })
    }
}
