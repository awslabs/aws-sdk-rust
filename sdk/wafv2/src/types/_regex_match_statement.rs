// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A rule statement used to search web request components for a match against a single regular expression. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegexMatchStatement {
    /// <p>The string representing the regular expression.</p>
    pub regex_string: ::std::string::String,
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub field_to_match: ::std::option::Option<crate::types::FieldToMatch>,
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents. </p>
    pub text_transformations: ::std::vec::Vec<crate::types::TextTransformation>,
}
impl RegexMatchStatement {
    /// <p>The string representing the regular expression.</p>
    pub fn regex_string(&self) -> &str {
        use std::ops::Deref;
        self.regex_string.deref()
    }
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub fn field_to_match(&self) -> ::std::option::Option<&crate::types::FieldToMatch> {
        self.field_to_match.as_ref()
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents. </p>
    pub fn text_transformations(&self) -> &[crate::types::TextTransformation] {
        use std::ops::Deref;
        self.text_transformations.deref()
    }
}
impl RegexMatchStatement {
    /// Creates a new builder-style object to manufacture [`RegexMatchStatement`](crate::types::RegexMatchStatement).
    pub fn builder() -> crate::types::builders::RegexMatchStatementBuilder {
        crate::types::builders::RegexMatchStatementBuilder::default()
    }
}

/// A builder for [`RegexMatchStatement`](crate::types::RegexMatchStatement).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegexMatchStatementBuilder {
    pub(crate) regex_string: ::std::option::Option<::std::string::String>,
    pub(crate) field_to_match: ::std::option::Option<crate::types::FieldToMatch>,
    pub(crate) text_transformations: ::std::option::Option<::std::vec::Vec<crate::types::TextTransformation>>,
}
impl RegexMatchStatementBuilder {
    /// <p>The string representing the regular expression.</p>
    /// This field is required.
    pub fn regex_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.regex_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string representing the regular expression.</p>
    pub fn set_regex_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.regex_string = input;
        self
    }
    /// <p>The string representing the regular expression.</p>
    pub fn get_regex_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.regex_string
    }
    /// <p>The part of the web request that you want WAF to inspect. </p>
    /// This field is required.
    pub fn field_to_match(mut self, input: crate::types::FieldToMatch) -> Self {
        self.field_to_match = ::std::option::Option::Some(input);
        self
    }
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub fn set_field_to_match(mut self, input: ::std::option::Option<crate::types::FieldToMatch>) -> Self {
        self.field_to_match = input;
        self
    }
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub fn get_field_to_match(&self) -> &::std::option::Option<crate::types::FieldToMatch> {
        &self.field_to_match
    }
    /// Appends an item to `text_transformations`.
    ///
    /// To override the contents of this collection use [`set_text_transformations`](Self::set_text_transformations).
    ///
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents. </p>
    pub fn text_transformations(mut self, input: crate::types::TextTransformation) -> Self {
        let mut v = self.text_transformations.unwrap_or_default();
        v.push(input);
        self.text_transformations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents. </p>
    pub fn set_text_transformations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TextTransformation>>) -> Self {
        self.text_transformations = input;
        self
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents. </p>
    pub fn get_text_transformations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TextTransformation>> {
        &self.text_transformations
    }
    /// Consumes the builder and constructs a [`RegexMatchStatement`](crate::types::RegexMatchStatement).
    /// This method will fail if any of the following fields are not set:
    /// - [`regex_string`](crate::types::builders::RegexMatchStatementBuilder::regex_string)
    /// - [`text_transformations`](crate::types::builders::RegexMatchStatementBuilder::text_transformations)
    pub fn build(self) -> ::std::result::Result<crate::types::RegexMatchStatement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RegexMatchStatement {
            regex_string: self.regex_string.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "regex_string",
                    "regex_string was not specified but it is required when building RegexMatchStatement",
                )
            })?,
            field_to_match: self.field_to_match,
            text_transformations: self.text_transformations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text_transformations",
                    "text_transformations was not specified but it is required when building RegexMatchStatement",
                )
            })?,
        })
    }
}
