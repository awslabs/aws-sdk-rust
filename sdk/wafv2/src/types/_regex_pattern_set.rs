// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains one or more regular expressions. </p>
/// <p>WAF assigns an ARN to each <code>RegexPatternSet</code> that you create. To use a set in a rule, you provide the ARN to the <code>Rule</code> statement <code>RegexPatternSetReferenceStatement</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegexPatternSet {
    /// <p>The name of the set. You cannot change the name after you create the set.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the entity.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A description of the set that helps with identification. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The regular expression patterns in the set.</p>
    #[doc(hidden)]
    pub regular_expression_list: std::option::Option<std::vec::Vec<crate::types::Regex>>,
}
impl RegexPatternSet {
    /// <p>The name of the set. You cannot change the name after you create the set.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the entity.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A description of the set that helps with identification. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The regular expression patterns in the set.</p>
    pub fn regular_expression_list(&self) -> std::option::Option<&[crate::types::Regex]> {
        self.regular_expression_list.as_deref()
    }
}
impl RegexPatternSet {
    /// Creates a new builder-style object to manufacture [`RegexPatternSet`](crate::types::RegexPatternSet).
    pub fn builder() -> crate::types::builders::RegexPatternSetBuilder {
        crate::types::builders::RegexPatternSetBuilder::default()
    }
}

/// A builder for [`RegexPatternSet`](crate::types::RegexPatternSet).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegexPatternSetBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) regular_expression_list: std::option::Option<std::vec::Vec<crate::types::Regex>>,
}
impl RegexPatternSetBuilder {
    /// <p>The name of the set. You cannot change the name after you create the set.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the set. You cannot change the name after you create the set.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the entity.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the entity.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>A description of the set that helps with identification. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the set that helps with identification. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `regular_expression_list`.
    ///
    /// To override the contents of this collection use [`set_regular_expression_list`](Self::set_regular_expression_list).
    ///
    /// <p>The regular expression patterns in the set.</p>
    pub fn regular_expression_list(mut self, input: crate::types::Regex) -> Self {
        let mut v = self.regular_expression_list.unwrap_or_default();
        v.push(input);
        self.regular_expression_list = Some(v);
        self
    }
    /// <p>The regular expression patterns in the set.</p>
    pub fn set_regular_expression_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Regex>>,
    ) -> Self {
        self.regular_expression_list = input;
        self
    }
    /// Consumes the builder and constructs a [`RegexPatternSet`](crate::types::RegexPatternSet).
    pub fn build(self) -> crate::types::RegexPatternSet {
        crate::types::RegexPatternSet {
            name: self.name,
            id: self.id,
            arn: self.arn,
            description: self.description,
            regular_expression_list: self.regular_expression_list,
        }
    }
}
