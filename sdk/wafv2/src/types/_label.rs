// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single label container. This is used as an element of a label array in multiple contexts, for example, in <code>RuleLabels</code> inside a <code>Rule</code> and in <code>Labels</code> inside a <code>SampledHTTPRequest</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Label {
    /// <p>The label string. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl Label {
    /// <p>The label string. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl Label {
    /// Creates a new builder-style object to manufacture [`Label`](crate::types::Label).
    pub fn builder() -> crate::types::builders::LabelBuilder {
        crate::types::builders::LabelBuilder::default()
    }
}

/// A builder for [`Label`](crate::types::Label).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LabelBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
}
impl LabelBuilder {
    /// <p>The label string. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The label string. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`Label`](crate::types::Label).
    pub fn build(self) -> crate::types::Label {
        crate::types::Label { name: self.name }
    }
}
