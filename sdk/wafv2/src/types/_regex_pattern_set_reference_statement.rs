// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A rule statement used to search web request components for matches with regular expressions. To use this, create a <code>RegexPatternSet</code> that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see <code>CreateRegexPatternSet</code>.</p>
/// <p>Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegexPatternSetReferenceStatement {
    /// <p>The Amazon Resource Name (ARN) of the <code>RegexPatternSet</code> that this statement references.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The part of the web request that you want WAF to inspect. </p>
    #[doc(hidden)]
    pub field_to_match: std::option::Option<crate::types::FieldToMatch>,
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
    #[doc(hidden)]
    pub text_transformations: std::option::Option<std::vec::Vec<crate::types::TextTransformation>>,
}
impl RegexPatternSetReferenceStatement {
    /// <p>The Amazon Resource Name (ARN) of the <code>RegexPatternSet</code> that this statement references.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub fn field_to_match(&self) -> std::option::Option<&crate::types::FieldToMatch> {
        self.field_to_match.as_ref()
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
    pub fn text_transformations(&self) -> std::option::Option<&[crate::types::TextTransformation]> {
        self.text_transformations.as_deref()
    }
}
impl RegexPatternSetReferenceStatement {
    /// Creates a new builder-style object to manufacture [`RegexPatternSetReferenceStatement`](crate::types::RegexPatternSetReferenceStatement).
    pub fn builder() -> crate::types::builders::RegexPatternSetReferenceStatementBuilder {
        crate::types::builders::RegexPatternSetReferenceStatementBuilder::default()
    }
}

/// A builder for [`RegexPatternSetReferenceStatement`](crate::types::RegexPatternSetReferenceStatement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegexPatternSetReferenceStatementBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) field_to_match: std::option::Option<crate::types::FieldToMatch>,
    pub(crate) text_transformations:
        std::option::Option<std::vec::Vec<crate::types::TextTransformation>>,
}
impl RegexPatternSetReferenceStatementBuilder {
    /// <p>The Amazon Resource Name (ARN) of the <code>RegexPatternSet</code> that this statement references.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>RegexPatternSet</code> that this statement references.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub fn field_to_match(mut self, input: crate::types::FieldToMatch) -> Self {
        self.field_to_match = Some(input);
        self
    }
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub fn set_field_to_match(
        mut self,
        input: std::option::Option<crate::types::FieldToMatch>,
    ) -> Self {
        self.field_to_match = input;
        self
    }
    /// Appends an item to `text_transformations`.
    ///
    /// To override the contents of this collection use [`set_text_transformations`](Self::set_text_transformations).
    ///
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
    pub fn text_transformations(mut self, input: crate::types::TextTransformation) -> Self {
        let mut v = self.text_transformations.unwrap_or_default();
        v.push(input);
        self.text_transformations = Some(v);
        self
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
    pub fn set_text_transformations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TextTransformation>>,
    ) -> Self {
        self.text_transformations = input;
        self
    }
    /// Consumes the builder and constructs a [`RegexPatternSetReferenceStatement`](crate::types::RegexPatternSetReferenceStatement).
    pub fn build(self) -> crate::types::RegexPatternSetReferenceStatement {
        crate::types::RegexPatternSetReferenceStatement {
            arn: self.arn,
            field_to_match: self.field_to_match,
            text_transformations: self.text_transformations,
        }
    }
}
