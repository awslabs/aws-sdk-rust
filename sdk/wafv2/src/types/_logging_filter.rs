// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filtering that specifies which web requests are kept in the logs and which are dropped, defined for a web ACL's <code>LoggingConfiguration</code>. </p>
/// <p>You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoggingFilter {
    /// <p>The filters that you want to apply to the logs. </p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>Default handling for logs that don't match any of the specified filtering conditions. </p>
    #[doc(hidden)]
    pub default_behavior: std::option::Option<crate::types::FilterBehavior>,
}
impl LoggingFilter {
    /// <p>The filters that you want to apply to the logs. </p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>Default handling for logs that don't match any of the specified filtering conditions. </p>
    pub fn default_behavior(&self) -> std::option::Option<&crate::types::FilterBehavior> {
        self.default_behavior.as_ref()
    }
}
impl LoggingFilter {
    /// Creates a new builder-style object to manufacture [`LoggingFilter`](crate::types::LoggingFilter).
    pub fn builder() -> crate::types::builders::LoggingFilterBuilder {
        crate::types::builders::LoggingFilterBuilder::default()
    }
}

/// A builder for [`LoggingFilter`](crate::types::LoggingFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoggingFilterBuilder {
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) default_behavior: std::option::Option<crate::types::FilterBehavior>,
}
impl LoggingFilterBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters that you want to apply to the logs. </p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>The filters that you want to apply to the logs. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>Default handling for logs that don't match any of the specified filtering conditions. </p>
    pub fn default_behavior(mut self, input: crate::types::FilterBehavior) -> Self {
        self.default_behavior = Some(input);
        self
    }
    /// <p>Default handling for logs that don't match any of the specified filtering conditions. </p>
    pub fn set_default_behavior(
        mut self,
        input: std::option::Option<crate::types::FilterBehavior>,
    ) -> Self {
        self.default_behavior = input;
        self
    }
    /// Consumes the builder and constructs a [`LoggingFilter`](crate::types::LoggingFilter).
    pub fn build(self) -> crate::types::LoggingFilter {
        crate::types::LoggingFilter {
            filters: self.filters,
            default_behavior: self.default_behavior,
        }
    }
}
