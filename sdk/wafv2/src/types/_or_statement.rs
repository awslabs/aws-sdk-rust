// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A logical rule statement used to combine other rule statements with OR logic. You provide more than one <code>Statement</code> within the <code>OrStatement</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrStatement {
    /// <p>The statements to combine with OR logic. You can use any statements that can be nested.</p>
    pub statements: ::std::vec::Vec<crate::types::Statement>,
}
impl OrStatement {
    /// <p>The statements to combine with OR logic. You can use any statements that can be nested.</p>
    pub fn statements(&self) -> &[crate::types::Statement] {
        use std::ops::Deref;
        self.statements.deref()
    }
}
impl OrStatement {
    /// Creates a new builder-style object to manufacture [`OrStatement`](crate::types::OrStatement).
    pub fn builder() -> crate::types::builders::OrStatementBuilder {
        crate::types::builders::OrStatementBuilder::default()
    }
}

/// A builder for [`OrStatement`](crate::types::OrStatement).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrStatementBuilder {
    pub(crate) statements: ::std::option::Option<::std::vec::Vec<crate::types::Statement>>,
}
impl OrStatementBuilder {
    /// Appends an item to `statements`.
    ///
    /// To override the contents of this collection use [`set_statements`](Self::set_statements).
    ///
    /// <p>The statements to combine with OR logic. You can use any statements that can be nested.</p>
    pub fn statements(mut self, input: crate::types::Statement) -> Self {
        let mut v = self.statements.unwrap_or_default();
        v.push(input);
        self.statements = ::std::option::Option::Some(v);
        self
    }
    /// <p>The statements to combine with OR logic. You can use any statements that can be nested.</p>
    pub fn set_statements(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Statement>>) -> Self {
        self.statements = input;
        self
    }
    /// <p>The statements to combine with OR logic. You can use any statements that can be nested.</p>
    pub fn get_statements(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Statement>> {
        &self.statements
    }
    /// Consumes the builder and constructs a [`OrStatement`](crate::types::OrStatement).
    /// This method will fail if any of the following fields are not set:
    /// - [`statements`](crate::types::builders::OrStatementBuilder::statements)
    pub fn build(self) -> ::std::result::Result<crate::types::OrStatement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OrStatement {
            statements: self.statements.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "statements",
                    "statements was not specified but it is required when building OrStatement",
                )
            })?,
        })
    }
}
