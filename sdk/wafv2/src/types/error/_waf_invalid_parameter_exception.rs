// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The operation failed because WAF didn't recognize a parameter in the request. For example: </p>
/// <ul>
/// <li> <p>You specified a parameter name or value that isn't valid.</p> </li>
/// <li> <p>Your nested statement isn't valid. You might have tried to nest a statement that canâ€™t be nested. </p> </li>
/// <li> <p>You tried to update a <code>WebACL</code> with a <code>DefaultAction</code> that isn't among the types available at <code>DefaultAction</code>.</p> </li>
/// <li> <p>Your request references an ARN that is malformed, or corresponds to a resource with which a web ACL can't be associated.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WafInvalidParameterException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The settings where the invalid parameter was found. </p>
    #[doc(hidden)]
    pub field: std::option::Option<crate::types::ParameterExceptionField>,
    /// <p>The invalid parameter that resulted in the exception. </p>
    #[doc(hidden)]
    pub parameter: std::option::Option<std::string::String>,
    /// <p>Additional information about the exception.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl WafInvalidParameterException {
    /// <p>The settings where the invalid parameter was found. </p>
    pub fn field(&self) -> std::option::Option<&crate::types::ParameterExceptionField> {
        self.field.as_ref()
    }
    /// <p>The invalid parameter that resulted in the exception. </p>
    pub fn parameter(&self) -> std::option::Option<&str> {
        self.parameter.as_deref()
    }
    /// <p>Additional information about the exception.</p>
    pub fn reason(&self) -> std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl WafInvalidParameterException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for WafInvalidParameterException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "WafInvalidParameterException [WAFInvalidParameterException]"
        )?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for WafInvalidParameterException {}
impl aws_http::request_id::RequestId for crate::types::error::WafInvalidParameterException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for WafInvalidParameterException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl WafInvalidParameterException {
    /// Creates a new builder-style object to manufacture [`WafInvalidParameterException`](crate::types::error::WafInvalidParameterException).
    pub fn builder() -> crate::types::error::builders::WafInvalidParameterExceptionBuilder {
        crate::types::error::builders::WafInvalidParameterExceptionBuilder::default()
    }
}

/// A builder for [`WafInvalidParameterException`](crate::types::error::WafInvalidParameterException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WafInvalidParameterExceptionBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) field: std::option::Option<crate::types::ParameterExceptionField>,
    pub(crate) parameter: std::option::Option<std::string::String>,
    pub(crate) reason: std::option::Option<std::string::String>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl WafInvalidParameterExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The settings where the invalid parameter was found. </p>
    pub fn field(mut self, input: crate::types::ParameterExceptionField) -> Self {
        self.field = Some(input);
        self
    }
    /// <p>The settings where the invalid parameter was found. </p>
    pub fn set_field(
        mut self,
        input: std::option::Option<crate::types::ParameterExceptionField>,
    ) -> Self {
        self.field = input;
        self
    }
    /// <p>The invalid parameter that resulted in the exception. </p>
    pub fn parameter(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter = Some(input.into());
        self
    }
    /// <p>The invalid parameter that resulted in the exception. </p>
    pub fn set_parameter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter = input;
        self
    }
    /// <p>Additional information about the exception.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p>Additional information about the exception.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`WafInvalidParameterException`](crate::types::error::WafInvalidParameterException).
    pub fn build(self) -> crate::types::error::WafInvalidParameterException {
        crate::types::error::WafInvalidParameterException {
            message: self.message,
            field: self.field,
            parameter: self.parameter,
            reason: self.reason,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
