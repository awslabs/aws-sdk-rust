// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional information that's used by a managed rule group. Many managed rule groups don't require this.</p>
/// <p>Use the <code>AWSManagedRulesBotControlRuleSet</code> configuration object to configure the protection level that you want the Bot Control rule group to use. </p>
/// <p>For example specifications, see the examples section of <code>CreateWebACL</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ManagedRuleGroupConfig {
    /// <p>The path of the login endpoint for your application. For example, for the URL <code>https://example.com/web/login</code>, you would provide the path <code>/web/login</code>.</p>
    #[doc(hidden)]
    pub login_path: std::option::Option<std::string::String>,
    /// <p>The payload type for your login endpoint, either JSON or form encoded.</p>
    #[doc(hidden)]
    pub payload_type: std::option::Option<crate::types::PayloadType>,
    /// <p>Details about your login page username field. </p>
    #[doc(hidden)]
    pub username_field: std::option::Option<crate::types::UsernameField>,
    /// <p>Details about your login page password field. </p>
    #[doc(hidden)]
    pub password_field: std::option::Option<crate::types::PasswordField>,
    /// <p>Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. For information about using the Bot Control managed rule group, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html">WAF Bot Control rule group</a> and <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-bot-control.html">WAF Bot Control</a> in the <i>WAF Developer Guide</i>.</p>
    #[doc(hidden)]
    pub aws_managed_rules_bot_control_rule_set:
        std::option::Option<crate::types::AwsManagedRulesBotControlRuleSet>,
}
impl ManagedRuleGroupConfig {
    /// <p>The path of the login endpoint for your application. For example, for the URL <code>https://example.com/web/login</code>, you would provide the path <code>/web/login</code>.</p>
    pub fn login_path(&self) -> std::option::Option<&str> {
        self.login_path.as_deref()
    }
    /// <p>The payload type for your login endpoint, either JSON or form encoded.</p>
    pub fn payload_type(&self) -> std::option::Option<&crate::types::PayloadType> {
        self.payload_type.as_ref()
    }
    /// <p>Details about your login page username field. </p>
    pub fn username_field(&self) -> std::option::Option<&crate::types::UsernameField> {
        self.username_field.as_ref()
    }
    /// <p>Details about your login page password field. </p>
    pub fn password_field(&self) -> std::option::Option<&crate::types::PasswordField> {
        self.password_field.as_ref()
    }
    /// <p>Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. For information about using the Bot Control managed rule group, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html">WAF Bot Control rule group</a> and <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-bot-control.html">WAF Bot Control</a> in the <i>WAF Developer Guide</i>.</p>
    pub fn aws_managed_rules_bot_control_rule_set(
        &self,
    ) -> std::option::Option<&crate::types::AwsManagedRulesBotControlRuleSet> {
        self.aws_managed_rules_bot_control_rule_set.as_ref()
    }
}
impl ManagedRuleGroupConfig {
    /// Creates a new builder-style object to manufacture [`ManagedRuleGroupConfig`](crate::types::ManagedRuleGroupConfig).
    pub fn builder() -> crate::types::builders::ManagedRuleGroupConfigBuilder {
        crate::types::builders::ManagedRuleGroupConfigBuilder::default()
    }
}

/// A builder for [`ManagedRuleGroupConfig`](crate::types::ManagedRuleGroupConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ManagedRuleGroupConfigBuilder {
    pub(crate) login_path: std::option::Option<std::string::String>,
    pub(crate) payload_type: std::option::Option<crate::types::PayloadType>,
    pub(crate) username_field: std::option::Option<crate::types::UsernameField>,
    pub(crate) password_field: std::option::Option<crate::types::PasswordField>,
    pub(crate) aws_managed_rules_bot_control_rule_set:
        std::option::Option<crate::types::AwsManagedRulesBotControlRuleSet>,
}
impl ManagedRuleGroupConfigBuilder {
    /// <p>The path of the login endpoint for your application. For example, for the URL <code>https://example.com/web/login</code>, you would provide the path <code>/web/login</code>.</p>
    pub fn login_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.login_path = Some(input.into());
        self
    }
    /// <p>The path of the login endpoint for your application. For example, for the URL <code>https://example.com/web/login</code>, you would provide the path <code>/web/login</code>.</p>
    pub fn set_login_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.login_path = input;
        self
    }
    /// <p>The payload type for your login endpoint, either JSON or form encoded.</p>
    pub fn payload_type(mut self, input: crate::types::PayloadType) -> Self {
        self.payload_type = Some(input);
        self
    }
    /// <p>The payload type for your login endpoint, either JSON or form encoded.</p>
    pub fn set_payload_type(
        mut self,
        input: std::option::Option<crate::types::PayloadType>,
    ) -> Self {
        self.payload_type = input;
        self
    }
    /// <p>Details about your login page username field. </p>
    pub fn username_field(mut self, input: crate::types::UsernameField) -> Self {
        self.username_field = Some(input);
        self
    }
    /// <p>Details about your login page username field. </p>
    pub fn set_username_field(
        mut self,
        input: std::option::Option<crate::types::UsernameField>,
    ) -> Self {
        self.username_field = input;
        self
    }
    /// <p>Details about your login page password field. </p>
    pub fn password_field(mut self, input: crate::types::PasswordField) -> Self {
        self.password_field = Some(input);
        self
    }
    /// <p>Details about your login page password field. </p>
    pub fn set_password_field(
        mut self,
        input: std::option::Option<crate::types::PasswordField>,
    ) -> Self {
        self.password_field = input;
        self
    }
    /// <p>Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. For information about using the Bot Control managed rule group, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html">WAF Bot Control rule group</a> and <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-bot-control.html">WAF Bot Control</a> in the <i>WAF Developer Guide</i>.</p>
    pub fn aws_managed_rules_bot_control_rule_set(
        mut self,
        input: crate::types::AwsManagedRulesBotControlRuleSet,
    ) -> Self {
        self.aws_managed_rules_bot_control_rule_set = Some(input);
        self
    }
    /// <p>Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. For information about using the Bot Control managed rule group, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html">WAF Bot Control rule group</a> and <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-bot-control.html">WAF Bot Control</a> in the <i>WAF Developer Guide</i>.</p>
    pub fn set_aws_managed_rules_bot_control_rule_set(
        mut self,
        input: std::option::Option<crate::types::AwsManagedRulesBotControlRuleSet>,
    ) -> Self {
        self.aws_managed_rules_bot_control_rule_set = input;
        self
    }
    /// Consumes the builder and constructs a [`ManagedRuleGroupConfig`](crate::types::ManagedRuleGroupConfig).
    pub fn build(self) -> crate::types::ManagedRuleGroupConfig {
        crate::types::ManagedRuleGroupConfig {
            login_path: self.login_path,
            payload_type: self.payload_type,
            username_field: self.username_field,
            password_field: self.password_field,
            aws_managed_rules_bot_control_rule_set: self.aws_managed_rules_bot_control_rule_set,
        }
    }
}
