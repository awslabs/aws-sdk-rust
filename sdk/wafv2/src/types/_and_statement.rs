// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A logical rule statement used to combine other rule statements with AND logic. You provide more than one <code>Statement</code> within the <code>AndStatement</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AndStatement {
    /// <p>The statements to combine with AND logic. You can use any statements that can be nested. </p>
    #[doc(hidden)]
    pub statements: std::option::Option<std::vec::Vec<crate::types::Statement>>,
}
impl AndStatement {
    /// <p>The statements to combine with AND logic. You can use any statements that can be nested. </p>
    pub fn statements(&self) -> std::option::Option<&[crate::types::Statement]> {
        self.statements.as_deref()
    }
}
impl AndStatement {
    /// Creates a new builder-style object to manufacture [`AndStatement`](crate::types::AndStatement).
    pub fn builder() -> crate::types::builders::AndStatementBuilder {
        crate::types::builders::AndStatementBuilder::default()
    }
}

/// A builder for [`AndStatement`](crate::types::AndStatement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AndStatementBuilder {
    pub(crate) statements: std::option::Option<std::vec::Vec<crate::types::Statement>>,
}
impl AndStatementBuilder {
    /// Appends an item to `statements`.
    ///
    /// To override the contents of this collection use [`set_statements`](Self::set_statements).
    ///
    /// <p>The statements to combine with AND logic. You can use any statements that can be nested. </p>
    pub fn statements(mut self, input: crate::types::Statement) -> Self {
        let mut v = self.statements.unwrap_or_default();
        v.push(input);
        self.statements = Some(v);
        self
    }
    /// <p>The statements to combine with AND logic. You can use any statements that can be nested. </p>
    pub fn set_statements(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Statement>>,
    ) -> Self {
        self.statements = input;
        self
    }
    /// Consumes the builder and constructs a [`AndStatement`](crate::types::AndStatement).
    pub fn build(self) -> crate::types::AndStatement {
        crate::types::AndStatement {
            statements: self.statements,
        }
    }
}
