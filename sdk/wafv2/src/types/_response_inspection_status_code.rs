// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures inspection of the response status code. This is part of the <code>ResponseInspection</code> configuration for <code>AWSManagedRulesATPRuleSet</code> and <code>AWSManagedRulesACFPRuleSet</code>. </p> <note>
/// <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResponseInspectionStatusCode {
    /// <p>Status codes in the response that indicate a successful login or account creation attempt. To be counted as a success, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"SuccessCodes": [ 200, 201 ]</code> </p>
    pub success_codes: ::std::vec::Vec<i32>,
    /// <p>Status codes in the response that indicate a failed login or account creation attempt. To be counted as a failure, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"FailureCodes": [ 400, 404 ]</code> </p>
    pub failure_codes: ::std::vec::Vec<i32>,
}
impl ResponseInspectionStatusCode {
    /// <p>Status codes in the response that indicate a successful login or account creation attempt. To be counted as a success, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"SuccessCodes": [ 200, 201 ]</code> </p>
    pub fn success_codes(&self) -> &[i32] {
        use std::ops::Deref;
        self.success_codes.deref()
    }
    /// <p>Status codes in the response that indicate a failed login or account creation attempt. To be counted as a failure, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"FailureCodes": [ 400, 404 ]</code> </p>
    pub fn failure_codes(&self) -> &[i32] {
        use std::ops::Deref;
        self.failure_codes.deref()
    }
}
impl ResponseInspectionStatusCode {
    /// Creates a new builder-style object to manufacture [`ResponseInspectionStatusCode`](crate::types::ResponseInspectionStatusCode).
    pub fn builder() -> crate::types::builders::ResponseInspectionStatusCodeBuilder {
        crate::types::builders::ResponseInspectionStatusCodeBuilder::default()
    }
}

/// A builder for [`ResponseInspectionStatusCode`](crate::types::ResponseInspectionStatusCode).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResponseInspectionStatusCodeBuilder {
    pub(crate) success_codes: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) failure_codes: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl ResponseInspectionStatusCodeBuilder {
    /// Appends an item to `success_codes`.
    ///
    /// To override the contents of this collection use [`set_success_codes`](Self::set_success_codes).
    ///
    /// <p>Status codes in the response that indicate a successful login or account creation attempt. To be counted as a success, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"SuccessCodes": [ 200, 201 ]</code> </p>
    pub fn success_codes(mut self, input: i32) -> Self {
        let mut v = self.success_codes.unwrap_or_default();
        v.push(input);
        self.success_codes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Status codes in the response that indicate a successful login or account creation attempt. To be counted as a success, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"SuccessCodes": [ 200, 201 ]</code> </p>
    pub fn set_success_codes(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.success_codes = input;
        self
    }
    /// <p>Status codes in the response that indicate a successful login or account creation attempt. To be counted as a success, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"SuccessCodes": [ 200, 201 ]</code> </p>
    pub fn get_success_codes(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.success_codes
    }
    /// Appends an item to `failure_codes`.
    ///
    /// To override the contents of this collection use [`set_failure_codes`](Self::set_failure_codes).
    ///
    /// <p>Status codes in the response that indicate a failed login or account creation attempt. To be counted as a failure, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"FailureCodes": [ 400, 404 ]</code> </p>
    pub fn failure_codes(mut self, input: i32) -> Self {
        let mut v = self.failure_codes.unwrap_or_default();
        v.push(input);
        self.failure_codes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Status codes in the response that indicate a failed login or account creation attempt. To be counted as a failure, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"FailureCodes": [ 400, 404 ]</code> </p>
    pub fn set_failure_codes(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.failure_codes = input;
        self
    }
    /// <p>Status codes in the response that indicate a failed login or account creation attempt. To be counted as a failure, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p>
    /// <p>JSON example: <code>"FailureCodes": [ 400, 404 ]</code> </p>
    pub fn get_failure_codes(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.failure_codes
    }
    /// Consumes the builder and constructs a [`ResponseInspectionStatusCode`](crate::types::ResponseInspectionStatusCode).
    /// This method will fail if any of the following fields are not set:
    /// - [`success_codes`](crate::types::builders::ResponseInspectionStatusCodeBuilder::success_codes)
    /// - [`failure_codes`](crate::types::builders::ResponseInspectionStatusCodeBuilder::failure_codes)
    pub fn build(self) -> ::std::result::Result<crate::types::ResponseInspectionStatusCode, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResponseInspectionStatusCode {
            success_codes: self.success_codes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "success_codes",
                    "success_codes was not specified but it is required when building ResponseInspectionStatusCode",
                )
            })?,
            failure_codes: self.failure_codes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "failure_codes",
                    "failure_codes was not specified but it is required when building ResponseInspectionStatusCode",
                )
            })?,
        })
    }
}
