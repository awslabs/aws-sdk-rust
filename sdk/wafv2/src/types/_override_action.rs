// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. </p>
/// <p>You can only use this for rule statements that reference a rule group, like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p> <note>
/// <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with <code>Count</code> action, in your rule group reference statement settings. </p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OverrideAction {
    /// <p>Override the rule group evaluation result to count only. </p> <note>
    /// <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with <code>Count</code> action, in your rule group reference statement settings. </p>
    /// </note>
    #[doc(hidden)]
    pub count: std::option::Option<crate::types::CountAction>,
    /// <p>Don't override the rule group evaluation result. This is the most common setting.</p>
    #[doc(hidden)]
    pub none: std::option::Option<crate::types::NoneAction>,
}
impl OverrideAction {
    /// <p>Override the rule group evaluation result to count only. </p> <note>
    /// <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with <code>Count</code> action, in your rule group reference statement settings. </p>
    /// </note>
    pub fn count(&self) -> std::option::Option<&crate::types::CountAction> {
        self.count.as_ref()
    }
    /// <p>Don't override the rule group evaluation result. This is the most common setting.</p>
    pub fn none(&self) -> std::option::Option<&crate::types::NoneAction> {
        self.none.as_ref()
    }
}
impl OverrideAction {
    /// Creates a new builder-style object to manufacture [`OverrideAction`](crate::types::OverrideAction).
    pub fn builder() -> crate::types::builders::OverrideActionBuilder {
        crate::types::builders::OverrideActionBuilder::default()
    }
}

/// A builder for [`OverrideAction`](crate::types::OverrideAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OverrideActionBuilder {
    pub(crate) count: std::option::Option<crate::types::CountAction>,
    pub(crate) none: std::option::Option<crate::types::NoneAction>,
}
impl OverrideActionBuilder {
    /// <p>Override the rule group evaluation result to count only. </p> <note>
    /// <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with <code>Count</code> action, in your rule group reference statement settings. </p>
    /// </note>
    pub fn count(mut self, input: crate::types::CountAction) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>Override the rule group evaluation result to count only. </p> <note>
    /// <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with <code>Count</code> action, in your rule group reference statement settings. </p>
    /// </note>
    pub fn set_count(mut self, input: std::option::Option<crate::types::CountAction>) -> Self {
        self.count = input;
        self
    }
    /// <p>Don't override the rule group evaluation result. This is the most common setting.</p>
    pub fn none(mut self, input: crate::types::NoneAction) -> Self {
        self.none = Some(input);
        self
    }
    /// <p>Don't override the rule group evaluation result. This is the most common setting.</p>
    pub fn set_none(mut self, input: std::option::Option<crate::types::NoneAction>) -> Self {
        self.none = input;
        self
    }
    /// Consumes the builder and constructs a [`OverrideAction`](crate::types::OverrideAction).
    pub fn build(self) -> crate::types::OverrideAction {
        crate::types::OverrideAction {
            count: self.count,
            none: self.none,
        }
    }
}
