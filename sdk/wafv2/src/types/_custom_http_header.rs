// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A custom header for custom request and response handling. This is used in <code>CustomResponse</code> and <code>CustomRequestHandling</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomHttpHeader {
    /// <p>The name of the custom header. </p>
    /// <p>For custom request header insertion, when WAF inserts the header into the request, it prefixes this name <code>x-amzn-waf-</code>, to avoid confusion with the headers that are already in the request. For example, for the header name <code>sample</code>, WAF inserts the header <code>x-amzn-waf-sample</code>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The value of the custom header.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl CustomHttpHeader {
    /// <p>The name of the custom header. </p>
    /// <p>For custom request header insertion, when WAF inserts the header into the request, it prefixes this name <code>x-amzn-waf-</code>, to avoid confusion with the headers that are already in the request. For example, for the header name <code>sample</code>, WAF inserts the header <code>x-amzn-waf-sample</code>.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The value of the custom header.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl CustomHttpHeader {
    /// Creates a new builder-style object to manufacture [`CustomHttpHeader`](crate::types::CustomHttpHeader).
    pub fn builder() -> crate::types::builders::CustomHttpHeaderBuilder {
        crate::types::builders::CustomHttpHeaderBuilder::default()
    }
}

/// A builder for [`CustomHttpHeader`](crate::types::CustomHttpHeader).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomHttpHeaderBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl CustomHttpHeaderBuilder {
    /// <p>The name of the custom header. </p>
    /// <p>For custom request header insertion, when WAF inserts the header into the request, it prefixes this name <code>x-amzn-waf-</code>, to avoid confusion with the headers that are already in the request. For example, for the header name <code>sample</code>, WAF inserts the header <code>x-amzn-waf-sample</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the custom header. </p>
    /// <p>For custom request header insertion, when WAF inserts the header into the request, it prefixes this name <code>x-amzn-waf-</code>, to avoid confusion with the headers that are already in the request. For example, for the header name <code>sample</code>, WAF inserts the header <code>x-amzn-waf-sample</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The value of the custom header.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the custom header.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomHttpHeader`](crate::types::CustomHttpHeader).
    pub fn build(self) -> crate::types::CustomHttpHeader {
        crate::types::CustomHttpHeader {
            name: self.name,
            value: self.value,
        }
    }
}
