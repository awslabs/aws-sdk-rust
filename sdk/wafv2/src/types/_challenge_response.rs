// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result from the inspection of the web request for a valid challenge token. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChallengeResponse {
    /// <p>The HTTP response code indicating the status of the challenge token in the web request. If the token is missing, invalid, or expired, this code is <code>202 Request Accepted</code>.</p>
    #[doc(hidden)]
    pub response_code: std::option::Option<i32>,
    /// <p>The time that the challenge was last solved for the supplied token. </p>
    #[doc(hidden)]
    pub solve_timestamp: std::option::Option<i64>,
    /// <p>The reason for failure, populated when the evaluation of the token fails.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<crate::types::FailureReason>,
}
impl ChallengeResponse {
    /// <p>The HTTP response code indicating the status of the challenge token in the web request. If the token is missing, invalid, or expired, this code is <code>202 Request Accepted</code>.</p>
    pub fn response_code(&self) -> std::option::Option<i32> {
        self.response_code
    }
    /// <p>The time that the challenge was last solved for the supplied token. </p>
    pub fn solve_timestamp(&self) -> std::option::Option<i64> {
        self.solve_timestamp
    }
    /// <p>The reason for failure, populated when the evaluation of the token fails.</p>
    pub fn failure_reason(&self) -> std::option::Option<&crate::types::FailureReason> {
        self.failure_reason.as_ref()
    }
}
impl ChallengeResponse {
    /// Creates a new builder-style object to manufacture [`ChallengeResponse`](crate::types::ChallengeResponse).
    pub fn builder() -> crate::types::builders::ChallengeResponseBuilder {
        crate::types::builders::ChallengeResponseBuilder::default()
    }
}

/// A builder for [`ChallengeResponse`](crate::types::ChallengeResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChallengeResponseBuilder {
    pub(crate) response_code: std::option::Option<i32>,
    pub(crate) solve_timestamp: std::option::Option<i64>,
    pub(crate) failure_reason: std::option::Option<crate::types::FailureReason>,
}
impl ChallengeResponseBuilder {
    /// <p>The HTTP response code indicating the status of the challenge token in the web request. If the token is missing, invalid, or expired, this code is <code>202 Request Accepted</code>.</p>
    pub fn response_code(mut self, input: i32) -> Self {
        self.response_code = Some(input);
        self
    }
    /// <p>The HTTP response code indicating the status of the challenge token in the web request. If the token is missing, invalid, or expired, this code is <code>202 Request Accepted</code>.</p>
    pub fn set_response_code(mut self, input: std::option::Option<i32>) -> Self {
        self.response_code = input;
        self
    }
    /// <p>The time that the challenge was last solved for the supplied token. </p>
    pub fn solve_timestamp(mut self, input: i64) -> Self {
        self.solve_timestamp = Some(input);
        self
    }
    /// <p>The time that the challenge was last solved for the supplied token. </p>
    pub fn set_solve_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.solve_timestamp = input;
        self
    }
    /// <p>The reason for failure, populated when the evaluation of the token fails.</p>
    pub fn failure_reason(mut self, input: crate::types::FailureReason) -> Self {
        self.failure_reason = Some(input);
        self
    }
    /// <p>The reason for failure, populated when the evaluation of the token fails.</p>
    pub fn set_failure_reason(
        mut self,
        input: std::option::Option<crate::types::FailureReason>,
    ) -> Self {
        self.failure_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`ChallengeResponse`](crate::types::ChallengeResponse).
    pub fn build(self) -> crate::types::ChallengeResponse {
        crate::types::ChallengeResponse {
            response_code: self.response_code,
            solve_timestamp: self.solve_timestamp,
            failure_reason: self.failure_reason,
        }
    }
}
