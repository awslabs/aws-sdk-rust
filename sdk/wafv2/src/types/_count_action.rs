// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies that WAF should count the request. Optionally defines additional custom handling for the request.</p>
/// <p>This is used in the context of other settings, for example to specify values for <code>RuleAction</code> and web ACL <code>DefaultAction</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CountAction {
    /// <p>Defines custom handling for the web request.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    #[doc(hidden)]
    pub custom_request_handling: std::option::Option<crate::types::CustomRequestHandling>,
}
impl CountAction {
    /// <p>Defines custom handling for the web request.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    pub fn custom_request_handling(
        &self,
    ) -> std::option::Option<&crate::types::CustomRequestHandling> {
        self.custom_request_handling.as_ref()
    }
}
impl CountAction {
    /// Creates a new builder-style object to manufacture [`CountAction`](crate::types::CountAction).
    pub fn builder() -> crate::types::builders::CountActionBuilder {
        crate::types::builders::CountActionBuilder::default()
    }
}

/// A builder for [`CountAction`](crate::types::CountAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CountActionBuilder {
    pub(crate) custom_request_handling: std::option::Option<crate::types::CustomRequestHandling>,
}
impl CountActionBuilder {
    /// <p>Defines custom handling for the web request.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    pub fn custom_request_handling(mut self, input: crate::types::CustomRequestHandling) -> Self {
        self.custom_request_handling = Some(input);
        self
    }
    /// <p>Defines custom handling for the web request.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    pub fn set_custom_request_handling(
        mut self,
        input: std::option::Option<crate::types::CustomRequestHandling>,
    ) -> Self {
        self.custom_request_handling = input;
        self
    }
    /// Consumes the builder and constructs a [`CountAction`](crate::types::CountAction).
    pub fn build(self) -> crate::types::CountAction {
        crate::types::CountAction {
            custom_request_handling: self.custom_request_handling,
        }
    }
}
