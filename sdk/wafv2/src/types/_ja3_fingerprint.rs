// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Match against the request's JA3 fingerprint. The JA3 fingerprint is a 32-character hash derived from the TLS Client Hello of an incoming request. This fingerprint serves as a unique identifier for the client's TLS configuration. WAF calculates and logs this fingerprint for each request that has enough TLS Client Hello information for the calculation. Almost all web requests include this information.</p> <note>
/// <p>You can use this choice only with a string match <code>ByteMatchStatement</code> with the <code>PositionalConstraint</code> set to <code>EXACTLY</code>. </p>
/// </note>
/// <p>You can obtain the JA3 fingerprint for client requests from the web ACL logs. If WAF is able to calculate the fingerprint, it includes it in the logs. For information about the logging fields, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging-fields.html">Log fields</a> in the <i>WAF Developer Guide</i>. </p>
/// <p>Provide the JA3 fingerprint string from the logs in your string match statement specification, to match with any future requests that have the same TLS configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ja3Fingerprint {
    /// <p>The match status to assign to the web request if the request doesn't have a JA3 fingerprint. </p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li>
    /// <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li>
    /// </ul>
    pub fallback_behavior: crate::types::FallbackBehavior,
}
impl Ja3Fingerprint {
    /// <p>The match status to assign to the web request if the request doesn't have a JA3 fingerprint. </p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li>
    /// <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li>
    /// </ul>
    pub fn fallback_behavior(&self) -> &crate::types::FallbackBehavior {
        &self.fallback_behavior
    }
}
impl Ja3Fingerprint {
    /// Creates a new builder-style object to manufacture [`Ja3Fingerprint`](crate::types::Ja3Fingerprint).
    pub fn builder() -> crate::types::builders::Ja3FingerprintBuilder {
        crate::types::builders::Ja3FingerprintBuilder::default()
    }
}

/// A builder for [`Ja3Fingerprint`](crate::types::Ja3Fingerprint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct Ja3FingerprintBuilder {
    pub(crate) fallback_behavior: ::std::option::Option<crate::types::FallbackBehavior>,
}
impl Ja3FingerprintBuilder {
    /// <p>The match status to assign to the web request if the request doesn't have a JA3 fingerprint. </p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li>
    /// <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn fallback_behavior(mut self, input: crate::types::FallbackBehavior) -> Self {
        self.fallback_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The match status to assign to the web request if the request doesn't have a JA3 fingerprint. </p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li>
    /// <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li>
    /// </ul>
    pub fn set_fallback_behavior(mut self, input: ::std::option::Option<crate::types::FallbackBehavior>) -> Self {
        self.fallback_behavior = input;
        self
    }
    /// <p>The match status to assign to the web request if the request doesn't have a JA3 fingerprint. </p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li>
    /// <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li>
    /// </ul>
    pub fn get_fallback_behavior(&self) -> &::std::option::Option<crate::types::FallbackBehavior> {
        &self.fallback_behavior
    }
    /// Consumes the builder and constructs a [`Ja3Fingerprint`](crate::types::Ja3Fingerprint).
    /// This method will fail if any of the following fields are not set:
    /// - [`fallback_behavior`](crate::types::builders::Ja3FingerprintBuilder::fallback_behavior)
    pub fn build(self) -> ::std::result::Result<crate::types::Ja3Fingerprint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Ja3Fingerprint {
            fallback_behavior: self.fallback_behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fallback_behavior",
                    "fallback_behavior was not specified but it is required when building Ja3Fingerprint",
                )
            })?,
        })
    }
}
