// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Inspect one of the headers in the web request, identified by name, for example, <code>User-Agent</code> or <code>Referer</code>. The name isn't case sensitive.</p>
/// <p>You can filter and inspect all headers with the <code>FieldToMatch</code> setting <code>Headers</code>.</p>
/// <p>This is used to indicate the web request component to inspect, in the <code>FieldToMatch</code> specification. </p>
/// <p>Example JSON: <code>"SingleHeader": { "Name": "haystack" }</code> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SingleHeader {
    /// <p>The name of the query header to inspect.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl SingleHeader {
    /// <p>The name of the query header to inspect.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl SingleHeader {
    /// Creates a new builder-style object to manufacture [`SingleHeader`](crate::types::SingleHeader).
    pub fn builder() -> crate::types::builders::SingleHeaderBuilder {
        crate::types::builders::SingleHeaderBuilder::default()
    }
}

/// A builder for [`SingleHeader`](crate::types::SingleHeader).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SingleHeaderBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
}
impl SingleHeaderBuilder {
    /// <p>The name of the query header to inspect.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the query header to inspect.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`SingleHeader`](crate::types::SingleHeader).
    pub fn build(self) -> crate::types::SingleHeader {
        crate::types::SingleHeader { name: self.name }
    }
}
