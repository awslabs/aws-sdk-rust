// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>In a <code>WebACL</code>, this is the action that you want WAF to perform when a web request doesn't match any of the rules in the <code>WebACL</code>. The default action must be a terminating action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DefaultAction {
    /// <p>Specifies that WAF should block requests by default. </p>
    #[doc(hidden)]
    pub block: std::option::Option<crate::types::BlockAction>,
    /// <p>Specifies that WAF should allow requests by default.</p>
    #[doc(hidden)]
    pub allow: std::option::Option<crate::types::AllowAction>,
}
impl DefaultAction {
    /// <p>Specifies that WAF should block requests by default. </p>
    pub fn block(&self) -> std::option::Option<&crate::types::BlockAction> {
        self.block.as_ref()
    }
    /// <p>Specifies that WAF should allow requests by default.</p>
    pub fn allow(&self) -> std::option::Option<&crate::types::AllowAction> {
        self.allow.as_ref()
    }
}
impl DefaultAction {
    /// Creates a new builder-style object to manufacture [`DefaultAction`](crate::types::DefaultAction).
    pub fn builder() -> crate::types::builders::DefaultActionBuilder {
        crate::types::builders::DefaultActionBuilder::default()
    }
}

/// A builder for [`DefaultAction`](crate::types::DefaultAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DefaultActionBuilder {
    pub(crate) block: std::option::Option<crate::types::BlockAction>,
    pub(crate) allow: std::option::Option<crate::types::AllowAction>,
}
impl DefaultActionBuilder {
    /// <p>Specifies that WAF should block requests by default. </p>
    pub fn block(mut self, input: crate::types::BlockAction) -> Self {
        self.block = Some(input);
        self
    }
    /// <p>Specifies that WAF should block requests by default. </p>
    pub fn set_block(mut self, input: std::option::Option<crate::types::BlockAction>) -> Self {
        self.block = input;
        self
    }
    /// <p>Specifies that WAF should allow requests by default.</p>
    pub fn allow(mut self, input: crate::types::AllowAction) -> Self {
        self.allow = Some(input);
        self
    }
    /// <p>Specifies that WAF should allow requests by default.</p>
    pub fn set_allow(mut self, input: std::option::Option<crate::types::AllowAction>) -> Self {
        self.allow = input;
        self
    }
    /// Consumes the builder and constructs a [`DefaultAction`](crate::types::DefaultAction).
    pub fn build(self) -> crate::types::DefaultAction {
        crate::types::DefaultAction {
            block: self.block,
            allow: self.allow,
        }
    }
}
