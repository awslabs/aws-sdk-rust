// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies that WAF should run a <code>CAPTCHA</code> check against the request: </p>
/// <ul>
/// <li> <p>If the request includes a valid, unexpired <code>CAPTCHA</code> token, WAF applies any custom request handling and labels that you've configured and then allows the web request inspection to proceed to the next rule, similar to a <code>CountAction</code>. </p> </li>
/// <li> <p>If the request doesn't include a valid, unexpired token, WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.</p> <p>WAF generates a response that it sends back to the client, which includes the following: </p>
/// <ul>
/// <li> <p>The header <code>x-amzn-waf-action</code> with a value of <code>captcha</code>. </p> </li>
/// <li> <p>The HTTP status code <code>405 Method Not Allowed</code>. </p> </li>
/// <li> <p>If the request contains an <code>Accept</code> header with a value of <code>text/html</code>, the response includes a <code>CAPTCHA</code> JavaScript page interstitial. </p> </li>
/// </ul> </li>
/// </ul>
/// <p>You can configure the expiration time in the <code>CaptchaConfig</code> <code>ImmunityTimeProperty</code> setting at the rule and web ACL level. The rule setting overrides the web ACL setting. </p>
/// <p>This action option is available for rules. It isn't available for web ACL default actions. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CaptchaAction {
    /// <p>Defines custom handling for the web request, used when the <code>CAPTCHA</code> inspection determines that the request's token is valid and unexpired.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    #[doc(hidden)]
    pub custom_request_handling: std::option::Option<crate::types::CustomRequestHandling>,
}
impl CaptchaAction {
    /// <p>Defines custom handling for the web request, used when the <code>CAPTCHA</code> inspection determines that the request's token is valid and unexpired.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    pub fn custom_request_handling(
        &self,
    ) -> std::option::Option<&crate::types::CustomRequestHandling> {
        self.custom_request_handling.as_ref()
    }
}
impl CaptchaAction {
    /// Creates a new builder-style object to manufacture [`CaptchaAction`](crate::types::CaptchaAction).
    pub fn builder() -> crate::types::builders::CaptchaActionBuilder {
        crate::types::builders::CaptchaActionBuilder::default()
    }
}

/// A builder for [`CaptchaAction`](crate::types::CaptchaAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CaptchaActionBuilder {
    pub(crate) custom_request_handling: std::option::Option<crate::types::CustomRequestHandling>,
}
impl CaptchaActionBuilder {
    /// <p>Defines custom handling for the web request, used when the <code>CAPTCHA</code> inspection determines that the request's token is valid and unexpired.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    pub fn custom_request_handling(mut self, input: crate::types::CustomRequestHandling) -> Self {
        self.custom_request_handling = Some(input);
        self
    }
    /// <p>Defines custom handling for the web request, used when the <code>CAPTCHA</code> inspection determines that the request's token is valid and unexpired.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    pub fn set_custom_request_handling(
        mut self,
        input: std::option::Option<crate::types::CustomRequestHandling>,
    ) -> Self {
        self.custom_request_handling = input;
        self
    }
    /// Consumes the builder and constructs a [`CaptchaAction`](crate::types::CaptchaAction).
    pub fn build(self) -> crate::types::CaptchaAction {
        crate::types::CaptchaAction {
            custom_request_handling: self.custom_request_handling,
        }
    }
}
