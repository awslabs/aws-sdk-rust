// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies that WAF should run a <code>Challenge</code> check against the request to verify that the request is coming from a legitimate client session: </p>
/// <ul>
/// <li> <p>If the request includes a valid, unexpired challenge token, WAF applies any custom request handling and labels that you've configured and then allows the web request inspection to proceed to the next rule, similar to a <code>CountAction</code>. </p> </li>
/// <li> <p>If the request doesn't include a valid, unexpired challenge token, WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.</p> <p>WAF then generates a challenge response that it sends back to the client, which includes the following: </p>
/// <ul>
/// <li> <p>The header <code>x-amzn-waf-action</code> with a value of <code>challenge</code>. </p> </li>
/// <li> <p>The HTTP status code <code>202 Request Accepted</code>. </p> </li>
/// <li> <p>If the request contains an <code>Accept</code> header with a value of <code>text/html</code>, the response includes a JavaScript page interstitial with a challenge script. </p> </li>
/// </ul> <p>Challenges run silent browser interrogations in the background, and don't generally affect the end user experience. </p> <p>A challenge enforces token acquisition using an interstitial JavaScript challenge that inspects the client session for legitimate behavior. The challenge blocks bots or at least increases the cost of operating sophisticated bots. </p> <p>After the client session successfully responds to the challenge, it receives a new token from WAF, which the challenge script uses to resubmit the original request. </p> </li>
/// </ul>
/// <p>You can configure the expiration time in the <code>ChallengeConfig</code> <code>ImmunityTimeProperty</code> setting at the rule and web ACL level. The rule setting overrides the web ACL setting. </p>
/// <p>This action option is available for rules. It isn't available for web ACL default actions. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChallengeAction {
    /// <p>Defines custom handling for the web request, used when the challenge inspection determines that the request's token is valid and unexpired.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    #[doc(hidden)]
    pub custom_request_handling: std::option::Option<crate::types::CustomRequestHandling>,
}
impl ChallengeAction {
    /// <p>Defines custom handling for the web request, used when the challenge inspection determines that the request's token is valid and unexpired.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    pub fn custom_request_handling(
        &self,
    ) -> std::option::Option<&crate::types::CustomRequestHandling> {
        self.custom_request_handling.as_ref()
    }
}
impl ChallengeAction {
    /// Creates a new builder-style object to manufacture [`ChallengeAction`](crate::types::ChallengeAction).
    pub fn builder() -> crate::types::builders::ChallengeActionBuilder {
        crate::types::builders::ChallengeActionBuilder::default()
    }
}

/// A builder for [`ChallengeAction`](crate::types::ChallengeAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChallengeActionBuilder {
    pub(crate) custom_request_handling: std::option::Option<crate::types::CustomRequestHandling>,
}
impl ChallengeActionBuilder {
    /// <p>Defines custom handling for the web request, used when the challenge inspection determines that the request's token is valid and unexpired.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    pub fn custom_request_handling(mut self, input: crate::types::CustomRequestHandling) -> Self {
        self.custom_request_handling = Some(input);
        self
    }
    /// <p>Defines custom handling for the web request, used when the challenge inspection determines that the request's token is valid and unexpired.</p>
    /// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
    pub fn set_custom_request_handling(
        mut self,
        input: std::option::Option<crate::types::CustomRequestHandling>,
    ) -> Self {
        self.custom_request_handling = input;
        self
    }
    /// Consumes the builder and constructs a [`ChallengeAction`](crate::types::ChallengeAction).
    pub fn build(self) -> crate::types::ChallengeAction {
        crate::types::ChallengeAction {
            custom_request_handling: self.custom_request_handling,
        }
    }
}
