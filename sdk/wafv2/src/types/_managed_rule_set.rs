// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of rules that is managed by Amazon Web Services and Amazon Web Services Marketplace sellers to provide versioned managed rule groups for customers of WAF.</p> <note>
/// <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
/// <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ManagedRuleSet {
    /// <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
    /// <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the entity.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A description of the set that helps with identification. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The versions of this managed rule set that are available for use by customers. </p>
    #[doc(hidden)]
    pub published_versions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ManagedRuleSetVersion>,
    >,
    /// <p>The version that you would like your customers to use.</p>
    #[doc(hidden)]
    pub recommended_version: std::option::Option<std::string::String>,
    /// <p>The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix. </p>
    /// <ul>
    /// <li> <p>The syntax for the label namespace prefix for a managed rule group is the following: </p> <p> <code>awswaf:managed:
    /// <vendor>
    /// :
    /// <rule group name></rule>
    /// </vendor></code>:</p> </li>
    /// <li> <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p> <p> <code><label namespace>:<label from rule></label></label></code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub label_namespace: std::option::Option<std::string::String>,
}
impl ManagedRuleSet {
    /// <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
    /// <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the entity.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A description of the set that helps with identification. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The versions of this managed rule set that are available for use by customers. </p>
    pub fn published_versions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::ManagedRuleSetVersion>,
    > {
        self.published_versions.as_ref()
    }
    /// <p>The version that you would like your customers to use.</p>
    pub fn recommended_version(&self) -> std::option::Option<&str> {
        self.recommended_version.as_deref()
    }
    /// <p>The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix. </p>
    /// <ul>
    /// <li> <p>The syntax for the label namespace prefix for a managed rule group is the following: </p> <p> <code>awswaf:managed:
    /// <vendor>
    /// :
    /// <rule group name></rule>
    /// </vendor></code>:</p> </li>
    /// <li> <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p> <p> <code><label namespace>:<label from rule></label></label></code> </p> </li>
    /// </ul>
    pub fn label_namespace(&self) -> std::option::Option<&str> {
        self.label_namespace.as_deref()
    }
}
impl ManagedRuleSet {
    /// Creates a new builder-style object to manufacture [`ManagedRuleSet`](crate::types::ManagedRuleSet).
    pub fn builder() -> crate::types::builders::ManagedRuleSetBuilder {
        crate::types::builders::ManagedRuleSetBuilder::default()
    }
}

/// A builder for [`ManagedRuleSet`](crate::types::ManagedRuleSet).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ManagedRuleSetBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) published_versions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ManagedRuleSetVersion>,
    >,
    pub(crate) recommended_version: std::option::Option<std::string::String>,
    pub(crate) label_namespace: std::option::Option<std::string::String>,
}
impl ManagedRuleSetBuilder {
    /// <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
    /// <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
    /// <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the entity.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the entity.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>A description of the set that helps with identification. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the set that helps with identification. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Adds a key-value pair to `published_versions`.
    ///
    /// To override the contents of this collection use [`set_published_versions`](Self::set_published_versions).
    ///
    /// <p>The versions of this managed rule set that are available for use by customers. </p>
    pub fn published_versions(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ManagedRuleSetVersion,
    ) -> Self {
        let mut hash_map = self.published_versions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.published_versions = Some(hash_map);
        self
    }
    /// <p>The versions of this managed rule set that are available for use by customers. </p>
    pub fn set_published_versions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ManagedRuleSetVersion>,
        >,
    ) -> Self {
        self.published_versions = input;
        self
    }
    /// <p>The version that you would like your customers to use.</p>
    pub fn recommended_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommended_version = Some(input.into());
        self
    }
    /// <p>The version that you would like your customers to use.</p>
    pub fn set_recommended_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommended_version = input;
        self
    }
    /// <p>The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix. </p>
    /// <ul>
    /// <li> <p>The syntax for the label namespace prefix for a managed rule group is the following: </p> <p> <code>awswaf:managed:
    /// <vendor>
    /// :
    /// <rule group name></rule>
    /// </vendor></code>:</p> </li>
    /// <li> <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p> <p> <code><label namespace>:<label from rule></label></label></code> </p> </li>
    /// </ul>
    pub fn label_namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.label_namespace = Some(input.into());
        self
    }
    /// <p>The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix. </p>
    /// <ul>
    /// <li> <p>The syntax for the label namespace prefix for a managed rule group is the following: </p> <p> <code>awswaf:managed:
    /// <vendor>
    /// :
    /// <rule group name></rule>
    /// </vendor></code>:</p> </li>
    /// <li> <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p> <p> <code><label namespace>:<label from rule></label></label></code> </p> </li>
    /// </ul>
    pub fn set_label_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.label_namespace = input;
        self
    }
    /// Consumes the builder and constructs a [`ManagedRuleSet`](crate::types::ManagedRuleSet).
    pub fn build(self) -> crate::types::ManagedRuleSet {
        crate::types::ManagedRuleSet {
            name: self.name,
            id: self.id,
            arn: self.arn,
            description: self.description,
            published_versions: self.published_versions,
            recommended_version: self.recommended_version,
            label_namespace: self.label_namespace,
        }
    }
}
