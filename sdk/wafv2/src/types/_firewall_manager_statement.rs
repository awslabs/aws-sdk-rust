// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The processing guidance for an Firewall Manager rule. This is like a regular rule <code>Statement</code>, but it can only contain a rule group reference.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FirewallManagerStatement {
    /// <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <code>ListAvailableManagedRuleGroups</code>.</p>
    /// <p>You cannot nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p> <note>
    /// <p>You are charged additional fees when you use the WAF Bot Control managed rule group <code>AWSManagedRulesBotControlRuleSet</code> or the WAF Fraud Control account takeover prevention (ATP) managed rule group <code>AWSManagedRulesATPRuleSet</code>. For more information, see <a href="http://aws.amazon.com/waf/pricing/">WAF Pricing</a>.</p>
    /// </note>
    #[doc(hidden)]
    pub managed_rule_group_statement: std::option::Option<crate::types::ManagedRuleGroupStatement>,
    /// <p>A rule statement used to run the rules that are defined in a <code>RuleGroup</code>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
    /// <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. You can only use a rule group reference statement at the top level inside a web ACL. </p>
    #[doc(hidden)]
    pub rule_group_reference_statement:
        std::option::Option<crate::types::RuleGroupReferenceStatement>,
}
impl FirewallManagerStatement {
    /// <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <code>ListAvailableManagedRuleGroups</code>.</p>
    /// <p>You cannot nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p> <note>
    /// <p>You are charged additional fees when you use the WAF Bot Control managed rule group <code>AWSManagedRulesBotControlRuleSet</code> or the WAF Fraud Control account takeover prevention (ATP) managed rule group <code>AWSManagedRulesATPRuleSet</code>. For more information, see <a href="http://aws.amazon.com/waf/pricing/">WAF Pricing</a>.</p>
    /// </note>
    pub fn managed_rule_group_statement(
        &self,
    ) -> std::option::Option<&crate::types::ManagedRuleGroupStatement> {
        self.managed_rule_group_statement.as_ref()
    }
    /// <p>A rule statement used to run the rules that are defined in a <code>RuleGroup</code>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
    /// <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. You can only use a rule group reference statement at the top level inside a web ACL. </p>
    pub fn rule_group_reference_statement(
        &self,
    ) -> std::option::Option<&crate::types::RuleGroupReferenceStatement> {
        self.rule_group_reference_statement.as_ref()
    }
}
impl FirewallManagerStatement {
    /// Creates a new builder-style object to manufacture [`FirewallManagerStatement`](crate::types::FirewallManagerStatement).
    pub fn builder() -> crate::types::builders::FirewallManagerStatementBuilder {
        crate::types::builders::FirewallManagerStatementBuilder::default()
    }
}

/// A builder for [`FirewallManagerStatement`](crate::types::FirewallManagerStatement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FirewallManagerStatementBuilder {
    pub(crate) managed_rule_group_statement:
        std::option::Option<crate::types::ManagedRuleGroupStatement>,
    pub(crate) rule_group_reference_statement:
        std::option::Option<crate::types::RuleGroupReferenceStatement>,
}
impl FirewallManagerStatementBuilder {
    /// <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <code>ListAvailableManagedRuleGroups</code>.</p>
    /// <p>You cannot nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p> <note>
    /// <p>You are charged additional fees when you use the WAF Bot Control managed rule group <code>AWSManagedRulesBotControlRuleSet</code> or the WAF Fraud Control account takeover prevention (ATP) managed rule group <code>AWSManagedRulesATPRuleSet</code>. For more information, see <a href="http://aws.amazon.com/waf/pricing/">WAF Pricing</a>.</p>
    /// </note>
    pub fn managed_rule_group_statement(
        mut self,
        input: crate::types::ManagedRuleGroupStatement,
    ) -> Self {
        self.managed_rule_group_statement = Some(input);
        self
    }
    /// <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <code>ListAvailableManagedRuleGroups</code>.</p>
    /// <p>You cannot nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p> <note>
    /// <p>You are charged additional fees when you use the WAF Bot Control managed rule group <code>AWSManagedRulesBotControlRuleSet</code> or the WAF Fraud Control account takeover prevention (ATP) managed rule group <code>AWSManagedRulesATPRuleSet</code>. For more information, see <a href="http://aws.amazon.com/waf/pricing/">WAF Pricing</a>.</p>
    /// </note>
    pub fn set_managed_rule_group_statement(
        mut self,
        input: std::option::Option<crate::types::ManagedRuleGroupStatement>,
    ) -> Self {
        self.managed_rule_group_statement = input;
        self
    }
    /// <p>A rule statement used to run the rules that are defined in a <code>RuleGroup</code>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
    /// <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. You can only use a rule group reference statement at the top level inside a web ACL. </p>
    pub fn rule_group_reference_statement(
        mut self,
        input: crate::types::RuleGroupReferenceStatement,
    ) -> Self {
        self.rule_group_reference_statement = Some(input);
        self
    }
    /// <p>A rule statement used to run the rules that are defined in a <code>RuleGroup</code>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
    /// <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. You can only use a rule group reference statement at the top level inside a web ACL. </p>
    pub fn set_rule_group_reference_statement(
        mut self,
        input: std::option::Option<crate::types::RuleGroupReferenceStatement>,
    ) -> Self {
        self.rule_group_reference_statement = input;
        self
    }
    /// Consumes the builder and constructs a [`FirewallManagerStatement`](crate::types::FirewallManagerStatement).
    pub fn build(self) -> crate::types::FirewallManagerStatement {
        crate::types::FirewallManagerStatement {
            managed_rule_group_statement: self.managed_rule_group_statement,
            rule_group_reference_statement: self.rule_group_reference_statement,
        }
    }
}
