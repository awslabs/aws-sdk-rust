// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The collection of tagging definitions for an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.</p>
/// <p>You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagInfoForResource {
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The array of <code>Tag</code> objects defined for the resource. </p>
    #[doc(hidden)]
    pub tag_list: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl TagInfoForResource {
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The array of <code>Tag</code> objects defined for the resource. </p>
    pub fn tag_list(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tag_list.as_deref()
    }
}
impl TagInfoForResource {
    /// Creates a new builder-style object to manufacture [`TagInfoForResource`](crate::types::TagInfoForResource).
    pub fn builder() -> crate::types::builders::TagInfoForResourceBuilder {
        crate::types::builders::TagInfoForResourceBuilder::default()
    }
}

/// A builder for [`TagInfoForResource`](crate::types::TagInfoForResource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TagInfoForResourceBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) tag_list: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl TagInfoForResourceBuilder {
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// Appends an item to `tag_list`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>The array of <code>Tag</code> objects defined for the resource. </p>
    pub fn tag_list(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tag_list.unwrap_or_default();
        v.push(input);
        self.tag_list = Some(v);
        self
    }
    /// <p>The array of <code>Tag</code> objects defined for the resource. </p>
    pub fn set_tag_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tag_list = input;
        self
    }
    /// Consumes the builder and constructs a [`TagInfoForResource`](crate::types::TagInfoForResource).
    pub fn build(self) -> crate::types::TagInfoForResource {
        crate::types::TagInfoForResource {
            resource_arn: self.resource_arn,
            tag_list: self.tag_list,
        }
    }
}
