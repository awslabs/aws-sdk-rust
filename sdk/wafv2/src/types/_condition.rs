// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single match condition for a <code>Filter</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Condition {
    /// <p>A single action condition. This is the action setting that a log record must contain in order to meet the condition.</p>
    #[doc(hidden)]
    pub action_condition: std::option::Option<crate::types::ActionCondition>,
    /// <p>A single label name condition. This is the fully qualified label name that a log record must contain in order to meet the condition. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. </p>
    #[doc(hidden)]
    pub label_name_condition: std::option::Option<crate::types::LabelNameCondition>,
}
impl Condition {
    /// <p>A single action condition. This is the action setting that a log record must contain in order to meet the condition.</p>
    pub fn action_condition(&self) -> std::option::Option<&crate::types::ActionCondition> {
        self.action_condition.as_ref()
    }
    /// <p>A single label name condition. This is the fully qualified label name that a log record must contain in order to meet the condition. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. </p>
    pub fn label_name_condition(&self) -> std::option::Option<&crate::types::LabelNameCondition> {
        self.label_name_condition.as_ref()
    }
}
impl Condition {
    /// Creates a new builder-style object to manufacture [`Condition`](crate::types::Condition).
    pub fn builder() -> crate::types::builders::ConditionBuilder {
        crate::types::builders::ConditionBuilder::default()
    }
}

/// A builder for [`Condition`](crate::types::Condition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConditionBuilder {
    pub(crate) action_condition: std::option::Option<crate::types::ActionCondition>,
    pub(crate) label_name_condition: std::option::Option<crate::types::LabelNameCondition>,
}
impl ConditionBuilder {
    /// <p>A single action condition. This is the action setting that a log record must contain in order to meet the condition.</p>
    pub fn action_condition(mut self, input: crate::types::ActionCondition) -> Self {
        self.action_condition = Some(input);
        self
    }
    /// <p>A single action condition. This is the action setting that a log record must contain in order to meet the condition.</p>
    pub fn set_action_condition(
        mut self,
        input: std::option::Option<crate::types::ActionCondition>,
    ) -> Self {
        self.action_condition = input;
        self
    }
    /// <p>A single label name condition. This is the fully qualified label name that a log record must contain in order to meet the condition. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. </p>
    pub fn label_name_condition(mut self, input: crate::types::LabelNameCondition) -> Self {
        self.label_name_condition = Some(input);
        self
    }
    /// <p>A single label name condition. This is the fully qualified label name that a log record must contain in order to meet the condition. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. </p>
    pub fn set_label_name_condition(
        mut self,
        input: std::option::Option<crate::types::LabelNameCondition>,
    ) -> Self {
        self.label_name_condition = input;
        self
    }
    /// Consumes the builder and constructs a [`Condition`](crate::types::Condition).
    pub fn build(self) -> crate::types::Condition {
        crate::types::Condition {
            action_condition: self.action_condition,
            label_name_condition: self.label_name_condition,
        }
    }
}
