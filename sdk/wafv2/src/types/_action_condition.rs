// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single action condition for a <code>Condition</code> in a logging filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActionCondition {
    /// <p>The action setting that a log record must contain in order to meet the condition. This is the action that WAF applied to the web request. </p>
    /// <p>For rule groups, this is either the configured rule action setting, or if you've applied a rule action override to the rule, it's the override action. The value <code>EXCLUDED_AS_COUNT</code> matches on excluded rules and also on rules that have a rule action override of Count. </p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::ActionValue>,
}
impl ActionCondition {
    /// <p>The action setting that a log record must contain in order to meet the condition. This is the action that WAF applied to the web request. </p>
    /// <p>For rule groups, this is either the configured rule action setting, or if you've applied a rule action override to the rule, it's the override action. The value <code>EXCLUDED_AS_COUNT</code> matches on excluded rules and also on rules that have a rule action override of Count. </p>
    pub fn action(&self) -> std::option::Option<&crate::types::ActionValue> {
        self.action.as_ref()
    }
}
impl ActionCondition {
    /// Creates a new builder-style object to manufacture [`ActionCondition`](crate::types::ActionCondition).
    pub fn builder() -> crate::types::builders::ActionConditionBuilder {
        crate::types::builders::ActionConditionBuilder::default()
    }
}

/// A builder for [`ActionCondition`](crate::types::ActionCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionConditionBuilder {
    pub(crate) action: std::option::Option<crate::types::ActionValue>,
}
impl ActionConditionBuilder {
    /// <p>The action setting that a log record must contain in order to meet the condition. This is the action that WAF applied to the web request. </p>
    /// <p>For rule groups, this is either the configured rule action setting, or if you've applied a rule action override to the rule, it's the override action. The value <code>EXCLUDED_AS_COUNT</code> matches on excluded rules and also on rules that have a rule action override of Count. </p>
    pub fn action(mut self, input: crate::types::ActionValue) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>The action setting that a log record must contain in order to meet the condition. This is the action that WAF applied to the web request. </p>
    /// <p>For rule groups, this is either the configured rule action setting, or if you've applied a rule action override to the rule, it's the override action. The value <code>EXCLUDED_AS_COUNT</code> matches on excluded rules and also on rules that have a rule action override of Count. </p>
    pub fn set_action(mut self, input: std::option::Option<crate::types::ActionValue>) -> Self {
        self.action = input;
        self
    }
    /// Consumes the builder and constructs a [`ActionCondition`](crate::types::ActionCondition).
    pub fn build(self) -> crate::types::ActionCondition {
        crate::types::ActionCondition {
            action: self.action,
        }
    }
}
