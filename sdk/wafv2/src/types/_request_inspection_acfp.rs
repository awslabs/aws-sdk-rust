// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts. </p>
/// <p>This is part of the <code>AWSManagedRulesACFPRuleSet</code> configuration in <code>ManagedRuleGroupConfig</code>.</p>
/// <p>In these settings, you specify how your application accepts account creation attempts by providing the request payload type and the names of the fields within the request body where the username, password, email, and primary address and phone number fields are provided. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestInspectionAcfp {
    /// <p>The payload type for your account creation endpoint, either JSON or form encoded.</p>
    pub payload_type: crate::types::PayloadType,
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    pub username_field: ::std::option::Option<crate::types::UsernameField>,
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    pub password_field: ::std::option::Option<crate::types::PasswordField>,
    /// <p>The name of the field in the request payload that contains your customer's email. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "email": "THE_EMAIL" } }</code>, the email field specification is <code>/form/email</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>email1</code>, the email field specification is <code>email1</code>.</p> </li>
    /// </ul>
    pub email_field: ::std::option::Option<crate::types::EmailField>,
    /// <p>The names of the fields in the request payload that contain your customer's primary phone number. </p>
    /// <p>Order the phone number fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the phone number fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryphoneline1": "THE_PHONE1", "primaryphoneline2": "THE_PHONE2", "primaryphoneline3": "THE_PHONE3" } }</code>, the phone number field identifiers are <code>/form/primaryphoneline1</code>, <code>/form/primaryphoneline2</code>, and <code>/form/primaryphoneline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>, the phone number field identifiers are <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>. </p> </li>
    /// </ul>
    pub phone_number_fields: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberField>>,
    /// <p>The names of the fields in the request payload that contain your customer's primary physical address. </p>
    /// <p>Order the address fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the address fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryaddressline1": "THE_ADDRESS1", "primaryaddressline2": "THE_ADDRESS2", "primaryaddressline3": "THE_ADDRESS3" } }</code>, the address field idenfiers are <code>/form/primaryaddressline1</code>, <code>/form/primaryaddressline2</code>, and <code>/form/primaryaddressline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>, the address fields identifiers are <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>. </p> </li>
    /// </ul>
    pub address_fields: ::std::option::Option<::std::vec::Vec<crate::types::AddressField>>,
}
impl RequestInspectionAcfp {
    /// <p>The payload type for your account creation endpoint, either JSON or form encoded.</p>
    pub fn payload_type(&self) -> &crate::types::PayloadType {
        &self.payload_type
    }
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    pub fn username_field(&self) -> ::std::option::Option<&crate::types::UsernameField> {
        self.username_field.as_ref()
    }
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    pub fn password_field(&self) -> ::std::option::Option<&crate::types::PasswordField> {
        self.password_field.as_ref()
    }
    /// <p>The name of the field in the request payload that contains your customer's email. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "email": "THE_EMAIL" } }</code>, the email field specification is <code>/form/email</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>email1</code>, the email field specification is <code>email1</code>.</p> </li>
    /// </ul>
    pub fn email_field(&self) -> ::std::option::Option<&crate::types::EmailField> {
        self.email_field.as_ref()
    }
    /// <p>The names of the fields in the request payload that contain your customer's primary phone number. </p>
    /// <p>Order the phone number fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the phone number fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryphoneline1": "THE_PHONE1", "primaryphoneline2": "THE_PHONE2", "primaryphoneline3": "THE_PHONE3" } }</code>, the phone number field identifiers are <code>/form/primaryphoneline1</code>, <code>/form/primaryphoneline2</code>, and <code>/form/primaryphoneline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>, the phone number field identifiers are <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>. </p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.phone_number_fields.is_none()`.
    pub fn phone_number_fields(&self) -> &[crate::types::PhoneNumberField] {
        self.phone_number_fields.as_deref().unwrap_or_default()
    }
    /// <p>The names of the fields in the request payload that contain your customer's primary physical address. </p>
    /// <p>Order the address fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the address fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryaddressline1": "THE_ADDRESS1", "primaryaddressline2": "THE_ADDRESS2", "primaryaddressline3": "THE_ADDRESS3" } }</code>, the address field idenfiers are <code>/form/primaryaddressline1</code>, <code>/form/primaryaddressline2</code>, and <code>/form/primaryaddressline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>, the address fields identifiers are <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>. </p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.address_fields.is_none()`.
    pub fn address_fields(&self) -> &[crate::types::AddressField] {
        self.address_fields.as_deref().unwrap_or_default()
    }
}
impl RequestInspectionAcfp {
    /// Creates a new builder-style object to manufacture [`RequestInspectionAcfp`](crate::types::RequestInspectionAcfp).
    pub fn builder() -> crate::types::builders::RequestInspectionAcfpBuilder {
        crate::types::builders::RequestInspectionAcfpBuilder::default()
    }
}

/// A builder for [`RequestInspectionAcfp`](crate::types::RequestInspectionAcfp).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RequestInspectionAcfpBuilder {
    pub(crate) payload_type: ::std::option::Option<crate::types::PayloadType>,
    pub(crate) username_field: ::std::option::Option<crate::types::UsernameField>,
    pub(crate) password_field: ::std::option::Option<crate::types::PasswordField>,
    pub(crate) email_field: ::std::option::Option<crate::types::EmailField>,
    pub(crate) phone_number_fields: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberField>>,
    pub(crate) address_fields: ::std::option::Option<::std::vec::Vec<crate::types::AddressField>>,
}
impl RequestInspectionAcfpBuilder {
    /// <p>The payload type for your account creation endpoint, either JSON or form encoded.</p>
    /// This field is required.
    pub fn payload_type(mut self, input: crate::types::PayloadType) -> Self {
        self.payload_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payload type for your account creation endpoint, either JSON or form encoded.</p>
    pub fn set_payload_type(mut self, input: ::std::option::Option<crate::types::PayloadType>) -> Self {
        self.payload_type = input;
        self
    }
    /// <p>The payload type for your account creation endpoint, either JSON or form encoded.</p>
    pub fn get_payload_type(&self) -> &::std::option::Option<crate::types::PayloadType> {
        &self.payload_type
    }
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    pub fn username_field(mut self, input: crate::types::UsernameField) -> Self {
        self.username_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    pub fn set_username_field(mut self, input: ::std::option::Option<crate::types::UsernameField>) -> Self {
        self.username_field = input;
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    pub fn get_username_field(&self) -> &::std::option::Option<crate::types::UsernameField> {
        &self.username_field
    }
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    pub fn password_field(mut self, input: crate::types::PasswordField) -> Self {
        self.password_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    pub fn set_password_field(mut self, input: ::std::option::Option<crate::types::PasswordField>) -> Self {
        self.password_field = input;
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    pub fn get_password_field(&self) -> &::std::option::Option<crate::types::PasswordField> {
        &self.password_field
    }
    /// <p>The name of the field in the request payload that contains your customer's email. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "email": "THE_EMAIL" } }</code>, the email field specification is <code>/form/email</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>email1</code>, the email field specification is <code>email1</code>.</p> </li>
    /// </ul>
    pub fn email_field(mut self, input: crate::types::EmailField) -> Self {
        self.email_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's email. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "email": "THE_EMAIL" } }</code>, the email field specification is <code>/form/email</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>email1</code>, the email field specification is <code>email1</code>.</p> </li>
    /// </ul>
    pub fn set_email_field(mut self, input: ::std::option::Option<crate::types::EmailField>) -> Self {
        self.email_field = input;
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's email. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "email": "THE_EMAIL" } }</code>, the email field specification is <code>/form/email</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>email1</code>, the email field specification is <code>email1</code>.</p> </li>
    /// </ul>
    pub fn get_email_field(&self) -> &::std::option::Option<crate::types::EmailField> {
        &self.email_field
    }
    /// Appends an item to `phone_number_fields`.
    ///
    /// To override the contents of this collection use [`set_phone_number_fields`](Self::set_phone_number_fields).
    ///
    /// <p>The names of the fields in the request payload that contain your customer's primary phone number. </p>
    /// <p>Order the phone number fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the phone number fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryphoneline1": "THE_PHONE1", "primaryphoneline2": "THE_PHONE2", "primaryphoneline3": "THE_PHONE3" } }</code>, the phone number field identifiers are <code>/form/primaryphoneline1</code>, <code>/form/primaryphoneline2</code>, and <code>/form/primaryphoneline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>, the phone number field identifiers are <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>. </p> </li>
    /// </ul>
    pub fn phone_number_fields(mut self, input: crate::types::PhoneNumberField) -> Self {
        let mut v = self.phone_number_fields.unwrap_or_default();
        v.push(input);
        self.phone_number_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the fields in the request payload that contain your customer's primary phone number. </p>
    /// <p>Order the phone number fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the phone number fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryphoneline1": "THE_PHONE1", "primaryphoneline2": "THE_PHONE2", "primaryphoneline3": "THE_PHONE3" } }</code>, the phone number field identifiers are <code>/form/primaryphoneline1</code>, <code>/form/primaryphoneline2</code>, and <code>/form/primaryphoneline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>, the phone number field identifiers are <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>. </p> </li>
    /// </ul>
    pub fn set_phone_number_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberField>>) -> Self {
        self.phone_number_fields = input;
        self
    }
    /// <p>The names of the fields in the request payload that contain your customer's primary phone number. </p>
    /// <p>Order the phone number fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the phone number fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryphoneline1": "THE_PHONE1", "primaryphoneline2": "THE_PHONE2", "primaryphoneline3": "THE_PHONE3" } }</code>, the phone number field identifiers are <code>/form/primaryphoneline1</code>, <code>/form/primaryphoneline2</code>, and <code>/form/primaryphoneline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>, the phone number field identifiers are <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>. </p> </li>
    /// </ul>
    pub fn get_phone_number_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberField>> {
        &self.phone_number_fields
    }
    /// Appends an item to `address_fields`.
    ///
    /// To override the contents of this collection use [`set_address_fields`](Self::set_address_fields).
    ///
    /// <p>The names of the fields in the request payload that contain your customer's primary physical address. </p>
    /// <p>Order the address fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the address fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryaddressline1": "THE_ADDRESS1", "primaryaddressline2": "THE_ADDRESS2", "primaryaddressline3": "THE_ADDRESS3" } }</code>, the address field idenfiers are <code>/form/primaryaddressline1</code>, <code>/form/primaryaddressline2</code>, and <code>/form/primaryaddressline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>, the address fields identifiers are <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>. </p> </li>
    /// </ul>
    pub fn address_fields(mut self, input: crate::types::AddressField) -> Self {
        let mut v = self.address_fields.unwrap_or_default();
        v.push(input);
        self.address_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the fields in the request payload that contain your customer's primary physical address. </p>
    /// <p>Order the address fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the address fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryaddressline1": "THE_ADDRESS1", "primaryaddressline2": "THE_ADDRESS2", "primaryaddressline3": "THE_ADDRESS3" } }</code>, the address field idenfiers are <code>/form/primaryaddressline1</code>, <code>/form/primaryaddressline2</code>, and <code>/form/primaryaddressline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>, the address fields identifiers are <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>. </p> </li>
    /// </ul>
    pub fn set_address_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AddressField>>) -> Self {
        self.address_fields = input;
        self
    }
    /// <p>The names of the fields in the request payload that contain your customer's primary physical address. </p>
    /// <p>Order the address fields in the array exactly as they are ordered in the request payload. </p>
    /// <p>How you specify the address fields depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "primaryaddressline1": "THE_ADDRESS1", "primaryaddressline2": "THE_ADDRESS2", "primaryaddressline3": "THE_ADDRESS3" } }</code>, the address field idenfiers are <code>/form/primaryaddressline1</code>, <code>/form/primaryaddressline2</code>, and <code>/form/primaryaddressline3</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>, the address fields identifiers are <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>. </p> </li>
    /// </ul>
    pub fn get_address_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AddressField>> {
        &self.address_fields
    }
    /// Consumes the builder and constructs a [`RequestInspectionAcfp`](crate::types::RequestInspectionAcfp).
    /// This method will fail if any of the following fields are not set:
    /// - [`payload_type`](crate::types::builders::RequestInspectionAcfpBuilder::payload_type)
    pub fn build(self) -> ::std::result::Result<crate::types::RequestInspectionAcfp, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RequestInspectionAcfp {
            payload_type: self.payload_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "payload_type",
                    "payload_type was not specified but it is required when building RequestInspectionAcfp",
                )
            })?,
            username_field: self.username_field,
            password_field: self.password_field,
            email_field: self.email_field,
            phone_number_fields: self.phone_number_fields,
            address_fields: self.address_fields,
        })
    }
}
