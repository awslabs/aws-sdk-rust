// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Inspect the body of the web request. The body immediately follows the request headers.</p>
/// <p>This is used to indicate the web request component to inspect, in the <code>FieldToMatch</code> specification. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Body {
    /// <p>What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. </p>
    /// <p>The options for oversize handling are the following:</p>
    /// <ul>
    /// <li> <p> <code>CONTINUE</code> - Inspect the body normally, according to the rule inspection criteria. </p> </li>
    /// <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li>
    /// <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li>
    /// </ul>
    /// <p>You can combine the <code>MATCH</code> or <code>NO_MATCH</code> settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over 8 KB. </p>
    /// <p>Default: <code>CONTINUE</code> </p>
    #[doc(hidden)]
    pub oversize_handling: std::option::Option<crate::types::OversizeHandling>,
}
impl Body {
    /// <p>What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. </p>
    /// <p>The options for oversize handling are the following:</p>
    /// <ul>
    /// <li> <p> <code>CONTINUE</code> - Inspect the body normally, according to the rule inspection criteria. </p> </li>
    /// <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li>
    /// <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li>
    /// </ul>
    /// <p>You can combine the <code>MATCH</code> or <code>NO_MATCH</code> settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over 8 KB. </p>
    /// <p>Default: <code>CONTINUE</code> </p>
    pub fn oversize_handling(&self) -> std::option::Option<&crate::types::OversizeHandling> {
        self.oversize_handling.as_ref()
    }
}
impl Body {
    /// Creates a new builder-style object to manufacture [`Body`](crate::types::Body).
    pub fn builder() -> crate::types::builders::BodyBuilder {
        crate::types::builders::BodyBuilder::default()
    }
}

/// A builder for [`Body`](crate::types::Body).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BodyBuilder {
    pub(crate) oversize_handling: std::option::Option<crate::types::OversizeHandling>,
}
impl BodyBuilder {
    /// <p>What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. </p>
    /// <p>The options for oversize handling are the following:</p>
    /// <ul>
    /// <li> <p> <code>CONTINUE</code> - Inspect the body normally, according to the rule inspection criteria. </p> </li>
    /// <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li>
    /// <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li>
    /// </ul>
    /// <p>You can combine the <code>MATCH</code> or <code>NO_MATCH</code> settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over 8 KB. </p>
    /// <p>Default: <code>CONTINUE</code> </p>
    pub fn oversize_handling(mut self, input: crate::types::OversizeHandling) -> Self {
        self.oversize_handling = Some(input);
        self
    }
    /// <p>What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. </p>
    /// <p>The options for oversize handling are the following:</p>
    /// <ul>
    /// <li> <p> <code>CONTINUE</code> - Inspect the body normally, according to the rule inspection criteria. </p> </li>
    /// <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li>
    /// <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li>
    /// </ul>
    /// <p>You can combine the <code>MATCH</code> or <code>NO_MATCH</code> settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over 8 KB. </p>
    /// <p>Default: <code>CONTINUE</code> </p>
    pub fn set_oversize_handling(
        mut self,
        input: std::option::Option<crate::types::OversizeHandling>,
    ) -> Self {
        self.oversize_handling = input;
        self
    }
    /// Consumes the builder and constructs a [`Body`](crate::types::Body).
    pub fn build(self) -> crate::types::Body {
        crate::types::Body {
            oversize_handling: self.oversize_handling,
        }
    }
}
