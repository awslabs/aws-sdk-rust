// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Custom request handling behavior that inserts custom headers into a web request. You can add custom request handling for WAF to use when the rule action doesn't block the request. For example, <code>CaptchaAction</code> for requests with valid t okens, and <code>AllowAction</code>. </p>
/// <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the <i>WAF Developer Guide</i>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomRequestHandling {
    /// <p>The HTTP headers to insert into the request. Duplicate header names are not allowed. </p>
    /// <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the <i>WAF Developer Guide</i>. </p>
    pub insert_headers: ::std::vec::Vec<crate::types::CustomHttpHeader>,
}
impl CustomRequestHandling {
    /// <p>The HTTP headers to insert into the request. Duplicate header names are not allowed. </p>
    /// <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the <i>WAF Developer Guide</i>. </p>
    pub fn insert_headers(&self) -> &[crate::types::CustomHttpHeader] {
        use std::ops::Deref;
        self.insert_headers.deref()
    }
}
impl CustomRequestHandling {
    /// Creates a new builder-style object to manufacture [`CustomRequestHandling`](crate::types::CustomRequestHandling).
    pub fn builder() -> crate::types::builders::CustomRequestHandlingBuilder {
        crate::types::builders::CustomRequestHandlingBuilder::default()
    }
}

/// A builder for [`CustomRequestHandling`](crate::types::CustomRequestHandling).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomRequestHandlingBuilder {
    pub(crate) insert_headers: ::std::option::Option<::std::vec::Vec<crate::types::CustomHttpHeader>>,
}
impl CustomRequestHandlingBuilder {
    /// Appends an item to `insert_headers`.
    ///
    /// To override the contents of this collection use [`set_insert_headers`](Self::set_insert_headers).
    ///
    /// <p>The HTTP headers to insert into the request. Duplicate header names are not allowed. </p>
    /// <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the <i>WAF Developer Guide</i>. </p>
    pub fn insert_headers(mut self, input: crate::types::CustomHttpHeader) -> Self {
        let mut v = self.insert_headers.unwrap_or_default();
        v.push(input);
        self.insert_headers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The HTTP headers to insert into the request. Duplicate header names are not allowed. </p>
    /// <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the <i>WAF Developer Guide</i>. </p>
    pub fn set_insert_headers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomHttpHeader>>) -> Self {
        self.insert_headers = input;
        self
    }
    /// <p>The HTTP headers to insert into the request. Duplicate header names are not allowed. </p>
    /// <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the <i>WAF Developer Guide</i>. </p>
    pub fn get_insert_headers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomHttpHeader>> {
        &self.insert_headers
    }
    /// Consumes the builder and constructs a [`CustomRequestHandling`](crate::types::CustomRequestHandling).
    /// This method will fail if any of the following fields are not set:
    /// - [`insert_headers`](crate::types::builders::CustomRequestHandlingBuilder::insert_headers)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomRequestHandling, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomRequestHandling {
            insert_headers: self.insert_headers.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "insert_headers",
                    "insert_headers was not specified but it is required when building CustomRequestHandling",
                )
            })?,
        })
    }
}
