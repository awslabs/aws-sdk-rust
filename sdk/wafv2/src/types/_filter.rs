// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single logging filter, used in <code>LoggingFilter</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Filter {
    /// <p>How to handle logs that satisfy the filter's conditions and requirement. </p>
    #[doc(hidden)]
    pub behavior: std::option::Option<crate::types::FilterBehavior>,
    /// <p>Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.</p>
    #[doc(hidden)]
    pub requirement: std::option::Option<crate::types::FilterRequirement>,
    /// <p>Match conditions for the filter.</p>
    #[doc(hidden)]
    pub conditions: std::option::Option<std::vec::Vec<crate::types::Condition>>,
}
impl Filter {
    /// <p>How to handle logs that satisfy the filter's conditions and requirement. </p>
    pub fn behavior(&self) -> std::option::Option<&crate::types::FilterBehavior> {
        self.behavior.as_ref()
    }
    /// <p>Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.</p>
    pub fn requirement(&self) -> std::option::Option<&crate::types::FilterRequirement> {
        self.requirement.as_ref()
    }
    /// <p>Match conditions for the filter.</p>
    pub fn conditions(&self) -> std::option::Option<&[crate::types::Condition]> {
        self.conditions.as_deref()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::types::Filter).
    pub fn builder() -> crate::types::builders::FilterBuilder {
        crate::types::builders::FilterBuilder::default()
    }
}

/// A builder for [`Filter`](crate::types::Filter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterBuilder {
    pub(crate) behavior: std::option::Option<crate::types::FilterBehavior>,
    pub(crate) requirement: std::option::Option<crate::types::FilterRequirement>,
    pub(crate) conditions: std::option::Option<std::vec::Vec<crate::types::Condition>>,
}
impl FilterBuilder {
    /// <p>How to handle logs that satisfy the filter's conditions and requirement. </p>
    pub fn behavior(mut self, input: crate::types::FilterBehavior) -> Self {
        self.behavior = Some(input);
        self
    }
    /// <p>How to handle logs that satisfy the filter's conditions and requirement. </p>
    pub fn set_behavior(
        mut self,
        input: std::option::Option<crate::types::FilterBehavior>,
    ) -> Self {
        self.behavior = input;
        self
    }
    /// <p>Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.</p>
    pub fn requirement(mut self, input: crate::types::FilterRequirement) -> Self {
        self.requirement = Some(input);
        self
    }
    /// <p>Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.</p>
    pub fn set_requirement(
        mut self,
        input: std::option::Option<crate::types::FilterRequirement>,
    ) -> Self {
        self.requirement = input;
        self
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>Match conditions for the filter.</p>
    pub fn conditions(mut self, input: crate::types::Condition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = Some(v);
        self
    }
    /// <p>Match conditions for the filter.</p>
    pub fn set_conditions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Condition>>,
    ) -> Self {
        self.conditions = input;
        self
    }
    /// Consumes the builder and constructs a [`Filter`](crate::types::Filter).
    pub fn build(self) -> crate::types::Filter {
        crate::types::Filter {
            behavior: self.behavior,
            requirement: self.requirement,
            conditions: self.conditions,
        }
    }
}
