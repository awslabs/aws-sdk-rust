// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (&gt;) or less than (&lt;). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. </p>
/// <p>If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you could use a size constraint statement to block requests that have a request body greater than 8192 bytes.</p>
/// <p>If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI <code>/logo.jpg</code> is nine characters long.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SizeConstraintStatement {
    /// <p>The part of the web request that you want WAF to inspect. </p>
    #[doc(hidden)]
    pub field_to_match: std::option::Option<crate::types::FieldToMatch>,
    /// <p>The operator to use to compare the request part to the size setting. </p>
    #[doc(hidden)]
    pub comparison_operator: std::option::Option<crate::types::ComparisonOperator>,
    /// <p>The size, in byte, to compare to the request part, after any transformations.</p>
    #[doc(hidden)]
    pub size: i64,
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
    #[doc(hidden)]
    pub text_transformations: std::option::Option<std::vec::Vec<crate::types::TextTransformation>>,
}
impl SizeConstraintStatement {
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub fn field_to_match(&self) -> std::option::Option<&crate::types::FieldToMatch> {
        self.field_to_match.as_ref()
    }
    /// <p>The operator to use to compare the request part to the size setting. </p>
    pub fn comparison_operator(&self) -> std::option::Option<&crate::types::ComparisonOperator> {
        self.comparison_operator.as_ref()
    }
    /// <p>The size, in byte, to compare to the request part, after any transformations.</p>
    pub fn size(&self) -> i64 {
        self.size
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
    pub fn text_transformations(&self) -> std::option::Option<&[crate::types::TextTransformation]> {
        self.text_transformations.as_deref()
    }
}
impl SizeConstraintStatement {
    /// Creates a new builder-style object to manufacture [`SizeConstraintStatement`](crate::types::SizeConstraintStatement).
    pub fn builder() -> crate::types::builders::SizeConstraintStatementBuilder {
        crate::types::builders::SizeConstraintStatementBuilder::default()
    }
}

/// A builder for [`SizeConstraintStatement`](crate::types::SizeConstraintStatement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SizeConstraintStatementBuilder {
    pub(crate) field_to_match: std::option::Option<crate::types::FieldToMatch>,
    pub(crate) comparison_operator: std::option::Option<crate::types::ComparisonOperator>,
    pub(crate) size: std::option::Option<i64>,
    pub(crate) text_transformations:
        std::option::Option<std::vec::Vec<crate::types::TextTransformation>>,
}
impl SizeConstraintStatementBuilder {
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub fn field_to_match(mut self, input: crate::types::FieldToMatch) -> Self {
        self.field_to_match = Some(input);
        self
    }
    /// <p>The part of the web request that you want WAF to inspect. </p>
    pub fn set_field_to_match(
        mut self,
        input: std::option::Option<crate::types::FieldToMatch>,
    ) -> Self {
        self.field_to_match = input;
        self
    }
    /// <p>The operator to use to compare the request part to the size setting. </p>
    pub fn comparison_operator(mut self, input: crate::types::ComparisonOperator) -> Self {
        self.comparison_operator = Some(input);
        self
    }
    /// <p>The operator to use to compare the request part to the size setting. </p>
    pub fn set_comparison_operator(
        mut self,
        input: std::option::Option<crate::types::ComparisonOperator>,
    ) -> Self {
        self.comparison_operator = input;
        self
    }
    /// <p>The size, in byte, to compare to the request part, after any transformations.</p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = Some(input);
        self
    }
    /// <p>The size, in byte, to compare to the request part, after any transformations.</p>
    pub fn set_size(mut self, input: std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// Appends an item to `text_transformations`.
    ///
    /// To override the contents of this collection use [`set_text_transformations`](Self::set_text_transformations).
    ///
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
    pub fn text_transformations(mut self, input: crate::types::TextTransformation) -> Self {
        let mut v = self.text_transformations.unwrap_or_default();
        v.push(input);
        self.text_transformations = Some(v);
        self
    }
    /// <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
    pub fn set_text_transformations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TextTransformation>>,
    ) -> Self {
        self.text_transformations = input;
        self
    }
    /// Consumes the builder and constructs a [`SizeConstraintStatement`](crate::types::SizeConstraintStatement).
    pub fn build(self) -> crate::types::SizeConstraintStatement {
        crate::types::SizeConstraintStatement {
            field_to_match: self.field_to_match,
            comparison_operator: self.comparison_operator,
            size: self.size.unwrap_or_default(),
            text_transformations: self.text_transformations,
        }
    }
}
