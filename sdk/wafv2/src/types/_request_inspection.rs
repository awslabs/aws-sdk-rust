// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage. </p>
/// <p>This is part of the <code>AWSManagedRulesATPRuleSet</code> configuration in <code>ManagedRuleGroupConfig</code>.</p>
/// <p>In these settings, you specify how your application accepts login attempts by providing the request payload type and the names of the fields within the request body where the username and password are provided. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestInspection {
    /// <p>The payload type for your login endpoint, either JSON or form encoded.</p>
    pub payload_type: crate::types::PayloadType,
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    pub username_field: ::std::option::Option<crate::types::UsernameField>,
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    pub password_field: ::std::option::Option<crate::types::PasswordField>,
}
impl RequestInspection {
    /// <p>The payload type for your login endpoint, either JSON or form encoded.</p>
    pub fn payload_type(&self) -> &crate::types::PayloadType {
        &self.payload_type
    }
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    pub fn username_field(&self) -> ::std::option::Option<&crate::types::UsernameField> {
        self.username_field.as_ref()
    }
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    pub fn password_field(&self) -> ::std::option::Option<&crate::types::PasswordField> {
        self.password_field.as_ref()
    }
}
impl RequestInspection {
    /// Creates a new builder-style object to manufacture [`RequestInspection`](crate::types::RequestInspection).
    pub fn builder() -> crate::types::builders::RequestInspectionBuilder {
        crate::types::builders::RequestInspectionBuilder::default()
    }
}

/// A builder for [`RequestInspection`](crate::types::RequestInspection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RequestInspectionBuilder {
    pub(crate) payload_type: ::std::option::Option<crate::types::PayloadType>,
    pub(crate) username_field: ::std::option::Option<crate::types::UsernameField>,
    pub(crate) password_field: ::std::option::Option<crate::types::PasswordField>,
}
impl RequestInspectionBuilder {
    /// <p>The payload type for your login endpoint, either JSON or form encoded.</p>
    /// This field is required.
    pub fn payload_type(mut self, input: crate::types::PayloadType) -> Self {
        self.payload_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payload type for your login endpoint, either JSON or form encoded.</p>
    pub fn set_payload_type(mut self, input: ::std::option::Option<crate::types::PayloadType>) -> Self {
        self.payload_type = input;
        self
    }
    /// <p>The payload type for your login endpoint, either JSON or form encoded.</p>
    pub fn get_payload_type(&self) -> &::std::option::Option<crate::types::PayloadType> {
        &self.payload_type
    }
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    /// This field is required.
    pub fn username_field(mut self, input: crate::types::UsernameField) -> Self {
        self.username_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    pub fn set_username_field(mut self, input: ::std::option::Option<crate::types::UsernameField>) -> Self {
        self.username_field = input;
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's username. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "username": "THE_USERNAME" } }</code>, the username field specification is <code>/form/username</code>. </p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li>
    /// </ul>
    pub fn get_username_field(&self) -> &::std::option::Option<crate::types::UsernameField> {
        &self.username_field
    }
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn password_field(mut self, input: crate::types::PasswordField) -> Self {
        self.password_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    pub fn set_password_field(mut self, input: ::std::option::Option<crate::types::PasswordField>) -> Self {
        self.password_field = input;
        self
    }
    /// <p>The name of the field in the request payload that contains your customer's password. </p>
    /// <p>How you specify this depends on the request inspection payload type.</p>
    /// <ul>
    /// <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ "form": { "password": "THE_PASSWORD" } }</code>, the password field specification is <code>/form/password</code>.</p> </li>
    /// <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li>
    /// </ul>
    pub fn get_password_field(&self) -> &::std::option::Option<crate::types::PasswordField> {
        &self.password_field
    }
    /// Consumes the builder and constructs a [`RequestInspection`](crate::types::RequestInspection).
    /// This method will fail if any of the following fields are not set:
    /// - [`payload_type`](crate::types::builders::RequestInspectionBuilder::payload_type)
    pub fn build(self) -> ::std::result::Result<crate::types::RequestInspection, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RequestInspection {
            payload_type: self.payload_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "payload_type",
                    "payload_type was not specified but it is required when building RequestInspection",
                )
            })?,
            username_field: self.username_field,
            password_field: self.password_field,
        })
    }
}
