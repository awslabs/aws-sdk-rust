// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single label name condition for a <code>Condition</code> in a logging filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LabelNameCondition {
    /// <p>The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. </p>
    #[doc(hidden)]
    pub label_name: std::option::Option<std::string::String>,
}
impl LabelNameCondition {
    /// <p>The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. </p>
    pub fn label_name(&self) -> std::option::Option<&str> {
        self.label_name.as_deref()
    }
}
impl LabelNameCondition {
    /// Creates a new builder-style object to manufacture [`LabelNameCondition`](crate::types::LabelNameCondition).
    pub fn builder() -> crate::types::builders::LabelNameConditionBuilder {
        crate::types::builders::LabelNameConditionBuilder::default()
    }
}

/// A builder for [`LabelNameCondition`](crate::types::LabelNameCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LabelNameConditionBuilder {
    pub(crate) label_name: std::option::Option<std::string::String>,
}
impl LabelNameConditionBuilder {
    /// <p>The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. </p>
    pub fn label_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.label_name = Some(input.into());
        self
    }
    /// <p>The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. </p>
    pub fn set_label_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.label_name = input;
        self
    }
    /// Consumes the builder and constructs a [`LabelNameCondition`](crate::types::LabelNameCondition).
    pub fn build(self) -> crate::types::LabelNameCondition {
        crate::types::LabelNameCondition {
            label_name: self.label_name,
        }
    }
}
