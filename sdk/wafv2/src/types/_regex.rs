// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single regular expression. This is used in a <code>RegexPatternSet</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Regex {
    /// <p>The string representing the regular expression.</p>
    #[doc(hidden)]
    pub regex_string: std::option::Option<std::string::String>,
}
impl Regex {
    /// <p>The string representing the regular expression.</p>
    pub fn regex_string(&self) -> std::option::Option<&str> {
        self.regex_string.as_deref()
    }
}
impl Regex {
    /// Creates a new builder-style object to manufacture [`Regex`](crate::types::Regex).
    pub fn builder() -> crate::types::builders::RegexBuilder {
        crate::types::builders::RegexBuilder::default()
    }
}

/// A builder for [`Regex`](crate::types::Regex).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegexBuilder {
    pub(crate) regex_string: std::option::Option<std::string::String>,
}
impl RegexBuilder {
    /// <p>The string representing the regular expression.</p>
    pub fn regex_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.regex_string = Some(input.into());
        self
    }
    /// <p>The string representing the regular expression.</p>
    pub fn set_regex_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.regex_string = input;
        self
    }
    /// Consumes the builder and constructs a [`Regex`](crate::types::Regex).
    pub fn build(self) -> crate::types::Regex {
        crate::types::Regex {
            regex_string: self.regex_string,
        }
    }
}
