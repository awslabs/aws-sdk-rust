// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `TextTransformationType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let texttransformationtype = unimplemented!();
/// match texttransformationtype {
///     TextTransformationType::Base64Decode => { /* ... */ },
///     TextTransformationType::Base64DecodeExt => { /* ... */ },
///     TextTransformationType::CmdLine => { /* ... */ },
///     TextTransformationType::CompressWhiteSpace => { /* ... */ },
///     TextTransformationType::CssDecode => { /* ... */ },
///     TextTransformationType::EscapeSeqDecode => { /* ... */ },
///     TextTransformationType::HexDecode => { /* ... */ },
///     TextTransformationType::HtmlEntityDecode => { /* ... */ },
///     TextTransformationType::JsDecode => { /* ... */ },
///     TextTransformationType::Lowercase => { /* ... */ },
///     TextTransformationType::Md5 => { /* ... */ },
///     TextTransformationType::None => { /* ... */ },
///     TextTransformationType::NormalizePath => { /* ... */ },
///     TextTransformationType::NormalizePathWin => { /* ... */ },
///     TextTransformationType::RemoveNulls => { /* ... */ },
///     TextTransformationType::ReplaceComments => { /* ... */ },
///     TextTransformationType::ReplaceNulls => { /* ... */ },
///     TextTransformationType::SqlHexDecode => { /* ... */ },
///     TextTransformationType::UrlDecode => { /* ... */ },
///     TextTransformationType::UrlDecodeUni => { /* ... */ },
///     TextTransformationType::Utf8ToUnicode => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `texttransformationtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `TextTransformationType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `TextTransformationType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `TextTransformationType::NewFeature` is defined.
/// Specifically, when `texttransformationtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `TextTransformationType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum TextTransformationType {
    #[allow(missing_docs)] // documentation missing in model
    Base64Decode,
    #[allow(missing_docs)] // documentation missing in model
    Base64DecodeExt,
    #[allow(missing_docs)] // documentation missing in model
    CmdLine,
    #[allow(missing_docs)] // documentation missing in model
    CompressWhiteSpace,
    #[allow(missing_docs)] // documentation missing in model
    CssDecode,
    #[allow(missing_docs)] // documentation missing in model
    EscapeSeqDecode,
    #[allow(missing_docs)] // documentation missing in model
    HexDecode,
    #[allow(missing_docs)] // documentation missing in model
    HtmlEntityDecode,
    #[allow(missing_docs)] // documentation missing in model
    JsDecode,
    #[allow(missing_docs)] // documentation missing in model
    Lowercase,
    #[allow(missing_docs)] // documentation missing in model
    Md5,
    #[allow(missing_docs)] // documentation missing in model
    None,
    #[allow(missing_docs)] // documentation missing in model
    NormalizePath,
    #[allow(missing_docs)] // documentation missing in model
    NormalizePathWin,
    #[allow(missing_docs)] // documentation missing in model
    RemoveNulls,
    #[allow(missing_docs)] // documentation missing in model
    ReplaceComments,
    #[allow(missing_docs)] // documentation missing in model
    ReplaceNulls,
    #[allow(missing_docs)] // documentation missing in model
    SqlHexDecode,
    #[allow(missing_docs)] // documentation missing in model
    UrlDecode,
    #[allow(missing_docs)] // documentation missing in model
    UrlDecodeUni,
    #[allow(missing_docs)] // documentation missing in model
    Utf8ToUnicode,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for TextTransformationType {
    fn from(s: &str) -> Self {
        match s {
            "BASE64_DECODE" => TextTransformationType::Base64Decode,
            "BASE64_DECODE_EXT" => TextTransformationType::Base64DecodeExt,
            "CMD_LINE" => TextTransformationType::CmdLine,
            "COMPRESS_WHITE_SPACE" => TextTransformationType::CompressWhiteSpace,
            "CSS_DECODE" => TextTransformationType::CssDecode,
            "ESCAPE_SEQ_DECODE" => TextTransformationType::EscapeSeqDecode,
            "HEX_DECODE" => TextTransformationType::HexDecode,
            "HTML_ENTITY_DECODE" => TextTransformationType::HtmlEntityDecode,
            "JS_DECODE" => TextTransformationType::JsDecode,
            "LOWERCASE" => TextTransformationType::Lowercase,
            "MD5" => TextTransformationType::Md5,
            "NONE" => TextTransformationType::None,
            "NORMALIZE_PATH" => TextTransformationType::NormalizePath,
            "NORMALIZE_PATH_WIN" => TextTransformationType::NormalizePathWin,
            "REMOVE_NULLS" => TextTransformationType::RemoveNulls,
            "REPLACE_COMMENTS" => TextTransformationType::ReplaceComments,
            "REPLACE_NULLS" => TextTransformationType::ReplaceNulls,
            "SQL_HEX_DECODE" => TextTransformationType::SqlHexDecode,
            "URL_DECODE" => TextTransformationType::UrlDecode,
            "URL_DECODE_UNI" => TextTransformationType::UrlDecodeUni,
            "UTF8_TO_UNICODE" => TextTransformationType::Utf8ToUnicode,
            other => TextTransformationType::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for TextTransformationType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(TextTransformationType::from(s))
    }
}
impl TextTransformationType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            TextTransformationType::Base64Decode => "BASE64_DECODE",
            TextTransformationType::Base64DecodeExt => "BASE64_DECODE_EXT",
            TextTransformationType::CmdLine => "CMD_LINE",
            TextTransformationType::CompressWhiteSpace => "COMPRESS_WHITE_SPACE",
            TextTransformationType::CssDecode => "CSS_DECODE",
            TextTransformationType::EscapeSeqDecode => "ESCAPE_SEQ_DECODE",
            TextTransformationType::HexDecode => "HEX_DECODE",
            TextTransformationType::HtmlEntityDecode => "HTML_ENTITY_DECODE",
            TextTransformationType::JsDecode => "JS_DECODE",
            TextTransformationType::Lowercase => "LOWERCASE",
            TextTransformationType::Md5 => "MD5",
            TextTransformationType::None => "NONE",
            TextTransformationType::NormalizePath => "NORMALIZE_PATH",
            TextTransformationType::NormalizePathWin => "NORMALIZE_PATH_WIN",
            TextTransformationType::RemoveNulls => "REMOVE_NULLS",
            TextTransformationType::ReplaceComments => "REPLACE_COMMENTS",
            TextTransformationType::ReplaceNulls => "REPLACE_NULLS",
            TextTransformationType::SqlHexDecode => "SQL_HEX_DECODE",
            TextTransformationType::UrlDecode => "URL_DECODE",
            TextTransformationType::UrlDecodeUni => "URL_DECODE_UNI",
            TextTransformationType::Utf8ToUnicode => "UTF8_TO_UNICODE",
            TextTransformationType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BASE64_DECODE",
            "BASE64_DECODE_EXT",
            "CMD_LINE",
            "COMPRESS_WHITE_SPACE",
            "CSS_DECODE",
            "ESCAPE_SEQ_DECODE",
            "HEX_DECODE",
            "HTML_ENTITY_DECODE",
            "JS_DECODE",
            "LOWERCASE",
            "MD5",
            "NONE",
            "NORMALIZE_PATH",
            "NORMALIZE_PATH_WIN",
            "REMOVE_NULLS",
            "REPLACE_COMMENTS",
            "REPLACE_NULLS",
            "SQL_HEX_DECODE",
            "URL_DECODE",
            "URL_DECODE_UNI",
            "UTF8_TO_UNICODE",
        ]
    }
}
impl AsRef<str> for TextTransformationType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
