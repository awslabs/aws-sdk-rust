// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn ip_set_correct_errors(mut builder: crate::types::builders::IpSetBuilder) -> crate::types::builders::IpSetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.ip_address_version.is_none() {
        builder.ip_address_version = "no value was set".parse::<crate::types::IpAddressVersion>().ok()
    }
    if builder.addresses.is_none() {
        builder.addresses = Some(Default::default())
    }
    builder
}

pub(crate) fn logging_configuration_correct_errors(
    mut builder: crate::types::builders::LoggingConfigurationBuilder,
) -> crate::types::builders::LoggingConfigurationBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.log_destination_configs.is_none() {
        builder.log_destination_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn managed_rule_set_correct_errors(
    mut builder: crate::types::builders::ManagedRuleSetBuilder,
) -> crate::types::builders::ManagedRuleSetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_group_correct_errors(mut builder: crate::types::builders::RuleGroupBuilder) -> crate::types::builders::RuleGroupBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.capacity.is_none() {
        builder.capacity = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.visibility_config.is_none() {
        builder.visibility_config = {
            let builder = crate::types::builders::VisibilityConfigBuilder::default();
            crate::serde_util::visibility_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn time_window_correct_errors(mut builder: crate::types::builders::TimeWindowBuilder) -> crate::types::builders::TimeWindowBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn web_acl_correct_errors(mut builder: crate::types::builders::WebAclBuilder) -> crate::types::builders::WebAclBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.default_action.is_none() {
        builder.default_action = {
            let builder = crate::types::builders::DefaultActionBuilder::default();
            Some(builder.build())
        }
    }
    if builder.visibility_config.is_none() {
        builder.visibility_config = {
            let builder = crate::types::builders::VisibilityConfigBuilder::default();
            crate::serde_util::visibility_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn logging_filter_correct_errors(
    mut builder: crate::types::builders::LoggingFilterBuilder,
) -> crate::types::builders::LoggingFilterBuilder {
    if builder.filters.is_none() {
        builder.filters = Some(Default::default())
    }
    if builder.default_behavior.is_none() {
        builder.default_behavior = "no value was set".parse::<crate::types::FilterBehavior>().ok()
    }
    builder
}

pub(crate) fn sampled_http_request_correct_errors(
    mut builder: crate::types::builders::SampledHttpRequestBuilder,
) -> crate::types::builders::SampledHttpRequestBuilder {
    if builder.request.is_none() {
        builder.request = {
            let builder = crate::types::builders::HttpRequestBuilder::default();
            Some(builder.build())
        }
    }
    if builder.weight.is_none() {
        builder.weight = Some(Default::default())
    }
    builder
}

pub(crate) fn visibility_config_correct_errors(
    mut builder: crate::types::builders::VisibilityConfigBuilder,
) -> crate::types::builders::VisibilityConfigBuilder {
    if builder.sampled_requests_enabled.is_none() {
        builder.sampled_requests_enabled = Some(Default::default())
    }
    if builder.cloud_watch_metrics_enabled.is_none() {
        builder.cloud_watch_metrics_enabled = Some(Default::default())
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_response_body_correct_errors(
    mut builder: crate::types::builders::CustomResponseBodyBuilder,
) -> crate::types::builders::CustomResponseBodyBuilder {
    if builder.content_type.is_none() {
        builder.content_type = "no value was set".parse::<crate::types::ResponseContentType>().ok()
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    builder
}

pub(crate) fn firewall_manager_rule_group_correct_errors(
    mut builder: crate::types::builders::FirewallManagerRuleGroupBuilder,
) -> crate::types::builders::FirewallManagerRuleGroupBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.firewall_manager_statement.is_none() {
        builder.firewall_manager_statement = {
            let builder = crate::types::builders::FirewallManagerStatementBuilder::default();
            Some(builder.build())
        }
    }
    if builder.override_action.is_none() {
        builder.override_action = {
            let builder = crate::types::builders::OverrideActionBuilder::default();
            Some(builder.build())
        }
    }
    if builder.visibility_config.is_none() {
        builder.visibility_config = {
            let builder = crate::types::builders::VisibilityConfigBuilder::default();
            crate::serde_util::visibility_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn immunity_time_property_correct_errors(
    mut builder: crate::types::builders::ImmunityTimePropertyBuilder,
) -> crate::types::builders::ImmunityTimePropertyBuilder {
    if builder.immunity_time.is_none() {
        builder.immunity_time = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_correct_errors(mut builder: crate::types::builders::RuleBuilder) -> crate::types::builders::RuleBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.statement.is_none() {
        builder.statement = {
            let builder = crate::types::builders::StatementBuilder::default();
            Some(builder.build())
        }
    }
    if builder.visibility_config.is_none() {
        builder.visibility_config = {
            let builder = crate::types::builders::VisibilityConfigBuilder::default();
            crate::serde_util::visibility_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn cookies_correct_errors(mut builder: crate::types::builders::CookiesBuilder) -> crate::types::builders::CookiesBuilder {
    if builder.match_pattern.is_none() {
        builder.match_pattern = {
            let builder = crate::types::builders::CookieMatchPatternBuilder::default();
            Some(builder.build())
        }
    }
    if builder.match_scope.is_none() {
        builder.match_scope = "no value was set".parse::<crate::types::MapMatchScope>().ok()
    }
    if builder.oversize_handling.is_none() {
        builder.oversize_handling = "no value was set".parse::<crate::types::OversizeHandling>().ok()
    }
    builder
}

pub(crate) fn custom_request_handling_correct_errors(
    mut builder: crate::types::builders::CustomRequestHandlingBuilder,
) -> crate::types::builders::CustomRequestHandlingBuilder {
    if builder.insert_headers.is_none() {
        builder.insert_headers = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_response_correct_errors(
    mut builder: crate::types::builders::CustomResponseBuilder,
) -> crate::types::builders::CustomResponseBuilder {
    if builder.response_code.is_none() {
        builder.response_code = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_correct_errors(mut builder: crate::types::builders::FilterBuilder) -> crate::types::builders::FilterBuilder {
    if builder.behavior.is_none() {
        builder.behavior = "no value was set".parse::<crate::types::FilterBehavior>().ok()
    }
    if builder.requirement.is_none() {
        builder.requirement = "no value was set".parse::<crate::types::FilterRequirement>().ok()
    }
    if builder.conditions.is_none() {
        builder.conditions = Some(Default::default())
    }
    builder
}

pub(crate) fn header_order_correct_errors(mut builder: crate::types::builders::HeaderOrderBuilder) -> crate::types::builders::HeaderOrderBuilder {
    if builder.oversize_handling.is_none() {
        builder.oversize_handling = "no value was set".parse::<crate::types::OversizeHandling>().ok()
    }
    builder
}

pub(crate) fn headers_correct_errors(mut builder: crate::types::builders::HeadersBuilder) -> crate::types::builders::HeadersBuilder {
    if builder.match_pattern.is_none() {
        builder.match_pattern = {
            let builder = crate::types::builders::HeaderMatchPatternBuilder::default();
            Some(builder.build())
        }
    }
    if builder.match_scope.is_none() {
        builder.match_scope = "no value was set".parse::<crate::types::MapMatchScope>().ok()
    }
    if builder.oversize_handling.is_none() {
        builder.oversize_handling = "no value was set".parse::<crate::types::OversizeHandling>().ok()
    }
    builder
}

pub(crate) fn ja3_fingerprint_correct_errors(
    mut builder: crate::types::builders::Ja3FingerprintBuilder,
) -> crate::types::builders::Ja3FingerprintBuilder {
    if builder.fallback_behavior.is_none() {
        builder.fallback_behavior = "no value was set".parse::<crate::types::FallbackBehavior>().ok()
    }
    builder
}

pub(crate) fn json_body_correct_errors(mut builder: crate::types::builders::JsonBodyBuilder) -> crate::types::builders::JsonBodyBuilder {
    if builder.match_pattern.is_none() {
        builder.match_pattern = {
            let builder = crate::types::builders::JsonMatchPatternBuilder::default();
            Some(builder.build())
        }
    }
    if builder.match_scope.is_none() {
        builder.match_scope = "no value was set".parse::<crate::types::JsonMatchScope>().ok()
    }
    builder
}

pub(crate) fn label_correct_errors(mut builder: crate::types::builders::LabelBuilder) -> crate::types::builders::LabelBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn request_body_associated_resource_type_config_correct_errors(
    mut builder: crate::types::builders::RequestBodyAssociatedResourceTypeConfigBuilder,
) -> crate::types::builders::RequestBodyAssociatedResourceTypeConfigBuilder {
    if builder.default_size_inspection_limit.is_none() {
        builder.default_size_inspection_limit = "no value was set".parse::<crate::types::SizeInspectionLimit>().ok()
    }
    builder
}

pub(crate) fn single_header_correct_errors(mut builder: crate::types::builders::SingleHeaderBuilder) -> crate::types::builders::SingleHeaderBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn single_query_argument_correct_errors(
    mut builder: crate::types::builders::SingleQueryArgumentBuilder,
) -> crate::types::builders::SingleQueryArgumentBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn and_statement_correct_errors(mut builder: crate::types::builders::AndStatementBuilder) -> crate::types::builders::AndStatementBuilder {
    if builder.statements.is_none() {
        builder.statements = Some(Default::default())
    }
    builder
}

pub(crate) fn byte_match_statement_correct_errors(
    mut builder: crate::types::builders::ByteMatchStatementBuilder,
) -> crate::types::builders::ByteMatchStatementBuilder {
    if builder.search_string.is_none() {
        builder.search_string = Some(::aws_smithy_types::Blob::new(""))
    }
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            Some(builder.build())
        }
    }
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    if builder.positional_constraint.is_none() {
        builder.positional_constraint = "no value was set".parse::<crate::types::PositionalConstraint>().ok()
    }
    builder
}

pub(crate) fn ip_set_reference_statement_correct_errors(
    mut builder: crate::types::builders::IpSetReferenceStatementBuilder,
) -> crate::types::builders::IpSetReferenceStatementBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn label_match_statement_correct_errors(
    mut builder: crate::types::builders::LabelMatchStatementBuilder,
) -> crate::types::builders::LabelMatchStatementBuilder {
    if builder.scope.is_none() {
        builder.scope = "no value was set".parse::<crate::types::LabelMatchScope>().ok()
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn managed_rule_group_statement_correct_errors(
    mut builder: crate::types::builders::ManagedRuleGroupStatementBuilder,
) -> crate::types::builders::ManagedRuleGroupStatementBuilder {
    if builder.vendor_name.is_none() {
        builder.vendor_name = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn not_statement_correct_errors(mut builder: crate::types::builders::NotStatementBuilder) -> crate::types::builders::NotStatementBuilder {
    if builder.statement.is_none() {
        builder.statement = {
            let builder = crate::types::builders::StatementBuilder::default();
            Some(builder.build()).map(::std::boxed::Box::new)
        }
    }
    builder
}

pub(crate) fn or_statement_correct_errors(mut builder: crate::types::builders::OrStatementBuilder) -> crate::types::builders::OrStatementBuilder {
    if builder.statements.is_none() {
        builder.statements = Some(Default::default())
    }
    builder
}

pub(crate) fn rate_based_statement_correct_errors(
    mut builder: crate::types::builders::RateBasedStatementBuilder,
) -> crate::types::builders::RateBasedStatementBuilder {
    if builder.limit.is_none() {
        builder.limit = Some(Default::default())
    }
    if builder.aggregate_key_type.is_none() {
        builder.aggregate_key_type = "no value was set".parse::<crate::types::RateBasedStatementAggregateKeyType>().ok()
    }
    builder
}

pub(crate) fn regex_match_statement_correct_errors(
    mut builder: crate::types::builders::RegexMatchStatementBuilder,
) -> crate::types::builders::RegexMatchStatementBuilder {
    if builder.regex_string.is_none() {
        builder.regex_string = Some(Default::default())
    }
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            Some(builder.build())
        }
    }
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn regex_pattern_set_reference_statement_correct_errors(
    mut builder: crate::types::builders::RegexPatternSetReferenceStatementBuilder,
) -> crate::types::builders::RegexPatternSetReferenceStatementBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            Some(builder.build())
        }
    }
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_group_reference_statement_correct_errors(
    mut builder: crate::types::builders::RuleGroupReferenceStatementBuilder,
) -> crate::types::builders::RuleGroupReferenceStatementBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn size_constraint_statement_correct_errors(
    mut builder: crate::types::builders::SizeConstraintStatementBuilder,
) -> crate::types::builders::SizeConstraintStatementBuilder {
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            Some(builder.build())
        }
    }
    if builder.comparison_operator.is_none() {
        builder.comparison_operator = "no value was set".parse::<crate::types::ComparisonOperator>().ok()
    }
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn sqli_match_statement_correct_errors(
    mut builder: crate::types::builders::SqliMatchStatementBuilder,
) -> crate::types::builders::SqliMatchStatementBuilder {
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            Some(builder.build())
        }
    }
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn xss_match_statement_correct_errors(
    mut builder: crate::types::builders::XssMatchStatementBuilder,
) -> crate::types::builders::XssMatchStatementBuilder {
    if builder.field_to_match.is_none() {
        builder.field_to_match = {
            let builder = crate::types::builders::FieldToMatchBuilder::default();
            Some(builder.build())
        }
    }
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_http_header_correct_errors(
    mut builder: crate::types::builders::CustomHttpHeaderBuilder,
) -> crate::types::builders::CustomHttpHeaderBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn forwarded_ip_config_correct_errors(
    mut builder: crate::types::builders::ForwardedIpConfigBuilder,
) -> crate::types::builders::ForwardedIpConfigBuilder {
    if builder.header_name.is_none() {
        builder.header_name = Some(Default::default())
    }
    if builder.fallback_behavior.is_none() {
        builder.fallback_behavior = "no value was set".parse::<crate::types::FallbackBehavior>().ok()
    }
    builder
}

pub(crate) fn ip_set_forwarded_ip_config_correct_errors(
    mut builder: crate::types::builders::IpSetForwardedIpConfigBuilder,
) -> crate::types::builders::IpSetForwardedIpConfigBuilder {
    if builder.header_name.is_none() {
        builder.header_name = Some(Default::default())
    }
    if builder.fallback_behavior.is_none() {
        builder.fallback_behavior = "no value was set".parse::<crate::types::FallbackBehavior>().ok()
    }
    if builder.position.is_none() {
        builder.position = "no value was set".parse::<crate::types::ForwardedIpPosition>().ok()
    }
    builder
}

pub(crate) fn action_condition_correct_errors(
    mut builder: crate::types::builders::ActionConditionBuilder,
) -> crate::types::builders::ActionConditionBuilder {
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::ActionValue>().ok()
    }
    builder
}

pub(crate) fn excluded_rule_correct_errors(mut builder: crate::types::builders::ExcludedRuleBuilder) -> crate::types::builders::ExcludedRuleBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn label_name_condition_correct_errors(
    mut builder: crate::types::builders::LabelNameConditionBuilder,
) -> crate::types::builders::LabelNameConditionBuilder {
    if builder.label_name.is_none() {
        builder.label_name = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_action_override_correct_errors(
    mut builder: crate::types::builders::RuleActionOverrideBuilder,
) -> crate::types::builders::RuleActionOverrideBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.action_to_use.is_none() {
        builder.action_to_use = {
            let builder = crate::types::builders::RuleActionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn text_transformation_correct_errors(
    mut builder: crate::types::builders::TextTransformationBuilder,
) -> crate::types::builders::TextTransformationBuilder {
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::TextTransformationType>().ok()
    }
    builder
}

pub(crate) fn aws_managed_rules_acfp_rule_set_correct_errors(
    mut builder: crate::types::builders::AwsManagedRulesAcfpRuleSetBuilder,
) -> crate::types::builders::AwsManagedRulesAcfpRuleSetBuilder {
    if builder.creation_path.is_none() {
        builder.creation_path = Some(Default::default())
    }
    if builder.registration_page_path.is_none() {
        builder.registration_page_path = Some(Default::default())
    }
    if builder.request_inspection.is_none() {
        builder.request_inspection = {
            let builder = crate::types::builders::RequestInspectionAcfpBuilder::default();
            crate::serde_util::request_inspection_acfp_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn aws_managed_rules_atp_rule_set_correct_errors(
    mut builder: crate::types::builders::AwsManagedRulesAtpRuleSetBuilder,
) -> crate::types::builders::AwsManagedRulesAtpRuleSetBuilder {
    if builder.login_path.is_none() {
        builder.login_path = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_managed_rules_bot_control_rule_set_correct_errors(
    mut builder: crate::types::builders::AwsManagedRulesBotControlRuleSetBuilder,
) -> crate::types::builders::AwsManagedRulesBotControlRuleSetBuilder {
    if builder.inspection_level.is_none() {
        builder.inspection_level = "no value was set".parse::<crate::types::InspectionLevel>().ok()
    }
    builder
}

pub(crate) fn password_field_correct_errors(
    mut builder: crate::types::builders::PasswordFieldBuilder,
) -> crate::types::builders::PasswordFieldBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn rate_limit_cookie_correct_errors(
    mut builder: crate::types::builders::RateLimitCookieBuilder,
) -> crate::types::builders::RateLimitCookieBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn rate_limit_header_correct_errors(
    mut builder: crate::types::builders::RateLimitHeaderBuilder,
) -> crate::types::builders::RateLimitHeaderBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn rate_limit_label_namespace_correct_errors(
    mut builder: crate::types::builders::RateLimitLabelNamespaceBuilder,
) -> crate::types::builders::RateLimitLabelNamespaceBuilder {
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    builder
}

pub(crate) fn rate_limit_query_argument_correct_errors(
    mut builder: crate::types::builders::RateLimitQueryArgumentBuilder,
) -> crate::types::builders::RateLimitQueryArgumentBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn rate_limit_query_string_correct_errors(
    mut builder: crate::types::builders::RateLimitQueryStringBuilder,
) -> crate::types::builders::RateLimitQueryStringBuilder {
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn rate_limit_uri_path_correct_errors(
    mut builder: crate::types::builders::RateLimitUriPathBuilder,
) -> crate::types::builders::RateLimitUriPathBuilder {
    if builder.text_transformations.is_none() {
        builder.text_transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn username_field_correct_errors(
    mut builder: crate::types::builders::UsernameFieldBuilder,
) -> crate::types::builders::UsernameFieldBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn request_inspection_correct_errors(
    mut builder: crate::types::builders::RequestInspectionBuilder,
) -> crate::types::builders::RequestInspectionBuilder {
    if builder.payload_type.is_none() {
        builder.payload_type = "no value was set".parse::<crate::types::PayloadType>().ok()
    }
    if builder.username_field.is_none() {
        builder.username_field = {
            let builder = crate::types::builders::UsernameFieldBuilder::default();
            crate::serde_util::username_field_correct_errors(builder).build().ok()
        }
    }
    if builder.password_field.is_none() {
        builder.password_field = {
            let builder = crate::types::builders::PasswordFieldBuilder::default();
            crate::serde_util::password_field_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn request_inspection_acfp_correct_errors(
    mut builder: crate::types::builders::RequestInspectionAcfpBuilder,
) -> crate::types::builders::RequestInspectionAcfpBuilder {
    if builder.payload_type.is_none() {
        builder.payload_type = "no value was set".parse::<crate::types::PayloadType>().ok()
    }
    builder
}

pub(crate) fn email_field_correct_errors(mut builder: crate::types::builders::EmailFieldBuilder) -> crate::types::builders::EmailFieldBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn response_inspection_body_contains_correct_errors(
    mut builder: crate::types::builders::ResponseInspectionBodyContainsBuilder,
) -> crate::types::builders::ResponseInspectionBodyContainsBuilder {
    if builder.success_strings.is_none() {
        builder.success_strings = Some(Default::default())
    }
    if builder.failure_strings.is_none() {
        builder.failure_strings = Some(Default::default())
    }
    builder
}

pub(crate) fn response_inspection_header_correct_errors(
    mut builder: crate::types::builders::ResponseInspectionHeaderBuilder,
) -> crate::types::builders::ResponseInspectionHeaderBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.success_values.is_none() {
        builder.success_values = Some(Default::default())
    }
    if builder.failure_values.is_none() {
        builder.failure_values = Some(Default::default())
    }
    builder
}

pub(crate) fn response_inspection_json_correct_errors(
    mut builder: crate::types::builders::ResponseInspectionJsonBuilder,
) -> crate::types::builders::ResponseInspectionJsonBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.success_values.is_none() {
        builder.success_values = Some(Default::default())
    }
    if builder.failure_values.is_none() {
        builder.failure_values = Some(Default::default())
    }
    builder
}

pub(crate) fn response_inspection_status_code_correct_errors(
    mut builder: crate::types::builders::ResponseInspectionStatusCodeBuilder,
) -> crate::types::builders::ResponseInspectionStatusCodeBuilder {
    if builder.success_codes.is_none() {
        builder.success_codes = Some(Default::default())
    }
    if builder.failure_codes.is_none() {
        builder.failure_codes = Some(Default::default())
    }
    builder
}

pub(crate) fn address_field_correct_errors(mut builder: crate::types::builders::AddressFieldBuilder) -> crate::types::builders::AddressFieldBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn phone_number_field_correct_errors(
    mut builder: crate::types::builders::PhoneNumberFieldBuilder,
) -> crate::types::builders::PhoneNumberFieldBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    builder
}
